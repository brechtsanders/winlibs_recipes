export NAME="Pangolin"
export STATUS=
export URL=https://github.com/stevenlovegrove/Pangolin
export BASENAME=pangolin
export DESCRIPTION="Pangolin is a lightweight portable rapid development library for managing OpenGL display / interaction and abstracting video input. At its heart is a simple OpenGl viewport manager which can help to modularise 3D visualisation without adding to its complexity, and offers an advanced but intuitive 3D navigation handler. Pangolin also provides a mechanism for manipulating program variables through config files and ui integration, and has a flexible real-time plotter for visualising graphical data."
export CATEGORY=graphics,hardware
export TYPE=library
#export VERSION=0.5
#export VERSIONDATE=20171105
#export VERSION=0.6
#export VERSIONDATE=20210422
export VERSION=0.8
export VERSIONDATE=20220503
####Could not find pthread
#export VERSION=0.9
#export VERSIONDATE=20240114
####components/pango_image/src/image_io_raw.cpp:67:41: error: 'Eigen' was not declared in this scope
wl-showstatus --package-version
#export DEPENDENCIES=pthreads,eigen,ffmpeg2,libuvc,libpng,libjpeg,libtiff,openexr,libusb
export DEPENDENCIES=pthreads,eigen,libav,libuvc,libpng,libjpeg,libtiff,openexr,libusb
export OPTIONALDEPENDENCIES=libdc1394
export BUILDDEPENDENCIES=cmake
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENCE
export LICENSETYPE=MIT
export DOWNLOADURL="https://github.com/stevenlovegrove/Pangolin/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/stevenlovegrove/Pangolin/archive/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#mv $TARBALLDIR/$BASENAME/v$VERSION.tar.gz $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
wl-wait4deps
wl-showstatus extract
#tar xz --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
tar xz --force-local -f $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd Pangolin-$VERSION
# fix missing M_PI in src/video/video.cpp
mv src/video/video.cpp src/video/video.cpp.bak &&
echo "#undef __STRICT_ANSI__" > src/video/video.cpp &&
cat src/video/video.cpp.bak >> src/video/video.cpp
# fix missing M_PI in src/video/video_output.cpp
mv src/video/video_output.cpp src/video/video_output.cpp.bak &&
echo "#undef __STRICT_ANSI__" > src/video/video_output.cpp &&
cat src/video/video_output.cpp.bak >> src/video/video_output.cpp
# fix missing WM_MOUSEHWHEEL in src/display/device/display_win.cpp
mv src/display/device/display_win.cpp src/display/device/display_win.cpp.bak &&
echo "#define _WIN32_WINNT 0x0600" > src/display/device/display_win.cpp &&
cat src/display/device/display_win.cpp.bak >> src/display/device/display_win.cpp
# fix already defined _serialize in include/pangolin/utils/picojson.h (version >= 0.6)
sed -i.bak -e "s/_serialize/PICOJSON&/g" include/pangolin/utils/picojson.h
# fix missing uint8_t in components/pango_image/src/image_io_jpg.cpp (version >= 0.8)
for F in $(grep -l "u*int[0-9]*_t" $(find -name '*.cpp' -or -name '*.h*')); do
 mv $F $F.bak &&
 echo "#include <cstdint>" >> $F &&
 cat $F.bak >> $F
done
## remove pthreads detection from src/CMakeLists.txt (version <= 0.6)
#mv src/CMakeLists.txt src/CMakeLists.txt.bak &&
#grep -v "find_package(pthread" src/CMakeLists.txt.bak > src/CMakeLists.txt
# fix detection of ptreads in cmake/Findpthread.cmake (version >= 0.8)
sed -i.bak -e "s?c:/dev/sysroot32/usr?$(cygpath -m $MINGWDIR/$RUNPLATFORM)?" cmake/Findpthread.cmake
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# #cmake.exe -Wno-dev -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -Dpthread_LIBRARIES:STRING=-lpthread -DBUILD_EXTERN_GLEW:BOOL=OFF -DBUILD_EXTERN_LIBJPEG:BOOL=OFF -DBUILD_EXTERN_LIBPNG:BOOL=OFF -DBUILD_EXAMPLES:BOOL=OFF -S. -Bbuild_static &&
# cmake.exe -Wno-dev -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -Dpthread_LIBRARIES:STRING=-lpthread -DBUILD_EXTERN_GLEW:BOOL=OFF -DBUILD_EXTERN_LIBJPEG:BOOL=OFF -DBUILD_EXTERN_LIBPNG:BOOL=OFF -DBUILD_EXAMPLES:BOOL=OFF -DAVCODEC_INCLUDE_DIR:PATH=$MINGWPREFIX/libav/include -DAVCODEC_LIBRARY:FILEPATH=$MINGWPREFIX/libav/lib/libavcodec.a -DAVFORMAT_INCLUDE_DIR:PATH=$MINGWPREFIX/libav/include -DAVFORMAT_LIBRARY:FILEPATH=$MINGWPREFIX/libav/lib/libavformat.a -DAVUTIL_INCLUDE_DIR:PATH=$MINGWPREFIX/libav/include -DAVUTIL_LIBRARY:FILEPATH=$MINGWPREFIX/libav/lib/libavutil.a -S. -Bbuild_static &&
# wl-showstatus configure &&
# #cmake.exe -Wno-dev -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -Dpthread_LIBRARIES:STRING=-lpthread -DBUILD_EXTERN_GLEW:BOOL=OFF -DBUILD_EXTERN_LIBJPEG:BOOL=OFF -DBUILD_EXTERN_LIBPNG:BOOL=OFF -DBUILD_EXAMPLES:BOOL=OFF -S. -Bbuild_shared &&
# #PKG_CONFIG_PATH=$MINGWPREFIX/libav/lib/pkgconfig${PKG_CONFIG_PATH:+:$PKG_CONFIG_PATH} cmake.exe -Wno-dev -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -Dpthread_LIBRARIES:STRING=-lpthread -DBUILD_EXTERN_GLEW:BOOL=OFF -DBUILD_EXTERN_LIBJPEG:BOOL=OFF -DBUILD_EXTERN_LIBPNG:BOOL=OFF -DBUILD_EXAMPLES:BOOL=OFF -S. -Bbuild_shared &&
# PKG_CONFIG_PATH=$MINGWPREFIX/libav/lib/pkgconfig${PKG_CONFIG_PATH:+:$PKG_CONFIG_PATH} cmake.exe -Wno-dev -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -Dpthread_LIBRARIES:STRING=-lpthread -DBUILD_EXTERN_GLEW:BOOL=OFF -DBUILD_EXTERN_LIBJPEG:BOOL=OFF -DBUILD_EXTERN_LIBPNG:BOOL=OFF -DBUILD_EXAMPLES:BOOL=OFF -DAVCODEC_INCLUDE_DIR:PATH=$MINGWPREFIX/libav/include -DAVCODEC_LIBRARY:FILEPATH=$MINGWPREFIX/libav/lib/libavcodec.dll.a -DAVFORMAT_INCLUDE_DIR:PATH=$MINGWPREFIX/libav/include -DAVFORMAT_LIBRARY:FILEPATH=$MINGWPREFIX/libav/lib/libavformat.dll.a -DAVUTIL_INCLUDE_DIR:PATH=$MINGWPREFIX/libav/include -DAVUTIL_LIBRARY:FILEPATH=$MINGWPREFIX/libav/lib/libavutil.dll.a -S. -Bbuild_shared &&
# wl-showstatus build-install &&
# make -Cbuild_static install/strip &&
# wl-showstatus build-install &&
# make -Cbuild_shared install/strip &&
# mkdir -p $INSTALLPREFIX/bin &&
# #strip $INSTALLPREFIX/lib/*.dll &&
# #mv -f $INSTALLPREFIX/lib/*.dll $INSTALLPREFIX/bin/ &&
# strip $INSTALLPREFIX/bin/*.{dll,exe} &&
# # fix absolute link in .cmake file(s)
# sed -i -e "s?$(echo $INSTALLPREFIX|sed -e "s?^/\([a-zA-Z]\)/?\1:/?")?\${CMAKE_CURRENT_LIST_FILE}/../../../..?g" $INSTALLPREFIX/lib/cmake/Pangolin/PangolinTargets-release.cmake &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf Pangolin-$VERSION
mkdir -p build_static build_shared &&
 wl-showstatus configure &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -Dpthread_LIBRARIES:STRING=-lpthread -DBUILD_EXTERN_GLEW:BOOL=OFF -DBUILD_EXTERN_LIBJPEG:BOOL=OFF -DBUILD_EXTERN_LIBPNG:BOOL=OFF -DBUILD_EXAMPLES:BOOL=OFF -DAVCODEC_INCLUDE_DIR:PATH=$MINGWPREFIX/libav/include -DAVCODEC_LIBRARY:FILEPATH=$MINGWPREFIX/libav/lib/libavcodec.a -DAVFORMAT_INCLUDE_DIR:PATH=$MINGWPREFIX/libav/include -DAVFORMAT_LIBRARY:FILEPATH=$MINGWPREFIX/libav/lib/libavformat.a -DAVUTIL_INCLUDE_DIR:PATH=$MINGWPREFIX/libav/include -DAVUTIL_LIBRARY:FILEPATH=$MINGWPREFIX/libav/lib/libavutil.a -S. -Bbuild_static &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -Dpthread_LIBRARIES:STRING=-lpthread -DBUILD_EXTERN_GLEW:BOOL=OFF -DBUILD_EXTERN_LIBJPEG:BOOL=OFF -DBUILD_EXTERN_LIBPNG:BOOL=OFF -DBUILD_EXAMPLES:BOOL=OFF -DAVCODEC_INCLUDE_DIR:PATH=$MINGWPREFIX/libav/include -DAVCODEC_LIBRARY:FILEPATH=$MINGWPREFIX/libav/lib/libavcodec.a -DAVFORMAT_INCLUDE_DIR:PATH=$MINGWPREFIX/libav/include -DAVFORMAT_LIBRARY:FILEPATH=$MINGWPREFIX/libav/lib/libavformat.a -DAVUTIL_INCLUDE_DIR:PATH=$MINGWPREFIX/libav/include -DAVUTIL_LIBRARY:FILEPATH=$MINGWPREFIX/libav/lib/libavutil.a -DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) -S. -Bbuild_static &&
 wl-showstatus configure &&
 #PKG_CONFIG_PATH=$MINGWPREFIX/libav/lib/pkgconfig${PKG_CONFIG_PATH:+:$PKG_CONFIG_PATH} cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -Dpthread_LIBRARIES:STRING=-lpthread -DBUILD_EXTERN_GLEW:BOOL=OFF -DBUILD_EXTERN_LIBJPEG:BOOL=OFF -DBUILD_EXTERN_LIBPNG:BOOL=OFF -DBUILD_EXAMPLES:BOOL=OFF -DAVCODEC_INCLUDE_DIR:PATH=$MINGWPREFIX/libav/include -DAVCODEC_LIBRARY:FILEPATH=$MINGWPREFIX/libav/lib/libavcodec.dll.a -DAVFORMAT_INCLUDE_DIR:PATH=$MINGWPREFIX/libav/include -DAVFORMAT_LIBRARY:FILEPATH=$MINGWPREFIX/libav/lib/libavformat.dll.a -DAVUTIL_INCLUDE_DIR:PATH=$MINGWPREFIX/libav/include -DAVUTIL_LIBRARY:FILEPATH=$MINGWPREFIX/libav/lib/libavutil.dll.a -S. -Bbuild_shared &&
 #PKG_CONFIG_PATH=$MINGWPREFIX/libav/lib/pkgconfig${PKG_CONFIG_PATH:+:$PKG_CONFIG_PATH} cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -Dpthread_LIBRARIES:STRING=-lpthread -DBUILD_EXTERN_GLEW:BOOL=OFF -DBUILD_EXTERN_LIBJPEG:BOOL=OFF -DBUILD_EXTERN_LIBPNG:BOOL=OFF -DBUILD_EXAMPLES:BOOL=OFF -DAVCODEC_INCLUDE_DIR:PATH=$MINGWPREFIX/libav/include -DAVCODEC_LIBRARY:FILEPATH=$MINGWPREFIX/libav/lib/libavcodec.dll.a -DAVFORMAT_INCLUDE_DIR:PATH=$MINGWPREFIX/libav/include -DAVFORMAT_LIBRARY:FILEPATH=$MINGWPREFIX/libav/lib/libavformat.dll.a -DAVUTIL_INCLUDE_DIR:PATH=$MINGWPREFIX/libav/include -DAVUTIL_LIBRARY:FILEPATH=$MINGWPREFIX/libav/lib/libavutil.dll.a -DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) -S. -Bbuild_shared &&
 PKG_CONFIG_PATH=$MINGWPREFIX/libav/lib/pkgconfig${PKG_CONFIG_PATH:+:$PKG_CONFIG_PATH} cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -Dpthread_LIBRARIES:STRING=-lpthread -DBUILD_EXTERN_GLEW:BOOL=OFF -DBUILD_EXTERN_LIBJPEG:BOOL=OFF -DBUILD_EXTERN_LIBPNG:BOOL=OFF -DBUILD_EXAMPLES:BOOL=OFF -DAVCODEC_INCLUDE_DIR:PATH=$MINGWPREFIX/libav/include -DAVCODEC_LIBRARY:FILEPATH=$MINGWPREFIX/libav/lib/libavcodec.dll.a -DAVFORMAT_INCLUDE_DIR:PATH=$MINGWPREFIX/libav/include -DAVFORMAT_LIBRARY:FILEPATH=$MINGWPREFIX/libav/lib/libavformat.dll.a -DAVUTIL_INCLUDE_DIR:PATH=$MINGWPREFIX/libav/include -DAVUTIL_LIBRARY:FILEPATH=$MINGWPREFIX/libav/lib/libavutil.dll.a -DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) -S. -Bbuild_shared &&
 wl-showstatus build-install &&
 ninja -Cbuild_static install/strip &&
 wl-showstatus build-install &&
 ninja -Cbuild_shared install/strip &&
 mkdir -p $INSTALLPREFIX/bin &&
 #strip $INSTALLPREFIX/lib/*.dll &&
 #mv -f $INSTALLPREFIX/lib/*.dll $INSTALLPREFIX/bin/ &&
 strip $INSTALLPREFIX/bin/*.{dll,exe} &&
 # fix absolute link in .cmake file(s)
 sed -i -e "s?$(echo $INSTALLPREFIX|sed -e "s?^/\([a-zA-Z]\)/?\1:/?")?\${CMAKE_CURRENT_LIST_FILE}/../../../..?g" $INSTALLPREFIX/lib/cmake/Pangolin/PangolinTargets-release.cmake &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf Pangolin-$VERSION




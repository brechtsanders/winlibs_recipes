export NAME="libgnomekbd"
export STATUS=
export URL=http://www.gnome.org/projects/libgnomekbd
export BASENAME=libgnomekbd
export DESCRIPTION="libgnomekbd offers an API to manage the keyboard in GNOME applications."
export CATEGORY=configuration
export TYPE=library
#export VERSION=3.0.0
#export VERSIONDATE=20110405
####E:\Prog\MinGW-mSys\include\w32api/objidl.h:95: error: expected identifier or '(' before string constant
#export VERSION=3.0.0.1
#export VERSIONDATE=20110406
#export VERSION=3.1.90
#export VERSIONDATE=20110823
#export VERSION=3.2.0
#export VERSIONDATE=20110928
#export VERSION=3.3.90
#export VERSIONDATE=20120222
####/include/tkIntXlibDecls.h:39: error: expected '=', ',', ';', 'asm' or '__attribute__' before 'void'
#export VERSION=3.4.0
#export VERSIONDATE=20120325
#export VERSION=3.4.0.1
#export VERSIONDATE=20120326
#export VERSION=3.4.0.2
#export VERSIONDATE=20120327
#export VERSION=3.5.2
#export VERSIONDATE=20120606
#export VERSION=3.6.0
#export VERSIONDATE=20120927
#export VERSION=3.22.0.1
#export VERSIONDATE=20160921
#export VERSION=3.26.0
#export VERSIONDATE=20170912
export VERSION=3.26.1
export VERSIONDATE=20190207
wl-showstatus --package-version
#export DEPENDANCIES=glib2,gtk+,libx11,pango,cairo,gdk,gettext,libxklavier
export DEPENDANCIES=glib2,gtk3,libx11,pango,cairo,gettext,libxklavier
export OPTIONALDEPENDANCIES=
export BUILDDEPENDANCIES=
#export LICENSEFILE=COPYING
export LICENSEFILE=COPYING.LIB
export LICENSETYPE=LGPL
export DOWNLOADURL="http://ftp.gnome.org/pub/GNOME/sources/libgnomekbd/"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://ftp.gnome.org/pub/gnome/sources/$BASENAME/`echo $VERSION|sed 's/^\([0-9]*\.[0-9]*\)\..*$/\1/'`/$BASENAME-$VERSION.tar.bz2
export DOWNLOADSOURCEURL=http://ftp.gnome.org/pub/gnome/sources/$BASENAME/`echo $VERSION|sed 's/^\([0-9]*\.[0-9]*\)\..*$/\1/'`/$BASENAME-$VERSION.tar.xz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
#tar xfj $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.bz2
tar xfJ $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.xz
cd $BASENAME-$VERSION
# fix missing gdk/gdkx.h
mkdir -p gdk
cat > gdk/gdkx.h << EOF
//fix error: /include/w32api/winspool.h:255: error: two or more data types in declaration specifiers
#undef Status
#include <windows.h>
#include <gdk/gdkwin32.h>
#define GDK_WINDOW_XID(dw) (int)GDK_WINDOW_HWND(dw)
#define GDK_DISPLAY_XDISPLAY(d) gdk_display_get_default_screen(d)
EOF
# fix error: /include/w32api/objidl.h:95: error: expected identifier or '(' before string constant
for F in libgnomekbd/*.c ; do
  mv $F $F.bak
  echo "#undef DATADIR" > $F
  cat $F.bak >> $F
done
cat > libgnomekbd/gkbd-indicator-config.c << EOF
inline const char* MYDATADIR() { return DATADIR; }
#undef DATADIR
EOF
sed -e "s/DATADIR/MYDATADIR()/g" libgnomekbd/gkbd-indicator-config.c.bak >> libgnomekbd/gkbd-indicator-config.c
## fix error: /include/w32api/objidl.h:95: error: expected identifier or '(' before string constant
#cp libgnomekbd/gkbd-configuration.c libgnomekbd/gkbd-configuration.c.bak
#echo "#undef DATADIR" > libgnomekbd/gkbd-configuration.c
#cat libgnomekbd/gkbd-configuration.c.bak >> libgnomekbd/gkbd-configuration.c
## fix (probably breaks it) error: /include/w32api/objidl.h:95: error: expected identifier or '(' before string constant
#cp libgnomekbd/gkbd-indicator-config.c libgnomekbd/gkbd-indicator-config.c.bak
#cat > libgnomekbd/gkbd-indicator-config.c << EOF
##undef DATADIR
##include <windows.h>
##define DATADIR "."
#EOF
#cat libgnomekbd/gkbd-indicator-config.c.bak >> libgnomekbd/gkbd-indicator-config.c
## fix error: /include/w32api/objidl.h:95: error: expected identifier or '(' before string constant
#cp libgnomekbd/gkbd-indicator.c libgnomekbd/gkbd-indicator.c.bak
#echo "#undef DATADIR" > libgnomekbd/gkbd-indicator.c
#cat libgnomekbd/gkbd-indicator.c.bak >> libgnomekbd/gkbd-indicator.c
## fix error: /include/w32api/objidl.h:95: error: expected identifier or '(' before string constant
#cp libgnomekbd/gkbd-status.c libgnomekbd/gkbd-status.c.bak
#echo "#undef DATADIR" > libgnomekbd/gkbd-status.c
#cat libgnomekbd/gkbd-status.c.bak >> libgnomekbd/gkbd-status.c
## fix error: /include/w32api/objidl.h:95: error: expected identifier or '(' before string constant
#cp libgnomekbd/gkbd-keyboard-drawing.c libgnomekbd/gkbd-keyboard-drawing.c.bak
#echo "#undef DATADIR" > libgnomekbd/gkbd-keyboard-drawing.c
#cat libgnomekbd/gkbd-keyboard-drawing.c.bak >> libgnomekbd/gkbd-keyboard-drawing.c
## fix error: /include/w32api/objidl.h:95: error: expected identifier or '(' before string constant
#cp libgnomekbd/gkbd-keyboard-display.c libgnomekbd/gkbd-keyboard-display.c.bak
#echo "#undef DATADIR" > libgnomekbd/gkbd-keyboard-display.c
#cat libgnomekbd/gkbd-keyboard-display.c.bak >> libgnomekbd/gkbd-keyboard-display.c
## fix error: /include/w32api/objidl.h:95: error: expected identifier or '(' before string constant
#cp capplet/gkbd-indicator-plugins-capplet.c capplet/gkbd-indicator-plugins-capplet.c.bak
#echo "#undef DATADIR" > capplet/gkbd-indicator-plugins-capplet.c
#cat capplet/gkbd-indicator-plugins-capplet.c.bak >> capplet/gkbd-indicator-plugins-capplet.c
## fix error: /include/w32api/objidl.h:95: error: expected identifier or '(' before string constant
#cp capplet/gkbd-indicator-plugins-add.c capplet/gkbd-indicator-plugins-add.c.bak
#echo "#undef DATADIR" > capplet/gkbd-indicator-plugins-add.c
#cat capplet/gkbd-indicator-plugins-add.c.bak >> capplet/gkbd-indicator-plugins-add.c
## fix redefinition of DATADIR
#####E:\Prog\MinGW-mSys\include\w32api/objidl.h:95: error: expected identifier or '(' before string constant
#mv libgnomekbd/gkbd-desktop-config.h libgnomekbd/gkbd-desktop-config.h.bak
#cat > libgnomekbd/gkbd-desktop-config.h << EOF
##undef DATADIR
##include <windows.h>
#EOF
#cat libgnomekbd/gkbd-desktop-config.h.bak >> libgnomekbd/gkbd-desktop-config.h
## fix redefinition of DATADIR
#####E:\Prog\MinGW-mSys\include\w32api/objidl.h:95: error: expected identifier or '(' before string constant
#mv libgnomekbd/gkbd-keyboard-config.h libgnomekbd/gkbd-keyboard-config.h.bak
#cat > libgnomekbd/gkbd-keyboard-config.h << EOF
##undef DATADIR
##include <windows.h>
#EOF
#cat libgnomekbd/gkbd-keyboard-config.h.bak >> libgnomekbd/gkbd-keyboard-config.h
## fix redefinition of DATADIR
#####E:\Prog\MinGW-mSys\include\w32api/objidl.h:95: error: expected identifier or '(' before string constant
#mv libgnomekbd/gkbd-util.c libgnomekbd/gkbd-util.c.bak
#cat > libgnomekbd/gkbd-util.c << EOF
##undef DATADIR
##include <windows.h>
#EOF
#cat libgnomekbd/gkbd-util.c.bak >> libgnomekbd/gkbd-util.c
## fix redefinition of DATADIR
#####E:\Prog\MinGW-mSys\include\w32api/objidl.h:95: error: expected identifier or '(' before string constant
#mv libgnomekbd/gkbd-indicator-config.c libgnomekbd/gkbd-indicator-config.c.bak
#cat > libgnomekbd/gkbd-indicator-config.c << EOF
##undef DATADIR
##include <windows.h>
#EOF
#cat libgnomekbd/gkbd-indicator-config.c.bak >> libgnomekbd/gkbd-indicator-config.c
## fix problem detecting GNU gettext tools on 64-bit
#if ( echo $RUNPLATFORM | grep -q x86_64 ); then
# mv configure configure.bak
# sed -e "s/as_fn_error\(.*GNU gettext tools not found; required for intltool\)/as_echo\1/" configure.bak > configure
#fi
# fix invalid parameter --no-translations
sed -i.bak -e "s/--no-translations//" configure
wl-showstatus configure &&
 #INTLTOOL_PERL="$PERLDIR/bin/perl.exe" ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-introspection=no --without-x --disable-tests LDFLAGS="-no-undefined -Wl,-no-undefined" &&
 #INTLTOOL_PERL="$PERLDIR/bin/perl.exe" ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-introspection=no --without-x --disable-tests LDFLAGS="-Wl,-no-undefined" &&
 PATH=$PATH:$PERLDIR/../c/bin INTLTOOL_PERL="$PERLDIR/bin/perl.exe" ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-introspection=no --without-x --disable-tests LDFLAGS="-Wl,-no-undefined" &&
 wl-showstatus build-install &&
 PATH=$PYDIR:$PATH make install-strip &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
####To do: programs crash
####ld.exe: warning: --export-dynamic is not supported for PE targets, did you mean --export-all-symbols?



#export NAME="libgnomekbd"
#export STATUS=
#export URL=http://www.gnome.org/projects/libgnomekbd
#export BASENAME=libgnomekbd
#export DESCRIPTION="libgnomekbd offers an API to manage the keyboard in GNOME applications."
#export CATEGORY=configuration
#export TYPE=library
#export VERSION=3.28.0
#export VERSIONDATE=20220817
#####Couldn't find include 'Xkl-1.0.gir'
#wl-showstatus --package-version
##export DEPENDANCIES=glib2,gtk+,libx11,pango,cairo,gdk,gettext,libxklavier
#export DEPENDANCIES=glib2,gtk3,libx11,pango,cairo,gettext,libxklavier
#export OPTIONALDEPENDANCIES=
#export BUILDDEPENDANCIES=meson,ninja
##export LICENSEFILE=COPYING
#export LICENSEFILE=COPYING.LIB
#export LICENSETYPE=LGPL
#export DOWNLOADURL="http://ftp.gnome.org/pub/GNOME/sources/libgnomekbd/"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://ftp.gnome.org/pub/gnome/sources/$BASENAME/$(echo $VERSION|sed 's/^\([0-9]*\.[0-9]*\)\..*$/\1/')/$BASENAME-$VERSION.tar.xz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
##tar xfj $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.bz2
#tar xfJ $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.xz
#cd $BASENAME-$VERSION
##-Dc_args=$CFLAGS -Dcpp_args=$CXXFLAGS -Dc_link_args=$LDFLAGS -Dcpp_link_args=$LDFLAGS
### fix location of Perl
##sed -i.bak -e "s?'perl'?'$(cygpath -w $PERLDIR/bin/perl.exe|sed -e 's/\\/&&&&/g')'?" meson.build
### fix detection of Python
##sed -i.bak -e "s?'python3'?'$(cygpath -w $PYDIR/python.exe|sed -e 's/\\/&&&&/g')'?" meson.build
### fix missing gio-unix
###sed -i.bak -e "s/gio-unix-/gio-/" meson.build
##sed -i.bak -e "s/gio-unix-/gio-windows-/" meson.build
#mkdir -p build_both &&
# wl-showstatus configure &&
# PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Dgir=true -Dvapi=true -Dtests=false . build_both &&
# ## fix slash/backslash path issue when calling Python from Ninja
# #sed -i.bak -e "s/join_paths/os.path.join/g; /COMMAND =.*python\.exe/ s?\"/\([a-zA-Z]\)/?\"\1:/?; /COMMAND =.*python\.exe/ s?/?\\\\?g" build_*/build.ninja &&
# ## fix Python path issues in meson_exe
# #sed -i.bak -e "s?$PYDIR?$(echo $PYDIR|sed -e "s?^/\([a-zA-Z]\)/?\1:/?")?" build_both/meson-private/meson_exe_python.exe_*.dat &&
# ## fix execution of Python scripts
# #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *= *\| *=.*\&\& *\)\(\"\{0,1\}[^ ]*\)\(\.py\|glib-mkenums\|g-ir-scanner\|asciidoc\)\(\"\{0,1\} \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_both/build.ninja &&
# ## fix executing shell scripts
# #sed -i.bak -e "s?^\(\s*COMMAND\s*=\s*\)\(\"[^\"]*\.sh\"\)?\1\"$(cygpath -m $(which sh.exe))\" \2?" build_both/build.ninja &&
# wl-showstatus build-install &&
# PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -Cbuild_both install &&
# #PATH=$PERLDIR/../c/bin:$PERLDIR/bin:$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -Cbuild_both install &&
#    echo OK && find . -name '*.a'
# #wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




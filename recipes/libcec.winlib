export NAME="libcec"
export STATUS=
export URL=http://libcec.pulse-eight.com/
export BASENAME=libcec
export DESCRIPTION="libCEC allows you in combination with the right hardware to control your device with your TV remote control, utilising your existing HDMI cabling."
export CATEGORY=hardware
export TYPE=library
#export VERSION=2.2.0
#export VERSIONDATE=20141111
####checking for netdb.h... no
####configure: error: required header is missing
#export DEPENDENCIES=
#export VERSION=3.0.0
#export VERSIONDATE=20150504
####CMake Error at src/cec-client/CMakeLists.txt:21 (find_package): By not providing "Findplatform.cmake" in CMAKE_MODULE_PATH this project has asked CMake to find a package configuration file provided by "platform", but CMake did not find one.
#export VERSION=3.0.1
#export VERSIONDATE=20150707
#export VERSION=3.1.0
#export VERSIONDATE=20160120
#export VERSION=4.0.0
#export VERSIONDATE=20161027
#export VERSION=4.0.0-2
#export VERSIONDATE=20161108
#export VERSION=4.0.0-3
#export VERSIONDATE=20161113
#export VERSION=4.0.1
#export VERSIONDATE=20170104
#export VERSION=4.0.2
#export VERSIONDATE=20170129
#export VERSION=4.0.3
#export VERSIONDATE=20181113
export VERSION=4.0.4
export VERSIONDATE=20181222
#export VERSION=4.0.5
#export VERSIONDATE=20200428
#export VERSION=4.0.7
#export VERSIONDATE=20200710
#export VERSION=5.0.0
#export VERSIONDATE=20200428
#export VERSION=6.0.0
#export VERSIONDATE=20200710
#export VERSION=6.0.2
#export VERSIONDATE=20200713
#export VERSION=7.0.0
#export VERSIONDATE=20250226
####Could not find a package configuration file provided by "p8-platform"
wl-showstatus --package-version
#export DEPENDENCIES=platform,pdcurses
export DEPENDENCIES=platform,ncurses
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=COPYING
export LICENSETYPE=
#export DOWNLOADURL="http://packages.pulse-eight.net/"
export DOWNLOADURL="https://github.com/Pulse-Eight/libcec/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/Pulse-Eight/libcec/archive/$BASENAME-$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#mv $TARBALLDIR/$BASENAME/libcec-libcec-$VERSION.tar.gz $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz || mv $TARBALLDIR/$BASENAME/$BASENAME-$VERSION $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
cd $BASENAME-$VERSION || cd libcec-$BASENAME-$VERSION
#wl-showstatus configure &&
#autoreconf -f -i -I $MINGWPREFIX/share/aclocal &&
#./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM &&
# wl-showstatus build &&
# wl-showstatus build-install &&
# make install-strip &&
#    ls -l $INSTALLPREFIX/lib/pkgconfig $INSTALLPREFIX/share/pkgconfig
# fix missing winres.h
touch include/winres.h
## fix src/cecc-client/CMakeLists.txt (version >= 5.0.0)
#patch -ulbf src/cecc-client/CMakeLists.txt << EOF
#@@ -24,3 +24,3 @@
#
#-if (NOT WIN32)
#+if (NOT MSVC)
#   # check for dlopen
#EOF
## fix src/libcec/cmake/CheckPlatformSupport.cmake (version >= 4.0.5)
#patch -ulbf src/libcec/cmake/CheckPlatformSupport.cmake << EOF
#@@ -63,3 +63,3 @@
#   else()
#-    message(FATAL_ERROR "Unknown architecture id: \${MSVC_C_ARCHITECTURE_ID}")
#+    message(WARNING "Unknown architecture id: \${MSVC_C_ARCHITECTURE_ID}")
#   endif()
#EOF
## fix src/libcec/cmake/CheckPlatformSupport.cmake (version >= 7.0.0)
#patch -ulbf src/libcec/cmake/CheckPlatformSupport.cmake << EOF
#@@ -46,3 +46,3 @@
#
#-  if("\${MSVC_C_ARCHITECTURE_ID}" STREQUAL "X86")
#+  if("\${MSVC_C_ARCHITECTURE_ID}" STREQUAL "X86" OR "\${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "X86")
#     set(LIB_INFO "\${LIB_INFO} (x86)")
#@@ -51,3 +51,3 @@
#     set(PYTHON_USE_VERSION 2)
#-  elseif("\${MSVC_C_ARCHITECTURE_ID}" STREQUAL "x64")
#+  elseif("\${MSVC_C_ARCHITECTURE_ID}" STREQUAL "x64" OR "\${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "AMD64")
#     check_symbol_exists(_X64_ Windows.h WIN64)
#@@ -57,5 +57,5 @@
#     endif()
#-  elseif("\${MSVC_C_ARCHITECTURE_ID}" STREQUAL "ARM")
#+  elseif("\${MSVC_C_ARCHITECTURE_ID}" STREQUAL "ARM" OR "\${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "ARM")
#     set(LIB_INFO "\${LIB_INFO} (arm)")
#-  elseif("\${MSVC_C_ARCHITECTURE_ID}" STREQUAL "ARM64")
#+  elseif("\${MSVC_C_ARCHITECTURE_ID}" STREQUAL "ARM64" OR "\${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "ARM64")
#     set(LIB_INFO "\${LIB_INFO} (arm64)")
#EOF
# fix detection of ncurses
sed -i.bak -e "s/\(check_library_exists(\)curses\( initscr\)/\1ncurses\2/" src/cec-client/CMakeLists.txt
mkdir -p build_win &&
 wl-showstatus configure &&
 #cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DCMAKE_EXE_LINKER_FLAGS:STRING="-lcurses" -S. -Bbuild_win &&
 #cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DCMAKE_EXE_LINKER_FLAGS:STRING="-lcurses -lsetupapi" -S. -Bbuild_win &&
 #cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DCMAKE_EXE_LINKER_FLAGS:STRING="-lcurses -lsetupapi" $(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "-DWIN64:BOOL=TRUE"; fi) -S. -Bbuild_win &&
 #cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release $(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "-DWIN64:BOOL=TRUE"; fi) -DCMAKE_CXX_FLAGS:STRING="-I$MINGWPREFIX/include/ncurses" -S. -Bbuild_win &&
 cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release $(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "-DWIN64:BOOL=TRUE"; fi) -DHAVE_P8_USB:BOOL=OFF -DPython3_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DCMAKE_CXX_FLAGS:STRING="-I$MINGWPREFIX/include/ncurses" -DCMAKE_POLICY_VERSION_MINIMUM:STRING=3.5 -S. -Bbuild_win &&
 #PKG_CONFIG= cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DPYTHON_INCLUDE_DIRS:PATH=$PYDIR/include -DPYTHON_LIBRARIES:PATH=$(ls -1 $PYDIR/libs/libpython*.a|sort -V|tail -n1) -DCMAKE_EXE_LINKER_FLAGS:STRING="-lcurses -lsetupapi" $(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "-DWIN64:BOOL=TRUE"; fi) -S. -Bbuild_win &&
 #PKG_CONFIG= cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DPYTHON_INCLUDE_DIRS:PATH=$PYDIR/include -DPYTHON_LIBRARIES:PATH=$(ls -1 $PYDIR/libs/libpython*.a|sort -V|tail -n1) $(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "-DWIN64:BOOL=TRUE"; fi) -S. -Bbuild_win &&
 #echo " -lcurses" >> build_win/src/cec-client/CMakeFiles/cec-client.dir/linklibs.rsp &&
 echo " -lncurses" >> build_win/src/cec-client/CMakeFiles/cec-client.dir/linklibs.rsp &&
 echo " -lsetupapi" >> build_win/src/libcec/CMakeFiles/cec.dir/linklibs.rsp &&
 wl-showstatus build &&
 #make -Cbuild_win install/strip &&
 ( make -Cbuild_win install/strip || ( cp src/libcec/libcec.dll.a src/libcec/libcec.a && make -Cbuild_win install/strip )) &&
 mkdir -p $INSTALLPREFIX/lib $INSTALLPREFIX/bin &&
 mv -f $INSTALLPREFIX/*.a $INSTALLPREFIX/lib/ &&
 mv -f $INSTALLPREFIX/*.exe $INSTALLPREFIX/bin/ &&
 #g++ -shared -o $INSTALLPREFIX/bin/cec.dll -Wl,--out-implib,$INSTALLPREFIX/lib/libcec.dll.a -Wl,--whole-archive src/libcec/libcec.a -Wl,--no-whole-archive -lplatform -lsetupapi &&
 #mv -f $INSTALLPREFIX/*.dll $INSTALLPREFIX/bin/ &&
 mv -f $INSTALLPREFIX/libcec.dll $INSTALLPREFIX/bin/cec.dll &&
 dlltool -D$INSTALLPREFIX/bin/cec.dll -l$INSTALLPREFIX/lib/libcec.dll.a &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION libcec-$BASENAME-$VERSION




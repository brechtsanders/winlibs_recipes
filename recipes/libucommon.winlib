export NAME="GNU Common C++ / ucommon"
export STATUS=
export URL=http://www.gnu.org/software/commoncpp/
export BASENAME=libucommon
export DESCRIPTION="GNU Common C++ is a very portable and highly optimized class framework for writing C++ applications that need to use threads and support concurrent sychronization, and that use sockets, XML parsing, object serialization, thread-optimized String and data structure classes, etc. This framework offers a class foundation that hides platform differences from your C++ application so that you need not write platform specific code."
export CATEGORY=system
export TYPE=library
#export VERSION=2.0.2
#export VERSION=2.0.4
#export VERSION=2.0.5
#export VERSION=2.0.6
#export VERSION=2.0.7
#export VERSIONDATE=20091201
#export VERSION=2.0.8
#export VERSIONDATE=20100118
#export VERSION=2.0.9
#export VERSIONDATE=20100315
#export VERSION=2.1.2
#export VERSIONDATE=20100428
#export VERSION=2.1.3
#export VERSIONDATE=20100503
#export VERSION=2.1.4
#export VERSIONDATE=20100519
#export VERSION=3.1.0
#export VERSIONDATE=20100623
#export VERSION=3.1.2
#export VERSIONDATE=20100628
#export VERSION=3.2.1
#export VERSIONDATE=20100712
####gnutls/ssocket.cpp:20: error: 'SSL' does not name a type
#export VERSION=3.2.2
#export VERSIONDATE=20100802
#export VERSION=3.3.0
#export VERSIONDATE=20100803
#export VERSION=3.3.1
#export VERSIONDATE=20100806
####gnutls/secure.cpp:18:19: error: local.h: No such file or directory
####gnutls/secure.cpp:25: error: expected type-specifier before 'mutex'
#export VERSION=3.3.3
#export VERSIONDATE=20100809
#export VERSION=3.3.5
#export VERSIONDATE=20100811
#export VERSION=3.3.6
#export VERSIONDATE=20100908
####lib/libmingw32.a(main.o):main.c:(.text+0xd2): undefined reference to `WinMain@16'
#export VERSION=3.3.7
#export VERSIONDATE=20100912
#export VERSION=3.4.0
#export VERSIONDATE=20100920
####gnutls/.libs/ssocket.o:ssocket.cpp:(.text+0x5e5): undefined reference to `errno'
####D:/Prog/MinGW-mSys.4.5.0/home/win32/ucommon-3.3.7/common/.libs/libucommon.a(fsys.o):fsys.cpp:(.text+0xef2): multiple definition of `main'
####audiotool.o:audiotool.cpp:(.text+0xc5f): first defined here
####d:/prog/mingw-msys.4.5.0/bin/../lib/gcc/mingw32/4.5.0/crtbegin.o:cygming-crtbegin.c:(.text+0x7d): undefined reference to `__register_frame_info'
#export VERSION=4.0.0
#export VERSIONDATE=20100927
#export VERSION=4.0.1
#export VERSIONDATE=20100930
#export VERSION=4.0.2
#export VERSIONDATE=20101001
#export VERSION=4.0.3
#export VERSIONDATE=20101015
#export VERSION=4.0.4
#export VERSIONDATE=20101210
#export VERSION=4.0.5
#export VERSIONDATE=20110101
####E:/Prog/MinGW-mSys/lib/libmingwex.a(pformat.o):pformat.c:(.text+0x3de): undefined reference to `__chkstk'
#export VERSION=4.1.0
#export VERSIONDATE=20110124
#export VERSION=4.1.1
#export VERSIONDATE=20110213
#export VERSION=4.1.2
#export VERSIONDATE=20110217
#export VERSION=4.1.3
#export VERSIONDATE=20110218
#export VERSION=4.1.4
#export VERSIONDATE=20110220
#export VERSION=4.1.5
#export VERSIONDATE=20110220
#export VERSION=4.1.7
#export VERSIONDATE=20110227
#export VERSION=4.1.6
#export VERSIONDATE=20110305
#export VERSION=4.2.0
#export VERSIONDATE=20110320
#export VERSION=4.2.1
#export VERSIONDATE=20110327
#export VERSION=4.2.2
#export VERSIONDATE=20110328
#export VERSION=4.3.0
#export VERSIONDATE=20110404
#export VERSION=4.3.1
#export VERSIONDATE=20110405
#export VERSION=4.3.2
#export VERSIONDATE=20110424
#export VERSION=4.3.3
#export VERSIONDATE=20110509
#export VERSION=5.0.0
#export VERSIONDATE=20110522
####.libs/digest.o:digest.cpp:(.text+0x110): undefined reference to `gcry_md_close'
####to do: build DLL version of -lccrtp1
#export VERSION=5.0.1
#export VERSIONDATE=20110529
#export VERSION=5.0.2
#export VERSIONDATE=20110613
#export VERSION=5.0.3
#export VERSIONDATE=20110615
#export VERSION=5.0.4
#export VERSIONDATE=20110713
#export VERSION=5.0.5
#export VERSIONDATE=20110726
####../inc/commoncpp/socket.h:102:24: error: 'ost::Socket::State' has a previous declaration here
####socket.cpp:113:10: error: prototype for 'socket_t ost::Socket::dupSocket(socket_t, int)' does not match any in class 'ost::Socket'
#export VERSION=5.0.6
#export VERSIONDATE=20111009
####inc/commoncpp/string.h:34:1: error: '__EXPORT' does not name a type
#export VERSION=5.0.7
#export VERSIONDATE=20111113
#export VERSION=5.1.0
#export VERSIONDATE=20111218
#export VERSION=5.1.2
#export VERSIONDATE=20120116
#export VERSION=5.2.0
#export VERSIONDATE=20120121
#export VERSION=5.2.1
#export VERSIONDATE=20120211
#export VERSION=5.2.2
#export VERSIONDATE=20120401
####inc/commoncpp/string.h:34: error: expected constructor, destructor, or type conversion before 'char'
#export VERSION=5.3.0
#export VERSIONDATE=20121120
#export VERSION=5.5.0
#export VERSIONDATE=20121120
#export VERSION=6.0.0
#export VERSIONDATE=20121120
#export VERSION=6.0.1
#export VERSIONDATE=20121127
#export VERSION=6.0.2
#export VERSIONDATE=20121129
#export VERSION=6.0.3
#export VERSIONDATE=20121212
#export VERSION=6.0.4
#export VERSIONDATE=20130505
####corelib/mapped.cpp:557:21: error: aggregate 'ucommon::timespec ts' has incomplete type and cannot be defined
#export VERSION=6.0.5
#export VERSIONDATE=20130518
#export VERSION=6.0.6
#export VERSIONDATE=20130630
#export VERSION=6.0.7
#export VERSIONDATE=20130728
#export VERSION=6.1.0
#export VERSIONDATE=20140106
####corelib/.libs/linked.o:linked.cpp:(.text$_ZN7ucommon17ConditionalAccess3setEPNS_8timespecEm[ucommon::ConditionalAccess::set(ucommon::timespec*, unsigned long)]+0x14): undefined reference to `ucommon::Conditional::set(ucommon::timespec*, unsigned long)'
#export VERSION=6.1.1
#export VERSIONDATE=20140412
####inc/ucommon/platform.h:168:18: error: '__EXPORT' does not name a type
#export VERSION=6.1.2
#export VERSIONDATE=20140502
#export VERSION=6.1.3
#export VERSIONDATE=20140503
####commoncpp/.libs/file.o:file.cpp:(.text+0x1dc6): undefined reference to `ost::Dir::getPrefix(char*, unsigned int)'
#export VERSION=6.1.4
#export VERSIONDATE=20140520
#export VERSION=6.1.5
#export VERSIONDATE=20140525
####corelib/mapped.cpp:557:21: error: aggregate 'ucommon::timespec ts' has incomplete type and cannot be defined
#export VERSION=6.1.6
#export VERSIONDATE=20140607
#export VERSION=6.1.7
#export VERSIONDATE=20140617
#export VERSION=6.1.8
#export VERSIONDATE=20140621
#export VERSION=6.1.9
#export VERSIONDATE=20140713
#export VERSION=6.1.10
#export VERSIONDATE=20140731
####commoncpp/applog.cpp:(.text+0x1e44): undefined reference to `__imp_gettimeofday'
####commoncpp/.libs/file.o:file.cpp:(.text+0x22bc): undefined reference to `ost::Dir::getPrefix(char*, unsigned long long)'
#export VERSION=6.1.11
#export VERSIONDATE=20140914
#export VERSION=6.2.0
#export VERSIONDATE=20141019
####corelib/fsys.cpp:328:11: error: assignment of member 'ucommon::fsys::error' in read-only object
#export VERSION=6.2.1
#export VERSIONDATE=20141029
#export VERSION=6.2.2
#export VERSIONDATE=20141115
#export VERSION=6.2.3
#export VERSIONDATE=20141127
#export VERSION=6.3.0
#export VERSIONDATE=20141217
#export VERSION=6.3.1
#export VERSIONDATE=20150325
#export VERSION=6.3.2
#export VERSIONDATE=20150526
#export VERSION=6.3.3
#export VERSIONDATE=20150530
#export VERSION=6.3.4
#export VERSIONDATE=20150618
#export VERSION=6.3.5
#export VERSIONDATE=20150705
#export VERSION=6.3.6
#export VERSIONDATE=20150722
#export VERSION=6.4.0
#export VERSIONDATE=20150729
#export VERSION=6.4.1
#export VERSIONDATE=20150730
#export VERSION=6.4.2
#export VERSIONDATE=20150801
#export VERSION=6.4.4
#export VERSIONDATE=20150811
#export VERSION=6.5.0
#export VERSIONDATE=20150811
#export VERSION=6.5.1
#export VERSIONDATE=20150812
#export VERSION=6.5.2
#export VERSIONDATE=20150818
#export VERSION=6.5.3
#export VERSIONDATE=20150818
#export VERSION=6.5.4
#export VERSIONDATE=20150823
#export VERSION=6.5.5
#export VERSIONDATE=20150825
#export VERSION=6.5.6
#export VERSIONDATE=20150826
#export VERSION=6.5.7
#export VERSIONDATE=20150827
#export VERSION=6.6.0
#export VERSIONDATE=20150908
#export VERSION=6.6.1
#export VERSIONDATE=20151004
#export VERSION=6.6.2
#export VERSIONDATE=20151011
export VERSION=7.0.0
export VERSIONDATE=20151214
####inc/ucommon/thread.h:94:13: error: 'CONDITION_VARIABLE' does not name a type
wl-showstatus --package-version
export DEPENDENCIES=pthreads,pcre,libgcrypt,gnutls,gettext,zlib,libgpg-error
export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=
#export OPTIONALBUILDDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=COPYING
export LICENSETYPE=GPL3
export DOWNLOADURL="http://ftp.gnu.org/pub/gnu/commoncpp/ ucommon-"
#export DOWNLOADURL="https://ftpmirror.gnu.org/commoncpp/ ucommon-"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=http://ftp.gnu.org/pub/gnu/commoncpp/ucommon-$VERSION.tar.gz
#export DOWNLOADSOURCEURL=https://ftpmirror.gnu.org/commoncpp/ucommon-$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
tar xz --force-local -f $TARBALLDIR/$BASENAME/ucommon-$VERSION.tar.gz
cd ucommon-$VERSION
## fix error about ucc::shell::__printf__ (version >= 4.0.0 <= 4.3.3)
#patch -ulbf common/shell.cpp << EOF
#--- common/shell.cpp  2010-09-30 05:32:42 +0200
#+++ common/shell.cpp  2010-10-15 09:23:42 +0200
#@@ -54,2 +54,5 @@
# #include <libintl.h>
#+#ifdef printf
#+#undef printf
#+#endif
# #else
#EOF
# fix error about ucc::shell::__printf__ (version >= 5.0.0)
patch -ulbf corelib/shell.cpp << EOF
--- common/shell.cpp  2010-09-30 05:32:42 +0200
+++ common/shell.cpp  2010-10-15 09:23:42 +0200
@@ -54,2 +54,5 @@
 #include <libintl.h>
+#ifdef printf
+#undef printf
+#endif
 #else
EOF
## fix commoncpp/socket.cpp (version >= 5.0.0 <= 5.0.5)
#mv commoncpp/socket.cpp commoncpp/socket.cpp.bak
#cat > commoncpp/socket.cpp << EOF
##include <io.h>
##define _MSWINDOWS_
#EOF
#sed -e "s/enum \(Socket::State\)/\1/" commoncpp/socket.cpp.bak >> commoncpp/socket.cpp
## fix commoncpp/tcp.cpp (version >= 5.0.0)
#mv commoncpp/tcp.cpp commoncpp/tcp.cpp.bak
#cat > commoncpp/tcp.cpp << EOF
##include <io.h>
#//#define errno _errno
#//#define _MSWINDOWS_
#EOF
#sed -e "s/, errno/,socket_errno/; s/\(rtn = errno;\|errno = rtn;\)/\/\/\1/" commoncpp/tcp.cpp.bak >> commoncpp/tcp.cpp
## fix commoncpp/udp.cpp (version >= 5.0.0 <= 5.0.5)
#mv commoncpp/udp.cpp commoncpp/udp.cpp.bak
#sed -e "s/, errno/,socket_errno/" commoncpp/udp.cpp.bak > commoncpp/udp.cpp
## fix commoncpp/dccp.cpp (version >= 5.0.0 <= 5.0.5)
#mv commoncpp/dccp.cpp commoncpp/dccp.cpp.bak
#sed -e "s/, errno/,socket_errno/; s/\(rtn = errno;\|errno = rtn;\)/\/\/\1/" commoncpp/dccp.cpp.bak > commoncpp/dccp.cpp
## fix utils/car.cpp (version >= 5.0.0 <= 5.0.5)
#mv utils/car.cpp utils/car.cpp.bak
#sed -e "s/ errno/WSAGetLastError()/" utils/car.cpp.bak > utils/car.cpp
## fix undefined reference to `WinMain@16' (version >= 3.3.3 <= 5.0.5)
#echo "int main(int argc, char **argv) { return 0; }" >> common/fsys.cpp
## fix type error between uint8_t* and char* in src/socket.cpp (version = 2.0.4)
#mv src/socket.cpp src/socket.cpp.bak
#sed -e "s/\(&ccid\)/(char*)\1/" src/socket.cpp.bak > src/socket.cpp
## fix missing local.h (version >= 3.2.2 <= 5.0.5)
#mkdir win32fix
#cat > win32fix/local.h << EOF
##include <ucommon/thread.h>
##include <ucommon/socket.h>
##include <ucommon/secure.h>
##include <gnutls/gnutls.h>
#EOF
## fix invalid file types in inc/ucommon/fsys.h (version >= 4.0.2 <= 5.0.5)
#patch -ulbf inc/ucommon/fsys.h << EOF
#--- inc/ucommon/fsys.h  2010-09-30 14:48:58 +0200
#+++ inc/ucommon/fsys.h  2010-10-01 19:25:50 +0200
#@@ -501,3 +501,7 @@
#        static inline bool islink(struct stat *inode)
#+#ifndef __MINGW32__
#                {return S_ISLNK(inode->st_mode);}
#+#else
#+               {return false;}
#+#endif
#
#@@ -510,3 +514,7 @@
#        static inline bool issys(struct stat *inode)
#+#ifndef __MINGW32__
#                {return S_ISSOCK(inode->st_mode) || S_ISFIFO(inode->st_mode);}
#+#else
#+               {return false;}
#+#endif
# };
#EOF
## fix redefinition of struct timespec in inc/ucommon/platform.h (version < 6.0.0)
#patch -ulbf inc/ucommon/platform.h << EOF
#--- inc/ucommon/platform.h  2011-07-26 00:11:10 +0200
#+++ inc/ucommon/platform.h  2011-08-04 11:31:14 +0200
#@@ -179,2 +179,3 @@
#
#+#if !defined(__MINGW64__) && !`if gcc --version|grep "MinGW-W64">/dev/null; then echo 1; else echo 0; fi`
# typedef struct timespec {
#@@ -183,2 +184,3 @@
# } timespec_t;
#+#endif
#
#EOF
## fix inc/ucommon/platform.h (version >= 6.1.0 <= 6.1.1)
#patch -ulbf inc/ucommon/platform.h << EOF
#--- inc/ucommon/platform.h  2014-01-06 19:54:38 +0100
#+++ inc/ucommon/platform.h  2014-01-06 21:03:16 +0100
#@@ -96,3 +96,3 @@
#
#-#if defined(_MSC_VER) || defined(WIN32) || defined(_WIN32)
#+#if defined(_MSC_VER) || defined(WIN32) || defined(_WIN32) || defined(__MINGW32__)
# #define _MSWINDOWS_
#@@ -296,3 +296,3 @@
#
#-#ifdef _MSC_VER
#+#if defined(_MSC_VER) || defined(__MINGW32__)
# typedef signed __int8 int8_t;
#EOF
## fix duplicate sleep function in inc/ucommon/platform (version <= 6.1.1)
#if grep -q "sleep *(" $MINGWDIR/*mingw32/include/unistd.h; then
#patch -ulbf inc/ucommon/platform.h << EOF
#--- inc/ucommon/platform.h  2013-05-13 15:21:56 +0200
#+++ inc/ucommon/platform.h  2013-05-15 13:53:30 +0200
#@@ -197,4 +197,4 @@
#
#-    inline void sleep(int seconds)
#-        {::Sleep((seconds * 1000l));};
#+/*    inline void sleep(int seconds)
#+        {::Sleep((seconds * 1000l));};*/
#
#EOF
#fi
## fix duplicate sleep function in inc/ucommon/platform (version >= 6.1.2)
#if grep -q "sleep *(" $MINGWDIR/*mingw32/include/unistd.h; then
#patch -ulbf inc/ucommon/platform.h << EOF
#--- inc/ucommon/platform.h  2014-01-28 20:43:54 +0100
#+++ inc/ucommon/platform.h  2014-05-02 19:51:28 +0200
#@@ -206,4 +206,4 @@
#
#-    inline void sleep(int seconds)
#-        {::Sleep((seconds * 1000l));}
#+/*    inline void sleep(int seconds)
#+        {::Sleep((seconds * 1000l));}*/
#
#EOF
#fi
## redefinition of max in inc/ucommon/memory.h (version >= 6.0.0)
#mv inc/ucommon/memory.h inc/ucommon/memory.h.bak
#echo "#undef max" > inc/ucommon/memory.h
#cat inc/ucommon/memory.h.bak >> inc/ucommon/memory.h
## fix missing struct timespec in corelib/mapped.cpp (version >= 6.0.0 <= 6.3.2)
#mv corelib/mapped.cpp corelib/mapped.cpp.bak
#cat > corelib/mapped.cpp << EOF
#struct timespec {
#  long tv_sec;
#  long tv_nsec;
#};
#EOF
#cat corelib/mapped.cpp.bak >> corelib/mapped.cpp
## fix missing struct timespec in corelib/thread.cpp (version >= 6.0.0 <= 6.3.2)
#mv corelib/thread.cpp corelib/thread.cpp.bak
#cat > corelib/thread.cpp << EOF
#struct timespec {
#  long tv_sec;
#  long tv_nsec;
#};
#EOF
#cat corelib/thread.cpp.bak >> corelib/thread.cpp
## fix missing struct timespec in corelib/vector.cpp (version >= 6.0.0 <= 6.3.2)
#mv corelib/vector.cpp corelib/vector.cpp.bak
#cat > corelib/vector.cpp << EOF
#struct timespec {
#  long tv_sec;
#  long tv_nsec;
#};
#EOF
#cat corelib/vector.cpp.bak >> corelib/vector.cpp
## fix missing struct timespec in corelib/containers.cpp (version >= 6.0.0 <= 6.3.2)
#mv corelib/containers.cpp corelib/containers.cpp.bak
#cat > corelib/containers.cpp << EOF
#struct timespec {
#  long tv_sec;
#  long tv_nsec;
#};
#EOF
#cat corelib/containers.cpp.bak >> corelib/containers.cpp
## fix missing struct timespec in corelib/linked.cpp (version >= 6.2.1 <= 6.3.2)
#mv corelib/linked.cpp corelib/linked.cpp.bak
#cat > corelib/linked.cpp << EOF
#struct timespec {
#  long tv_sec;
#  long tv_nsec;
#};
#EOF
#cat corelib/linked.cpp.bak >> corelib/linked.cpp
## fix missing struct timespec in corelib/timer.cpp (version >= 6.2.1 <= 6.3.2)
#mv corelib/timer.cpp corelib/timer.cpp.bak
#cat > corelib/timer.cpp << EOF
#struct timespec {
#  long tv_sec;
#  long tv_nsec;
#};
#EOF
#cat corelib/timer.cpp.bak >> corelib/timer.cpp
## fix missing struct timespec in corelib/memory.cpp (version >= 6.2.1 <= 6.3.2)
#mv corelib/memory.cpp corelib/memory.cpp.bak
#cat > corelib/memory.cpp << EOF
#struct timespec {
#  long tv_sec;
#  long tv_nsec;
#};
#EOF
#cat corelib/memory.cpp.bak >> corelib/memory.cpp
## fix missing struct timespec in corelib/socket.cpp (version >= 6.2.1 <= 6.3.2)
#mv corelib/socket.cpp corelib/socket.cpp.bak
#cat > corelib/socket.cpp << EOF
#struct timespec {
#  long tv_sec;
#  long tv_nsec;
#};
#EOF
#cat corelib/socket.cpp.bak >> corelib/socket.cpp
## fix missing struct timespec in corelib/fsys.cpp (version >= 6.2.1 <= 6.3.2)
#mv corelib/fsys.cpp corelib/fsys.cpp.bak
#cat > corelib/fsys.cpp << EOF
#struct timespec {
#  long tv_sec;
#  long tv_nsec;
#};
#EOF
#cat corelib/fsys.cpp.bak >> corelib/fsys.cpp
## fix missing struct timespec in corelib/stream.cpp (version >= 6.2.1 <= 6.3.2)
#mv corelib/stream.cpp corelib/stream.cpp.bak
#cat > corelib/stream.cpp << EOF
#struct timespec {
#  long tv_sec;
#  long tv_nsec;
#};
#EOF
#cat corelib/stream.cpp.bak >> corelib/stream.cpp
## fix missing struct timespec in corelib/datetime.cpp (version >= 6.2.1 <= 6.3.2)
#mv corelib/datetime.cpp corelib/datetime.cpp.bak
#cat > corelib/datetime.cpp << EOF
#struct timespec {
#  long tv_sec;
#  long tv_nsec;
#};
#EOF
#cat corelib/datetime.cpp.bak >> corelib/datetime.cpp
## fix missing struct timespec in corelib/unicode.cpp (version >= 6.2.1 <= 6.3.2)
#mv corelib/unicode.cpp corelib/unicode.cpp.bak
#cat > corelib/unicode.cpp << EOF
#struct timespec {
#  long tv_sec;
#  long tv_nsec;
#};
#EOF
#cat corelib/unicode.cpp.bak >> corelib/unicode.cpp
## fix missing struct timespec in corelib/atomic.cpp (version >= 6.2.1 <= 6.3.2)
#mv corelib/atomic.cpp corelib/atomic.cpp.bak
#cat > corelib/atomic.cpp << EOF
#struct timespec {
#  long tv_sec;
#  long tv_nsec;
#};
#EOF
#cat corelib/atomic.cpp.bak >> corelib/atomic.cpp
## fix missing struct timespec in corelib/file.cpp (version >= 6.2.1 <= 6.3.2)
#mv corelib/file.cpp corelib/file.cpp.bak
#cat > corelib/file.cpp << EOF
#struct timespec {
#  long tv_sec;
#  long tv_nsec;
#};
#EOF
#cat corelib/file.cpp.bak >> corelib/file.cpp
## fix missing struct timespec in corelib/tcpbuffer.cpp (version >= 6.2.1 <= 6.3.2)
#mv corelib/tcpbuffer.cpp corelib/tcpbuffer.cpp.bak
#cat > corelib/tcpbuffer.cpp << EOF
#struct timespec {
#  long tv_sec;
#  long tv_nsec;
#};
#EOF
#cat corelib/tcpbuffer.cpp.bak >> corelib/tcpbuffer.cpp
## fix missing struct timespec in corelib/shell.cpp (version >= 6.2.1 <= 6.3.2)
#mv corelib/shell.cpp corelib/shell.cpp.bak
#cat > corelib/shell.cpp << EOF
#struct timespec {
#  long tv_sec;
#  long tv_nsec;
#};
#EOF
#cat corelib/shell.cpp.bak >> corelib/shell.cpp
## fix missing getaddrinfo and freeaddrinfo in commoncpp/tcp.cpp
#mv commoncpp/tcp.cpp commoncpp/tcp.cpp.bak
#cat > commoncpp/tcp.cpp << EOF
##define _WIN32_WINNT 0x0501
##include <ws2tcpip.h>
#EOF
#cat commoncpp/tcp.cpp.bak >> commoncpp/tcp.cpp
## fix missing getaddrinfo and freeaddrinfo in corelib/socket.cpp
#mv corelib/socket.cpp corelib/socket.cpp.bak
#cat > corelib/socket.cpp << EOF
##define _WIN32_WINNT 0x0501
##include <ws2tcpip.h>
#EOF
#cat corelib/socket.cpp.bak >> corelib/socket.cpp
# fix undefined __EXPORT in inc/commoncpp/thread.h (version >= 6.1.1)
mv inc/commoncpp/thread.h inc/commoncpp/thread.h.bak
echo "#include <commoncpp/export.h>" > inc/commoncpp/thread.h
cat inc/commoncpp/thread.h.bak >> inc/commoncpp/thread.h
# fix missing gettimeofday in commoncpp/applog.cpp (version >= 6.1.6)
mv commoncpp/applog.cpp commoncpp/applog.cpp.bak
echo "#include <sys/time.h>" > commoncpp/applog.cpp
cat commoncpp/applog.cpp.bak >> commoncpp/applog.cpp
# work around missing gettimeofday in commoncpp/applog.cpp (version >= 6.1.6)
patch -ulbf commoncpp/applog.cpp << EOF
--- commoncpp/applog.cpp  2014-05-17 15:15:12.000000000 +0200
+++ commoncpp/applog.cpp  2014-06-08 10:14:10.000000000 +0200
@@ -631,4 +631,8 @@
       time(&now);
+#ifdef __MINGW32__
+      struct fake_timeval { int tv_usec; } detail_time = {0};
+#else
       struct timeval detail_time;
       gettimeofday(&detail_time, NULL);
+#endif
       dt = localtime(&now);
EOF
# fix missing Dir::getPrefix in commoncpp/file.cpp (version >= 6.1.6)
patch -ulbf commoncpp/file.cpp << EOF
--- commoncpp/file.cpp  2014-05-17 15:04:34.000000000 +0200
+++ commoncpp/file.cpp  2014-06-08 10:20:34.000000000 +0200
@@ -1501,8 +1501,10 @@
     }
     else {
+#ifndef __MINGW32__
         if(!Dir::getPrefix(buffer, size)) {
             snprintf(buffer, size, "%s", ".");
             return NULL;
         }
+#endif
         buffer_len = strlen(buffer);
         snprintf(left, size, "%s", path);
EOF
## fix missing errno in commoncpp/tcp.cpp (version >= 6.1.11)
#mv commoncpp/tcp.cpp commoncpp/tcp.cpp.bak
#echo "#include <errno.h>" > commoncpp/tcp.cpp
#cat commoncpp/tcp.cpp.bak >> commoncpp/tcp.cpp
## fix missing errno in commoncpp/udp.cpp (version >= 6.1.11)
#mv commoncpp/udb.cpp commoncpp/udp.cpp.bak
#echo "#include <errno.h>" > commoncpp/udp.cpp
#cat commoncpp/udp.cpp.bak >> commoncpp/udp.cpp
# fix missing dup in commoncpp/socket.cpp (version >= 6.2.2)
patch -ulbf commoncpp/socket.cpp << EOF
--- commoncpp/socket.cpp  2014-11-14 10:14:36 +0100
+++ commoncpp/socket.cpp  2014-11-21 17:21:14 +0100
@@ -39,2 +39,5 @@

+#ifdef __MINGW32__
+#include <io.h>
+#endif
 #include <ucommon-config.h>
@@ -97,4 +100,4 @@

-#if defined(_MSWINDOWS_) && !defined(__MINGW32__)
-socket_t Socket::dupSocket(socket_t so, enum Socket::State state)
+#if defined(_MSWINDOWS_) //&& !defined(__MINGW32__)
+socket_t Socket::dupSocket(socket_t so, State state)
 {
EOF
## fix missing _malloca in corelib/fsys.cpp
#mv corelib/fsys.cpp corelib/fsys.cpp.bak
#sed -e "s/_malloca/malloc/g" corelib/fsys.cpp.bak > corelib/fsys.cpp
## fix missing _malloca in commoncpp/dir.cpp
#mv commoncpp/dir.cpp commoncpp/dir.cpp.bak
#sed -e "s/_malloca/malloc/g" commoncpp/dir.cpp.bak > commoncpp/dir.cpp
## fix missing _InterlockedAnd in corelib/atomic.cpp
#patch -ulbf corelib/atomic.cpp << EOF
#--- corelib/atomic.cpp  2015-06-17 14:50:54 +0200
#+++ corelib/atomic.cpp  2015-07-23 09:02:19 +0200
#@@ -65,3 +65,3 @@
#
#-#if defined(_MSWINDOWS_)
#+#if defined(_MSWINDOWS_) && !defined(__MINGW32__)
#
#EOF
# fix pthreads issues in inc/ucommon/platform.h (version >= 7.0.0)
sed -i.bak -e "s/^#if.*UCOMMON_WINPTHREAD.*$/#if 1/" inc/ucommon/platform.h
# fix type conversion issue in corelib/socket.cpp (version >= 7.0.0)
####error: cannot convert 'unsigned int*' to 'char*'
# fix corelib/socket.cpp (version >= 7.0.0)
patch -ulbf corelib/socket.cpp << EOF
@@ -2903,3 +2903,3 @@
 #ifdef  IP_MTU
-    getsockopt(so, IPPROTO_IP, IP_MTU, &size, &alen);
+    getsockopt(so, IPPROTO_IP, IP_MTU, (char *)&size, &alen);
 #else
EOF
# fix error: ordered comparison of pointer with integer zero ('fd_t' {aka 'void*'} and 'int') in inc/commoncpp/serial.h (version >= 7.0.0)
patch -ulbf inc/commoncpp/serial.h << EOF
@@ -577,3 +577,3 @@
     inline bool operator!() {
-        return (dev < 0);
+        return ((uintptr_t)dev < 0);
     }
EOF
# fix error: ordered comparison of pointer with integer zero ('fd_t' {aka 'void*'} and 'int') in commoncpp/serial.cpp (version >= 7.0.0)
patch -ulbf commoncpp/serial.cpp << EOF
@@ -411,3 +411,3 @@

-    if(ser.dev < 0)
+    if((uintptr_t)ser.dev < 0)
         return *this;
EOF
#wl-showstatus configure &&
### fix building DLLs on 64-bit
##if ( echo $RUNPLATFORM | grep -q x86_64 ); then
## aclocal --force -I $MINGWPREFIX/share/aclocal &&
## libtoolize --force -i -c &&
## autoconf --force
##fi &&
##autoreconf -f -i -I $MINGWPREFIX/share/aclocal &&
## fix invalid --enable-stdcall-fixup
#sed -i.bak -e "s/--enable-stdcall-fixup//" configure &&
### solve problems building dynamic library (version >= 2.0.4 <= 2.0.5)
######*** Warning: linker path does not have real file for library -lmingwex.
######*** Warning: linker path does not have real file for library -lmingw32.
######*** Warning: linker path does not have real file for library -lgcc.
##cd src
##/bin/sh ../cmodel.sh /bin/sh ../libtool --tag=CXX   --mode=link g++ -I../inc -Wno-long-long -fno-exceptions -fno-rtti -fno-enforce-eh-specs -fno-check-new -finline -DUCOMMON_VISIBILITY=0 -I/home/bsanders/inst_libucommon-2.0.4/include -g -O2 --enable-stdcall-fixup  -lws2_32 -lwsock32 -lkernel32 -ldl -lpthread -lmsvcrt -no-undefined  -nodefaultlibs -nostdinc++ -lmsvcrt  -version-info 2:8:0    -o libucommon.la -rpath /home/bsanders/inst_libucommon-2.0.4/lib object.lo linked.lo string.lo mapped.lo shell.lo counter.lo bitmap.lo timer.lo memory.lo socket.lo access.lo thread.lo fsys.lo cpr.lo vector.lo xml.lo stream.lo persist.lo keydata.lo  
##cd ..
### remove dependancy on dynamic libstdc++ (GCC 4)
##mv libtool libtool.bak &&
##sed -e "s/-lstdc++/-lstdc++_s -lsupc++/" libtool.bak > libtool &&
##make check
## build and avoid problem with pthread_delay_np
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM &&
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM LDFLAGS="-Wl,--enable-auto-import" &&
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM LDFLAGS="-Wl,--enable-auto-import -lregex" &&
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM LDFLAGS="-static-libstdc++ -Wl,--enable-auto-import -lregex" &&
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM CFLAGS="-I`pwd`/win32fix" CXXFLAGS="-I`pwd`/win32fix" LDFLAGS="-static-libstdc++ -Wl,--enable-auto-import -lregex" &&
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM CFLAGS="-I`pwd`/win32fix" CXXFLAGS="-I`pwd`/win32fix"  LDFLAGS="-static-libgcc -static-libstdc++ -Wl,--enable-auto-import -lregex" &&
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-pkg-config --disable-stdcpp CFLAGS="-I`pwd`/win32fix" CXXFLAGS="-I`pwd`/win32fix" LDFLAGS="-Wl,--enable-auto-import -Wl,--compat-implib -lregex -lgcrypt" &&
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-static --disable-shared --with-pkg-config CFLAGS="-I`pwd`/win32fix" CXXFLAGS="-I`pwd`/win32fix" LDFLAGS="-static-libgcc -static-libstdc++ -Wl,--enable-auto-import -lregex" &&
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-pkg-config CFLAGS="-I`pwd`/win32fix" CXXFLAGS="-I`pwd`/win32fix" LDFLAGS="-static-libgcc -static-libstdc++ -Wl,--enable-auto-import -lregex" &&
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-pkg-config CFLAGS="-I`pwd`/win32fix" CXXFLAGS="-I`pwd`/win32fix" LDFLAGS="-Wl,--enable-auto-import -lregex -no-undefined -Wl,-no-undefined" &&
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-pkg-config --disable-debug --enable-stdcpp CFLAGS="-I`pwd`/win32fix" CXXFLAGS="-I`pwd`/win32fix" LDFLAGS="-Wl,--enable-auto-import -lregex -no-undefined -Wl,-no-undefined" &&
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-pkg-config --disable-debug --enable-stdcpp CFLAGS="-I`pwd`/win32fix" CXXFLAGS="-I`pwd`/win32fix -fpermissive" LDFLAGS="-Wl,--enable-auto-import -lregex -no-undefined -Wl,-no-undefined" &&
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-pkg-config --disable-debug --enable-stdcpp CFLAGS="-I`pwd`/win32fix" CXXFLAGS="-I`pwd`/win32fix -fpermissive" LDFLAGS="-Wl,--as-needed -lregex -Wl,--enable-auto-import -Wl,-no-undefined" &&
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-pkg-config --disable-debug --enable-socks --with-sslstack=gnutls --enable-commoncpp --enable-stdcpp CFLAGS="-I`pwd`/win32fix" CXXFLAGS="-I`pwd`/win32fix -fpermissive" LDFLAGS="-Wl,--as-needed -lregex -Wl,--enable-auto-import -Wl,-no-undefined" &&
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-pkg-config --disable-debug --enable-socks --with-sslstack=gnutls --enable-stdcpp CFLAGS="-I`pwd`/win32fix" CXXFLAGS="-I`pwd`/win32fix -fpermissive" LDFLAGS="-Wl,--as-needed -lregex -lpthread -Wl,--enable-auto-import -Wl,-no-undefined" &&
#./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-pkg-config --disable-debug --enable-socks --with-sslstack=gnutls --enable-stdcpp CFLAGS="-I`pwd`/win32fix" CXXFLAGS="-I`pwd`/win32fix -fpermissive" CXXFLAGS="-fcommon" LDFLAGS="-Wl,--as-needed -lregex -lpthread -Wl,--enable-auto-import -Wl,-no-undefined" &&
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-pkg-config --disable-debug --enable-socks --with-sslstack=gnutls --enable-stdcpp CFLAGS="-I`pwd`/win32fix -DUCOMMON_WINPTHREAD" CXXFLAGS="-I`pwd`/win32fix -fpermissive" LDFLAGS="-Wl,--as-needed -lregex -lpthread -Wl,--enable-auto-import -Wl,-no-undefined" &&
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-pkg-config --enable-pth --disable-debug --enable-socks --with-sslstack=gnutls --enable-stdcpp CFLAGS="-I`pwd`/win32fix" CXXFLAGS="-I`pwd`/win32fix -fpermissive" LDFLAGS="-Wl,--as-needed -lregex -Wl,--enable-auto-import -Wl,-no-undefined" &&
# echo "#undef HAVE_PTHREAD_DELAY_NP" >> config.h &&
# echo "#undef HAVE_SYSLOG_H" >> ucommon-config.h &&
# wl-showstatus build-install &&
# #sed -i.bak "s/-lgcc/-lmingwex -static-libgcc/g" $(grep -l "lgcc" `find . -iname Makefile`) &&
# make -j1 all install-strip LIBS="-Wl,--as-needed -lgcrypt -lws2_32 -lgpg-error" &&
# # fix absolute paths in *-config
# sed -i -e "s?$INSTALLPREFIX?\$(dirname \$0)/..?g" $INSTALLPREFIX/bin/*-config &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf ucommon-$VERSION
## sed -i.bak "s/-lgcc/-static-libgcc/g" $(grep -l "lgcc" `find . -iname Makefile`) &&
## sed -i.bak "s/-lgcc/-lmingwex -static-libgcc/g" $(grep -l "lgcc" `find . -iname Makefile`) &&
## make -j1 all install-strip LIBS="-lgcrypt -lws2_32 -lgpg-error"
## make -j1 all install-strip LIBS="-lgcrypt -lws2_32 -lkernel32 -lmingwex -lintl"
## make -j1 all install-strip libusecure_la_LIBADD="-Wl,--as-needed -lgcrypt"
## make -j1 all install-strip libusecure_la_LIBADD="-Wl,--as-needed -lgcrypt" LIBS="-lkernel32 -lmsvcrt"
### make -j1 all install-strip libusecure_la_LIBADD="-Wl,--as-needed -lgcrypt" LIBS="-lgcc_s -lsupc++ -lkernel32 -lmsvcrt" &&
##cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_COMPAT:BOOL=ON -DBUILD_STATIC:BOOL=ON -DBUILD_STDLIB:BOOL=ON -DBUILD_TESTING:BOOL=ON . &&
## ( make install/strip && make install ) &&
## wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && rm -rf $BASENAME-$VERSION
mkdir -p build_static build_shared &&
 wl-showstatus configure &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DBUILD_STATIC:BOOL=ON -DBUILD_RUNTIME:BOOL=OFF -DCRYPTO_STATIC:BOOL=ON -DCRYPTO_OPENSSL:BOOL=OFF -DBUILD_STDLIB:BOOL=ON -DBUILD_DOCS:BOOL=OFF -DBUILD_TESTING:BOOL=OFF -DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) -S. -Bbuild_static &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DBUILD_STATIC:BOOL=ON -DBUILD_RUNTIME:BOOL=OFF -DCRYPTO_STATIC:BOOL=ON -DCRYPTO_OPENSSL:BOOL=OFF -DBUILD_STDLIB:BOOL=ON -DBUILD_DOCS:BOOL=OFF -DBUILD_TESTING:BOOL=OFF -DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) -DCMAKE_CXX_FLAGS:STRING="-std=c++11" -S. -Bbuild_static &&
 #-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
 wl-showstatus configure &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DBUILD_STATIC:BOOL=OFF -DBUILD_RUNTIME:BOOL=ON -DCRYPTO_STATIC:BOOL=OFF -DCRYPTO_OPENSSL:BOOL=OFF -DBUILD_STDLIB:BOOL=ON -DBUILD_DOCS:BOOL=OFF -DBUILD_TESTING:BOOL=OFF -DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) -S. -Bbuild_shared &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DBUILD_STATIC:BOOL=OFF -DBUILD_RUNTIME:BOOL=ON -DCRYPTO_STATIC:BOOL=OFF -DCRYPTO_OPENSSL:BOOL=OFF -DBUILD_STDLIB:BOOL=ON -DBUILD_DOCS:BOOL=OFF -DBUILD_TESTING:BOOL=OFF -DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) -DCMAKE_CXX_FLAGS:STRING="-std=c++11" -S. -Bbuild_shared &&
 ## fix execution of Python scripts
 #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|glib-genmarshal\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
 #wl-showstatus build &&
 #ninja -Cbuild_static &&
 #wl-showstatus build &&
 #ninja -Cbuild_shared &&
 wl-showstatus build-install &&
 ninja -Cbuild_static install/strip &&
 wl-showstatus build-install &&
 ninja -Cbuild_shared install/strip &&
 mv -f $INSTALLPREFIX/lib/*.dll $INSTALLPREFIX/bin/ &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && rm -rf $BASENAME-$VERSION




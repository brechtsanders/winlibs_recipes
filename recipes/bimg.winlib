export NAME="bimg"
export STATUS=
export URL=https://github.com/bkaradzic/bimg
export BASENAME=bimg
export DESCRIPTION="Image library"
export CATEGORY=graphics
export TYPE=library
export VERSION=master
export VERSIONDATE=20170608
wl-showstatus --package-version
export DEPENDANCIES=bx
export OPTIONALDEPENDANCIES=
export BUILDDEPENDANCIES=genie
export LICENSEFILE=LICENSE
export LICENSETYPE=BSD
export DOWNLOADURL="https://github.com/bkaradzic/bimg/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/bkaradzic/bimg/archive/$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#mv $TARBALLDIR/$BASENAME/$VERSION.tar.gz $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
wl-wait4deps
wl-showstatus extract
#tar xfz $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
tar xfz $TARBALLDIR/$BASENAME/$VERSION.tar.gz
cd $BASENAME-$VERSION
# fix makefile
patch -ulbf makefile << EOF
@@ -41,19 +41,3 @@
 projgen: ## Generate project files for all configurations.
-       \$(GENIE) --with-tools                     vs2017
        \$(GENIE) --with-tools --gcc=mingw-gcc     gmake
-       \$(GENIE) --with-tools --gcc=linux-gcc     gmake
-       \$(GENIE) --with-tools --gcc=osx-x64       gmake
-       \$(GENIE) --with-tools --xcode=osx         xcode8
-       \$(GENIE) --with-tools --xcode=ios         xcode8
-       \$(GENIE)              --gcc=freebsd       gmake
-       \$(GENIE)                                --gcc=android-arm     gmake
-       \$(GENIE)                                --gcc=android-arm64   gmake
-       \$(GENIE)                                --gcc=android-x86     gmake
-       \$(GENIE)                                --gcc=wasm2js         gmake
-       \$(GENIE)                                --gcc=wasm            gmake
-       \$(GENIE)                                --gcc=ios-arm         gmake
-       \$(GENIE)                                --gcc=ios-arm64       gmake
-       \$(GENIE)                                --gcc=ios-simulator   gmake
-       \$(GENIE)                                --gcc=ios-simulator64 gmake
-       \$(GENIE)                                --gcc=rpi             gmake

EOF
wl-showstatus configure &&
 ( make OS=windows GENIE=$(which genie.exe) BX_DIR=$MINGWPREFIX/include/bx || true ) &&
 wl-showstatus build &&
 #( make mingw-gcc-release$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) CC=${CC:-gcc} CXX=${CXX:-g++} AR=ar || make -C.build/projects/gmake-mingw-gcc bimg bimg_decode bimg_encode config=release$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) CC=${CC:-gcc} CXX=${CXX:-g++} AR=ar ) &&
 ( make mingw-gcc-release$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) CC=${CC:-gcc} CXX="${CXX:-g++} -fpermissive" AR=ar || make -C.build/projects/gmake-mingw-gcc bimg bimg_decode bimg_encode config=release$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) CC=${CC:-gcc} CXX="${CXX:-g++} -fpermissive" AR=ar ) &&
 wl-showstatus install &&
 rm -f .build/win$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi)_mingw-gcc/bin/libbxRelease.a &&
 mkdir -p $INSTALLPREFIX/lib $INSTALLPREFIX/include/bimg &&
 cp -f .build/win$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi)_mingw-gcc/bin/*.a $INSTALLPREFIX/lib/ &&
 cp -rf include/bimg/* $INSTALLPREFIX/include/bimg/ &&
 cp -rf scripts $INSTALLPREFIX/include/bimg/ &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
####To do: build everything including utils




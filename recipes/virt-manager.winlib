#export NAME="Virtual Machine Manager"
#export STATUS=
#export URL=http://www.virt-manager.org/
#export BASENAME=virt-manager
#export DESCRIPTION="The \"Virtual Machine Manager\" application (virt-manager for short package name) is a desktop user interface for managing virtual machines. It presents a summary view of running domains, their live performance & resource utilization statistics. The detailed view graphs performance & utilization over time. Wizards enable the creation of new domains, and configuration & adjustment of a domain's resource allocation & virtual hardware. An embedded VNC client viewer presents a full graphical console to the guest domain."
#export CATEGORY=virtualization
#export TYPE=library
#export VERSION=0.6.0
##export VERSION=0.6.1
##export VERSION=0.7.0
#export VERSIONDATE=
#wl-showstatus --package-version
#export DEPENDENCIES=libvirt
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=
#export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=COPYING
#export LICENSETYPE=GPL2
#export DOWNLOADURL="http://virt-manager.et.redhat.com/download/sources/virt-manager/"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://virt-manager.et.redhat.com/download/sources/virt-manager/$BASENAME-$VERSION.tar.gz
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#tar xz --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
#cd $BASENAME-$VERSION
## remove the scrollkeeper error by putting only a } on line 22995 in configure
#patch -ulbf configure << EOF
#--- configure  Mon Jan 26 20:44:56 2009
#+++ configure  Fri Feb  6 10:53:54 2009
#@@ -23351,5 +23351,5 @@
#   { { echo "\$as_me:\$LINENO: error: Couldn't find scrollkeeper-config. Please install the scrollkeeper package: http://scrollkeeper.sourceforge.net" >&5
# echo "\$as_me: error: Couldn't find scrollkeeper-config. Please install the scrollkeeper package: http://scrollkeeper.sourceforge.net" >&2;}
#-   { (exit 1); exit 1; }; }
#+   }
# fi
#EOF
#cat > man/Makefile.in << EOF
#all:
#install:
#EOF
## work around missing virt-manager-C.omf.out
#cp help/virt-manager/C/virt-manager-C.omf help/virt-manager/C/virt-manager-C.omf.out
#PYTHON=$PYDIR/python.exe PATH=$PATH:$PYDIR:$PYDIR/bin PKG_CONFIG_PATH=${PKG_CONFIG_PATH:+$PKG_CONFIG_PATH:}$PYDIR/Lib/pkgconfig ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM CFLAGS="-I$PYDIR/include" && make install
#
#
#$PYDIR/python.exe src/virt-manager.py
#
##wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && rm -rf $BASENAME-$VERSION



export NAME="Virtual Machine Manager"
export STATUS=
export URL=https://virt-manager.org/
#export URL=https://github.com/virt-manager/virt-manager
export BASENAME=virt-manager
export DESCRIPTION="The \"Virtual Machine Manager\" application (virt-manager for short package name) is a desktop user interface for managing virtual machines. It presents a summary view of running domains, their live performance & resource utilization statistics. The detailed view graphs performance & utilization over time. Wizards enable the creation of new domains, and configuration & adjustment of a domain's resource allocation & virtual hardware. An embedded VNC client viewer presents a full graphical console to the guest domain."
export CATEGORY=virtualization
export TYPE=application
#export VERSION=0.5.3
#export VERSION=0.5.4
#export VERSION=0.6.0
#export VERSION=0.7.0
#export VERSION=0.8.0
#export VERSION=0.8.1
#export VERSION=0.8.5
#export VERSIONDATE=
#export VERSION=0.8.6
#export VERSIONDATE=20110115
#export VERSION=0.8.7
#export VERSIONDATE=20110325
#export DEPENDENCIES=libvirt,pygtk-2.0
#export VERSION=0.9.0
#export VERSIONDATE=20110727
#export VERSION=0.9.1
#export VERSIONDATE=20120201
#export VERSION=0.9.2
#export VERSIONDATE=20120709
####configure: error: cannot find install-sh, install.sh, or shtool in "." "./.." "./../.."
#export VERSION=0.9.3
#export VERSIONDATE=20120710
#export VERSION=0.9.4
#export VERSIONDATE=20120730
export VERSION=0.9.5
export VERSIONDATE=20130401
export DEPENDENCIES=libvirt
#export VERSION=0.10.0
#export VERSIONDATE=20130620
#export VERSION=1.0.0
#export VERSIONDATE=20140215
#export VERSION=1.0.1
#export VERSIONDATE=20140323
#export VERSION=1.1.0
#export VERSIONDATE=20140909
#export VERSION=1.2.0
#export VERSIONDATE=20150505
#export VERSION=1.2.1
#export VERSIONDATE=20150607
#export VERSION=1.3.0
#export VERSIONDATE=20151128
#export VERSION=1.3.1
#export VERSIONDATE=20151207
####sh: ./configure: No such file or directory
#export VERSION=1.3.2
#export VERSIONDATE=20151225
#export VERSION=1.4.0
#export VERSIONDATE=20160619
#export VERSION=1.4.1
#export VERSIONDATE=20170309
#export VERSION=1.4.2
#export VERSIONDATE=20170815
#export VERSION=1.4.3
#export VERSIONDATE=20170919
#export VERSION=1.5.0
#export VERSIONDATE=20180207
#export VERSION=1.5.1
#export VERSIONDATE=20180301
#export VERSION=2.0.0
#export VERSIONDATE=20181015
#export VERSION=2.1.0
#export VERSIONDATE=20190204
#export VERSION=2.2.0
#export VERSIONDATE=20190617
#export VERSION=2.2.1
#export VERSIONDATE=20190704
#export VERSION=3.0.0
#export VERSIONDATE=20200916
#export VERSION=3.1.0
#export VERSIONDATE=20201001
#export VERSION=3.2.0
#export VERSIONDATE=20201115
#export VERSION=4.0.0
#export VERSIONDATE=20220303
#export VERSION=4.1.0
#export VERSIONDATE=20220805
#export VERSION=5.0.0
#export VERSIONDATE=20241127
####'pod2man' is not recognized as an internal or external command, operable program or batch file.
wl-showstatus --package-version
#export DEPENDENCIES=libvirt,pod2man
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=COPYING
export LICENSETYPE=GPL2
#export DOWNLOADURL="http://www.virt-manager.org/download/sources/virt-manager/"
export DOWNLOADURL="https://github.com/virt-manager/virt-manager/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=http://www.virt-manager.org/download/sources/virt-manager/virt-manager-$VERSION.tar.gz
#export DOWNLOADSOURCEURL=https://github.com/virt-manager/virt-manager/archive/refs/tags/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
tar xz --force-local -f $TARBALLDIR/$BASENAME/virt-manager-$VERSION.tar.gz
#tar xz --force-local -f $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd virt-manager-$VERSION
# avoid making man
mv man/Makefile.in man/Makefile.in.bak
cat > man/Makefile.in << EOF
all:
install:
install-strip:
EOF
wl-showstatus configure &&
 ## reconfigure (version >= 0.9.2)
 #autoreconf -f -i -I $MINGWPREFIX/share/aclocal
 #cp -f po/Makefile.in po/Makefile.in.in
 ## remove the scrollkeeper error by putting only a } on line 22995 in configure
 #patch -ulbf configure << EOF
 #--- configure  Tue Mar 10 16:59:12 2009
 #+++ configure  Tue Mar 10 16:59:48 2009
 #@@ -23351,5 +23351,5 @@
 #   { { echo "$as_me:$LINENO: error: Couldn't find scrollkeeper-config. Please install the scrollkeeper package: http://scrollkeeper.sourceforge.net" >&5
 # echo "$as_me: error: Couldn't find scrollkeeper-config. Please install the scrollkeeper package: http://scrollkeeper.sourceforge.net" >&2;}
 #-   { (exit 1); exit 1; }; }
 #+   }
 # fi
 #EOF
 #mv configure configure.bak
 #sed -e "s?/include/python\${PYTHON_VERSION}?/include?; s?/lib/python\${PYTHON_VERSION}/site-packages?$/Lib/site-packages?; s?-lpython\\\${PYTHON_VERSION}?-lpython\`echo \\\$PYTHON_VERSION|sed -e 's/\\\.//'\`?; s?\(return.*\)gtk_major_version\(.*\)gtk_minor_version\(.*\)gtk_micro_version?\1GTK_MAJOR_VERSION\2GTK_MAJOR_VERSION\3GTK_MICRO_VERSION?; s?^\(PYTHON_CC=\).*?\1gcc?; s?^\(PYTHON_LIB_DEPS=\|PYTHON_LIBDIR=\).*?\1?; s?^\(PYTHON_LIBPL=\).*?\1$PYDIR/libs?" configure.bak > configure
 #wl-showstatus configure &&
 #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM PYTHON=$PYDIR/python.exe PYTHON_SITE_PKG=$PYDIR/Lib/site-packages && make install
 #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM PYTHON=$PYDIR/python.exe PKG_CONFIG_PATH=${PKG_CONFIG_PATH:+$PKG_CONFIG_PATH:}$PYDIR/Lib/pkgconfig CFLAGS="-I$PYDIR/include" && make install
 #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM PYTHON=$PYDIR/python.exe PKG_CONFIG_PATH=${PKG_CONFIG_PATH:+$PKG_CONFIG_PATH:}$PYDIR/Lib/pkgconfig CFLAGS="-I$PYDIR/include -I$MINGWPREFIX/include/gtk-2.0 -I$MINGWPREFIX/lib/gtk-2.0/include -I$MINGWPREFIX/include/pango-1.0 -I$MINGWPREFIX/include/cairo -I$MINGWPREFIX/include/atk-1.0"
 #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM PATH="$PYDIR:$PYDIR/bin:$PATH" PYTHON=$PYDIR/python.exe PYTHON_SITE_PKG=$PYDIR/Lib/site-packages PKG_CONFIG_PATH=${PKG_CONFIG_PATH:+$PKG_CONFIG_PATH:}$PYDIR/Lib/pkgconfig CFLAGS="-I$PYDIR/include" && make install
 #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM PYTHON=$PYDIR/python.exe PYTHON_SITE_PKG=$PYDIR/Lib/site-packages PKG_CONFIG_PATH=${PKG_CONFIG_PATH:+$PKG_CONFIG_PATH:}$PYDIR/Lib/pkgconfig CFLAGS="-I$PYDIR/include"
 PATH=$PATH:$PERLDIR/../c/bin INTLTOOL_PERL="$PERLDIR/bin/perl.exe" ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM PYTHON=$PYDIR/python.exe PYTHON_SITE_PKG=$PYDIR/Lib/site-packages PKG_CONFIG_PATH=${PKG_CONFIG_PATH:+$PKG_CONFIG_PATH:}$PYDIR/Lib/pkgconfig CFLAGS="-I$PYDIR/include" &&
 PATH=$PATH:$PYDIR:$PYDIR/bin make install-strip &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION


$PYDIR/python.exe virt-manager
####ImportError: No module named 'gi'



patch -u -l src/virt-manager.py << EOF
--- src/virt-manager.py Thu Jan 31 17:48:49 2008
+++ src/virt-manager.py Mon Feb  4 10:12:20 2008
@@ -232,10 +232,11 @@
     import gtk
     gtk.gdk.threads_init()
 
-    import dbus
-    import dbus.glib
-    dbus.glib.threads_init()
-    import dbus.service
+    if not options.nodbus:
+        import dbus
+        import dbus.glib
+        dbus.glib.threads_init()
+        import dbus.service
 
     # Now we've got basic environment up & running we can fork
     if not options.nofork:
EOF

cat > gconf.py << EOF
import string
import atexit
CONFIG_FILE="gconf.conf"
class Gconf:
    def __init__(self):
        self.config = {}
        try:
            #execute python file which contains the dictionary called config
            exec open (CONFIG_FILE) 
            self.config = config
        except:
            pass
    #only get the 'basename' from the gconf key
    def keyname(self, key):
        return string.rsplit(key, '/', 1)[-1]
    def get_bool(self, key):
        key = self.keyname(key)
        return self.config.setdefault(self.keyname(key), True)
    def set_bool(self, key,value):
        key = self.keyname(key)
        self.config[key] = value
    # FIXME assume type is int for now
    def get_pair(self, key, ta = None, tb = None):
        key = self.keyname(key)
        return self.config.setdefault(self.keyname(key), [400, 500])
    # FIXME assume type is int for now
    def set_pair(self, key, ta, tb, a, b):
        key = self.keyname(key)
        self.config[key] = [a, b]
    #Save current dictionary to config file
    def save(self):
        file = open(CONFIG_FILE, "w")
        data = "config = {"
        for i in self.config:
            data +=  "'"+i+"'" + ":" + str(self.config[i])+",\n"
        data += "}"
        file.write(data)
        file.close()
VALUE_INT = ""
gconf = Gconf()
def client_get_default():
    return  gconf
def gconf_atexit():
    gconf.save()
atexit.register(gconf_atexit)
EOF

touch gnome.py

#ln -s $MINGWPREFIX/lib/pkgconfig/libpng12.pc $MINGWPREFIX/lib/pkgconfig/libpng13.pc
#ln -s $MINGWPREFIX/bin/libpng12-0.dll $MINGWPREFIX/bin/libpng13.dll
#PATH=$MINGWPREFIX/bin:$PATH sh $INSTALLPREFIX/bin/virt-manager --no-dbus
#PATH=$MINGWPREFIX/bin:$PATH $PYDIR/python.exe $INSTALLPREFIX/share/virt-manager/virt-manager.py --no-dbus --no-fork
PATH=$MINGWPREFIX/bin:$PATH PYTHONHOME=$PYDIR PYTHONPATH=$PYDIR/Lib/site-packages $PYDIR/python.exe src/virt-manager.py --no-dbus --no-fork &&
    echo OK

#$PYDIR/python setup.py --help-commands
wl-showstatus build &&
 PATH=$MINGWPREFIX/python/Scripts:$PATH PYTHONPATH=$MINGWPREFIX/lib${PYTHONPATH:+:$PYTHONPATH} $PYDIR/python.exe setup.py build &&
 wl-showstatus build-install &&
    echo OK
####'pod2man' is not recognized as an internal or external command, operable program or batch file.

#wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION
cd ..



## don't fail on missing rst2man/rst2man.py in setup.py (version >= 4.0.0)
#patch -ulbf setup.py << EOF
#@@ -171,3 +171,3 @@
#         if not rstbin:
#-            sys.exit("Didn't find rst2man or rst2man.py")
#+            return
#
#@@ -506,8 +506,2 @@
#
#-        ("share/man/man1", [
#-            "man/virt-manager.1",
#-            "man/virt-install.1",
#-            "man/virt-clone.1",
#-            "man/virt-xml.1"
#-        ]),
#
#EOF
#$PYDIR/python.exe setup.py configure --prefix $INSTALLPREFIX/share/virt-manager --default-graphics spice &&
#GETTEXTDATADIR=$MINGWPREFIX/share/gettext  $PYDIR/python.exe setup.py build &&
#$PYDIR/python.exe setup.py --no-update-icon-cache --no-compile-schemas install --force --prefix $INSTALLPREFIX/share/virt-manager

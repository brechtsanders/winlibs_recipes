export NAME="Hikyuu"
export STATUS=
export URL=http://hikyuu.org/
export BASENAME=hikyuu
export DESCRIPTION="Hikyuu Quant Framework"
export CATEGORY=math
export TYPE=library
#export VERSION=1.2.8
#export VERSIONDATE=20230823
#export VERSION=1.2.9
#export VERSIONDATE=20231009
#export VERSION=1.3.0
#export VERSIONDATE=20231105
#export VERSION=1.3.1
#export VERSIONDATE=20231206
#export VERSION=1.3.2
#export VERSIONDATE=20240106
#export VERSION=1.3.3
#export VERSIONDATE=20240131
#export VERSION=1.3.4
#export VERSIONDATE=20240201
#export VERSION=1.3.5
#export VERSIONDATE=20240301
#export VERSION=2.0.0
#export VERSIONDATE=20240403
#export VERSION=2.0.1
#export VERSIONDATE=20240407
#export VERSION=2.0.2
#export VERSIONDATE=20240420
#export VERSION=2.0.3
#export VERSIONDATE=20240426
#export VERSION=2.0.4
#export VERSIONDATE=20240506
#export VERSION=2.0.5
#export VERSIONDATE=20240508
#export VERSION=2.0.6
#export VERSIONDATE=20240514
#export VERSION=2.0.7
#export VERSIONDATE=20240519
#export VERSION=2.0.8
#export VERSIONDATE=20240522
####error: @programdir\core\base\bit.lua:21: module 'base/compat/bit' not found
#export VERSION=2.0.9
#export VERSIONDATE=20240527
#export VERSION=2.1.0
#export VERSIONDATE=20240618
#export VERSION=2.1.1
#export VERSIONDATE=20240809
#export VERSION=2.1.2
#export VERSIONDATE=20240826
#export VERSION=2.1.4
#export VERSIONDATE=20240904
#export VERSION=2.1.5
#export VERSIONDATE=20240911
#export VERSION=2.2.0
#export VERSIONDATE=20240926
#export VERSION=2.2.1
#export VERSIONDATE=20241001
#export VERSION=2.2.2
#export VERSIONDATE=20241101
export VERSION=2.2.3
export VERSIONDATE=20241103
#export VERSION=2.2.4
#export VERSIONDATE=20241209
####ld.exe: cannot find -lboost_serialization-mt: No such file or directory
#export VERSION=2.3.0
#export VERSIONDATE=20250101
#export VERSION=2.3.1
#export VERSIONDATE=20250118
####hikyuu_cpp\hikyuu\utilities\db_connect\mysql\MySQLStatement.cpp:70:9: error: 'CR_SERVER_LOST' was not declared in this scope
wl-showstatus --package-version
export DEPENDENCIES=zlib,libiconv,boost,fmt,hdf5,sqlite3,mariadb-client,openssl,nng
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=xmake
export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=LICENSE.txt
#export LICENSETYPE=MIT
export LICENSEFILE=LICENSE
export LICENSETYPE=Apache
#export DOWNLOADURL="https://gitee.com/fasiondog/hikyuu/releases"
export DOWNLOADURL="https://github.com/fasiondog/hikyuu/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://gitee.com/fasiondog/hikyuu/archive/refs/tags/$VERSION.tar.gz
export DOWNLOADSOURCEURL=https://github.com/fasiondog/hikyuu/archive/refs/tags/$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/$VERSION.tar.gz
cd $BASENAME-$VERSION
# fix redefinitions in hikyuu_cpp/hikyuu/utilities/Null.h (version >= 2.0.3)
patch -ulbf hikyuu_cpp/hikyuu/utilities/Null.h << EOF
@@ -72,3 +72,3 @@

-#if !defined(_MSC_VER) && !HKU_OS_OSX
+#if !defined(_WIN32) && !HKU_OS_OSX
 /**
@@ -99,3 +99,3 @@
 #if (HKU_OS_ANDROID && HKU_ARCH_ARM64) || (HKU_OS_LINUX && HKU_ARCH_ARM64) || HKU_OS_OSX || \\
-  HKU_OS_IOS || (defined(__GNUC__) && __GNUC__ >= 8) || (defined(__clang__) && !HKU_OS_ANDROID)
+  HKU_OS_IOS || (defined(__GNUC__) && __GNUC__ >= 8 && !defined(__MINGW32__)) || (defined(__clang__) && !HKU_OS_ANDROID)
 /**
EOF
# avoid flatbuffers version check in hikyuu_cpp/hikyuu/global/agent/spot_generated.h (version >= 2.0.3)
####error: static assertion failed: Non-compatible flatbuffers version included
patch -ulbf hikyuu_cpp/hikyuu/global/agent/spot_generated.h << EOF
@@ -10,2 +10,3 @@
 // generated, otherwise it may not be compatible.
+/*
 static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
@@ -14,2 +15,3 @@
              "Non-compatible flatbuffers version included");
+*/

EOF
# fix hikyuu_cpp/hikyuu/utilities/db_connect/mysql/MySQLStatement.h (version >= 2.0.3)
patch -ulbf hikyuu_cpp/hikyuu/utilities/db_connect/mysql/MySQLStatement.h << EOF
@@ -21,6 +21,6 @@
 #else
-#include <mysql/mysql.h>
+#include <mariadb/mysql.h>
 #endif

-#if MYSQL_VERSION_ID >= 80000
+#if MYSQL_VERSION_ID >= 80000 && !defined(LIBMARIADB)
 typedef bool my_bool;
EOF
# fix type conversion issue from bool to my_bool hikyuu_cpp/hikyuu/utilities/db_connect/mysql/MySQLStatement.cpp (version >= 2.0.3)
patch -ulbf hikyuu_cpp/hikyuu/utilities/db_connect/mysql/MySQLStatement.cpp << EOF
@@ -99,4 +99,4 @@
 #if MYSQL_VERSION_ID >= 80000
-        m_result_bind[idx].is_null = (bool*)&m_result_is_null[idx];
-        m_result_bind[idx].error = (bool*)&m_result_error[idx];
+        m_result_bind[idx].is_null = (my_bool*)&m_result_is_null[idx];
+        m_result_bind[idx].error = (my_bool*)&m_result_error[idx];
 #else
EOF
# fix undefined SSL_MODE_DISABLED in hikyuu_cpp/hikyuu/utilities/db_connect/mysql/MySQLConnect.cpp (version >= 2.0.3)
patch -ulbf hikyuu_cpp/hikyuu/utilities/db_connect/mysql/MySQLConnect.cpp << EOF
@@ -62,2 +62,3 @@
         // 20220314: 新版 mysqlclient 默认 ssl 可能被开启，这里强制设为关闭
+#ifdef SSL_MODE_DISABLED
         unsigned int ssl_mode = SSL_MODE_DISABLED;
@@ -65,2 +66,3 @@
                   "Failed set ssl_mode options, {}", mysql_error(m_mysql));
+#endif

EOF
# fix using MariaDB instead of MySQL
sed -i.bak -e "s?mysql\(/mysql\.h\)?mariadb\1?" $(grep -l "mysql/mysql\.h" $(find -name '*.h'))
## fix undefined CR_SERVER_LOST in hikyuu_cpp/hikyuu/utilities/db_connect/mysql/MySQLStatement.cpp (version >= 2.3.0)
#sed -i.bak2 -e "1i #include <mariadb/errmsg.h>" hikyuu_cpp/hikyuu/utilities/db_connect/mysql/MySQLStatement.cpp
## fix undefined CreateFile2 in hikyuu_cpp/hikyuu/global/sysinfo.cpp (version >= 2.1.0)
#mv hikyuu_cpp/hikyuu/global/sysinfo.cpp hikyuu_cpp/hikyuu/global/sysinfo.cpp.bak &&
#cat > hikyuu_cpp/hikyuu/global/sysinfo.cpp << EOF &&
##if !defined(_WIN32_WINNT) || _WIN32_WINNT < 0x0602
##undef _WIN32_WINNT
##define _WIN32_WINNT 0x0602
##endif
#EOF
#cat hikyuu_cpp/hikyuu/global/sysinfo.cpp.bak >> hikyuu_cpp/hikyuu/global/sysinfo.cpp
wl-showstatus configure-static &&
 xmake config --confirm=def --trybuild=ninja --kind=static --plat=mingw --arch=$(echo $RUNPLATFORM|sed -e "s/^\([^-]*\)-.*$/\1/"|sed -e "s/^i686/i386/; s/^aarch64/arm64/") --toolchain=$(if ${CC:-gcc} --version|grep -q clang; then echo clang; else echo gcc; fi) --cxxflags="-I$PYDIR/include" &&
 #--qt=$MINGWPREFIX/qt6
 wl-showstatus build-static &&
 xmake build --confirm=def &&
 wl-showstatus install-static &&
 xmake install --confirm=def --installdir=$INSTALLPREFIX &&
 wl-showstatus clean &&
 xmake clean &&
 wl-showstatus configure-shared &&
 xmake config --confirm=def --trybuild=ninja --kind=shared --plat=mingw --arch=$(echo $RUNPLATFORM|sed -e "s/^\([^-]*\)-.*$/\1/"|sed -e "s/^i686/i386/; s/^aarch64/arm64/") --toolchain=$(if ${CC:-gcc} --version|grep -q clang; then echo clang; else echo gcc; fi) --cxxflags="-I$PYDIR/include" --shflags="-Wl,--allow-multiple-definition -liconv -lz -lssl -lcrypto -lfmt -lboost_serialization-mt -lhdf5 -lhdf5_cpp -lsqlite3 -lmariadbclient -lnng -lws2_32 -lcrypt32 -lbcrypt" &&
 wl-showstatus build-shared &&
 xmake build --confirm=def &&
 wl-showstatus install-shared &&
 xmake install --confirm=def --installdir=$INSTALLPREFIX &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




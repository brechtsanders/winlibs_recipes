export NAME="include-what-you-use"
export STATUS=
export URL=https://include-what-you-use.org/
export BASENAME=include-what-you-use
export DESCRIPTION="\"Include what you use\" means this: for every symbol (type, function variable, or macro) that you use in foo.cc, either foo.cc or foo.h should #include a .h file that exports the declaration of that symbol. The include-what-you-use tool is a program that can be built with the clang libraries in order to analyze #includes of source files to find include-what-you-use violations, and suggest fixes for them. The main goal of include-what-you-use is to remove superfluous #includes. It does this both by figuring out what #includes are not actually needed for this file (for both .cc and .h files), and replacing #includes with forward-declares when possible."
export CATEGORY=
export TYPE=library
#export VERSION=0.13
#export VERSIONDATE=20191128
export VERSION=0.15
export VERSIONDATE=20201122
#export VERSION=0.16
#export VERSIONDATE=20210526
#export VERSION=0.17
#export VERSIONDATE=20211206
#export VERSION=0.18
#export VERSIONDATE=20220401
#export VERSION=0.19
#export VERSIONDATE=20221107
wl-showstatus --package-version
export DEPENDANCIES=llvm,clang
export OPTIONALDEPENDANCIES=
export BUILDDEPENDANCIES=cmake,ninja
export LICENSEFILE=COPYING
export LICENSETYPE=
export DOWNLOADURL="https://include-what-you-use.org/downloads/"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://include-what-you-use.org/downloads/include-what-you-use-$VERSION.src.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
mkdir -p $BASENAME-$VERSION
tar xfz $TARBALLDIR/$BASENAME/include-what-you-use-$VERSION.src.tar.gz -C$BASENAME-$VERSION
cd $BASENAME-$VERSION
#cd $BASENAME-$VERSION/include-what-you-use
mkdir -p build_win &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=ON -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -S. -Bbuild_win &&
 #-DLLVM_USE_RELATIVE_PATHS_IN_FILES:BOOL=ON
 #-DLLVM_ENABLE_LTO:STRING=Full
 wl-showstatus build-install &&
 ninja -Cbuild_win install/strip &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
 #wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd ../.. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




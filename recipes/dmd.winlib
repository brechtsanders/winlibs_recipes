export NAME="D language compiler"
export STATUS=
export URL=https://dlang.org/
export BASENAME=dmd
export DESCRIPTION="dmd D Programming Language compiler. D is a general-purpose programming language with static typing, systems-level access, and C-like syntax. With the D Programming Language, write fast, read fast, and run fast."
export CATEGORY=development
export TYPE=application
#export VERSION=2.096.0
#export VERSIONDATE=20210318
#export VERSION=2.096.1
#export VERSIONDATE=20210426
#export VERSION=2.097.0
#export VERSIONDATE=20210604
#export VERSION=2.097.1
#export VERSIONDATE=20210720
#export VERSION=2.097.2
#export VERSIONDATE=20210810
#export VERSION=2.098.0
#export VERSIONDATE=20211010
#export VERSION=2.098.1
#export VERSIONDATE=20220122
#export VERSION=2.099.0
#export VERSIONDATE=20220308
#export VERSION=2.099.1
#export VERSIONDATE=20220408
#export VERSION=2.100.0
#export VERSIONDATE=20220515
#export VERSION=2.100.1
#export VERSIONDATE=20220710
####std.file.FileException@std\file.d(4273): Copy from D:\Prog\winlibs64-11.2.0ucrt\home\dmd-2.099.0\src\dmd\root\root.h to D:/Prog/winlibs64-11.2.0ucrt/home/inst_dmd-2.099.0/share/dmd\src\dmd\root\root.h: The system cannot find the file specified.
export VERSION=2.100.2
export VERSIONDATE=20220911
#export VERSION=2.101.0
#export VERSIONDATE=20221115
#export VERSION=2.101.1
#export VERSIONDATE=20221116
#export VERSION=2.101.2
#export VERSIONDATE=20230101
#export VERSION=2.102.0
#export VERSIONDATE=20230202
#export VERSION=2.102.1
#export VERSIONDATE=20230216
#export VERSION=2.102.2
#export VERSIONDATE=20230302
#export VERSION=2.103.0
#export VERSIONDATE=20230402
#export VERSION=2.103.1
#export VERSIONDATE=20230502
#export VERSION=2.104.0
#export VERSIONDATE=20230602
#export VERSION=2.104.1
#export VERSIONDATE=20230702
#export VERSION=2.104.2
#export VERSIONDATE=20230716
#export VERSION=2.105.0
#export VERSIONDATE=20230802
#export VERSION=2.105.1
#export VERSIONDATE=20230902
#export VERSION=2.105.2
#export VERSIONDATE=20230916
#export VERSION=2.105.3
#export VERSIONDATE=20231102
#export VERSION=2.106.0
#export VERSIONDATE=20231202
#export VERSION=2.106.1
#export VERSIONDATE=20240102
wl-showstatus --package-version
export DEPENDENCIES=
export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=
#export OPTIONALBUILDDEPENDENCIES=
export BUILDDEPENDENCIES=pedeps
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE.txt
export LICENSETYPE=BSL
#export DOWNLOADURL="http://downloads.dlang.org/releases/"
#export DOWNLOADURL="https://github.com/dlang/dmd/releases"
export DOWNLOADURL="https://github.com/dlang/dmd/tags"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL="https://github.com/dlang/dmd/archive/v$VERSION.tar.gz http://downloads.dlang.org/releases/$(echo $VERSION|sed -e "s/^\([0-9]*\)\..*$/\1/").x/$VERSION/dmd.$VERSION.windows.zip"
export DOWNLOADSOURCEURL="https://github.com/dlang/dmd/archive/refs/tags/v$VERSION.tar.gz http://downloads.dlang.org/releases/$(echo $VERSION|sed -e "s/^\([0-9]*\)\..*$/\1/").x/$VERSION/dmd.$VERSION.windows.zip"
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd $BASENAME-$VERSION
# use prebuilt binary to avoid bootstrap
unzip -oq $TARBALLDIR/$BASENAME/dmd.$VERSION.windows.zip -dprebuilt
## fix src/dmd/vsoptions.d (version >= 2.096.1)
#patch -ulbf src/dmd/vsoptions.d << EOF
#@@ -72,3 +72,3 @@
#         else
#-            return "msvcrt120"; // mingw replacement
#+            return "msvcrt"; // mingw replacement
#     }
#EOF
## fix extensions in src/dmd/target.d (version >= 2.098.0)
#patch -ulbf src/dmd/target.d << EOF
#@@ -261,4 +261,4 @@
#         {
#-            obj_ext = "obj";
#-            lib_ext = "lib";
#+            obj_ext = "o";
#+            lib_ext = "a";
#             dll_ext = "dll";
#EOF
# fix src/bootstrap.sh (version >= 2.096.0)
patch -ulbf src/bootstrap.sh << EOF
@@ -39,2 +39,5 @@
     MODEL_PATH="bin\${MODEL}"
+elif ( echo \$uname_s|grep -q "MINGW\\|MSYS" ) ; then
+    OS=windows
+    MODEL_PATH=bin
 else
EOF
# fix missing src/dmd/root/root.h (version >= 2.099.0 <= 2.100.2)
touch src/dmd/root/root.h
## fix missing compiler/src/dmd/root/root.h (version >= 2.101.0)
#touch compiler/src/dmd/root/root.h
# fix src/dmd/link.d (version >= 2.100.2)
patch -ulbf src/dmd/link.d << EOF
@@ -223,3 +223,3 @@

-    version (Windows)
+    version (Windows_MSVC)
     {
@@ -465,3 +465,3 @@
     }
-    else version (Posix)
+    else version (MinGW)
     {
EOF
## fix compiler/src/dmd/link.d (version >= 2.101.0)
#patch -ulbf compiler/src/dmd/link.d << EOF
#@@ -238,3 +238,3 @@
#
#-    version (Windows)
#+    version (Windows_MSVC)
#     {
#@@ -480,3 +480,3 @@
#     }
#-    else version (Posix)
#+    else version (MinGW)
#     {
#EOF
## fix missing compiler/src/dmd/root/root.h (version >= 2.101.1)
#touch compiler/src/dmd/root/root.h
#wl-showstatus build &&
# #make -Csrc -fwin32.mak OS=windows MODEL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) BUILD=release HOST_DC=dmd CC=${CC:-gcc} &&
# #make -Csrc -fposix.mak OS=windows MODEL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) BUILD=release HOST_CXX=${CXX:-g++} HOST_DC=$(pwd)/prebuilt/dmd2/windows/bin$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; fi)/dmd.exe &&
# AUTO_BOOTSTRAP=0 ENABLE_RELEASE=1 MODEL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) BUILD=release HOST_DMD=$(pwd)/prebuilt/dmd2/windows/bin$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; fi)/dmd.exe $(pwd)/prebuilt/dmd2/windows/bin$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; fi)/dmd.exe -run src/build.d &&
#cp -u $MINGWDIR/$RUNPLATFORM/lib/libmsvcrt-os.a prebuilt/dmd2/windows/$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "lib64"; else echo "lib32mscoff"; fi)/mingw/msvcrt-os.lib
wl-showstatus install &&
 #mkdir -p $INSTALLPREFIX/share/dmd &&
 mkdir -p $INSTALLPREFIX/share/dmd/windows/bin &&
 #echo "$VERSION" > $INSTALLPREFIX/share/dmd/VERSION &&
 #make -Csrc -fposix.mak install INSTALL_DIR=$INSTALLPREFIX/share/dmd OS=windows MODEL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) BUILD=release HOST_CXX=${CXX:-g++} HOST_DC=$(pwd)/prebuilt/dmd2/windows/bin$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; fi)/dmd.exe &&
 #INSTALL_DIR=$INSTALLPREFIX/share/dmd AUTO_BOOTSTRAP=0 ENABLE_RELEASE=1 MODEL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) BUILD=release HOST_DMD=$(pwd)/prebuilt/dmd2/windows/bin$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; fi)/dmd.exe $(pwd)/prebuilt/dmd2/windows/bin$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; fi)/dmd.exe -run src/build.d &&
 PATH=$PWD/prebuilt/dmd2/windows/bin$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; fi):$PATH INSTALL_DIR=$INSTALLPREFIX/share/dmd AUTO_BOOTSTRAP=0 ENABLE_RELEASE=1 MODEL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) BUILD=release HOST_DMD=$(pwd)/prebuilt/dmd2/windows/bin$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; fi)/dmd.exe $(pwd)/prebuilt/dmd2/windows/bin$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; fi)/dmd.exe -run src/build.d &&
 #PATH=$PWD/prebuilt/dmd2/windows/bin$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; fi):$PATH INSTALL_DIR=$INSTALLPREFIX/share/dmd AUTO_BOOTSTRAP=0 ENABLE_RELEASE=1 MODEL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) BUILD=release HOST_DMD=$(PATH=$PWD/prebuilt/dmd2/windows/bin$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; fi):$PATH which dmd.exe) dmd.exe -run compiler/src/build.d DFLAGS="-mscrtlib=msvcrt-os -L/implib:-lkernel32" &&
 rm -rf $INSTALLPREFIX/share/dmd &&
 mkdir -p $INSTALLPREFIX/share/dmd/windows/bin &&
 #INSTALL_DIR=$INSTALLPREFIX/share/dmd AUTO_BOOTSTRAP=0 ENABLE_RELEASE=1 MODEL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) BUILD=release HOST_DMD=$(pwd)/prebuilt/dmd2/windows/bin$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; fi)/dmd.exe $(pwd)/prebuilt/dmd2/windows/bin$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; fi)/dmd.exe -run src/build.d install &&
 PATH=$PWD/prebuilt/dmd2/windows/bin$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; fi):$PATH INSTALL_DIR=$INSTALLPREFIX/share/dmd AUTO_BOOTSTRAP=0 ENABLE_RELEASE=1 MODEL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) BUILD=release HOST_DMD=$(pwd)/prebuilt/dmd2/windows/bin$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; fi)/dmd.exe $(pwd)/prebuilt/dmd2/windows/bin$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; fi)/dmd.exe -run src/build.d install &&
 #PATH=$PWD/prebuilt/dmd2/windows/bin$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; fi):$PATH INSTALL_DIR=$INSTALLPREFIX/share/dmd AUTO_BOOTSTRAP=0 ENABLE_RELEASE=1 MODEL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) BUILD=release HOST_DMD=$(PATH=$PWD/prebuilt/dmd2/windows/bin$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; fi):$PATH which dmd.exe) dmd.exe -run compiler/src/build.d install DFLAGS="-mscrtlib=msvcrt-os -L=-lkernel32" &&
 # copy dependencies (version >= 2.101.0)
 PATH=$PWD/prebuilt/dmd2/windows/bin$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; fi):$PATH copypedeps -r -n $INSTALLPREFIX/share/dmd/windows/bin/*.exe $INSTALLPREFIX/share/dmd/windows/bin/ &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION



####Bug reported: https://issues.dlang.org/show_bug.cgi?id=23110 (MSVC link command used as linker: causes dlang-tools build to fail)

#echo "module conftest; int main() { return 0; }" > test.d
#LINKCMD=ld.exe $MINGWPREFIX/share/dmd/windows/bin/dmd.exe -m32 test.d
#LINKCMD64=ld.exe $MINGWPREFIX/share/dmd/windows/bin/dmd.exe -m64 test.d

#wget https://s3.us-west-2.amazonaws.com/downloads.dlang.org/releases/2021/dmd.2.098.1.windows.7z
#7zdec x dmd.2.098.1.windows.7z
#dmd2/windows/bin/dmd.exe test.d -of=test32.exe
#dmd2/windows/bin64/dmd.exe test.d -of=test64.exe



#### see also: https://dlang.org/dmd-windows.html
mkdir -p dmd2 &&
cp -rf $MINGWPREFIX/share/dmd/* dmd2/ &&
cp -rf $MINGWPREFIX/share/dmd/src/druntime/import/* dmd2/src/phobos/ &&
echo OK



export NAME="D language compiler"
export STATUS=
export URL=https://dlang.org/
export BASENAME=dmd
export DESCRIPTION="dmd D Programming Language compiler. D is a general-purpose programming language with static typing, systems-level access, and C-like syntax. With the D Programming Language, write fast, read fast, and run fast."
export CATEGORY=development
export TYPE=application
export VERSION=2.106.0
export VERSIONDATE=20231202
wl-showstatus --package-version
export DEPENDENCIES=
export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=
#export OPTIONALBUILDDEPENDENCIES=
export BUILDDEPENDENCIES=pedeps
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE.txt
export LICENSETYPE=BSL
#export DOWNLOADURL="http://downloads.dlang.org/releases/"
#export DOWNLOADURL="https://github.com/dlang/dmd/releases"
export DOWNLOADURL="https://github.com/dlang/dmd/tags"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL="https://github.com/dlang/dmd/archive/v$VERSION.tar.gz http://downloads.dlang.org/releases/$(echo $VERSION|sed -e "s/^\([0-9]*\)\..*$/\1/").x/$VERSION/dmd.$VERSION.windows.zip"
export DOWNLOADSOURCEURL="https://github.com/dlang/dmd/archive/refs/tags/v$VERSION.tar.gz http://downloads.dlang.org/releases/$(echo $VERSION|sed -e "s/^\([0-9]*\)\..*$/\1/").x/$VERSION/dmd.$VERSION.windows.zip"
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd $BASENAME-$VERSION
# use prebuilt binary to avoid bootstrap
unzip -oq $TARBALLDIR/$BASENAME/dmd.$VERSION.windows.zip -dprebuilt
# fix compiler/src/dmd/link.d (version >= 2.105.2)
patch -ulbf compiler/src/dmd/link.d << EOF
@@ -239,3 +239,3 @@

-    version (Windows)
+    version (Windows_MSVC)
     {
@@ -481,3 +481,3 @@
     }
-    else version (Posix)
+    else version (MinGW)
     {
@@ -512,3 +512,3 @@
         }
-        else version (Posix)
+        else version (MinGW)
         {
@@ -1050,3 +1050,3 @@
     //printf("runPreprocessor() cpp: %.*s filename: %.*s\\n", cast(int)cpp.length, cpp.ptr, cast(int)filename.length, filename.ptr);
-    version (Windows)
+    version (Windows_MSVC)
     {
@@ -1261,3 +1261,3 @@
     }
-    else version (Posix)
+    else version (MinGW)
     {
EOF
## fix compiler/src/dmd/link.d (version >= 2.106.0)
#patch -ulbf compiler/src/dmd/link.d << EOF
#@@ -239,3 +239,3 @@
#
#-    version (Windows)
#+    version (Windows_MSVC)
#     {
#@@ -485,3 +485,3 @@
#     }
#-    else version (Posix)
#+    else version (Windows)
#     {
#@@ -516,3 +516,3 @@
#         }
#-        else version (Posix)
#+        else version (Windows)
#         {
#@@ -1055,3 +1055,3 @@
#     //printf("runPreprocessor() cpp: %.*s filename: %.*s\\n", cast(int)cpp.length, cpp.ptr, cast(int)filename.length, filename.ptr);
#-    version (Windows)
#+    version (Windows_MSVC)
#     {
#@@ -1266,3 +1266,3 @@
#     }
#-    else version (Posix)
#+    else version (Windows)
#     {
#EOF
wl-showstatus build &&
 #LINKCMD=${LD:-ld} LINKCMD64=${LD:-ld} PATH=$PWD/prebuilt/dmd2/windows/bin$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; fi):$PATH INSTALL_DIR=$PWD/stage2 AUTO_BOOTSTRAP=0 ENABLE_RELEASE=1 MODEL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) BUILD=release HOST_DMD=$PWD/stage1/windows/bin/dmd.exe $PWD/stage1/windows/bin/dmd.exe -I$PWD/druntime/src -I$PWD/prebuilt/dmd2/src/phobos -run compiler/src/build.d install &&
 PATH=$PWD/prebuilt/dmd2/windows/bin$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; fi):$PATH AUTO_BOOTSTRAP=0 ENABLE_RELEASE=1 ENABLE_DEBUG=0 ENABLE_COVERAGE=1 MODEL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) BUILD=release HOST_DMD=$(PATH=$PWD/prebuilt/dmd2/windows/bin$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; fi):$PATH which dmd.exe) dmd.exe -run compiler/src/build.d &&
 #-mscrtlib=msvcrt -target=$(echo $RUNPLATFORM|sed -e "s/^\([^-]*-\).*/\1/")windows-glibc 
 touch compiler/src/dmd/root/root.h &&
 wl-showstatus install &&
 PATH=$PWD/prebuilt/dmd2/windows/bin$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; fi):$PATH AUTO_BOOTSTRAP=0 ENABLE_RELEASE=1 ENABLE_DEBUG=0 ENABLE_COVERAGE=1 MODEL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) BUILD=release HOST_DMD=$(PATH=$PWD/prebuilt/dmd2/windows/bin$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; fi):$PATH which dmd.exe) dmd.exe -run compiler/src/build.d install INSTALL_DIR=$INSTALLPREFIX/share/dmd &&
 cp -u $PWD/prebuilt/dmd2/windows/bin$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; fi)/*.dll $INSTALLPREFIX/share/dmd/windows/bin/ &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION



wl-showstatus build-stage1 &&
 #LINKCMD=${LD:-ld} LINKCMD64=${LD:-ld} PATH=$PWD/prebuilt/dmd2/windows/bin$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; fi):$PATH INSTALL_DIR=$PWD/stage2 AUTO_BOOTSTRAP=0 ENABLE_RELEASE=1 MODEL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) BUILD=release HOST_DMD=$PWD/stage1/windows/bin/dmd.exe $PWD/stage1/windows/bin/dmd.exe -I$PWD/druntime/src -I$PWD/prebuilt/dmd2/src/phobos -run compiler/src/build.d install &&
 PATH=$PWD/prebuilt/dmd2/windows/bin$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; fi):$PATH AUTO_BOOTSTRAP=0 ENABLE_RELEASE=1 ENABLE_DEBUG=0 ENABLE_COVERAGE=1 MODEL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) BUILD=release HOST_DMD=$(PATH=$PWD/prebuilt/dmd2/windows/bin$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; fi):$PATH which dmd.exe) dmd.exe -run compiler/src/build.d &&
 touch compiler/src/dmd/root/root.h &&
 wl-showstatus install-stage1 &&
 PATH=$PWD/prebuilt/dmd2/windows/bin$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; fi):$PATH AUTO_BOOTSTRAP=0 ENABLE_RELEASE=1 ENABLE_DEBUG=0 ENABLE_COVERAGE=1 MODEL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) BUILD=release HOST_DMD=$(PATH=$PWD/prebuilt/dmd2/windows/bin$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; fi):$PATH which dmd.exe) dmd.exe -run compiler/src/build.d install INSTALL_DIR=$PWD/stage1 &&
 cp -u $PWD/prebuilt/dmd2/windows/bin$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; fi)/*.dll $PWD/stage1/windows/bin/ &&
 cp -rf $PWD/prebuilt/dmd2/src/phobos $PWD/prebuilt/dmd2/src/druntime stage1/src/ &&
 wl-showstatus build &&
 #PATH=$PWD/stage1/windows/bin:$PATH INSTALL_DIR=$PWD/stage2 AUTO_BOOTSTRAP=0 ENABLE_RELEASE=1 MODEL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) BUILD=release HOST_DMD=$PWD/stage1/windows/bin/dmd.exe $PWD/stage1/windows/bin/dmd.exe -I$PWD/druntime/src -I$PWD/prebuilt/dmd2/src/phobos -run compiler/src/build.d install &&
 LINKCMD=${LD:-ld} LINKCMD64=${LD:-ld} PATH=$PWD/stage1/windows/bin:$PATH AUTO_BOOTSTRAP=0 ENABLE_RELEASE=1 ENABLE_DEBUG=0 ENABLE_COVERAGE=1 MODEL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) BUILD=release HOST_DMD=$(PATH=$PWD/stage1/windows/bin:$PATH which dmd.exe) dmd.exe -run compiler/src/build.d &&
 #DFLAGS=$PWD/prebuilt/dmd2/src/druntime:$PWD/prebuilt/dmd2/src/druntime/import 
 #touch compiler/src/dmd/root/root.h &&
 wl-showstatus install &&
 PATH=$PWD/stage1/windows/bin:$PATH AUTO_BOOTSTRAP=0 ENABLE_RELEASE=1 ENABLE_DEBUG=0 ENABLE_COVERAGE=1 MODEL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) BUILD=release HOST_DMD=$(PATH=$PWD/stage1/windows/bin:$PATH which dmd.exe) dmd.exe -run compiler/src/build.d install INSTALL_DIR=$PWD/stage1 &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION



# fix compiler/src/dmd/link.d (version >= 2.106.0)
patch -ulbf compiler/src/dmd/link.d << EOF
@@ -247,3 +247,6 @@
             OutBuffer cmdbuf;
-            cmdbuf.writestring("/NOLOGO");
+            version (MinGW) {
+           } else {
+                cmdbuf.writestring("/NOLOGO");
+           }
             for (size_t i = 0; i < global.params.objfiles.length; i++)
@@ -262,3 +265,7 @@
             {
-                cmdbuf.writestring("/OUT:");
+                version (MinGW) {
+                    cmdbuf.writestring("-o ");
+               } else {
+                    cmdbuf.writestring("/OUT:");
+               }
                 writeFilename(&cmdbuf, global.params.exefile);
@@ -275,3 +282,7 @@
             {
-                cmdbuf.writestring("/MAP:");
+                version (MinGW) {
+                    cmdbuf.writestring("-Xlinker -Map=");
+               } else {
+                    cmdbuf.writestring("/MAP:");
+               }
                 writeFilename(&cmdbuf, global.params.mapfile);
@@ -280,3 +291,7 @@
             {
-                cmdbuf.writestring("/MAP:");
+                version (MinGW) {
+                    cmdbuf.writestring("-Xlinker -Map=");
+               } else {
+                    cmdbuf.writestring("/MAP:");
+               }
                 writeFilename(&cmdbuf, getMapFilename());
@@ -286,3 +301,7 @@
                 cmdbuf.writeByte(' ');
-                cmdbuf.writestring("/DEFAULTLIB:");
+                version (MinGW) {
+                    cmdbuf.writestring("-l");
+               } else {
+                    cmdbuf.writestring("/DEFAULTLIB:");
+               }
                 writeFilename(&cmdbuf, global.params.libfiles[i]);
@@ -292,3 +311,7 @@
                 cmdbuf.writeByte(' ');
-                cmdbuf.writestring("/DEF:");
+                version (MinGW) {
+                    cmdbuf.writestring("-def ");
+               } else {
+                    cmdbuf.writestring("/DEF:");
+               }
                 writeFilename(&cmdbuf, global.params.deffile);
@@ -298,7 +321,19 @@
                 cmdbuf.writeByte(' ');
-                cmdbuf.writestring("/DEBUG");
+                version (MinGW) {
+                    cmdbuf.writestring("-g");
+               } else {
+                    cmdbuf.writestring("/DEBUG");
+               }
                 // in release mode we need to reactivate /OPT:REF after /DEBUG
-                if (global.params.release)
-                    cmdbuf.writestring(" /OPT:REF");
-            }
+                if (global.params.release) {
+                    version (MinGW) {
+                   } else {
+                        cmdbuf.writestring(" /OPT:REF");
+                   }
+               }
+            } else {
+                version (MinGW) {
+                    cmdbuf.writestring(" -s");
+               }
+           }
             if (driverParams.dll)
@@ -306,3 +341,7 @@
                 cmdbuf.writeByte(' ');
-                cmdbuf.writestring("/DLL");
+                version (MinGW) {
+                    cmdbuf.writestring("-shared");
+               } else {
+                    cmdbuf.writestring("/DLL");
+               }
             }
EOF

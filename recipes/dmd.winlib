export NAME="D language compiler"
export STATUS=
export URL=https://dlang.org/
export BASENAME=dmd
export DESCRIPTION="dmd D Programming Language compiler. D is a general-purpose programming language with static typing, systems-level access, and C-like syntax. With the D Programming Language, write fast, read fast, and run fast."
export CATEGORY=development
export TYPE=application
#export VERSION=2.096.0
#export VERSIONDATE=20210318
#export VERSION=2.096.1
#export VERSIONDATE=20210426
#export VERSION=2.097.0
#export VERSIONDATE=20210604
#export VERSION=2.097.1
#export VERSIONDATE=20210720
#export VERSION=2.097.2
#export VERSIONDATE=20210810
#export VERSION=2.098.0
#export VERSIONDATE=20211010
#export VERSION=2.098.1
#export VERSIONDATE=20220122
export VERSION=2.099.0
export VERSIONDATE=20220308
####std.file.FileException@std\file.d(4273): Copy from D:\Prog\winlibs64-11.2.0ucrt\home\dmd-2.099.0\src\dmd\root\root.h to D:/Prog/winlibs64-11.2.0ucrt/home/inst_dmd-2.099.0/share/dmd\src\dmd\root\root.h: The system cannot find the file specified.
wl-showstatus --package-version
export DEPENDANCIES=
export OPTIONALDEPENDANCIES=
export BUILDDEPENDANCIES=
export LICENSEFILE=LICENSE.txt
export LICENSETYPE=BSL
#export DOWNLOADURL="http://downloads.dlang.org/releases/"
#export DOWNLOADURL="https://github.com/dlang/dmd/releases"
export DOWNLOADURL="https://github.com/dlang/dmd/tags"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL="https://github.com/dlang/dmd/archive/v$VERSION.tar.gz http://downloads.dlang.org/releases/$(echo $VERSION|sed -e "s/^\([0-9]*\)\..*$/\1/").x/$VERSION/dmd.$VERSION.windows.zip"
export DOWNLOADSOURCEURL="https://github.com/dlang/dmd/archive/refs/tags/v$VERSION.tar.gz http://downloads.dlang.org/releases/$(echo $VERSION|sed -e "s/^\([0-9]*\)\..*$/\1/").x/$VERSION/dmd.$VERSION.windows.zip"
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xfz $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd $BASENAME-$VERSION
# use prebuilt binary to avoid bootstrap
unzip -oq $TARBALLDIR/$BASENAME/dmd.$VERSION.windows.zip -dprebuilt
## fix src/dmd/vsoptions.d (version >= 2.096.1)
#patch -ulbf src/dmd/vsoptions.d << EOF
#@@ -72,3 +72,3 @@
#         else
#-            return "msvcrt120"; // mingw replacement
#+            return "msvcrt"; // mingw replacement
#     }
#EOF
## fix extensions in src/dmd/target.d (version >= 2.098.0)
#patch -ulbf src/dmd/target.d << EOF
#@@ -261,4 +261,4 @@
#         {
#-            obj_ext = "obj";
#-            lib_ext = "lib";
#+            obj_ext = "o";
#+            lib_ext = "a";
#             dll_ext = "dll";
#EOF
# fix src/bootstrap.sh (version >= 2.096.0)
patch -ulbf src/bootstrap.sh << EOF
@@ -39,2 +39,5 @@
     MODEL_PATH="bin\${MODEL}"
+elif ( echo \$uname_s|grep -q "MINGW\\|MSYS" ) ; then
+    OS=windows
+    MODEL_PATH=bin
 else
EOF
# fix missing src/dmd/root/root.h (version >= 2.099.0)
touch src/dmd/root/root.h
#wl-showstatus build &&
# #make -Csrc -fwin32.mak OS=windows MODEL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) BUILD=release HOST_DC=dmd CC=${CC:-gcc} &&
# #make -Csrc -fposix.mak OS=windows MODEL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) BUILD=release HOST_CXX=${CXX:-g++} HOST_DC=$(pwd)/prebuilt/dmd2/windows/bin$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; fi)/dmd.exe &&
# AUTO_BOOTSTRAP=0 ENABLE_RELEASE=1 MODEL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) BUILD=release HOST_DMD=$(pwd)/prebuilt/dmd2/windows/bin$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; fi)/dmd.exe $(pwd)/prebuilt/dmd2/windows/bin$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; fi)/dmd.exe -run src/build.d &&
wl-showstatus install &&
 #mkdir -p $INSTALLPREFIX/share/dmd &&
 mkdir -p $INSTALLPREFIX/share/dmd/windows/bin &&
 #echo "$VERSION" > $INSTALLPREFIX/share/dmd/VERSION &&
 #make -Csrc -fposix.mak install INSTALL_DIR=$INSTALLPREFIX/share/dmd OS=windows MODEL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) BUILD=release HOST_CXX=${CXX:-g++} HOST_DC=$(pwd)/prebuilt/dmd2/windows/bin$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; fi)/dmd.exe &&
 INSTALL_DIR=$INSTALLPREFIX/share/dmd AUTO_BOOTSTRAP=0 ENABLE_RELEASE=1 MODEL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) BUILD=release HOST_DMD=$(pwd)/prebuilt/dmd2/windows/bin$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; fi)/dmd.exe $(pwd)/prebuilt/dmd2/windows/bin$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; fi)/dmd.exe -run src/build.d &&
 INSTALL_DIR=$INSTALLPREFIX/share/dmd AUTO_BOOTSTRAP=0 ENABLE_RELEASE=1 MODEL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) BUILD=release HOST_DMD=$(pwd)/prebuilt/dmd2/windows/bin$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; fi)/dmd.exe $(pwd)/prebuilt/dmd2/windows/bin$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; fi)/dmd.exe -run src/build.d install &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION



#echo "module conftest; int main() { return 0; }" > test.d
#LINKCMD=ld.exe $MINGWPREFIX/share/dmd/windows/bin/dmd.exe -m32 test.d
#LINKCMD64=ld.exe $MINGWPREFIX/share/dmd/windows/bin/dmd.exe -m64 test.d

#wget https://s3.us-west-2.amazonaws.com/downloads.dlang.org/releases/2021/dmd.2.098.1.windows.7z
#7zdec x dmd.2.098.1.windows.7z
#dmd2/windows/bin/dmd.exe test.d -of=test32.exe
#dmd2/windows/bin64/dmd.exe test.d -of=test64.exe

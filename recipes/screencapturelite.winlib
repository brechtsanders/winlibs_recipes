export NAME="Screen Capture Lite"
export STATUS=
export URL=https://github.com/smasherprog/screen_capture_lite
export BASENAME=screencapturelite
export DESCRIPTION="cross platform screen/window capturing library"
export CATEGORY=system,graphics
export TYPE=library
#export VERSION=17.0.3
#export VERSIONDATE=20210318
#export VERSION=17.1.380
#export VERSIONDATE=20210725
#export VERSION=17.1.414
#export VERSIONDATE=20210801
#export VERSION=17.1.425
#export VERSIONDATE=20210808
#export VERSION=17.1.428
#export VERSIONDATE=20210809
#export VERSION=17.1.429
#export VERSIONDATE=20210926
#export VERSION=17.1.439
#export VERSIONDATE=20211011
#export VERSION=17.1.442
#export VERSIONDATE=20211110
#export VERSION=17.1.448
#export VERSIONDATE=20211116
#export VERSION=17.1.451
#export VERSIONDATE=20211127
#export VERSION=17.1.452
#export VERSIONDATE=20211129
#export VERSION=17.1.454
#export VERSIONDATE=20211207
#export VERSION=17.1.456
#export VERSIONDATE=20220108
#export VERSION=17.1.457
#export VERSIONDATE=20220114
#export VERSION=17.1.460
#export VERSIONDATE=20221007
export VERSION=17.1.462
export VERSIONDATE=20221017
wl-showstatus --package-version
export DEPENDANCIES=
export OPTIONALDEPENDANCIES=
export BUILDDEPENDANCIES=cmake,ninja
export LICENSEFILE=LICENSE
export LICENSETYPE=MIT
export DOWNLOADURL="https://github.com/smasherprog/screen_capture_lite/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/smasherprog/screen_capture_lite/archive/$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xfz $TARBALLDIR/$BASENAME/$VERSION.tar.gz
cd screen_capture_lite-$VERSION
# fix missing ICONINFOEX in src/windows/GDIMouseProcessor.cpp
mv src/windows/GDIMouseProcessor.cpp src/windows/GDIMouseProcessor.cpp.bak
cat > src/windows/GDIMouseProcessor.cpp << EOF
#if !defined(_WIN32_WINNT) || _WIN32_WINNT < 0x0600
#undef _WIN32_WINNT
#define _WIN32_WINNT 0x0600
#endif
EOF
cat src/windows/GDIMouseProcessor.cpp.bak >> src/windows/GDIMouseProcessor.cpp
## fix include/ScreenCapture.h
#patch -ulbf include/ScreenCapture.h << EOF
#@@ -14,3 +14,3 @@
# #else
#-#define SC_LITE_EXTERN
#+#define SC_LITE_EXTERN __declspec(dllimport)
# #endif
#EOF
# fix missing dllexport/dllimport in include/ScreenCapture.h (version >= 17.1.414)
patch -ulbf include/ScreenCapture.h << EOF
@@ -2,3 +2,3 @@

-#if defined(WINDOWS) || defined(WIN32)
+#if defined(WINDOWS) || defined(_WIN32)
 #if defined(SC_LITE_DLL)
@@ -13,3 +13,3 @@
 #define SC_LITE_C_EXTERN extern "C"
-#define SC_LITE_EXTERN
+#define SC_LITE_EXTERN __declspec(dllimport)
 #else
EOF
# fix missing WC_ERR_INVALID_CHARS in src/windows/GetMonitors.cpp (version >= 17.1.380)
mv src/windows/GetMonitors.cpp src/windows/GetMonitors.cpp.bak
cat > src/windows/GetMonitors.cpp << EOF
#if !defined(WINVER) || WINVER < 0x0600
#undef WINVER
#define WINVER 0x0600
#endif
EOF
cat src/windows/GetMonitors.cpp.bak >> src/windows/GetMonitors.cpp
# fix missing WS_EX_NOREDIRECTIONBITMAP in src/windows/GDIFrameProcessor.cpp (version >= 17.1.380)
mv src/windows/GDIFrameProcessor.cpp src/windows/GDIFrameProcessor.cpp.bak
cat > src/windows/GDIFrameProcessor.cpp << EOF
#if !defined(WINVER) || WINVER < 0x0602
#undef WINVER
#define WINVER 0x0602
#endif
#include <windows.h>
#ifndef PW_RENDERFULLCONTENT
#define PW_RENDERFULLCONTENT 0
#endif
EOF
cat src/windows/GDIFrameProcessor.cpp.bak >> src/windows/GDIFrameProcessor.cpp
# fix missing WC_ERR_INVALID_CHARS in src_cpp/windows/GetMonitors.cpp
mv src_cpp/windows/GetMonitors.cpp src_cpp/windows/GetMonitors.cpp.bak
cat > src_cpp/windows/GetMonitors.cpp << EOF
#if !defined(WINVER) || WINVER < 0x0600
#undef WINVER
#define WINVER 0x0600
#endif
EOF
cat src_cpp/windows/GetMonitors.cpp.bak >> src_cpp/windows/GetMonitors.cpp
# fix missing ICONINFOEXA in src_cpp/windows/GDIMouseProcessor.cpp
mv src_cpp/windows/GDIMouseProcessor.cpp src_cpp/windows/GDIMouseProcessor.cpp.bak
cat > src_cpp/windows/GDIMouseProcessor.cpp << EOF
#if !defined(_WIN32_WINNT) || _WIN32_WINNT < 0x0600
#undef _WIN32_WINNT
#define _WIN32_WINNT 0x0600
#endif
EOF
cat src_cpp/windows/GDIMouseProcessor.cpp.bak >> src_cpp/windows/GDIMouseProcessor.cpp
# fix missing WS_EX_NOREDIRECTIONBITMAP/PW_RENDERFULLCONTENT in src_cpp/windows/GDIFrameProcessor.cpp
mv src_cpp/windows/GDIFrameProcessor.cpp src_cpp/windows/GDIFrameProcessor.cpp.bak
cat > src_cpp/windows/GDIFrameProcessor.cpp << EOF
#if !defined(WINVER) || WINVER < 0x0602
#undef WINVER
#define WINVER 0x0602
#endif
#include <windows.h>
#ifndef PW_RENDERFULLCONTENT
#define PW_RENDERFULLCONTENT 0
#endif
EOF
cat src_cpp/windows/GDIFrameProcessor.cpp.bak >> src_cpp/windows/GDIFrameProcessor.cpp
## fix error: static assertion failed: std::atomic requires a trivially copyable typestatic assertion failed: std::atomic requires a trivially copyable type (version = 17.1.460)
##### Bug reported: https://github.com/smasherprog/screen_capture_lite/issues/139
#patch -ulbf include/internal/sccommon.h << EOF
#@@ -9,3 +9,3 @@
#     template <typename F, typename M, typename W> struct CaptureData {
#-#if defined(_WIN32) && defined(__cplusplus) && __cplusplus >= 202002L
#+#if defined(_WIN32) && defined(__cplusplus) && __cplusplus >= 202002L && !defined(__MINGW32__)
#         std::atomic<std::shared_ptr<Timer> > FrameTimer;
#@@ -16,3 +16,3 @@
#         F OnFrameChanged;
#-#if defined(_WIN32) && defined(__cplusplus) && __cplusplus >= 202002L
#+#if defined(_WIN32) && defined(__cplusplus) && __cplusplus >= 202002L && !defined(__MINGW32__)
#         std::atomic<std::shared_ptr<Timer> > MouseTimer;
#EOF
#patch -ulbf src_cpp/ScreenCapture.cpp << EOF
#@@ -130,3 +130,3 @@
#     {
#-#if defined(_WIN32) && defined(__cplusplus) && __cplusplus >= 202002L
#+#if defined(_WIN32) && defined(__cplusplus) && __cplusplus >= 202002L && !defined(__MINGW32__)
#             Thread_Data_->ScreenCaptureData.FrameTimer.store(timer);
#@@ -141,3 +141,3 @@
#     {
#-#if defined(_WIN32) && defined(__cplusplus) && __cplusplus >= 202002L
#+#if defined(_WIN32) && defined(__cplusplus) && __cplusplus >= 202002L && !defined(__MINGW32__)
#             Thread_Data_->ScreenCaptureData.MouseTimer.store(timer);
#EOF
#patch -ulbf include/internal/threadmanager.h << EOF
#@@ -101,3 +101,3 @@
#             frameprocessor.Resume();
#-#if defined(_WIN32) && defined(__cplusplus) && __cplusplus >= 202002L
#+#if defined(_WIN32) && defined(__cplusplus) && __cplusplus >= 202002L && !defined(__MINGW32__)
#             auto timer = data->ScreenCaptureData.FrameTimer.load();
#@@ -151,3 +151,3 @@
#             // get a copy of the shared_ptr in a safe way
#-#if defined(_WIN32) && defined(__cplusplus) && __cplusplus >= 202002L
#+#if defined(_WIN32) && defined(__cplusplus) && __cplusplus >= 202002L && !defined(__MINGW32__)
#             auto timer = data->WindowCaptureData.FrameTimer.load();
#EOF
## avoid TARGET_PDB_FILE in CMakeLists.txt (version <= 17.1.460)
#sed -i.bak -e "s/install.*TARGET_PDB_FILE/#&/" CMakeLists.txt
## avoid TARGET_PDB_FILE in src_cpp/CMakeLists.txt (version <= 17.1.460)
#sed -i.bak -e "s/install.*TARGET_PDB_FILE/#&/" src_cpp/CMakeLists.txt
# skip buimding example in CMakeLists.txt
sed -i.bak2 -e "s/^add_subdirectory(Example)/if(BUILD_EXAMPLE)\n  &\nendif()/" CMakeLists.txt
# skip building C# bindings (version >= 17.1.414)
sed -i.bak3 -e "s/^add_subdirectory(src_csharp)/#&/" CMakeLists.txt
# don't treat warnings as errors in CMakeLists.txt
sed -i.bak4 -e "s/-Wall\|-pedantic//g" CMakeLists.txt
mkdir -p build_static build_shared &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DBUILD_EXAMPLE:BOOL=OFF -S. -Bbuild_static &&
 sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*-ladvapi32/& -ldxgi -ld3d11/" build_static/build.ninja &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DBUILD_EXAMPLE:BOOL=OFF -S. -Bbuild_shared &&
 sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*-ladvapi32/& -ldxgi -ld3d11/" build_shared/build.ninja &&
 wl-showstatus build-install &&
 ninja -Cbuild_static install/strip &&
 wl-showstatus build-install &&
 ninja -Cbuild_shared install/strip &&
 cp -u $INSTALLPREFIX/lib/libscreen_capture_lite_shared.dll.a $INSTALLPREFIX/lib/libscreen_capture_lite.dll.a &&
 cp -u $INSTALLPREFIX/lib/libscreen_capture_lite_static.a $INSTALLPREFIX/lib/libscreen_capture_lite.a &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf screen_capture_lite-$VERSION
####TO DO: check if both static and shared libraries work (depends on correct definition of SC_LITE_EXTERN)




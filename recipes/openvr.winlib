export NAME="OpenVR SDK"
export STATUS=
export URL=https://github.com/ValveSoftware/openvr
export BASENAME=openvr
export DESCRIPTION="OpenVR is an API and runtime that allows access to VR hardware from multiple vendors without requiring that applications have specific knowledge of the hardware they are targeting."
export CATEGORY=hardware
export TYPE=library
#export VERSION=1.7.15
#export VERSIONDATE=20191026
#export VERSION=1.8.19
#export VERSIONDATE=20191106
#export VERSION=1.9.15
#export VERSIONDATE=20191228
#export VERSION=1.9.16
#export VERSIONDATE=20200107
#export VERSION=1.10.30
#export VERSIONDATE=20200317
#export VERSION=1.11.11
#export VERSIONDATE=20200425
#export VERSION=1.12.5
#export VERSIONDATE=20200604
#export VERSION=1.14.15
#export VERSIONDATE=20200919
####src/vrcommon/pathtools_public.h:143:2: warning: #warning "Unknown platform for PLATSUBDIR"
#export VERSION=1.16.8
#export VERSIONDATE=20210225
export VERSION=1.23.7
export VERSIONDATE=20220820
wl-showstatus --package-version
export DEPENDENCIES=
export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=cmake
#export OPTIONALBUILDDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=BSD
export DOWNLOADURL="https://github.com/ValveSoftware/openvr/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/ValveSoftware/openvr/archive/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xfz $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd $BASENAME-$VERSION
# fix missing WIN32
sed -i.bak -e "s/\bWIN32\b/_&/g" $(grep -lw WIN32 $(find -name '*.h' -or -name '*.cpp'))
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED:BOOL=OFF -S. -Bbuild_static &&
# wl-showstatus configure &&
# cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED:BOOL=ON -S. -Bbuild_shared &&
# wl-showstatus build-install &&
# make -Cbuild_static install/strip &&
# wl-showstatus build-install &&
# make -Cbuild_shared install/strip &&
# mkdir -p $INSTALLPREFIX/bin &&
# mv -f $INSTALLPREFIX/lib/*.dll $INSTALLPREFIX/bin/ &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
# fix missing vrcore include folder (version >= 1.16.8)
mkdir src/vrcore &&
cp -u src/vrcommon/*.h src/vrcore/
echo "#define AssertMsg(cond,msg)" > src/vrcore/assert.h
# fix undefined VRInitError_Init_CreateDriverDirectDeviceFailed in src/vrcommon/hmderrors_public.cpp (version >= 1.23.7)
patch -ulbf src/vrcommon/hmderrors_public.cpp << EOF
@@ -182,3 +182,2 @@
                RETURN_ENUM_AS_STRING( VRInitError_Init_CouldNotStartPrism );
-               RETURN_ENUM_AS_STRING( VRInitError_Init_CreateDriverDirectDeviceFailed );
                RETURN_ENUM_AS_STRING( VRInitError_Init_PrismExitedUnexpectedly );
EOF
mkdir -p build_static build_shared &&
 wl-showstatus configure &&
 cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED:BOOL=OFF -S. -Bbuild_static &&
 wl-showstatus configure &&
 cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED:BOOL=ON -S. -Bbuild_shared &&
 wl-showstatus build-install &&
 ninja -Cbuild_static install/strip &&
 wl-showstatus build-install &&
 ninja -Cbuild_shared install/strip &&
 mkdir -p $INSTALLPREFIX/bin &&
 mv -f $INSTALLPREFIX/lib/*.dll $INSTALLPREFIX/bin/ &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




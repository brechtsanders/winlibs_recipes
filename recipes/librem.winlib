#export NAME="Librem"
#export STATUS=
#export URL=http://creytiv.com/rem.html
##export URL=https://github.com/creytiv/rem
#export BASENAME=librem
#export DESCRIPTION="Librem is a portable and generic library for real-time audio and video processing."
#export CATEGORY=audio,video,dataprocessing
#export TYPE=library
##export VERSION=0.5.0
##export VERSIONDATE=20170215
##export VERSION=0.5.1
##export VERSIONDATE=20170408
##export VERSION=0.5.2
##export VERSIONDATE=20170923
##export VERSION=0.5.3
##export VERSIONDATE=20180421
#export VERSION=0.6.0
#export VERSIONDATE=20181124
#wl-showstatus --package-version
#export DEPENDANCIES=libre
#export OPTIONALDEPENDANCIES=
#export BUILDDEPENDANCIES=pexports
#export LICENSEFILE=docs/COPYING
#export LICENSETYPE=BSD
##export DOWNLOADURL="http://creytiv.com/pub/ rem-"
#export DOWNLOADURL="https://github.com/creytiv/rem/releases/ rem-"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
##export DOWNLOADSOURCEURL=http://creytiv.com/pub/rem-$VERSION.tar.gz
#export DOWNLOADSOURCEURL=https://github.com/creytiv/rem/releases/download/v$VERSION/rem-$VERSION.tar.gz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#wl-showstatus extract
#tar xfz $TARBALLDIR/$BASENAME/rem-$VERSION.tar.gz
#cd rem-$VERSION
#wl-showstatus build-install &&
# #make install CC="${CC:-gcc} -I$MINGWPREFIX/include/re -I$(pwd)/include" AR=ar RANLIB=ranlib OS=win32 CROSS_COMPILE= LIBRE_MK=$MINGWPREFIX/share/re/re.mk LIBS="-lre" PREFIX=$INSTALLPREFIX &&
# make install CC="${CC:-gcc} -I$MINGWPREFIX/include/re -I$(pwd)/include" AR=ar RANLIB=ranlib OS=win32 CROSS_COMPILE= LIBRE_MK=$MINGWPREFIX/share/re/re.mk LIBS="-Wl,--as-needed -lre -lws2_32" PREFIX=$INSTALLPREFIX &&
# mkdir -p $INSTALLPREFIX/bin &&
# mv -f $INSTALLPREFIX/lib/*.dll $INSTALLPREFIX/bin/ &&
# pexports.exe $INSTALLPREFIX/bin/librem.dll > librem.def &&
# dlltool -D $INSTALLPREFIX/bin/librem.dll -d librem.def -l $INSTALLPREFIX/lib/librem.dll.a &&
# strip $INSTALLPREFIX/bin/*.dll &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf rem-$VERSION



export NAME="rem"
export STATUS=
export URL=https://github.com/baresip/rem
export BASENAME=librem
export DESCRIPTION="Audio and video processing media library "
export CATEGORY=audio,video,dataprocessing
export TYPE=library
#export VERSION=2.0.0
#export VERSIONDATE=20220313
#export VERSION=2.0.1
#export VERSIONDATE=20220409
#export VERSION=2.3.0
#export VERSIONDATE=20220501
export VERSION=2.4.0
export VERSIONDATE=20220601
wl-showstatus --package-version
export DEPENDANCIES=libre
export OPTIONALDEPENDANCIES=
export BUILDDEPENDANCIES=
#export BUILDDEPENDANCIES=cmake,ninja
export LICENSEFILE=docs/COPYING
export LICENSETYPE=BSD
export DOWNLOADURL="https://github.com/baresip/rem/releases rem-"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/baresip/rem/archive/refs/tags/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xfz $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd rem-$VERSION
# don't use -lm linker flag
sed -i.bak -e "s/-lm//" Makefile
# create build folders
mkdir -p build_win
for D in $(sed -ne "s/^MODULES += //p" Makefile); do
 mkdir -p build_win/$D
done
wl-showstatus build-install &&
 make install PREFIX=$INSTALLPREFIX BUILD=$PWD/build_win CC=${CC:-gcc} LD=gcc AR="ar cr" LIB_SUFFIX=.dll CFLAGS="-I$PWD/include -I$MINGWPREFIX/include/re" LIBS="$(pkg-config --libs libre) -lws2_32" SH_LFLAGS="-shared -s -mwindows -Wl,--out-implib,\$@.a" &&
 mkdir -p $INSTALLPREFIX/bin &&
 mv -f $INSTALLPREFIX/lib/*.dll $INSTALLPREFIX/bin/ &&
 rm -f $INSTALLPREFIX/lib/*.dll.* &&
 cp -f *.dll.a $INSTALLPREFIX/lib/ &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf rem-$VERSION



#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DCMAKE_C_FLAGS:STRING="-I$MINGWPREFIX/include/re" -S. -Bbuild_static &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DCMAKE_C_FLAGS:STRING="-I$MINGWPREFIX/include/re" -S. -Bbuild_shared &&
# # fix missing link libraries
# sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lws2_32/" build_shared/build.ninja &&
# wl-showstatus build &&
# ninja -Cbuild_static &&
# wl-showstatus build &&
# ninja -Cbuild_shared &&
# wl-showstatus build-install &&
# ninja -Cbuild_static install/strip &&
# wl-showstatus build-install &&
# ninja -Cbuild_shared install/strip &&
#    echo OK
## wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf rem-$VERSION

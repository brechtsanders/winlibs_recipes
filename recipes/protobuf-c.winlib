export NAME="protobuf-c"
export STATUS=
export URL=https://github.com/protobuf-c/protobuf-c
export BASENAME=protobuf-c
export DESCRIPTION="Protocol Buffers implementation in C"
export CATEGORY=dataprocessing
export TYPE=library,application
#export VERSION=1.2.1
#export VERSIONDATE=20170117
#export VERSION=1.3.0
#export VERSIONDATE=20170816
#export VERSION=1.3.1
#export VERSIONDATE=20180814
#export VERSION=1.3.2
#export VERSIONDATE=20190624
#export VERSION=1.3.3
#export VERSIONDATE=20200214
#export VERSION=1.4.0
#export VERSIONDATE=20210519
export VERSION=1.4.1
export VERSIONDATE=20220711
####make: *** [Makefile:2729: t/generated-code2/test-full-cxx-output.inc] Error 139
wl-showstatus --package-version
export DEPENDENCIES=protobuf
export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=BSD
export DOWNLOADURL="https://github.com/protobuf-c/protobuf-c/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/protobuf-c/protobuf-c/releases/download/v$VERSION/$BASENAME-$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
cd $BASENAME-$VERSION
## fix invalid --c_out= (version >= 1.3.0 <= 1.3.2)
#sed -i.bak -e "s/--c_out=/--cpp_out=/g" Makefile.in
## fix missing .exe extension in protoc-c (version >= 1.3.0 <= 1.3.2)
#sed -i.bak2 -e "s?ln -s \(protoc-gen-c\)\( .*/protoc-c\)\$?cp -f protoc-c/\1.exe\2.exe?g" Makefile.in
## avoid protobuf header error, which is really caused by using C++ version < 14 (version >= 1.4.1)
#sed -i.bak -e "s/as_fn_error\(.*required protobuf header file not found\)/echo\1/" configure
wl-showstatus configure &&
 #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM &&
 PKG_CONFIG=$(which pkg-config.exe) ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --disable-valgrind-tests --disable-code-coverage &&
 #PKG_CONFIG=$(which pkg-config.exe) ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --disable-valgrind-tests --disable-code-coverage CXXFLAGS="-std=c++17 -fpermissive" &&
 wl-showstatus build-install &&
 #make install-strip &&
 ( make install-strip || make -j1 install-strip ) &&
 # fix missing .exe extension (version <= 3.3.0)
 mv -f $INSTALLPREFIX/bin/protoc-c $INSTALLPREFIX/bin/protoc-c.exe &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
## fix undefined GOOGLE_LOG(DFATAL) in protoc-c/c_message.cc
#mv protoc-c/c_message.cc protoc-c/c_message.cc.bak &&
#echo "#define GOOGLE_LOG(DFATAL) std::cerr" > protoc-c/c_message.cc &&
#cat protoc-c/c_message.cc.bak >> protoc-c/c_message.cc
## fix undefined GOOGLE_LOG(DFATAL) in protoc-c/c_primitive_field.cc
#mv protoc-c/c_primitive_field.cc protoc-c/c_primitive_field.cc.bak &&
#echo "#define GOOGLE_LOG(DFATAL) std::cerr" > protoc-c/c_primitive_field.cc &&
#cat protoc-c/c_primitive_field.cc.bak >> protoc-c/c_primitive_field.cc
## fix protoc-c/c_helpers.cc (version >= 1.4.1)
#patch -ulbf protoc-c/c_helpers.cc << EOF
#@@ -288,2 +288,5 @@
#   std::set<std::string> result;
#+#ifndef GOOGLE_ARRAYSIZE
#+#define GOOGLE_ARRAYSIZE(a) (sizeof(a) / sizeof(*(a)))
#+#endif
#   for (int i = 0; i < GOOGLE_ARRAYSIZE(kKeywordList); i++) {
#@@ -550,3 +553,5 @@
#                                   dest.get(), dest_length, false);
#+#ifdef GOOGLE_DCHECK_GE
#   GOOGLE_DCHECK_GE(len, 0);
#+#endif
#   return std::string(dest.get(), len);
#EOF
## fix protoc-c/c_field.h (version >= 1.4.1)
#patch -ulbf protoc-c/c_field.h << EOF
#@@ -107,3 +107,5 @@
#  private:
#+#ifdef GOOGLE_DISALLOW_EVIL_CONSTRUCTORS
#   GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FieldGenerator);
#+#endif
# };
#EOF
## fix protoc-c/c_field.cc (version >= 1.4.1)
#patch -ulbf protoc-c/c_field.cc << EOF
#@@ -233,3 +233,5 @@
#     const FieldDescriptor* field) const {
#+#ifdef GOOGLE_CHECK_EQ
#   GOOGLE_CHECK_EQ(field->containing_type(), descriptor_);
#+#endif
#   return *field_generators_[field->index()];
#EOF
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DBUILD_TESTS:BOOL=OFF -Sbuild-cmake -Bbuild_static &&
# sed -i.bak -e "s/-std=c++11/-std=c++17/" build_static/build.ninja &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DBUILD_TESTS:BOOL=OFF -Sbuild-cmake -Bbuild_shared &&
# sed -i.bak -e "s/-std=c++11/-std=c++17/" build_shared/build.ninja &&
# wl-showstatus build-install &&
# ninja -Cbuild_static install/strip &&
# wl-showstatus build-install &&
# ninja -Cbuild_shared install/strip &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




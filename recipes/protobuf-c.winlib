export NAME="protobuf-c"
export STATUS=
export URL=https://github.com/protobuf-c/protobuf-c
export BASENAME=protobuf-c
export DESCRIPTION="Protocol Buffers implementation in C"
export CATEGORY=dataprocessing
export TYPE=library,application
#export VERSION=1.2.1
#export VERSIONDATE=20170117
#export VERSION=1.3.0
#export VERSIONDATE=20170816
#export VERSION=1.3.1
#export VERSIONDATE=20180814
#export VERSION=1.3.2
#export VERSIONDATE=20190624
#export VERSION=1.3.3
#export VERSIONDATE=20200214
#export VERSION=1.4.0
#export VERSIONDATE=20210519
#export VERSION=1.4.1
#export VERSIONDATE=20220711
#export VERSION=1.5.0
#export VERSIONDATE=20231126
export VERSION=1.5.1
export VERSIONDATE=20250202
####make: *** [Makefile:2729: t/generated-code2/test-full-cxx-output.inc] Error 139
wl-showstatus --package-version
export DEPENDENCIES=protobuf
export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=BSD
export DOWNLOADURL="https://github.com/protobuf-c/protobuf-c/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/protobuf-c/protobuf-c/releases/download/v$VERSION/$BASENAME-$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
cd $BASENAME-$VERSION
# fix remove legacy support in protoc-c/c_helpers.h and protoc-c/c_file.cc (version >= 1.5.0)
patch -ulbf protoc-c/c_helpers.h << EOF
@@ -177,3 +177,5 @@
 inline int FieldSyntax(const FieldDescriptor* field) {
-#if GOOGLE_PROTOBUF_VERSION >= 4023000
+#if GOOGLE_PROTOBUF_VERSION >= 5026000
+  return 3;
+#elif GOOGLE_PROTOBUF_VERSION >= 4023000
   return FileDescriptorLegacy(field->file()).syntax() == FileDescriptorLegacy::SYNTAX_PROTO3 ? 3 : 2;
EOF
patch -ulbf protoc-c/c_file.cc << EOF
@@ -120,3 +120,5 @@
   int min_header_version = 1000000;
-#if GOOGLE_PROTOBUF_VERSION >= 4023000
+#if GOOGLE_PROTOBUF_VERSION >= 5026000
+  {
+#elif GOOGLE_PROTOBUF_VERSION >= 4023000
   if (FileDescriptorLegacy(file_).syntax() == FileDescriptorLegacy::SYNTAX_PROTO3) {
EOF
## fix protoc-gen-c/c_bytes_field.cc (version >= 1.5.1)
#patch -ulbf protoc-gen-c/c_bytes_field.cc << EOF
#@@ -77,3 +77,3 @@
#   (*variables)["default"] =
#-    "\\"" + CEscape(descriptor->default_value_string()) + "\\"";
#+    "\\"" + CEscape(std::string(descriptor->default_value_string())) + "\\"";
#   (*variables)["deprecated"] = FieldDeprecated(descriptor);
#@@ -114,3 +114,3 @@
#   std::map<std::string, std::string> vars;
#-  vars["default_value_data"] = FullNameToLower(descriptor_->full_name(), descriptor_->file())
#+  vars["default_value_data"] = FullNameToLower(std::string(descriptor_->full_name()), descriptor_->file())
# 	                     + "__default_value_data";
#@@ -122,5 +122,5 @@
#   std::map<std::string, std::string> vars;
#-  vars["default_value_data"] = FullNameToLower(descriptor_->full_name(), descriptor_->file())
#+  vars["default_value_data"] = FullNameToLower(std::string(descriptor_->full_name()), descriptor_->file())
# 	                     + "__default_value_data";
#-  vars["escaped"] = CEscape(descriptor_->default_value_string());
#+  vars["escaped"] = CEscape(std::string(descriptor_->default_value_string()));
#   printer->Print(vars, "uint8_t \$default_value_data\$[] = \\"\$escaped\$\\";\\n");
#@@ -132,3 +132,3 @@
# 	+ ", "
#-	+ FullNameToLower(descriptor_->full_name(), descriptor_->file())
#+	+ FullNameToLower(std::string(descriptor_->full_name()), descriptor_->file())
# 	+ "__default_value_data }";
#EOF
## fix protoc-gen-c/c_enum.cc (version >= 1.5.1)
#patch -ulbf protoc-gen-c/c_enum.cc << EOF
#@@ -82,5 +82,5 @@
#   std::map<std::string, std::string> vars;
#-  vars["classname"] = FullNameToC(descriptor_->full_name(), descriptor_->file());
#+  vars["classname"] = FullNameToC(std::string(descriptor_->full_name()), descriptor_->file());
#   vars["shortname"] = descriptor_->name();
#-  vars["uc_name"] = FullNameToUpper(descriptor_->full_name(), descriptor_->file());
#+  vars["uc_name"] = FullNameToUpper(std::string(descriptor_->full_name()), descriptor_->file());
# 
#@@ -98,3 +98,3 @@
#   vars["opt_comma"] = ",";
#-  vars["prefix"] = FullNameToUpper(descriptor_->full_name(), descriptor_->file()) + "__";
#+  vars["prefix"] = FullNameToUpper(std::string(descriptor_->full_name()), descriptor_->file()) + "__";
#   for (int i = 0; i < descriptor_->value_count(); i++) {
#@@ -132,4 +132,4 @@
#   }
#-  vars["classname"] = FullNameToC(descriptor_->full_name(), descriptor_->file());
#-  vars["lcclassname"] = FullNameToLower(descriptor_->full_name(), descriptor_->file());
#+  vars["classname"] = FullNameToC(std::string(descriptor_->full_name()), descriptor_->file());
#+  vars["lcclassname"] = FullNameToLower(std::string(descriptor_->full_name()), descriptor_->file());
# 
#@@ -154,3 +154,3 @@
#   vars["enum_value_name"] = vd->name();
#-  vars["c_enum_value_name"] = FullNameToUpper(descriptor_->full_name(), descriptor_->file()) + "__" + vd->name();
#+  vars["c_enum_value_name"] = FullNameToUpper(std::string(descriptor_->full_name()), descriptor_->file()) + "__" + std::string(vd->name());
#   vars["value"] = SimpleItoa(vd->number());
#@@ -184,4 +184,4 @@
#   vars["fullname"] = descriptor_->full_name();
#-  vars["lcclassname"] = FullNameToLower(descriptor_->full_name(), descriptor_->file());
#-  vars["cname"] = FullNameToC(descriptor_->full_name(), descriptor_->file());
#+  vars["lcclassname"] = FullNameToLower(std::string(descriptor_->full_name()), descriptor_->file());
#+  vars["cname"] = FullNameToC(std::string(descriptor_->full_name()), descriptor_->file());
#   vars["shortname"] = descriptor_->name();
#@@ -201,6 +201,6 @@
#     name_index[j].index = j;
#-    name_index[j].name = vd->name().c_str();
#+    name_index[j].name = std::string(vd->name()).c_str();
#     value_index[j].index = j;
#     value_index[j].value = vd->number();
#-    value_index[j].name = vd->name().c_str();
#+    value_index[j].name = std::string(vd->name()).c_str();
#   }
#EOF
## fix protoc-gen-c/c_enum_field.cc (version >= 1.5.1)
#patch -ulbf protoc-gen-c/c_enum_field.cc << EOF
#@@ -77,6 +77,6 @@
#   (*variables)["name"] = FieldName(descriptor);
#-  (*variables)["type"] = FullNameToC(descriptor->enum_type()->full_name(), descriptor->enum_type()->file());
#+  (*variables)["type"] = FullNameToC(std::string(descriptor->enum_type()->full_name()), descriptor->enum_type()->file());
#   const google::protobuf::EnumValueDescriptor* default_value = descriptor->default_value_enum();
#-  (*variables)["default"] = FullNameToUpper(default_value->type()->full_name(), default_value->type()->file())
#-                          + "__" + default_value->name();
#+  (*variables)["default"] = FullNameToUpper(std::string(default_value->type()->full_name()), default_value->type()->file())
#+                          + "__" + std::string(default_value->name());
#   (*variables)["deprecated"] = FieldDeprecated(descriptor);
#@@ -137,3 +137,3 @@
# {
#-  std::string addr = "&" + FullNameToLower(descriptor_->enum_type()->full_name(), descriptor_->enum_type()->file()) + "__descriptor";
#+  std::string addr = "&" + FullNameToLower(std::string(descriptor_->enum_type()->full_name()), descriptor_->enum_type()->file()) + "__descriptor";
#   GenerateDescriptorInitializerGeneric(printer, true, "ENUM", addr);
#EOF
## fix protoc-gen-c/c_field.cc (version >= 1.5.1)
#patch -ulbf protoc-gen-c/c_field.cc << EOF
#@@ -114,3 +114,3 @@
#   variables["TYPE"] = type_macro;
#-  variables["classname"] = FullNameToC(FieldScope(descriptor_)->full_name(), FieldScope(descriptor_)->file());
#+  variables["classname"] = FullNameToC(std::string(FieldScope(descriptor_)->full_name()), FieldScope(descriptor_)->file());
#   variables["name"] = FieldName(descriptor_);
#@@ -123,3 +123,3 @@
#   if (oneof != NULL)
#-    variables["oneofname"] = CamelToLower(oneof->name());
#+    variables["oneofname"] = CamelToLower(std::string(oneof->name()));
# 
#@@ -135,3 +135,3 @@
#     variables["default_value"] = std::string("&")
#-                               + FullNameToLower(descriptor_->full_name(), descriptor_->file())
#+                               + FullNameToLower(std::string(descriptor_->full_name()), descriptor_->file())
# 			       + "__default_value";
#EOF
## fix protoc-gen-c/c_file.cc (version >= 1.5.1)
#patch -ulbf protoc-gen-c/c_file.cc << EOF
#@@ -116,3 +116,3 @@
# void FileGenerator::GenerateHeader(google::protobuf::io::Printer* printer) {
#-  std::string filename_identifier = FilenameIdentifier(file_->name());
#+  std::string filename_identifier = FilenameIdentifier(std::string(file_->name()));
# 
#@@ -156,3 +156,3 @@
#         "#include \\"\$dependency\$.pb-c.h\\"\\n",
#-	"dependency", StripProto(file_->dependency(i)->name()));
#+	"dependency", StripProto(std::string(file_->dependency(i)->name())));
#     }
#@@ -240,3 +240,3 @@
#     "filename", file_->name(),
#-    "basename", StripProto(file_->name()));
#+    "basename", StripProto(std::string(file_->name())));
# 
#EOF
## fix protoc-gen-c/c_generator.cc (version >= 1.5.1)
#patch -ulbf protoc-gen-c/c_generator.cc << EOF
#@@ -146,3 +146,3 @@
# 
#-  std::string basename = StripProto(file->name());
#+  std::string basename = StripProto(std::string(file->name()));
#   basename.append(".pb-c");
#EOF
## fix protoc-gen-c/c_helpers.cc (version >= 1.5.1)
#patch -ulbf protoc-gen-c/c_helpers.cc << EOF
#@@ -295,3 +295,3 @@
# std::string FieldName(const google::protobuf::FieldDescriptor* field) {
#-  std::string result = ToLower(field->name());
#+  std::string result = ToLower(std::string(field->name()));
#   if (kKeywords.count(result) > 0) {
#EOF
## fix protoc-gen-c/c_message.cc (version >= 1.5.1)
#patch -ulbf protoc-gen-c/c_message.cc << EOF
#@@ -116,3 +116,3 @@
#   printer->Print("typedef struct \$classname\$ \$classname\$;\\n",
#-                 "classname", FullNameToC(descriptor_->full_name(), descriptor_->file()));
#+                 "classname", FullNameToC(std::string(descriptor_->full_name()), descriptor_->file()));
# 
#@@ -142,5 +142,5 @@
#   std::map<std::string, std::string> vars;
#-  vars["classname"] = FullNameToC(descriptor_->full_name(), descriptor_->file());
#-  vars["lcclassname"] = FullNameToLower(descriptor_->full_name(), descriptor_->file());
#-  vars["ucclassname"] = FullNameToUpper(descriptor_->full_name(), descriptor_->file());
#+  vars["classname"] = FullNameToC(std::string(descriptor_->full_name()), descriptor_->file());
#+  vars["lcclassname"] = FullNameToLower(std::string(descriptor_->full_name()), descriptor_->file());
#+  vars["ucclassname"] = FullNameToUpper(std::string(descriptor_->full_name()), descriptor_->file());
#   vars["field_count"] = SimpleItoa(descriptor_->field_count());
#@@ -157,4 +157,4 @@
# 
#-    vars["oneofname"] = CamelToUpper(oneof->name());
#-    vars["foneofname"] = FullNameToC(oneof->full_name(), oneof->file());
#+    vars["oneofname"] = CamelToUpper(std::string(oneof->name()));
#+    vars["foneofname"] = FullNameToC(std::string(oneof->full_name()), oneof->file());
# 
#@@ -165,3 +165,3 @@
#       const google::protobuf::FieldDescriptor* field = oneof->field(j);
#-      vars["fieldname"] = CamelToUpper(field->name());
#+      vars["fieldname"] = CamelToUpper(std::string(field->name()));
#       vars["fieldnum"] = SimpleItoa(field->number());
#@@ -208,4 +208,4 @@
#     const google::protobuf::OneofDescriptor* oneof = descriptor_->oneof_decl(i);
#-    vars["oneofname"] = CamelToLower(oneof->name());
#-    vars["foneofname"] = FullNameToC(oneof->full_name(), oneof->file());
#+    vars["oneofname"] = CamelToLower(std::string(oneof->name()));
#+    vars["foneofname"] = FullNameToC(std::string(oneof->full_name()), oneof->file());
# 
#@@ -264,3 +264,3 @@
#     const google::protobuf::OneofDescriptor* oneof = descriptor_->oneof_decl(i);
#-    vars["foneofname"] = FullNameToUpper(oneof->full_name(), oneof->file());
#+    vars["foneofname"] = FullNameToUpper(std::string(oneof->full_name()), oneof->file());
# 
#@@ -312,4 +312,4 @@
#   std::map<std::string, std::string> vars;
#-  vars["classname"] = FullNameToC(descriptor_->full_name(), descriptor_->file());
#-  vars["lcclassname"] = FullNameToLower(descriptor_->full_name(), descriptor_->file());
#+  vars["classname"] = FullNameToC(std::string(descriptor_->full_name()), descriptor_->file());
#+  vars["lcclassname"] = FullNameToLower(std::string(descriptor_->full_name()), descriptor_->file());
#   if (gen_init) {
#@@ -346,3 +346,3 @@
#   printer->Print("extern const ProtobufCMessageDescriptor \$name\$__descriptor;\\n",
#-                 "name", FullNameToLower(descriptor_->full_name(), descriptor_->file()));
#+                 "name", FullNameToLower(std::string(descriptor_->full_name()), descriptor_->file()));
# 
#@@ -362,3 +362,3 @@
#   std::map<std::string, std::string> vars;
#-  vars["name"] = FullNameToC(descriptor_->full_name(), descriptor_->file());
#+  vars["name"] = FullNameToC(std::string(descriptor_->full_name()), descriptor_->file());
#   printer->Print(vars,
#@@ -402,5 +402,5 @@
#   std::map<std::string, std::string> vars;
#-  vars["classname"] = FullNameToC(descriptor_->full_name(), descriptor_->file());
#-  vars["lcclassname"] = FullNameToLower(descriptor_->full_name(), descriptor_->file());
#-  vars["ucclassname"] = FullNameToUpper(descriptor_->full_name(), descriptor_->file());
#+  vars["classname"] = FullNameToC(std::string(descriptor_->full_name()), descriptor_->file());
#+  vars["lcclassname"] = FullNameToLower(std::string(descriptor_->full_name()), descriptor_->file());
#+  vars["ucclassname"] = FullNameToUpper(std::string(descriptor_->full_name()), descriptor_->file());
#   vars["base"] = opt.base_field_name();
#@@ -464,5 +464,5 @@
#     vars["fullname"] = descriptor_->full_name();
#-    vars["classname"] = FullNameToC(descriptor_->full_name(), descriptor_->file());
#-    vars["lcclassname"] = FullNameToLower(descriptor_->full_name(), descriptor_->file());
#-    vars["shortname"] = ToCamel(descriptor_->name());
#+    vars["classname"] = FullNameToC(std::string(descriptor_->full_name()), descriptor_->file());
#+    vars["lcclassname"] = FullNameToLower(std::string(descriptor_->full_name()), descriptor_->file());
#+    vars["shortname"] = ToCamel(std::string(descriptor_->name()));
#     vars["n_fields"] = SimpleItoa(descriptor_->field_count());
#@@ -502,3 +502,3 @@
# 	vars["name"] = fd->name();
#-	vars["lcname"] = CamelToLower(fd->name());
#+	vars["lcname"] = CamelToLower(std::string(fd->name()));
# 	vars["maybe_static"] = "static ";
#@@ -551,3 +551,3 @@
# 	    const google::protobuf::EnumValueDescriptor* vd = fd->default_value_enum();
#-	    vars["field_dv_ctype"] = FullNameToC(vd->type()->full_name(), vd->type()->file());
#+	    vars["field_dv_ctype"] = FullNameToC(std::string(vd->type()->full_name()), vd->type()->file());
# 	    break;
#@@ -585,3 +585,3 @@
#     for (int i = 0; i < descriptor_->field_count(); i++) {
#-      field_indices[i].name = sorted_fields[i]->name().c_str();
#+      field_indices[i].name = std::string(sorted_fields[i]->name()).c_str();
#       field_indices[i].index = i;
#EOF
## fix protoc-gen-c/c_message_field.cc (version >= 1.5.1)
#patch -ulbf protoc-gen-c/c_message_field.cc << EOF
#@@ -83,3 +83,3 @@
#   vars["name"] = FieldName(descriptor_);
#-  vars["type"] = FullNameToC(descriptor_->message_type()->full_name(), descriptor_->message_type()->file());
#+  vars["type"] = FullNameToC(std::string(descriptor_->message_type()->full_name()), descriptor_->message_type()->file());
#   vars["deprecated"] = FieldDeprecated(descriptor_);
#@@ -117,3 +117,3 @@
# {
#-  std::string addr = "&" + FullNameToLower(descriptor_->message_type()->full_name(), descriptor_->message_type()->file()) + "__descriptor";
#+  std::string addr = "&" + FullNameToLower(std::string(descriptor_->message_type()->full_name()), descriptor_->message_type()->file()) + "__descriptor";
#   GenerateDescriptorInitializerGeneric(printer, false, "MESSAGE", addr);
#EOF
## fix protoc-gen-c/c_service.cc (version >= 1.5.1)
#patch -ulbf protoc-gen-c/c_service.cc << EOF
#@@ -76,5 +76,5 @@
#   vars_["fullname"] = descriptor_->full_name();
#-  vars_["cname"] = FullNameToC(descriptor_->full_name(), descriptor_->file());
#-  vars_["lcfullname"] = FullNameToLower(descriptor_->full_name(), descriptor_->file());
#-  vars_["ucfullname"] = FullNameToUpper(descriptor_->full_name(), descriptor_->file());
#+  vars_["cname"] = FullNameToC(std::string(descriptor_->full_name()), descriptor_->file());
#+  vars_["lcfullname"] = FullNameToLower(std::string(descriptor_->full_name()), descriptor_->file());
#+  vars_["ucfullname"] = FullNameToUpper(std::string(descriptor_->full_name()), descriptor_->file());
#   vars_["lcfullpadd"] = ConvertToSpaces(vars_["lcfullname"]);
#@@ -106,7 +106,7 @@
#     const google::protobuf::MethodDescriptor* method = descriptor_->method(i);
#-    std::string lcname = CamelToLower(method->name());
#+    std::string lcname = CamelToLower(std::string(method->name()));
#     vars_["method"] = lcname;
#     vars_["metpad"] = ConvertToSpaces(lcname);
#-    vars_["input_typename"] = FullNameToC(method->input_type()->full_name(), method->input_type()->file());
#-    vars_["output_typename"] = FullNameToC(method->output_type()->full_name(), method->output_type()->file());
#+    vars_["input_typename"] = FullNameToC(std::string(method->input_type()->full_name()), method->input_type()->file());
#+    vars_["output_typename"] = FullNameToC(std::string(method->output_type()->full_name()), method->output_type()->file());
#     printer->Print(vars_,
#@@ -133,3 +133,3 @@
#     const google::protobuf::MethodDescriptor* method = descriptor_->method(i);
#-    std::string lcname = CamelToLower(method->name());
#+    std::string lcname = CamelToLower(std::string(method->name()));
#     vars_["method"] = lcname;
#@@ -146,8 +146,8 @@
#     const google::protobuf::MethodDescriptor* method = descriptor_->method(i);
#-    std::string lcname = CamelToLower(method->name());
#-    std::string lcfullname = FullNameToLower(descriptor_->full_name(), descriptor_->file());
#+    std::string lcname = CamelToLower(std::string(method->name()));
#+    std::string lcfullname = FullNameToLower(std::string(descriptor_->full_name()), descriptor_->file());
#     vars_["method"] = lcname;
#     vars_["metpad"] = ConvertToSpaces(lcname);
#-    vars_["input_typename"] = FullNameToC(method->input_type()->full_name(), method->input_type()->file());
#-    vars_["output_typename"] = FullNameToC(method->output_type()->full_name(), method->output_type()->file());
#+    vars_["input_typename"] = FullNameToC(std::string(method->input_type()->full_name()), method->input_type()->file());
#+    vars_["output_typename"] = FullNameToC(std::string(method->output_type()->full_name()), method->output_type()->file());
#     vars_["padddddddddddddddddd"] = ConvertToSpaces(lcfullname + "__" + lcname);
#@@ -210,4 +210,4 @@
#     vars_["method"] = method->name();
#-    vars_["input_descriptor"] = "&" + FullNameToLower(method->input_type()->full_name(), method->input_type()->file()) + "__descriptor";
#-    vars_["output_descriptor"] = "&" + FullNameToLower(method->output_type()->full_name(), method->output_type()->file()) + "__descriptor";
#+    vars_["input_descriptor"] = "&" + FullNameToLower(std::string(method->input_type()->full_name()), method->input_type()->file()) + "__descriptor";
#+    vars_["output_descriptor"] = "&" + FullNameToLower(std::string(method->output_type()->full_name()), method->output_type()->file()) + "__descriptor";
#     if (optimize_code_size) {
#@@ -220,3 +220,3 @@
#     mi_array[i].i = i;
#-    mi_array[i].name = method->name().c_str();
#+    mi_array[i].name = std::string(method->name()).c_str();
#   }
#@@ -268,8 +268,8 @@
#     const google::protobuf::MethodDescriptor* method = descriptor_->method(i);
#-    std::string lcname = CamelToLower(method->name());
#-    std::string lcfullname = FullNameToLower(descriptor_->full_name(), descriptor_->file());
#+    std::string lcname = CamelToLower(std::string(method->name()));
#+    std::string lcfullname = FullNameToLower(std::string(descriptor_->full_name()), descriptor_->file());
#     vars_["method"] = lcname;
#     vars_["metpad"] = ConvertToSpaces(lcname);
#-    vars_["input_typename"] = FullNameToC(method->input_type()->full_name(), method->input_type()->file());
#-    vars_["output_typename"] = FullNameToC(method->output_type()->full_name(), method->output_type()->file());
#+    vars_["input_typename"] = FullNameToC(std::string(method->input_type()->full_name()), method->input_type()->file());
#+    vars_["output_typename"] = FullNameToC(std::string(method->output_type()->full_name()), method->output_type()->file());
#     vars_["padddddddddddddddddd"] = ConvertToSpaces(lcfullname + "__" + lcname);
#EOF
## fix protoc-gen-c/c_string_field.cc (version >= 1.5.1)
#patch -ulbf protoc-gen-c/c_string_field.cc << EOF
#@@ -77,3 +77,3 @@
#   (*variables)["name"] = FieldName(descriptor);
#-  (*variables)["default"] = FullNameToLower(descriptor->full_name(), descriptor->file())
#+  (*variables)["default"] = FullNameToLower(std::string(descriptor->full_name()), descriptor->file())
# 	+ "__default_value";
#@@ -119,3 +119,3 @@
#   vars["default"] = variables_.find("default")->second;
#-  vars["escaped"] = CEscape(descriptor_->default_value_string());
#+  vars["escaped"] = CEscape(std::string(descriptor_->default_value_string()));
#   printer->Print(vars, "char \$default\$[] = \\"\$escaped\$\\";\\n");
#EOF
## fix invalid --c_out= (version >= 1.3.0 <= 1.3.2)
#sed -i.bak -e "s/--c_out=/--cpp_out=/g" Makefile.in
## fix missing .exe extension in protoc-c (version >= 1.3.0 <= 1.3.2)
#sed -i.bak2 -e "s?ln -s \(protoc-gen-c\)\( .*/protoc-c\)\$?cp -f protoc-c/\1.exe\2.exe?g" Makefile.in
## avoid protobuf header error, which is really caused by using C++ version < 14 (version >= 1.4.1)
#sed -i.bak -e "s/as_fn_error\(.*required protobuf header file not found\)/echo\1/" configure
wl-showstatus configure &&
 #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM &&
 PKG_CONFIG=$(which pkg-config.exe) ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --disable-valgrind-tests --disable-code-coverage &&
 #PKG_CONFIG=$(which pkg-config.exe) ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --disable-valgrind-tests --disable-code-coverage CXXFLAGS="-std=c++17 -fpermissive" &&
 wl-showstatus build-install &&
 #make install-strip &&
 ( make install-strip || make -j1 install-strip ) &&
 # fix missing .exe extension (version <= 3.3.0)
 mv -f $INSTALLPREFIX/bin/protoc-c $INSTALLPREFIX/bin/protoc-c.exe &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
## fix undefined GOOGLE_LOG(DFATAL) in protoc-c/c_message.cc
#mv protoc-c/c_message.cc protoc-c/c_message.cc.bak &&
#echo "#define GOOGLE_LOG(DFATAL) std::cerr" > protoc-c/c_message.cc &&
#cat protoc-c/c_message.cc.bak >> protoc-c/c_message.cc
## fix undefined GOOGLE_LOG(DFATAL) in protoc-c/c_primitive_field.cc
#mv protoc-c/c_primitive_field.cc protoc-c/c_primitive_field.cc.bak &&
#echo "#define GOOGLE_LOG(DFATAL) std::cerr" > protoc-c/c_primitive_field.cc &&
#cat protoc-c/c_primitive_field.cc.bak >> protoc-c/c_primitive_field.cc
## fix protoc-c/c_helpers.cc (version >= 1.4.1)
#patch -ulbf protoc-c/c_helpers.cc << EOF
#@@ -288,2 +288,5 @@
#   std::set<std::string> result;
#+#ifndef GOOGLE_ARRAYSIZE
#+#define GOOGLE_ARRAYSIZE(a) (sizeof(a) / sizeof(*(a)))
#+#endif
#   for (int i = 0; i < GOOGLE_ARRAYSIZE(kKeywordList); i++) {
#@@ -550,3 +553,5 @@
#                                   dest.get(), dest_length, false);
#+#ifdef GOOGLE_DCHECK_GE
#   GOOGLE_DCHECK_GE(len, 0);
#+#endif
#   return std::string(dest.get(), len);
#EOF
## fix protoc-c/c_field.h (version >= 1.4.1)
#patch -ulbf protoc-c/c_field.h << EOF
#@@ -107,3 +107,5 @@
#  private:
#+#ifdef GOOGLE_DISALLOW_EVIL_CONSTRUCTORS
#   GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FieldGenerator);
#+#endif
# };
#EOF
## fix protoc-c/c_field.cc (version >= 1.4.1)
#patch -ulbf protoc-c/c_field.cc << EOF
#@@ -233,3 +233,5 @@
#     const FieldDescriptor* field) const {
#+#ifdef GOOGLE_CHECK_EQ
#   GOOGLE_CHECK_EQ(field->containing_type(), descriptor_);
#+#endif
#   return *field_generators_[field->index()];
#EOF
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DBUILD_TESTS:BOOL=OFF -Sbuild-cmake -Bbuild_static &&
# sed -i.bak -e "s/-std=c++11/-std=c++17/" build_static/build.ninja &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DBUILD_TESTS:BOOL=OFF -Sbuild-cmake -Bbuild_shared &&
# sed -i.bak -e "s/-std=c++11/-std=c++17/" build_shared/build.ninja &&
# wl-showstatus build-install &&
# ninja -Cbuild_static install/strip &&
# wl-showstatus build-install &&
# ninja -Cbuild_shared install/strip &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




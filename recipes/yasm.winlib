export NAME="Yasm"
export STATUS=
#export URL=http://www.tortall.net/projects/yasm/
export URL=http://yasm.tortall.net/
export BASENAME=yasm
export DESCRIPTION="Yasm is a complete rewrite of the NASM assembler. Yasm currently supports the x86 and AMD64 instruction sets, accepts NASM and GAS assembler syntaxes, outputs binary, ELF32, ELF64, 32 and 64-bit Mach-O, RDOFF2, COFF, Win32, and Win64 object formats, and generates source debugging information in STABS, DWARF 2, and CodeView 8 formats."
export CATEGORY=build
export TYPE=application
#export VERSION=1.1.0
#export VERSIONDATE=20101015
#export VERSION=1.2.0
#export VERSIONDATE=20111031
export VERSION=1.3.0
export VERSIONDATE=20140811
wl-showstatus --package-version
export DEPENDENCIES=gettext
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=COPYING
export LICENSETYPE=BSD
export DOWNLOADURL="http://www.tortall.net/projects/yasm/releases/"
#export DOWNLOADURL="https://github.com/yasm/yasm/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://www.tortall.net/projects/yasm/releases/$BASENAME-$VERSION-win32.exe
#export DOWNLOADSOURCEURL=http://www.tortall.net/projects/yasm/releases/$BASENAME-$VERSION-win64.exe
export DOWNLOADSOURCEURL=http://www.tortall.net/projects/yasm/releases/$BASENAME-$VERSION.tar.gz
#export DOWNLOADSOURCEURL=https://github.com/yasm/yasm/archive/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
tar xz --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
cd $BASENAME-$VERSION
# fix redefinition of false/true in libyasm/bitvect.h (version >= 1.3.0)
if echo "#include <stdbool.h>" | ${CC:-gcc} -c -xc -; then
 sed -i.bak -e "s/^\(\s*\)typedef enum boolean { false = FALSE, true = TRUE } boolean;/#include <stdbool.h>\n\1#define boolean bool/" libyasm/bitvect.h
fi
wl-showstatus configure &&
 #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM &&
 ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM CFLAGS="$(if ${CC:-gcc} --help -v 2>/dev/null|grep -q "\-Wint-conversion" || ${CC:-gcc} --version|grep -q "^clang"; then echo "-Wno-error=int-conversion"; fi) $(if ${CC:-gcc} --help -v 2>/dev/null|grep -q "\-Wimplicit-function-declaration" || ${CC:-gcc} --version|grep -q "^clang"; then echo "-Wno-error=implicit-function-declaration"; fi)" &&
 wl-showstatus build-install &&
 ( make install-strip || make install-strip CC_FOR_BUILD=gcc CCLD_FOR_BUILD=gcc ) &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION



##export BUILDDEPENDENCIES=cmake,ninja
##export OPTIONALBUILDDEPENDENCIES=
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DENABLE_NLS:BOOL=OFF -DYASM_BUILD_TESTS:BOOL=OFF -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -S. -Bbuild_static &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DENABLE_NLS:BOOL=OFF -DYASM_BUILD_TESTS:BOOL=OFF -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -S. -Bbuild_shared &&
# #wl-showstatus build &&
# #make -Cbuild_static &&
# #wl-showstatus build &&
# #make -Cbuild_shared &&
# wl-showstatus build-install &&
# ninja -Cbuild_static install/strip &&
# wl-showstatus build-install &&
# ninja -Cbuild_shared install/strip &&
#    echo OK

#export NAME="Graphviz"
#export STATUS=
#export URL=http://www.graphviz.org/
#export BASENAME=graphviz
#export DESCRIPTION="Graph visualization is a way of representing structural information as diagrams of abstract graphs and networks. Automatic graph drawing has many important applications in software engineering, database and web design, networking, and in visual interfaces for many other domains."
#export CATEGORY=graphics
#export TYPE=library
##export VERSION=2.20.1
#export VERSION=2.20.2
#####.libs/gvdevice_gtk.o:gvdevice_gtk.c:(.text+0x123): undefined reference to `XOpenDisplay'
#####.libs/gvdevice_gtk.o:gvdevice_gtk.c:(.text+0x138): undefined reference to `XDisplayName'
#####lib/common/shapes.c:(.text+0x2eec): undefined reference to `sincos'
##export VERSION=2.20.3
##export VERSION=2.22.2
##export VERSION=2.24.0
#####lib/neatogen/.libs/libneatogen_C.a(multispline.o):multispline.c:(.text+0x77a): undefined reference to `line_intersect'
######mv plugin/neato_layout/Makefile plugin/neato_layout/Makefile.bak
######sed -e "s?^\(libgvplugin_neato_layout_la_OBJECTS *= *\)?\1../../lib/common/geom.lo ?" plugin/neato_layout/Makefile.bak > plugin/neato_layout/Makefile
#####missing /usr/local/lib/libfreetype.la
######ln -s /lib/libfreetype.la /usr/local/lib/libfreetype.la
######rm /usr/local/lib/libfreetype.la
#export VERSIONDATE=
##export VERSION=2.26.0
##export VERSIONDATE=20091211
##export VERSION=2.26.2
##export VERSIONDATE=20100122
##export VERSION=2.26.3
##export VERSIONDATE=20100127
##export VERSION=2.28.0
##export VERSIONDATE=20110507
#####.libs/gvloadimage_gs.o:gvloadimage_gs.c:(.text+0xff): undefined reference to `gs_error_names'
##export VERSION=2.30.0
##export VERSIONDATE=20130114
##export VERSION=2.30.1
##export VERSIONDATE=20130214
##export VERSION=2.32.0
##export VERSIONDATE=20130802
#####.libs/compile.o:compile.c:(.text+0x3a71): undefined reference to `_imp__vmstrdup'
#####lib/cgraph/graph.c:281:1: error: initializer element is not constant
#####lib/cgraph/graph.c:281:1: error: (near initialization for 'AgDefaultDisc.mem')
#####lib/cgraph/graph.c:281:1: error: initializer element is not constant
#####lib/cgraph/graph.c:281:1: error: (near initialization for 'AgDefaultDisc.id')
#####lib/cgraph/graph.c:281:1: error: initializer element is not constant
#####lib/cgraph/graph.c:281:1: error: (near initialization for 'AgDefaultDisc.io')
##export VERSION=2.34.0
##export VERSIONDATE=20130907
##export VERSION=2.36.0
##export VERSIONDATE=20140112
##export VERSION=2.38.0
##export VERSIONDATE=20140414
#####lib/cgraph/graph.c:281:1: error: initializer element is not constant
#####lib/cgraph/graph.c:281:1: error: (near initialization for 'AgDefaultDisc.mem')
##export VERSION=2.40.20161221.0239
##export VERSIONDATE=20161221
##export VERSION=2.40.1
##export VERSIONDATE=20161225
##export VERSION=2.42.0
##export VERSIONDATE=20190710
##export VERSION=2.42.2
##export VERSIONDATE=20190918
##export VERSION=2.42.3
##export VERSIONDATE=20200406
##export VERSION=2.42.4
##export VERSIONDATE=20200406
##export VERSION=2.44.0
##export VERSIONDATE=20200408
##export VERSION=2.44.1
##export VERSIONDATE=20200629
#####.libs/cvt.o:cvt.c:(.text+0x218): undefined reference to `_imp__visibility'
#wl-showstatus --package-version
##export DEPENDENCIES=libdevil,libxpm,cairo,expat,gtk2,glib2,gettext,libiconv,libltdl,pango,librsvg,zlib,fontconfig,freetype2,gts,libgd,libxrender
##export DEPENDENCIES=libdevil,libxpm,cairo,expat,gtk2,glib2,gettext,libiconv,libltdl,pango,librsvg,zlib,fontconfig,freetype2,gts,libgd
##export DEPENDENCIES=resil,libxpm,cairo,expat,gtk2,glib2,gettext,libiconv,libltdl,pango,librsvg,zlib,fontconfig,freetype2,gts,libgd
#export DEPENDENCIES=resil,libxpm,cairo,expat,gtk2,glib2,gettext,libiconv,libltdl,pango,librsvg,zlib,fontconfig,freetype2,gts,libgd,pthreads
#export OPTIONALDEPENDENCIES=guile
#export BUILDDEPENDENCIES=swig
#export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=COPYING
#export LICENSETYPE="Common Public License"
##export LICENSEFILE=epl-v10.txt
##export LICENSETYPE="Eclipse Public License"
##export DOWNLOADURL="http://www.graphviz.org/Download_source.php"
##export DOWNLOADURL="http://www.graphviz.org/pub/graphviz/stable/SOURCES/"
##export DOWNLOADURL="http://www.graphviz.org/pub/graphviz/ARCHIVE/"
##export DOWNLOADURL="https://github.com/ellson/graphviz/releases stable_release_"
#export DOWNLOADURL="https://gitlab.com/graphviz/graphviz/tags stable_release_"
##export DOWNLOADURL="https://graphviz.gitlab.io/_pages/Download/Download_source.html"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
##export DOWNLOADSOURCEURL=http://www.graphviz.org/pub/graphviz/ARCHIVE/$BASENAME-$VERSION.tar.gz
#export DOWNLOADSOURCEURL=http://ftp.vim.org/pub/ftp/pub/os/Linux/distr/slitaz/sources/packages-2.0/g/graphviz-2.20.2.tar.gz
##export DOWNLOADSOURCEURL=https://gitlab.com/graphviz/graphviz/-/archive/stable_release_$VERSION/graphviz-stable_release_$VERSION.tar.bz2
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#tar xfz $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
##tar xfj $TARBALLDIR/$BASENAME/graphviz-stable_release_$VERSION.tar.bz2
#cd $BASENAME-$VERSION
##cd graphviz-stable_release_$VERSION
### fix lib/gvc/gvcext.h (version = 2.26.2)
#####lib/gvc/gvcext.h:78:37: error: conflicting types for 'lt__PROGRAM__LTX_preloaded_symbols'
##patch -ulbf lib/gvc/gvcext.h << EOF
##--- lib/gvc/gvcext.h  Wed Jul  8 17:14:20 2009
##+++ lib/gvc/gvcext.h  Fri Jan 22 20:42:30 2010
##@@ -81 +81 @@
##-       __declspec(dllexport) lt_symlist_t lt_preloaded_symbols[];
##+       __declspec(dllexport) lt_symlist_t* lt_preloaded_symbols;
##EOF
### fix lib/gvc/gvcext.h (version >= 2.28.0)
######lib/gvc/gvcext.h:78:37: error: conflicting types for 'lt__PROGRAM__LTX_preloaded_symbols'
##patch -ulbf lib/gvc/gvcext.h << EOF
##--- lib/gvc/gvcext.h  2011-01-25 17:30:50 +0100
##+++ lib/gvc/gvcext.h  2012-04-21 12:16:16 +0200
##@@ -76,4 +76,6 @@
## #ifndef WIN32_DLL
##+#undef _PROGRAM__LTX_
##+#undef lt_preloaded_symbols
## #if defined(GVDLL)
##-       __declspec(dllexport) lt_symlist_t lt_preloaded_symbols[];
##+       __declspec(dllexport) lt_symlist_t* lt_preloaded_symbols;
## #else
##EOF
#patch -ulbf lib/gvc/gvcext.h << EOF
#--- lib/gvc/gvcext.h  2015-02-25 14:46:20.259729400 +0100
#+++ lib/gvc/gvcext.h  2015-02-25 17:12:06.183102300 +0100
#@@ -72,4 +72,6 @@
#
#+#undef _PROGRAM__LTX_
#+#undef lt_preloaded_symbols
# #if defined(GVDLL) && !defined(ENABLE_LTDL)
#-    extern lt_symlist_t lt_preloaded_symbols[];
#+    extern lt_symlist_t *lt_preloaded_symbols;
# #else
#EOF
## fix error: lvalue required as left operand of assignment (GCC 4) (version <= 2.24.0)
#mv lib/gvc/regex_win32.c lib/gvc/regex_win32.c.bak &&
#sed -e "s/; var = NULL//" lib/gvc/regex_win32.c.bak > lib/gvc/regex_win32.c
## fix lib/sfio/sfio.h
#patch -ulbf lib/sfio/sfio.h << EOF
#--- lib/sfio/sfio.h  2007-05-11 19:06:36 +0200
#+++ lib/sfio/sfio.h  2011-11-12 16:41:56 +0100
#@@ -291,3 +291,3 @@
#
#-#if _DLL && _DLL_INDIRECT_DATA
#+#if !defined(_DLL) && _DLL_INDIRECT_DATA
# /* The Uwin shared library environment requires these to be defined
#EOF
## fix lib/common/colxlate.c
#patch -ulbf lib/common/colxlate.c << EOF
#--- lib/common/colxlate.c  2008-03-04 18:54:54 +0100
#+++ lib/common/colxlate.c  2011-11-12 16:52:48 +0100
#@@ -36,3 +36,3 @@
#
#-#ifdef WIN32
#+#if defined(WIN32) && !defined(__MINGW32__)
# extern int strcasecmp(const char *s1, const char *s2);
#EOF
## fix plugin/core/gvrender_core_vml.c
#patch -ulbf plugin/core/gvrender_core_vml.c << EOF
#--- plugin/core/gvrender_core_vml.c  2008-02-22 15:21:44 +0100
#+++ plugin/core/gvrender_core_vml.c   2011-11-12 18:01:08 +0100
#@@ -36,3 +36,3 @@
#
#-#if defined(WIN32) && !defined(__MINGW32_VERSION)      /* MinGW already defines snprintf */
#+#if defined(WIN32) && !defined(__MINGW32_VERSION) && !defined(__MINGW32__)/* MinGW already defines snprintf */
# static int
#EOF
## avoid crash in dot.exe (version >= 2.20.2)
#patch -ulbf cmd/dot/Makefile.in << EOF
#--- cmd/dot/Makefile.in  2008-06-26 02:20:12 +0200
#+++ cmd/dot/Makefile.in  2010-11-03 09:46:30 +0100
#@@ -883,3 +883,3 @@
#        (cd \$(DESTDIR)\$(bindir); for i in \$(linkedprogram); do rm -f \$\$i; \$(LN_S) dot\$(EXEEXT) \$\$i; done;)
#-       if test "x\$(DESTDIR)" = "x"; then if test -x \$(bindir)/dot\$(EXEEXT); then if test -x /sbin/ldconfig; then /sbin/ldconfig 2>/dev/null; fi; \$(bindir)/dot\$(EXEEXT) -c; else \$(bindir)/dot_static\$(EXEEXT) -c; fi; fi
#+`printf "\\t"`if test "x\$(DESTDIR)" = "x"; then \$(bindir)/dot_static\$(EXEEXT) -c; fi
#
#EOF
## fix invalid conversion for 64-bit in tclpkg/gv/gv_lua.cpp (version >= 2.20.2)
#mv tclpkg/gv/gv_lua.cpp tclpkg/gv/gv_lua.cpp.bak &&
#sed -e "s/(unsigned long)/(uintptr_t)/" tclpkg/gv/gv_lua.cpp.bak > tclpkg/gv/gv_lua.cpp
## fix undefined R_OK in lib/common/utils.c (version >= 2.28.0)
#mv lib/common/utils.c lib/common/utils.c.bak &&
#echo "#define R_OK 4" > lib/common/utils.c &&
#cat lib/common/utils.c.bak >> lib/common/utils.c
## fix missing FILE type in cmd/lefty/*/mswin32/*.c, cmd/lefty/dot2l/*.c, cmd/lefty/*.c
#for F in cmd/lefty/*/mswin32/*.c cmd/lefty/dot2l/*.c cmd/lefty/*.c ; do
# mv $F $F.bak &&
# echo "#include <stdio.h>" > $F &&
# cat $F.bak >> $F
#done
## fix missing strtok_s in lib/common/emit.c (version >= 2.30.0)
#patch -ulbf lib/common/emit.c << EOF
#--- lib/common/emit.c  2013-01-14 04:11:22 +0100
#+++ lib/common/emit.c  2013-01-14 08:06:52 +0100
#@@ -30,3 +30,5 @@
#
#-#ifdef WIN32
#+#if defined __MINGW32__
#+#define strtok_r(_s,_sep,_lasts) (*(_lasts)=strtok((_s),(_sep)))
#+#elif defined WIN32
# #define strtok_r strtok_s
#EOF
### fix missing srand48 in lib/neatogen/stuff.c (version >= 2.30.0)
##mv lib/neatogen/stuff.c lib/neatogen/stuff.c.bak
##echo "#define drand48() (((float) rand())/((float) RAND_MAX))" > lib/neatogen/stuff.c
##cat lib/neatogen/stuff.c.bak >> lib/neatogen/stuff.c
## fake -lltdl dependancy from lib/gvc/Makefile (version >= 2.28.0)
#touch lib/gvc/-lltdl
## fix redefinition of strcasecmp/strncasecmp in lib/gvpr/actions.c (version >= 2.30.0)
#patch -ulbf lib/gvpr/actions.c << EOF
#--- lib/gvpr/actions.c  2013-01-14 04:11:22 +0100
#+++ lib/gvpr/actions.c  2013-01-14 23:49:18 +0100
#@@ -825,3 +825,3 @@
#
#-#ifdef WIN32
#+#if defined WIN32 && !defined __MINGW32__
# extern int strcasecmp(const char *s1, const char *s2);
#EOF
### fix missing sincos in lib/common/shapes.c
##mv lib/common/shapes.c lib/common/shapes.c.bak
##cat > lib/common/shapes.c << EOF
##inline void sincos (double x, double *s, double *c)
##{
## __asm__ ("fsincos;" : "=t" (*c), "=u" (*s) : "0" (x));
##}
##EOF
##cat lib/common/shapes.c.bak >> lib/common/shapes.c
### fix lib/cgraph/cgraph.h (version >= 2.32.0)
##patch -ulbf lib/cgraph/cgraph.h << EOF
##--- lib/cgraph/cgraph.h  2013-08-01 19:35:16 +0200
##+++ lib/cgraph/cgraph.h  2013-08-02 10:56:00 +0200
##@@ -189,3 +189,3 @@
## #ifndef CGRAPH_EXPORTS
##-#define extern __declspec(dllimport)
##+#define extern __declspec(dllexport)
## #endif
##EOF
### fix redefinition of strcasecmp in lib/cgraph/write.c
##mv lib/cgraph/write.c lib/cgraph/write.c.bak
##echo "#define HAVE_STRCASECMP 1" > lib/cgraph/write.c
##cat lib/cgraph/write.c.bak >> lib/cgraph/write.c
### fix cmd/dot/.libs/lt-dot_static.c (version >= 2.20.2)
##patch -ulbf cmd/dot/.libs/lt-dot_static.c << EOF
##--- cmd/dot/.libs/lt-dot_static.c  2015-04-29 23:34:56.554586200 +0200
##+++ cmd/dot/.libs/lt-dot_static.c  2015-04-29 23:36:44.283250700 +0200
##@@ -112,3 +112,3 @@
##
##-  execv("/bin/sh",(char const **)newargz);
##+  execv("/bin/sh",(char * const*)newargz);
##   return 127;
##EOF
### fix DLL exports (version >= 2.40.1)
##patch -ulbf lib/pathplan/vis.h << EOF
##@@ -49,2 +49,9 @@
## #ifdef _WIN32
##+#ifdef GVDLL
##+#define PATHPLAN_EXPORTS __declspec(dllexport)
##+#endif
##+#ifndef GVC_EXPORTS
##+#undef PATHPLAN_EXPORTS
##+#define PATHPLAN_EXPORTS __declspec(dllimport)
##+#endif
## #ifndef PATHPLAN_EXPORTS
##EOF
##patch -ulbf lib/pathplan/pathutil.h << EOF
##@@ -35,2 +35,9 @@
## #ifdef _WIN32
##+#ifdef GVDLL
##+#define PATHPLAN_EXPORTS __declspec(dllexport)
##+#endif
##+#ifndef GVC_EXPORTS
##+#undef PATHPLAN_EXPORTS
##+#define PATHPLAN_EXPORTS __declspec(dllimport)
##+#endif
## #ifndef PATHPLAN_EXPORTS
##EOF
##patch -ulbf lib/common/pointset.h << EOF
##@@ -35,2 +35,9 @@
## #undef extern
##+#ifdef GVDLL
##+#define PATHPLAN_EXPORTS __declspec(dllexport)
##+#endif
##+#ifndef GVC_EXPORTS
##+#undef PATHPLAN_EXPORTS
##+#define PATHPLAN_EXPORTS __declspec(dllimport)
##+#endif
## #define extern __declspec(dllimport)
##EOF
##patch -ulbf lib/gvc/gvcext.h << EOF
##@@ -67,4 +67,6 @@
## #ifdef WIN32
##+#undef _PROGRAM__LTX_
##+#undef lt_preloaded_symbols
## #ifndef GVC_EXPORTS
##-__declspec(dllimport) lt_symlist_t lt_preloaded_symbols[];
##+__declspec(dllimport) lt_symlist_t* lt_preloaded_symbols;
## #else
##EOF
##patch -ulbf lib/common/globals.h << EOF
##@@ -50,2 +50,8 @@
## #ifdef _WIN32
##+#ifdef GVDLL
##+#define GVC_EXPORTS __declspec(dllexport)
##+#endif
##+#ifndef GVC_EXPORTS
##+#define GVC_EXPORTS __declspec(dllimport)
##+#endif
## #ifndef GVC_EXPORTS
##EOF
##patch -ulbf lib/gvc/gvc.h << EOF
##@@ -31,2 +31,8 @@
## #ifdef WIN32
##+#ifdef GVDLL
##+#define GVC_EXPORTS __declspec(dllexport)
##+#endif
##+#ifndef GVC_EXPORTS
##+#define GVC_EXPORTS __declspec(dllimport)
##+#endif
## #ifndef GVC_EXPORTS
##EOF
##patch -ulbf lib/common/memory.h << EOF
##@@ -48,2 +48,8 @@
## #ifdef _WIN32
##+#ifdef GVDLL
##+#define GVC_EXPORTS __declspec(dllexport)
##+#endif
##+#ifndef GVC_EXPORTS
##+#define GVC_EXPORTS __declspec(dllimport)
##+#endif
## #ifndef GVC_EXPORTS
##EOF
##patch -ulbf lib/vmalloc/vmalloc.h << EOF
##@@ -113,2 +113,8 @@
## #ifdef WIN32
##+#ifdef GVDLL
##+#define VMALLOC_EXPORTS __declspec(dllexport)
##+#endif
##+#ifndef GVC_EXPORTS
##+#define VMALLOC_EXPORTS __declspec(dllimport)
##+#endif
## #undef extern
##EOF
##patch -ulbf plugin/core/gvplugin_core.c << EOF
##@@ -89,11 +89,15 @@
## };
##
## #ifdef WIN32_DLL
##+#ifdef GVDLL
## #ifndef GVPLUGIN_CORE_EXPORTS
## __declspec(dllimport) gvplugin_library_t gvplugin_core_LTX_library = { "core", apis };
## #else
## __declspec(dllexport) gvplugin_library_t gvplugin_core_LTX_library = { "core", apis };
## #endif
##+#else
##+gvplugin_library_t gvplugin_core_LTX_library = { "core", apis };
##+#endif
## #endif
##
##
##EOF
##patch -ulbf lib/gvc/gvcint.h << EOF
##@@ -25,4 +25,16 @@
## #include "color.h"
##
##+#ifdef _WIN32
##+#ifdef GVDLL
##+#define GVCINT_EXPORTS __declspec(dllexport)
##+#endif
##+#ifndef GVC_EXPORTS
##+#define GVCINT_EXPORTS __declspec(dllimport)
##+#endif
##+#ifndef GVCINT_EXPORTS
##+#define extern __declspec(dllimport)
##+#endif
##+#endif
##+
##     /* active plugin headers */
##     typedef struct gvplugin_active_layout_s {
##EOF
### skip making cmd/lefty/examples
##cat > cmd/lefty/examples/Makefile.in << EOF
##all:
##install:
##clean:
##EOF
### remove dependancy on dynamic libstdc++ (GCC 4)
##mv libtool libtool.bak &&
##sed -e "s/-lstdc++/-lstdc++_s -lsupc++/" libtool.bak > libtool &&
## the definitions of XMD_H and HAVE_BOOLEAN work around conflicting definitions of INT32 and boolean
## use GUILE_LOAD_PATH to fix: ERROR: Unable to find file "ice-9/boot-9.scm" in load path
#wl-showstatus configure &&
# #./autogen.sh NOCONFIG &&
# ## fix building DLLs on 64-bit
# #if ( echo $RUNPLATFORM | grep -q x86_64 ); then
# # #aclocal --force &&
# # #autoreconf -f -i -I $MINGWPREFIX/share/aclocal
# # #libtoolize -f -i --ltdl &&
# # #autoreconf -f -i -I $(pwd)/m4 -I $MINGWPREFIX/share/aclocal
# # ( autoreconf -f -i -I $MINGWPREFIX/share/aclocal || (
# #  libtoolize -f -i --ltdl &&
# #  aclocal --force -I $MINGWPREFIX/share/aclocal &&
# #  autoheader -f &&
# #  autoconf -f -I $MINGWPREFIX/share/aclocal &&
# #  automake -a -c
# # ) || (
# #  rm -rf m4 && mkdir -p m4 &&
# #  autoreconf -f -i -I $(pwd)/m4 -I $MINGWPREFIX/share/aclocal
# # ))
# #fi &&
# ## fix DLL export in lib/pathplan (version >= 2.40.1)
# #mv lib/pathplan/Makefile.in lib/pathplan/Makefile.in.bak &&
# #sed -e "s/^CFLAGS\s*=\s*/&-DPATHPLAN_EXPORTS /" lib/pathplan/Makefile.in.bak > lib/pathplan/Makefile.in &&
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM CFLAGS="-DXMD_H -DHAVE_BOOLEAN" && make install
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM CFLAGS="-DXMD_H -DHAVE_BOOLEAN" LDFLAGS="-Wl,-no-undefined" && make install
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --disable-shared CFLAGS="-DXMD_H -DHAVE_BOOLEAN" LDFLAGS="-lregex -Wl,-no-undefined" && make install
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-x CFLAGS="-DXMD_H -DHAVE_BOOLEAN" LDFLAGS="-lregex -Wl,-no-undefined -Wl,--enable-auto-import" --disable-perl --disable-php --disable-python --disable-java --disable-tcl &&
## use --with-gts=no until gts has a shared library
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-x --disable-perl --disable-php --disable-python --disable-java --disable-tcl --with-gts=no CFLAGS="-DXMD_H -DHAVE_BOOLEAN" LDFLAGS="-lregex -Wl,-no-undefined" &&
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-x --disable-perl --disable-php --disable-python --disable-java --disable-tcl CFLAGS="-DXMD_H -DHAVE_BOOLEAN" LDFLAGS="-Wl,--enable-auto-import -lregex -lIL -lILU -lbgd -no-undefined -Wl,-no-undefined" &&
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-static --enable-shared --with-x=no --with-gdiplus=yes --with-gts=no --disable-perl --disable-php --disable-python --disable-java --disable-tcl RC=windres CFLAGS="-DXMD_H -DHAVE_BOOLEAN" LDFLAGS="-Wl,--enable-auto-import -lregex -lIL -lILU -lbgd -lgts -no-undefined -Wl,-no-undefined" &&
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-static --enable-shared --with-x --with-gdiplus=yes --with-gts=no --disable-perl --disable-php --disable-python --disable-java --disable-tcl RC=windres CFLAGS="-DXMD_H -DHAVE_BOOLEAN" LDFLAGS="-Wl,--enable-auto-import -lregex -lIL -lILU -lbgd -lgts -Wl,-no-undefined" &&
##GUILE_LOAD_PATH=`ls -d1 $MINGWPREFIX/share/guile/*|tail -n1` ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-static --enable-shared --without-x --with-lasi=no --with-mylibgd=yes --with-gdiplus=yes --with-gts=no --disable-perl --disable-php --disable-python --disable-java --disable-tcl RC=windres CFLAGS="-DXMD_H -DHAVE_BOOLEAN" LDFLAGS="-Wl,--enable-auto-import -lregex -lIL -lILU -lbgd -lgts -Wl,-no-undefined" &&
##GUILE_LOAD_PATH=`ls -d1 $MINGWPREFIX/share/guile/*|tail -n1` ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-static --enable-shared --without-x --with-gdiplus=yes --with-gts=no --disable-perl --disable-php --disable-python --disable-java --disable-tcl RC=windres CFLAGS="-DXMD_H -DHAVE_BOOLEAN" LDFLAGS="-Wl,--enable-auto-import -lregex -lIL -lILU -lbgd -lgts -Wl,-no-undefined" &&
##GUILE_LOAD_PATH=`ls -d1 $MINGWPREFIX/share/guile/*|tail -n1` ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-static --enable-shared --without-x --with-gdiplus=yes --with-gts=no --disable-perl --disable-php --disable-python --disable-java --disable-tcl --with-gtk=no RC=windres CFLAGS="-DXMD_H -DHAVE_BOOLEAN" LDFLAGS="-Wl,--enable-auto-import -lregex -lIL -lILU -lbgd -lgts -Wl,-no-undefined" &&
##GUILE_LOAD_PATH=`ls -d1 $MINGWPREFIX/share/guile/*|tail -n1` ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-static --enable-shared --without-x --with-gdiplus=yes --with-gts=no --disable-perl --disable-php --disable-python --disable-java --disable-tcl --disable-ltdl --without-included-ltdl RC=windres CFLAGS="-DXMD_H -DHAVE_BOOLEAN" LDFLAGS="-Wl,--enable-auto-import -lregex -lIL -lILU -lbgd -lgts -Wl,-no-undefined" &&
##GUILE_LOAD_PATH=`ls -d1 $MINGWPREFIX/share/guile/*|tail -n1` ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-static --enable-shared --without-x --with-gdiplus=yes --with-gts=no --disable-perl --disable-php --disable-python --disable-java --disable-tcl --with-ltdl-include=$MINGWPREFIX/include --with-ltdl-lib=$MINGWPREFIX/lib RC=windres CFLAGS="-DXMD_H -DHAVE_BOOLEAN" LDFLAGS="-Wl,--enable-auto-import -lregex -lIL -lILU -lbgd -lgts -Wl,-no-undefined" &&
##GUILE_LOAD_PATH=`ls -d1 $MINGWPREFIX/share/guile/*|tail -n1` ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-static --enable-shared --without-x --with-gdiplus=yes --with-gts=no --disable-perl --disable-php --disable-python --disable-java --disable-tcl --with-ltdl-include=$MINGWPREFIX/include --with-ltdl-lib=$MINGWPREFIX/lib RC=windres CFLAGS="-DXMD_H -DHAVE_BOOLEAN -DWIN32_DLL" CXXFLAGS="-DWIN32_DLL" LDFLAGS="-Wl,--enable-auto-import -lregex -lIL -lILU -lbgd -lgts -Wl,-no-undefined" &&
##GUILE_LOAD_PATH=`ls -d1 $MINGWPREFIX/share/guile/*|tail -n1` ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-static --enable-shared --without-x --with-gdiplus=yes --with-gts=no --disable-perl --disable-php --disable-python --disable-java --disable-tcl --with-ltdl-include=$MINGWPREFIX/include --with-ltdl-lib=$MINGWPREFIX/lib RC=windres CFLAGS="-DXMD_H -DHAVE_BOOLEAN" LDFLAGS="-Wl,--enable-auto-import -lregex -lIL -lILU -lbgd -lgts -Wl,-no-undefined" &&
##GUILE_LOAD_PATH=`ls -d1 $MINGWPREFIX/share/guile/*|tail -n1` ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-static --enable-shared --without-x --with-gdiplus=yes --with-gts=no --disable-perl --disable-php --disable-python --disable-java --disable-tcl --with-gtk=no RC=windres CFLAGS="-DXMD_H -DHAVE_BOOLEAN -DWIN32_DLL" LDFLAGS="-Wl,--enable-auto-import -lregex -lIL -lILU -lbgd -lgts -Wl,-no-undefined" &&
##GUILE_LOAD_PATH=$(ls -d1 $MINGWPREFIX/share/guile/* 2> /dev/null | tail -n1) ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-static --enable-shared --without-x --with-gdiplus=yes --with-gts=no --disable-perl --disable-php --disable-python --disable-java --disable-tcl --with-gtk=no RC=windres CFLAGS="-DXMD_H -DHAVE_BOOLEAN -DWIN32_DLL -I$MINGWPREFIX/include/freetype2/freetype" LDFLAGS="-Wl,--as-needed -lregex -lIL -lILU -lbgd -lgts -lguile -Wl,-no-undefined" &&
##GUILE_LOAD_PATH=$(ls -d1 $MINGWPREFIX/share/guile/* 2> /dev/null | tail -n1) ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-static --enable-shared --without-x --with-gdiplus=yes --with-gts=no --disable-perl --disable-php --disable-python --disable-java --disable-tcl --with-gtk=no RC=windres CFLAGS="-DXMD_H -DHAVE_BOOLEAN -DWIN32_DLL -I$MINGWPREFIX/include/freetype2/freetype" LDFLAGS="-Wl,--enable-auto-import -lregex -lIL -lILU -lbgd -lgts -Wl,-no-undefined" &&
##GUILE_LOAD_PATH=$(ls -d1 $MINGWPREFIX/share/guile/* 2> /dev/null | tail -n1) ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-static --enable-shared --without-x --with-gdiplus=yes --with-gts=no --disable-perl --disable-php --disable-python --disable-java --disable-tcl --with-gtk=no RC=windres CFLAGS="-DXMD_H -DHAVE_BOOLEAN -DWIN32_DLL -I$MINGWPREFIX/include/freetype2/freetype" LDFLAGS="-Wl,--enable-auto-import -lregex -lIL -lILU -lgts -Wl,-no-undefined" &&
##GUILE_LOAD_PATH=$(ls -d1 $MINGWPREFIX/share/guile/* 2> /dev/null | tail -n1) ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-static --enable-shared --without-x --with-gdiplus=yes --with-gts=no --disable-perl --disable-php --disable-python --disable-java --disable-tcl --with-gtk=no RC=windres CFLAGS="-DXMD_H -DHAVE_BOOLEAN -DWIN32_DLL -I$MINGWPREFIX/include/freetype2/freetype" LDFLAGS="-Wl,--enable-auto-import -lregex -lIL -lILU -lgts $(ls -1 $MINGWPREFIX/lib/libguile.a&>/dev/null && echo "-lguile") -lpthread -Wl,-no-undefined" &&
#GUILE_LOAD_PATH=$(ls -d1 $MINGWPREFIX/share/guile/* 2> /dev/null | tail -n1) ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-static --enable-shared --without-x --with-gdiplus=yes --with-gts=no --disable-perl --disable-php --disable-python --disable-java --disable-tcl --with-gtk=no RC=windres CFLAGS="-DXMD_H -DHAVE_BOOLEAN -DWIN32_DLL -I$MINGWPREFIX/include/freetype2/freetype" LDFLAGS="-Wl,--enable-auto-import -Wl,--as-needed -liconv -lregex -lIL -lILU -lgts $(ls -1 $MINGWPREFIX/lib/libguile.a&>/dev/null && echo "-lguile") -lpthread -Wl,-no-undefined" &&
##GUILE_LOAD_PATH=$(ls -d1 $MINGWPREFIX/share/guile/* 2> /dev/null | tail -n1) ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-static --enable-shared --without-x --with-gdiplus=yes --with-gts=no --disable-perl --disable-php --disable-python --disable-java --disable-tcl --with-gtk=no RC=windres CFLAGS="-DXMD_H -DHAVE_BOOLEAN -DWIN32_DLL -I$MINGWPREFIX/include/freetype2/freetype" CFLAGS="-DGVDLL=1" LDFLAGS="-Wl,--enable-auto-import -lregex -lIL -lILU -lgts $(ls -1 $MINGWPREFIX/lib/libguile.a&>/dev/null && echo "-lguile") -lpthread -Wl,-no-undefined" &&
# ## fix libtool issues on 64-bit
# #if ( echo $RUNPLATFORM | grep -q x86_64 ); then
# # mv libltdl/libtool libltdl/libtool.bak &&
# # sed -e "s/-march=i386 -mtune=i686//" `which libtool` > libltdl/libtool
# #fi &&
# # fix building DLLs
# mv libtool libtool.bak &&
# sed -e "s/\(allow_undefined=\)yes/\1no/" libtool.bak > libtool &&
# mv libtool libtool.bak2 &&
# sed -e "s/\(deplibs_check_method=\"\)[^\"]*/\1file_magic ^x86 archive import|^x86 DLL|PE32+* executable (DLL)|pe-i386|pe-x86-64/; s/'file format pe-i386[^']*'/\"\$deplibs_check_method\"/" libtool.bak2 > libtool &&
# # fix redefinition of strcasecmp
# echo "#define HAVE_STRCASECMP 1" >> config.h &&
# wl-showstatus build-install &&
# #( make -j1 all install-strip || make -j1 all install-strip SWIG="swig -I$MINGWPREFIX/share/swig/`swig -version|sed -n -e "s/^.*Version \([0-9.]*.*\)$/\1/p"` -I$MINGWPREFIX/share/swig/`swig -version|sed -n -e "s/^.*Version \([0-9.]*.*\)$/\1/p"`/guile -I$MINGWPREFIX/share/swig/`swig -version|sed -n -e "s/^.*Version \([0-9.]*.*\)$/\1/p"`/lua" || make -j1 install LIBS="-Wl,--as-needed -l/mingw32/bin/libgs.dll" || make -j1 all install-strip LIBS="-lIL.dll -lILU.dll -lbgd.dll" ) &&
# #( make -j1 all install-strip || make -j1 all install-strip SWIG="swig -I$MINGWPREFIX/share/swig/`swig -version|sed -n -e "s/^.*Version \([0-9.]*.*\)$/\1/p"` -I$MINGWPREFIX/share/swig/`swig -version|sed -n -e "s/^.*Version \([0-9.]*.*\)$/\1/p"`/guile -I$MINGWPREFIX/share/swig/`swig -version|sed -n -e "s/^.*Version \([0-9.]*.*\)$/\1/p"`/lua" || make -j1 install LIBS="-Wl,--as-needed -lgs.dll" || make -j1 all install-strip LIBS="-Wl,--as-needed -lgs.dll -lltdl.dll -lIL.dll -lILU.dll -lbgd.dll" ) &&
# #( make -j1 all install-strip || make -j1 all install-strip SWIG="swig -I$MINGWPREFIX/share/swig/`swig -version|sed -n -e "s/^.*Version \([0-9.]*.*\)$/\1/p"` -I$MINGWPREFIX/share/swig/`swig -version|sed -n -e "s/^.*Version \([0-9.]*.*\)$/\1/p"`/guile -I$MINGWPREFIX/share/swig/`swig -version|sed -n -e "s/^.*Version \([0-9.]*.*\)$/\1/p"`/lua" || make -j1 install LIBS="-Wl,--as-needed -lgs.dll" || make -j1 all install-strip LIBS="-Wl,--as-needed -lgs.dll -lltdl.dll -lIL.dll -lILU.dll -lgd.dll" ) &&
# SWIG_FEATURES="-I$MINGWPREFIX/share/swig/`swig -version|sed -n -e "s/^.*Version \([0-9.]*.*\)$/\1/p"` -I$MINGWPREFIX/share/swig/`swig -version|sed -n -e "s/^.*Version \([0-9.]*.*\)$/\1/p"`/guile -I$MINGWPREFIX/share/swig/`swig -version|sed -n -e "s/^.*Version \([0-9.]*.*\)$/\1/p"`/lua -I$MINGWPREFIX/share/swig/`swig -version|sed -n -e "s/^.*Version \([0-9.]*.*\)$/\1/p"`/csharp" make -j1 all install-strip SWIG="swig -I$MINGWPREFIX/share/swig/`swig -version|sed -n -e "s/^.*Version \([0-9.]*.*\)$/\1/p"` -I$MINGWPREFIX/share/swig/`swig -version|sed -n -e "s/^.*Version \([0-9.]*.*\)$/\1/p"`/guile -I$MINGWPREFIX/share/swig/`swig -version|sed -n -e "s/^.*Version \([0-9.]*.*\)$/\1/p"`/lua -I$MINGWPREFIX/share/swig/`swig -version|sed -n -e "s/^.*Version \([0-9.]*.*\)$/\1/p"`/csharp" &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
#####To do: build 64-bit DLL
#####plugin/gs/.libs/gvloadimage_gs.o:gvloadimage_gs.c:(.text+0xff): undefined reference to `gs_error_names'
###make -j1 -Cplugin/gs LIBS="-Wl,--as-needed -l/mingw32/bin/libgs.dll"
##make -j1 -Cplugin/gs LIBS="-Wl,--as-needed -lgs.dll"
##To do: fix undefined reference to `gs_error_names' (may need to be fixed in gnu-ghostscript)
#####/home/win32/inst_graphviz-2.20.2/bin/dot.exe -c
#####This application has requested the Runtime to terminate it in an unusual way.
#####Please contact the application's support team for more information.
##cp -f cmd/dot/dot_static.exe cmd/dot/dot.exe
##cp -f cmd/dot/dot_static.exe cmd/dot/.libs/dot.exe
#####cmd/dot/dot_builtins.c:38:14: error: conflicting types for 'lt_preloaded_symbols'
#####lib/gvc/gvcext.h:81:44: note: previous declaration of 'lt_preloaded_symbols' was here



#export NAME="Graphviz"
#export STATUS=
#export URL=http://www.graphviz.org/
#export BASENAME=graphviz
#export DESCRIPTION="Graph visualization is a way of representing structural information as diagrams of abstract graphs and networks. Automatic graph drawing has many important applications in software engineering, database and web design, networking, and in visual interfaces for many other domains."
#export CATEGORY=graphics
#export TYPE=library
##export VERSION=2.40.1
##export VERSIONDATE=20161225
##export VERSION=2.42.0
##export VERSIONDATE=20190710
##export VERSION=2.42.3
##export VERSIONDATE=20200406
#export VERSION=2.44.0
#export VERSIONDATE=20200408
#####.libs/cvt.o:cvt.c:(.text+0x218): undefined reference to `_imp__visibility'
#wl-showstatus --package-version
##export DEPENDENCIES=libdevil,libxpm,cairo,expat,gtk2,glib2,gettext,libiconv,libltdl,pango,librsvg,zlib,fontconfig,freetype2,gts,libgd,libxrender
##export DEPENDENCIES=libdevil,libxpm,cairo,expat,gtk2,glib2,gettext,libiconv,libltdl,pango,librsvg,zlib,fontconfig,freetype2,gts,libgd
##export DEPENDENCIES=resil,libxpm,cairo,expat,gtk2,glib2,gettext,libiconv,libltdl,pango,librsvg,zlib,fontconfig,freetype2,gts,libgd
#export DEPENDENCIES=resil,libxpm,cairo,expat,gtk2,glib2,gettext,libiconv,libltdl,pango,librsvg,zlib,fontconfig,freetype2,gts,libgd,pthreads
#export OPTIONALDEPENDENCIES=guile
#export BUILDDEPENDENCIES=swig
#export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=epl-v10.txt
#export LICENSETYPE="Eclipse Public License"
#export DOWNLOADURL="https://gitlab.com/graphviz/graphviz/tags stable_release_"
##export DOWNLOADURL="https://graphviz.gitlab.io/_pages/Download/Download_source.html"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://gitlab.com/graphviz/graphviz/-/archive/stable_release_$VERSION/graphviz-stable_release_$VERSION.tar.bz2
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#tar xfj $TARBALLDIR/$BASENAME/graphviz-stable_release_$VERSION.tar.bz2
#cd graphviz-stable_release_$VERSION
## fix DLL exports (version >= 2.40.1)
#patch -ulbf lib/pathplan/vis.h << EOF
#@@ -49,2 +49,9 @@
# #ifdef _WIN32
#+#ifdef GVDLL
#+#define PATHPLAN_EXPORTS __declspec(dllexport)
#+#endif
#+#ifndef GVC_EXPORTS
#+#undef PATHPLAN_EXPORTS
#+#define PATHPLAN_EXPORTS __declspec(dllimport)
#+#endif
# #ifndef PATHPLAN_EXPORTS
#EOF
#patch -ulbf lib/pathplan/pathutil.h << EOF
#@@ -35,2 +35,9 @@
# #ifdef _WIN32
#+#ifdef GVDLL
#+#define PATHPLAN_EXPORTS __declspec(dllexport)
#+#endif
#+#ifndef GVC_EXPORTS
#+#undef PATHPLAN_EXPORTS
#+#define PATHPLAN_EXPORTS __declspec(dllimport)
#+#endif
# #ifndef PATHPLAN_EXPORTS
#EOF
#patch -ulbf lib/common/pointset.h << EOF
#@@ -35,2 +35,9 @@
# #undef extern
#+#ifdef GVDLL
#+#define PATHPLAN_EXPORTS __declspec(dllexport)
#+#endif
#+#ifndef GVC_EXPORTS
#+#undef PATHPLAN_EXPORTS
#+#define PATHPLAN_EXPORTS __declspec(dllimport)
#+#endif
# #define extern __declspec(dllimport)
#EOF
#patch -ulbf lib/gvc/gvcext.h << EOF
#@@ -67,4 +67,6 @@
# #ifdef WIN32
#+#undef _PROGRAM__LTX_
#+#undef lt_preloaded_symbols
# #ifndef GVC_EXPORTS
#-__declspec(dllimport) lt_symlist_t lt_preloaded_symbols[];
#+__declspec(dllimport) lt_symlist_t* lt_preloaded_symbols;
# #else
#EOF
#patch -ulbf lib/common/globals.h << EOF
#@@ -50,2 +50,8 @@
# #ifdef _WIN32
#+#ifdef GVDLL
#+#define GVC_EXPORTS __declspec(dllexport)
#+#endif
#+#ifndef GVC_EXPORTS
#+#define GVC_EXPORTS __declspec(dllimport)
#+#endif
# #ifndef GVC_EXPORTS
#EOF
#patch -ulbf lib/gvc/gvc.h << EOF
#@@ -31,2 +31,8 @@
# #ifdef WIN32
#+#ifdef GVDLL
#+#define GVC_EXPORTS __declspec(dllexport)
#+#endif
#+#ifndef GVC_EXPORTS
#+#define GVC_EXPORTS __declspec(dllimport)
#+#endif
# #ifndef GVC_EXPORTS
#EOF
#patch -ulbf lib/common/memory.h << EOF
#@@ -48,2 +48,8 @@
# #ifdef _WIN32
#+#ifdef GVDLL
#+#define GVC_EXPORTS __declspec(dllexport)
#+#endif
#+#ifndef GVC_EXPORTS
#+#define GVC_EXPORTS __declspec(dllimport)
#+#endif
# #ifndef GVC_EXPORTS
#EOF
#patch -ulbf lib/vmalloc/vmalloc.h << EOF
#@@ -113,2 +113,8 @@
# #ifdef WIN32
#+#ifdef GVDLL
#+#define VMALLOC_EXPORTS __declspec(dllexport)
#+#endif
#+#ifndef GVC_EXPORTS
#+#define VMALLOC_EXPORTS __declspec(dllimport)
#+#endif
# #undef extern
#EOF
#patch -ulbf plugin/core/gvplugin_core.c << EOF
#@@ -92,3 +92,3 @@
# #ifndef GVPLUGIN_CORE_EXPORTS
#-__declspec(dllimport) gvplugin_library_t gvplugin_core_LTX_library = { "core", apis };
#+gvplugin_library_t gvplugin_core_LTX_library = { "core", apis };
# #else
#EOF
#patch -ulbf lib/gvc/gvcint.h << EOF
#@@ -26,2 +26,11 @@
#
#+#ifdef _WIN32
#+#ifdef GVDLL
#+#define GVCINT_EXPORTS __declspec(dllexport)
#+#endif
#+#ifndef GVCINT_EXPORTS
#+#define GVCINT_EXPORTS __declspec(dllimport)
#+#endif
#+#endif
#+
#     /* active plugin headers */
#@@ -145,4 +154,4 @@
#
#-extern GVC_t* gvCloneGVC (GVC_t *);
#-extern void gvFreeCloneGVC (GVC_t *);
#+GVCINT_EXPORTS GVC_t* gvCloneGVC (GVC_t *);
#+GVCINT_EXPORTS void gvFreeCloneGVC (GVC_t *);
#
#EOF
#patch -ulbf lib/common/utils.h << EOF
#@@ -23,2 +23,8 @@
# #ifdef _WIN32
#+#ifdef GVDLL
#+#define GVC_EXPORTS __declspec(dllexport)
#+#endif
#+#ifndef GVC_EXPORTS
#+#define GVC_EXPORTS __declspec(dllimport)
#+#endif
# #ifndef GVC_EXPORTS
#EOF
#patch -ulbf lib/ortho/ortho.h << EOF
#@@ -17,3 +17,14 @@
#
#-void orthoEdges (Agraph_t* g, int useLbls);
#+#ifdef _WIN32
#+#ifdef GVDLL
#+#define ORTHO_EXPORTS __declspec(dllexport)
#+#else
#+#define ORTHO_EXPORTS __declspec(dllimport)
#+#endif
#+#endif
#+#ifndef ORTHO_EXPORTS
#+#define ORTHO_EXPORTS
#+#endif
#+
#+ORTHO_EXPORTS void orthoEdges (Agraph_t* g, int useLbls);
# #endif
#EOF
#patch -ulbf lib/ortho/ortho.c << EOF
#@@ -36,2 +36,3 @@
# #include "pointset.h"
#+#include "ortho.h"
# typedef struct {
#@@ -1235,3 +1236,3 @@
#  */
#-void
#+ORTHO_EXPORTS void
# orthoEdges (Agraph_t* g, int doLbls)
#EOF
#patch -ulbf cmd/dot/no_builtins.c << EOF
#@@ -16 +16 @@
#-lt_symlist_t lt_preloaded_symbols[] = { { 0, 0 } };
#+lt_symlist_t* lt_preloaded_symbols = { { 0, 0 } };
#EOF
#patch -ulbf cmd/dot/dot_builtins.c << EOF
#@@ -35,3 +35,3 @@
#
#-lt_symlist_t lt_preloaded_symbols[] = {
#+lt_symlist_t* lt_preloaded_symbols = {
#        { "gvplugin_dot_layout_LTX_library", (void*)(&gvplugin_dot_layout_LTX_library) },
#EOF
#sed -i.bak -e "s/__declspec(dllimport) *//" plugin/gd/gvplugin_gd.c
#sed -i.bak -e "s/__declspec(dllimport) *//" plugin/pango/gvplugin_pango.c
#sed -i.bak -e "s/__declspec(dllimport) *//" plugin/dot_layout/gvplugin_dot_layout.c
#sed -i.bak -e "s/__declspec(dllimport) *//" plugin/neato_layout/gvplugin_neato_layout.c
#sed -i.bak -e "s/__declspec(dllimport) *//" plugin/visio/gvplugin_visio.c
#sed -i.bak -e "s/__declspec(dllimport) *//" lib/gvc/gvcext.h
### fix missing exports in lib/cdt/dttree.c
##patch -ulbf lib/cdt/dttree.c << EOF
##@@ -355,5 +355,5 @@
## #ifndef KPVDEL /* backward compatibility - delete next time around */
##-Dtmethod_t             _Dttree = { dttree, DT_OSET };
##-Dtmethod_t* Dtorder = &_Dttree;
##-Dtmethod_t* Dttree = &_Dttree;
##+__EXPORT__ Dtmethod_t          _Dttree = { dttree, DT_OSET };
##+__EXPORT__ Dtmethod_t* Dtorder = &_Dttree;
##+__EXPORT__ Dtmethod_t* Dttree = &_Dttree;
## #endif
##EOF
### fix variable exports in lib/cdt/cdt.h
##patch -ulbf lib/cdt/cdt.h << EOF
##@@ -162,6 +162,6 @@
## #if defined(_BLD_cdt) && defined(__EXPORT__)
##-#define extern __EXPORT__
##+#define extern extern __EXPORT__
## #endif
## #if !defined(_BLD_cdt) && defined(__IMPORT__)
##-#define extern __IMPORT__
##+#define extern extern __IMPORT__
## #endif
##EOF
## fix variable exports (version >= 2.40.1)
#for F in $(grep -l "^Dtmethod_t\* .*=" $(find -name '*.c')); do
# sed -i.bak -e "s/^Dtmethod_t\* /__EXPORT__ &/" $F
#done
#sed -i.bak -e "s/^__declspec(dllimport) \(boolean\|int\)\( [a-zA-Z]*;\)/__EXPORT__ \1\2/" cmd/dot/dot.c
#wl-showstatus configure &&
# ./autogen.sh NOCONFIG &&
# #GUILE_LOAD_PATH=$(ls -d1 $MINGWPREFIX/share/guile/* 2> /dev/null | tail -n1) ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-static --enable-shared --without-x --with-gdiplus=yes --with-gts=no --disable-perl --disable-php --disable-python --disable-java --disable-tcl --with-gtk=no RC=windres CFLAGS="-DXMD_H -DHAVE_BOOLEAN -DWIN32_DLL -I$MINGWPREFIX/include/freetype2/freetype" CFLAGS="-DGVDLL=1" LDFLAGS="-Wl,--enable-auto-import -lregex -lIL -lILU -lgts $(ls -1 $MINGWPREFIX/lib/libguile.a&>/dev/null && echo "-lguile") -lpthread -Wl,-no-undefined" &&
# GUILE_LOAD_PATH=$(ls -d1 $MINGWPREFIX/share/guile/* 2> /dev/null | tail -n1) ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-static --enable-shared --without-x --with-gdiplus=yes --with-gts=no --disable-perl --disable-php --disable-python --disable-java --disable-tcl --disable-r --disable-ruby --without-gtk --without-gdk RC=windres CFLAGS="-DGVDLL= -DWIN32_DLL -I$MINGWPREFIX/include/freetype2/freetype" LDFLAGS="-Wl,--as-needed -lregex -lIL -lILU -lgts" &&
## CFLAGS="-DXMD_H -DHAVE_BOOLEAN -DWIN32_DLL -I$MINGWPREFIX/include/freetype2/freetype" CFLAGS="-DGVDLL=1" LDFLAGS="-Wl,--enable-auto-import -lregex -lIL -lILU -lgts $(ls -1 $MINGWPREFIX/lib/libguile.a&>/dev/null && echo "-lguile") -lpthread -Wl,-no-undefined"
# wl-showstatus build-install &&
# #make all install-strip &&
# #( make -j1 all install-strip || make -j1 all install-strip SWIG="swig -I$MINGWPREFIX/share/swig/`swig -version|sed -n -e "s/^.*Version \([0-9.]*.*\)$/\1/p"` -I$MINGWPREFIX/share/swig/`swig -version|sed -n -e "s/^.*Version \([0-9.]*.*\)$/\1/p"`/guile -I$MINGWPREFIX/share/swig/`swig -version|sed -n -e "s/^.*Version \([0-9.]*.*\)$/\1/p"`/lua" || make -j1 install LIBS="-Wl,--as-needed -l/mingw32/bin/libgs.dll" || make -j1 all install-strip LIBS="-lIL.dll -lILU.dll -lbgd.dll" ) &&
# #( make -j1 all install-strip || make -j1 all install-strip SWIG="swig -I$MINGWPREFIX/share/swig/`swig -version|sed -n -e "s/^.*Version \([0-9.]*.*\)$/\1/p"` -I$MINGWPREFIX/share/swig/`swig -version|sed -n -e "s/^.*Version \([0-9.]*.*\)$/\1/p"`/guile -I$MINGWPREFIX/share/swig/`swig -version|sed -n -e "s/^.*Version \([0-9.]*.*\)$/\1/p"`/lua" || make -j1 install LIBS="-Wl,--as-needed -lgs.dll" || make -j1 all install-strip LIBS="-Wl,--as-needed -lgs.dll -lltdl.dll -lIL.dll -lILU.dll -lbgd.dll" ) &&
# #( make -j1 all install-strip || make -j1 all install-strip SWIG="swig -I$MINGWPREFIX/share/swig/`swig -version|sed -n -e "s/^.*Version \([0-9.]*.*\)$/\1/p"` -I$MINGWPREFIX/share/swig/`swig -version|sed -n -e "s/^.*Version \([0-9.]*.*\)$/\1/p"`/guile -I$MINGWPREFIX/share/swig/`swig -version|sed -n -e "s/^.*Version \([0-9.]*.*\)$/\1/p"`/lua" || make -j1 install LIBS="-Wl,--as-needed -lgs.dll" || make -j1 all install-strip LIBS="-Wl,--as-needed -lgs.dll -lltdl.dll -lIL.dll -lILU.dll -lgd.dll" ) &&
# SWIG_FEATURES="-I$MINGWPREFIX/share/swig/`swig -version|sed -n -e "s/^.*Version \([0-9.]*.*\)$/\1/p"` -I$MINGWPREFIX/share/swig/`swig -version|sed -n -e "s/^.*Version \([0-9.]*.*\)$/\1/p"`/guile -I$MINGWPREFIX/share/swig/`swig -version|sed -n -e "s/^.*Version \([0-9.]*.*\)$/\1/p"`/lua -I$MINGWPREFIX/share/swig/`swig -version|sed -n -e "s/^.*Version \([0-9.]*.*\)$/\1/p"`/csharp" make -j1 install-strip SWIG="swig -I$MINGWPREFIX/share/swig/`swig -version|sed -n -e "s/^.*Version \([0-9.]*.*\)$/\1/p"` -I$MINGWPREFIX/share/swig/`swig -version|sed -n -e "s/^.*Version \([0-9.]*.*\)$/\1/p"`/guile -I$MINGWPREFIX/share/swig/`swig -version|sed -n -e "s/^.*Version \([0-9.]*.*\)$/\1/p"`/lua -I$MINGWPREFIX/share/swig/`swig -version|sed -n -e "s/^.*Version \([0-9.]*.*\)$/\1/p"`/csharp" all install-strip &&
#    echo OK
## wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION



#export NAME="Graphviz"
#export STATUS=
#export URL=http://www.graphviz.org/
#export BASENAME=graphviz
#export DESCRIPTION="Graph visualization is a way of representing structural information as diagrams of abstract graphs and networks. Automatic graph drawing has many important applications in software engineering, database and web design, networking, and in visual interfaces for many other domains."
#export CATEGORY=graphics
#export TYPE=library
##export VERSION=2.42.4
##export VERSIONDATE=20200406
##export VERSION=2.44.0
##export VERSIONDATE=20200408
##export VERSION=2.44.1
##export VERSIONDATE=20200629
##export VERSION=2.46.0
##export VERSIONDATE=20210119
##export VERSION=2.46.1
##export VERSIONDATE=20210214
##export VERSION=2.47.0
##export VERSIONDATE=20210316
##export VERSION=2.47.1
##export VERSIONDATE=20210418
##export VERSION=2.47.2
##export VERSIONDATE=20210527
##export VERSION=2.47.3
##export VERSIONDATE=20210620
##export VERSION=2.48.0
##export VERSIONDATE=20210718
##export VERSION=2.49.0
##export VERSIONDATE=20210829
##export VERSION=2.49.1
##export VERSIONDATE=20210923
##export VERSION=2.49.2
##export VERSIONDATE=20211017
##export VERSION=2.49.3
##export VERSIONDATE=20211023
#export VERSION=2.50.0
#export VERSIONDATE=20211205
#wl-showstatus --package-version
#export DEPENDENCIES=resil,libxpm,expat,gtk2,glib2,gettext,libiconv,libltdl,librsvg,zlib,fontconfig,freetype2,gts,pthreads,rxspencer
#export OPTIONALDEPENDENCIES=guile,pango,cairo,libgd,nsis,ann
#export BUILDDEPENDENCIES=cmake,ninja
#export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=epl-v10.txt
#export LICENSETYPE="Eclipse Public License"
#export DOWNLOADURL="https://gitlab.com/graphviz/graphviz/tags stable_release_"
##export DOWNLOADURL="https://graphviz.gitlab.io/_pages/Download/Download_source.html"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
##export DOWNLOADSOURCEURL=https://gitlab.com/graphviz/graphviz/-/archive/stable_release_$VERSION/graphviz-stable_release_$VERSION.tar.bz2
#export DOWNLOADSOURCEURL=https://gitlab.com/graphviz/graphviz/-/archive/$VERSION/graphviz-$VERSION.tar.bz2
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
##tar xfj $TARBALLDIR/$BASENAME/graphviz-stable_release_$VERSION.tar.bz2
##cd graphviz-stable_release_$VERSION
#tar xfj $TARBALLDIR/$BASENAME/graphviz-$VERSION.tar.bz2
#cd graphviz-$VERSION
##mkdir -p build_static build_shared &&
## wl-showstatus configure &&
## PKG_CONFIG= cmake.exe -Wno-dev -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DPYTHON_EXECUTABLE:PATH=$PYTHON/python.exe -S. -Bbuild_shared &&
## wl-showstatus configure &&
## PKG_CONFIG= cmake.exe -Wno-dev -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DPYTHON_EXECUTABLE:PATH=$PYTHON/python.exe -S. -Bbuild_shared &&
## #wl-showstatus build &&
## #make -Cbuild_static &&
## #wl-showstatus build &&
## #make -Cbuild_shared &&
## wl-showstatus build-install &&
## make -Cbuild_static install/strip &&
## wl-showstatus build-install &&
## make -Cbuild_shared install/strip &&
##    echo OK
## fix lib/common/utils.c (version >= 2.47.2)
#patch -ulbf lib/common/utils.c << EOF
#@@ -1910,3 +1910,5 @@
# #ifndef HAVE_DRAND48
#+#ifndef _WIN32
# #pragma weak drand48
#+#endif
# double drand48(void)
#EOF
## fix missing python3
#sed -i.bak -e "s/python3/python/" CMakeLists.txt
### fix building both static and shared libraries
##sed -i.bak -e "s/\(add_library(.*\) SHARED/\1/" lib/cdt/CMakeLists.txt lib/cgraph/CMakeLists.txt lib/gvc/CMakeLists.txt lib/pathplan/CMakeLists.txt lib/xdot/CMakeLists.txt
## fix detection using pkg-config
#sed -i.bak -e "s/if (WIN32)/if (MSVC)/" cmake/FindCairo.cmake cmake/FindPangoCairo.cmake
## fix building .dll files without lib suffix in lib/gvc/CMakeLists.txt (version >= 2.49.1)
#sed -i.bak -e "s/^target_include_directories(\([^ ]*\)/set_target_properties(\1 PROPERTIES PREFIX \"\")\n&/" lib/*/CMakeLists.txt plugin/*/CMakeLists.txt
##mkdir -p build_static build_shared &&
## wl-showstatus configure &&
## #PKG_CONFIG= cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DVERSION:STRING=$VERSION -DPYTHON_EXECUTABLE:PATH=$PYTHON/python.exe -S. -Bbuild_static &&
## #PKG_CONFIG= PATH=$PYDIR:$PATH cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DVERSION:STRING=$VERSION -DGLIBCONFIG_INCLUDE_DIR:PATH=$MINGWPREFIX/lib/glib-2.0/include -DGD_RUNTIME_LIBRARY:STRING=-lgd -DGLIB_RUNTIME_LIBRARY:STRING=-lglib-2.0 -DGOBJECT_RUNTIME_LIBRARY:STRING=-lgobject-2.0 -DPANGO_RUNTIME_LIBRARY:STRING=-lpango-1 -DPangoCairo_RUNTIME_LIBRARY:STRING=-lpangocairo-1.0 -DPANGOFT_RUNTIME_LIBRARY:STRING=-lpangoft2-1.0 -DPANGOWIN_RUNTIME_LIBRARY:STRING=-lpangowin32-1.0 -DCairo_RUNTIME_LIBRARY:STRING=-lcairo -DEXPAT_RUNTIME_LIBRARY:STRING=-lexpat -DFONTCONFIG_RUNTIME_LIBRARY:STRING=-lfontconfig -DPIXMAN_RUNTIME_LIBRARY:STRING=-lpixman-1 -DANN_RUNTIME_LIBRARY:STRING=-lANN -DCMAKE_C_FLAGS:STRING="-I$MINGWPREFIX/include/harfbuzz" -DCMAKE_CXX_FLAGS:STRING="-I$MINGWPREFIX/include/harfbuzz" -S. -Bbuild_static &&
## #PKG_CONFIG= PATH=$PYDIR:$PATH cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DVERSION:STRING=$VERSION -DGLIBCONFIG_INCLUDE_DIR:PATH=$MINGWPREFIX/lib/glib-2.0/include -DGD_RUNTIME_LIBRARY:STRING=-lgd -DGLIB_RUNTIME_LIBRARY:STRING=-lglib-2.0 -DGOBJECT_RUNTIME_LIBRARY:STRING=-lgobject-2.0 -DPANGO_RUNTIME_LIBRARY:STRING=-lpango-1 -DPangoCairo_RUNTIME_LIBRARY:STRING=-lpangocairo-1.0 -DPANGOFT_RUNTIME_LIBRARY:STRING=-lpangoft2-1.0 -DPANGOWIN_RUNTIME_LIBRARY:STRING=-lpangowin32-1.0 -DCairo_RUNTIME_LIBRARY:STRING=-lcairo -DEXPAT_RUNTIME_LIBRARY:STRING=-lexpat -DFONTCONFIG_RUNTIME_LIBRARY:STRING=-lfontconfig -DPIXMAN_RUNTIME_LIBRARY:STRING=-lpixman-1 -DANN_RUNTIME_LIBRARY:STRING=-lANN -DCMAKE_C_FLAGS:STRING="-I$MINGWPREFIX/include/harfbuzz" -DCMAKE_CXX_FLAGS:STRING="-I$MINGWPREFIX/include/harfbuzz" -DCMAKE_SHARED_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition" -S. -Bbuild_static &&
## PATH=$PYDIR:$PATH cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DVERSION:STRING=$VERSION -DANN_RUNTIME_LIBRARY:STRING=-lANN -DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) -DCMAKE_SHARED_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition" -S. -Bbuild_static &&
## #PKG_CONFIG= PATH=$PYDIR:$PATH cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DVERSION:STRING=$VERSION -DGLIBCONFIG_INCLUDE_DIR:PATH=$MINGWPREFIX/lib/glib-2.0/include -DGD_RUNTIME_LIBRARY:STRING=-lgd -DGLIB_RUNTIME_LIBRARY:STRING=-lglib-2.0 -DGOBJECT_RUNTIME_LIBRARY:STRING=-lgobject-2.0 -DPANGO_RUNTIME_LIBRARY:STRING=-lpango-1 -DPangoCairo_RUNTIME_LIBRARY:STRING=-lpangocairo-1.0 -DPANGOFT_RUNTIME_LIBRARY:STRING=-lpangoft2-1.0 -DPANGOWIN_RUNTIME_LIBRARY:STRING=-lpangowin32-1.0 -DCairo_RUNTIME_LIBRARY:STRING=-lcairo -DEXPAT_RUNTIME_LIBRARY:STRING=-lexpat -DFONTCONFIG_RUNTIME_LIBRARY:STRING=-lfontconfig -DPIXMAN_RUNTIME_LIBRARY:STRING=-lpixman-1 -DANN_RUNTIME_LIBRARY:STRING=-lANN -DCMAKE_C_FLAGS:STRING="-I$MINGWPREFIX/include/libdl-win32 -I$MINGWPREFIX/include/harfbuzz" -DCMAKE_CXX_FLAGS:STRING="-I$MINGWPREFIX/include/libdl-win32 -I$MINGWPREFIX/include/harfbuzz" -DCMAKE_SHARED_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition" -S. -Bbuild_static &&
## #PKG_CONFIG= PATH=$PYDIR:$PATH cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DVERSION:STRING=$VERSION -Denable_ltdl:BOOL=OFF -DGLIBCONFIG_INCLUDE_DIR:PATH=$MINGWPREFIX/lib/glib-2.0/include -DGD_RUNTIME_LIBRARY:STRING=-lgd -DGLIB_RUNTIME_LIBRARY:STRING=-lglib-2.0 -DGOBJECT_RUNTIME_LIBRARY:STRING=-lgobject-2.0 -DPANGO_RUNTIME_LIBRARY:STRING=-lpango-1 -DPangoCairo_RUNTIME_LIBRARY:STRING=-lpangocairo-1.0 -DPANGOFT_RUNTIME_LIBRARY:STRING=-lpangoft2-1.0 -DPANGOWIN_RUNTIME_LIBRARY:STRING=-lpangowin32-1.0 -DCairo_RUNTIME_LIBRARY:STRING=-lcairo -DEXPAT_RUNTIME_LIBRARY:STRING=-lexpat -DFONTCONFIG_RUNTIME_LIBRARY:STRING=-lfontconfig -DPIXMAN_RUNTIME_LIBRARY:STRING=-lpixman-1 -DANN_RUNTIME_LIBRARY:STRING=-lANN -DCMAKE_C_FLAGS:STRING="-I$MINGWPREFIX/include/libdl-win32 -I$MINGWPREFIX/include/harfbuzz" -DCMAKE_CXX_FLAGS:STRING="-I$MINGWPREFIX/include/libdl-win32 -I$MINGWPREFIX/include/harfbuzz" -DCMAKE_SHARED_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition" -S. -Bbuild_static &&
## wl-showstatus configure &&
## #PKG_CONFIG= cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DVERSION:STRING=$VERSION -DPYTHON_EXECUTABLE:PATH=$PYTHON/python.exe -S. -Bbuild_shared &&
## #PKG_CONFIG= PATH=$PYDIR:$PATH cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DVERSION:STRING=$VERSION -DGLIBCONFIG_INCLUDE_DIR:PATH=$MINGWPREFIX/lib/glib-2.0/include -DGD_RUNTIME_LIBRARY:STRING=-lgd -DGLIB_RUNTIME_LIBRARY:STRING=-lglib-2.0 -DGOBJECT_RUNTIME_LIBRARY:STRING=-lgobject-2.0 -DPANGO_RUNTIME_LIBRARY:STRING=-lpango-1 -DPangoCairo_RUNTIME_LIBRARY:STRING=-lpangocairo-1.0 -DPANGOFT_RUNTIME_LIBRARY:STRING=-lpangoft2-1.0 -DPANGOWIN_RUNTIME_LIBRARY:STRING=-lpangowin32-1.0 -DCairo_RUNTIME_LIBRARY:STRING=-lcairo -DEXPAT_RUNTIME_LIBRARY:STRING=-lexpat -DFONTCONFIG_RUNTIME_LIBRARY:STRING=-lfontconfig -DPIXMAN_RUNTIME_LIBRARY:STRING=-lpixman-1 -DANN_RUNTIME_LIBRARY:STRING=-lANN -DCMAKE_C_FLAGS:STRING="-I$MINGWPREFIX/include/harfbuzz" -DCMAKE_CXX_FLAGS:STRING="-I$MINGWPREFIX/include/harfbuzz" -S. -Bbuild_shared &&
## #PKG_CONFIG= PATH=$PYDIR:$PATH cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DVERSION:STRING=$VERSION -DGLIBCONFIG_INCLUDE_DIR:PATH=$MINGWPREFIX/lib/glib-2.0/include -DGD_RUNTIME_LIBRARY:STRING=-lgd -DGLIB_RUNTIME_LIBRARY:STRING=-lglib-2.0 -DGOBJECT_RUNTIME_LIBRARY:STRING=-lgobject-2.0 -DPANGO_RUNTIME_LIBRARY:STRING=-lpango-1 -DPangoCairo_RUNTIME_LIBRARY:STRING=-lpangocairo-1.0 -DPANGOFT_RUNTIME_LIBRARY:STRING=-lpangoft2-1.0 -DPANGOWIN_RUNTIME_LIBRARY:STRING=-lpangowin32-1.0 -DCairo_RUNTIME_LIBRARY:STRING=-lcairo -DEXPAT_RUNTIME_LIBRARY:STRING=-lexpat -DFONTCONFIG_RUNTIME_LIBRARY:STRING=-lfontconfig -DPIXMAN_RUNTIME_LIBRARY:STRING=-lpixman-1 -DANN_RUNTIME_LIBRARY:STRING=-lANN -DCMAKE_C_FLAGS:STRING="-I$MINGWPREFIX/include/harfbuzz" -DCMAKE_CXX_FLAGS:STRING="-I$MINGWPREFIX/include/harfbuzz" -DCMAKE_SHARED_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition" -S. -Bbuild_shared &&
## PATH=$PYDIR:$PATH cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DVERSION:STRING=$VERSION -DANN_RUNTIME_LIBRARY:STRING=-lANN -DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) -DCMAKE_SHARED_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition" -S. -Bbuild_shared &&
## #PKG_CONFIG= PATH=$PYDIR:$PATH cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DVERSION:STRING=$VERSION -DGLIBCONFIG_INCLUDE_DIR:PATH=$MINGWPREFIX/lib/glib-2.0/include -DGD_RUNTIME_LIBRARY:STRING=-lgd -DGLIB_RUNTIME_LIBRARY:STRING=-lglib-2.0 -DGOBJECT_RUNTIME_LIBRARY:STRING=-lgobject-2.0 -DPANGO_RUNTIME_LIBRARY:STRING=-lpango-1 -DPangoCairo_RUNTIME_LIBRARY:STRING=-lpangocairo-1.0 -DPANGOFT_RUNTIME_LIBRARY:STRING=-lpangoft2-1.0 -DPANGOWIN_RUNTIME_LIBRARY:STRING=-lpangowin32-1.0 -DCairo_RUNTIME_LIBRARY:STRING=-lcairo -DEXPAT_RUNTIME_LIBRARY:STRING=-lexpat -DFONTCONFIG_RUNTIME_LIBRARY:STRING=-lfontconfig -DPIXMAN_RUNTIME_LIBRARY:STRING=-lpixman-1 -DANN_RUNTIME_LIBRARY:STRING=-lANN -DCMAKE_C_FLAGS:STRING="-I$MINGWPREFIX/include/libdl-win32 -I$MINGWPREFIX/include/harfbuzz" -DCMAKE_CXX_FLAGS:STRING="-I$MINGWPREFIX/include/libdl-win32 -I$MINGWPREFIX/include/harfbuzz" -DCMAKE_SHARED_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition" -S. -Bbuild_shared &&
## #PKG_CONFIG= PATH=$PYDIR:$PATH cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DVERSION:STRING=$VERSION -Denable_ltdl:BOOL=OFF -DGLIBCONFIG_INCLUDE_DIR:PATH=$MINGWPREFIX/lib/glib-2.0/include -DGD_RUNTIME_LIBRARY:STRING=-lgd -DGLIB_RUNTIME_LIBRARY:STRING=-lglib-2.0 -DGOBJECT_RUNTIME_LIBRARY:STRING=-lgobject-2.0 -DPANGO_RUNTIME_LIBRARY:STRING=-lpango-1 -DPangoCairo_RUNTIME_LIBRARY:STRING=-lpangocairo-1.0 -DPANGOFT_RUNTIME_LIBRARY:STRING=-lpangoft2-1.0 -DPANGOWIN_RUNTIME_LIBRARY:STRING=-lpangowin32-1.0 -DCairo_RUNTIME_LIBRARY:STRING=-lcairo -DEXPAT_RUNTIME_LIBRARY:STRING=-lexpat -DFONTCONFIG_RUNTIME_LIBRARY:STRING=-lfontconfig -DPIXMAN_RUNTIME_LIBRARY:STRING=-lpixman-1 -DANN_RUNTIME_LIBRARY:STRING=-lANN -DCMAKE_C_FLAGS:STRING="-I$MINGWPREFIX/include/libdl-win32 -I$MINGWPREFIX/include/harfbuzz" -DCMAKE_CXX_FLAGS:STRING="-I$MINGWPREFIX/include/libdl-win32 -I$MINGWPREFIX/include/harfbuzz" -DCMAKE_SHARED_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition" -S. -Bbuild_shared &&
## ##-DGVDLL
## #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*-ladvapi32/& -Wl,--as-needed -lltdl/" build_shared/build.ninja &&
## #wl-showstatus build &&
## #ninja -Cbuild_static &&
## #wl-showstatus build &&
## #ninja -Cbuild_shared &&
## wl-showstatus build-install &&
## ninja -Cbuild_static install/strip &&
## wl-showstatus build-install &&
## ninja -Cbuild_shared install/strip &&
## rm -f $INSTALLPREFIX/bin/libgd.dll &&
#mkdir -p build_win &&
# wl-showstatus configure &&
# #PKG_CONFIG= cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DVERSION:STRING=$VERSION -DPYTHON_EXECUTABLE:PATH=$PYTHON/python.exe -S. -Bbuild_win &&
# #PKG_CONFIG= PATH=$PYDIR:$PATH cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DVERSION:STRING=$VERSION -DGLIBCONFIG_INCLUDE_DIR:PATH=$MINGWPREFIX/lib/glib-2.0/include -DGD_RUNTIME_LIBRARY:STRING=-lgd -DGLIB_RUNTIME_LIBRARY:STRING=-lglib-2.0 -DGOBJECT_RUNTIME_LIBRARY:STRING=-lgobject-2.0 -DPANGO_RUNTIME_LIBRARY:STRING=-lpango-1 -DPangoCairo_RUNTIME_LIBRARY:STRING=-lpangocairo-1.0 -DPANGOFT_RUNTIME_LIBRARY:STRING=-lpangoft2-1.0 -DPANGOWIN_RUNTIME_LIBRARY:STRING=-lpangowin32-1.0 -DCairo_RUNTIME_LIBRARY:STRING=-lcairo -DEXPAT_RUNTIME_LIBRARY:STRING=-lexpat -DFONTCONFIG_RUNTIME_LIBRARY:STRING=-lfontconfig -DPIXMAN_RUNTIME_LIBRARY:STRING=-lpixman-1 -DANN_RUNTIME_LIBRARY:STRING=-lANN -DCMAKE_C_FLAGS:STRING="-I$MINGWPREFIX/include/harfbuzz" -DCMAKE_CXX_FLAGS:STRING="-I$MINGWPREFIX/include/harfbuzz" -S. -Bbuild_win &&
# #PKG_CONFIG= PATH=$PYDIR:$PATH cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DVERSION:STRING=$VERSION -DGLIBCONFIG_INCLUDE_DIR:PATH=$MINGWPREFIX/lib/glib-2.0/include -DGD_RUNTIME_LIBRARY:STRING=-lgd -DGLIB_RUNTIME_LIBRARY:STRING=-lglib-2.0 -DGOBJECT_RUNTIME_LIBRARY:STRING=-lgobject-2.0 -DPANGO_RUNTIME_LIBRARY:STRING=-lpango-1 -DPangoCairo_RUNTIME_LIBRARY:STRING=-lpangocairo-1.0 -DPANGOFT_RUNTIME_LIBRARY:STRING=-lpangoft2-1.0 -DPANGOWIN_RUNTIME_LIBRARY:STRING=-lpangowin32-1.0 -DCairo_RUNTIME_LIBRARY:STRING=-lcairo -DEXPAT_RUNTIME_LIBRARY:STRING=-lexpat -DFONTCONFIG_RUNTIME_LIBRARY:STRING=-lfontconfig -DPIXMAN_RUNTIME_LIBRARY:STRING=-lpixman-1 -DANN_RUNTIME_LIBRARY:STRING=-lANN -DCMAKE_C_FLAGS:STRING="-I$MINGWPREFIX/include/harfbuzz" -DCMAKE_CXX_FLAGS:STRING="-I$MINGWPREFIX/include/harfbuzz" -DCMAKE_SHARED_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition" -S. -Bbuild_win &&
# PATH=$PYDIR:$PATH cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DVERSION:STRING=$VERSION -DANN_RUNTIME_LIBRARY:STRING=-lANN -DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) -DCMAKE_SHARED_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition" -S. -Bbuild_win &&
# #PKG_CONFIG= PATH=$PYDIR:$PATH cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DVERSION:STRING=$VERSION -DGLIBCONFIG_INCLUDE_DIR:PATH=$MINGWPREFIX/lib/glib-2.0/include -DGD_RUNTIME_LIBRARY:STRING=-lgd -DGLIB_RUNTIME_LIBRARY:STRING=-lglib-2.0 -DGOBJECT_RUNTIME_LIBRARY:STRING=-lgobject-2.0 -DPANGO_RUNTIME_LIBRARY:STRING=-lpango-1 -DPangoCairo_RUNTIME_LIBRARY:STRING=-lpangocairo-1.0 -DPANGOFT_RUNTIME_LIBRARY:STRING=-lpangoft2-1.0 -DPANGOWIN_RUNTIME_LIBRARY:STRING=-lpangowin32-1.0 -DCairo_RUNTIME_LIBRARY:STRING=-lcairo -DEXPAT_RUNTIME_LIBRARY:STRING=-lexpat -DFONTCONFIG_RUNTIME_LIBRARY:STRING=-lfontconfig -DPIXMAN_RUNTIME_LIBRARY:STRING=-lpixman-1 -DANN_RUNTIME_LIBRARY:STRING=-lANN -DCMAKE_C_FLAGS:STRING="-I$MINGWPREFIX/include/libdl-win32 -I$MINGWPREFIX/include/harfbuzz" -DCMAKE_CXX_FLAGS:STRING="-I$MINGWPREFIX/include/libdl-win32 -I$MINGWPREFIX/include/harfbuzz" -DCMAKE_SHARED_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition" -S. -Bbuild_win &&
# #PKG_CONFIG= PATH=$PYDIR:$PATH cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DVERSION:STRING=$VERSION -Denable_ltdl:BOOL=OFF -DGLIBCONFIG_INCLUDE_DIR:PATH=$MINGWPREFIX/lib/glib-2.0/include -DGD_RUNTIME_LIBRARY:STRING=-lgd -DGLIB_RUNTIME_LIBRARY:STRING=-lglib-2.0 -DGOBJECT_RUNTIME_LIBRARY:STRING=-lgobject-2.0 -DPANGO_RUNTIME_LIBRARY:STRING=-lpango-1 -DPangoCairo_RUNTIME_LIBRARY:STRING=-lpangocairo-1.0 -DPANGOFT_RUNTIME_LIBRARY:STRING=-lpangoft2-1.0 -DPANGOWIN_RUNTIME_LIBRARY:STRING=-lpangowin32-1.0 -DCairo_RUNTIME_LIBRARY:STRING=-lcairo -DEXPAT_RUNTIME_LIBRARY:STRING=-lexpat -DFONTCONFIG_RUNTIME_LIBRARY:STRING=-lfontconfig -DPIXMAN_RUNTIME_LIBRARY:STRING=-lpixman-1 -DANN_RUNTIME_LIBRARY:STRING=-lANN -DCMAKE_C_FLAGS:STRING="-I$MINGWPREFIX/include/libdl-win32 -I$MINGWPREFIX/include/harfbuzz" -DCMAKE_CXX_FLAGS:STRING="-I$MINGWPREFIX/include/libdl-win32 -I$MINGWPREFIX/include/harfbuzz" -DCMAKE_SHARED_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition" -S. -Bbuild_win &&
# wl-showstatus build-install &&
# ninja -Cbuild_win install/strip &&
# rm -f $INSTALLPREFIX/bin/libgd.dll &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf graphviz-$VERSION



#export NAME="Graphviz"
#export STATUS=
#export URL=http://www.graphviz.org/
#export BASENAME=graphviz
#export DESCRIPTION="Graph visualization is a way of representing structural information as diagrams of abstract graphs and networks. Automatic graph drawing has many important applications in software engineering, database and web design, networking, and in visual interfaces for many other domains."
#export CATEGORY=graphics
#export TYPE=library
#export VERSION=3.0.0
#export VERSIONDATE=20220227
##export VERSION=4.0.0
##export VERSIONDATE=20220529
##export VERSION=5.0.0
##export VERSIONDATE=20220708
##export VERSION=5.0.1
##export VERSIONDATE=20220821
##export VERSION=6.0.1
##export VERSIONDATE=20220912
##export VERSION=6.0.2
##export VERSIONDATE=20221012
##export VERSION=7.0.0
##export VERSIONDATE=20221023
##export VERSION=7.0.1
##export VERSIONDATE=20221110
##export VERSION=7.0.2
##export VERSIONDATE=20221119
##export VERSION=7.0.3
##export VERSIONDATE=20221126
##export VERSION=7.0.4
##export VERSIONDATE=20221204
##export VERSION=7.0.5
##export VERSIONDATE=20221224
#wl-showstatus --package-version
#export DEPENDENCIES=resil,libxpm,expat,gtk2,glib2,gettext,libiconv,libltdl,librsvg,zlib,fontconfig,freetype2,gts,pthreads,rxspencer
#export OPTIONALDEPENDENCIES=guile,pango,cairo,libgd,nsis,ann
#export BUILDDEPENDENCIES=cmake,ninja
#export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=epl-v10.txt
#export LICENSETYPE="Eclipse Public License"
#export DOWNLOADURL="https://gitlab.com/graphviz/graphviz/tags stable_release_"
##export DOWNLOADURL="https://graphviz.gitlab.io/_pages/Download/Download_source.html"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
##export DOWNLOADSOURCEURL=https://gitlab.com/graphviz/graphviz/-/archive/stable_release_$VERSION/graphviz-stable_release_$VERSION.tar.bz2
#export DOWNLOADSOURCEURL=https://gitlab.com/graphviz/graphviz/-/archive/$VERSION/graphviz-$VERSION.tar.bz2
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
##tar xfj $TARBALLDIR/$BASENAME/graphviz-stable_release_$VERSION.tar.bz2
##cd graphviz-stable_release_$VERSION
#tar xfj $TARBALLDIR/$BASENAME/graphviz-$VERSION.tar.bz2
#cd graphviz-$VERSION
## avoid deprecated gdlib-config in cmake/FindGD.cmake (version >= 3.0.0)
## fix cmake/FindGD.cmake (version >= 3.0.0)
#patch -ulbf cmake/FindGD.cmake << EOF
#@@ -21,3 +21,3 @@
# find_program(GDLIB_CONFIG gdlib-config)
#-if(GDLIB_CONFIG)
#+if(FALSE)
#   message(STATUS "Found gdlib-config: \${GDLIB_CONFIG}")
#@@ -51,3 +51,8 @@
# else()
#-  message(WARNING "gdlib-config not found; skipping feature checks")
#+set(HAVE_GD_PNG 1)
#+set(HAVE_GD_JPEG 1)
#+set(HAVE_GD_XPM 1)
#+set(HAVE_GD_FONTCONFIG 1)
#+set(HAVE_GD_FREETYPE 1)
#+set(HAVE_GD_GIF 1)
# endif()
#EOF
### skip building unsupported plugins (version >= 4.0.0)
##sed -i.bak -e "s/^add_subdirectory(\(xlib\|devil\))/#&/g" plugin/CMakeLists.txt
### skip building unsupported plugins (version >= 7.0.5)
##sed -i.bak -e "s/^add_subdirectory(\(lasi\|xlib\|devil\))/#&/g" plugin/CMakeLists.txt
##sed -i.bak -e "s/^target_link_libraries(dot_builtins PRIVATE gvplugin_lasi)/#&/g" cmd/dot/CMakeLists.txt
#mkdir -p build_win &&
# wl-showstatus configure &&
# PATH=$PYDIR:$PATH cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -Dwith_cxx_api:BOOL=ON -DANN_RUNTIME_LIBRARY:STRING=-lANN -Dwith_cxx_tests:BOOL=OFF -DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) -S. -Bbuild_win &&
# #PATH=$PYDIR:$PATH cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -Dwith_cxx_api:BOOL=ON -DANN_RUNTIME_LIBRARY:STRING=-lANN -Dwith_cxx_tests:BOOL=OFF -DBUILD_TESTING:BOOL=OFF -DCMAKE_C_FLAGS:STRING:STRING="-I$MINGWPREFIX/include/cairo" -DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) -S. -Bbuild_win &&
# #PATH=$PYDIR:$PATH cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DVERSION:STRING=$VERSION -DANN_RUNTIME_LIBRARY:STRING=-lANN -DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) -S. -Bbuild_win &&
# #PKG_CONFIG= PATH=$PYDIR:$PATH cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DVERSION:STRING=$VERSION -DGLIBCONFIG_INCLUDE_DIR:PATH=$MINGWPREFIX/lib/glib-2.0/include -DGD_RUNTIME_LIBRARY:STRING=-lgd -DGLIB_RUNTIME_LIBRARY:STRING=-lglib-2.0 -DGOBJECT_RUNTIME_LIBRARY:STRING=-lgobject-2.0 -DPANGO_RUNTIME_LIBRARY:STRING=-lpango-1 -DPangoCairo_RUNTIME_LIBRARY:STRING=-lpangocairo-1.0 -DPANGOFT_RUNTIME_LIBRARY:STRING=-lpangoft2-1.0 -DPANGOWIN_RUNTIME_LIBRARY:STRING=-lpangowin32-1.0 -DCairo_RUNTIME_LIBRARY:STRING=-lcairo -DEXPAT_RUNTIME_LIBRARY:STRING=-lexpat -DFONTCONFIG_RUNTIME_LIBRARY:STRING=-lfontconfig -DPIXMAN_RUNTIME_LIBRARY:STRING=-lpixman-1 -DANN_RUNTIME_LIBRARY:STRING=-lANN -DCMAKE_C_FLAGS:STRING="-I$MINGWPREFIX/include/libdl-win32 -I$MINGWPREFIX/include/harfbuzz" -DCMAKE_CXX_FLAGS:STRING="-I$MINGWPREFIX/include/libdl-win32 -I$MINGWPREFIX/include/harfbuzz" -DCMAKE_SHARED_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition" -S. -Bbuild_win &&
# #PKG_CONFIG= PATH=$PYDIR:$PATH cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DVERSION:STRING=$VERSION -Denable_ltdl:BOOL=OFF -DGLIBCONFIG_INCLUDE_DIR:PATH=$MINGWPREFIX/lib/glib-2.0/include -DGD_RUNTIME_LIBRARY:STRING=-lgd -DGLIB_RUNTIME_LIBRARY:STRING=-lglib-2.0 -DGOBJECT_RUNTIME_LIBRARY:STRING=-lgobject-2.0 -DPANGO_RUNTIME_LIBRARY:STRING=-lpango-1 -DPangoCairo_RUNTIME_LIBRARY:STRING=-lpangocairo-1.0 -DPANGOFT_RUNTIME_LIBRARY:STRING=-lpangoft2-1.0 -DPANGOWIN_RUNTIME_LIBRARY:STRING=-lpangowin32-1.0 -DCairo_RUNTIME_LIBRARY:STRING=-lcairo -DEXPAT_RUNTIME_LIBRARY:STRING=-lexpat -DFONTCONFIG_RUNTIME_LIBRARY:STRING=-lfontconfig -DPIXMAN_RUNTIME_LIBRARY:STRING=-lpixman-1 -DANN_RUNTIME_LIBRARY:STRING=-lANN -DCMAKE_C_FLAGS:STRING="-I$(cygpath -m $MINGWPREFIX/include/libdl-win32) -I$(cygpath -m $MINGWPREFIX/include/harfbuzz) -I$(cygpath -m $MINGWPREFIX/include/cairo)" -DCMAKE_CXX_FLAGS:STRING="-I$MINGWPREFIX/include/libdl-win32 -I$MINGWPREFIX/include/harfbuzz" -DCMAKE_SHARED_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition" -S. -Bbuild_win &&
# #PATH=$PYDIR:$MINGWPREFIX/qt/bin:$PATH QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DVERSION:STRING=$VERSION -Denable_ltdl:BOOL=OFF -DGLIBCONFIG_INCLUDE_DIR:PATH=$MINGWPREFIX/lib/glib-2.0/include -DGD_RUNTIME_LIBRARY:STRING=-lgd -DGLIB_RUNTIME_LIBRARY:STRING=-lglib-2.0 -DGOBJECT_RUNTIME_LIBRARY:STRING=-lgobject-2.0 -DPANGO_RUNTIME_LIBRARY:STRING=-lpango-1 -DPangoCairo_RUNTIME_LIBRARY:STRING=-lpangocairo-1.0 -DPANGOFT_RUNTIME_LIBRARY:STRING=-lpangoft2-1.0 -DPANGOWIN_RUNTIME_LIBRARY:STRING=-lpangowin32-1.0 -DCairo_RUNTIME_LIBRARY:STRING=-lcairo -DEXPAT_RUNTIME_LIBRARY:STRING=-lexpat -DFONTCONFIG_RUNTIME_LIBRARY:STRING=-lfontconfig -DPIXMAN_RUNTIME_LIBRARY:STRING=-lpixman-1 -DANN_RUNTIME_LIBRARY:STRING=-lANN -Dwith_gvedit:BOOL=OFF -Duse_win_pre_inst_libs:BOOL=OFF -DBUILD_TESTING:BOOL=OFF -DCMAKE_C_FLAGS:STRING="-I$(cygpath -m $MINGWPREFIX/include/libdl-win32) -I$(cygpath -m $MINGWPREFIX/include/harfbuzz) -I$(cygpath -m $MINGWPREFIX/include/cairo)" -DCMAKE_CXX_FLAGS:STRING="-I$MINGWPREFIX/include/libdl-win32 -I$MINGWPREFIX/include/harfbuzz" -DCMAKE_SHARED_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition" -S. -Bbuild_win &&
# #PATH=$PYDIR:$MINGWPREFIX/qt/bin:$PATH QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DVERSION:STRING=$VERSION -Denable_ltdl:BOOL=OFF -DGLIBCONFIG_INCLUDE_DIR:PATH=$MINGWPREFIX/lib/glib-2.0/include -DGD_RUNTIME_LIBRARY:STRING=-lgd -DGLIB_RUNTIME_LIBRARY:STRING=-lglib-2.0 -DGOBJECT_RUNTIME_LIBRARY:STRING=-lgobject-2.0 -DPANGO_RUNTIME_LIBRARY:STRING=-lpango-1 -DPangoCairo_RUNTIME_LIBRARY:STRING=-lpangocairo-1.0 -DPANGOFT_RUNTIME_LIBRARY:STRING=-lpangoft2-1.0 -DPANGOWIN_RUNTIME_LIBRARY:STRING=-lpangowin32-1.0 -DCairo_RUNTIME_LIBRARY:STRING=-lcairo -DEXPAT_RUNTIME_LIBRARY:STRING=-lexpat -DFONTCONFIG_RUNTIME_LIBRARY:STRING=-lfontconfig -DPIXMAN_RUNTIME_LIBRARY:STRING=-lpixman-1 -DANN_RUNTIME_LIBRARY:STRING=-lANN -Dwith_gvedit:BOOL=OFF -Duse_win_pre_inst_libs:BOOL=ON -Dinstall_win_dependency_dlls:BOOL=OFF -DBUILD_TESTING:BOOL=OFF -DCMAKE_C_FLAGS:STRING="-I$(cygpath -m $MINGWPREFIX/include/libdl-win32) -I$(cygpath -m $MINGWPREFIX/include/harfbuzz) -I$(cygpath -m $MINGWPREFIX/include/cairo)" -DCMAKE_CXX_FLAGS:STRING="-I$MINGWPREFIX/include/libdl-win32 -I$MINGWPREFIX/include/harfbuzz" -DCMAKE_SHARED_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition" -S. -Bbuild_win &&
# ##-Dwith_cxx_api:BOOL=ON 
# ##-DGDLIB_CONFIG:FILEPATH="$(which pkg-config.exe) libgd" 
# # fix missing wind (version >= 3.0.0)
# sed -i.bak -e "s?LINK_LIBRARIES = lib/gvc/libgvc\.dll\.a *[^ ]*/libgd\.dll\.a *lib/cgraph/libcgraph\.dll\.a *lib/cdt/libcdt\.dll\.a *[^ ]*/libltdl\.dll\.a?& lib/pathplan/libpathplan.dll.a?" build_win/build.ninja &&
# ## fix missing link libraries (version >= 7.0.0)
# #sed -i.bak2 -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lilu/" build_win/build.ninja &&
# #sed -i.bak3 -e "s?^\s*LINK_LIBRARIES\s*=\s*-lLASi\s.*?& -L$PWD/build_win/lib/gvc -lgvc?" build_win/build.ninja &&
# wl-showstatus build-install &&
# ninja -Cbuild_win install/strip &&
# # don't install DLL files that are not part of this library (version < 4.0.0)
# for F in $INSTALLPREFIX/bin/*.dll; do
#  if [ $(find build_win -name $(basename $F) | wc -l) -eq 0 ]; then
#   rm -f $F
#  fi
# done &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf graphviz-$VERSION
#####TO DO: use shared ANN



export NAME="Graphviz"
export STATUS=
export URL=http://www.graphviz.org/
export BASENAME=graphviz
export DESCRIPTION="Graph visualization is a way of representing structural information as diagrams of abstract graphs and networks. Automatic graph drawing has many important applications in software engineering, database and web design, networking, and in visual interfaces for many other domains."
export CATEGORY=graphics
export VERSION=7.0.5
export VERSIONDATE=20221224
wl-showstatus --package-version
#export DEPENDENCIES=resil,libxpm,expat,gtk2,glib2,gettext,libiconv,libltdl,librsvg,zlib,fontconfig,freetype2,gts,pthreads,rxspencer
export DEPENDENCIES=libdl,libltdl,glib2,libgd,pango,cairo,zlib,expat,fontconfig,harfbuzz,gdk-pixbuf,poppler,librsvg,libwebp,gts
export OPTIONALDEPENDENCIES=nsis,ann,liblasi
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=epl-v10.txt
export LICENSETYPE="Eclipse Public License"
#export DOWNLOADURL="https://graphviz.gitlab.io/_pages/Download/Download_source.html"
export DOWNLOADURL="https://gitlab.com/graphviz/graphviz/-/tags"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://gitlab.com/graphviz/graphviz/-/archive/$VERSION/$BASENAME-$VERSION.tar.bz2
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
tar xfj $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.bz2
cd $BASENAME-$VERSION
# avoid deprecated gdlib-config in cmake/FindGD.cmake (version >= 3.0.0)
# fix cmake/FindGD.cmake (version >= 3.0.0)
patch -ulbf cmake/FindGD.cmake << EOF
@@ -21,3 +21,3 @@
 find_program(GDLIB_CONFIG gdlib-config)
-if(GDLIB_CONFIG)
+if(FALSE)
   message(STATUS "Found gdlib-config: \${GDLIB_CONFIG}")
@@ -51,3 +51,8 @@
 else()
-  message(WARNING "gdlib-config not found; skipping feature checks")
+set(HAVE_GD_PNG 1)
+set(HAVE_GD_JPEG 1)
+set(HAVE_GD_XPM 1)
+set(HAVE_GD_FONTCONFIG 1)
+set(HAVE_GD_FREETYPE 1)
+set(HAVE_GD_GIF 1)
 endif()
EOF
# skip building unsupported plugins (version >= 7.0.5)
sed -i.bak -e "s/^add_subdirectory(\(lasi\|xlib\|devil\))/#&/g" plugin/CMakeLists.txt
sed -i.bak -e "s/target_link_libraries(dot_builtins PRIVATE gvplugin_lasi)/#&/g" cmd/dot/CMakeLists.txt
mkdir -p build_win &&
 wl-showstatus configure &&
 #PATH=$PYDIR:$MINGWPREFIX/qt/bin:$PATH QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DVERSION:STRING=$VERSION -Denable_ltdl:BOOL=OFF -DGLIBCONFIG_INCLUDE_DIR:PATH=$MINGWPREFIX/lib/glib-2.0/include -DGD_RUNTIME_LIBRARY:STRING=-lgd -DGLIB_RUNTIME_LIBRARY:STRING=-lglib-2.0 -DGOBJECT_RUNTIME_LIBRARY:STRING=-lgobject-2.0 -DPANGO_RUNTIME_LIBRARY:STRING=-lpango-1 -DPANGOFT_RUNTIME_LIBRARY:STRING=-lpangoft2-1.0 -DPANGOWIN_RUNTIME_LIBRARY:STRING=-lpangowin32-1.0 -DEXPAT_RUNTIME_LIBRARY:STRING=-lexpat -DFONTCONFIG_RUNTIME_LIBRARY:STRING=-lfontconfig -DPIXMAN_RUNTIME_LIBRARY:STRING=-lpixman-1 -DANN_RUNTIME_LIBRARY:STRING=-lANN -Dwith_gvedit:BOOL=OFF -Duse_win_pre_inst_libs:BOOL=ON -Dinstall_win_dependency_dlls:BOOL=OFF -DBUILD_TESTING:BOOL=OFF -DCMAKE_C_FLAGS:STRING="-I$(cygpath -m $MINGWPREFIX/include/libdl-win32) -I$(cygpath -m $MINGWPREFIX/include/harfbuzz) -I$(cygpath -m $MINGWPREFIX/include/cairo)" -DCMAKE_CXX_FLAGS:STRING="-I$MINGWPREFIX/include/libdl-win32 -I$MINGWPREFIX/include/harfbuzz" -DCMAKE_SHARED_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition" -S. -Bbuild_win &&
 PATH=$PYDIR:$MINGWPREFIX/qt/bin:$PATH QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DVERSION:STRING=$VERSION -Denable_ltdl:BOOL=ON -Dwith_gvedit:BOOL=OFF -DGLIBCONFIG_INCLUDE_DIR:PATH=$MINGWPREFIX/lib/glib-2.0/include -DANN_RUNTIME_LIBRARY:STRING=-lANN -Duse_win_pre_inst_libs:BOOL=ON -Dinstall_win_dependency_dlls:BOOL=OFF -DBUILD_TESTING:BOOL=OFF -DCMAKE_C_FLAGS:STRING="-I$(cygpath -m $MINGWPREFIX/include/libdl-win32) -I$(cygpath -m $MINGWPREFIX/include/harfbuzz) -I$(cygpath -m $MINGWPREFIX/include/cairo)" -DCMAKE_CXX_FLAGS:STRING="-I$MINGWPREFIX/include/libdl-win32 -I$MINGWPREFIX/include/harfbuzz" -S. -Bbuild_win &&
 ##-Dwith_cxx_api:BOOL=ON 
 ##-DGDLIB_CONFIG:FILEPATH="$(which pkg-config.exe) libgd" 
 ##GS_RUNTIME_LIBRARY GTK2_GDKCONFIG_INCLUDE_DIR GTK2_GLIBCONFIG_INCLUDE_DIR
 # fix missing wind (version >= 3.0.0)
 sed -i.bak -e "s?LINK_LIBRARIES = lib/gvc/libgvc\.dll\.a *[^ ]*/libgd\.dll\.a *lib/cgraph/libcgraph\.dll\.a *lib/cdt/libcdt\.dll\.a *[^ ]*/libltdl\.dll\.a?& lib/pathplan/libpathplan.dll.a?" build_win/build.ninja &&
 # fix missing link libraries (version >= 7.0.0)
 sed -i.bak2 -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lilu/" build_win/build.ninja &&
 sed -i.bak3 -e "s?^\s*LINK_LIBRARIES\s*=\s*-lLASi\s.*?& -L$PWD/build_win/lib/gvc -lgvc?" build_win/build.ninja &&
 wl-showstatus build-install &&
 ninja -Cbuild_win install/strip &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




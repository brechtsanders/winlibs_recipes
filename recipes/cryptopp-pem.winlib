#export NAME="PEM Pack"
#export STATUS=
#export URL=https://www.cryptopp.com/wiki/PEM_Pack
#export BASENAME=pempack
#export DESCRIPTION="The PEM Pack is a partial implementation of message encryption which allows you to read and write PEM encoded keys and parameters, including encrypted private keys. The additional files include support for RSA, DSA, EC, ECDSA keys and Diffie-Hellman parameters. The ZIP contains five additional source files, a script to create test keys using OpenSSL, a C++ program to test reading and writing the keys, and a script to verify the keys written by Crypto++ using OpenSSL."
#export CATEGORY=security
#export TYPE=library
##export VERSION=5a
##export VERSIONDATE=20180210
#export VERSION=master
#export VERSIONDATE=20181231
#wl-showstatus --package-version
#export DEPENDENCIES=cryptopp
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=
#export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=
#export LICENSETYPE=
#export DOWNLOADURL=https://github.com/noloader/cryptopp-pem/releases
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
##export DOWNLOADSOURCEURL=https://www.cryptopp.com/w/images/5/5a/Pem-pack.zip
#export DOWNLOADSOURCEURL=https://github.com/noloader/cryptopp-pem/archive/$VERSION.tar.gz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#wl-showstatus extract
##mkdir -p $BASENAME-$VERSION
##unzip -oq $TARBALLDIR/$BASENAME/Pem-pack.zip -d$BASENAME-$VERSION
#tar xfz $TARBALLDIR/$BASENAME/$VERSION.tar.gz
##cd $BASENAME-$VERSION
#cd cryptopp-pem-$VERSION
#wl-showstatus build &&
# for F in *.cpp; do
#  ${CXX:-g++} -c -O3 -I. -I$MINGWPREFIX/include/cryptlib -I$MINGWPREFIX/include/cryptopp -o $F.o $F
# done &&
# ${AR:-ar} cru libpempack.a pem-com.cpp.o pem-rd.cpp.o pem-wr.cpp.o &&
# ( echo EXPORTS; ${NM:-nm} -f posix --defined-only -p libpempack.a | sed -n -e "s/^\(_*[^ ]*PEM_[^ ]*\) T .*$/\1/p" ) > pempack.def &&
# ${CXX:-g++} -shared -s -mwindows -def pempack.def -o pempack.dll libpempack.a -Wl,--out-implib,libpempack.dll.a -lcryptopp &&
# #g++ pem-test.cxx  -I. -I$MINGWPREFIX/include/cryptlib -I$MINGWPREFIX/include/cryptopp libpempack.dll.a -lcryptopp &&
# wl-showstatus install &&
# mkdir -p $INSTALLPREFIX/include/cryptopp $INSTALLPREFIX/lib $INSTALLPREFIX/bin &&
# cp -f pem.h $INSTALLPREFIX/include/cryptopp &&
# cp -f *.a $INSTALLPREFIX/lib/ &&
# cp -f *.dll $INSTALLPREFIX/bin/ &&
# #wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf cryptopp-pem-$VERSION



export NAME="Crypto++ PEM Pack"
export STATUS=
export URL=https://github.com/noloader/cryptopp-pem
export BASENAME=cryptopp-pem
export DESCRIPTION="PEM parsing of keys and parameters for Crypto++ project "
export CATEGORY=security
export TYPE=library
export VERSION=8.2.0
export VERSIONDATE=20200125
wl-showstatus --package-version
export DEPENDENCIES=
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=README.md
export LICENSETYPE="Public Domain"
export DOWNLOADURL="https://github.com/noloader/cryptopp-pem/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL="https://github.com/noloader/cryptopp-pem/archive/CRYPTOPP_$(echo $VERSION|tr . _).tar.gz https://github.com/weidai11/cryptopp/archive/CRYPTOPP_$(echo $VERSION|tr . _).zip"
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
mkdir -p cryptopp-pem-CRYPTOPP_$(echo $VERSION|tr . _)
unzip -oq $TARBALLDIR/$BASENAME/CRYPTOPP_$(echo $VERSION|tr . _).zip -dcryptopp-pem-CRYPTOPP_$(echo $VERSION|tr . _)
tar xfz $TARBALLDIR/$BASENAME/CRYPTOPP_$(echo $VERSION|tr . _).tar.gz
cd cryptopp-pem-CRYPTOPP_$(echo $VERSION|tr . _)
mv -f cryptopp-CRYPTOPP_$(echo $VERSION|tr . _)/* . && rmdir cryptopp-CRYPTOPP_$(echo $VERSION|tr . _)
# fix GNUmakefile
#sed -i.bak -e "s/\.so/.dll/g; s?\(\$(CP).*.dll \$(PREFIX)/\)lib?\1bin?; s/\(-shared\s.*\)$/\1 -Wl,--out-implib=\$\@.a -Wl,--as-needed -lws2_32/" GNUmakefile
sed -i.bak -e "s/libcryptopp\.so\$(SOLIB_VERSION_SUFFIX)/cryptopp-pem.dll/g; s?\(\$(CP).*.dll .*\)\$(LIBDIR)?\1\$(BINDIR)?; s?\$(LIBDIR)\(/cryptopp-pem\.dll\)?\$(BINDIR)\1?; s/\(-shared\s.*\)$/\1 -Wl,--out-implib=\$\@.a -Wl,--as-needed -lws2_32/" GNUmakefile
# avoid -fPIC (useless on Windows and not supported by clang) in GNUmakefile
sed -i.bak2 -e "s/-fPIC//" GNUmakefile
wl-showstatus build &&
 make all static dynamic &&
 #make static dynamic &&
 wl-showstatus build-install &&
 mkdir -p $INSTALLPREFIX/bin &&
 make install PREFIX=$INSTALLPREFIX &&
 ( cp -u libcryptopp.dll.a $INSTALLPREFIX/lib/ &>/dev/null || cp -u cryptopp-pem.dll.a $INSTALLPREFIX/lib/libcryptopp.dll.a ) &&
 #mv -f $INSTALLPREFIX/lib/*.dll $INSTALLPREFIX/bin/ &&
 ( strip $INSTALLPREFIX/bin/*.exe $INSTALLPREFIX/bin/*.dll || true ) &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
####Conflicts with cryptopp, because it replaces it with additional (not officially supported) features




#export NAME="OpenDHT"
#export STATUS=
#export URL=https://github.com/savoirfairelinux/opendht
#export BASENAME=opendht
#export DESCRIPTION="A lightweight C++11 Distributed Hash Table implementation. OpenDHT provides an easy to use distributed in-memory data store. Every node in the network can read and write values to the store. Values are distributed over the network, with redundancy."
#export CATEGORY=development
#export TYPE=library
##export VERSION=1.7.2
##export VERSIONDATE=20180708
##export VERSION=1.7.3
##export VERSIONDATE=20180726
##export VERSION=1.7.4
##export VERSIONDATE=20180801
##export VERSION=1.8.0
##export VERSIONDATE=20181129
##export VERSION=1.8.1
##export VERSIONDATE=20181229
##export VERSION=1.8.2
##export VERSIONDATE=20190319
##export VERSION=1.9.0
##export VERSIONDATE=20190412
##export VERSION=1.9.1
##export VERSIONDATE=20190414
#####src/network_engine.cpp:892:57: error: macro "write" requires 3 arguments, but only 2 given
##export VERSION=1.9.2
##export VERSIONDATE=20190420
##export VERSION=1.9.3
##export VERSIONDATE=20190426
##export VERSION=1.9.4
##export VERSIONDATE=20190503
#export VERSION=1.9.5
#export VERSIONDATE=20190605
##export VERSION=1.10.0
##export VERSIONDATE=20190703
##export VERSION=1.10.1
##export VERSIONDATE=20190803
#wl-showstatus --package-version
#export DEPENDANCIES=libnettle,gnutls,msgpack-cxx,libargon2,readline,restbed,jsoncpp,cppunit
#export OPTIONALDEPENDANCIES=
#export BUILDDEPENDANCIES=
#export LICENSEFILE=COPYING
#export LICENSETYPE=GPL
#export DOWNLOADURL="https://github.com/savoirfairelinux/opendht/releases"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://github.com/savoirfairelinux/opendht/archive/$VERSION.tar.gz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#wl-showstatus extract
#tar xfz $TARBALLDIR/$BASENAME/$VERSION.tar.gz
#cd $BASENAME-$VERSION
### fix src/network_utils.h (version >= 1.9.0)
##patch -ulbf src/network_utils.h << EOF
##@@ -19,3 +19,3 @@
##
##-#ifdef _WIN32
##+#if defined(_WIN32) && !defined(__MINGW32__)
## #include <winsock2.h>
##EOF
## fix missing inet_pton in src/utils.cpp (version >= 1.9.0)
#mv src/utils.cpp src/utils.cpp.bak
#cat > src/utils.cpp << EOF
##if _WIN32_WINNT < 0x0600
##undef _WIN32_WINNT
##define _WIN32_WINNT 0x0600
##endif
##include <ws2tcpip.h>
##define inet_pton InetPtonA
#EOF
#cat src/utils.cpp.bak >> src/utils.cpp
## fix missing inet_pton in src/peer_discovery.cpp (version >= 1.9.2)
#patch -ulbf src/peer_discovery.cpp << EOF
#@@ -18,2 +18,10 @@
#
#+#ifdef __MINGW32__
#+#if _WIN32_WINNT < 0x0600
#+#undef _WIN32_WINNT
#+#define _WIN32_WINNT 0x0600
#+#endif
#+#include <ws2tcpip.h>
#+#define inet_pton InetPtonA
#+#endif
# #include "peer_discovery.h"
#@@ -29,4 +37,6 @@
# #endif
#+#ifndef __MINGW32__
# #define close(x) closesocket(x)
# #define write(s, b, f) send(s, b, (int)strlen(b), 0)
#+#endif
# #else
#EOF
## fix closesocket() issue in src/peer_discovery.cpp (version >= 1.9.4)
#sed -i.bak -e "s?#define close.*closesocket?//&?; s/close(/closesocket(/" src/peer_discovery.cpp
#wl-showstatus configure &&
# mkdir -p m4 &&
# autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal &&
#./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-push-notifications --enable-proxy-server --enable-proxy-server-identity --enable-proxy-client --with-argon2 --disable-python --disable-tools --disable-tests &&
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-tools --enable-push-notifications --enable-proxy-server --enable-proxy-server-identity --enable-proxy-client --with-argon2 --disable-python --disable-tests &&
# # fix building DLLs
# mv libtool libtool.bak &&
# sed -e "s/\(allow_undefined=\)yes/\1no/" libtool.bak > libtool &&
# #wl-showstatus build &&
# #make &&
# wl-showstatus build-install &&
# make install-strip &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION



export NAME="OpenDHT"
export STATUS=
export URL=https://github.com/savoirfairelinux/opendht
export BASENAME=opendht
export DESCRIPTION="A lightweight C++11 Distributed Hash Table implementation. OpenDHT provides an easy to use distributed in-memory data store. Every node in the network can read and write values to the store. Values are distributed over the network, with redundancy."
export CATEGORY=development
export TYPE=library
#export VERSION=1.10.0
#export VERSIONDATE=20190703
#export VERSION=1.10.1
#export VERSIONDATE=20190803
#export DEPENDANCIES=libnettle,gnutls,msgpack-cxx,libargon2,readline,cppunit
##export DEPENDANCIES=libnettle,gnutls,msgpack-cxx,libargon2,readline,cppunit,restbed,jsoncpp
#export OPTIONALDEPENDANCIES=
#export BUILDDEPENDANCIES=cmake,doxygen
#export VERSION=2.0.0
#export VERSIONDATE=20200331
####CMake Error at CMakeLists.txt:154: Parse error.  Expected a command name, got unquoted argument with text "src/rng.cpp".
#export VERSION=2.1.0
#export VERSIONDATE=20200501
#export VERSION=2.1.1
#export VERSIONDATE=20200507
#export VERSION=2.1.2
#export VERSIONDATE=20200521
#export VERSION=2.1.3
#export VERSIONDATE=20200526
#export VERSION=2.1.4
#export VERSIONDATE=20200620
#export VERSION=2.1.5
#export VERSIONDATE=20200924
#export VERSION=2.1.6
#export VERSIONDATE=20200925
#export VERSION=2.1.7
#export VERSIONDATE=20201116
#export VERSION=2.1.8
#export VERSIONDATE=20201118
####src/compat/os_cert.h:28:10: fatal error: crypto/x509.h: No such file or directory
#export VERSION=2.1.8.2
#export VERSIONDATE=20201119
#export VERSION=2.1.9
#export VERSIONDATE=20201120
#export VERSION=2.1.9.1
#export VERSIONDATE=20201121
#export VERSION=2.1.9.3
#export VERSIONDATE=20201125
#export VERSION=2.1.9.4
#export VERSIONDATE=20201205
#export DEPENDANCIES=libnettle,gnutls,msgpack-cxx,libargon2,readline,cppunit,jsoncpp,asio
##export DEPENDANCIES=libnettle,gnutls,msgpack-cxx,libargon2,readline,cppunit,jsoncpp,asio,restbed
#export OPTIONALDEPENDANCIES=
#export OPTIONALDEPENDANCIES=restinio
#export VERSION=2.1.9.5
#export VERSIONDATE=20201209
#export VERSION=2.1.10
#export VERSIONDATE=20201231
#export VERSION=2.2.0
#export VERSIONDATE=20210602
#export VERSION=2.3.0
#export VERSIONDATE=20210610
#export VERSION=2.3.1
#export VERSIONDATE=20210916
#export VERSION=2.3.2
#export VERSIONDATE=20220127
#export VERSION=2.3.3
#export VERSIONDATE=20220227
#export VERSION=2.3.4
#export VERSIONDATE=20220304
#export VERSION=2.3.5
#export VERSIONDATE=20220310
#export VERSION=2.4.0
#export VERSIONDATE=20220324
#export VERSION=2.4.1
#export VERSIONDATE=20220420
export VERSION=2.4.2
export VERSIONDATE=20220421
wl-showstatus --package-version
export DEPENDANCIES=libnettle,gnutls,msgpack-cxx,libargon2,readline,cppunit,jsoncpp,restinio,asio
#export DEPENDANCIES=libnettle,gnutls,msgpack-cxx,libargon2,readline,cppunit,jsoncpp,restinio,asio,restbed
export OPTIONALDEPENDANCIES=
export BUILDDEPENDANCIES=cmake,doxygen
export LICENSEFILE=COPYING
export LICENSETYPE=GPL
export DOWNLOADURL="https://github.com/savoirfairelinux/opendht/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/savoirfairelinux/opendht/archive/$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xfz $TARBALLDIR/$BASENAME/$VERSION.tar.gz
cd $BASENAME-$VERSION
## fix missing inet_pton in src/utils.cpp (version >= 1.10.1)
#mv src/utils.cpp src/utils.cpp.bak
#cat > src/utils.cpp << EOF
##if _WIN32_WINNT < 0x0600
##undef _WIN32_WINNT
##define _WIN32_WINNT 0x0600
##endif
#EOF
#cat src/utils.cpp.bak >> src/utils.cpp
## fix missing inet_pton and redefinition of close in src/peer_discovery.cpp (version >= 1.10.1)
#mv src/peer_discovery.cpp src/peer_discovery.cpp.bak
#cat > src/peer_discovery.cpp << EOF
##if _WIN32_WINNT < 0x0600
##undef _WIN32_WINNT
##define _WIN32_WINNT 0x0600
##endif
#EOF
#sed -e "s?#define close.*closesocket?//&?; s/close(/closesocket(/" src/peer_discovery.cpp.bak >> src/peer_discovery.cpp
## fix problems with missing class random_device in CMakeLists.txt (version >= 1.10.1)
#patch -ulbf CMakeLists.txt << EOF
#@@ -153,2 +153,3 @@
#     src/peer_discovery.cpp
#+    src/rng.cpp
#     src/network_utils.cpp
#EOF
# fix missing std::chrono::high_resolution_clock::now().count() in src/rng.cpp (version >= 2.1.0)
patch -ulbf src/rng.cpp << EOF
@@ -27,3 +27,3 @@
 random_device::random_device() :
-   gen(std::chrono::system_clock::now().time_since_epoch().count() ^ std::chrono::high_resolution_clock::now().count())
+   gen(std::chrono::system_clock::now().time_since_epoch().count())
 {}
EOF
# fix missing inet_pton in src/utils.cpp (version >= 2.1.0)
mv src/utils.cpp src/utils.cpp.bak
cat > src/utils.cpp << EOF
#if _WIN32_WINNT < 0x0600
#undef _WIN32_WINNT
#define _WIN32_WINNT 0x0600
#endif
EOF
cat src/utils.cpp.bak >> src/utils.cpp
## fix problems with missing class random_device in CMakeLists.txt (version >= 2.1.0 <= 2.4.0)
#patch -ulbf CMakeLists.txt << EOF
#@@ -218,2 +218,3 @@
#
#+list (APPEND opendht_SOURCES src/rng.cpp)
# if (OPENDHT_PEER_DISCOVERY)
#EOF
# fix CMakeLists.txt (version >= 2.4.1)
patch -ulbf CMakeLists.txt << EOF
@@ -94,3 +94,3 @@
                 message(STATUS "Found OpenSSL \${OPENSSL_VERSION} \${OPENSSL_INCLUDE_DIRS}")
-                include_direcopendht/ries(SYSTEM \${OPENSSL_INCLUDE_DIRS})
+                #include_direcopendht/ries(SYSTEM \${OPENSSL_INCLUDE_DIRS})
                 link_directories (\${OPENSSL_LIBRARY_DIRS})
@@ -253,2 +253,3 @@

+list (APPEND opendht_SOURCES src/rng.cpp)
 if (OPENDHT_PEER_DISCOVERY)
EOF
mkdir -p build_win &&
 wl-showstatus configure &&
 #PKG_CONFIG= cmake.exe -Wno-dev -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DOPENDHT_SHARED:BOOL=ON -DOPENDHT_STATIC:BOOL=ON -DOPENDHT_ARGON2:BOOL=OFF -DOPENDHT_PROXY_CLIENT:BOOL=OFF -DOPENDHT_PROXY_SERVER:BOOL=OFF -DOPENDHT_PYTHON:BOOL=OFF -DOPENDHT_TOOLS:BOOL=OFF -DOPENDHT_DOCUMENTATION:BOOL=OFF -DOPENDHT_TESTS:BOOL=OFF -S. -Bbuild_win &&
 PKG_CONFIG= cmake.exe -Wno-dev -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DOPENDHT_SHARED:BOOL=ON -DOPENDHT_STATIC:BOOL=ON -DOPENDHT_ARGON2:BOOL=OFF -DOPENDHT_PROXY_CLIENT:BOOL=OFF -DOPENDHT_PROXY_SERVER:BOOL=ON -DOPENDHT_PROXY_SERVER_IDENTITY:BOOL=ON -DOPENDHT_PUSH_NOTIFICATIONS:BOOL=ON -DOPENDHT_PYTHON:BOOL=OFF -DOPENDHT_TOOLS:BOOL=OFF -DOPENDHT_DOCUMENTATION:BOOL=OFF -DOPENDHT_TESTS:BOOL=OFF -S. -Bbuild_win &&
 #PKG_CONFIG= cmake.exe -Wno-dev -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DOPENDHT_SHARED:BOOL=ON -DOPENDHT_STATIC:BOOL=ON -DOPENDHT_ARGON2:BOOL=OFF -DOPENDHT_PROXY_CLIENT:BOOL=OFF -DOPENDHT_PROXY_SERVER:BOOL=ON -DOPENDHT_PROXY_SERVER_IDENTITY:BOOL=ON -DOPENDHT_PUSH_NOTIFICATIONS:BOOL=ON -DOPENDHT_PYTHON:BOOL=OFF -DOPENDHT_TOOLS:BOOL=ON -DOPENDHT_DOCUMENTATION:BOOL=ON -DOPENDHT_TESTS:BOOL=OFF -S. -Bbuild_win &&
 #echo "-Wl,--as-needed -lws2_32" >> build_win/CMakeFiles/opendht.dir/linklibs.rsp &&
 echo "-Wl,--as-needed -lws2_32 -lmswsock -lcrypt32" >> build_win/CMakeFiles/opendht.dir/linklibs.rsp &&
 wl-showstatus build-install &&
 make -Cbuild_win install/strip &&
 mv -f $INSTALLPREFIX/lib/libopendht_import.lib $INSTALLPREFIX/lib/libopendht.dll.a &&
 mkdir -p $INSTALLPREFIX/bin &&
 mv -f $INSTALLPREFIX/lib/*.dll $INSTALLPREFIX/bin/ &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
####TO DO: enable proxy client and server after restbed builds again with new asio library




#export NAME="ZXing C++ Port"
#export STATUS=
#export URL=https://github.com/glassechidna/zxing-cpp
#export BASENAME=zxingcpp
#export DESCRIPTION="multi-format 1D/2D barcode image processing library"
#export CATEGORY=dataprocessing
#export TYPE=library
#export VERSION=master
#export VERSIONDATE=20151114
#wl-showstatus --package-version
#export DEPENDENCIES=
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=cmake
#export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=COPYING
#export LICENSETYPE=Apache
#export DOWNLOADURL="https://github.com/glassechidna/zxing-cpp/releases"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://github.com/glassechidna/zxing-cpp/archive/$VERSION.tar.gz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
##mv $TARBALLDIR/$BASENAME/$VERSION.tar.gz $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
#wl-wait4deps
#wl-showstatus extract
##tar xz --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
#tar xz --force-local -f $TARBALLDIR/$BASENAME/$VERSION.tar.gz
#cd zxing-cpp-$VERSION
## fix missing srandom/random in core/tests/src/common/BitArrayTest.cpp
#mv core/tests/src/common/BitArrayTest.cpp core/tests/src/common/BitArrayTest.cpp.bak
#sed -e "s/\(srandom(\)/srand(/g; s/\(random(\)/rand(/g" core/tests/src/common/BitArrayTest.cpp.bak > core/tests/src/common/BitArrayTest.cpp
## fix missing random in core/tests/src/common/reedsolomon/ReedSolomonTest.cpp
#mv core/tests/src/common/reedsolomon/ReedSolomonTest.cpp core/tests/src/common/reedsolomon/ReedSolomonTest.cpp.bak
#sed -e "s/\(random(\)/rand(/g" core/tests/src/common/reedsolomon/ReedSolomonTest.cpp.bak > core/tests/src/common/reedsolomon/ReedSolomonTest.cpp
## fix boolean in core/src/zxing/InvertedLuminanceSource.cpp
#patch -ulbf core/src/zxing/InvertedLuminanceSource.cpp << EOF
#--- core/src/zxing/InvertedLuminanceSource.cpp  2015-10-04 19:52:55.000000000 +0200
#+++ core/src/zxing/InvertedLuminanceSource.cpp  2015-11-16 13:41:54.675085800 +0100
#@@ -20,3 +20,2 @@
#
#-using zxing::boolean;
# using zxing::Ref;
#@@ -56,3 +55,3 @@
#
#-boolean InvertedLuminanceSource::isRotateSupported() const {
#+zxing::boolean InvertedLuminanceSource::isRotateSupported() const {
#   return delegate->isRota
#EOF
#wl-showstatus configure &&
#mkdir -p build &&
#cd build &&
#cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release .. &&
# cd .. &&
# wl-showstatus build-install &&
# make -Cbuild install/strip &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf zxing-cpp-$VERSION
#####To do: build DLL



export NAME="ZXing-cpp"
export STATUS=
export URL=https://github.com/nu-book/zxing-cpp
export BASENAME=zxingcpp
export DESCRIPTION="C++ port of ZXing - a multi-format 1D/2D barcode image processing library"
export CATEGORY=dataprocessing
export TYPE=library
#export VERSION=1.0.3
#export VERSIONDATE=20190203
#export VERSION=1.0.4
#export VERSIONDATE=20190305
#export VERSION=1.0.5
#export VERSIONDATE=20190518
#export VERSION=1.0.6
#export VERSIONDATE=20190710
#export VERSION=1.0.7
#export VERSIONDATE=20190922
#export VERSION=1.0.8
#export VERSIONDATE=20200108
#export VERSION=1.1.0
#export VERSIONDATE=20200731
#export VERSION=1.1.1
#export VERSIONDATE=20200912
#export VERSION=1.2.0
#export VERSIONDATE=20210528
#export VERSION=1.3.0
#export VERSIONDATE=20220504
#export VERSION=1.4.0
#export VERSIONDATE=20220708
#export VERSION=2.0.0
#export VERSIONDATE=20230106
export VERSION=2.1.0
export VERSIONDATE=20230706
wl-showstatus --package-version
export DEPENDENCIES=
export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=cmake
#export OPTIONALBUILDDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=Apache
export DOWNLOADURL="https://github.com/nu-book/zxing-cpp/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/nu-book/zxing-cpp/archive/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd zxing-cpp-$VERSION
#cp -f core/CMakeLists.txt core/CMakeLists.txt.bak &&
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# #sed -e "s/add_library *([^ ]*$/& STATIC/" core/CMakeLists.txt.bak > core/CMakeLists.txt &&
# cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DENABLE_DECODERS:BOOL=ON -DENABLE_ENCODERS:BOOL=ON -Score -Bbuild_static &&
# wl-showstatus build-install &&
# make -Cbuild_static install/strip &&
# wl-showstatus configure &&
# sed -e "s/add_library *([^ ]*$/& SHARED/" core/CMakeLists.txt.bak > core/CMakeLists.txt &&
# cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DENABLE_DECODERS:BOOL=ON -DENABLE_ENCODERS:BOOL=ON -Score -Bbuild_shared &&
# wl-showstatus build-install &&
# make -Cbuild_shared install/strip &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf zxing-cpp-$VERSION
# fix for GCC 11 in core/src/Pattern.h (version >= 1.1.1)
mv core/src/Pattern.h core/src/Pattern.h.bak &&
echo "#include <limits>" > core/src/Pattern.h &&
cat core/src/Pattern.h.bak >> core/src/Pattern.h
# fix CMakeLists.txt (version >= 1.1.1)
patch -ulbf CMakeLists.txt << EOF
@@ -104,3 +104,3 @@

-IF (NOT WIN32)
+IF (NOT MSVC)
     configure_file(zxing.pc.in zxing.pc @ONLY)
EOF
mkdir -p build_static build_shared &&
 wl-showstatus configure &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DENABLE_DECODERS:BOOL=ON -DENABLE_ENCODERS:BOOL=ON -DBUILD_EXAMPLES:BOOL=OFF -S. -Bbuild_static &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DENABLE_DECODERS:BOOL=ON -DENABLE_ENCODERS:BOOL=ON -DBUILD_EXAMPLES:BOOL=OFF -DCMAKE_CXX_FLAGS:STRING="-D_WIN32_WINNT=0x0600 $(if ${CC:-gcc} --version|grep -q clang; then echo "-femulated-tls"; fi)" -S. -Bbuild_static &&
 wl-showstatus configure &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DENABLE_DECODERS:BOOL=ON -DENABLE_ENCODERS:BOOL=ON -DBUILD_EXAMPLES:BOOL=OFF -S. -Bbuild_shared &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DENABLE_DECODERS:BOOL=ON -DENABLE_ENCODERS:BOOL=ON -DBUILD_EXAMPLES:BOOL=OFF -DCMAKE_CXX_FLAGS:STRING="-D_WIN32_WINNT=0x0600 $(if ${CC:-gcc} --version|grep -q clang; then echo "-femulated-tls"; fi)" -S. -Bbuild_shared &&
 wl-showstatus build-install &&
 ninja -Cbuild_static install/strip &&
 wl-showstatus build-install &&
 ninja -Cbuild_shared install/strip &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf zxing-cpp-$VERSION




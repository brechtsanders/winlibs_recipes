export NAME="vtparse"
export STATUS=
export URL=https://vt100.net/emu/dec_ansi_parser
#export URL=https://github.com/astoeckel/vtparse
export BASENAME=vtparse
export DESCRIPTION="A parser for DEC's ANSI-compatible video terminals"
export CATEGORY=dataprocessing
export TYPE=library
export VERSION=master
export VERSIONDATE=20200515
wl-showstatus --package-version
export DEPENDENCIES=
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=meson,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=AGPL
export DOWNLOADURL="https://github.com/astoeckel/vtparse/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/astoeckel/vtparse/archive/$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/$VERSION.tar.gz
cd $BASENAME-$VERSION
# avoid clock_gettime in test/test_vtparse_performance.c (version >= master)
patch -ulbf test/test_vtparse_performance.c << EOF
@@ -21,3 +21,8 @@
 #define _POSIX_C_SOURCE 199309L
+#ifdef _WIN32
+#include <sysinfoapi.h>
+#include <stdint.h>
+#else
 #include <time.h>
+#endif

@@ -32,2 +37,7 @@
 static long long int microtime() {
+#ifdef _WIN32
+       FILETIME tp;
+       GetSystemTimeAsFileTime(&tp);
+       return (((uint64_t)tp.dwLowDateTime << 32) + tp.dwHighDateTime) / 10;
+#else
        struct timespec tp;
@@ -35,2 +45,3 @@
        return tp.tv_sec * 1000 * 1000 + tp.tv_nsec / 1000;
+#endif
 }
EOF
mkdir -p build_both &&
 wl-showstatus configure &&
 #PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both . build_both &&
 PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both . build_both &&
 ## fix slash/backslash path issue when calling Python from Ninja
 #sed -i.bak -e "s/join_paths/os.path.join/g; /COMMAND =.*python\.exe/ s?\"/\([a-zA-Z]\)/?\"\1:/?; /COMMAND =.*python\.exe/ s?/?\\\\?g" build_*/build.ninja &&
 ## fix Python path issues in meson_exe
 #sed -i.bak -e "s?$PYDIR?$(echo $PYDIR|sed -e "s?^/\([a-zA-Z]\)/?\1:/?")?" build_both/meson-private/meson_exe_python.exe_*.dat &&
 wl-showstatus build-install &&
 PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib ninja -C build_both install &&
 strip build_both/libvtparse.dll &&
 mkdir -p $INSTALLPREFIX/bin &&
 cp -f build_both/*.a $INSTALLPREFIX/lib/ &&
 cp -f build_both/*.dll $INSTALLPREFIX/bin/ &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




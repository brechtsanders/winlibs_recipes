export NAME="seahorse"
export STATUS=
#export URL=http://www.gnome.org/projects/seahorse
export URL=http://live.gnome.org/Seahorse
export BASENAME=seahorse
export DESCRIPTION="Seahorse is a GNOME application for managing encryption keys and passwords in the GnomeKeyring."
export CATEGORY=security
export TYPE=library
#export VERSION=2.32.0
#export VERSIONDATE=20101008
#export VERSION=3.0.0
#export VERSIONDATE=20110407
#export VERSION=3.0.1
#export VERSIONDATE=20110425
#export VERSION=3.0.2
#export VERSIONDATE=20110522
#export VERSION=3.1.1
#export VERSIONDATE=20110509
#export VERSION=3.1.4
#export VERSIONDATE=20110725
#export VERSION=3.2.0
#export VERSIONDATE=20110926
#export VERSION=3.2.1
#export VERSIONDATE=20111018
#export VERSION=3.2.2
#export VERSIONDATE=20111114
####eggsmclient-xsmp.c:39:22: error: gdk/gdkx.h: No such file or directory
####eggsmclient-xsmp.c:1325: error: 'F_SETFD' undeclared (first use in this function)
#export VERSION=3.3.1
#export VERSIONDATE=20111018
#export VERSION=3.3.1.1
#export VERSIONDATE=20111027
#export VERSION=3.3.2
#export VERSIONDATE=20111121
#export VERSION=3.3.4
#export VERSIONDATE=20120117
####libseahorse/seahorse-place.h:44: error: redefinition of typedef 'SeahorsePlace'
####libseahorse/seahorse-object.h:55: note: previous declaration of 'SeahorsePlace' was here
#export VERSION=3.3.5
#export VERSIONDATE=20120204
#export VERSION=3.4.0
#export VERSIONDATE=20120326
#export VERSION=3.4.1
#export VERSIONDATE=20120416
#export DEPENDENCIES=glib2,gtk3,gcr,libgnome-keyring,libassuan,libgpg-error,gdk-pixbuf,libsoup-2.4,gettext
#export VERSION=3.5.4
#export VERSIONDATE=20120716
#export VERSION=3.5.91
#export VERSIONDATE=20120903
#export VERSION=3.5.92
#export VERSIONDATE=20120918
#export VERSION=3.6.0
#export VERSIONDATE=20120927
#export VERSION=3.6.1
#export VERSIONDATE=20121016
#export VERSION=3.6.2
#export VERSIONDATE=20121023
#export VERSION=3.6.3
#export VERSIONDATE=20121112
#export VERSION=3.7.1
#export VERSIONDATE=20121023
#export VERSION=3.7.2
#export VERSIONDATE=20121122
#export VERSION=3.7.5
#export VERSIONDATE=20130204
#export VERSION=3.8.0
#export VERSIONDATE=20130325
#export VERSION=3.8.1
#export VERSIONDATE=20130416
export VERSION=3.8.2
export VERSIONDATE=20130514
#export VERSION=3.9.1
#export VERSIONDATE=20130501
#export VERSION=3.10.0
#export VERSIONDATE=20130924
#export VERSION=3.10.1
#export VERSIONDATE=20131017
#export VERSION=3.10.2
#export VERSIONDATE=20140108
####tar: seahorse-3.10.0/build/aux: Cannot mkdir: Not a directory
#export VERSION=3.12.0
#export VERSIONDATE=20140323
#export VERSION=3.12.2
#export VERSIONDATE=20140514
#export VERSION=3.14.0
#export VERSIONDATE=20140924
#export VERSION=3.14.1
#export VERSIONDATE=20150228
####Requested 'gcr-3 >= 3.11.91' but version of gcr-3 is 3.8.2
#export VERSION=3.16.0
#export VERSIONDATE=20150512
#export VERSION=3.17.4
#export VERSIONDATE=20150811
#export VERSION=3.18.0
#export VERSIONDATE=20150929
#export VERSION=3.20.0
#export VERSIONDATE=20160406
#export VERSION=3.29.1
####ssh/seahorse-ssh-operation.c:434:15: error: 'F_SETFL' undeclared (first use in this function)
#export VERSIONDATE=20180814
export DEPENDENCIES=glib2,gtk3,gcr,libsecret,libgnome-keyring,libassuan,libgpg-error,gdk-pixbuf,libsoup-2.4,gettext,gpgme
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=
export OPTIONALBUILDDEPENDENCIES=
#export VERSION=3.29.92
#export VERSIONDATE=20180828
#export VERSION=3.30
#export VERSIONDATE=20180904
#export VERSION=3.30.1.1
#export VERSIONDATE=20181212
#export VERSION=3.31.1
#export VERSIONDATE=20190109
####meson.build:39:0: ERROR:  Native dependency 'gio-unix-2.0' not found
#export VERSION=3.32
#export VERSIONDATE=20190313
#export VERSION=3.32.1
#export VERSIONDATE=20190425
#export VERSION=3.32.2
#export VERSIONDATE=20190517
#export VERSION=3.34
#export VERSIONDATE=20191001
#export VERSION=3.34.1
#export VERSIONDATE=20200106
#export VERSION=3.35.1
#export VERSIONDATE=20200106
#export VERSION=3.36
#export VERSIONDATE=20200311
#export VERSION=3.36.2
#export VERSIONDATE=20200621
####meson.build:70:4: ERROR: Problem encountered: Incompatible version of GPGME. Minimal version required is 1.7.0
#export VERSION=3.37.1
#export VERSIONDATE=20200619
#export VERSION=3.37.2
#export VERSIONDATE=20200824
#export VERSION=3.38.0
#export VERSIONDATE=20201107
#export VERSION=3.38.0.1
#export VERSIONDATE=20201108
#export VERSION=3.38.1
#export VERSIONDATE=20210216
####meson.build:78:0: ERROR: Vala library 'pkcs11' not found
#export VERSION=40.0
#export VERSIONDATE=20210412
#export VERSION=41.0
#export VERSIONDATE=20210929
####meson.build:41:0: ERROR: Invalid version of dependency, need 'gcr-3' ['>=3.38'] found '3.34.0'.
#export VERSION=42.0
#export VERSIONDATE=20220522
#export VERSION=43.0
#export VERSIONDATE=20221014
####meson.build:80:0: ERROR: Dependency "avahi-client" not found, tried pkgconfig and cmake
wl-showstatus --package-version
#export DEPENDENCIES=glib2,gtk3,gcr,libsecret,libgnome-keyring,libassuan,libgpg-error,gdk-pixbuf,libsoup-2.4,gettext,gpgme,gnupg,vala,avahi
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=meson
#export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=COPYING
export LICENSETYPE=GPL
export DOWNLOADURL="http://ftp.gnome.org/pub/GNOME/sources/seahorse/"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://ftp.gnome.org/pub/gnome/sources/$BASENAME/`echo $VERSION|sed 's/^\([0-9]*\.[0-9]*\)\..*$/\1/'`/$BASENAME-$VERSION.tar.bz2
export DOWNLOADSOURCEURL=http://ftp.gnome.org/pub/gnome/sources/$BASENAME/$(echo $VERSION|sed 's/^\([0-9]*\.[0-9]*\)\..*$/\1/')/$BASENAME-$VERSION.tar.xz
#export DOWNLOADSOURCEURL=http://ftp.gnome.org/pub/gnome/sources/$BASENAME/$(echo $VERSION|sed 's/^\([0-9]*\)\..*$/\1/')/$BASENAME-$VERSION.tar.xz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
#tar xj --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.bz2
#tar xJ --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.xz
tar xJ --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.xz --transform="s?/aux?/aux_?"
cd $BASENAME-$VERSION
# fix missing files
mkdir -p sys
touch sys/signal.h sys/un.h err.h syslog.h
echo "#include <winsock2.h>" > sys/socket.h
cat > sys/wait.h << EOF
#define WEXITSTATUS(status) (((status)  & 0xFF00) >> 8)
#define WIFEXITED(status) (WTERMSIG(status) == 0)
//#define WIFSTOPPED(status) (((status) & 0xFF) == 0x7F)
//#define WIFSIGNALED(status) (!WIFSTOPPED(status) && !WIFEXITED(status))
//#define WSTOPSIG(status) WEXITSTATUS(status)
#define WTERMSIG(status) ((status) & 0x7F)
EOF
# fix missing defines in pgp/seahorse-gpgme-data.c
mv pgp/seahorse-gpgme-data.c pgp/seahorse-gpgme-data.c.bak
cat > pgp/seahorse-gpgme-data.c << EOF
#define EALREADY 37
#define EOPNOTSUPP 45
#define ENOTSUP EOPNOTSUPP
#define ELOOP 62
#define EHOSTDOWN 147
#define EWOULDBLOCK EAGAIN
EOF
cat pgp/seahorse-gpgme-data.c.bak >> pgp/seahorse-gpgme-data.c
# fix mkdir in pgp/seahorse-gpg-options.c
mv pgp/seahorse-gpg-options.c pgp/seahorse-gpg-options.c.bak
sed -e "s/\(mkdir *([^,]*\),[^)]*/\1/" pgp/seahorse-gpg-options.c.bak > pgp/seahorse-gpg-options.c
# fix missing gmtime_r in pgp/seahorse-gpgme-expires.c
mv pgp/seahorse-gpgme-expires.c pgp/seahorse-gpgme-expires.c.bak
echo "#include <pthread.h>" > pgp/seahorse-gpgme-expires.c
cat pgp/seahorse-gpgme-expires.c.bak >> pgp/seahorse-gpgme-expires.c
# fix missing setenv in pgp/seahorse-gpgme-key-op.c
mv pgp/seahorse-gpgme-key-op.c pgp/seahorse-gpgme-key-op.c.bak
cat > pgp/seahorse-gpgme-key-op.c << EOF
#include <malloc.h>
#include <string.h>
inline void setenv (const char* var, const char* val, int param)
{
  if (!val)
    val = "";
  char* buf = (char*)malloc(strlen(var) + strlen(val) + 2);
  strcpy(buf, var);
  strcat(buf, "=");
  strcat(buf, val);
  putenv(buf);
  free(buf);
}
EOF
cat pgp/seahorse-gpgme-key-op.c.bak >> pgp/seahorse-gpgme-key-op.c
# fix number of arguments to secret_service_prompt_at_dbus_path_finish/secret_service_prompt_at_dbus_path in gkr/seahorse-gkr-actions.c (version >= 3.8.2)
patch -ulbf gkr/seahorse-gkr-actions.c << EOF
@@ -219,3 +219,3 @@

-       retval = secret_service_prompt_at_dbus_path_finish (SECRET_SERVICE (source), result, NULL, &error);
+       retval = secret_service_prompt_at_dbus_path_finish (SECRET_SERVICE (source), result, &error);
        if (retval != NULL)
@@ -243,3 +243,3 @@
                g_variant_get (retval, "(&o)", &prompt_path);
-               secret_service_prompt_at_dbus_path (change->service, prompt_path, NULL,
+               secret_service_prompt_at_dbus_path (change->service, prompt_path, NULL, NULL,
                                                    on_change_password_done, change);
EOF
# fix missing secret_service_new in gkr/seahorse-gkr-backend.c (version >= 3.8.2)
sed -i.bak -e "s/\(secret_service_\)new/\1open/g" gkr/seahorse-gkr-backend.c
# fix missing gmtime_r in pgp/seahorse-gpgme-expires.c (version >= 3.8.2)
mv pgp/seahorse-gpgme-expires.c pgp/seahorse-gpgme-expires.c.bak &&
echo "#define _POSIX_THREAD_SAFE_FUNCTIONS" > pgp/seahorse-gpgme-expires.c &&
cat pgp/seahorse-gpgme-expires.c.bak >> pgp/seahorse-gpgme-expires.c
# skip making help
cat > help/Makefile.in << EOF
clean:
all:
install:
install-strip:
EOF
# fix problem detecting GNU gettext tools on 64-bit
if ( echo $RUNPLATFORM | grep -q x86_64 ); then
 mv configure configure.bak
 sed -e "s/as_fn_error\(.*GNU gettext tools not found; required for intltool\)/as_echo\1/" configure.bak > configure
fi
# fix invalid aux in configure (version >= 3.12.0)
mv configure configure.bak2
sed "s?/aux?/aux_?" configure.bak2 > configure
wl-showstatus configure &&
 #INTLTOOL_PERL="$PERLDIR/bin/perl.exe" ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-introspection=no LDFLAGS="-no-undefined -Wl,-no-undefined" &&
 #PERL="$PERLDIR/bin/perl.exe" ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-introspection=no --enable-debug=no LDFLAGS="-Wl,-no-undefined" &&
 #PATH=$PATH:$PERLDIR/../c/bin INTLTOOL_PERL="$PERLDIR/bin/perl.exe" ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-introspection=no --enable-debug=no LDFLAGS="-Wl,-no-undefined" &&
 PATH=$PATH:$PERLDIR/../c/bin INTLTOOL_PERL="$PERLDIR/bin/perl.exe" ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --disable-pgp --disable-ssh --disable-introspection --disable-debug LDFLAGS="-Wl,-no-undefined" &&
 wl-showstatus build-install &&
 #make install-strip &&
 PATH=$PYDIR:$PATH make install-strip &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
####application crashes: $MINGWPREFIX/bin/seahorse.exe



## fix detection of GPGME version
#sed -i.bak -e "s?python3?python.exe?" build-aux/gpg_check_version.py
## fix missing gio-unix
#sed -i.bak -e "s/gio-unix-/gio-windows-/" meson.build
## fix detection of gnupg
#sed -i.bak2 -e "s/accepted_gpg_versions = \[/& '$(gpg --version|head -n1|sed -e "s/^.* \([0-9.]*\)$/\1/")',/" meson.build
## fix detection of gcr
#sed -i.bak3 -e "s/gcr-3/gcr-base-3/" meson.build
#mkdir -p build_both &&
# wl-showstatus configure &&
# PKG_CONFIG= PATH=$PYDIR:$PATH PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Dpkcs11-support=false -Dmanpage=true . build_both &&
# wl-showstatus build-install &&
# PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib ninja -C build_both install/strip &&
#    echo OK && find . -name '*.a'

#export NAME="Intel(R) Threading Building Blocks (Intel(R) TBB)"
#export STATUS=
#export URL=http://threadingbuildingblocks.org/
#export BASENAME=tbb
#export DESCRIPTION="Intel(R) Threading Building Blocks (Intel(R) TBB) offers a rich and complete approach to expressing parallelism in a C++ program. It is a library that helps you take advantage of multi-core processor performance without having to be a threading expert. Intel TBB is not just a threads-replacement library. It represents a higher-level, task-based parallelism that abstracts platform details and threading mechanisms for scalability and performance."
#export CATEGORY=system
#export TYPE=library
##export VERSION=40_20120201oss
##export VERSIONDATE=20120414
##export VERSION=40_20120408oss
##export VERSIONDATE=20120517
##export VERSION=40_20120613oss
##export VERSIONDATE=20120903
##export VERSION=44_20160526oss
##export VERSIONDATE=20120903
##export LICENSEFILE=COPYING
##export LICENSETYPE=GPLv2
##export VERSION=2017_20161004oss
##export VERSIONDATE=20161104
##export VERSION=2020.0
##export VERSIONDATE=20191225
#export VERSION=2020.2
#export VERSIONDATE=20211023
##export VERSION=2021.2.0
##export VERSIONDATE=20210519
##export VERSION=2021.3.0
##export VERSIONDATE=20210630
##export VERSION=2021.4.0
##export VERSIONDATE=20211004
##export VERSION=2021.5.0
##export VERSIONDATE=20211223
##export VERSION=2021.6.0
##export VERSIONDATE=20220921
#wl-showstatus --package-version
#export DEPENDENCIES=
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=pexports
#export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=LICENSE
#export LICENSETYPE=Apache
##export DOWNLOADURL="http://threadingbuildingblocks.org/file.php?fid=77 tbb"
##export DOWNLOADURL="https://www.threadingbuildingblocks.org/download tbb"
#export DOWNLOADURL="https://github.com/oneapi-src/oneTBB/releases"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
##export DOWNLOADSOURCEURL=http://threadingbuildingblocks.org/uploads/77/182/4.0%20update%203/tbb40_20120201oss_src.tgz
##export DOWNLOADSOURCEURL=http://threadingbuildingblocks.org/uploads/77/185/4.0%20update%204/tbb40_20120408oss_src.tgz
##export DOWNLOADSOURCEURL=http://threadingbuildingblocks.org/uploads/77/187/4.0%20update%205/tbb40_20120613oss_src.tgz
##export DOWNLOADSOURCEURL=https://www.threadingbuildingblocks.org/sites/default/files/software_releases/source/tbb$VERSION\_src.tgz
#export DOWNLOADSOURCEURL=https://github.com/intel/tbb/archive/v$VERSION.tar.gz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
##tar xz --force-local -f $TARBALLDIR/$BASENAME/tbb"$VERSION"_src.tgz
#tar xz --force-local -f $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
##cd tbb"$VERSION"
##cd $BASENAME-$VERSION
#cd oneTBB-$VERSION
#if ( echo $RUNPLATFORM | grep -qv x86_64 ); then
# ARCH=ia32
#else
# ARCH=intel64
#fi
## fix issues building with LLVM/CLang
#if ${CC:-gcc} --version|grep -q "^clang"; then
# sed -i.bak -e "s/-flifetime-dse=1//" build/windows.gcc.inc
# sed -i.bak -e "s/\$(EXPORT_KEY)[^ ]*\.def//" build/Makefile.tbb build/Makefile.tbbmalloc
#fi
#wl-showstatus build &&
# #mingw32-make compiler=gcc arch=$ARCH runtime=mingw -Csrc release &&
# #mingw32-make compiler=gcc arch=$ARCH runtime=mingw tbb tbbmalloc &&
# # remove dependancies and libstdc++-6.dll and libgcc_s_dw2-1.dll
# #mingw32-make compiler=gcc arch=$ARCH runtime=mingw tbb tbbmalloc CPLUS="g++ -static-libstdc++ -static-libgcc" &&
# mingw32-make compiler=gcc arch=$ARCH runtime=mingw tbb tbbmalloc CPLUS="g++ -std=c++98 -static-libstdc++ -static-libgcc" &&
# wl-showstatus build-install &&
# mkdir -p $INSTALLPREFIX/include $INSTALLPREFIX/bin $INSTALLPREFIX/lib &&
# cp -rf include/tbb $INSTALLPREFIX/include/ &&
# cp -f build/windows_$ARCH\_gcc_mingw_release/tbb*.dll $INSTALLPREFIX/bin/ &&
# #if [ ! -f build/windows_$ARCH\_gcc_mingw_release/tbbmalloc_proxy.def ]; then
# # pexports build/windows_$ARCH\_gcc_mingw_release/tbbmalloc_proxy.dll > build/windows_$ARCH\_gcc_mingw_release/tbbmalloc_proxy.def
# #fi &&
# for F in tbb tbbmalloc tbbmalloc_proxy; do
#  pexports build/windows_$ARCH\_gcc_mingw_release/$F.dll > build/windows_$ARCH\_gcc_mingw_release/_$F.def &&
#  dlltool -d build/windows_$ARCH\_gcc_mingw_release/_$F.def --dllname build/windows_$ARCH\_gcc_mingw_release/$F.dll --output-lib $INSTALLPREFIX/lib/lib$F.dll.a
# done &&
# #wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf tbb"$VERSION"
# #wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf oneTBB-$VERSION
#####TO DO: build 64-bit
#####TO DO: install TBBConfig.cmake from oneTBB-2020.0/cmake/templates/TBBConfig.cmake.in
#####mingw32-make[1]: *** No rule to make target `concurrent_hash_map.o', needed by `tbb_debug.dll'.  Stop.



export NAME="Intel(R) Threading Building Blocks (Intel(R) TBB)"
export STATUS=
export URL=http://threadingbuildingblocks.org/
export BASENAME=tbb
export DESCRIPTION="Intel(R) Threading Building Blocks (Intel(R) TBB) offers a rich and complete approach to expressing parallelism in a C++ program. It is a library that helps you take advantage of multi-core processor performance without having to be a threading expert. Intel TBB is not just a threads-replacement library. It represents a higher-level, task-based parallelism that abstracts platform details and threading mechanisms for scalability and performance."
export CATEGORY=system
export TYPE=library
#export VERSION=2021.4.1
#export VERSIONDATE=20231231
#export VERSION=2021.6.0
#export VERSIONDATE=20220921
#export VERSION=2021.7.0
#export VERSIONDATE=20221029
#export VERSION=2021.8.0
#export VERSIONDATE=20230217
#export VERSION=2021.9.0
#export VERSIONDATE=20230414
#export VERSION=2021.10.0
#export VERSIONDATE=20230725
#export VERSION=2021.11.0
#export VERSIONDATE=20231118
#export VERSION=2021.12.0
#export VERSIONDATE=20240413
export VERSION=2021.13.0
export VERSIONDATE=20240627
wl-showstatus --package-version
export DEPENDENCIES=
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE.txt
export LICENSETYPE=Apache
export DOWNLOADURL="https://github.com/oneapi-src/oneTBB/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/intel/tbb/archive/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
tar xz --force-local -f $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd oneTBB-$VERSION
## fix undefined _MCW_DN in include/oneapi/tbb/detail/_machine.h (version >= 2021.2.0)
#mv include/oneapi/tbb/detail/_machine.h include/oneapi/tbb/detail/_machine.h.bak &&
#echo "#undef __STRICT_ANSI__" > include/oneapi/tbb/detail/_machine.h &&
#cat include/oneapi/tbb/detail/_machine.h.bak >> include/oneapi/tbb/detail/_machine.h
## fix undefined IsThreadAFiber in src/tbb/co_context.h (version >= 2021.2.0)
#mv src/tbb/co_context.h src/tbb/co_context.h.bak
#cat > src/tbb/co_context.h << EOF
##if !defined(_WIN32_WINNT) || _WIN32_WINNT < 0x0600
##undef _WIN32_WINNT
##define _WIN32_WINNT 0x0600
##endif
#EOF
#cat src/tbb/co_context.h.bak >> src/tbb/co_context.h
## fix missing CreateSemaphoreA (version >= 2021.3.0)
#mv include/oneapi/tbb/detail/_utils.h include/oneapi/tbb/detail/_utils.h.bak
#cat > include/oneapi/tbb/detail/_utils.h << EOF
##if !defined(_WIN32_WINNT) || _WIN32_WINNT < 0x0600
##undef _WIN32_WINNT
##define _WIN32_WINNT 0x0600
##endif
#EOF
#cat include/oneapi/tbb/detail/_utils.h.bak >> include/oneapi/tbb/detail/_utils.h
# support ARM64 in src/tbbmalloc/TypeDefinitions.h (version >= 2021.10.0)
####Pull request: https://github.com/oneapi-src/oneTBB/pull/1245
patch -ulbf src/tbbmalloc/TypeDefinitions.h << EOF
@@ -27,3 +27,3 @@
 #       define __ARCH_x86_32 1
-#   elif defined(_M_ARM) || defined(_M_ARM64)
+#   elif defined(_M_ARM) || defined(_M_ARM64) || defined(__aarch64__)
 #       define __ARCH_other 1
EOF
## don't abort on watnings (version >= 2021.7.0)
#sed -i.bak -e "s/-Wall\|-Wextra\|-Wfatal-errors//g" cmake/compilers/GNU.cmake
# fix invalid -z compiler flag in cmake/compilers/GNU.cmake (version >= 2021.10.0)
sed -i.bak -e "s/-Wl,-z,relro,-z,now,-z,noexecstack//" cmake/compilers/GNU.cmake
# fix LLVM support in cmake/compilers/Clang.cmake (version >= 2021.10.0)
patch -ulbf cmake/compilers/Clang.cmake << EOF
@@ -54,3 +54,5 @@
                                                          -fstack-protector-strong -fPIC)
+if (NOT MINGW)
 set(TBB_LIB_LINK_FLAGS \${TBB_LIB_LINK_FLAGS} -Wl,-z,relro,-z,now)
+endif()

EOF
mkdir -p build_static build_shared &&
 wl-showstatus configure &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DTBB_WINDOWS_DRIVER:BOOL=OFF -DTBB4PY_BUILD:BOOL=OFF -DTBB_STRICT:BOOL=OFF -DTBB_EXAMPLES:BOOL=OFF -DTBB_TEST:BOOL=OFF -DTBB_TEST_SPEC:BOOL=OFF -DCMAKE_C_FLAGS:STRING="-ansi" -DCMAKE_CXX_FLAGS:STRING="-ansi -D_WIN32_WINNT=0x0600" -S. -Bbuild_static &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DTBB_WINDOWS_DRIVER:BOOL=OFF -DTBB4PY_BUILD:BOOL=OFF -DTBB_STRICT:BOOL=OFF -DTBB_EXAMPLES:BOOL=OFF -DTBB_TEST:BOOL=OFF -DTBB_TEST_SPEC:BOOL=OFF -DCMAKE_CXX_FLAGS:STRING="-D_WIN32_WINNT=0x0600" -S. -Bbuild_static &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DTBB_WINDOWS_DRIVER:BOOL=OFF -DTBB4PY_BUILD:BOOL=OFF -DTBB_STRICT:BOOL=OFF -DTBB_EXAMPLES:BOOL=OFF -DTBB_TEST:BOOL=OFF -DTBB_TEST_SPEC:BOOL=OFF -DCMAKE_CXX_FLAGS:STRING="-D_WIN32_WINNT=0x0600 $(if ${CC:-gcc} --version|grep -q clang; then echo "-femulated-tls"; fi) $(if ( echo $RUNPLATFORM | grep -vq x86_64 ); then echo "-msse4.1"; fi)" -S. -Bbuild_static &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DTBB_WINDOWS_DRIVER:BOOL=OFF -DTBB4PY_BUILD:BOOL=OFF -DTBB_STRICT:BOOL=OFF -DTBB_EXAMPLES:BOOL=OFF -DTBB_TEST:BOOL=OFF -DTBB_TEST_SPEC:BOOL=OFF -S. -Bbuild_static &&
 wl-showstatus configure &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DTBB_WINDOWS_DRIVER:BOOL=OFF -DTBB4PY_BUILD:BOOL=OFF -DTBB_STRICT:BOOL=OFF -DTBB_EXAMPLES:BOOL=OFF -DTBB_TEST:BOOL=OFF -DTBB_TEST_SPEC:BOOL=OFF -DCMAKE_C_FLAGS:STRING="-ansi" -DCMAKE_CXX_FLAGS:STRING="-ansi -D_WIN32_WINNT=0x0600" -S. -Bbuild_shared &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DTBB_WINDOWS_DRIVER:BOOL=OFF -DTBB4PY_BUILD:BOOL=OFF -DTBB_STRICT:BOOL=OFF -DTBB_EXAMPLES:BOOL=OFF -DTBB_TEST:BOOL=OFF -DTBB_TEST_SPEC:BOOL=OFF -DCMAKE_CXX_FLAGS:STRING="-D_WIN32_WINNT=0x0600" -S. -Bbuild_shared &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DTBB_WINDOWS_DRIVER:BOOL=OFF -DTBB4PY_BUILD:BOOL=OFF -DTBB_STRICT:BOOL=OFF -DTBB_EXAMPLES:BOOL=OFF -DTBB_TEST:BOOL=OFF -DTBB_TEST_SPEC:BOOL=OFF -DCMAKE_CXX_FLAGS:STRING="-D_WIN32_WINNT=0x0600 $(if ${CC:-gcc} --version|grep -q clang; then echo "-femulated-tls"; fi) $(if ( echo $RUNPLATFORM | grep -vq x86_64 ); then echo "-msse4.1"; fi)" -S. -Bbuild_shared &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DTBB_WINDOWS_DRIVER:BOOL=OFF -DTBB4PY_BUILD:BOOL=OFF -DTBB_STRICT:BOOL=OFF -DTBB_EXAMPLES:BOOL=OFF -DTBB_TEST:BOOL=OFF -DTBB_TEST_SPEC:BOOL=OFF -S. -Bbuild_shared &&
 wl-showstatus build-install &&
 ninja -Cbuild_static install/strip &&
 wl-showstatus build-install &&
 ninja -Cbuild_shared install/strip &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf oneTBB-$VERSION
####Note: only works in Windows 7 or higher




export NAME="Vulkan-Loader"
export STATUS=
export URL=https://github.com/KhronosGroup/Vulkan-Loader
export BASENAME=vulkan-loader
export DESCRIPTION="This project provides the Khronos official Vulkan ICD desktop loader for Windows, Linux, and MacOS."
export CATEGORY=graphics,hardware
export TYPE=library
#export VERSION=1.2.151
#export VERSIONDATE=20200818
#export VERSION=1.2.153
#export VERSIONDATE=20200908
####loader/loader.c:6044:5: error: unknown type name 'IDXGIFactory6'
#export VERSION=1.2.154
#export VERSIONDATE=20200922
#export VERSION=1.2.156
#export VERSIONDATE=20201007
#export VERSION=1.2.157
#export VERSIONDATE=20201016
#export VERSION=1.2.158
#export VERSIONDATE=20201027
#export VERSION=1.2.159
#export VERSIONDATE=20201105
#export VERSION=1.2.160
#export VERSIONDATE=20201112
#export VERSION=1.2.161
#export VERSIONDATE=20201118
#export VERSION=1.2.162
#export VERSIONDATE=20201124
#export VERSION=1.2.165
#export VERSIONDATE=20201223
#export VERSION=1.2.166
#export VERSIONDATE=20210106
#export VERSION=1.2.169
#export VERSIONDATE=20210210
#export VERSION=1.2.170
#export VERSIONDATE=20210216
#export VERSION=1.2.171
#export VERSIONDATE=20210303
#export VERSION=1.2.172
#export VERSIONDATE=20210311
#export VERSION=1.2.173
#export VERSIONDATE=20210324
#export VERSION=1.2.174
#export VERSIONDATE=20210330
#export VERSION=1.2.176
#export VERSIONDATE=20210421
#export VERSION=1.2.177
#export VERSIONDATE=20210430
#export VERSION=1.2.178
#export VERSIONDATE=20210512
#export VERSION=1.2.179
#export VERSIONDATE=20210525
#export VERSION=1.2.180
#export VERSIONDATE=20210608
#export VERSION=1.2.182
#export VERSIONDATE=20210622
#export VERSION=1.2.183
#export VERSIONDATE=20210701
#export VERSION=1.2.184
#export VERSIONDATE=20210707
#export VERSION=1.2.185
#export VERSIONDATE=20210721
#export VERSION=1.2.186
#export VERSIONDATE=20210728
#export VERSION=1.2.187
#export VERSIONDATE=20210804
#export VERSION=1.2.188
#export VERSIONDATE=20210811
#export VERSION=1.2.189
#export VERSIONDATE=20210818
#export VERSION=1.2.190
#export VERSIONDATE=20210831
####loader/unknown_ext_chain_masm.asm(115) : Error A2030: Instruction or register not accepted in current CPU mode
#export VERSION=1.2.191
#export VERSIONDATE=20210909
#export VERSION=1.2.192
#export VERSIONDATE=20210916
#export VERSION=1.2.193
#export VERSIONDATE=20210922
#export VERSION=1.2.194
#export VERSIONDATE=20210929
#export VERSION=1.2.195
#export VERSIONDATE=20211006
#export VERSION=1.2.196
#export VERSIONDATE=20211015
#export VERSION=1.2.203
#export VERSIONDATE=20220122
#export VERSION=1.3.204
#export VERSIONDATE=20220126
#export VERSION=1.3.205
#export VERSIONDATE=20220208
#export VERSION=1.3.206
#export VERSIONDATE=20220219
#export VERSION=1.3.207
#export VERSIONDATE=20220309
####loader/generated/vk_layer_dispatch_table.h:67:5: error: unknown type name 'PFN_vkGetPhysicalDeviceToolProperties'
#export VERSION=1.3.208
#export VERSIONDATE=20220316
export VERSION=1.3.209
export VERSIONDATE=20220324
wl-showstatus --package-version
export DEPENDANCIES=vulkan-headers
export OPTIONALDEPENDANCIES=
export BUILDDEPENDANCIES=cmake,ninja,jwasm
export LICENSEFILE=LICENSE.txt
export LICENSETYPE=Apache
#export DOWNLOADURL="https://github.com/KhronosGroup/Vulkan-Loader/releases"
export DOWNLOADURL="https://github.com/KhronosGroup/Vulkan-Loader/tags"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://github.com/KhronosGroup/Vulkan-Loader/archive/v$VERSION.tar.gz
export DOWNLOADSOURCEURL=https://github.com/KhronosGroup/Vulkan-Loader/archive/refs/tags/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xfz $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd Vulkan-Loader-$VERSION
# fix loader/loader.c (version >= 1.2.151)
patch -ulbf loader/loader.c << EOF
@@ -697,3 +697,7 @@
     static const wchar_t *displayGUID = L"{4d36e968-e325-11ce-bfc1-08002be10318}";
+#ifdef CM_GETIDLIST_FILTER_PRESENT
     const ULONG flags = CM_GETIDLIST_FILTER_CLASS | CM_GETIDLIST_FILTER_PRESENT;
+#else
+    const ULONG flags = CM_GET_DEVICE_INTERFACE_LIST_PRESENT;
+#endif

@@ -1676,2 +1680,3 @@
             }
+#undef strcpy
             strcpy(ext_list->list[idx].entrypoints[i], entrys[i]);
EOF
## fix loader/loader.c (version >= 1.2.154)
#mv loader/loader.c loader/loader.c.bak
#cat > loader/loader.c << EOF
##if WINVER < _WIN32_WINNT_WIN7
##undef WINVER
##define WINVER _WIN32_WINNT_WIN7
##endif
#EOF
#cat loader/loader.c.bak >> loader/loader.c
## fix loader/loader.rc (version = 1.2.153)
#patch -ulbf loader/loader.rc << EOF
#@@ -45,3 +45,2 @@
#
#-#include "winres.h"
#
#@@ -79,3 +78,2 @@
#  FILEOS 0x00000L
#- FILETYPE VFT_DLL
#  FILESUBTYPE 0x0L
#EOF
## fix for invalid jwasm parameter and also building static library in loader/CMakeLists.txt (version = 1.2.154)
#patch -ulbf loader/CMakeLists.txt << EOF
#@@ -137,4 +137,4 @@
#     if(CMAKE_ASM_MASM_COMPILER_WORKS)
#-        if(NOT CMAKE_CL_64)
#-            set(CMAKE_ASM_MASM_FLAGS \${CMAKE_ASM_MASM_FLAGS} /safeseh)
#+        if(NOT CMAKE_CL_64 AND NOT MINGW)
#+            set(CMAKE_ASM_MASM_FLAGS \\\${CMAKE_ASM_MASM_FLAGS} /safeseh)
#         endif()
#@@ -203,2 +203,10 @@
#                 \${CMAKE_CURRENT_SOURCE_DIR}/loader.rc)
#+    if(MINGW)
#+        add_library(vulkan_static
#+                    STATIC
#+                    \$<TARGET_OBJECTS:loader-opt>
#+                    \$<TARGET_OBJECTS:loader-norm>
#+                    \$<TARGET_OBJECTS:loader-unknown-chain>)
#+        set_target_properties(vulkan_static PROPERTIES OUTPUT_NAME vulkan)
#+    endif()
#     set_target_properties(vulkan
#@@ -318 +326,6 @@
#         RUNTIME DESTINATION \${CMAKE_INSTALL_BINDIR})
#+if(MINGW)
#+    install(TARGETS vulkan_static
#+            LIBRARY DESTINATION \${CMAKE_INSTALL_LIBDIR}
#+            ARCHIVE DESTINATION \${CMAKE_INSTALL_LIBDIR})
#+endif()
#EOF
## fix loader/loader.c (version >= 1.2.154)
#patch -ulbf loader/loader.c << EOF
#@@ -73,2 +73,5 @@
# #include <strsafe.h>
#+#ifdef __MINGW32__
#+#undef strcpy  // fix error with redfined strcpy when building with MinGW-w64
#+#endif
# #include <dxgi1_6.h>
#@@ -697,3 +700,7 @@
#     static const wchar_t *displayGUID = L"{4d36e968-e325-11ce-bfc1-08002be10318}";
#+#ifdef CM_GETIDLIST_FILTER_PRESENT
#     const ULONG flags = CM_GETIDLIST_FILTER_CLASS | CM_GETIDLIST_FILTER_PRESENT;
#+#else
#+    const ULONG flags = CM_GET_DEVICE_INTERFACE_LIST_PRESENT;
#+#endif
#
#EOF
## fix loader/CMakeLists.txt (version >= 1.2.154)
#patch -ulbf loader/CMakeLists.txt << EOF
#@@ -135,5 +135,21 @@
# if(WIN32)
#+    if(MINGW)
#+        find_program(JWASM_FOUND jwasm)
#+        if (JWASM_FOUND)
#+            set(CMAKE_ASM_MASM_COMPILER \${JWASM_FOUND})
#+            execute_process(COMMAND \${CMAKE_C_COMPILER} --version OUTPUT_VARIABLE COMPILER_VERSION_OUTPUT)
#+            if (COMPILER_VERSION_OUTPUT)
#+                if (COMPILER_VERSION_OUTPUT MATCHES "x86_64")
#+                    set(JWASM_FLAGS -win64)
#+                else()
#+                    set(JWASM_FLAGS -coff)
#+                endif()
#+            endif()
#+        endif()
#+    endif()
#     enable_language(ASM_MASM)
#-    if(CMAKE_ASM_MASM_COMPILER_WORKS)
#-        if(NOT CMAKE_CL_64)
#+    if(CMAKE_ASM_MASM_COMPILER_WORKS OR JWASM_FOUND)
#+        if(MINGW)
#+            set(CMAKE_ASM_MASM_FLAGS \${CMAKE_ASM_MASM_FLAGS} \${JWASM_FLAGS})
#+        elseif(NOT CMAKE_CL_64 AND NOT JWASM_FOUND)
#             set(CMAKE_ASM_MASM_FLAGS \${CMAKE_ASM_MASM_FLAGS} /safeseh)
#EOF
## fix missing winres.h in loader/loader.rc (version >= 1.2.161)
#echo "#include <winver.h>" > loader/winres.h
# avoid assembler on 32-bit (version >= 1.2.169)
if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then
 sed -i.bak -e "s/\(if(\)CMAKE_ASM_MASM_COMPILER_WORKS OR JWASM_FOUND/\1FALSE/" loader/CMakeLists.txt
fi
# don't use git (version >= 1.2.192)
sed -i.bak -e "s/^find_package (Git)/#&/" CMakeLists.txt
mkdir -p build_win &&
 wl-showstatus configure &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_LOADER:BOOL=ON -DCMAKE_ASM_MASM_COMPILER:FILEPATH=$(which jwasm.exe) -DCMAKE_ASM_MASM_FLAGS:STRING="$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "-win64"; else echo "-coff"; fi)" -DBUILD_TESTS:BOOL=OFF -S. -Bbuild_win &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_LOADER:BOOL=ON -DCMAKE_ASM_MASM_COMPILER:FILEPATH=$(which jwasm.exe) -DCMAKE_ASM_MASM_FLAGS:STRING="$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "-win64"; else echo "-coff"; fi)" -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DBUILD_TESTS:BOOL=OFF -S. -Bbuild_win &&
 PKG_CONFIG= cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_LOADER:BOOL=ON -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DBUILD_TESTS:BOOL=OFF -S. -Bbuild_win &&
 ## fix missing MASM (version <= 1.2.153)
 #sed -i.bak -e "s/\(command\s*=\s*\)ml\(\s\)/\1j$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "-win64"; else echo "-win32"; fi)wasm.exe\2/" build_win/CMakeFiles/rules.ninja &&
 ## fix assembler command line parameters (version >= 1.2.169)
 #sed -i.bak -e "s? /c /Fo ? -c -Fo ?" build_win/CMakeFiles/rules.ninja &&
 wl-showstatus build-install &&
 #ninja -Cbuild_win install/strip &&
 ( ninja -Cbuild_win install/strip || ( ls -1 build_win/loader/CMakeFiles/loader-unknown-chain.dir/unknown_ext_chain_masm.asm.obj > /dev/null && sed -i.bak -e "s/\(command\s*=\s*\).*jwasm\.exe/\1true/" build_win/CMakeFiles/rules.ninja && ninja -Cbuild_win install/strip )) &&
 ## fix missing -lvulkan-1 in vulkan.pc (version <= 1.2.182)
 #sed -i "s/\(-lvulkan\)-[0-9]*$/\1/" $INSTALLPREFIX/lib/pkgconfig/vulkan.pc &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf Vulkan-Loader-$VERSION
####Note: requires MinGW-w64 8.0.0 or higher
####Note: doesn't build on 32-bit Windows




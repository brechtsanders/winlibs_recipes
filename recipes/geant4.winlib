export NAME="Geant4"
export STATUS=
export URL=https://geant4.web.cern.ch/
export BASENAME=geant4
export DESCRIPTION="Geant4 is a toolkit for the simulation of the passage of particles through matter. Its areas of application include high energy, nuclear and accelerator physics, as well as studies in medical and space science."
export CATEGORY=science
export TYPE=library
#export VERSION=11.0.4
#export VERSIONDATE=20230314
#export VERSION=11.1.0
#export VERSIONDATE=20230123
#export VERSION=11.1.1
#export VERSIONDATE=20230215
export VERSION=11.1.2
export VERSIONDATE=20230620
wl-showstatus --package-version
export DEPENDENCIES=pthreads,zlib,xerces,clhep,qt
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=
export DOWNLOADURL="https://github.com/Geant4/geant4/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/Geant4/geant4/archive/refs/tags/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd $BASENAME-$VERSION
# fix missing setenv in source/global/management/src/G4FindDataDir.cc (version >= 11.1.0)
patch -ulbf source/global/management/src/G4FindDataDir.cc << EOF
@@ -86,3 +86,7 @@
     if (is_directory(absolute(datadir)))
+#ifdef _WIN32
+      return absolute(datadir).string().c_str();
+#else
       return setenv(name, absolute(datadir).string().c_str(), 0) == 0 ? std::getenv(name) : nullptr;
+#endif
   }
EOF
# fix source/run/src/G4WorkerThread.cc (version >= 11.1.2)
patch -ulbf source/run/src/G4WorkerThread.cc << EOF
@@ -30,2 +30,3 @@

+#include <pthread.h>
 #include "G4WorkerThread.hh"
@@ -244,3 +245,3 @@
   // Avoid compilation warning in C90 standard w/o MT
-  G4NativeThread t = pthread_self();
+  G4NativeThread t = (G4NativeThread)pthread_self();
 #  else
EOF
mkdir -p build_win &&
 wl-showstatus configure &&
 #PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DGEANT4_INSTALL_DATA:BOOL=ON -DGEANT4_USE_QT:BOOL=ON -DGEANT4_USE_SYSTEM_ZLIB:BOOL=ON -DGEANT4_USE_SYSTEM_CLHEP:BOOL=ON -DCMAKE_CXX_FLAGS:STRING="-D_USE_MATH_DEFINES" -DCMAKE_SHARED_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition" -S. -Bbuild_win &&
 PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DBUILD_STATIC_LIBS:BOOL=ON -DGEANT4_INSTALL_DATA:BOOL=ON -DGEANT4_USE_QT:BOOL=ON -DGEANT4_USE_GDML:BOOL=ON -DGEANT4_USE_SYSTEM_ZLIB:BOOL=ON -DGEANT4_USE_SYSTEM_CLHEP:BOOL=ON -DCMAKE_CXX_FLAGS:STRING="-D_USE_MATH_DEFINES" -DCMAKE_SHARED_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition" -S. -Bbuild_win &&
 #-DGEANT4_USE_GDML:BOOL=ON 
 wl-showstatus build-install &&
 ninja -Cbuild_win install/strip &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DGEANT4_INSTALL_DATA:BOOL=ON -DGEANT4_USE_QT:BOOL=ON -DGEANT4_USE_SYSTEM_ZLIB:BOOL=ON -DGEANT4_USE_SYSTEM_CLHEP:BOOL=ON -DCMAKE_CXX_FLAGS:STRING="-D_USE_MATH_DEFINES" -DCMAKE_SHARED_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition" -S. -Bbuild_static &&
# #-DGEANT4_USE_GDML:BOOL=ON 
# #-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
# wl-showstatus configure &&
# PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DGEANT4_INSTALL_DATA:BOOL=ON -DGEANT4_USE_QT:BOOL=ON -DGEANT4_USE_SYSTEM_ZLIB:BOOL=ON -DGEANT4_USE_SYSTEM_CLHEP:BOOL=ON -DCMAKE_CXX_FLAGS:STRING="-D_USE_MATH_DEFINES" -DCMAKE_SHARED_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition" -S. -Bbuild_shared &&
# ## fix execution of Python scripts
# #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|glib-genmarshal\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
# ## fix missing link libraries
# #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lws2_32/" build_shared/build.ninja &&
# #wl-showstatus build &&
# #cmake.exe --build build_static &&
# #ninja -Cbuild_static &&
# #wl-showstatus build &&
# #cmake.exe --build build_shared &&
# #ninja -Cbuild_shared &&
# wl-showstatus build-install &&
# #cmake.exe --install build_static --strip &&
# #cmake.exe --build build_static --target "install/strip" &&
# #cmake.exe --build build_static --target "library/install/strip" &&
# #ninja -Cbuild_static install/strip &&
# ninja -Cbuild_static library/install/strip &&
# wl-showstatus build-install &&
# ninja -Cbuild_shared install/strip &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




export NAME="Clazy"
export STATUS=
export URL=https://apps.kde.org/clazy/
export BASENAME=clazy
#export DESCRIPTION="Clazy is a clang compiler plugin which emits warnings related to Qt best practices."
export DESCRIPTION="Qt-oriented static code analyzer based on the Clang framework"
export CATEGORY=development
export TYPE=application
#export VERSION=1.11
#export VERSIONDATE=20230802
#export VERSION=1.12
#export VERSIONDATE=20240701
#export VERSION=1.13
#export VERSIONDATE=20241229
#export VERSION=1.14
#export VERSIONDATE=20250428
export VERSION=1.15
export VERSIONDATE=20250613
wl-showstatus --package-version
export DEPENDENCIES=llvm-project
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=COPYING-LGPL2.txt
export LICENSETYPE=LGPL
export DOWNLOADURL="https://github.com/KDE/clazy/tags"
#export DOWNLOADURL="https://invent.kde.org/sdk/clazy/-/tags"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://github.com/KDE/clazy/archive/refs/tags/v$VERSION.tar.gz
#export DOWNLOADSOURCEURL=https://invent.kde.org/sdk/clazy/-/archive/v$VERSION/clazy-v$VERSION.tar.bz2
#export DOWNLOADSOURCEURL=https://github.com/KDE/clazy/archive/refs/tags/$VERSION.tar.gz
export DOWNLOADSOURCEURL=https://invent.kde.org/sdk/clazy/-/archive/$VERSION/$BASENAME-$VERSION.tar.bz2
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
#tar xz --force-local -f $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
#tar xz --force-local -f $TARBALLDIR/$BASENAME/$VERSION.tar.gz
tar xj --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.bz2
cd $BASENAME-$VERSION
# fix src/SourceCompatibilityHelpers.h (version >= 1.11)
patch -ulbf src/SourceCompatibilityHelpers.h << EOF
@@ -111,3 +111,3 @@
     auto buffer = sm.getBufferOrNone(id);
-    *invalid = !buffer.hasValue();
+    *invalid = !buffer.has_value();
     return buffer;
@@ -121,3 +121,3 @@
 #define GET_LEXER(id, inputFile, sm, lo) \\
-clang::Lexer(id, inputFile.getValue(), sm, lo)
+clang::Lexer(id, inputFile.value(), sm, lo)

EOF
# fix src/checkbase.h (version >= 1.11)
patch -ulbf src/checkbase.h << EOF
@@ -94,3 +94,3 @@
                             clang::CharSourceRange FilenameRange, const clang::FileEntry *File, clang::StringRef SearchPath,
-                            clang::StringRef RelativePath, const clang::Module *Imported, clang::SrcMgr::CharacteristicKind FileType) override;
+                            clang::StringRef RelativePath, const clang::Module *Imported, clang::SrcMgr::CharacteristicKind FileType);
 private:
EOF
# fix src/PreProcessorVisitor.h (version >= 1.11)
patch -ulbf src/PreProcessorVisitor.h << EOF
@@ -74,3 +74,3 @@
                              const clang::FileEntry *File, clang::StringRef SearchPath, clang::StringRef RelativePath,
-                             const clang::Module *Imported, clang::SrcMgr::CharacteristicKind FileType) override;
+                             const clang::Module *Imported, clang::SrcMgr::CharacteristicKind FileType);
 private:
EOF
# fix src/Utils.cpp (version >= 1.11)
patch -ulbf src/Utils.cpp << EOF
@@ -672,3 +672,3 @@
     // 'Ã©' for some reason has isAscii() == true, so also call containsNonAsciiOrNull
-    return lt && lt->isAscii() && !lt->containsNonAsciiOrNull();
+    return lt && lt->isOrdinary() && !lt->containsNonAsciiOrNull();
 }
EOF
mkdir -p build_win &&
 wl-showstatus configure &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DLLVM_CONFIG_EXECUTABLE:FILEPATH=$MINGWPREFIX/share/llvm/bin/llvm-config.exe -DCMAKE_CXX_FLAGS:STRING="-fpermissive" -S. -Bbuild_win &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DLLVM_CONFIG_EXECUTABLE:FILEPATH=$MINGWPREFIX/share/llvm/bin/llvm-config.exe -DCMAKE_CXX_FLAGS:STRING="-fpermissive" -DCMAKE_SHARED_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition" -DCMAKE_EXE_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition" -S. -Bbuild_win &&
 wl-showstatus build-install &&
 ninja -Cbuild_win install/strip &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
####PATH=$MINGWPREFIX/share/llvm/bin:$PATH clazy-standalone.exe -h




export NAME="cppfs"
export STATUS=
export URL=https://github.com/cginternals/cppfs
export BASENAME=cppfs
export DESCRIPTION="cppfs is a cross-platform C++ library that provides an object-oriented abstraction for working with files and the file system."
export CATEGORY=
export TYPE=library
export VERSION=1.3.0
export VERSIONDATE=20240127
wl-showstatus --package-version
export DEPENDENCIES=zlib,libssh2,openssl
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=MIT
#export DOWNLOADURL="https://github.com/cginternals/cppfs/releases"
export DOWNLOADURL="https://github.com/cginternals/cppfs/tags"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/cginternals/cppfs/archive/refs/tags/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd $BASENAME-$VERSION
mkdir -p build_static build_shared &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DOPTION_BUILD_SSH_BACKEND:BOOL=ON -DOPTION_PACK_GENERATOR:STRING= -DOPTION_BUILD_EXAMPLES:BOOL=OFF -DOPTION_BUILD_TESTS:BOOL=OFF -DCMAKE_POLICY_VERSION_MINIMUM:STRING=3.5 -S. -Bbuild_static &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DOPTION_BUILD_SSH_BACKEND:BOOL=ON -DOPTION_PACK_GENERATOR:STRING= -DOPTION_BUILD_EXAMPLES:BOOL=OFF -DOPTION_BUILD_TESTS:BOOL=OFF -DCMAKE_POLICY_VERSION_MINIMUM:STRING=3.5 -S. -Bbuild_shared &&
 wl-showstatus build-install &&
 ninja -Cbuild_static install/strip &&
 wl-showstatus build-install &&
 ninja -Cbuild_shared install/strip &&
 mkdir -p $INSTALLPREFIX/bin &&
 mv $INSTALLPREFIX/*.dll $INSTALLPREFIX/bin/ &&
 sed -e "s?\(\${CMAKE_CURRENT_LIST_DIR}/\)\${PREFIX}/\${module_name}/?\1?" $INSTALLPREFIX/cppfs-config.cmake > $INSTALLPREFIX/cmake/cppfs/cppfs-config.cmake &&
 find $INSTALLPREFIX -maxdepth 1 -and -type f -exec echo rm -f {} \; | sh &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




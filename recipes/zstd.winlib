#export NAME="Zstandard"
#export STATUS=
#export URL=http://www.zstd.net
##export URL=http://facebook.github.io/zstd/
#export BASENAME=zstd
#export DESCRIPTION="Zstandard is a real-time compression algorithm, providing high compression ratios. It offers a very wide range of compression / speed trade-off, while being backed by a very fast decoder. It also offers a special mode for small data, called dictionary compression, and can create dictionaries from any sample set. Zstandard library is provided as open source software using a BSD license."
#export CATEGORY=compression
#export TYPE=library
##export VERSION=1.1.2
##export VERSIONDATE=20170107
##export VERSION=1.1.3
##export VERSIONDATE=20170207
##export VERSION=1.1.4
##export VERSIONDATE=20170318
#####make: *** No rule to make target 'libzstd.pc'.  Stop.
##export VERSION=1.2.0
##export VERSIONDATE=20170505
##export VERSION=1.3.0
##export VERSIONDATE=20170706
##export VERSION=1.3.1
##export VERSIONDATE=20170821
##export VERSION=1.3.2
##export VERSIONDATE=20171010
##export VERSION=1.3.3
##export VERSIONDATE=20171221
##export VERSION=1.3.4
##export VERSIONDATE=20180327
##export VERSION=1.3.5
##export VERSIONDATE=20180629
##export VERSION=1.3.6
##export VERSIONDATE=20181006
##export VERSION=1.3.7
##export VERSIONDATE=20181020
##export VERSION=1.3.8
##export VERSIONDATE=20181228
##export VERSION=1.4.0
##export VERSIONDATE=20190417
##export VERSION=1.4.1
##export VERSIONDATE=20190720
##export VERSION=1.4.2
##export VERSIONDATE=20190726
##export VERSION=1.4.3
##export VERSIONDATE=20190820
##export VERSION=1.4.4
##export VERSIONDATE=20191106
#export VERSION=1.4.5
#export VERSIONDATE=20200522
#####programs/util.h:504:9: error: unknown type name 'LPFN_GLPI'
#wl-showstatus --package-version
##export DEPENDENCIES=
#export DEPENDENCIES=zlib,xz,liblz4
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=
#export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=LICENSE
#export LICENSETYPE=BSD
#export DOWNLOADURL="https://github.com/facebook/zstd/releases/"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://github.com/facebook/zstd/archive/v$VERSION.tar.gz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
##mv $TARBALLDIR/$BASENAME/v$VERSION.tar.gz $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
#wl-wait4deps
#wl-showstatus extract
##tar xfz $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
#tar xfz $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
#cd $BASENAME-$VERSION
## fix missing debug.h in lib/legacy/zstd_v04.c (version = 1.4.5)
#####see also: https://github.com/facebook/zstd/issues/2164
#patch -ulbf lib/legacy/zstd_v04.c << EOF
#@@ -76,3 +76,3 @@
# ***************************************/
#-#include "debug.h"
#+#include "../common/debug.h"
# #ifndef assert
#EOF
## fix already defined ERROR in contrib/pzstd/Logging.h (version >= 1.4.5)
#####see also: https://github.com/facebook/zstd/issues/2165
#mv contrib/pzstd/Logging.h contrib/pzstd/Logging.h.bak &&
#echo "#define ERROR ZSTD_ERROR" > contrib/pzstd/Logging.h &&
#cat contrib/pzstd/Logging.h.bak >> contrib/pzstd/Logging.h
## fix using gcc instead of cc in contrib/single_file_libs/build_decoder_test.sh and contrib/single_file_libs/build_library_test.sh (version >= 1.4.5)
#sed -i.bak -e "s/^cc /gcc /" contrib/single_file_libs/build_decoder_test.sh contrib/single_file_libs/build_library_test.sh
### fix building libzstd.pc (version <= 1.1.2)
##patch -ulbf lib/Makefile << EOF
##--- lib/Makefile  2016-12-14 14:53:47.000000000 +0100
##+++ lib/Makefile  2017-01-07 23:14:37.130189200 +0100
##@@ -97 +97 @@
##-ifneq (,\$(filter \$(shell uname),Linux Darwin GNU/kFreeBSD GNU FreeBSD DragonFly NetBSD))
##+ifneq (,\$(filter \$(shell uname),Linux Darwin GNU/kFreeBSD GNU FreeBSD DragonFly NetBSD $(uname)))
##EOF
## fix building libzstd.pc (version >= 1.1.3)
#patch -ulbf lib/Makefile << EOF
#@@ -100,3 +100,3 @@
#-ifneq (,\$(filter \$(shell uname),Linux Darwin GNU/kFreeBSD GNU OpenBSD FreeBSD NetBSD DragonFly SunOS))
#+ifneq (,\$(filter \$(shell uname),Linux Darwin GNU/kFreeBSD GNU OpenBSD FreeBSD NetBSD DragonFly SunOS $(uname)))
#EOF
## fix building libzstd.pc (version >= 1.1.6)
#sed -i.bak -e "s/\(ifneq.*,\)\(Linux\)/\1$(uname) \2/; s/@ln -sf/#&/" lib/Makefile
## don't create soft links (version >= 1.4.5)
#sed -i.bak2 -e "s/ln -sf/cp -f/" lib/Makefile
### work around problem launching generate_res.bat
##windres -Ilib -Iprograms/windres -iprograms/windres/zstd.rc -O coff -F pe-i386 -oprograms/windres/zstd32.res
##windres -Ilib -Iprograms/windres -iprograms/windres/zstd.rc -O coff -F pe-x86-64 -oprograms/windres/zstd64.res
##mv programs/Makefile programs/Makefile.bak &&
##sed -e "s?windres/generate_res\.bat?#&?" programs/Makefile.bak > programs/Makefile
#wl-showstatus build &&
# #make HAVE_THREAD=1 HAVE_ZLIB=1 HAVE_LZMA=1 HAVE_LZ4=1 ZSTD_LEGACY_SUPPORT=1 CC=${CC:-gcc} &&
# make lib-all zstd-release HAVE_THREAD=1 HAVE_ZLIB=1 HAVE_LZMA=1 HAVE_LZ4=1 ZSTD_LEGACY_SUPPORT=1 CC=${CC:-gcc} SHARED_EXT_MAJOR=a SHARED_EXT=a SHARED_EXT_VER=dll.a &&
# strip lib/dll/*.dll &&
# strip programs/*.exe &&
# make -Clib libzstd.pc PREFIX=$INSTALLPREFIX CC=${CC:-gcc} &&
# #mv -f lib/dll/libzstd.lib lib/libzstd.dll.a &&
# make man CC=${CC:-gcc} &&
# wl-showstatus install &&
# #make -Clib install PREFIX=$INSTALLPREFIX CC=${CC:-gcc} SHARED_EXT_MAJOR=a SHARED_EXT=a SHARED_EXT_VER=dll.a &&
# make -Clib install PREFIX=$INSTALLPREFIX HAVE_THREAD=1 HAVE_ZLIB=1 HAVE_LZMA=1 HAVE_LZ4=1 ZSTD_LEGACY_SUPPORT=1 CC=${CC:-gcc} SHARED_EXT_MAJOR=a SHARED_EXT=a SHARED_EXT_VER=dll.a &&
# mkdir -p $INSTALLPREFIX/bin $INSTALLPREFIX/man/man1 &&
# #cp -f lib/dll/*.dll programs/*.exe $INSTALLPREFIX/bin/ &&
# cp -u programs/*.exe $INSTALLPREFIX/bin/ &&
# mv -f $INSTALLPREFIX/lib/*.dll $INSTALLPREFIX/bin/ &&
# #cp -u lib/*.a $INSTALLPREFIX/lib/ &&
# cp -u lib/dll/*.a $INSTALLPREFIX/lib/ &&
# cp -f programs/*.1 $INSTALLPREFIX/man/man1/ &&
# # install .cmake files
# mkdir -p $INSTALLPREFIX/lib/cmake/zstd &&
# cp -f build/cmake/CMakeModules/*.cmake $INSTALLPREFIX/lib/cmake/zstd/ &&
# #cp -f build/cmake/zstdConfig.cmake $INSTALLPREFIX/lib/cmake/zstd/ &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION



#export NAME="Zstandard"
#export STATUS=
#export URL=http://www.zstd.net
##export URL=http://facebook.github.io/zstd/
#export BASENAME=zstd
#export DESCRIPTION="Zstandard is a real-time compression algorithm, providing high compression ratios. It offers a very wide range of compression / speed trade-off, while being backed by a very fast decoder. It also offers a special mode for small data, called dictionary compression, and can create dictionaries from any sample set. Zstandard library is provided as open source software using a BSD license."
#export CATEGORY=compression
#export TYPE=library
#export VERSION=1.4.5
#export VERSIONDATE=20200522
#wl-showstatus --package-version
#export DEPENDENCIES=zlib,xz,liblz4
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=cmake
#export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=LICENSE
#export LICENSETYPE=BSD
#export DOWNLOADURL="https://github.com/facebook/zstd/releases/"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://github.com/facebook/zstd/archive/v$VERSION.tar.gz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#wl-showstatus extract
#tar xfz $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
#cd $BASENAME-$VERSION
## fix already defined ERROR in contrib/pzstd/Logging.h (version >= 1.4.5)
#patch -ulbf contrib/pzstd/Logging.h << EOF
#@@ -15,2 +15,3 @@
#
#+#undef ERROR
# constexpr int ERROR = 1;
#EOF
## fix build/cmake/lib/CMakeLists.txt (version >= 1.4.5)
#patch -ulbf build/cmake/lib/CMakeLists.txt << EOF
#@@ -136,3 +136,3 @@
#
#-if (UNIX)
#+if (UNIX OR MINGW)
#     # pkg-config
#EOF
#mkdir -p build_win &&
# wl-showstatus configure &&
# #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DZSTD_BUILD_SHARED:BOOL=ON -DZSTD_BUILD_STATIC:BOOL=ON -DZSTD_ZLIB_SUPPORT:BOOL=ON -DZSTD_LZMA_SUPPORT:BOOL=ON -DZSTD_LZ4_SUPPORT:BOOL=ON -DZSTD_LEGACY_SUPPORT:BOOL=OFF -DZSTD_BUILD_TESTS:BOOL=OFF -Sbuild/cmake -Bbuild_win &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DZSTD_BUILD_SHARED:BOOL=ON -DZSTD_BUILD_STATIC:BOOL=ON -DZSTD_PROGRAMS_LINK_SHARED:BOOL=ON -DZSTD_BUILD_CONTRIB:BOOL=ON -DZSTD_ZLIB_SUPPORT:BOOL=ON -DZSTD_LZMA_SUPPORT:BOOL=ON -DZSTD_LZ4_SUPPORT:BOOL=ON -DZSTD_LEGACY_SUPPORT:BOOL=ON -DZSTD_BUILD_TESTS:BOOL=OFF -Sbuild/cmake -Bbuild_win &&
# wl-showstatus build-install &&
# ninja -Cbuild_win install/strip &&
# strip build_win/lib/libzstd.dll &&
# cp -u build_win/lib/libzstd.dll $INSTALLPREFIX/bin/ &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION



#export NAME="Zstandard"
#export STATUS=
#export URL=http://www.zstd.net
##export URL=http://facebook.github.io/zstd/
#export BASENAME=zstd
#export DESCRIPTION="Zstandard is a real-time compression algorithm, providing high compression ratios. It offers a very wide range of compression / speed trade-off, while being backed by a very fast decoder. It also offers a special mode for small data, called dictionary compression, and can create dictionaries from any sample set. Zstandard library is provided as open source software using a BSD license."
#export CATEGORY=compression
#export TYPE=library
##export VERSION=1.4.5
##export VERSIONDATE=20200522
##export VERSION=1.4.7
##export VERSIONDATE=20201217
##export VERSION=1.4.8
##export VERSIONDATE=20201219
##export VERSION=1.4.9
##export VERSIONDATE=20210304
#export VERSION=1.5.0
#export VERSIONDATE=20210515
#wl-showstatus --package-version
#export DEPENDENCIES=zlib,xz,liblz4
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=meson,ninja
#export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=LICENSE
#export LICENSETYPE=BSD
#export DOWNLOADURL="https://github.com/facebook/zstd/releases/"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://github.com/facebook/zstd/archive/v$VERSION.tar.gz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#wl-showstatus extract
#tar xfz $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
#cd $BASENAME-$VERSION
## fix already defined ERROR in contrib/pzstd/Logging.h (version >= 1.4.5)
#patch -ulbf contrib/pzstd/Logging.h << EOF
#@@ -15,2 +15,3 @@
#
#+#undef ERROR
# constexpr int ERROR = 1;
#EOF
## copy instead of creating symbolic links in build/meson/InstallSymlink.py (version >= 1.4.5)
#patch -ulbf build/meson/InstallSymlink.py << EOF
#@@ -13,2 +13,3 @@
# import pathlib  # since Python 3.4
#+import shutil
#
#@@ -25,4 +26,7 @@
#     return
#-  print('Installing symlink {!r} -> {!r}'.format(new_dst, src))
#-  new_dst.symlink_to(src, target_is_directory=dst_is_dir)
#+  print('Installing copy {!r} -> {!r}'.format(new_dst, src))
#+  if not dst_is_dir:
#+    shutil.copy(install_dir.joinpath(src), new_dst)
#+  else:
#+    shutil.copytree(install_dir.joinpath(src), new_dst)
#
#EOF
#mkdir -p build_both &&
# wl-showstatus configure &&
# PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Dzlib=enabled -Dlzma=enabled -Dlz4=enabled -Dmulti_thread=enabled -Dbin_programs=true -Dbin_contrib=true -Dbin_tests=false build/meson build_both &&
# wl-showstatus build-install &&
# PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib ninja -Cbuild_both install &&
# ## manually install deprecated headers (version >= 1.4.7)
# #cp -u lib/deprecated/*.h $INSTALLPREFIX/include/ &&
# ## manually install .cmake files (version >= 1.4.7)
# #mkdir -p $INSTALLPREFIX/lib/cmake/zstd &&
# #echo "find_package(PkgConfig)" > $INSTALLPREFIX/lib/cmake/zstd/zstdConfig.cmake &&
# #echo "pkg_check_modules(ZSTD libzstd IMPORTED_TARGET GLOBAL)" >> $INSTALLPREFIX/lib/cmake/zstd/zstdConfig.cmake &&
# ##cp -u build/cmake/CMakeModules/*.cmake $INSTALLPREFIX/lib/cmake/zstd/ &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION



export NAME="Zstandard"
export STATUS=
export URL=http://www.zstd.net
#export URL=http://facebook.github.io/zstd/
export BASENAME=zstd
export DESCRIPTION="Zstandard is a real-time compression algorithm, providing high compression ratios. It offers a very wide range of compression / speed trade-off, while being backed by a very fast decoder. It also offers a special mode for small data, called dictionary compression, and can create dictionaries from any sample set. Zstandard library is provided as open source software using a BSD license."
export CATEGORY=compression
export TYPE=library
#export VERSION=1.5.0
#export VERSIONDATE=20210515
#export VERSION=1.5.1
#export VERSIONDATE=20211221
#export VERSION=1.5.2
#export VERSIONDATE=20220121
export VERSION=1.5.4
export VERSIONDATE=20230210
wl-showstatus --package-version
export DEPENDENCIES=zlib,xz,liblz4
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=BSD
export DOWNLOADURL="https://github.com/facebook/zstd/releases/"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/facebook/zstd/archive/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xfz $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd $BASENAME-$VERSION
# fix makefiles
sed -i.bak -e "s/ifneq (,\$(filter \(\$(shell uname)\|\$(UNAME)\),Linux /&$(uname) /" $(grep -l "ifneq (,\$(filter \(\$(shell uname)\|\$(UNAME)\),Linux " $(find -name Makefile))
sed -i.bak2 -e "s/ln -sf/#&/" lib/Makefile
sed -i.bak2 -e "s/ln -sf/cp -f/" programs/Makefile
wl-showstatus build-install &&
 make install CC=${CC:-gcc} TARGET_SYSTEM=Windows prefix=$INSTALLPREFIX &&
 make -Ccontrib/pzstd install CC=${CC:-gcc} PREFIX=$INSTALLPREFIX &&
 make -Cprograms zstd-frugal CC=${CC:-gcc} TARGET_SYSTEM=Windows &&
 cp -u lib/dll/*.dll.a $INSTALLPREFIX/lib/ &&
 cp -u programs/zstd-frugal.exe $INSTALLPREFIX/bin/ &&
 mv -f $INSTALLPREFIX/lib/*.dll $INSTALLPREFIX/bin/ &&
 strip $INSTALLPREFIX/bin/*.{dll,exe} &&
 cp -u $INSTALLPREFIX/lib/pkgconfig/libzstd.pc $INSTALLPREFIX/lib/pkgconfig/zstd.pc &&
 # manually provide zstdConfig.cmake (version >= 1.5.2)
 mkdir -p $INSTALLPREFIX/cmake &&
 echo "INCLUDE(FindPkgConfig)" > $INSTALLPREFIX/cmake/zstdConfig.cmake &&
 echo "PKG_SEARCH_MODULE(libzstd zstd)" >> $INSTALLPREFIX/cmake/zstdConfig.cmake &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
####TO DO: fix missing share/man/man1/zstdmt.1



#export BUILDDEPENDENCIES=cmake,ninja
#export OPTIONALBUILDDEPENDENCIES=
#mkdir -p build_win &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DZSTD_BUILD_STATIC:BOOL=ON -DZSTD_BUILD_SHARED:BOOL=ON -DZSTD_LEGACY_SUPPORT:BOOL=ON -DZSTD_ZLIB_SUPPORT:BOOL=ON -DZSTD_LZ4_SUPPORT:BOOL=ON -DZSTD_LZMA_SUPPORT:BOOL=ON -DZSTD_BUILD_CONTRIB:BOOL=ON -DZSTD_BUILD_PROGRAMS:BOOL=ON -DZSTD_PROGRAMS_LINK_SHARED:BOOL=ON -DZSTD_BUILD_TESTS:BOOL=ON -Sbuild/cmake -Bbuild_win &&
# wl-showstatus build-install &&
# ninja -Cbuild_win install/strip &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION

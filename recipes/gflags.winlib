export NAME="gflags"
export STATUS=
export URL=https://gflags.github.io/gflags/
#export URL=https://github.com/gflags/gflags
export BASENAME=gflags
#export DESCRIPTION="gflags (formerly Google Commandline Flags)"
export DESCRIPTION="The gflags package contains a C++ library that implements commandline flags processing. It includes built-in support for standard types such as string and the ability to define flags in the source file in which they are used."
export CATEGORY=development
export TYPE=library
#export VERSION=2.1.2
#export VERSIONDATE=20160101
#export VERSION=2.2.0
#export VERSIONDATE=20161126
#export VERSION=2.2.1
#export VERSIONDATE=20170712
export VERSION=2.2.2
export VERSIONDATE=20181112
wl-showstatus --package-version
export DEPENDENCIES=pthreads
export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=cmake
#export OPTIONALBUILDDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=COPYING.txt
export LICENSETYPE=
export DOWNLOADURL="https://github.com/gflags/gflags/releases v"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/gflags/gflags/archive/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#mv $TARBALLDIR/$BASENAME/v$VERSION.tar.gz $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
wl-wait4deps
wl-showstatus extract
#tar xz --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
tar xz --force-local -f $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd $BASENAME-$VERSION
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -S. -Bbuild_static &&
# wl-showstatus configure &&
# cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -S. -Bbuild_shared &&
# mkdir -p $INSTALLPREFIX/include $INSTALLPREFIX/lib $INSTALLPREFIX/bin $INSTALLPREFIX/cmake &&
# wl-showstatus build-install &&
# make -Cbuild_static install/strip &&
# wl-showstatus build-install &&
# make -Cbuild_shared install/strip &&
# ## fix location of DLLs in cmake files (version <= 2.1.2)
# #cp -f $INSTALLPREFIX/cmake/gflags-export-release.cmake gflags-export-release.cmake.bak &&
# ##sed -e "s?/Lib\(/libgflags[_a-z]*.dll\)?/bin\1?g; s?/bin\(/libgflags[_a-z]*.dll.a\)?/lib\1?g" gflags-export-release.cmake.bak > $INSTALLPREFIX/cmake/gflags-export-release.cmake &&
# #sed -e "s?/Lib\(/libgflags[_a-z]*.dll\"\)?/bin\1?g; s?/Lib/?/lib/?g" gflags-export-release.cmake.bak > $INSTALLPREFIX/cmake/gflags-export-release.cmake &&
# ## move DLLs to the right location (version <= 2.2.0)
# #mv -f $INSTALLPREFIX/lib/*.dll $INSTALLPREFIX/bin/ &&
# # fix location of DLLs in cmake files (version >= 2.2.0)
# for F in $(grep -l "/Lib/libgflags[_a-z]*.dll\"" $INSTALLPREFIX/cmake/*.cmake); do
#  sed -i -e "s?/Lib\(/libgflags[_a-z]*.dll\"\)?/bin\1?g; s?/Lib/?/lib/?g" $F
# done &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
mkdir -p build_static build_shared &&
 wl-showstatus configure &&
 cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DCMAKE_POLICY_VERSION_MINIMUM:STRING=3.5 -S. -Bbuild_static &&
 wl-showstatus configure &&
 cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DCMAKE_POLICY_VERSION_MINIMUM:STRING=3.5 -S. -Bbuild_shared &&
 mkdir -p $INSTALLPREFIX/include $INSTALLPREFIX/lib $INSTALLPREFIX/bin $INSTALLPREFIX/cmake &&
 wl-showstatus build-install &&
 ninja -Cbuild_static install/strip &&
 wl-showstatus build-install &&
 ninja -Cbuild_shared install/strip &&
 ## fix location of DLLs in cmake files (version <= 2.1.2)
 #cp -f $INSTALLPREFIX/cmake/gflags-export-release.cmake gflags-export-release.cmake.bak &&
 ##sed -e "s?/Lib\(/libgflags[_a-z]*.dll\)?/bin\1?g; s?/bin\(/libgflags[_a-z]*.dll.a\)?/lib\1?g" gflags-export-release.cmake.bak > $INSTALLPREFIX/cmake/gflags-export-release.cmake &&
 #sed -e "s?/Lib\(/libgflags[_a-z]*.dll\"\)?/bin\1?g; s?/Lib/?/lib/?g" gflags-export-release.cmake.bak > $INSTALLPREFIX/cmake/gflags-export-release.cmake &&
 ## move DLLs to the right location (version <= 2.2.0)
 #mv -f $INSTALLPREFIX/lib/*.dll $INSTALLPREFIX/bin/ &&
 # fix location of DLLs in cmake files (version >= 2.2.0)
 for F in $(grep -l "/Lib/libgflags[_a-z]*.dll\"" $INSTALLPREFIX/cmake/*.cmake); do
  sed -i -e "s?/Lib\(/libgflags[_a-z]*.dll\"\)?/bin\1?g; s?/Lib/?/lib/?g" $F
 done &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




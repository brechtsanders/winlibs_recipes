export NAME="JsonCpp"
export STATUS=
#export URL=https://sourceforge.net/projects/jsoncpp/
export URL=https://github.com/open-source-parsers/jsoncpp
export BASENAME=jsoncpp
export DESCRIPTION="A C++ library for interacting with JSON."
export CATEGORY=dataprocessing
export TYPE=library
#export VERSION=0.10.7
#export VERSIONDATE=20181204
#export VERSION=00.11.0
#export VERSIONDATE=20200430
#export VERSION=1.7.7
#export VERSIONDATE=20161206
#export VERSION=1.8.0
#export VERSIONDATE=20161215
#export VERSION=1.8.1
#export VERSIONDATE=20160626
#export VERSION=1.8.2
#export VERSIONDATE=20170828
#export VERSION=1.8.3
#export VERSIONDATE=20170831
#export VERSION=1.8.4
#export VERSIONDATE=20171221
#export VERSION=1.9.0
#export VERSIONDATE=20190703
#export VERSION=1.9.1
#export VERSIONDATE=20190712
#export VERSION=1.9.2
#export VERSIONDATE=20191114
#export VERSION=1.9.3
#export VERSIONDATE=20200530
#export VERSION=1.9.4
#export VERSIONDATE=20200926
export VERSION=1.9.5
export VERSIONDATE=20211104
wl-showstatus --package-version
export DEPENDENCIES=
export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=cmake
#export OPTIONALBUILDDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=MIT
export DOWNLOADURL="https://github.com/open-source-parsers/jsoncpp/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/open-source-parsers/jsoncpp/archive/$VERSION.tar.gz
#export DOWNLOADSOURCEURL=https://github.com/open-source-parsers/jsoncpp/archive/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#mv $TARBALLDIR/$BASENAME/$VERSION.tar.gz $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
wl-wait4deps
wl-showstatus extract
#tar xz --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
tar xz --force-local -f $TARBALLDIR/$BASENAME/$VERSION.tar.gz
#tar xz --force-local -f $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd $BASENAME-$VERSION
# fix issue when building with clang in src/lib_json/json_value.cpp (version >= 1.9.5)
####src/lib_json/json_value.cpp:816:44: error: expected unqualified-id
#if echo $CXX|grep -q clang++; then
if ${CXX:-g++} --version|grep -q "^clang"; then
patch -ulbf src/lib_json/json_value.cpp << EOF
@@ -815,4 +815,3 @@
     // According to JavaScript language zero or NaN is regarded as false
-    const auto value_classification = std::fpclassify(value_.real_);
-    return value_classification != FP_ZERO && value_classification != FP_NAN;
+    return value_.real_ != 0 && !isnan(value_.real_);
   }
EOF
fi
## fix math issues
#####error: '_hypot' was not declared in this scope
#mv src/lib_json/json_value.cpp src/lib_json/json_value.cpp.bak &&
#echo "#undef __STRICT_ANSI__" > src/lib_json/json_value.cpp &&
#cat src/lib_json/json_value.cpp.bak >> src/lib_json/json_value.cpp
#mv src/lib_json/json_writer.cpp src/lib_json/json_writer.cpp.bak &&
#echo "#undef __STRICT_ANSI__" > src/lib_json/json_writer.cpp &&
#cat src/lib_json/json_writer.cpp.bak >> src/lib_json/json_writer.cpp
#wl-showstatus configure &&
#cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DBUILD_STATIC_LIBS:BOOL=ON -DJSONCPP_WITH_PKGCONFIG_SUPPORT:BOOL=ON -DJSONCPP_WITH_CMAKE_PACKAGE:BOOL=ON -DJSONCPP_WITH_TESTS:BOOL=OFF -DJSONCPP_WITH_POST_BUILD_UNITTEST:BOOL=OFF . &&
# wl-showstatus build-install &&
# make install/strip &&
# # copy libjsoncpp_static.a to libjsoncpp.a (version >= 1.8.2)
# cp -f $INSTALLPREFIX/lib/libjsoncpp_static.a $INSTALLPREFIX/lib/libjsoncpp.a &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DJSONCPP_WITH_PKGCONFIG_SUPPORT:BOOL=ON -DJSONCPP_WITH_CMAKE_PACKAGE:BOOL=ON -DJSONCPP_WITH_TESTS:BOOL=OFF -DJSONCPP_WITH_POST_BUILD_UNITTEST:BOOL=OFF -S. -Bbuild_static &&
# wl-showstatus configure &&
# cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DJSONCPP_WITH_PKGCONFIG_SUPPORT:BOOL=ON -DJSONCPP_WITH_CMAKE_PACKAGE:BOOL=ON -DJSONCPP_WITH_TESTS:BOOL=OFF -DJSONCPP_WITH_POST_BUILD_UNITTEST:BOOL=OFF -S. -Bbuild_shared &&
# wl-showstatus build-install &&
# make -Cbuild_static install/strip &&
# wl-showstatus build-install &&
# make -Cbuild_shared install/strip &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
mkdir -p build_static build_shared &&
 wl-showstatus configure &&
 cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DJSONCPP_WITH_PKGCONFIG_SUPPORT:BOOL=ON -DJSONCPP_WITH_CMAKE_PACKAGE:BOOL=ON -DJSONCPP_WITH_TESTS:BOOL=OFF -DJSONCPP_WITH_POST_BUILD_UNITTEST:BOOL=OFF -S. -Bbuild_static &&
 wl-showstatus configure &&
 cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DJSONCPP_WITH_PKGCONFIG_SUPPORT:BOOL=ON -DJSONCPP_WITH_CMAKE_PACKAGE:BOOL=ON -DJSONCPP_WITH_TESTS:BOOL=OFF -DJSONCPP_WITH_POST_BUILD_UNITTEST:BOOL=OFF -S. -Bbuild_shared &&
 wl-showstatus build-install &&
 ninja -Cbuild_static install/strip &&
 wl-showstatus build-install &&
 ninja -Cbuild_shared install/strip &&
 # fix missing version in .pc file
 sed -i -e "s/^Version: $/&$VERSION/" $INSTALLPREFIX/lib/pkgconfig/jsoncpp.pc &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION



#export BUILDDEPENDENCIES=meson,ninja
#export OPTIONALBUILDDEPENDENCIES=
#mkdir -p build_both &&
# wl-showstatus configure &&
# PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Dtests=false . build_both &&
# wl-showstatus build-install &&
# PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib ninja -C build_both install &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
#####TO DO: also install .cmake files




export NAME="libzrtpcpp"
export STATUS=
export URL=http://www.gnu.org/software/ccrtp/
export BASENAME=libzrtpcpp
export DESCRIPTION="Provides support for the ZRTP protocol in ccRTP"
export CATEGORY=audio,communication
export TYPE=library
#export VERSION=1.0.0
#export VERSION=1.3.0
#export VERSION=1.4.1
#export VERSION=1.4.3
#export VERSION=1.4.5
#export VERSION=1.4.6
#export VERSIONDATE=20091101
#export VERSION=1.5.2
#export VERSIONDATE=20101205
#export VERSION=1.5.3
#export VERSIONDATE=20101206
export VERSION=1.6.0
export VERSIONDATE=20110115
#export VERSION=2.0.0
#export VERSIONDATE=20110529
####e:/Prog/MinGW-mSys/home/win32/libzrtpcpp-2.0.0/src/libzrtpcpp/ZrtpCallback.h:30:30: error: commoncpp/config.h: No such file or directory
#export VERSION=2.3.2
#export VERSIONDATE=20121121
#export VERSION=2.3.3
#export VERSIONDATE=20130608
#export VERSION=2.3.4
#export VERSIONDATE=20130701
####\include/ucommon/platform.h:174: error: conflicting declaration 'typedef DWORD pthread_t'
####\include/pthread.h:585: error: 'pthread_t' has a previous declaration as 'typedef struct ptw32_handle_t pthread_t'
####src/libzrtpcpp/crypto/openssl/ZrtpDH.cpp:224:40: warning: 'DH* DH_new()' is deprecated: Since OpenSSL 3.0 [-Wdeprecated-declarations]
wl-showstatus --package-version
export DEPENDENCIES=libccrtp,libcommoncpp2,pthreads,libgcrypt,libgpg-error
#export DEPENDENCIES=libccrtp,libcommoncpp2,pthreads,libgcrypt,libgpg-error,ccrtp
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=COPYING
export LICENSETYPE=
export DOWNLOADURL="http://ftp.gnu.org/pub/gnu/ccrtp/ libzrtpcpp-"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=http://ftp.gnu.org/pub/gnu/ccrtp/libzrtpcpp-$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
tar xz --force-local -f $TARBALLDIR/$BASENAME/libzrtpcpp-$VERSION.tar.gz
cd libzrtpcpp-$VERSION
# fix missing netinet/in.h (used for ntohl and htonl)
mkdir netinet
echo "#include <winsock2.h>" > netinet/in.h
## remove -release from src/Makefile to avoid: "libtool: link: you must specify an output file"
#mv src/Makefile.in src/Makefile.in.bak
#sed -e "s/-release//" src/Makefile.in.bak > src/Makefile.in
# fix detection of libccrtp
mv configure configure.bak
sed -e "s/libccrtp1/libccrtp/" configure.bak > configure
## remove dependancy on dynamic libstdc++ (GCC 4)
#mv libtool libtool.bak &&
#sed -e "s/-lstdc++/-lstdc++_s -lsupc++/" libtool.bak > libtool &&
# use make -i to ignore error "install: will not overwrite just-created":
wl-showstatus configure &&
#./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-ccrtp CXXFLAGS="-Drandom=rand -Dsrandom=srand -DHAVE_LOCALTIME_R" LDFLAGS="-no-undefined -Wl,-no-undefined" &&
./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-ccrtp CXXFLAGS="-Drandom=rand -Dsrandom=srand -DHAVE_LOCALTIME_R" LDFLAGS="-Wl,-no-undefined" &&
 # fix building DLLs
 mv libtool libtool.bak &&
 sed -e "s/\(allow_undefined=\)yes/\1no/" libtool.bak > libtool &&
 # remove -llthread from Makefiles
 for F in `find . -iname Makefile` ; do
  mv $F $F.bak
  sed -e 's/-llthread//g' $F.bak > $F
 done &&
 wl-showstatus build &&
 make &&
 wl-showstatus build-install &&
 ( make install-strip || make -i install-strip ) &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf libzrtpcpp-$VERSION



#export BUILDDEPENDENCIES=cmake,ninja
#mkdir -p build_static build_shared &&
## fix src/CMakeLists.txt (version >= 2.3.4)
#patch -ulbf src/CMakeLists.txt << EOF
#@@ -79,5 +79,2 @@
#
#-if(enable_ccrtp)
#-    add_dependencies(\${zrtplib} ccrtp)
#-endif()
#
#EOF
# wl-showstatus configure-static &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DBUILD_STATIC:BOOL=ON -DCMAKE_POLICY_VERSION_MINIMUM:STRING=3.5 -S. -Bbuild_static &&
# # fix unescaped $
# sed -i.bak -e "s?\(cd \)\(\$(CMAKE_SOURCE_DIR)\)?\1\$\2?" build_static/build.ninja && 
# wl-showstatus configure-shared &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DBUILD_STATIC:BOOL=OFF -DCMAKE_POLICY_VERSION_MINIMUM:STRING=3.5 -S. -Bbuild_shared &&
# # fix unescaped $
# sed -i.bak -e "s?\(cd \)\(\$(CMAKE_SOURCE_DIR)\)?\1\$\2?" build_shared/build.ninja && 
# ## fix execution of Python scripts
# #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|glib-genmarshal\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
# ## fix missing link libraries
# #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lws2_32/" build_shared/build.ninja &&
# #wl-showstatus build-static &&
# #cmake.exe --build build_static &&
# #ninja -Cbuild_static &&
# #wl-showstatus build-shared &&
# #cmake.exe --build build_shared &&
# #ninja -Cbuild_shared &&
# wl-showstatus build-install-static &&
# #cmake.exe --install build_static --strip &&
# #cmake.exe --build build_static --target "install/strip" &&
# #cmake.exe --build build_static --target "library/install/strip" &&
# ninja -Cbuild_static install/strip &&
# #ninja -Cbuild_static library/install/strip &&
# wl-showstatus build-install-shared &&
# #cmake.exe --install build_shared --strip &&
# #cmake.exe --build build_shared --target "install/strip" &&
# ninja -Cbuild_shared install/strip &&
#    echo OK




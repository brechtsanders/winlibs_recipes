#export NAME="libvirt-glib"
#export STATUS=
#export URL=https://libvirt.org/git/?p=libvirt-glib.git
##export URL=https://github.com/libvirt/libvirt-glib
#export BASENAME=libvirt-glib
#export DESCRIPTION="libvirt is a C toolkit to interact with the virtualization capabilities of recent versions of Linux (and other OSes). libvirt-glib - GLib main loop integration & misc helper APIs"
#export CATEGORY=virtualization
#export TYPE=library
##export VERSION=2.0.0
##export VERSIONDATE=20191020
#export VERSION=3.0.0
#export VERSIONDATE=20191126
#####config.status: error: cannot find input file: `po/Makefile.in.in'
#wl-showstatus --package-version
#export DEPENDANCIES=libvirt,glib2,gettext,libxml2
##export DEPENDANCIES=libvirt,glib2,gettext,libxml2,vala,gobject-introspection
#export OPTIONALDEPENDANCIES=
#export BUILDDEPENDANCIES=
#export LICENSEFILE=COPYING
#export LICENSETYPE=LGPL
#export DOWNLOADURL="https://github.com/libvirt/libvirt-glib/releases"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://github.com/libvirt/libvirt-glib/archive/v$VERSION.tar.gz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#wl-showstatus extract
#tar xfz $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
#cd $BASENAME-$VERSION
###touch po/Makefile.in.in
##cat > po/Makefile.in.in << EOF
##clean:
##all:
##install:
##install-strip:
##EOF
## fix error: EXTRA_DIST must be set with '=' before using '+='
#mv docs/libvirt-glib/Makefile.am docs/libvirt-glib/Makefile.am.bak &&
#echo "EXTRA_DIST=" > docs/libvirt-glib/Makefile.am &&
#cat docs/libvirt-glib/Makefile.am.bak >> docs/libvirt-glib/Makefile.am
### fix G_LOG_DOMAIN issue
##for F in $(grep -l G_LOG_DOMAIN $(find -name '*.c')); do
## mv $F $F.bak &&
## echo "#undef G_LOG_DOMAIN" > $F &&
## echo "#define G_LOG_DOMAIN \"Libvirt.GLib\"" >> $F &&
## cat $F.bak >> $F
##done
## fix MSVC issue
#mkdir -p winfix
#cp -rf $PYDIR/lib/distutils winfix/
#patch -ulbf winfix/distutils/cygwinccompiler.py << EOF
#@@ -85,3 +85,3 @@
#         else:
#-            raise ValueError("Unknown MS Compiler version %s " % msc_ver)
#+            return None
#
#EOF
## fix missing files
#touch AUTHORS ChangeLog gtk-doc.make
##sed -i.bak -e "s/^GOBJECT_INTROSPECTION_CHECK.*$//" configure.ac
##sed -i.bak -e "s/HAVE_INTROSPECTION/FALSE/" examples/Makefile.am libvirt-gconfig/Makefile.am libvirt-glib/Makefile.am libvirt-gobject/Makefile.am
#wl-showstatus configure &&
# autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal &&
# #sed -i.bak -e "s/^GOBJECT_INTROSPECTION_CHECK.*$/HAVE_INTROSPECTION=0/" configure &&
# #INTLTOOL_PERL="$PERLDIR/bin/perl.exe" ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-shared --enable-static --disable-installed-tests --disable-test-coverage  --disable-gtk-doc --disable-gtk-doc-html --disable-gtk-doc-pdf --disable-introspection &&
# #INTLTOOL_PERL="$PERLDIR/bin/perl.exe" ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-shared --enable-static --disable-nls --disable-installed-tests --disable-test-coverage  --disable-gtk-doc --disable-gtk-doc-html --disable-gtk-doc-pdf --disable-introspection &&
# INTLTOOL_PERL="$PERLDIR/bin/perl.exe" ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-shared --enable-static --disable-nls --disable-installed-tests --disable-test-coverage --disable-gtk-doc --disable-gtk-doc-html --disable-gtk-doc-pdf --disable-introspection &&
# #PKG_CONFIG=$(which pkg-config.exe) INTLTOOL_PERL="$PERLDIR/bin/perl.exe" ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-shared --enable-static --disable-nls --disable-installed-tests --disable-test-coverage --disable-gtk-doc --disable-gtk-doc-html --disable-gtk-doc-pdf --enable-vala --enable-introspection &&
# wl-showstatus build-install &&
# PATH=$PYDIR:$PATH PYTHONPATH=$(pwd)/winfix:$MINGWPREFIX/lib:${PYTHONPATH:+:$PYTHONPATH} make install-strip &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION



export NAME="libvirt-glib"
export STATUS=
export URL=https://libvirt.org/git/?p=libvirt-glib.git
#export URL=https://github.com/libvirt/libvirt-glib
export BASENAME=libvirt-glib
export DESCRIPTION="libvirt is a C toolkit to interact with the virtualization capabilities of recent versions of Linux (and other OSes). libvirt-glib - GLib main loop integration & misc helper APIs"
export CATEGORY=virtualization
export TYPE=library
export VERSION=4.0.0
export VERSIONDATE=20210215
wl-showstatus --package-version
export DEPENDANCIES=libvirt,glib2,gettext,libxml2
#export DEPENDANCIES=libvirt,glib2,gettext,libxml2,vala,gobject-introspection
export OPTIONALDEPENDANCIES=
export BUILDDEPENDANCIES=meson,ninja
export LICENSEFILE=COPYING
export LICENSETYPE=LGPL
#export DOWNLOADURL="https://github.com/libvirt/libvirt-glib/releases"
export DOWNLOADURL="https://github.com/libvirt/libvirt-glib/tags"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://github.com/libvirt/libvirt-glib/archive/v$VERSION.tar.gz
export DOWNLOADSOURCEURL=https://github.com/libvirt/libvirt-glib/archive/refs/tags/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xfz $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd $BASENAME-$VERSION
# fix meson.build (version >= 4.0.0)
patch -ulbf meson.build << EOF
@@ -383,3 +383,3 @@
 if host_machine.cpu_family() != 'aarch64'
-  if host_machine.system() in [ 'linux', 'freebsd', 'windows' ]
+  if host_machine.system() in [ 'linux', 'freebsd' ]
     # we prefer -fstack-protector-strong but fallback to -fstack-protector-all
EOF
# fix MSVC issue
mkdir -p winfix
cp -rf $PYDIR/lib/distutils winfix/
patch -ulbf winfix/distutils/cygwinccompiler.py << EOF
@@ -85,3 +85,3 @@
         else:
-            raise ValueError("Unknown MS Compiler version %s " % msc_ver)
+            return None

EOF
mkdir -p build_both &&
 wl-showstatus configure &&
 PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Dintrospection=enabled -Dvapi=enabled -Ddocs=disabled -Dtests=disabled . build_both &&
 wl-showstatus build-install &&
 PKG_CONFIG= PATH=$PATH:$PYDIR PYTHONPATH=$(pwd)/winfix:$MINGWPREFIX/lib:${PYTHONPATH:+:$PYTHONPATH} ninja -Cbuild_both install &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




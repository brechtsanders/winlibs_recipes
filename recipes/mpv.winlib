export NAME="mpv"
export STATUS=
export URL=https://mpv.io/
export BASENAME=mpv
export DESCRIPTION="mpv is a free (as in freedom) media player for the command line. It supports a wide variety of media file formats, audio and video codecs, and subtitle types."
export CATEGORY=multimedia
export TYPE=application
#export VERSION=0.33.1
#export VERSIONDATE=20210827
#export VERSION=0.34.0
#export VERSIONDATE=20211102
#export VERSION=0.34.1
#export VERSIONDATE=20220104
#export VERSION=0.35.0
#export VERSIONDATE=20221112
#export VERSION=0.35.1
#export VERSIONDATE=20230129
export VERSION=0.36.0
export VERSIONDATE=20230724
#export DEPENDENCIES=pthreads,zlib,ffmpeg4,libarchive,libass,libbluray,egl,libiconv,jack,libjpeg,lcms2,mujs,pulseaudio,rubberband,libsixel,uchardet,luajit
export DEPENDENCIES=pthreads,zlib,ffmpeg5,libarchive,libass,libbluray,egl,libiconv,jack,libjpeg,lcms2,mujs,pulseaudio,rubberband,libsixel,uchardet,luajit
export OPTIONALDEPENDENCIES=vapoursynth,shaderc
export BUILDDEPENDENCIES=
export OPTIONALBUILDDEPENDENCIES=
#export VERSION=0.37.0
#export VERSIONDATE=20231122
wl-showstatus --package-version
#export DEPENDENCIES=pthreads,zlib,ffmpeg5,libarchive,libass,libbluray,egl,libiconv,jack,libjpeg,lcms2,mujs,pulseaudio,rubberband,libsixel,uchardet,luajit
#export OPTIONALDEPENDENCIES=vapoursynth,shaderc
#export BUILDDEPENDENCIES=meson
#export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=Copyright
export LICENSETYPE=GPL
export DOWNLOADURL="https://github.com/mpv-player/mpv/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/mpv-player/mpv/archive/refs/tags/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd $BASENAME-$VERSION
wl-showstatus configure &&
 #CC=$(which gcc.exe) CFLAGS="-I$MINGWPREFIX/include/uchardet" C_INCLUDE_PATH=$MINGWPREFIX/ffmpeg4/include${C_INCLUDE_PATH:+:$C_INCLUDE_PATH} CPLUS_INCLUDE_PATH=$MINGWPREFIX/ffmpeg4/include${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} LIBRARY_PATH=$MINGWPREFIX/ffmpeg4/lib${LIBRARY_PATH:+:$LIBRARY_PATH} LD_RUN_PATH=$MINGWPREFIX/ffmpeg4/lib${LD_RUN_PATH:+:$LD_RUN_PATH} PKG_CONFIG_PATH=$MINGWPREFIX/ffmpeg4/lib/pkgconfig${PKG_CONFIG_PATH:+:$PKG_CONFIG_PATH} PATH=$MINGWPREFIX/ffmpeg4/bin:$PATH $PYDIR/python.exe $MINGWPREFIX/bin/waf configure --prefix=$INSTALLPREFIX --check-c-compiler=gcc --disable-egl-angle --disable-libplacebo &&
 CC=$(which gcc.exe) CFLAGS="-I$MINGWPREFIX/include/uchardet" C_INCLUDE_PATH=$MINGWPREFIX/ffmpeg5/include${C_INCLUDE_PATH:+:$C_INCLUDE_PATH} CPLUS_INCLUDE_PATH=$MINGWPREFIX/ffmpeg5/include${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} LIBRARY_PATH=$MINGWPREFIX/ffmpeg5/lib${LIBRARY_PATH:+:$LIBRARY_PATH} LD_RUN_PATH=$MINGWPREFIX/ffmpeg5/lib${LD_RUN_PATH:+:$LD_RUN_PATH} PKG_CONFIG_PATH=$MINGWPREFIX/ffmpeg5/lib/pkgconfig${PKG_CONFIG_PATH:+:$PKG_CONFIG_PATH} PATH=$MINGWPREFIX/ffmpeg5/bin:$PATH $PYDIR/python.exe $MINGWPREFIX/bin/waf configure --prefix=$INSTALLPREFIX --check-c-compiler=gcc --disable-egl-angle --disable-libplacebo --disable-x11 --disable-xv --disable-gl-x11 &&
 wl-showstatus build &&
 #$PYDIR/python.exe $MINGWPREFIX/bin/waf build &&
 C_INCLUDE_PATH=$MINGWPREFIX/ffmpeg5/include${C_INCLUDE_PATH:+:$C_INCLUDE_PATH} $PYDIR/python.exe $MINGWPREFIX/bin/waf build &&
 wl-showstatus build-install &&
 $PYDIR/python.exe $MINGWPREFIX/bin/waf install &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
####PATH=$MINGWPREFIX/ffmpeg4/bin:$PATH $MINGWPREFIX/bin/mpv.exe 'C:\Windows\Media\notify.wav'
####PATH=$MINGWPREFIX/ffmpeg5/bin:$PATH $MINGWPREFIX/bin/mpv.exe 'C:\Windows\Media\notify.wav'



#export BUILDDEPENDENCIES=meson,ninja
#-Dc_args=$CFLAGS -Dcpp_args=$CXXFLAGS -Dc_link_args=$LDFLAGS -Dcpp_link_args=$LDFLAGS
## fix location of Perl
#sed -i.bak -e "s?'perl'?'$(cygpath -w $PERLDIR/bin/perl.exe|sed -e 's/\\/&&&&/g')'?" meson.build
## fix detection of Python
#sed -i.bak -e "s?'python3'?'$(cygpath -w $PYDIR/python.exe|sed -e 's/\\/&&&&/g')'?" meson.build
## fix missing gio-unix
##sed -i.bak -e "s/gio-unix-/gio-/" meson.build
#sed -i.bak -e "s/gio-unix-/gio-windows-/" meson.build
#mkdir -p build_both &&
# wl-showstatus configure &&
# PKG_CONFIG_PATH=$MINGWPREFIX/ffmpeg5/lib/pkgconfig:${PKG_CONFIG_PATH:+:$PKG_CONFIG_PATH} PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Dlibmpv=true -Dcplayer=true -Dtests=false . build_both &&
# ## fix slash/backslash path issue when calling Python from Ninja
# #sed -i.bak -e "s/join_paths/os.path.join/g; /COMMAND =.*python\.exe/ s?\"/\([a-zA-Z]\)/?\"\1:/?; /COMMAND =.*python\.exe/ s?/?\\\\?g" build_*/build.ninja &&
# ## fix Python path issues in meson_exe
# #sed -i.bak -e "s?$PYDIR?$(echo $PYDIR|sed -e "s?^/\([a-zA-Z]\)/?\1:/?")?" build_both/meson-private/meson_exe_python.exe_*.dat &&
# ## fix execution of Python scripts
# #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *= *\| *=.*\&\& *\)\(\"\{0,1\}[^ ]*\)\(\.py\|glib-mkenums\|g-ir-scanner\|asciidoc\)\(\"\{0,1\} \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_both/build.ninja &&
# ## fix executing shell scripts
# #sed -i.bak -e "s?^\(\s*COMMAND\s*=\s*\)\(\"[^\"]*\.sh\"\)?\1\"$(cygpath -m $(which sh.exe))\" \2?" build_both/build.ninja &&
# wl-showstatus build-install &&
# PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -Cbuild_both install/strip &&
# #PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -Cbuild_both install &&
# #PATH=$PERLDIR/../c/bin:$PERLDIR/bin:$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -Cbuild_both install &&
#    echo OK && find . -name '*.a'

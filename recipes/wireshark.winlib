export NAME="Wireshark"
export STATUS=
export URL=https://www.wireshark.org/
export BASENAME=wireshark
export DESCRIPTION="Wireshark is the world's foremost network protocol analyzer. It lets you see what's happening on your network at a microscopic level. It is the de facto (and often de jure) standard across many industries and educational institutions."
export CATEGORY=network
export TYPE=application
#export VERSION=1.10.11
#export VERSIONDATE=20141113
#export VERSION=1.10.12
#export VERSIONDATE=20150108
#export VERSION=1.10.13
#export VERSIONDATE=20150504
#export VERSION=1.10.14
#export VERSIONDATE=20150513
#export VERSION=1.12.0
#export VERSIONDATE=20140826
#export VERSION=1.12.1
#export VERSIONDATE=20140917
#export VERSION=1.12.2
#export VERSIONDATE=20141113
#export VERSION=1.12.3
#export VERSIONDATE=20150108
#export VERSION=1.12.4
#export VERSIONDATE=20150305
#export VERSION=1.12.5
#export VERSIONDATE=20150513
#export VERSION=1.12.6
#export VERSIONDATE=20150617
#export VERSION=1.12.7
#export VERSIONDATE=20150813
#export VERSION=1.12.8
#export VERSIONDATE=20151015
#export VERSION=1.12.9
#export VERSIONDATE=20151230
#export VERSION=1.12.10
#export VERSIONDATE=20160406
#export VERSION=1.12.12
#export VERSIONDATE=20160608
#export VERSION=1.12.13
#export VERSIONDATE=20160728
#export VERSION=1.12.14
#export VERSIONDATE=20160423
#export VERSION=1.99.1
#export VERSIONDATE=20141211
#export VERSION=1.99.3
#export VERSIONDATE=20150306
####configure: error: Neither Qt nor GTK+ 2.12.0 or later are available, so Wireshark can't be compiled
####configure: error: I couldn't find pod2man; make sure it's installed and in your path
####*** Could not run GLIB test program, checking why...
####*** The test program failed to compile or link. See the file config.log for the
####*** exact error that occured. This usually means GLIB is incorrectly installed.
####configure: error: GLib 2.16.0 or later distribution not found.
#export VERSION=1.99.2
#export VERSIONDATE=20150205
#export VERSION=1.99.5
#export VERSIONDATE=20150315
####wsutil/privileges.h:80:1: error: function declaration isn't a prototype [-Werror=strict-prototypes]
####wsutil/filesystem.c:1724:1: error: 'get_home_dir' defined but not used [-Werror=unused-function]
#export VERSION=1.99.6
#export VERSIONDATE=20150529
#export VERSION=1.99.7
#export VERSIONDATE=20150619
#export VERSION=1.99.8
#export VERSIONDATE=20150725
#export VERSION=1.99.9
#export VERSIONDATE=20150903
#export VERSION=2.0.0
#export VERSIONDATE=20151119
#export VERSION=2.0.1
#export VERSIONDATE=20151230
####The PLATFORM environment variable ([undefined]) doesn't match the generator platform ()
#export VERSION=2.0.2
#export VERSIONDATE=20160406
#export VERSION=2.0.3
#export VERSIONDATE=20160423
#export VERSION=2.0.4
#export VERSIONDATE=20160608
#export VERSION=2.0.5
#export VERSIONDATE=20160728
#export VERSION=2.0.6
#export VERSIONDATE=20160909
#export VERSION=2.0.7
#export VERSIONDATE=20161005
#export VERSION=2.0.8
#export VERSIONDATE=20161117
#export VERSION=2.0.9
#export VERSIONDATE=20161215
#export VERSION=2.0.10
#export VERSIONDATE=20170124
#export VERSION=2.0.11
#export VERSIONDATE=20170304
#export VERSION=2.0.12
#export VERSIONDATE=20170413
#export VERSION=2.0.13
#export VERSIONDATE=20170602
#export VERSION=2.0.14
#export VERSIONDATE=20170719
#export VERSION=2.1.0
#export VERSIONDATE=20160609
#export VERSION=2.1.1
#export VERSIONDATE=20160715
#export VERSION=2.2.0
#export VERSIONDATE=20160908
#export VERSION=2.2.1
#export VERSIONDATE=20161005
#export VERSION=2.2.2
#export VERSIONDATE=20161117
####Neither WIRESHARK_BASE_DIR or WIRESHARK_LIB_DIR are defined
#export VERSION=2.2.3
#export VERSIONDATE=20161215
#export VERSION=2.2.4
#export VERSIONDATE=20170124
#export VERSION=2.2.5
#export VERSIONDATE=20170304
#export VERSION=2.2.6
#export VERSIONDATE=20170413
#export VERSION=2.2.7
#export VERSIONDATE=20170602
#export VERSION=2.2.8
#export VERSIONDATE=20170719
#export VERSION=2.2.9
#export VERSIONDATE=20170830
#export VERSION=2.2.10
#export VERSIONDATE=20171011
#export VERSION=2.2.11
#export VERSIONDATE=20171201
#export VERSION=2.2.12
#export VERSIONDATE=20180113
#export VERSION=2.2.13
#export VERSIONDATE=20180224
#export VERSION=2.2.14
#export VERSIONDATE=20180404
#export VERSION=2.4.0
#export VERSIONDATE=20170720
#export VERSION=2.4.1
#export VERSIONDATE=20170830
#export VERSION=2.4.2
#export VERSIONDATE=20171011
#export VERSION=2.4.3
#export VERSIONDATE=20171201
#export VERSION=2.4.4
#export VERSIONDATE=20180113
#export VERSION=2.4.5
#export VERSIONDATE=20180224
#export VERSION=2.4.6
#export VERSIONDATE=20180404
#export VERSION=2.4.7
#export VERSIONDATE=20180523
#export VERSION=2.4.8
#export VERSIONDATE=20180719
#export VERSION=2.4.9
#export VERSIONDATE=20180830
#export VERSION=2.4.10
#export VERSIONDATE=20181012
#export VERSION=2.4.11
#export VERSIONDATE=20181129
#export VERSION=2.4.12
#export VERSIONDATE=20190109
#export VERSION=2.4.13
#export VERSIONDATE=20190228
#export VERSION=2.5.0
#export VERSIONDATE=20180207
#export VERSION=2.5.1
#export VERSIONDATE=20180316
#export VERSION=2.6.0
#export VERSIONDATE=20180425
#export VERSION=2.6.1
#export VERSIONDATE=20180523
#export VERSION=2.6.2
#export VERSIONDATE=20180719
#export VERSION=2.6.3
#export VERSIONDATE=20180830
#export VERSION=2.6.4
#export VERSIONDATE=20181012
#export VERSION=2.6.5
#export VERSIONDATE=20181129
#export VERSION=2.6.6
#export VERSIONDATE=20190109
#export VERSION=2.6.7
#export VERSIONDATE=20190228
#export VERSION=2.6.8
#export VERSIONDATE=20190412
#export VERSION=2.6.9
#export VERSIONDATE=20190523
#export VERSION=2.6.10
#export VERSIONDATE=20190718
#export VERSION=2.6.11
#export VERSIONDATE=20190912
#export VERSION=2.6.12
#export VERSIONDATE=20191024
#export VERSION=2.6.13
#export VERSIONDATE=20191205
#export VERSION=2.9.0
#export VERSIONDATE=20181213
#export VERSION=3.0.0
#export VERSIONDATE=20190301
#export VERSION=3.0.1
#export VERSIONDATE=20190412
#export VERSION=3.0.2
#export VERSIONDATE=20190523
#export VERSION=3.0.3
#export VERSIONDATE=20190718
#export VERSION=3.0.4
#export VERSIONDATE=20190912
#export VERSION=3.0.5
#export VERSIONDATE=20190922
#export VERSION=3.0.6
#export VERSIONDATE=20191024
#export VERSION=3.0.7
#export VERSIONDATE=20191205
#export VERSION=3.0.8
#export VERSIONDATE=20200116
#export VERSION=3.0.9
#export VERSIONDATE=20200227
#export VERSION=3.0.10
#export VERSIONDATE=20200409
#export VERSION=3.0.11
#export VERSIONDATE=20200520
#export VERSION=3.0.12
#export VERSIONDATE=20200702
#export VERSION=3.0.13
#export VERSIONDATE=20200813
#export VERSION=3.0.14
#export VERSIONDATE=20200924
#export VERSION=3.1.0
#export VERSIONDATE=20190726
#export VERSION=3.1.1
#export VERSIONDATE=20191119
#export VERSION=3.2.0
#export VERSIONDATE=20191219
#export VERSION=3.2.0
#export VERSIONDATE=20200116
#export VERSION=3.2.2
#export VERSIONDATE=20200227
#export VERSION=3.2.3
#export VERSIONDATE=20200409
#export VERSION=3.2.4
#export VERSIONDATE=20200520
#export VERSION=3.2.5
#export VERSIONDATE=20200702
#export VERSION=3.2.6
#export VERSIONDATE=20200813
#export VERSION=3.2.7
#export VERSIONDATE=20200924
#export VERSION=3.2.8
#export VERSIONDATE=20201030
#export VERSION=3.2.9
#export VERSIONDATE=20201210
#export VERSION=3.2.10
#export VERSIONDATE=20201219
#export VERSION=3.2.11
#export VERSIONDATE=20210130
#export VERSION=3.2.12
#export VERSIONDATE=20210311
#export VERSION=3.2.14
#export VERSIONDATE=20210603
#export VERSION=3.2.15
#export VERSIONDATE=20210715
#export VERSION=3.2.16
#export VERSIONDATE=20210826
#export VERSION=3.2.17
#export VERSIONDATE=20211007
#export VERSION=3.2.18
#export VERSIONDATE=20211118
#export VERSION=3.3.0
#export VERSIONDATE=20200916
#export VERSION=3.3.1
#export VERSIONDATE=20201002
#export VERSION=3.3.2
#export VERSIONDATE=20201030
####Unsupported compiler D:/Prog/MinGW64-32-4.8.5-4-0/mingw32/bin/gcc.exe
#export VERSION=3.4.1
#export VERSIONDATE=20201210
#export VERSION=3.4.2
#export VERSIONDATE=20201219
#export VERSION=3.4.3
#export VERSIONDATE=20210130
#export VERSION=3.4.4
#export VERSIONDATE=20210311
#export VERSION=3.4.5
#export VERSIONDATE=20210422
#export VERSION=3.4.6
#export VERSIONDATE=20210603
#export VERSION=3.4.7
#export VERSIONDATE=20210715
#export VERSION=3.4.8
#export VERSIONDATE=20210826
#export VERSION=3.4.9
#export VERSIONDATE=20211007
#export VERSION=3.4.10
#export VERSIONDATE=20211118
#export VERSION=3.4.11
#export VERSIONDATE=20211230
#export VERSION=3.4.12
#export VERSIONDATE=20220211
#export VERSION=3.4.13
#export VERSIONDATE=20220324
#export VERSION=3.4.14
#export VERSIONDATE=20220505
#export VERSION=3.4.15
#export VERSIONDATE=20220728
#export VERSION=3.4.16
#export VERSIONDATE=20220908
#export VERSION=3.5.0
#export VERSIONDATE=20210828
#export VERSION=3.6.0
#export VERSIONDATE=20211123
#export VERSION=3.6.1
#export VERSIONDATE=20211230
####Could NOT find POD (missing: POD2MAN_EXECUTABLE POD2HTML_EXECUTABLE)
#export VERSION=3.6.2
#export VERSIONDATE=20220211
#export VERSION=3.6.3
#export VERSIONDATE=20220324
#export VERSION=3.6.5
#export VERSIONDATE=20220505
#export VERSION=3.6.6
#export VERSIONDATE=20220616
#export VERSION=3.6.7
#export VERSIONDATE=20220728
#export VERSION=3.6.8
#export VERSIONDATE=20220908
#export VERSION=3.6.9
#export VERSIONDATE=20221027
#export VERSION=3.6.10
#export VERSIONDATE=20221208
#export VERSION=3.6.11
#export VERSIONDATE=20230119
#export VERSION=3.6.12
#export VERSIONDATE=20230303
#export VERSION=3.6.13
#export VERSIONDATE=20230413
#export VERSION=3.6.14
#export VERSIONDATE=20230525
#export VERSION=3.6.15
#export VERSIONDATE=20230713
#export VERSION=3.6.16
#export VERSIONDATE=20230824
#export VERSION=3.6.18
#export VERSIONDATE=20231005
#export VERSION=3.6.21
#export VERSIONDATE=20240215
#export VERSION=3.6.22
#export VERSIONDATE=20240328
#export VERSION=3.6.23
#export VERSIONDATE=20240516
#export VERSION=3.7.0
#export VERSIONDATE=20220512
#export VERSION=3.7.1
#export VERSIONDATE=20220628
#export VERSION=3.7.2
#export VERSIONDATE=20220729
#export VERSION=4.0.0
#export VERSIONDATE=20221005
#export VERSION=4.0.1
#export VERSIONDATE=20221027
#export VERSION=4.0.2
#export VERSIONDATE=20221208
#export VERSION=4.0.3
#export VERSIONDATE=20230119
#export VERSION=4.0.4
#export VERSIONDATE=20230303
#export VERSION=4.0.5
#export VERSIONDATE=20230413
#export VERSION=4.0.6
#export VERSIONDATE=20230525
#export VERSION=4.0.7
#export VERSIONDATE=20230713
#export VERSION=4.0.8
#export VERSIONDATE=20230824
#export VERSION=4.0.10
#export VERSIONDATE=20231005
#export VERSION=4.0.11
#export VERSIONDATE=20231116
#export VERSION=4.0.12
#export VERSIONDATE=20240104
#export VERSION=4.0.13
#export VERSIONDATE=20240215
#export VERSION=4.0.14
#export VERSIONDATE=20240328
#export VERSION=4.0.15
#export VERSIONDATE=20240516
####This application failed to start because no Qt platform plugin could be initialized. Reinstalling the application may fix this problem.
#export DEPENDENCIES=qt,libsmi,gnutls,zlib,brotli,snappy,zstd,liblz4,nghttp2,libsbc,spandsp,bcg729,ilbc,libopus,libxml2,libmaxminddb
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=cmake
#export OPTIONALBUILDDEPENDENCIES=
##export BUILDDEPENDENCIES=cmake,podlators,asciidoctor
##export OPTIONALBUILDDEPENDENCIES=
#export VERSION=4.1.0
#export VERSIONDATE=20230826
#export VERSION=4.2.0
#export VERSIONDATE=20231116
####Could NOT find PowerShell (missing: POWERSHELL_EXECUTABLE)
#export VERSION=4.2.1
#export VERSIONDATE=20240104
#export VERSION=4.2.2
#export VERSIONDATE=20240105
#export VERSION=4.2.3
#export VERSIONDATE=20240215
#export VERSION=4.2.4
#export VERSIONDATE=20240328
export VERSION=4.2.5
export VERSIONDATE=20240516
wl-showstatus --package-version
export DEPENDENCIES=qt6,libsmi,gnutls,zlib,brotli,snappy,zstd,liblz4,nghttp2,libsbc,spandsp,bcg729,ilbc,libopus,libxml2,libmaxminddb
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake
export OPTIONALBUILDDEPENDENCIES=
#export BUILDDEPENDENCIES=cmake,podlators,asciidoctor
#export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=COPYING
export LICENSETYPE=GPLv2
export DOWNLOADURL="https://www.wireshark.org/download.html"
#export DOWNLOADURL="https://1.eu.dl.wireshark.org/src/"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://1.eu.dl.wireshark.org/src/$BASENAME-$VERSION.tar.bz2
export DOWNLOADSOURCEURL=https://1.eu.dl.wireshark.org/src/$BASENAME-$VERSION.tar.xz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
#tar xj --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.bz2
tar xJ --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.xz
cd $BASENAME-$VERSION
# fix detection of newer libsmi in epan/oids.c (version >= 3.6.1)
patch -ulbf epan/oids.c << EOF
@@ -214,3 +214,3 @@

-#if (SMI_VERSION_MAJOR >= 0) && (SMI_VERSION_MINOR >= 4) && (SMI_VERSION_PATCHLEVEL >= 8)
+#if (SMI_VERSION_MAJOR >= 0) && ((SMI_VERSION_MINOR > 4) || ((SMI_VERSION_MINOR >= 4) && (SMI_VERSION_PATCHLEVEL >= 8)))
        smiFree(ptr);
EOF
## fix extcap.c (version >= 3.7.0)
#patch -ulbf extcap.c << EOF
#@@ -1181,4 +1181,4 @@
#
#-        ws_debug("Extcap [%s] - Cleaning up fifo: %s; PID: %d", interface_opts->name,
#-              interface_opts->extcap_fifo, interface_opts->extcap_pid);
#+        ws_debug("Extcap [%s] - Cleaning up fifo: %s; PID: %" PRIuPTR, interface_opts->name,
#+              interface_opts->extcap_fifo, (uintptr_t)interface_opts->extcap_pid);
# #ifdef _WIN32
#@@ -1235,4 +1235,4 @@
#          * pid should be closed */
#-        ws_debug("Extcap [%s] - Closing spawned PID: %d", interface_opts->name,-              interface_opts->extcap_pid);
#+        ws_debug("Extcap [%s] - Closing spawned PID: %" PRIuPTR, interface_opts->name,
#+              (uintptr_t)interface_opts->extcap_pid);
#
#@@ -1536,3 +1536,3 @@
#     {
#-        ws_debug("Error creating pipe => (%d)", GetLastError());
#+        ws_debug("Error creating pipe => (%lu)", (unsigned long)GetLastError());
#         g_free (pipename);
#@@ -1542,3 +1542,3 @@
#     {
#-        ws_debug("Wireshark Created pipe =>(%s) handle (%" PRIuPTR ")", pipename, *handle_out);
#+        ws_debug("Wireshark Created pipe =>(%s) handle (%" PRIuPTR ")", pipename, (uintptr_t)*handle_out);
#         *fifo = g_strdup(pipename);
#EOF
#patch -ulbf CMakeLists.txt << EOF
#@@ -76,3 +76,3 @@
#
#-if(WIN32)
#+if(FALSE)
#        find_package(PowerShell REQUIRED)
#EOF
# disable use of windeployqt in CMakeLists.txt (version >= 3.6.3)
patch -ulbf CMakeLists.txt << EOF
@@ -1413,3 +1413,3 @@
        # the modules in \${QTDIR}/lib/cmake would do this for us.
-       if(WIN32)
+       if(MSVC)
                find_program(QT_WINDEPLOYQT_EXECUTABLE windeployqt
EOF
# don't depend on PowerShell (version >= 4.1.0)
patch -ulbf CMakeLists.txt << EOF
@@ -188,3 +188,3 @@

-       if(NOT CMAKE_CROSSCOMPILING)
+       if(MSVC AND NOT CMAKE_CROSSCOMPILING)
                find_package(PowerShell REQUIRED)
EOF
## fix configure to use -lws2_32 instead of -lsocket
#mv configure configure.bak
#sed -e "s/-lsocket/-lws2_32/" configure.bak > configure
#./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --disable-wireshark --without-qt PKG_CONFIG="$(which pkg-config)" &&
# wl-showstatus build &&
# wl-showstatus build-install &&
# make install-strip &&
#    ls -l $INSTALLPREFIX/lib/pkgconfig $INSTALLPREFIX/share/pkgconfig
#    make install-pkgconfigDATA
#    cmake.exe . -LH; rm -f CMakeCache.txt
#mkdir -p build_win &&
# wl-showstatus configure &&
# #cmake.exe -G"MSYS Makefiles" -Wno-dev -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DM_LIBRARY=-lm -DM_INCLUDE_DIR:PATH:FILEPATH=$MINGWPREFIX -S. -Bbuild_win &&
# #cmake.exe -G"MSYS Makefiles" -Wno-dev -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DM_LIBRARY=-lm -DM_INCLUDE_DIR:PATH=$MINGWPREFIX -DPOWERSHELL_EXECUTABLE:FILEPATH=%SystemRoot%\system32\WindowsPowerShell\v1.0\powershell.exe -DWIRESHARK_TARGET_PLATFORM:STRING=win$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) -DWIRESHARK_BASE_DIR:PATH=$(pwd) -DWIRESHARK_LIB_DIR:PATH=$(pwd)/libdir -S. -Bbuild_win &&
# #WIRESHARK_BASE_DIR=$(pwd) WIRESHARK_LIB_DIR=$(pwd)/libdir cmake.exe -G"MSYS Makefiles" -Wno-dev -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DM_LIBRARY=-lm -DM_INCLUDE_DIR:PATH=$MINGWPREFIX -DPOWERSHELL_EXECUTABLE:FILEPATH=%SystemRoot%\system32\WindowsPowerShell\v1.0\powershell.exe -DWIRESHARK_TARGET_PLATFORM:STRING=win$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) -DCMAKE_CL_64:BOOL=FALSE -S. -Bbuild_win &&
# #WIRESHARK_BASE_DIR=$(pwd) WIRESHARK_LIB_DIR=$(pwd)/libdir cmake.exe -G"MSYS Makefiles" -Wno-dev -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DM_LIBRARY=-lm -DM_INCLUDE_DIR:PATH=$MINGWPREFIX -DPOWERSHELL_EXECUTABLE:FILEPATH=%SystemRoot%\system32\WindowsPowerShell\v1.0\powershell.exe -DPLATFORM:STRING=win$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) -DWIRESHARK_TARGET_PLATFORM:STRING=win$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) -DCMAKE_CL_64:BOOL=FALSE -S. -Bbuild_win &&
# #WIRESHARK_BASE_DIR=$(pwd) WIRESHARK_LIB_DIR=$(pwd)/libdir PLATFORM=win$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) cmake.exe -G"MSYS Makefiles" -Wno-dev -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DM_LIBRARY=-lm -DM_INCLUDE_DIR:PATH=$MINGWPREFIX -DPOWERSHELL_EXECUTABLE:FILEPATH=%SystemRoot%\system32\WindowsPowerShell\v1.0\powershell.exe -DPLATFORM:STRING=win$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) -DWIRESHARK_TARGET_PLATFORM:STRING=win$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) -DCMAKE_CL_64:BOOL=FALSE -S. -Bbuild_win &&
# #WIRESHARK_BASE_DIR=$(pwd) WIRESHARK_LIB_DIR=$(pwd)/libdir PLATFORM=win$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) cmake.exe -G"MSYS Makefiles" -Wno-dev -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DM_LIBRARY=-lm -DM_INCLUDE_DIR:PATH=$MINGWPREFIX -DPOWERSHELL_EXECUTABLE:FILEPATH=%SystemRoot%\system32\WindowsPowerShell\v1.0\powershell.exe -DPLATFORM:STRING=win$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) -DWIRESHARK_TARGET_PLATFORM:STRING=win$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) -DCMAKE_CL_64:BOOL=FALSE -DQt5Core_DIR:PATH=$MINGWPREFIX/qt/lib/cmake/Qt5Core -DQt5LinguistTools_DIR:PATH=$MINGWPREFIX/qt/lib/cmake/Qt5LinguistTools -DQt5Multimedia_DIR:PATH=$MINGWPREFIX/qt/lib/cmake/Qt5Multimedia -DQt5PrintSupport_DIR:PATH=$MINGWPREFIX/qt/lib/cmake/Qt5PrintSupport -DQt5Svg_DIR:PATH=$MINGWPREFIX/qt/lib/cmake/Qt5Svg -DQt5WinExtras_DIR:PATH=$MINGWPREFIX/qt/lib/cmake/Qt5WinExtras -S. -Bbuild_win &&
# #PKG_CONFIG= WIRESHARK_BASE_DIR=$(pwd) WIRESHARK_LIB_DIR=$(pwd)/libdir PLATFORM=win$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ cmake.exe -G"MSYS Makefiles" -Wno-dev -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DM_LIBRARY=-lm -DM_INCLUDE_DIR:PATH=$MINGWPREFIX -DPOWERSHELL_EXECUTABLE:FILEPATH=%SystemRoot%\system32\WindowsPowerShell\v1.0\powershell.exe -DPLATFORM:STRING=win$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) -DWIRESHARK_TARGET_PLATFORM:STRING=win$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) -DCMAKE_CL_64:BOOL=FALSE -S. -Bbuild_win &&
# #-DWIRESHARK_CYGWIN_INSTALL_PATH:PATH=/bin 
# PKG_CONFIG= WIRESHARK_BASE_DIR=$(pwd) WIRESHARK_LIB_DIR=$(pwd)/libdir PLATFORM=win$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ cmake.exe -G"MSYS Makefiles" -Wno-dev -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DM_LIBRARY=-lm -DM_INCLUDE_DIR:PATH=$MINGWPREFIX -DPOWERSHELL_EXECUTABLE:FILEPATH=%SystemRoot%\system32\WindowsPowerShell\v1.0\powershell.exe -DPLATFORM:STRING=win$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) -DWIRESHARK_TARGET_PLATFORM:STRING=win$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) -DCMAKE_CL_64:BOOL=FALSE -DGLIB2_INTERNAL_INCLUDE_DIR:PATH=$MINGWPREFIX/lib/glib-2.0/include -DPython3_EXECUTABLE:FILEPARH=$PYDIR/python.exe -S. -Bbuild_win &&
# #sed -i.bak -e "s/Qt5/Qt6/ig" CMakeLists.txt &&
# #PKG_CONFIG= WIRESHARK_BASE_DIR=$(pwd) WIRESHARK_LIB_DIR=$(pwd)/libdir PLATFORM=win$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) PATH=$PATH:$MINGWPREFIX/qt6/bin QTDIR=$MINGWPREFIX/qt6 QMAKESPEC=$MINGWPREFIX/qt6/mkspecs/win32-g++ cmake.exe -G"MSYS Makefiles" -Wno-dev -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DM_LIBRARY=-lm -DM_INCLUDE_DIR:PATH=$MINGWPREFIX -DPOWERSHELL_EXECUTABLE:FILEPATH=%SystemRoot%\system32\WindowsPowerShell\v1.0\powershell.exe -DPLATFORM:STRING=win$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) -DWIRESHARK_TARGET_PLATFORM:STRING=win$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) -DCMAKE_CL_64:BOOL=FALSE -DGLIB2_INTERNAL_INCLUDE_DIR:PATH=$MINGWPREFIX/lib/glib-2.0/include -DPython3_EXECUTABLE:FILEPARH=$PYDIR/python.exe -S. -Bbuild_win &&
# #-DASCIIDOCTOR_EXECUTABLE:FILEPATH=
# #-DPOD2MAN_EXECUTABLE:FILEPATH=
# #-DPOD2HTML_EXECUTABLE:FILEPATH=
# echo "#undef HAVE_GETOPT" >> config.h &&
# echo "#undef HAVE_GETOPT_H" >> config.h &&
# wl-showstatus build &&
# ( make -Cbuild_win install/strip || make -Cbuild_win install ) &&
#    echo OK
mkdir -p build_win &&
 wl-showstatus configure &&
 #PKG_CONFIG= WIRESHARK_BASE_DIR=$(pwd) WIRESHARK_LIB_DIR=$(pwd)/libdir PLATFORM=win$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ cmake.exe -GNinja -Wno-dev -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/wireshark -DCMAKE_BUILD_TYPE:STRING=Release -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DM_LIBRARY=-lm -DM_INCLUDE_DIR:PATH=$MINGWPREFIX -DPOWERSHELL_EXECUTABLE:FILEPATH=%SystemRoot%\system32\WindowsPowerShell\v1.0\powershell.exe -DPLATFORM:STRING=win$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) -DWIRESHARK_TARGET_PLATFORM:STRING=win$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) -DCMAKE_CL_64:BOOL=FALSE -DGLIB2_INTERNAL_INCLUDE_DIR:PATH=$MINGWPREFIX/lib/glib-2.0/include -DPython3_EXECUTABLE:FILEPARH=$PYDIR/python.exe -S. -Bbuild_win &&
 #PKG_CONFIG= WIRESHARK_BASE_DIR=$(pwd) WIRESHARK_LIB_DIR=$(pwd)/libdir PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ cmake.exe -GNinja -Wno-dev -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/wireshark -DCMAKE_BUILD_TYPE:STRING=Release -DENABLE_WINSPARKLE:BOOL=OFF -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DPLATFORM:STRING=win$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) -DWIRESHARK_TARGET_PLATFORM:STRING=win$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) -DGLIB2_INTERNAL_INCLUDE_DIR:PATH=$MINGWPREFIX/lib/glib-2.0/include -DPython3_EXECUTABLE:FILEPARH=$PYDIR/python.exe -S. -Bbuild_win &&
 #WIRESHARK_BASE_DIR=$(pwd) WIRESHARK_LIB_DIR=$(pwd)/libdir PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ cmake.exe -GNinja -Wno-dev -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/wireshark -DCMAKE_BUILD_TYPE:STRING=Release -DENABLE_WINSPARKLE:BOOL=OFF -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DPLATFORM:STRING=win$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) -DWIRESHARK_TARGET_PLATFORM:STRING=win$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) -DGLIB2_INTERNAL_INCLUDE_DIR:PATH=$MINGWPREFIX/lib/glib-2.0/include -DPython3_EXECUTABLE:FILEPARH=$PYDIR/python.exe -S. -Bbuild_win &&
 WIRESHARK_BASE_DIR=$(pwd) WIRESHARK_LIB_DIR=$(pwd)/libdir PATH=$PATH:$MINGWPREFIX/qt6/bin QTDIR=$MINGWPREFIX/qt6 QMAKESPEC=$MINGWPREFIX/qt6/mkspecs/win32-g++ cmake.exe -GNinja -Wno-dev -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/wireshark -DCMAKE_BUILD_TYPE:STRING=Release -DENABLE_WINSPARKLE:BOOL=OFF -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DPLATFORM:STRING=win$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) -DWIRESHARK_TARGET_PLATFORM:STRING=win$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) -DGLIB2_INTERNAL_INCLUDE_DIR:PATH=$MINGWPREFIX/lib/glib-2.0/include -DPython3_EXECUTABLE:FILEPARH=$PYDIR/python.exe -S. -Bbuild_win &&
 echo "#undef HAVE_GETOPT" >> config.h &&
 echo "#undef HAVE_GETOPT_H" >> config.h &&
 wl-showstatus build &&
 ( ninja -Cbuild_win install/strip || ninja -Cbuild_win install ) &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
####PATH=$MINGWPREFIX/qt/bin:$PATH QT_PLUGIN_PATH=$MINGWPREFIX/qt/plugins $MINGWPREFIX/share/wireshark/Wireshark.exe
####PATH=$MINGWPREFIX/qt6/bin:$PATH QT_PLUGIN_PATH=$MINGWPREFIX/qt6/plugins $MINGWPREFIX/share/wireshark/bin/wireshark.exe




## make standalone package
#mkdir -p Wireshark &&
#PATH=$MINGWPREFIX/qt/bin:$PATH copypedeps -r -n $MINGWPREFIX/share/wireshark/*.{exe,dll} Wireshark/
####TO DO: make it work



## make standalone package
#mkdir -p Wireshark/plugins &&
#PATH=$MINGWPREFIX/qt/bin:$PATH copypedeps -r $MINGWPREFIX/share/wireshark/*.{exe,dll} Wireshark/ &&
#for D in $(find $MINGWPREFIX/qt/plugins -type d); do
# mkdir -p Wireshark/plugins/$(echo $D|sed -e "s?^$MINGWPREFIX/qt/plugins/??")
# mkdir -p Wireshark/plugins.deps/$(echo $D|sed -e "s?^$MINGWPREFIX/qt/plugins/??")
# PATH=$MINGWPREFIX/qt/bin:$PATH copypedeps -r -n -q $D Wireshark/plugins.deps/$(echo $D|sed -e "s?^$MINGWPREFIX/qt/plugins/??")
#done &&
#for F in $(find $MINGWPREFIX/qt/plugins -name '*.dll'); do
# mv -f Wireshark/plugins.deps/$(echo $F|sed -e "s?^$MINGWPREFIX/qt/plugins/??") Wireshark/plugins/$(echo $F|sed -e "s?^$MINGWPREFIX/qt/plugins/??")
#done &&
#for F in $(find Wireshark/plugins.deps -name '*.dll'); do
# mv -f $F Wireshark/
#done &&
#echo SUCCESS



## make standalone package
#mkdir -p Wireshark/plugins &&
#PATH=$MINGWPREFIX/qt6/bin:$PATH copypedeps -r $MINGWPREFIX/share/wireshark/*.exe $MINGWPREFIX/share/wireshark/bin/*.{exe,dll} Wireshark/ &&
#for D in $(find $MINGWPREFIX/qt6/plugins -type d) $(find $MINGWPREFIX/share/wireshark/plugins -type d); do
# mkdir -p Wireshark/plugins/$(echo $D|sed -e "s?^.*/plugins/??")
# mkdir -p Wireshark/plugins.deps/$(echo $D|sed -e "s?^.*/plugins/??")
# PATH=$MINGWPREFIX/qt6/bin:$PATH copypedeps -r -n -q $D Wireshark/plugins.deps/$(echo $D|sed -e "s?^.*/plugins/??")
#done &&
#for F in $(find $MINGWPREFIX/qt6/plugins -name '*.dll') $(find $MINGWPREFIX/share/wireshark/plugins -name '*.dll'); do
# mv -f Wireshark/plugins.deps/$(echo $F|sed -e "s?^.*/plugins/??") Wireshark/plugins/$(echo $F|sed -e "s?^.*/plugins/??")
#done &&
#for F in $(find Wireshark/plugins.deps -name '*.dll'); do
# mv -f $F Wireshark/
#done &&
#echo SUCCESS

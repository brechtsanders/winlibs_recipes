export NAME="Synthizer"
export STATUS=
export URL=https://github.com/synthizer/synthizer
export BASENAME=synthizer
export DESCRIPTION="Synthizer is a library for game/VR audio applications. The goal is that you statically link it and it does everything you need from file decoding and asset caching all the way down the stack."
export CATEGORY=audio
export TYPE=library
#export VERSION=master
#export VERSIONDATE=20210107
#export VERSION=0.8.4
#export VERSIONDATE=20210206
#export VERSION=0.8.5
#export VERSIONDATE=20210107
#export VERSION=0.8.6
#export VERSIONDATE=20210110
#export VERSION=0.8.7
#export VERSIONDATE=20210118
#export VERSION=0.8.8
#export VERSIONDATE=20210201
#export VERSION=0.8.9
#export VERSIONDATE=20210207
#export VERSION=0.8.10
#export VERSIONDATE=20210214
#export VERSION=0.8.16
#export VERSIONDATE=20210228
#export VERSION=0.8.17
#export VERSIONDATE=20210322
#export VERSION=0.9.0
#export VERSIONDATE=20210704
#export VERSION=0.10.0
#export VERSIONDATE=20210719
#export VERSION=0.10.2
#export VERSIONDATE=20210813
#export VERSION=0.10.3
#export VERSIONDATE=20210820
#export VERSION=0.10.4
#export VERSIONDATE=20210919
#export VERSION=0.11.1
#export VERSIONDATE=20211012
#export VERSION=0.11.2
#export VERSIONDATE=20211014
#export VERSION=0.11.3
#export VERSIONDATE=20211016
#export VERSION=0.11.4
#export VERSIONDATE=20211025
#export VERSION=0.11.5
#export VERSIONDATE=20211107
#export VERSION=0.11.6
#export VERSIONDATE=20211128
#export VERSION=0.11.7
#export VERSIONDATE=20220307
export VERSION=0.11.8
export VERSIONDATE=20220319
#export VERSION=0.11.10
#export VERSIONDATE=20220925
#export VERSION=0.11.11
#export VERSIONDATE=20221113
#export VERSION=0.11.12
#export VERSIONDATE=20221217
#export VERSION=0.11.13
#export VERSIONDATE=20230305
####CMake Error at CMakeLists.txt:39 (FetchContent_MakeAvailable): Unknown CMake command "FetchContent_MakeAvailable".
wl-showstatus --package-version
export DEPENDENCIES=pthreads
#export DEPENDENCIES=pthreads,jnetlib,dr_libs
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=Unlicense
export DOWNLOADURL="https://github.com/synthizer/synthizer/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/synthizer/synthizer/archive/$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xfz $TARBALLDIR/$BASENAME/$VERSION.tar.gz
cd $BASENAME-$VERSION
## fix missing isinf() in test/verify_properties.cpp (version = 0.8.4)
#sed -i.bak -e "s/isinf/std::&/g" test/verify_properties.cpp
## fix redefinitions in include/synthizer/property_impl.hpp (version >= 0.8.5)
#patch -ulbf include/synthizer/property_impl.hpp << EOF
#@@ -95,2 +95,7 @@
#        /* DV is default value. */
#+       #undef INT_P
#+       #undef DOUBLE_P
#+       #undef DOUBLE3_P
#+       #undef DOUBLE6_P
#+       #undef OBJECT_P
#        #define INT_P(IGNORED, N, IGNORED2, IGNORED3, IGNORED4, DV) IntPropertyN{DV};
#@@ -119,2 +124,7 @@
# /* Now, define all the methods. */
#+#undef INT_P
#+#undef DOUBLE_P
#+#undef DOUBLE3_P
#+#undef DOUBLE6_P
#+#undef OBJECT_P
# #define INT_P(E, UNDERSCORE_NAME, CAMEL_NAME, MIN, MAX, DV) \\
#@@ -260,2 +270,7 @@
#
#+#undef INT_P
#+#undef DOUBLE_P
#+#undef OBJECT_P
#+#undef DOUBLE3_P
#+#undef DOUBLE6_P
# #define INT_P(...) HAS_(__VA_ARGS__)
#@@ -276,2 +291,7 @@
#
#+#undef INT_P
#+#undef DOUBLE_P
#+#undef DOUBLE3_P
#+#undef DOUBLE6_P
#+#undef OBJECT_P
# #define INT_P(P, UNDERSCORE_NAME, CAMEL_NAME, ...) GET_(int, P, CAMEL_NAME)
#@@ -293,2 +313,7 @@
#
#+#undef INT_P
#+#undef DOUBLE_P
#+#undef OBJECT_P
#+#undef DOUBLE3_P
#+#undef DOUBLE6_P
# #define INT_P(P, UNDERSCORE_NAME, CAMEL_NAME, ...) VALIDATE_(int, P, CAMEL_NAME)
#@@ -307,2 +332,7 @@
#
#+#undef INT_P
#+#undef DOUBLE_P
#+#undef OBJECT_P
#+#undef DOUBLE3_P
#+#undef DOUBLE6_P
# #define INT_P(P, UNDERSCORE_NAME, CAMEL_NAME, ...) SET_(int, P, CAMEL_NAME)
#EOF
# fix src/memory.cpp (version >= 0.9.0)
patch -ulbf src/memory.cpp << EOF
@@ -106,3 +106,3 @@

-       logDebug("Deferred free processed %zu frees in a background thread", processed);
+       logDebug("Deferred free processed %lu frees in a background thread", (unsigned long)processed);
 }
EOF
#touch deps/CMakeLists.txt
#sed -i.bak -e "s/FetchContent_MakeAvailable/#&/" CMakeLists.txt
mkdir -p build_static build_shared &&
 wl-showstatus configure &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DSYNTHIZER_LIB_TYPE:STRING=STATIC -DBUILD_TESTING:BOOL=OFF -DCMAKE_CXX_FLAGS:STRING="-fpermissive" -S. -Bbuild_static &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DSYNTHIZER_LIB_TYPE:STRING=STATIC -DBUILD_TESTING:BOOL=OFF -S. -Bbuild_static &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DSYNTHIZER_LIB_TYPE:STRING=STATIC -DSYZ_INTEGRATING:BOOL=ON -DBUILD_TESTING:BOOL=OFF -S. -Bbuild_static &&
 #-DSYZ_INTEGRATING:BOOL=ON 
 wl-showstatus configure &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DSYNTHIZER_LIB_TYPE:STRING=SHARED -DBUILD_TESTING:BOOL=OFF -DCMAKE_CXX_FLAGS:STRING="-fpermissive" -S. -Bbuild_shared &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DSYNTHIZER_LIB_TYPE:STRING=SHARED -DBUILD_TESTING:BOOL=OFF -S. -Bbuild_shared &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DSYNTHIZER_LIB_TYPE:STRING=SHARED -DSYZ_INTEGRATING:BOOL=ON -DBUILD_TESTING:BOOL=OFF -S. -Bbuild_shared &&
 ## fix execution of Python scripts
 #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
 #wl-showstatus build &&
 #ninja -Cbuild_static &&
 #wl-showstatus build &&
 #ninja -Cbuild_shared &&
 wl-showstatus build-install &&
 ninja -Cbuild_static install/strip &&
 wl-showstatus build-install &&
 ninja -Cbuild_shared install/strip &&
 # manually install header files
 mkdir -p $INSTALLPREFIX/include &&
 cp -rf include/synthizer $INSTALLPREFIX/include/ &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




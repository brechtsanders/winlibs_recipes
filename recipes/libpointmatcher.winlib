export NAME="libpointmatcher"
export STATUS=
export URL=https://github.com/ethz-asl/libpointmatcher
export BASENAME=libpointmatcher
export DESCRIPTION="An \"Iterative Closest Point\" library for 2-D/3-D mapping in Robotics"
export CATEGORY=dataprocessing
export TYPE=library
export VERSION=1.3.1
export VERSIONDATE=20210627
wl-showstatus --package-version
export DEPENDANCIES=libnabo,eigen,boost,yaml-cpp
export OPTIONALDEPENDANCIES=
export BUILDDEPENDANCIES=cmake,ninja
export LICENSEFILE=README.md
export LICENSETYPE=BSD
export DOWNLOADURL="https://github.com/ethz-asl/libpointmatcher/releases/"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/ethz-asl/libpointmatcher/archive/refs/tags/$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xfz $TARBALLDIR/$BASENAME/$VERSION.tar.gz
cd $BASENAME-$VERSION
# fix CMakeLists.txt (version >= 1.3.1)
patch -ulbf CMakeLists.txt << EOF
@@ -233,5 +233,5 @@
 check_symbol_exists(_POSIX_TIMERS "unistd.h;time.h" POSIX_TIMERS)
-if (POSIX_TIMERS AND NOT APPLE)
+if (POSIX_TIMERS AND NOT APPLE AND NOT WIN32)
        set(EXTERNAL_LIBS \${EXTERNAL_LIBS} rt)
-endif (POSIX_TIMERS AND NOT APPLE)
+endif (POSIX_TIMERS AND NOT APPLE AND NOT WIN32)

EOF
mkdir -p build_static build_shared &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DUSE_OPEN_MP:BOOL=ON -DUSE_OPEN_CL:BOOL=ON -DUSE_SYSTEM_YAML_CPP:BOOL=OFF -DEIGEN_INCLUDE_DIR:FILEPATH=$MINGWPREFIX/include/eigen3 -S. -Bbuild_static &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DUSE_OPEN_MP:BOOL=ON -DUSE_OPEN_CL:BOOL=ON -DUSE_SYSTEM_YAML_CPP:BOOL=ON -DEIGEN_INCLUDE_DIR:FILEPATH=$MINGWPREFIX/include/eigen3 -DCMAKE_CXX_FLAGS:STRING="-Wno-array-bounds" -S. -Bbuild_static &&
 #-DUSE_SYSTEM_YAML_CPP:BOOL=ON 
 sed -i.bak -e "s/\$(MAKE)/make/g" build_static/build.ninja &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DUSE_OPEN_MP:BOOL=ON -DUSE_OPEN_CL:BOOL=ON -DUSE_SYSTEM_YAML_CPP:BOOL=OFF -DEIGEN_INCLUDE_DIR:FILEPATH=$MINGWPREFIX/include/eigen3 -S. -Bbuild_shared &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DUSE_OPEN_MP:BOOL=ON -DUSE_OPEN_CL:BOOL=ON -DUSE_SYSTEM_YAML_CPP:BOOL=ON -DEIGEN_INCLUDE_DIR:FILEPATH=$MINGWPREFIX/include/eigen3 -DCMAKE_CXX_FLAGS:STRING="-Wno-array-bounds" -S. -Bbuild_shared &&
 sed -i.bak -e "s/\$(MAKE)/make/g" build_shared/build.ninja &&
 wl-showstatus build-install &&
 ninja -Cbuild_static install/strip &&
 wl-showstatus build-install &&
 ninja -Cbuild_shared install/strip &&
 strip build_shared/*.dll &&
 cp -f build_shared/*.dll $INSTALLPREFIX/bin/ &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




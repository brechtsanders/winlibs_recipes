export NAME="fswatch"
export STATUS=
export URL=http://emcrisostomo.github.io/fswatch/
export BASENAME=fswatch
export DESCRIPTION="fswatch is a file change monitor that receives notifications when the contents of the specified files or directories are modified."
export CATEGORY=system
export TYPE=library
#export VERSION=1.5.1
#export VERSIONDATE=20150828
#export VERSION=1.6.0
#export VERSIONDATE=20151001
#export VERSION=1.6.1
#export VERSIONDATE=20151024
#export VERSION=1.7.0
#export VERSIONDATE=20151115
#export VERSION=1.8.0
#export VERSIONDATE=20160131
#export VERSION=1.9.1
#export VERSIONDATE=20160406
#export VERSION=1.9.2
#export VERSIONDATE=20160412
#export VERSION=1.9.3
#export VERSIONDATE=20160725
#export VERSION=1.10.0
#export VERSIONDATE=20170815
####configure: error: The realpath function cannot be found.
#export VERSION=1.11.0
#export VERSIONDATE=20171026
#export VERSION=1.11.1
#export VERSIONDATE=20171028
#export VERSION=1.11.2
#export VERSIONDATE=20171030
#export VERSION=1.11.3
#export VERSIONDATE=20180503
####configure: error: The regcomp function cannot be found.
#export VERSION=1.12.0
#export VERSIONDATE=20180630
####configure: error: The select function cannot be found.
#export VERSION=1.13.0
#export VERSIONDATE=20180928
export VERSION=1.14.0
export VERSIONDATE=20181205
#export VERSION=1.15.0
#export VERSIONDATE=20200717
#export VERSION=1.16.0
#export VERSIONDATE=20210603
#export VERSION=1.17.0
#export VERSIONDATE=20220624
wl-showstatus --package-version
export DEPENDANCIES=gettext,pcre
export OPTIONALDEPENDANCIES=
export BUILDDEPENDANCIES=
export LICENSEFILE=COPYING
export LICENSETYPE=GPL
export DOWNLOADURL="https://github.com/emcrisostomo/fswatch/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://github.com/emcrisostomo/fswatch/releases/download/$VERSION/$BASENAME-$VERSION.tar.gz
export DOWNLOADSOURCEURL=https://github.com/emcrisostomo/fswatch/archive/$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#mv $TARBALLDIR/$BASENAME/$VERSION.tar.gz $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
wl-wait4deps
wl-showstatus extract
#tar xfz $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
tar xfz $TARBALLDIR/$BASENAME/$VERSION.tar.gz
cd $BASENAME-$VERSION
# fix missing S_ISLNK in libfswatch/src/libfswatch/c++/poll_monitor.cpp
patch -ulbf libfswatch/src/libfswatch/c++/poll_monitor.cpp << EOF
@@ -131,2 +131,3 @@

+#ifndef _WIN32
     if (follow_symlinks && S_ISLNK(fd_stat.st_mode))
@@ -139,2 +140,3 @@
     }
+#endif

EOF
## fix missing realpath/lstat in libfswatch/src/libfswatch/c++/path_utils.cpp (version <= 1.13.0)
#patch -ulbf libfswatch/src/libfswatch/c++/path_utils.cpp << EOF
#@@ -59,2 +59,5 @@
#   {
#+#ifdef _WIN32
#+    return false;
#+#else
#     char *real_path = realpath(path.c_str(), nullptr);
#@@ -66,2 +69,3 @@
#     return ret;
#+#endif
#   }
#@@ -82,2 +86,6 @@
#   {
#+#ifdef _WIN32
#+    fsw_logf_perror(_("Cannot lstat %s (not implemented on Windows)"), path.c_str());
#+    return false;
#+#else
#     if (lstat(path.c_str(), &fd_stat) != 0)
#@@ -90,2 +98,3 @@
#     return true;
#+#endif
#   }
#EOF
# fix missing realpath/lstat in libfswatch/src/libfswatch/c++/path_utils.cpp (version >= 1.14.0)
patch -ulbf libfswatch/src/libfswatch/c++/path_utils.cpp << EOF
@@ -66,5 +66,9 @@
   std::string fsw_realpath(const char *path, char *resolved_path)
   {
+#ifdef _WIN32
+    char *ret = _fullpath(resolved_path, path, _MAX_PATH);
+#else
     char *ret = realpath(path, resolved_path);
+#endif

     if (ret == nullptr)
@@ -95,8 +99,12 @@
   bool lstat_path(const string& path, struct stat& fd_stat)
   {
+#ifdef _WIN32
+    fsw_logf_perror(_("Cannot lstat %s (not implemented on Windows)"), path.c_str());
+#else
     if (lstat(path.c_str(), &fd_stat) == 0)
       return true;

     fsw_logf_perror(_("Cannot lstat %s"), path.c_str());
+#endif
     return false;
   }
EOF
## fix missing sigaction/realpath in fswatch/src/fswatch.cpp (version <= 1.13.0)
#patch -ulbf fswatch/src/fswatch.cpp << EOF
#@@ -36,2 +36,5 @@
# #include "libfswatch/c++/libfswatch_exception.hpp"
#+#ifdef _WIN32
#+#define realpath(N,R) _fullpath((R),(N),_MAX_PATH)
#+#endif
#
#@@ -297,2 +300,3 @@
# {
#+#ifndef _WIN32
#   struct sigaction action;
#@@ -328,2 +332,3 @@
#   }
#+#endif
# }
#EOF
# fix missing sigaction/realpath in fswatch/src/fswatch.cpp (version >= 1.14.0)
patch -ulbf fswatch/src/fswatch.cpp << EOF
@@ -298,4 +298,5 @@
 static void register_signal_handlers()
 {
+#ifndef _WIN32
   struct sigaction action;
   action.sa_handler = close_handler;
@@ -329,4 +330,5 @@
     std::cerr << _("SIGINT handler registration failed") << std::endl;
   }
+#endif
 }
EOF
# fix libfswatch/src/libfswatch/c++/windows/win_paths.cpp
patch -ulbf libfswatch/src/libfswatch/c++/windows/win_paths.cpp << EOF
@@ -16,3 +16,7 @@
 #include "win_paths.hpp"
+#ifdef  __CYGWIN__
 #include <sys/cygwin.h>
+#else
+#include <windows.h>
+#endif
 #include "../libfswatch_exception.hpp"
@@ -28,2 +32,3 @@
     {
+#ifdef  __CYGWIN__
       void * raw_path = cygwin_create_path(CCP_POSIX_TO_WIN_W, path.c_str());
@@ -36,2 +41,11 @@
       return win_path;
+#else
+      int pathlen = (int)path.length() + 1;
+      int buflen = MultiByteToWideChar(CP_ACP, 0, path.c_str(), pathlen, 0, 0);
+      wchar_t* buf = new wchar_t[buflen];
+      MultiByteToWideChar(CP_ACP, 0, path.c_str(), pathlen, buf, buflen);
+      std::wstring result(buf);
+      delete[] buf;
+      return result;
+#endif
     }
@@ -40,2 +54,3 @@
     {
+#ifdef  __CYGWIN__
       void * raw_path = cygwin_create_path(CCP_WIN_W_TO_POSIX, path.c_str());
@@ -48,2 +63,11 @@
       return posix_path;
+#else
+      int pathlen = (int)path.length() + 1;
+      int buflen = WideCharToMultiByte(CP_ACP, 0, path.c_str(), pathlen, 0, 0, 0, 0);
+      char* buf = new char[buflen];
+      WideCharToMultiByte(CP_ACP, 0, path.c_str(), pathlen, buf, buflen, 0, 0);
+      std::string result(buf);
+      delete[] buf;
+      return result;
+#endif
     }
EOF
# fix missing files
touch README README.illumos
# remove detection of realpath
mv configure.ac configure.ac.bak2 &&
grep -v "realpath" configure.ac.bak2 > configure.ac
# remove detection of realpath
mv configure.ac configure.ac.bak3 &&
grep -v "The select function cannot be found." configure.ac.bak3 > configure.ac
# remove detection of realpath/regcomp/select
mv libfswatch/configure.ac libfswatch/configure.ac.bak &&
grep -v "realpath\|regcomp\|select" libfswatch/configure.ac.bak > libfswatch/configure.ac
# fix for building windows_monitor
mv libfswatch/src/libfswatch/Makefile.am libfswatch/src/libfswatch/Makefile.am.bak &&
sed -e "s/USE_CYGWIN/USE_WINDOWS/" libfswatch/src/libfswatch/Makefile.am.bak > libfswatch/src/libfswatch/Makefile.am
wl-showstatus configure &&
 ( autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal || (
  touch README libfswatch/README libfswatch/README config/ltmain.sh config.h.in &&
  automake -a -f -c &&
  autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal
 )) &&
 #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM LDFLAGS="-Wl,--as-needed -lregex" &&
 ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM CFLAGS="-DHAVE_WINDOWS" CXXFLAGS="-DHAVE_WINDOWS" &&
 # fix building DLLs
 sed -i.bak -e "s/\(allow_undefined=\)yes/\1no/" libtool &&
 ## fix missing realpath
 #echo "#define realpath(N,R) _fullpath((R),(N),_MAX_PATH)" >> config.h &&
 #wl-showstatus build &&
 #make &&
 wl-showstatus build-install &&
 make install-strip &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
####TO DO: fix link stuff



#export BUILDDEPENDANCIES=cmake,ninja
#touch libfswatch_config.h
#echo '#define PACKAGE_STRING "fswatch"' > libfswatch_config.h
#echo '#define FSW_MTIME(stat) ((stat).st_mtime)' >> libfswatch_config.h
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -S. -Bbuild_static &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -S. -Bbuild_shared &&
# ## fix execution of Python scripts
# #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
# #wl-showstatus build &&
# #ninja -Cbuild_static &&
# #wl-showstatus build &&
# #ninja -Cbuild_shared &&
# wl-showstatus build-install &&
# ninja -Cbuild_static install/strip &&
# wl-showstatus build-install &&
# ninja -Cbuild_shared install/strip &&
#    echo OK

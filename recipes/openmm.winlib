export NAME="OpenMM"
export STATUS=
export URL=https://simtk.org/projects/openmm
#export URL=https://github.com/openmm/openmm
export BASENAME=openmm
export DESCRIPTION="OpenMM is a toolkit for molecular simulation. It can be used either as a stand-alone application for running simulations, or as a library you call from your own code. It provides a combination of extreme flexibility (through custom forces and integrators), openness, and high performance (especially on recent GPUs) that make it truly unique among simulation codes."
export CATEGORY=science
export TYPE=library
#export VERSION=7.5.1
#export VERSIONDATE=20210707
#export VERSION=7.6.0
#export VERSIONDATE=20210827
#export VERSION=7.7.0
#export VERSIONDATE=20211222
#export VERSION=8.0.0
#export VERSIONDATE=20230131
#export VERSION=8.1.0
#export VERSIONDATE=20231128
#export VERSION=8.1.1
#export VERSIONDATE=20240113
#export VERSION=8.1.2
#export VERSIONDATE=20240712
export VERSION=8.2.0
export VERSIONDATE=20241109
wl-showstatus --package-version
export DEPENDENCIES=
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja,swig,doxygen
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=docs-source/licenses/Licenses.txt
export LICENSETYPE=MIT
export DOWNLOADURL="https://github.com/openmm/openmm/releases/"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/openmm/openmm/archive/refs/tags/$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/$VERSION.tar.gz
cd $BASENAME-$VERSION
# fix duplicate pthread.h (version >= 8.1.1)
mv libraries/pthreads/include/pthread.h libraries/pthreads/include/pthread.h.bak &&
mv libraries/pthreads/src/pthread.cpp libraries/pthreads/src/pthread.cpp.bak &&
touch libraries/pthreads/src/pthread.cpp
# fix undefined int32_t in openmmapi/include/openmm/internal/vectorize_sse.h (version >= 8.1.1)
mv openmmapi/include/openmm/internal/vectorize_sse.h openmmapi/include/openmm/internal/vectorize_sse.h.bak &&
echo "#include <cstdint>" > openmmapi/include/openmm/internal/vectorize_sse.h &&
cat openmmapi/include/openmm/internal/vectorize_sse.h.bak >> openmmapi/include/openmm/internal/vectorize_sse.h
mkdir -p build_win &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DOPENMM_BUILD_STATIC_LIB:BOOL=ON -DOPENMM_BUILD_SHARED_LIB:BOOL=ON -DOPENMM_BUILD_EXAMPLES:BOOL=OFF -DOPENMM_BUILD_OPENCL_LIB:BOOL=OFF -DOPENMM_BUILD_OPENCL_TESTS:BOOL=OFF -DBUILD_TESTING:BOOL=OFF -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DCMAKE_CXX_FLAGS:STRING="-fpermissive" -S. -Bbuild_win &&
 #-DOPENMM_BUILD_OPENCL_LIB:BOOL=ON 
 wl-showstatus build-install &&
 ninja -Cbuild_win install/strip &&
 for F in $INSTALLPREFIX/lib/*_static.a; do
  cp -u $F $(echo $F|sed -e "s/_static\(\.a\)/\1/")
 done &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




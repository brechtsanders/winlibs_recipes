#export NAME="libsecret"
#export STATUS=
#export URL=http://live.gnome.org/Libsecret
#export BASENAME=libsecret
#export DESCRIPTION="libsecret is a library for storing and retrieving passwords and other secrets. It communicates with the \"Secret Service\" using DBus. gnome-keyring and ksecretservice are both implementations of a Secret Service."
#export CATEGORY=security
#export TYPE=library
##export VERSION=0.7
##export VERSIONDATE=20120716
#####egg/egg-secure-memory.c:35:22: error: sys/mman.h: No such file or directory
##export VERSION=0.8
##export VERSIONDATE=20120806
##export VERSION=0.9
##export VERSIONDATE=20120824
##export VERSION=0.10
##export VERSIONDATE=20120918
#####tool/secret-tool.c:268: undefined reference to `_getpass'
##export VERSION=0.11
##export VERSIONDATE=20121016
##export VERSION=0.12
##export VERSIONDATE=20121122
##export VERSION=0.13
##export VERSIONDATE=20130204
##export VERSION=0.14
##export VERSIONDATE=20130305
##export VERSION=0.15
##export VERSIONDATE=20130318
##export VERSION=0.16
##export VERSIONDATE=20130827
##export VERSION=0.18
##export VERSIONDATE=20140307
##export VERSION=0.18.2
##export VERSIONDATE=20150421
##export VERSION=0.18.3
##export VERSIONDATE=20150811
##export VERSION=0.18.5
##export VERSIONDATE=20160404
##export VERSION=0.18.6
##export VERSIONDATE=20180330
##export VERSION=0.18.7
##export VERSIONDATE=20181229
##export VERSION=0.18.8
##export VERSIONDATE=20190302
##export VERSION=0.19.0
##export VERSIONDATE=20190905
##export VERSION=0.19.1
##export VERSIONDATE=20190907
##export DEPENDENCIES=glib2,libgcrypt,gettext
##export OPTIONALDEPENDENCIES=
##export BUILDDEPENDENCIES=
##export OPTIONALBUILDDEPENDENCIES=
##export VERSION=0.20.0
##export VERSIONDATE=20200113
##export VERSION=0.20.1
##export VERSIONDATE=20200205
##export VERSION=0.20.2
##export VERSIONDATE=20200311
##export VERSION=0.20.3
##export VERSIONDATE=20200415
#export VERSION=0.20.4
#export VERSIONDATE=20201011
#####libsecret/secret-file-backend.c:28:10: fatal error: gio/gunixfdlist.h: No such file or directory
#wl-showstatus --package-version
#export DEPENDENCIES=glib2,gettext
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=
#export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=COPYING
#export LICENSETYPE=GPL
#export DOWNLOADURL="http://ftp.gnome.org/pub/gnome/sources/libsecret/"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://ftp.gnome.org/pub/gnome/sources/libsecret/$(echo $VERSION|sed -e "s/^\([0-9]*\.[0-9]*\).*$/\1/")/$BASENAME-$VERSION.tar.xz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#tar xJ --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.xz
#cd $BASENAME-$VERSION
## fix missing sys/mman.h
#mkdir -p sys
#cat > sys/mman.h << EOF
##include <io.h>
##include <windows.h>
##define PROT_READ 1
##define PROT_WRITE 2
#//#define MAP_SHARED 0
##define MAP_PRIVATE 2
##define MAP_FAILED NULL
##define MAP_ANON 0
#void* mmap (void *start, size_t length, int prot, int flags, int fd, off_t offset)
#{
#  HANDLE handle;
#/*
#  if (offset % getpagesize() != 0)
#    return NULL;
#*/
#  if ((handle = CreateFileMapping((HANDLE)_get_osfhandle(fd), NULL, PAGE_WRITECOPY, 0, 0, NULL)) == NULL)
#    return NULL;
#  start = MapViewOfFile(handle, FILE_MAP_COPY, 0, offset, length);
#  CloseHandle(handle);
#  return start;
#}
#int munmap (void *start, size_t length)
#{
#  UnmapViewOfFile(start);
#  return 0;
#}
#int getpagesize ()
#{
#  SYSTEM_INFO sysinfo;
#  GetSystemInfo(&sysinfo);
#  return sysinfo.dwPageSize;
#}
#EOF
## fix libsecret/tests/mock-service.c
#patch -ulbf libsecret/tests/mock-service.c << EOF
#--- libsecret/tests/mock-service.c  2012-08-06 11:27:36 +0200
#+++ libsecret/tests/mock-service.c  2012-08-06 23:02:18 +0200
#@@ -23,2 +23,17 @@
# #include <stdio.h>
#+#ifdef __MINGW32__
#+#include <windows.h>
#+#include <fcntl.h>
#+#define pipe(fds) _pipe(fds, 4096, _O_BINARY)
#+static int kill (GPid pid, int sig)
#+{
#+ BOOL status;
#+ HANDLE hProcess;
#+ if ((hProcess = OpenProcess(PROCESS_TERMINATE, FALSE, (DWORD)pid)) == NULL || hProcess == INVALID_HANDLE_VALUE)
#+  return -1;
#+ status = TerminateProcess(hProcess, ~0);
#+ CloseHandle(hProcess);
#+ return (status ? 0 : -1);
#+}
#+#endif
#
#EOF
## fix missing getpass in tool/secret-tool.c
#mv tool/secret-tool.c tool/secret-tool.c.bak
#cat > tool/secret-tool.c << EOF
##include <io.h>
##include <stdio.h>
##include <conio.h>
#static char *getpass (const char *prompt)
#{
#  static char buf[128];
#  size_t i;
#  fputs(prompt, stderr);
#  fflush(stderr);
#  for (i = 0; i < sizeof(buf) - 1; i++) {
#    buf[i] = _getch();
#    if (buf[i] == '\r' || buf[i] == '\r')
#      break;
#  }
#  buf[i] = 0;
#  fputs("\n", stderr);
#  return buf;
#}
#EOF
#cat tool/secret-tool.c.bak >> tool/secret-tool.c
## fix missing pipe/kill in libsecret/mock-service.c (version >= 0.18)
#mv libsecret/mock-service.c libsecret/mock-service.c.bak
#cat > libsecret/mock-service.c << EOF
##include <fcntl.h>
##define pipe(fds) _pipe(fds, 4096, _O_BINARY)
##include <windows.h>
#static int kill (DWORD pid, int sig)
#{
# BOOL status;
# HANDLE hProcess;
# if ((hProcess = OpenProcess(PROCESS_TERMINATE, FALSE, pid)) == NULL || hProcess == INVALID_HANDLE_VALUE)
#  return -1;
# status = TerminateProcess(hProcess, ~0);
# CloseHandle(hProcess);
# return (status ? 0 : -1);
#}
#EOF
#cat libsecret/mock-service.c.bak >> libsecret/mock-service.c
## skip building docs/man
#cat > docs/man/Makefile.in << EOF
#clean:
#all:
#install:
#install-strip:
#EOF
## avoid xsltproc issue in Makefile.in (version >= 0.18)
#####I/O error : Attempt to load network entity http://docbook.sourceforge.net/release/xsl/current/manpages/docbook.xsl
#mv Makefile.in Makefile.in.bak
#sed -e "s/--nonet//" Makefile.in.bak > Makefile.in
## fix problem detecting GNU gettext tools on 64-bit
#if ( echo $RUNPLATFORM | grep -q x86_64 ); then
# mv configure configure.bak
# sed -e "s/as_fn_error\(.*GNU gettext tools not found; required for intltool\)/as_echo\1/" configure.bak > configure
#fi
## fix dependancy on gio-unix
#mv configure configure.bak2
#sed -e "s/gio-unix/gio-windows/g" configure.bak2 > configure
#wl-showstatus configure &&
##PERL="$PERLDIR/bin/perl.exe" ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-introspection=no &&
##INTLTOOL_PERL="$PERLDIR/bin/perl.exe" ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-introspection=no &&
#INTLTOOL_PERL="$PERLDIR/bin/perl.exe" ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --disable-gcrypt --disable-vala --disable-introspection &&
# wl-showstatus build-install &&
# # fix building DLLs
# mv libtool libtool.bak &&
# sed -e "s/\(allow_undefined=\)yes/\1no/" libtool.bak > libtool &&
# #make install-strip &&
# #PYTHONPATH=$MINGWPREFIX/share:$MINGWPREFIX/share/glib-2.0${PYTHONPATH:+:$PYTHONPATH} make install-strip &&
# PATH=$PYDIR:$PATH PYTHONPATH=$MINGWPREFIX/share:$MINGWPREFIX/share/glib-2.0${PYTHONPATH:+:$PYTHONPATH} make install-strip &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION



export NAME="libsecret"
export STATUS=
export URL=http://live.gnome.org/Libsecret
export BASENAME=libsecret
export DESCRIPTION="libsecret is a library for storing and retrieving passwords and other secrets. It communicates with the \"Secret Service\" using DBus. gnome-keyring and ksecretservice are both implementations of a Secret Service."
export CATEGORY=security
export TYPE=library
export VERSION=0.20.5
export VERSIONDATE=20220221
wl-showstatus --package-version
export DEPENDENCIES=glib2,gettext,gobject-introspection,libgcrypt,tpm2-tss,mman-win32
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=meson,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=COPYING
export LICENSETYPE=GPL
export DOWNLOADURL="http://ftp.gnome.org/pub/gnome/sources/libsecret/"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=http://ftp.gnome.org/pub/gnome/sources/libsecret/$(echo $VERSION|sed -e "s/^\([0-9]*\.[0-9]*\).*$/\1/")/$BASENAME-$VERSION.tar.xz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
tar xJ --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.xz
cd $BASENAME-$VERSION
# fix missing pipe/kill in libsecret/mock-service.c (version >= 0.18)
mv libsecret/mock-service.c libsecret/mock-service.c.bak
cat > libsecret/mock-service.c << EOF
#include <fcntl.h>
#define pipe(fds) _pipe(fds, 4096, _O_BINARY)
#include <windows.h>
static int kill (DWORD pid, int sig)
{
 BOOL status;
 HANDLE hProcess;
 if ((hProcess = OpenProcess(PROCESS_TERMINATE, FALSE, pid)) == NULL || hProcess == INVALID_HANDLE_VALUE)
  return -1;
 status = TerminateProcess(hProcess, ~0);
 CloseHandle(hProcess);
 return (status ? 0 : -1);
}
EOF
cat libsecret/mock-service.c.bak >> libsecret/mock-service.c
# fix missing getpass in tool/secret-tool.c
mv tool/secret-tool.c tool/secret-tool.c.bak
cat > tool/secret-tool.c << EOF
#include <io.h>
#include <stdio.h>
#include <conio.h>
static char *getpass (const char *prompt)
{
  static char buf[128];
  size_t i;
  fputs(prompt, stderr);
  fflush(stderr);
  for (i = 0; i < sizeof(buf) - 1; i++) {
    buf[i] = _getch();
    if (buf[i] == '\r' || buf[i] == '\r')
      break;
  }
  buf[i] = 0;
  fputs("\n", stderr);
  return buf;
}
EOF
cat tool/secret-tool.c.bak >> tool/secret-tool.c
# fix libsecret/secret-file-backend.c (version >= 0.20.5)
patch -ulbf libsecret/secret-file-backend.c << EOF
@@ -28,2 +28,4 @@

+#ifdef _WIN32
+#else
 #include <gio/gunixfdlist.h>
@@ -31,2 +33,3 @@
 #include <glib-unix.h>
+#endif

@@ -364,2 +367,5 @@
 {
+#ifdef _WIN32
+        return;
+#else
        GDBusConnection *connection;
@@ -419,2 +425,3 @@
        g_object_unref (fd_list);
+#endif
 }
EOF
# fix missing gio-unix
sed -i.bak -e "s/gio-unix-/gio-windows-/" meson.build
mkdir -p build_both &&
 wl-showstatus configure &&
 PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Dtpm2=true -Dvapi=true -Dintrospection=true -Dbash_completion=disabled -Dmanpage=false -Dgtk_doc=false -Dc_args="-I$MINGWPREFIX/include/mman-win32" -Dc_link_args="-Wl,--as-needed -lmman" . build_both &&
 wl-showstatus build-install &&
 PKG_CONFIG= PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib ninja -Cbuild_both install &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




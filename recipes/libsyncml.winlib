export NAME="Libsyncml"
export STATUS=
export URL=http://libsyncml.opensync.org
export BASENAME=libsyncml
export DESCRIPTION="Libsyncml is an implementation of the SyncML protocol."
export CATEGORY=communication
export TYPE=library
export VERSION=0.5.4
export VERSIONDATE=20110719
wl-showstatus --package-version
export DEPENDENCIES=glib2,libsoup-2.4,libwbxml,libxml2,openobex
export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=cmake
#export OPTIONALBUILDDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=COPYING
export LICENSETYPE=LGPL
export DOWNLOADURL="http://sourceforge.net/projects/libsyncml/files/libsyncml/"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=http://downloads.sourceforge.net/project/libsyncml/libsyncml/$VERSION/$BASENAME-$VERSION.tar.bz2
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
tar xj --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.bz2
cd $BASENAME-$VERSION
# fix missing index function in libsyncml/data_sync_api/data_sync.c
mv libsyncml/data_sync_api/data_sync.c libsyncml/data_sync_api/data_sync.c.bak
echo "#define index(haystack,needle) strstr(haystack,(char[2]){needle,0})" > libsyncml/data_sync_api/data_sync.c
cat libsyncml/data_sync_api/data_sync.c.bak >> libsyncml/data_sync_api/data_sync.c
# fix missing index function in libsyncml/data_sync_api/data_sync_callbacks.c
mv libsyncml/data_sync_api/data_sync_callbacks.c libsyncml/data_sync_api/data_sync_callbacks.c.bak
echo "#define index(haystack,needle) strstr(haystack,(char[2]){needle,0})" > libsyncml/data_sync_api/data_sync_callbacks.c
cat libsyncml/data_sync_api/data_sync_callbacks.c.bak >> libsyncml/data_sync_api/data_sync_callbacks.c
# fix missing GetVersion in libsyncml/objects/sml_devinf_obj.c
mv libsyncml/objects/sml_devinf_obj.c libsyncml/objects/sml_devinf_obj.c.bak
echo "#include <windows.h>" > libsyncml/objects/sml_devinf_obj.c
cat libsyncml/objects/sml_devinf_obj.c.bak >> libsyncml/objects/sml_devinf_obj.c
## fix tests/support.c
#mv tests/support.c tests/support.c.bak
#cat > tests/support.c << EOF
##define setuid(uid) 0
##define nanosleep(ts,p) (Sleep((ts)->tv_sec * 1000 + (ts)->tv_nsec / 1000000000), 0)
##define mkdtemp(template) NULL
#EOF
#cat tests/support.c.bak >> tests/support.c
patch -ulbf tests/support.c << EOF
--- tests/support.c  2009-06-04 11:16:56 +0200
+++ tests/support.c  2012-03-06 14:16:40 +0100
@@ -23,2 +23,5 @@
 #include <libxml/parser.h>
+#ifdef __MINGW32__
+#include <windows.h>
+#endif

@@ -76,3 +79,5 @@
        char *testbed = NULL;
+#ifndef __MINGW32__
        setuid(65534);
+#endif

@@ -87,2 +92,3 @@
        if (fkt_name) {
+#ifndef __MINGW32__
                testbed = g_strdup_printf("%s/testbed.XXXXXX", g_get_tmp_dir());
@@ -91,2 +97,5 @@
                }
+#else
+               sml_fail_unless(FALSE, "mkdtemp() is not implemented on Windows.");
+#endif

@@ -155,2 +164,5 @@
 {
+#ifdef __MINGW32__
+       Sleep(nanoseconds / 1000);
+#else
        long seconds = nanoseconds / 1000000000;
@@ -161,2 +173,3 @@
        return nanosleep(&timestr, NULL);
+#endif
 }
EOF
# fix missing sleep in tests/check_data_sync_api.c
mv tests/check_data_sync_api.c tests/check_data_sync_api.c.bak
echo "#define sleep(t) _sleep((t) * 1000)" > tests/check_data_sync_api.c
cat tests/check_data_sync_api.c.bak >> tests/check_data_sync_api.c
## fix errno in libsyncml/syncml_internals.h
#patch libsyncml/syncml_internals.h << EOF
#@@ -56,3 +56,5 @@
# #include <errno.h>
#+#ifdef __MINGW32__
# extern int errno;
#+#endif
#
#EOF
# fix libsyncml/transports/obex_client.c (version >= 0.5.4)
patch -ulbf libsyncml/transports/obex_client.c << EOF
@@ -718,3 +718,3 @@
                case SML_TRANSPORT_CONNECTION_TYPE_SERIAL:
-                       env->obexhandle = OBEX_Init(OBEX_TRANS_CUST, smlTransportObexClientEvent, 0);
+                       env->obexhandle = OBEX_Init(OBEX_TRANS_CUSTOM, smlTransportObexClientEvent, 0);
                        break;
@@ -884,3 +884,3 @@

-               obex_intf_cnt = OBEX_FindInterfaces(env->obexhandle, &obex_intf);
+               obex_intf_cnt = OBEX_EnumerateInterfaces(env->obexhandle);
                smlTrace(TRACE_INTERNAL, "%s: found %i interfaces", __func__, obex_intf_cnt);
EOF
# fix tools/syncml-obex-client.c (version >= 0.5.4)
patch -ulbf tools/syncml-obex-client.c << EOF
@@ -417,6 +417,8 @@

+#ifndef _WIN32
        if (geteuid() != 0)
                fprintf(stderr, "Superuser privileges are required to access complete USB information.\\n");
+#endif

-       interfaces_number = OBEX_FindInterfaces(handle, &obex_intf);
+       interfaces_number = OBEX_EnumerateInterfaces(handle);
        printf("Found %d USB OBEX interfaces\\n", interfaces_number);
EOF
# fix tools/syncml-ds-tool.c (version >= 0.5.4)
patch -ulbf tools/syncml-ds-tool.c << EOF
@@ -759,6 +759,8 @@

+#ifndef _WIN32
        if (geteuid() != 0)
                fprintf(stderr, "Superuser privileges are required to access complete USB information.\\n");
+#endif

-       interfaces_number = OBEX_FindInterfaces(handle, &obex_intf);
+       interfaces_number = OBEX_EnumerateInterfaces(handle);
        printf("Found %d USB OBEX interfaces\\n", interfaces_number);
EOF
# fix libsyncml/parser/sml_wbxml_internals.h (version >= 0.5.4)
patch -ulbf libsyncml/parser/sml_wbxml_internals.h << EOF
@@ -31,3 +31,3 @@

-#include <wbxml.h>
+#include <wbxml/wbxml.h>

EOF
# fix missing fnmatch.h
touch fnmatch.h
# disable tests
sed -i.bak -e "s?^ADD_SUBDIRECTORY( tests )?#&?" CMakeLists.txt
# also allow building static library
sed -i.bak -e "s/\(ADD_LIBRARY(.*\) SHARED/\1/" libsyncml/CMakeLists.txt
#mkdir -p build
# wl-showstatus configure &&
# cmake.exe -Wno-dev -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DENABLE_TRACE:BOOL=OFF -DENABLE_UNIT_TEST:BOOL=OFF -DBUILD_TESTING:BOOL=OFF -S. -Bbuild &&
# # fix linkage with libpthread
# sed -i.bak -e "s/\(-ladvapi32\)/\1 -lpthread/" build/libsyncml/CMakeFiles/syncml.dir/build.make &&
# ## fix missing pthread_self
# #sed -i.bak -e "s/\(-ladvapi32\)/\1 -lpthread/" build/libsyncml/CMakeFiles/syncml.dir/linklibs.rsp &&
# # fix missing linker flags
# sed -i.bak -e "s/\(-ladvapi32\)/\1 -Wl,--as-needed -lws2_32/" build/libsyncml/CMakeFiles/syncml.dir/linklibs.rsp &&
# wl-showstatus build-install &&
# ( make -Cbuild install/strip || C_INCLUDE_PATH=$MINGWPREFIX/include/libwbxml-1.0/wbxml${C_INCLUDE_PATH:+:$C_INCLUDE_PATH} make -Cbuild install/strip ) &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
#####To do: build static archive
mkdir -p build_static build_shared &&
 wl-showstatus configure &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DENABLE_TRACE:BOOL=OFF -DENABLE_UNIT_TEST:BOOL=OFF -DBUILD_TESTING:BOOL=OFF -DCMAKE_C_FLAGS:STRING="-I$MINGWPREFIX/include/libwbxml-1.0/wbxml" -S. -Bbuild_static &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DENABLE_TRACE:BOOL=OFF -DENABLE_UNIT_TEST:BOOL=OFF -DBUILD_TESTING:BOOL=OFF -DCMAKE_C_FLAGS:STRING="-I$MINGWPREFIX/include/libwbxml-1.0/wbxml $(if ${CC:-gcc} --help -v 2>/dev/null|grep -q "\-Wincompatible-pointer-types" || ${CC:-gcc} --version|grep -q "^clang"; then echo "-Wno-incompatible-pointer-types"; fi)" -S. -Bbuild_static &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DENABLE_TRACE:BOOL=OFF -DENABLE_UNIT_TEST:BOOL=OFF -DBUILD_TESTING:BOOL=OFF -DCMAKE_C_FLAGS:STRING="-I$MINGWPREFIX/include/libwbxml-1.0/wbxml $(if ${CC:-gcc} --help -v 2>/dev/null|grep -q "\-Wincompatible-pointer-types" || ${CC:-gcc} --version|grep -q "^clang"; then echo "-Wno-incompatible-pointer-types"; fi)" -DCMAKE_POLICY_VERSION_MINIMUM:STRING=3.5 -S. -Bbuild_static &&
 # fix missing link libraries
 sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lws2_32/" build_static/build.ninja &&
 wl-showstatus configure &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DENABLE_TRACE:BOOL=OFF -DENABLE_UNIT_TEST:BOOL=OFF -DBUILD_TESTING:BOOL=OFF -DCMAKE_C_FLAGS:STRING="-I$MINGWPREFIX/include/libwbxml-1.0/wbxml" -S. -Bbuild_shared &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DENABLE_TRACE:BOOL=OFF -DENABLE_UNIT_TEST:BOOL=OFF -DBUILD_TESTING:BOOL=OFF -DCMAKE_C_FLAGS:STRING="-I$MINGWPREFIX/include/libwbxml-1.0/wbxml $(if ${CC:-gcc} --help -v 2>/dev/null|grep -q "\-Wincompatible-pointer-types" || ${CC:-gcc} --version|grep -q "^clang"; then echo "-Wno-incompatible-pointer-types"; fi)" -S. -Bbuild_shared &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DENABLE_TRACE:BOOL=OFF -DENABLE_UNIT_TEST:BOOL=OFF -DBUILD_TESTING:BOOL=OFF -DCMAKE_C_FLAGS:STRING="-I$MINGWPREFIX/include/libwbxml-1.0/wbxml $(if ${CC:-gcc} --help -v 2>/dev/null|grep -q "\-Wincompatible-pointer-types" || ${CC:-gcc} --version|grep -q "^clang"; then echo "-Wno-incompatible-pointer-types"; fi)" -DCMAKE_POLICY_VERSION_MINIMUM:STRING=3.5 -S. -Bbuild_shared &&
 # fix missing link libraries
 sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lws2_32/" build_shared/build.ninja &&
 #wl-showstatus build &&
 #ninja -Cbuild_static &&
 #wl-showstatus build &&
 #ninja -Cbuild_shared &&
 wl-showstatus build-install &&
 ninja -Cbuild_static install/strip &&
 wl-showstatus build-install &&
 ninja -Cbuild_shared install/strip &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




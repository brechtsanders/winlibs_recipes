#export NAME="rpmalloc"
#export STATUS=
#export URL=https://github.com/rampantpixels/rpmalloc
#export BASENAME=rpmalloc
#export DESCRIPTION="Public domain cross platform lock free thread caching 32-byte aligned memory allocator implemented in C"
#export CATEGORY=
#export TYPE=library
##export VERSION=1.3.1
##export VERSIONDATE=20180519
##export VERSION=1.3.2
##export VERSIONDATE=20180530
##export VERSION=1.4.0
##export VERSIONDATE=20190809
##export VERSION=1.4.1
##export VERSIONDATE=20200827
#export VERSION=1.4.2
#export VERSIONDATE=20210426
#wl-showstatus --package-version
#export DEPENDANCIES=
#export OPTIONALDEPENDANCIES=
#export BUILDDEPENDANCIES=ninja
#export LICENSEFILE=LICENSE
#export LICENSETYPE="Public Domain"
#export DOWNLOADURL="https://github.com/rampantpixels/rpmalloc/releases"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://github.com/rampantpixels/rpmalloc/archive/$VERSION.tar.gz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#wl-showstatus extract
#tar xfz $TARBALLDIR/$BASENAME/$VERSION.tar.gz
#cd $BASENAME-$VERSION
## fix invalid flags
#sed -i.bak -e "s?/DLL?-shared?; s?/SUBSYSTEM:CONSOLE?-mconsole?" build/ninja/gcc.py
#wl-showstatus configure &&
# $PYDIR/python.exe configure.py --toolchain gcc -t windows --host windows -c release -a $(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo x86-64; else echo x86; fi) &&
# wl-showstatus build &&
# #ninja &&
# (
#  echo "#!/bin/sh" > build_commands &&
#  echo "set -e" >> build_commands &&
#  #-Xlinker
#  #ninja -t commands | sed -e "s?\\\\?/?g" | sed -e "s/\(-Wall\|-Werror\)//g" | sed -e "s?^gcc .*-MT \([^ ]*\).*?mkdir -p \$(dirname \1)\n&?" | sed -e "s?^cmd /C (IF exist [^ ]* (del /F /Q [^ ]*)) \& copy /Y \([^ ]*\) \([^ ]*\)?cp -f \1 \2?; s?^cmd /C (IF exist [^ ]* (del /F /Q \([^ ]*\)))?rm -f \1?; s?^cmd /C (IF NOT exist [^ ]* (mkdir \([^ ]*\)))?mkdir -p \1?" >> build_commands &&
#  #ninja -t commands | sed -e "s?\\\\?/?g" | sed -e "s/^gcc /&-DBUILD_DYNAMIC_LINK -mconsole /; s/\(-Wall\|-Werror\)//g" | sed -e "s?^gcc .*-MT \([^ ]*\).*?mkdir -p \$(dirname \1)\n&?" | sed -e "s?^cmd /C (IF exist [^ ]* (del /F /Q [^ ]*)) \& copy /Y \([^ ]*\) \([^ ]*\)?cp -f \1 \2?; s?^cmd /C (IF exist [^ ]* (del /F /Q \([^ ]*\)))?rm -f \1?; s?^cmd /C (IF NOT exist [^ ]* (mkdir \([^ ]*\)))?mkdir -p \1?" >> build_commands &&
#  #ninja -t commands | sed -e "s?\\\\?/?g" | sed -e "s/\(-Wall\|-Werror\)//g" | sed -e "s?-Xlinker /DLL -o \([^ ]*\.dll\)\b?-shared -s -mwindows -Wl,--out-implib,\1.a -o \1?; s?-Xlinker??; s?/SUBSYSTEM:CONSOLE?-mconsole?" | sed -e "s?^gcc .*-o \([^ ]*\).*?mkdir -p \$(dirname \1)\n&?" | sed -e "s?^cmd /C (IF exist [^ ]* (del /F /Q [^ ]*)) \& copy /Y \([^ ]*\) \([^ ]*\)?cp -f \1 \2?; s?^cmd /C (IF exist [^ ]* (del /F /Q \([^ ]*\)))?rm -f \1?; s?^cmd /C (IF NOT exist [^ ]* (mkdir \([^ ]*\)))?mkdir -p \1?"  >> build_commands &&
#  ninja -t commands | sed -e "s?\\\\?/?g" | sed -e "s/\(-Wall\|-Werror\)//g" | sed -e "s?-Xlinker /DLL \(.*-o \)\([^ ]*\.dll\)\b?-shared -s -mwindows -Wl,--out-implib,\2.a \1\2?; s?-Xlinker??; s?/SUBSYSTEM:CONSOLE?-mconsole?" | sed -e "s?^gcc .*-o \([^ ]*\).*?mkdir -p \$(dirname \1)\n&?" | sed -e "s?^cmd /C (IF exist [^ ]* (del /F /Q [^ ]*)) \& copy /Y \([^ ]*\) \([^ ]*\)?cp -f \1 \2?; s?^cmd /C (IF exist [^ ]* (del /F /Q \([^ ]*\)))?rm -f \1?; s?^cmd /C (IF NOT exist [^ ]* (mkdir \([^ ]*\)))?mkdir -p \1?"  >> build_commands &&
#  (  || sh -v build_commands )
# ) &&
# wl-showstatus install &&
# mkdir -p $INSTALLPREFIX/include $INSTALLPREFIX/lib $INSTALLPREFIX/bin &&
# cp -f rpmalloc/*.h $INSTALLPREFIX/include/ &&
# cp -f $(sed -n -e "s?.*,\([^ ]*\.dll\.a\).*?\1?p" build_commands) $INSTALLPREFIX/lib/ &&
# for F in lib/windows/release/*/*.lib; do
#  cp -f $F $INSTALLPREFIX/lib/$(basename $F|sed -e "s/^\(.*\)\.lib$/lib\1.a/")
# done &&
# cp -f bin/windows/release/*/*.dll $INSTALLPREFIX/bin/ &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION



export NAME="rpmalloc"
export STATUS=
export URL=https://github.com/rampantpixels/rpmalloc
export BASENAME=rpmalloc
export DESCRIPTION="Public domain cross platform lock free thread caching 32-byte aligned memory allocator implemented in C"
export CATEGORY=
export TYPE=library
#export VERSION=1.4.3
#export VERSIONDATE=20210807
export VERSION=1.4.4
export VERSIONDATE=20220531
wl-showstatus --package-version
export DEPENDANCIES=
export OPTIONALDEPENDANCIES=
export BUILDDEPENDANCIES=ninja
export LICENSEFILE=LICENSE
export LICENSETYPE="Public Domain"
export DOWNLOADURL="https://github.com/rampantpixels/rpmalloc/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/rampantpixels/rpmalloc/archive/$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xfz $TARBALLDIR/$BASENAME/$VERSION.tar.gz
cd $BASENAME-$VERSION
# fix missing FlsAlloc/FlsFree/FlsSetValue in rpmalloc/rpmalloc.c (version >= 1.4.3)
mv rpmalloc/rpmalloc.c rpmalloc/rpmalloc.c.bak
cat > rpmalloc/rpmalloc.c << EOF
#if !defined(_WIN32_WINNT) || _WIN32_WINNT < 0x0600
#undef _WIN32_WINNT
#define _WIN32_WINNT 0x0600
#endif
EOF
cat rpmalloc/rpmalloc.c.bak >> rpmalloc/rpmalloc.c
# fix invalid linker flags
sed -i.bak -e "s/'-Xlinker',//; s/\/SUBSYSTEM:CONSOLE/-mconsole/" build/ninja/gcc.py
wl-showstatus configure &&
 $PYDIR/python.exe configure.py --toolchain gcc -t windows --host windows --toolchain gcc -c release -a $(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo x86-64; else echo x86; fi) &&
 # fix invalid linker flags
 sed -i.bak -e "0,/\/DLL/s//-shared -mwindows -s -Wl,--out-implib,librpmalloc.dll.a/; 0,/\/DLL/s//-shared -mwindows -s -Wl,--out-implib,librpmallocwrap.dll.a/" build.ninja &&
 # fix error: array subscript 0 is outside array bounds of 'long long unsigned int[0]'
 sed -i.bak2 -e "s/^cx*flags *= */&-Wno-error=array-bounds /" build.ninja &&
 wl-showstatus build &&
 ninja &&
 wl-showstatus install &&
 mkdir -p $INSTALLPREFIX/include $INSTALLPREFIX/lib $INSTALLPREFIX/bin &&
 cp -f rpmalloc/*.h $INSTALLPREFIX/include/ &&
 cp -f *.dll.a $INSTALLPREFIX/lib/ &&
 for F in lib/windows/release/*/*.lib; do
  cp -f $F $INSTALLPREFIX/lib/$(basename $F|sed -e "s/^\(.*\)\.lib$/lib\1.a/")
 done &&
 cp -f bin/windows/release/*/*.dll $INSTALLPREFIX/bin/ &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




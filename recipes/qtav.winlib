export NAME="QtAV"
export STATUS=
export URL=https://www.qtav.org/
export BASENAME=qtav
export DESCRIPTION="A multimedia playback framework based on Qt + FFmpeg. Cross platform. High performace. Easy to use and develop"
export CATEGORY=multimedia
export TYPE=library
#export VERSION=1.12.0
#export VERSIONDATE=20180925
export VERSION=1.13.0
export VERSIONDATE=20190711
wl-showstatus --package-version
#export DEPENDANCIES=qt,ffmpeg2,openal
export DEPENDANCIES=qt,libav,openal
export OPTIONALDEPENDANCIES=
#export BUILDDEPENDANCIES=cmake
export BUILDDEPENDANCIES=cmake,ninja
export LICENSEFILE=lgpl-2.1.txt
export LICENSETYPE=LGPL
export DOWNLOADURL="https://github.com/wang-bin/QtAV/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/wang-bin/QtAV/archive/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xfz $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd QtAV-$VERSION
# fix missing QPainterPath in src/QtAV/FilterContext.h (version >= 1.13.0)
mv src/QtAV/FilterContext.h src/QtAV/FilterContext.h.bak &&
echo "#include <QtGui/qpainterpath.h>" > src/QtAV/FilterContext.h &&
cat src/QtAV/FilterContext.h.bak >> src/QtAV/FilterContext.h
# fix missing QSGMaterial in qml/SGVideoNode.cpp (version >= 1.13.0)
mv qml/SGVideoNode.cpp qml/SGVideoNode.cpp.bak &&
echo "#include <QSGMaterial>" > qml/SGVideoNode.cpp &&
cat qml/SGVideoNode.cpp.bak >> qml/SGVideoNode.cpp
# fix src/output/audio/xaudio2_compat.h (version >= 1.13.0)
patch -ulbf src/output/audio/xaudio2_compat.h << EOF
@@ -55,2 +55,5 @@
 #include <XAudio2.h>
+#ifndef X2DEFAULT
+#define X2DEFAULT(x)
+#endif

EOF
# disable EGL in src/CMakeLists.txt (version >= 1.13.0)
patch -ulbf src/CMakeLists.txt << EOF
@@ -203,3 +203,3 @@
   endif()
-  if(DEFINED Qt5Gui_EGL_LIBRARIES) # x11?
+  if(NOT MINGW AND DEFINED Qt5Gui_EGL_LIBRARIES) # x11?
     set(HAVE_EGL 1)
EOF
#mkdir -p build_win &&
# wl-showstatus configure &&
# #PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -S. -Bbuild_win &&
# PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_PLAYERS:BOOL=ON -DHAVE_AVFORMAT:FILEPATH=$MINGWPREFIX/libav -DHAVE_AVCODEC:FILEPATH=$MINGWPREFIX/libav -DHAVE_SWSCALE:FILEPATH=$MINGWPREFIX/libav -DHAVE_AVUTIL:FILEPATH=$MINGWPREFIX/libav -DHAVE_AVFILTER:FILEPATH=$MINGWPREFIX/libav -DHAVE_AVDEVICE:FILEPATH=$MINGWPREFIX/libav -DHAVE_AVRESAMPLE:FILEPATH=$MINGWPREFIX/libav -DCMAKE_CXX_FLAGS:STRING="-I$MINGWPREFIX/libav/include" -DHAVE_ASS:BOOL=OFF -DBUILD_EXAMPLES:BOOL=OFF -DBUILD_TESTS:BOOL=OFF -S. -Bbuild_win &&
# # -DHAVE_SWRESAMPLE:FILEPATH=$MINGWPREFIX/libav 
# echo "-Wl,--as-needed -lopenal" >> build_win/src/CMakeFiles/QtAV.dir/linklibs.rsp &&
# wl-showstatus build-install &&
# #make -Cbuild_win install/strip &&
# LIBRARY_PATH=$MINGWPREFIX/libav/lib:$LIBRARY_PATH make -Cbuild_win install/strip &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf QtAV-$VERSION
mkdir -p build_win &&
 wl-showstatus configure &&
 #PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_PLAYERS:BOOL=ON -DHAVE_AVFORMAT:FILEPATH=$MINGWPREFIX/libav -DHAVE_AVCODEC:FILEPATH=$MINGWPREFIX/libav -DHAVE_SWSCALE:FILEPATH=$MINGWPREFIX/libav -DHAVE_AVUTIL:FILEPATH=$MINGWPREFIX/libav -DHAVE_AVFILTER:FILEPATH=$MINGWPREFIX/libav -DHAVE_AVDEVICE:FILEPATH=$MINGWPREFIX/libav -DHAVE_AVRESAMPLE:FILEPATH=$MINGWPREFIX/libav -DCMAKE_CXX_FLAGS:STRING="-I$MINGWPREFIX/libav/include" -DHAVE_ASS:BOOL=OFF -DBUILD_EXAMPLES:BOOL=OFF -DBUILD_TESTS:BOOL=OFF -S. -Bbuild_win &&
 PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_PLAYERS:BOOL=ON -DHAVE_AVFORMAT:FILEPATH=$MINGWPREFIX/libav -DHAVE_AVCODEC:FILEPATH=$MINGWPREFIX/libav -DHAVE_SWSCALE:FILEPATH=$MINGWPREFIX/libav -DHAVE_AVUTIL:FILEPATH=$MINGWPREFIX/libav -DHAVE_AVFILTER:FILEPATH=$MINGWPREFIX/libav -DHAVE_AVDEVICE:FILEPATH=$MINGWPREFIX/libav -DHAVE_AVRESAMPLE:FILEPATH=$MINGWPREFIX/libav -DCMAKE_CXX_FLAGS:STRING="-I$MINGWPREFIX/libav/include" -DBUILD_QT5OPENGL:BOOL=ON -DBUILD_PLAYERS:BOOL=ON -DBUILD_EXAMPLES:BOOL=OFF -DBUILD_TESTS:BOOL=OFF -S. -Bbuild_win &&
 # -DHAVE_SWRESAMPLE:FILEPATH=$MINGWPREFIX/libav 
 # fix missing link libraries
 sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lopenal/" build_win/build.ninja &&
 wl-showstatus build-install &&
 #ninja -Cbuild_win install/strip &&
 LIBRARY_PATH=$MINGWPREFIX/libav/lib:$LIBRARY_PATH ninja -Cbuild_win install/strip &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf QtAV-$VERSION
####PATH=$MINGWPREFIX/libav/bin:$MINGWPREFIX/qt/bin:$PATH QT_PLUGIN_PATH=$MINGWPREFIX/qt/plugins QMLPlayer.exe



#echo "CONFIG += no_config_tests" > .qmake.conf
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cd build_static &&
# PKG_CONFIG_PATH=$MINGWPREFIX/libav/lib/pkgconfig:$PKG_CONFIG_PATH C_INCLUDE_PATH=$MINGWPREFIX/libav/include:$C_INCLUDE_PATH CPLUS_INCLUDE_PATH=$MINGWPREFIX/libav/include:$CPLUS_INCLUDE_PATH LIBRARY_PATH=$MINGWPREFIX/libav/lib:$LIBRARY_PATH PATH=$MINGWPREFIX/libav/bin:$PATH $MINGWPREFIX/qt/bin/qmake -makefile ../QtAV.pro -spec $MINGWPREFIX/qt/mkspecs/win32-g++ CONFIG+=no_config_tests CONFIG+=staticlib &&
# cd .. &&
# wl-showstatus configure &&
# cd build_shared &&
# $MINGWPREFIX/qt/bin/qmake -makefile ../QtAV.pro -spec $MINGWPREFIX/qt/mkspecs/win32-g++ CONFIG+=no_config_tests &&
# cd .. &&
# wl-showstatus build &&
# mingw32-make -Cbuild_static &&
# wl-showstatus build &&
# mingw32-make -Cbuild_shared &&
#    echo OK

export NAME="Radare2"
export STATUS=
#export URL=https://rada.re/
export URL=https://www.radare.org/
export BASENAME=radare2
export DESCRIPTION="UNIX-like reverse engineering framework and command-line toolset"
export CATEGORY=development
export TYPE=application
#export VERSION=5.6.6
#export VERSIONDATE=20220411
#export VERSION=5.6.8
#export VERSIONDATE=20220419
#export VERSION=5.7.0
#export VERSIONDATE=20220531
#export VERSION=5.7.2
#export VERSIONDATE=20220622
#export VERSION=5.7.4
#export VERSIONDATE=20220707
#export VERSION=5.7.6
#export VERSIONDATE=20220802
#export VERSION=5.7.8
#export VERSIONDATE=20220914
#export VERSION=5.8.0
#export VERSIONDATE=20221223
#export VERSION=5.8.2
#export VERSIONDATE=20230123
#export VERSION=5.8.4
#export VERSIONDATE=20230315
#export VERSION=5.8.6
#export VERSIONDATE=20230506
#export VERSION=5.8.8
#export VERSIONDATE=20230609
#export DEPENDENCIES=zlib,libzip,liblz4,xxhash,file,openssl,capstone,libuv
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=meson,ninja
#export OPTIONALBUILDDEPENDENCIES=
#export VERSION=5.9.0
#export VERSIONDATE=20240401
#export VERSION=5.9.2
#export VERSIONDATE=20240521
#export VERSION=5.9.4
#export VERSIONDATE=20240809
#export VERSION=5.9.6
#export VERSIONDATE=20241013
#export VERSION=5.9.8
#export VERSIONDATE=20241119
#export VERSION=6.0.0
#export VERSIONDATE=20250730
export VERSION=6.0.2
export VERSIONDATE=20250813
wl-showstatus --package-version
export DEPENDENCIES=zlib,libzip,liblz4,xxhash,file,capstone,libuv
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=meson,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=COPYING
export LICENSETYPE=LGPL
export DOWNLOADURL="https://github.com/radareorg/radare2/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/radareorg/radare2/archive/refs/tags/$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/$VERSION.tar.gz
cd $BASENAME-$VERSION
## fix libr/include/r_util/r_w32.h (version >= 5.7.2 <= 5.8.8)
#patch -ulbf libr/include/r_util/r_w32.h << EOF
#@@ -13,3 +13,5 @@
# #ifndef NTSTATUS
#+#ifndef __MINGW32__
# #define NTSTATUS DWORD
#+#endif
# #undef TEXT
#@@ -31,3 +33,3 @@
# R_API NTSTATUS r_w32_NtDuplicateObject(HANDLE, HANDLE, HANDLE, PHANDLE, ACCESS_MASK, ULONG, ULONG);
#-R_API NTSTATUS r_w32_NtQueryObject(HANDLE, ULONG, PVOID, ULONG, PULONG);
#+R_API DWORD r_w32_NtQueryObject(HANDLE, ULONG, PVOID, ULONG, PULONG);
# R_API ut64 r_w32_GetEnabledXStateFeatures(void);
#EOF
# avoid redefinitions in libr/include/r_util/r_w32.h (version >= 5.9.0)
patch -ulbf libr/include/r_util/r_w32.h << EOF
@@ -12,2 +12,3 @@

+#ifndef __MINGW32__
 #ifndef NTSTATUS
@@ -48,2 +49,3 @@
 #endif
+#endif

EOF
# fix inclusion of windows.h before winsock2.h in libr/core/rtr.c (version >= 5.9.0)
mv libr/core/rtr.c libr/core/rtr.c.bak &&
echo "#include <winsock2.h>" > libr/core/rtr.c &&
cat libr/core/rtr.c.bak >> libr/core/rtr.c
# fix undefined gettimeofday() in libr/util/prof.c (version >= 5.9.6)
mv libr/util/prof.c libr/util/prof.c.bak &&
echo "#include <sys/time.h>" > libr/util/prof.c &&
cat libr/util/prof.c.bak >> libr/util/prof.c
# fix undefined ftruncate() in libr/util/sandbox.c (version >= 5.9.6)
mv libr/util/sandbox.c libr/util/sandbox.c.bak &&
echo "#include <unistd.h>" > libr/util/sandbox.c &&
cat libr/util/sandbox.c.bak >> libr/util/sandbox.c
# fix undefined HAVE_FORK (version >= 5.9.6)
sed -i.bak -e "s/^#if HAVE_FORK/#ifndef HAVE_FORK\n#defined HAVE_FORK 0\n#endif\n&/" $(grep -l "#if HAVE_FORK" $(find -name '*.h' -or -name '*.c'))
#sed -i.bak2 -e "1i #ifdef R2__WINDOWS__\n#undef\n#endif\n#define R2__WINDOWS__ 1\n#include \"../include/r_util/r_w32.h\"" $(grep -l "r_w32_" $(find -name '*.c'))
# fix missing core in libr/core/rtr.c (version >= 6.0.0)
patch -ulbf libr/core/rtr.c << EOF
@@ -1237,5 +1238,5 @@

-       r_cons_sleep_end (core->cons, context->bed);
+       r_cons_sleep_end (client_context->core->cons, context->bed);
        client_context->res = r_core_cmd_str (client_context->core, (const char *)client_context->buf);
-       context->bed = r_cons_sleep_begin (core->cons);
+       context->bed = r_cons_sleep_begin (client_context->core->cons);

EOF
# avoid bad definition of R2_BIRTH in libr/include/r_version.h.in (version >= 5.9.4)                            
patch -ulbf libr/include/r_version.h.in << EOF                                  
@@ -11,3 +11,3 @@                                                               
 #define R2_GITTIP "@R2_GITTIP@"                                                
-#define R2_BIRTH "@R2_BIRTH@"                                                  
+#define R2_BIRTH "unknown"                                                     
 #endif                                                                         
EOF
## fix libr/socket/meson.build (version >= 5.6.6 <= 5.8.8)
#patch -ulbf libr/socket/meson.build << EOF
#@@ -13,2 +13,3 @@
# r_util_deps = [utl, r_util_dep, platform_deps]
#+r_util_static_deps = []
# if get_option('blob')
#EOF
## fix undefined use_ssl_crypto in meson.build (version >= 5.8.2 <= 5.8.8)
#patch -ulbf meson.build << EOF
#@@ -290,2 +290,3 @@
#     use_sys_openssl = true
#+    use_ssl_crypto = false
#   else
#EOF
# fix libr/syscall/d/meson.build (version >= 5.6.6)
patch -ulbf libr/syscall/d/meson.build << EOF
@@ -1,21 +1,2 @@
 sdb_files = [
-  'darwin-arm-32',
-  'darwin-arm-64',
-  'darwin-x86-32',
-  'darwin-x86-64',
-  'dos-x86-16',
-  'freebsd-x86-32',
-  'ios-arm-32',
-  'ios-arm-64',
-  'ios-x86-32',
-  'linux-arm-32',
-  'linux-arm-64',
-  'linux-mips-32',
-  'linux-sparc-32',
-  'linux-x86-32',
-  'linux-x86-64',
-  'netbsd-x86-32',
-  'openbsd-x86-32',
-  'openbsd-x86-64',
-  's110-arm-16',
   'windows-x86-32',
EOF
# fix detection of Python
sed -i.bak -e "s?'python3'?'$(cygpath -w $PYDIR/python.exe|sed -e 's/\\/&&&&/g')'?" meson.build
## fix missing shlr/zip/meson.build in meson.build (version >= 5.8.8)
#sed -i.bak2 -e "s?^subdir('shlr/zip')?#&?" meson.build
# fix libr/syscall/meson.build (version >= 5.9.6)
sed -i.bak -e "s/^subdir('d')/#subdir('d')/" libr/syscall/meson.build
# fix missing powershell in meson.build (version >= 6.0.0)
patch -ulbf meson.build << EOF
@@ -519,3 +519,3 @@

-if host_machine.system() == 'windows'
+if host_machine.system() == 'MSVC_windows'
 copyinout = [
EOF
mkdir -p build_both &&
 wl-showstatus configure &&
 #PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Dcli=enabled -Dlocal=true -Dwant_capstone=true -Duse_sys_capstone=true -Duse_capstone_version=v4 -Duse_sys_magic=true -Duse_sys_zip=true -Duse_sys_zlib=true -Duse_sys_lz4=true -Duse_sys_xxhash=true -Duse_ssl=true -Duse_sys_openssl=true -Duse_libuv=true -Duse_fork=false -Ddebugger=false -Dwant_ptrace_wrap=false -Denable_r2r=false -Denable_tests=false . build_both &&
 #PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Dcli=enabled -Dlocal=true -Dwant_capstone=true -Duse_sys_capstone=true -Duse_capstone_version=v4 -Duse_sys_magic=true -Duse_sys_zip=true -Duse_sys_zlib=true -Duse_sys_lz4=true -Duse_sys_xxhash=true -Duse_ssl=true -Duse_sys_openssl=true -Duse_libuv=true -Duse_fork=false -Ddebugger=false -Dwant_ptrace_wrap=false -Denable_r2r=false -Denable_tests=false . build_both &&
 #PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Dcli=enabled -Dlocal=true -Dwant_capstone=true -Duse_sys_capstone=true -Duse_capstone_version=v4 -Duse_sys_magic=true -Duse_sys_zip=true -Duse_sys_zlib=true -Duse_sys_lz4=true -Duse_sys_xxhash=true -Duse_ssl=true -Duse_ssl_crypto=true -Duse_sys_openssl=false -Duse_libuv=true -Duse_fork=false -Ddebugger=false -Dwant_ptrace_wrap=false -Denable_r2r=false -Denable_tests=false . build_both &&
 PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Dcli=enabled -Dlocal=true -Dwant_capstone=true -Duse_sys_capstone=true -Duse_capstone_version=v4 -Duse_sys_magic=true -Duse_sys_zip=true -Duse_sys_zlib=true -Duse_sys_lz4=true -Duse_sys_xxhash=true -Duse_ssl=true -Duse_ssl_crypto=true -Duse_sys_openssl=false -Duse_libuv=true -Duse_fork=false -Ddebugger=false -Dwant_ptrace_wrap=false -Denable_r2r=false -Denable_tests=false -Dc_args="$(if ${CC:-gcc} --help -v 2>/dev/null|grep -q "\-Wint-conversion" || ${CC:-gcc} --version|grep -q "^clang"; then echo "-Wno-error=int-conversion"; fi) $(if ${CC:-gcc} --help -v 2>/dev/null|grep -q "\-Wincompatible-pointer-types" || ${CC:-gcc} --version|grep -q "^clang"; then echo "-Wno-incompatible-pointer-types -Wno-incompatible-function-pointer-types"; fi) $(if ${CC:-gcc} --help -v 2>/dev/null|grep -q "\-Wimplicit-function-declaration" || ${CC:-gcc} --version|grep -q "^clang"; then echo "-Wno-error=implicit-function-declaration"; fi)" . build_both &&
 wl-showstatus build-install &&
 #PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -Cbuild_both install &&
 ninja -Cbuild_both install &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION



#wl-showstatus configure &&
# ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-ostype=mingw32 --with-sysmagic --without-fork --with-syslz4 --with-syszip --with-sysxxhash --with-libuv &&
# wl-showstatus build &&
# make CC=${CC:-gcc} &&
# wl-showstatus build-install &&
# make install-strip &&
# #( make install-strip || ( make install && strip $INSTALLPREFIX/bin/*.{dll,exe} )) &&
#    echo OK




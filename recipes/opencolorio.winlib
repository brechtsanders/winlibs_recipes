export NAME="OpenColorIO"
export STATUS=
export URL=https://opencolorio.org/
export BASENAME=opencolorio
export DESCRIPTION="A color management framework for visual effects and animation."
export CATEGORY=graphics
export TYPE=library,application
#export VERSION=2.0.0
#export VERSIONDATE=20210505
#export VERSION=2.0.2
#export VERSIONDATE=20210904
#export VERSION=2.0.3
#export VERSIONDATE=20211217
#export VERSION=2.0.4
#export VERSIONDATE=20220602
#export VERSION=2.0.5
#export VERSIONDATE=20230106
#export DEPENDENCIES=expat,openimageio
#export OPTIONALDEPENDENCIES=openexr
#export BUILDDEPENDENCIES=cmake,ninja
#export OPTIONALBUILDDEPENDENCIES=
#export VERSION=2.1.0
#export VERSIONDATE=20210901
#export VERSION=2.1.1
#export VERSIONDATE=20211217
#export VERSION=2.1.2
#export VERSIONDATE=20220602
#export VERSION=2.1.3
#export VERSIONDATE=20230106
####src/libutils/oglapphelpers/glsl.cpp:450:10: error: 'GPU_LANGUAGE_MSL_2_0' was not declared in this scope
#export VERSION=2.2.0
#export VERSIONDATE=20221101
export VERSION=2.2.1
export VERSIONDATE=20230106
#export VERSION=2.3.0
#export VERSIONDATE=20230901
####CMake Error at share/cmake/modules/Findyaml-cpp.cmake:53 (get_target_property): get_target_property() called with non-existent target "yaml-cpp".
wl-showstatus --package-version
export DEPENDENCIES=expat,openimageio,imath,lcms2,yaml-cpp
export OPTIONALDEPENDENCIES=pystring
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=BSD
export DOWNLOADURL="https://github.com/AcademySoftwareFoundation/OpenColorIO/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/AcademySoftwareFoundation/OpenColorIO/archive/refs/tags/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd OpenColorIO-$VERSION
## fix src/utils/numberutils.h (version >= 2.1.1)
#patch -ulbf src/utils/numberutils.h << EOF
#@@ -100,3 +100,5 @@
#     float
#-#ifdef _WIN32
#+#if defined(__MINGW32__)
#+    tempval = strtof(first, &endptr);
#+#elif defined(_WIN32)
#     tempval = _strtof_l(first, &endptr, loc.local);
#EOF
## fix installation of .pc file and don't use shared library suffix in src/OpenColorIO/CMakeLists.txt (version = 2.0.0)
#patch -ulbf src/OpenColorIO/CMakeLists.txt << EOF
#@@ -180,3 +180,3 @@
#
#-if(NOT WIN32)
#+if(NOT MSVC)
#
#@@ -200,2 +200,3 @@
#        # Impose a versioned name on Windows to avoid binary name clashes.
#+  if(MSVC)
#     set(OCIO_LIBNAME_SUFFIX
#@@ -203,2 +204,3 @@
#     )
#+  endif()
#
#EOF
## fix src/libutils/oglapphelpers/glsl.cpp (version >= 2.2.0)
#patch -ulbf src/libutils/oglapphelpers/glsl.cpp << EOF
#@@ -449,3 +449,5 @@
#     case GPU_LANGUAGE_GLSL_1_2:
#+#ifdef GPU_LANGUAGE_MSL_2_0
#     case GPU_LANGUAGE_MSL_2_0:
#+#endif
#         // That's the minimal version supported.
#@@ -454,4 +456,6 @@
#         return "#version 130";
#+#ifdef GPU_LANGUAGE_GLSL_4_0
#     case GPU_LANGUAGE_GLSL_4_0:
#         return "#version 400 core";
#+#endif
#     case GPU_LANGUAGE_GLSL_ES_1_0:
#EOF
## detect minizip-ng as minizip2 since it uses the old version
#sed -i.bak -e "s/minizip-ng/minizip2/g" src/OpenColorIO/CMakeLists.txt
mkdir -p build_static build_shared &&
 wl-showstatus configure &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DOCIO_USE_SSE:BOOL=OFF -DOCIO_BUILD_APPS:BOOL=ON -DOCIO_BUILD_JAVA:BOOL=OFF -DOCIO_BUILD_DOCS:BOOL=OFF -DOCIO_BUILD_GPU_TESTS:BOOL=OFF -DOCIO_BUILD_TESTS:BOOL=OFF -DOCIO_BUILD_PYTHON:BOOL=OFF -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -S. -Bbuild_static &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DOCIO_USE_SSE:BOOL=OFF -DOCIO_BUILD_APPS:BOOL=ON -DOCIO_USE_IMATH_HALF:BOOL=ON -DOCIO_USE_OPENEXR_HALF:BOOL=OFF -DOCIO_BUILD_JAVA:BOOL=OFF -DOCIO_BUILD_DOCS:BOOL=OFF -DOCIO_BUILD_GPU_TESTS:BOOL=OFF -DOCIO_BUILD_TESTS:BOOL=OFF -DBUILD_TESTING:BOOL=OFF -DOCIO_BUILD_PYTHON:BOOL=OFF -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -S. -Bbuild_static &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DOCIO_USE_SSE:BOOL=OFF -DOCIO_BUILD_APPS:BOOL=ON -DOCIO_USE_IMATH_HALF:BOOL=ON -DOCIO_USE_OPENEXR_HALF:BOOL=OFF -DOCIO_BUILD_JAVA:BOOL=OFF -DOCIO_BUILD_DOCS:BOOL=OFF -DOCIO_BUILD_GPU_TESTS:BOOL=OFF -DOCIO_BUILD_TESTS:BOOL=OFF -DBUILD_TESTING:BOOL=OFF -DOCIO_BUILD_PYTHON:BOOL=OFF -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DCMAKE_CXX_FLAGS:STRING="-I$(cygpath -m $PWD)/src -I$(cygpath -m $PWD)/src/OpenColorIO" -S. -Bbuild_static &&
 #-Dpystring_INCLUDE_DIR:STRING=$MINGWPREFIX/include 
 #-DOCIO_USE_WINDOWS_UNICODE:BOOL=ON 
 #-DOCIO_USE_SSE:BOOL=ON 
 #-DOCIO_BUILD_APPS:BOOL=OFF 
 # don't force C++11
 sed -i.bak -e "s/-std=c++11/-std=c++14/" build_static/build.ninja &&
 ## fix missing link library
 #sed -i.bak2 -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lOpenImageIO_Util/" build_static/build.ninja &&
 # fix missing link library (version >= 2.2.0)
 sed -i.bak2 -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lOpenImageIO_Util -lminizip2/" build_static/build.ninja &&
 wl-showstatus configure &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DOCIO_USE_SSE:BOOL=OFF -DOCIO_BUILD_APPS:BOOL=ON -DOCIO_BUILD_JAVA:BOOL=OFF -DOCIO_BUILD_DOCS:BOOL=OFF -DOCIO_BUILD_GPU_TESTS:BOOL=OFF -DOCIO_BUILD_TESTS:BOOL=OFF -DOCIO_BUILD_PYTHON:BOOL=OFF -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -S. -Bbuild_shared &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DOCIO_USE_SSE:BOOL=OFF -DOCIO_BUILD_APPS:BOOL=ON -DOCIO_USE_IMATH_HALF:BOOL=ON -DOCIO_USE_OPENEXR_HALF:BOOL=OFF -DOCIO_BUILD_JAVA:BOOL=OFF -DOCIO_BUILD_DOCS:BOOL=OFF -DOCIO_BUILD_GPU_TESTS:BOOL=OFF -DOCIO_BUILD_TESTS:BOOL=OFF -DBUILD_TESTING:BOOL=OFF -DOCIO_BUILD_PYTHON:BOOL=OFF -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -S. -Bbuild_shared &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DOCIO_USE_SSE:BOOL=OFF -DOCIO_BUILD_APPS:BOOL=ON -DOCIO_USE_IMATH_HALF:BOOL=ON -DOCIO_USE_OPENEXR_HALF:BOOL=OFF -DOCIO_BUILD_JAVA:BOOL=OFF -DOCIO_BUILD_DOCS:BOOL=OFF -DOCIO_BUILD_GPU_TESTS:BOOL=OFF -DOCIO_BUILD_TESTS:BOOL=OFF -DBUILD_TESTING:BOOL=OFF -DOCIO_BUILD_PYTHON:BOOL=OFF -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DCMAKE_CXX_FLAGS:STRING="-I$(cygpath -m $PWD)/src -I$(cygpath -m $PWD)/src/OpenColorIO" -S. -Bbuild_shared &&
 # don't force C++11
 sed -i.bak -e "s/-std=c++11/-std=c++14/" build_shared/build.ninja &&
 ## fix missing link library
 #sed -i.bak2 -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lOpenImageIO_Util/" build_shared/build.ninja &&
 # fix missing link library (version >= 2.2.0)
 sed -i.bak2 -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lOpenImageIO_Util -lminizip2/" build_shared/build.ninja &&
 ## fix execution of Python scripts
 #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
 #wl-showstatus build &&
 #ninja -Cbuild_static &&
 #wl-showstatus build &&
 #ninja -Cbuild_shared &&
 wl-showstatus build-install &&
 ninja -Cbuild_static install/strip &&
 wl-showstatus build-install &&
 ninja -Cbuild_shared install/strip &&
 #cp -u $INSTALLPREFIX/lib/libOpenColorIO_*.dll.a $INSTALLPREFIX/lib/libOpenColorIO.dll.a &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf OpenColorIO-$VERSION
####TO DO: build with -DOCIO_USE_SSE:BOOL=ON




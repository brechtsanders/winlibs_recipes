#export NAME="Nano"
#export STATUS=
#export URL=http://www.nano-editor.org/
#export BASENAME=nano
#export DESCRIPTION="Text editor"
#export CATEGORY=office
#export TYPE=application
#export VERSION=2.2.6
#export VERSIONDATE=20110620
#wl-showstatus --package-version
#export DEPENDANCIES=pcre
#export OPTIONALDEPENDANCIES=
#export BUILDDEPENDANCIES=
#export LICENSEFILE=COPYING
#export LICENSETYPE=GPL
#export DOWNLOADURL="http://www.nano-editor.org/download.php"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://www.nano-editor.org/dist/v`echo $VERSION|sed -e "s/^\([0-9]*\.[0-9]*\).*/\1/"`/$BASENAME-$VERSION.tar.gz
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#tar xfz $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
#cd $BASENAME-$VERSION
## fix missing pwd.h
#cat > pwd.h << EOF
##define S_IRGRP 0
##define S_IWGRP 0
##define S_IROTH 0
##define S_IWOTH 0
##define S_IRWXG 0
##define S_IRWXO 0
##define getpwent() NULL
#struct passwd {
#  char *pw_dir;
#  char *pw_name;
#};
#/*
#//typedef int uid_t;
##define geteuid() 0
##define getpwuid(uid) 0
#*/
#EOF
#wl-showstatus configure &&
#./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --disable-utf8 --enable-tiny &&
# wl-showstatus build-install &&
# echo "#define sigjmp_buf jmp_buf" >> config.h &&
# make install-strip &&
#    echo OK
#####src/nano.c:39:21: error: termios.h: No such file or directory
#####src/nano.c:603: error: 'TCSANOW' undeclared (first use in this function)
#####src/nano.c:603: error: (Each undeclared identifier is reported only once
#####src/nano.c:603: error: for each function it appears in.)
## wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && rm -rf $BASENAME-$VERSION



export NAME="nano"
export STATUS=
export URL=http://www.nano-editor.org/
export BASENAME=nano
export DESCRIPTION="Text editor"
export CATEGORY=office
export TYPE=application
#export VERSION=2.2.6
#export VERSIONDATE=20100608
#export VERSION=2.3.1
#export VERSIONDATE=20100609
#export VERSION=2.3.2
#export VERSIONDATE=20130322
#export VERSION=2.3.3
#export VERSIONDATE=20140529
#export VERSION=2.3.4
#export VERSIONDATE=20140603
#export VERSION=2.3.5
#export VERSIONDATE=20140711
#export VERSION=2.3.6
#export VERSIONDATE=20140721
#export VERSION=2.4.0
#export VERSIONDATE=20150323
#export VERSION=2.4.1
#export VERSIONDATE=20150415
#export VERSION=2.4.2
#export VERSIONDATE=20150705
#export VERSION=2.4.3
#export VERSIONDATE=20151118
#export VERSION=2.6.0
#export VERSIONDATE=20160621
#export VERSION=2.6.1
#export VERSIONDATE=20160627
#export VERSION=2.6.2
#export VERSIONDATE=20160728
#export VERSION=2.6.3
#export VERSIONDATE=20160810
#export VERSION=2.7.0
#export VERSIONDATE=20160901
#export VERSION=2.7.1
#export VERSIONDATE=20161029
#export VERSION=2.7.2
#export VERSIONDATE=20161213
#export VERSION=2.7.3
#export VERSIONDATE=20161228
#export VERSION=2.7.4
#export VERSIONDATE=20170110
#export VERSION=2.7.5
#export VERSIONDATE=20170223
####src/nano.c:39:21: fatal error: termios.h: No such file or directory
#export VERSION=2.8.0
#export VERSIONDATE=20170331
#export VERSION=2.8.1
#export VERSIONDATE=20170412
#export VERSION=2.8.2
#export VERSIONDATE=20170504
####Error opening terminal: cygwin.
#export VERSION=3.2
#export VERSIONDATE=20190323
#export VERSION=4.0
#export VERSIONDATE=20190324
#export VERSION=4.1
#export VERSIONDATE=20190415
#export VERSION=4.2
#export VERSIONDATE=20190424
#export VERSION=4.3
#export VERSIONDATE=20190618
#export VERSION=4.4
#export VERSIONDATE=20190825
#export VERSION=4.5
#export VERSIONDATE=20191004
#export VERSION=4.6
#export VERSIONDATE=20191129
#export VERSION=4.7
#export VERSIONDATE=20191223
#export VERSION=4.8
#export VERSIONDATE=20200207
#export VERSION=4.9
#export VERSIONDATE=20200324
#export VERSION=4.9.2
#export VERSIONDATE=20200408
#export VERSION=4.9.3
#export VERSIONDATE=20200524
#export VERSION=5.0
#export VERSIONDATE=20200729
#export VERSION=5.1
#export VERSIONDATE=20200812
#export VERSION=5.2
#export VERSIONDATE=20200824
#export VERSION=5.3
#export VERSIONDATE=20201007
#export VERSION=5.4
#export VERSIONDATE=20201202
#export VERSION=5.5
#export VERSIONDATE=20210114
#export VERSION=5.6
#export VERSIONDATE=20210224
#export VERSION=5.6.1
#export VERSIONDATE=20210303
#export VERSION=5.7
#export VERSIONDATE=20210429
#export VERSION=5.8
#export VERSIONDATE=20210515
#export VERSION=5.9
#export VERSIONDATE=20211006
#export VERSION=6.0
#export VERSIONDATE=20211215
#export VERSION=6.1
#export VERSIONDATE=20220209
#export VERSION=6.2
#export VERSIONDATE=20220218
export VERSION=6.3
export VERSIONDATE=20220428
wl-showstatus --package-version
export DEPENDANCIES=libiconv,gettext,ncurses
#export DEPENDANCIES=libiconv,gettext,slang
export OPTIONALDEPENDANCIES=
export BUILDDEPENDANCIES=
export LICENSEFILE=COPYING
export LICENSETYPE=GPL
export DOWNLOADURL="http://www.nano-editor.org/download.php"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://www.nano-editor.org/dist/v`echo $VERSION|sed 's/^\([0-9]*\.[0-9]*\)\..*$/\1/'`/$BASENAME-$VERSION.tar.gz
export DOWNLOADSOURCEURL=https://www.nano-editor.org/dist/v$(echo $VERSION|sed "s/^\([0-9]*\)\..*$/\1/")/$BASENAME-$VERSION.tar.xz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
#tar xfz $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
tar xfJ $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.xz
cd $BASENAME-$VERSION
## fix src/proto.h
#mv src/proto.h src/proto.h.bak
#cat > src/proto.h << EOF
#//#define sigsetjmp(buf,n) _setjmp(buf)
#//#define siglongjmp longjmp
##define sigjmp_buf jmp_buf
#EOF
#cat src/proto.h.bak >> src/proto.h
## fix missing pwd.h
#cat > pwd.h << EOF
##define S_IRGRP 0
##define S_IWGRP 0
##define S_IROTH 0
##define S_IWOTH 0
##define S_IRWXG 0
##define S_IRWXO 0
##define getpwent() NULL
#struct passwd {
#  char *pw_dir;
#  char *pw_name;
#};
#EOF
# fix src/nano.h (version >= 4.3)
patch -ulbf src/nano.h << EOF
@@ -95,2 +95,8 @@
 #endif /* CURSES_H */
+#undef ALT_LEFT
+#undef ALT_RIGHT
+#undef ALT_UP
+#undef ALT_DOWN
+#undef KEY_FLUSH
+#undef ungetch

EOF
# fix src/nano.c (version >= 4.3)
patch -ulbf src/nano.c << EOF
@@ -1997,2 +1997,3 @@

+#ifndef __MINGW32__
        /* Get the state of standard input and ensure it uses blocking mode. */
@@ -2001,2 +2002,3 @@
                fcntl(0, F_SETFL, stdin_flags & ~O_NONBLOCK);
+#endif

EOF
# fix missing flock functions in src/files.c (version >= 4.3)
mv -f src/files.c src/files.c.bak
cat > src/files.c << EOF
#include <io.h>
#include <stdio.h>
#include <stdint.h>
#include <errno.h>
#include <windows.h>

static BOOL file_size (HANDLE h, DWORD * lower, DWORD * upper)
{
  if ((*lower = GetFileSize(h, upper)) == INVALID_FILE_SIZE)
    return FALSE;
  return TRUE;
}

#ifndef LOCKFILE_FAIL_IMMEDIATELY
#define LOCKFILE_FAIL_IMMEDIATELY 1
#endif

#ifndef LOCK_SH
#define LOCK_SH 0x01
#define LOCK_EX 0x02
#define LOCK_NB 0x04
#define LOCK_UN 0x08
#endif

static BOOL win_lock (HANDLE h, int non_blocking, int exclusive)
{
  DWORD size_lower, size_upper;
  OVERLAPPED ovlp;
  if (!file_size(h, &size_lower, &size_upper))
    return FALSE;
  memset(&ovlp, 0, sizeof(ovlp));
  return LockFileEx(h, 0 | (non_blocking ? LOCKFILE_FAIL_IMMEDIATELY : 0) | (exclusive ? LOCKFILE_EXCLUSIVE_LOCK : 0), 0, size_lower, size_upper, &ovlp);
}

static BOOL win_unlock (HANDLE h)
{
  DWORD size_lower, size_upper;
  if (!file_size(h, &size_lower, &size_upper))
    return FALSE;
  return UnlockFile(h, 0, 0, size_lower, size_upper);
}

int flock (int fd, int operation)
{
  BOOL res;
  int non_blocking;
  HANDLE h = (HANDLE)_get_osfhandle(fd);
  if (h == INVALID_HANDLE_VALUE) {
    errno = EBADF;
    return -1;
  }
  non_blocking = operation & LOCK_NB;
  operation &= ~LOCK_NB;
  switch (operation) {
    case LOCK_SH:
      res = win_lock(h, non_blocking, 0);
      break;
    case LOCK_EX:
      res = win_lock(h, non_blocking, 1);
      break;
    case LOCK_UN:
      res = win_unlock(h);
      break;
    default:
      errno = EINVAL;
      return -1;
  }
  if (!res) {
    DWORD err = GetLastError();
    switch (err) {
      //someone else is holding a lock
      case ERROR_LOCK_VIOLATION:
        errno = EAGAIN;
        break;
      //out of memory
      case ERROR_NOT_ENOUGH_MEMORY:
        errno = ENOMEM;
        break;
      case ERROR_BAD_COMMAND:
        errno = EINVAL;
        break;
      default:
        errno = err;
    }
    return -1;
  }
  return 0;
}

void flockfile(FILE* filehandle)
{
  flock(_fileno(filehandle), LOCK_EX);
}

void funlockfile(FILE *filehandle)
{
  flock(_fileno(filehandle), LOCK_UN);
}

#define getc_unlocked getc
EOF
cat src/files.c.bak >> src/files.c
# fix missing fsync in src/files.c (version >= 5.0)
mv src/files.c src/files.c.bak2 &&
echo "#define fsync(fd) _commit(fd)" > src/files.c &&
cat src/files.c.bak2 >> src/files.c
# fix src/nano.c (version >= 5.9)
patch -ulbf src/nano.c << EOF
@@ -2061,3 +2061,7 @@
        if (getenv("TERM") == NULL)
+#ifdef _WIN32
+               putenv("TERM=vt220");
+#else
                setenv("TERM", "vt220", 0);
+#endif

EOF
#--enable-utf8
####*** UTF-8 support was requested, but insufficient UTF-8 support was
####*** detected in your curses and/or C libraries.  Please verify that your
####*** slang was built with UTF-8 support or your curses was built with
####*** wide character support, and that your C library was built with wide
####*** character support.
wl-showstatus configure &&
 #PKG_CONFIG== ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-tiny --enable-utf8 --without-slang --enable-threads=windows &&
 #PKG_CONFIG== ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-tiny --enable-utf8 --without-slang --enable-threads=windows --without-included-regex &&
 PKG_CONFIG== ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-tiny --enable-utf8 --without-slang --enable-threads=windows --without-included-regex CFLAGS="-I$MINGWPREFIX/include/ncurses" NCURSES_CFLAGS="-I$MINGWPREFIX/include/ncursesw" NCURSESW_CFLAGS="-I$MINGWPREFIX/include/ncursesw" LDFLAGS="-Wl,--as-needed -lregex" &&
 #--with-slang=$MINGWPREFIX &&
 #--disable-nls           do not use Native Language Support
 #--disable-rpath         do not hardcode runtime library paths
 #--disable-browser       Disable the built-in file browser
 #--disable-color         Disable color and syntax highlighting
 #--disable-comment       Disable the comment/uncomment function
 #--disable-extra         Disable the Easter egg
 #--disable-help          Disable the built-in help texts
 #--disable-histories     Disable search and position histories
 #--disable-justify       Disable the justify/unjustify functions
 #--disable-libmagic      Disable detection of file types via libmagic
 #--disable-linenumbers   Disable line numbering
 #--disable-mouse         Disable mouse support
 #--disable-multibuffer   Disable multiple file buffers
 #--disable-nanorc        Disable the use of .nanorc files
 #--disable-operatingdir  Disable the setting of an operating directory
 #--disable-speller       Disable the spell-checker functions
 #--disable-tabcomp       Disable the tab-completion functions
 #--disable-wordcomp      Disable the word-completion function
 #--disable-wrapping      Disable all hard-wrapping of text
 wl-showstatus build-install &&
 #make install-strip &&
 #( make install-strip || make install-strip LIBS="-Wl,--as-needed -lncursesw -lregex" ) &&
 ( make install-strip || make install-strip LIBS="-Wl,--as-needed -lncursesw -lregex -lbcrypt" ) &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && rm -rf $BASENAME-$VERSION
#TERMINFO=$MINGWPREFIX/lib/terminfo nano




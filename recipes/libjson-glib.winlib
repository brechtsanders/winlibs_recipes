#export NAME="JSON-GLib"
#export STATUS=
#export URL=http://live.gnome.org/JsonGlib
#export BASENAME=libjson-glib
#export DESCRIPTION="JSON-GLib is a library providing serialization and deserialization support for the JavaScript Object Notation (JSON) format described by RFC 4627."
#export CATEGORY=dataprocessing
#export TYPE=library
##export VERSION=0.6.2
##export VERSION=0.10.0
##export VERSIONDATE=20091230
##export VERSION=0.11.2
##export VERSIONDATE=20100803
##export VERSION=0.12.0
##export VERSIONDATE=20100926
#####/bin/sh: line 1: --template: command not found
##export VERSION=0.13.2
##export VERSIONDATE=20110518
##export VERSION=0.14.0
##export VERSIONDATE=20110919
##export VERSION=0.15.2
##export VERSIONDATE=20120630
##export VERSION=0.16.0
##export VERSIONDATE=20130417
##export VERSION=1.0.0
##export VERSIONDATE=20140325
##export VERSION=1.1.2
##export VERSIONDATE=20160302
#export VERSION=1.2.0
#export VERSIONDATE=20160323
#wl-showstatus --package-version
#export DEPENDANCIES=glib2,zlib,gettext
#export OPTIONALDEPENDANCIES=
#export BUILDDEPENDANCIES=pkg-config
#export LICENSEFILE=COPYING
#export LICENSETYPE=LGPL2.1
##export DOWNLOADURL="http://live.gnome.org/JsonGlib json-glib-"
#export DOWNLOADURL="http://ftp.gnome.org/pub/GNOME/sources/json-glib/"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
##export DOWNLOADSOURCEURL=http://folks.o-hand.com/~ebassi/sources/json-glib-$VERSION.tar.gz
##export DOWNLOADSOURCEURL=http://ftp.gnome.org/pub/GNOME/sources/json-glib/`echo $VERSION|sed 's/^\([0-9]*\.[0-9]*\)\..*$/\1/'`/json-glib-$VERSION.tar.bz2
#export DOWNLOADSOURCEURL=http://ftp.gnome.org/pub/GNOME/sources/json-glib/`echo $VERSION|sed 's/^\([0-9]*\.[0-9]*\)\..*$/\1/'`/json-glib-$VERSION.tar.xz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
##tar xfz $TARBALLDIR/$BASENAME/json-glib-$VERSION.tar.gz
##tar xfj $TARBALLDIR/$BASENAME/json-glib-$VERSION.tar.bz2
#tar xfJ $TARBALLDIR/$BASENAME/json-glib-$VERSION.tar.xz
#cd json-glib-$VERSION
### fix direct glib includes in json-glib/json-scanner.h (version <= 0.14.0)
##patch -ulbf json-glib/json-scanner.h << EOF
##--- json-glib/json-scanner.h  2011-02-02 15:07:24 +0100
##+++ json-glib/json-scanner.h  2012-01-11 11:13:08 +0100
##@@ -36,5 +36,3 @@
##
##-#include <glib/gdataset.h>
##-#include <glib/ghash.h>
##-#include <glib/gscanner.h>
##+#include <glib.h>
##
##EOF
### fix direct glib includes in json-glib/tests/gvariant.c (version <= 0.14.0)
##patch -ulbf json-glib/tests/gvariant.c << EOF
##--- json-glib/tests/gvariant.c  2011-07-05 15:11:56 +0200
##+++ json-glib/tests/gvariant.c  2012-01-11 11:15:06 +0100
##@@ -1,2 +1,2 @@
##-#include <glib/gtestutils.h>
##+#include <glib.h>
## #include <json-glib/json-glib.h>
##
##EOF
### fix direct glib includes in json-glib/tests/node.c (version <= 0.14.0)
##patch -ulbf json-glib/tests/node.c << EOF
##--- json-glib/tests/node.c  2011-07-05 15:11:56 +0200
##+++ json-glib/tests/node.c  2012-01-11 11:16:28 +0100
##@@ -1,2 +1,2 @@
##-#include <glib/gtestutils.h>
##+#include <glib.h>
## #include <json-glib/json-glib.h>
##
##EOF
#wl-showstatus configure &&
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM LDFLAGS="-no-undefined -Wl,-no-undefined" &&
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-introspection=no LDFLAGS="-no-undefined -Wl,-no-undefined" &&
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-introspection=no LDFLAGS="-Wl,-no-undefined" &&
#./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-static --enable-shared --enable-introspection=no LDFLAGS="-Wl,-no-undefined" &&
# wl-showstatus build-install &&
# make install-strip &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf json-glib-$VERSION



export NAME="JSON-GLib"
export STATUS=
export URL=http://live.gnome.org/JsonGlib
export BASENAME=libjson-glib
export DESCRIPTION="JSON-GLib is a library providing serialization and deserialization support for the JavaScript Object Notation (JSON) format described by RFC 4627."
export CATEGORY=dataprocessing
export TYPE=library
#export VERSION=1.3.2
#export VERSIONDATE=20170718
#export VERSION=1.4.2
#export VERSIONDATE=20170912
#export VERSION=1.4.4
#export VERSIONDATE=20200608
#export VERSION=1.5.2
#export VERSIONDATE=20200825
#export VERSION=1.6.0
#export VERSIONDATE=20200912
#export VERSION=1.6.2
#export VERSIONDATE=20210210
#export VERSION=1.6.4
#export VERSIONDATE=20210818
export VERSION=1.6.6
export VERSIONDATE=20210824
wl-showstatus --package-version
export DEPENDANCIES=glib2,zlib,gettext
export OPTIONALDEPENDANCIES=
export BUILDDEPENDANCIES=meson,ninja,pkg-config
export LICENSEFILE=COPYING
export LICENSETYPE=LGPL2.1
#export DOWNLOADURL="https://download.gnome.org/sources/json-glib/ json-glib-"
export DOWNLOADURL="http://ftp.gnome.org/pub/GNOME/sources/json-glib/ json-glib-"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=http://ftp.gnome.org/pub/GNOME/sources/json-glib/$(echo $VERSION|sed 's/^\([0-9]*\.[0-9]*\)\..*$/\1/')/json-glib-$VERSION.tar.xz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
tar xfJ $TARBALLDIR/$BASENAME/json-glib-$VERSION.tar.xz
cd json-glib-$VERSION
mkdir -p build_both &&
 wl-showstatus configure &&
 #PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Dintrospection=false -Ddocs=false . build_both &&
 PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Dintrospection=disabled -Dman=false -Dgtk_doc=disabled -Dtests=false . build_both &&
 # fix slash/backslash path issue when calling Python from Ninja
 sed -i.bak -e "s/join_paths/os.path.join/g; /COMMAND =.*python\.exe/ s?\"/\([a-zA-Z]\)/?\"\1:/?; /COMMAND =.*python\.exe/ s?/?\\\\?g" build_*/build.ninja &&
 wl-showstatus build-install &&
 PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib ninja -Cbuild_both install &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf json-glib-$VERSION




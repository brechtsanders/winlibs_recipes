export NAME="nanopb"
export STATUS=
export URL=https://jpa.kapsi.fi/nanopb/
export BASENAME=nanopb
export DESCRIPTION="Nanopb is a plain-C implementation of Google's Protocol Buffers data format. It is targeted at 32 bit microcontrollers, but is also fit for other embedded systems with tight (2-10 kB ROM, <1 kB RAM) memory constraints."
export CATEGORY=development
export TYPE=library
#export VERSION=0.3.9
#export VERSIONDATE=20171009
#export VERSION=0.3.9.1
#export VERSIONDATE=20180415
#export VERSION=0.3.9.2
#export VERSIONDATE=20181110
#export VERSION=0.3.9.3
#export VERSIONDATE=20190308
#export VERSION=0.3.9.4
#export VERSIONDATE=20191013
#export VERSION=0.3.9.5
#export VERSIONDATE=20200202
#export VERSION=0.3.9.6
#export VERSIONDATE=20200623
#export VERSION=0.3.9.9
#export VERSIONDATE=20220424
#export VERSION=0.4.0
#export VERSIONDATE=20191220
#export VERSION=0.4.1
#export VERSIONDATE=20200202
#export VERSION=0.4.2
#export VERSIONDATE=20200623
#export VERSION=0.4.3
#export VERSIONDATE=20200921
#export VERSION=0.4.4
#export VERSIONDATE=20201125
export VERSION=0.4.5
export VERSIONDATE=20210323
wl-showstatus --package-version
export DEPENDANCIES=protobuf
export OPTIONALDEPENDANCIES=
#export BUILDDEPENDANCIES=cmake
export BUILDDEPENDANCIES=cmake,ninja
export LICENSEFILE=LICENSE.txt
export LICENSETYPE=zlib
#export DOWNLOADURL="https://github.com/nanopb/nanopb/releases"
export DOWNLOADURL="https://github.com/nanopb/nanopb/tags"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://github.com/nanopb/nanopb/archive/$VERSION.tar.gz
export DOWNLOADSOURCEURL=https://github.com/nanopb/nanopb/archive/refs/tags/$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xfz $TARBALLDIR/$BASENAME/$VERSION.tar.gz
cd $BASENAME-$VERSION
# fix building DLL
patch -ulbf CMakeLists.txt << EOF
@@ -68,2 +68,11 @@
         pb_decode.c)
+    add_library(protobuf-nanopb_shared SHARED
+        pb.h
+        pb_common.h
+        pb_common.c
+        pb_encode.h
+        pb_encode.c
+        pb_decode.h
+        pb_decode.c)
+    set_target_properties(protobuf-nanopb_shared PROPERTIES OUTPUT_NAME protobuf-nanopb)

EOF
#wl-showstatus configure &&
# #cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe . &&
# cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DPython_EXECUTABLE:FILEPATH=$PYDIR/python.exe . &&
# wl-showstatus build-install &&
# mkdir -p $INSTALLPREFIX/lib $INSTALLPREFIX/bin &&
# make install/strip &&
# cp -f *.dll.a $INSTALLPREFIX/lib/ &&
# strip *.dll &&
# cp -f *.dll $INSTALLPREFIX/bin/ &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
wl-showstatus configure &&
 cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DPython_EXECUTABLE:FILEPATH=$PYDIR/python.exe . &&
 wl-showstatus build-install &&
 mkdir -p $INSTALLPREFIX/lib $INSTALLPREFIX/bin &&
 ninja install/strip &&
 cp -f *.dll.a $INSTALLPREFIX/lib/ &&
 strip *.dll &&
 cp -f *.dll $INSTALLPREFIX/bin/ &&
 # fix missing py in bin/protoc-gen-nanopb.bat
 sed -i -e "s/^py -3 /python.exe /" $INSTALLPREFIX/bin/protoc-gen-nanopb.bat &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




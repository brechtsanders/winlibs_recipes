#export NAME="C++ Requests"
#export STATUS=
#export URL=https://github.com/whoshuu/cpr
#export BASENAME=cpr
#export DESCRIPTION="C++ Requests is a simple wrapper around libcurl inspired by the excellent Python Requests project."
#export CATEGORY=communication
#export TYPE=library
##export VERSION=1.2.0
##export VERSIONDATE=20160408
##export VERSION=1.3.0
##export VERSIONDATE=20170117
##export VERSION=1.4.0
##export VERSIONDATE=20200430
##export VERSION=1.5.0
##export VERSIONDATE=20200623
##export VERSION=1.5.1
##export VERSIONDATE=20200709
##export DEPENDENCIES=
##export OPTIONALDEPENDENCIES=
##export BUILDDEPENDENCIES=cmake,ninja
##export OPTIONALBUILDDEPENDENCIES=
##export VERSION=1.5.2
##export VERSIONDATE=20201021
##export VERSION=1.6.0
##export VERSIONDATE=20210320
##export VERSION=1.6.2
##export VERSIONDATE=20210428
##export VERSION=1.7.0
##export VERSIONDATE=20211124
##export VERSION=1.7.2
##export VERSIONDATE=20211209
##export VERSION=1.8.1
##export VERSIONDATE=20220326
##export VERSION=1.8.2
##export VERSIONDATE=20220428
##export VERSION=1.8.3
##export VERSIONDATE=20220505
##export VERSION=1.8.4
##export VERSIONDATE=20220707
##export VERSION=1.9.0
##export VERSIONDATE=20220719
##export VERSION=1.9.1
##export VERSIONDATE=20220801
##export VERSION=1.9.2
##export VERSIONDATE=20220904
##export VERSION=1.9.3
##export VERSIONDATE=20221124
#export VERSION=1.10.0
#export VERSIONDATE=20230127
#wl-showstatus --package-version
#export DEPENDENCIES=libcurl
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=cmake,ninja
#export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=LICENSE
#export LICENSETYPE=MIT
#export DOWNLOADURL="https://github.com/whoshuu/cpr/releases"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
##export DOWNLOADSOURCEURL=https://github.com/whoshuu/cpr/archive/$VERSION.tar.gz
##export DOWNLOADSOURCEURL=https://github.com/whoshuu/cpr/archive/v$VERSION.tar.gz
#export DOWNLOADSOURCEURL=https://github.com/libcpr/cpr/archive/refs/tags/$VERSION.tar.gz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
##mv $TARBALLDIR/$BASENAME/$VERSION.tar.gz $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
#wl-wait4deps
#wl-showstatus extract
##tar xz --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
#tar xz --force-local -f $TARBALLDIR/$BASENAME/$VERSION.tar.gz
##tar xz --force-local -f $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
#cd $BASENAME-$VERSION
### fix error: duplicate case value in cpr/error.cpp (version >= 1.3.0 <= 1.5.1)
##patch -ulbf cpr/error.cpp << EOF
##@@ -24,4 +24,6 @@
##             return ErrorCode::SSL_CONNECT_ERROR;
##+#if CURLE_PEER_FAILED_VERIFICATION != CURLE_SSL_CACERT
##         case CURLE_PEER_FAILED_VERIFICATION:
##             return ErrorCode::SSL_REMOTE_CERTIFICATE_ERROR;
##+#endif
##         case CURLE_GOT_NOTHING:
##EOF
##mkdir -p build_win &&
## wl-showstatus configure &&
## #cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DUSE_SYSTEM_CURL:BOOL=ON -DCPR_CURL_NOSIGNAL:BOOL=ON -DUSE_SYSTEM_GTEST:BOOL=ON -DBUILD_CPR_TESTS:BOOL=OFF -DBUILD_CURL_TESTS:BOOL=OFF -S. -Bbuild_win &&
## cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DUSE_SYSTEM_CURL:BOOL=ON -DCPR_CURL_NOSIGNAL:BOOL=ON -DUSE_SYSTEM_GTEST:BOOL=ON -DBUILD_CPR_TESTS:BOOL=OFF -S. -Bbuild_win &&
## wl-showstatus build &&
## make -Cbuild_win &&
## #wl-showstatus build-install &&
## #( make -Cbuild_win install/strip || -Cbuild_win make install ) &&
## wl-showstatus build-install &&
## mkdir -p $INSTALLPREFIX/include $INSTALLPREFIX/lib &&
## cp -rf include/cpr $INSTALLPREFIX/include/ &&
## cp -f build_win/lib/*.a $INSTALLPREFIX/lib/ &&
## wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
######TO DO: build shared library (DLL)
### force using system libcurl in CMakeLists.txt (version >= 1.5.2)
##patch -ulbf CMakeLists.txt << EOF
##@@ -57,3 +57,3 @@
## if(USE_SYSTEM_CURL)
##-    find_package(CURL COMPONENTS PROTOCOLS HTTP HTTPS FEATURES SSL)
##+    find_package(CURL)
##     if (CURL_FOUND)
##EOF
## force using system libcurl in CMakeLists.txt (version >= 1.6.2)
#sed -i.bak -e "s/\(find_package(CURL\) COMPONENTS[^)]*/\1/" CMakeLists.txt
## don't abort on warnings (version >= 1.10.0)
#sed -i.bak2 -e "s/\-Wall\|-Wextra\|-Wpedantic\|-Werror//g" CMakeLists.txt
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DUSE_SYSTEM_CURL:BOOL=ON -DCPR_CURL_NOSIGNAL:BOOL=ON -DUSE_SYSTEM_GTEST:BOOL=ON -DBUILD_CPR_TESTS:BOOL=OFF -S. -Bbuild_static &&
# #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DUSE_SYSTEM_CURL:BOOL=ON -DCPR_CURL_NOSIGNAL:BOOL=ON -DUSE_SYSTEM_GTEST:BOOL=ON -DBUILD_CPR_TESTS:BOOL=OFF -DCPR_BUILD_TESTS_SSL:BOOL=OFF -S. -Bbuild_static &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DFETCHCONTENT_FULLY_DISCONNECTED:BOOL=ON -DUSE_SYSTEM_CURL:BOOL=ON -DCPR_CURL_NOSIGNAL:BOOL=ON -DENABLE_UNIX_SOCKETS:BOOL=OFF -DCPR_FORCE_USE_SYSTEM_CURL:BOOL=ON -DUSE_SYSTEM_GTEST:BOOL=ON -DCPR_BUILD_TESTS:BOOL=OFF -DCPR_BUILD_TESTS_SSL:BOOL=OFF -S. -Bbuild_static &&
# wl-showstatus configure &&
# #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DUSE_SYSTEM_CURL:BOOL=ON -DCPR_CURL_NOSIGNAL:BOOL=ON -DUSE_SYSTEM_GTEST:BOOL=ON -DBUILD_CPR_TESTS:BOOL=OFF -S. -Bbuild_shared &&
# #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DUSE_SYSTEM_CURL:BOOL=ON -DCPR_CURL_NOSIGNAL:BOOL=ON -DUSE_SYSTEM_GTEST:BOOL=ON -DBUILD_CPR_TESTS:BOOL=OFF -DCPR_BUILD_TESTS_SSL:BOOL=OFF -S. -Bbuild_shared &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DFETCHCONTENT_FULLY_DISCONNECTED:BOOL=ON -DUSE_SYSTEM_CURL:BOOL=ON -DCPR_CURL_NOSIGNAL:BOOL=ON -DENABLE_UNIX_SOCKETS:BOOL=OFF -DCPR_FORCE_USE_SYSTEM_CURL:BOOL=ON -DUSE_SYSTEM_GTEST:BOOL=ON -DCPR_BUILD_TESTS:BOOL=OFF -DCPR_BUILD_TESTS_SSL:BOOL=OFF -S. -Bbuild_shared &&
# wl-showstatus build-install &&
# ninja -Cbuild_static install/strip &&
# wl-showstatus build-install &&
# ninja -Cbuild_shared install/strip &&
# # manually install .dll (version >= 1.7.0)
# strip build_shared/lib/*.dll &&
# mkdir -p $INSTALLPREFIX/bin &&
# cp -u build_shared/lib/*.dll $INSTALLPREFIX/bin/ &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION



export NAME="Curl for People"
export STATUS=
export URL=https://docs.libcpr.org/
export BASENAME=libcpr
export DESCRIPTION="C++ Requests is a simple wrapper around libcurl inspired by the excellent Python Requests project."
export CATEGORY=communication
export TYPE=library
#export VERSION=1.9.2
#export VERSIONDATE=20221018
#export VERSION=1.9.3
#export VERSIONDATE=20221125
#export VERSION=1.9.4
#export VERSIONDATE=20230326
#export VERSION=1.10.0
#export VERSIONDATE=20230127
#export VERSION=1.10.1
#export VERSIONDATE=20230304
#export VERSION=1.10.2
#export VERSIONDATE=20230326
export VERSION=1.10.3
export VERSIONDATE=20230515
wl-showstatus --package-version
export DEPENDENCIES=pthreads,zlib,libcurl
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=MIT
export DOWNLOADURL="https://github.com/libcpr/cpr/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/libcpr/cpr/archive/refs/tags/$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/$VERSION.tar.gz
cd cpr-$VERSION
# don't abort on warnings (version >= 1.10.0)
sed -i.bak -e "s/\-Wall\|-Wextra\|-Wpedantic\|-Werror//g" CMakeLists.txt
mkdir -p build_static build_shared &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DCPR_FORCE_USE_SYSTEM_CURL:BOOL=ON -DFETCHCONTENT_FULLY_DISCONNECTED:BOOL=ON -DBUILD_TESTING:BOOL=OFF -S. -Bbuild_static &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DCPR_FORCE_USE_SYSTEM_CURL:BOOL=ON -DFETCHCONTENT_FULLY_DISCONNECTED:BOOL=ON -DBUILD_TESTING:BOOL=OFF -S. -Bbuild_shared &&
 wl-showstatus build-install &&
 ninja -Cbuild_static install/strip &&
 wl-showstatus build-install &&
 ninja -Cbuild_shared install/strip &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf cpr-$VERSION




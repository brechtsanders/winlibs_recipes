#export NAME="mingw-w64"
#export STATUS=
#export URL=http://mingw-w64.sourceforge.net/
#export BASENAME=mingw-w64
#export DESCRIPTION="The project's goal is to deliver runtime, headers, and libs for developing 64 bit (x64), as well as 32 bit (x86), windows applications using gcc-4.4 or newer versions."
#export CATEGORY=development
#export TYPE=library
#export VERSION=4.4.1-1a
#export VERSIONDATE=20100208
#wl-showstatus --package-version
#export DEPENDENCIES=
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=
#export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=
#export LICENSETYPE=
#export DOWNLOADURL=""
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://surfnet.dl.sourceforge.net/project/mingw-w64/Toolchain%20sources/Release%20for%20GCC%204.4.1/mingw-w64-src_$VERSION.tar.bz2
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#tar xj --force-local -f $TARBALLDIR/$BASENAME/mingw-w64-src_$VERSION.tar.bz2
#mv mingw $BASENAME-$VERSION
#cd $BASENAME-$VERSION/mingw-w64-crt
## --enable-lib32 --enable-lib64 --enable-libce
#wl-showstatus configure &&
#./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-lib32 &&
# wl-showstatus build-install &&
# make &&
#    echo OK
##wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && rm -rf $BASENAME-$VERSION



export NAME="MinGW-w64"
export STATUS=
#export URL=http://mingw-w64.sourceforge.net/
export URL=http://mingw-w64.org/
export BASENAME=mingw-w64
export DESCRIPTION="The project's goal is to deliver runtime, headers, and libs for developing 64 bit (x64), as well as 32 bit (x86), windows applications using gcc-4.4 or newer versions."
export CATEGORY=development
export TYPE=application
#export VERSION=1.0.3
#export VERSIONDATE=20120403
#export VERSION=1.0.5
#export VERSIONDATE=20120801
#export VERSION=1.0.6
#export VERSIONDATE=20120807
#export VERSION=1.0.7
#export VERSIONDATE=20120924
#export VERSION=1.0.8
#export VERSIONDATE=20130411
#export VERSION=1.0.9
#export VERSIONDATE=20140418
#export VERSION=1.0.10
#export VERSIONDATE=20150321
#export VERSION=2.0
#export VERSIONDATE=20111019
#export VERSION=2.0.1
#export VERSIONDATE=20111213
#export VERSION=2.0.2
#export VERSIONDATE=20120403
#export VERSION=2.0.3
#export VERSIONDATE=20120428
#export VERSION=2.0.4
#export VERSIONDATE=20120701
#export VERSION=2.0.5
#export VERSIONDATE=20120801
#export VERSION=2.0.6
#export VERSIONDATE=20120807
#export VERSION=2.0.7
#export VERSIONDATE=20120924
#export VERSION=2.0.8
#export VERSIONDATE=20130411
#export VERSION=2.0.9
#export VERSIONDATE=20140418
#export VERSION=2.0.10
#export VERSIONDATE=20150321
#export VERSION=3.0.0
#export VERSIONDATE=20130921
#export VERSION=3.1.0
#export VERSIONDATE=20140110
####configure: error: Please check if the mingw-w64 header set and the build/host option are set properly.
#export VERSION=3.2.0
#export VERSIONDATE=20140901
#export VERSION=3.3.0
#export VERSIONDATE=20141026
#export VERSION=4.0.0
#export VERSIONDATE=20150314
#export VERSION=4.0.1
#export VERSIONDATE=20150325
#export VERSION=4.0.2
#export VERSIONDATE=20150417
#export VERSION=4.0.4
#export VERSIONDATE=20150811
#export VERSION=4.0.5
#export VERSIONDATE=20160405
#export VERSION=4.0.6
#export VERSIONDATE=20160407
#export VERSION=5.0.0
#export VERSIONDATE=20161017
#export VERSION=5.0.1
#export VERSIONDATE=20170104
#export VERSION=5.0.2
#export VERSIONDATE=20170324
#export VERSION=5.0.3
#export VERSIONDATE=20171104
#export VERSION=5.0.4
#export VERSIONDATE=20180603
#export VERSION=6.0.0
#export VERSIONDATE=20180917
#export VERSION=7.0.0
#export VERSIONDATE=20191110
#export VERSION=8.0.0
#export VERSIONDATE=20200918
#export VERSION=8.0.2
#export VERSIONDATE=20210509
#export VERSION=9.0.0
#export VERSIONDATE=20210523
#export VERSION=10.0.0
#export VERSIONDATE=20220404
#export VERSION=master
#export VERSIONDATE=20230403
#export DEPENDENCIES=
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=
#export OPTIONALBUILDDEPENDENCIES=
#export VERSION=11.0.0
#export VERSIONDATE=20230428
export VERSION=11.0.1
export VERSIONDATE=20230807
wl-showstatus --package-version
export DEPENDENCIES=
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=COPYING
export LICENSETYPE="Zope Public License (ZPL) with exceptions"
export DOWNLOADURL="http://sourceforge.net/projects/mingw-w64/files/mingw-w64/mingw-w64-release/ mingw-w64-v"
#export DOWNLOADURL="https://github.com/mirror/mingw-w64/releases"
#export DOWNLOADURL="https://github.com/mirror/mingw-w64/tags"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://downloads.sourceforge.net/project/mingw-w64/mingw-w64/mingw-w64-release/mingw-w64-v$VERSION.tar.gz
export DOWNLOADSOURCEURL=http://downloads.sourceforge.net/project/mingw-w64/mingw-w64/mingw-w64-release/mingw-w64-v$VERSION.tar.bz2
#export DOWNLOADSOURCEURL=https://github.com/mirror/mingw-w64/archive/refs/tags/v$VERSION.tar.gz
#export DOWNLOADSOURCEURL=https://github.com/mirror/mingw-w64/archive/refs/heads/master.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
#tar xz --force-local -f $TARBALLDIR/$BASENAME/mingw-w64-v$VERSION.tar.gz
tar xj --force-local -f $TARBALLDIR/$BASENAME/mingw-w64-v$VERSION.tar.bz2
cd mingw-w64-v$VERSION
#tar xz --force-local -f $TARBALLDIR/$BASENAME/master.tar.gz
#cd mingw-w64-master
# fix mingw-w64-libraries/winpthreads/src/thread.c (version >= 9.0.0)
patch -ulf mingw-w64-libraries/winpthreads/src/thread.c << EOF
@@ -27,2 +27,3 @@
 #include <malloc.h>
+#include <string.h>
 #include <signal.h>
EOF
# fix ARM32 issue in mingw-w64-crt/crt/crtexe.c (version >= 10.0.0)
####mingw-w64-crt/crt/crtexe.c:180:6: error: a handler attribute must begin with '@' or '%'
patch -ulbf mingw-w64-crt/crt/crtexe.c << EOF
@@ -23,3 +23,3 @@

-#if defined(__SEH__) && (!defined(__clang__) || __clang_major__ >= 7)
+#if defined(__SEH__) && (!defined(__clang__) || __clang_major__ >= 7) && !defined(__ARM_ARCH)
 #define SEH_INLINE_ASM
EOF
# fix issues detecting clang as cl in mingw-w64-libraries/winpthreads/ (version >= 9.0.0)
#### bug reported here: https://sourceforge.net/p/mingw-w64/bugs/928/
#### bug reported here: https://debbugs.gnu.org/cgi/bugreport.cgi?bug=53479
#sed -i -e "s/cl\*/DISABLED_FOR_CLANG_&/g" mingw-w64-libraries/winpthreads/configure mingw-w64-libraries/winpthreads/m4/libtool.m4
#sed -i -e "s/^\(\s*\)# Assume MSVC wrapper/\1;;\n&/" mingw-w64-libraries/winpthreads/m4/libtool.m4
#sed -i -e "s/^lt_sysroot=.*$/&\nGCC=yes/" mingw-w64-libraries/winpthreads/m4/libtool.m4
sed -i -e "s/cl\*/DISABLED_FOR_CLANG_&/g" mingw-w64-libraries/winpthreads/configure mingw-w64-libraries/winpthreads/m4/libtool.m4
sed -i -e "s/test yes = \"\$GCC\"/true/; s/^\(\s*\)# Assume MSVC wrapper/\1;;\n\1MSVC)\n&/" mingw-w64-libraries/winpthreads/m4/libtool.m4
## fix mingw-w64-crt/Makefile.in (version = 10.0.0)
##### bug reported: https://github.com/lhmouse/MINGW-packages/issues/11
#patch -ulbf mingw-w64-crt/Makefile.in << EOF
#@@ -10828,3 +10828,4 @@
#   stdio/vscanf.c           stdio/vsnprintf.c         stdio/vsnwprintf.c       stdio/vsscanf.c         \\
#-  stdio/vswscanf.c         stdio/vwscanf.c           stdio/wtoll.c            stdio/mingw_asprintf.c    stdio/mingw_vasprintf.c
#+  stdio/vswscanf.c         stdio/vwscanf.c           stdio/wtoll.c            stdio/mingw_asprintf.c    stdio/mingw_vasprintf.c \\
#+  time/clock.c             time/nanosleep.c
#
#EOF
#mkdir mingw-w64-crt/time
#cat >> mingw-w64-crt/time/clock.c << EOF
#/**
# * This file has no copyright assigned and is placed in the Public Domain.
# * This file is part of the w64 mingw-runtime package.
# * No warranty is given; refer to the file DISCLAIMER.PD within this package.
# */
#
##include <errno.h>
##include <stdint.h>
##include <time.h>
##include <windows.h>
##ifndef IN_WINPTHREAD
##define IN_WINPTHREAD 1
##endif
##include "pthread.h"
##include "pthread_time.h"
#
##define POW10_7                 10000000
##define POW10_9                 1000000000
#
#/* Number of 100ns-seconds between the beginning of the Windows epoch
# * (Jan. 1, 1601) and the Unix epoch (Jan. 1, 1970)
# */
##define DELTA_EPOCH_IN_100NS    INT64_C(116444736000000000)
#
#static WINPTHREADS_INLINE int lc_set_errno(int result)
#{
#    if (result != 0) {
#        errno = result;
#        return -1;
#    }
#    return 0;
#}
#
#typedef void (WINAPI * GetSystemTimeAsFileTime_t)(LPFILETIME);
#static GetSystemTimeAsFileTime_t GetSystemTimeAsFileTime_p /* = 0 */;
#
#static GetSystemTimeAsFileTime_t try_load_GetSystemPreciseTimeAsFileTime()
#{
#    /* Use GetSystemTimePreciseAsFileTime() if available (Windows 8 or later) */
#    GetSystemTimeAsFileTime_t get_time = (GetSystemTimeAsFileTime_t)(intptr_t)GetProcAddress(
#        GetModuleHandle ("kernel32.dll"),
#        "GetSystemTimePreciseAsFileTime"); /* <1us precision on Windows 10 */
#    if (get_time == NULL)
#        get_time = GetSystemTimeAsFileTime; /* >15ms precision on Windows 10 */
#    __atomic_store_n(&GetSystemTimeAsFileTime_p, get_time, __ATOMIC_RELAXED);
#    return get_time;
#}
#
#static WINPTHREADS_INLINE GetSystemTimeAsFileTime_t load_GetSystemTimeBestAsFileTime()
#{
#    GetSystemTimeAsFileTime_t get_time =
#        __atomic_load_n(&GetSystemTimeAsFileTime_p, __ATOMIC_RELAXED);
#    if (get_time == NULL)
#        get_time = try_load_GetSystemPreciseTimeAsFileTime();
#    return get_time;
#}
#
#/**
# * Get the resolution of the specified clock clock_id and
# * stores it in the struct timespec pointed to by res.
# * @param  clock_id The clock_id argument is the identifier of the particular
# *         clock on which to act. The following clocks are supported:
# * <pre>
# *     CLOCK_REALTIME  System-wide real-time clock. Setting this clock
# *                 requires appropriate privileges.
# *     CLOCK_MONOTONIC Clock that cannot be set and represents monotonic
# *                 time since some unspecified starting point.
# *     CLOCK_PROCESS_CPUTIME_ID High-resolution per-process timer from the CPU.
# *     CLOCK_THREAD_CPUTIME_ID  Thread-specific CPU-time clock.
# * </pre>
# * @param  res The pointer to a timespec structure to receive the time
# *         resolution.
# * @return If the function succeeds, the return value is 0.
# *         If the function fails, the return value is -1,
# *         with errno set to indicate the error.
# */
#int clock_getres(clockid_t clock_id, struct timespec *res)
#{
#    clockid_t id = clock_id;
#
#    if (id == CLOCK_REALTIME && load_GetSystemTimeBestAsFileTime() == GetSystemTimeAsFileTime)
#        id = CLOCK_REALTIME_COARSE; /* GetSystemTimePreciseAsFileTime() not available */
#
#    switch(id) {
#    case CLOCK_REALTIME:
#    case CLOCK_MONOTONIC:
#        {
#            LARGE_INTEGER pf;
#
#            if (QueryPerformanceFrequency(&pf) == 0)
#                return lc_set_errno(EINVAL);
#
#            res->tv_sec = 0;
#            res->tv_nsec = (int) ((POW10_9 + (pf.QuadPart >> 1)) / pf.QuadPart);
#            if (res->tv_nsec < 1)
#                res->tv_nsec = 1;
#
#            return 0;
#        }
#
#    case CLOCK_REALTIME_COARSE:
#    case CLOCK_PROCESS_CPUTIME_ID:
#    case CLOCK_THREAD_CPUTIME_ID:
#        {
#            DWORD   timeAdjustment, timeIncrement;
#            BOOL    isTimeAdjustmentDisabled;
#
#            (void) GetSystemTimeAdjustment(&timeAdjustment, &timeIncrement, &isTimeAdjustmentDisabled);
#            res->tv_sec = 0;
#            res->tv_nsec = timeIncrement * 100;
#
#            return 0;
#        }
#    default:
#        break;
#    }
#
#    return lc_set_errno(EINVAL);
#}
#
#/**
# * Get the time of the specified clock clock_id and stores it in the struct
# * timespec pointed to by tp.
# * @param  clock_id The clock_id argument is the identifier of the particular
# *         clock on which to act. The following clocks are supported:
# * <pre>
# *     CLOCK_REALTIME  System-wide real-time clock. Setting this clock
# *                 requires appropriate privileges.
# *     CLOCK_MONOTONIC Clock that cannot be set and represents monotonic
# *                 time since some unspecified starting point.
# *     CLOCK_PROCESS_CPUTIME_ID High-resolution per-process timer from the CPU.
# *     CLOCK_THREAD_CPUTIME_ID  Thread-specific CPU-time clock.
# * </pre>
# * @param  tp The pointer to a timespec structure to receive the time.
# * @return If the function succeeds, the return value is 0.
# *         If the function fails, the return value is -1,
# *         with errno set to indicate the error.
# */
#int clock_gettime(clockid_t clock_id, struct timespec *tp)
#{
#    unsigned __int64 t;
#    LARGE_INTEGER pf, pc;
#    union {
#        unsigned __int64 u64;
#        FILETIME ft;
#    }  ct, et, kt, ut;
#
#    switch(clock_id) {
#    case CLOCK_REALTIME:
#        {
#            load_GetSystemTimeBestAsFileTime()(&ct.ft);
#            t = ct.u64 - DELTA_EPOCH_IN_100NS;
#            tp->tv_sec = t / POW10_7;
#            tp->tv_nsec = ((int) (t % POW10_7)) * 100;
#
#            return 0;
#        }
#
#    case CLOCK_REALTIME_COARSE:
#        {
#            GetSystemTimeAsFileTime(&ct.ft);
#            t = ct.u64 - DELTA_EPOCH_IN_100NS;
#            tp->tv_sec = t / POW10_7;
#            tp->tv_nsec = ((int) (t % POW10_7)) * 100;
#
#            return 0;
#        }
#
#    case CLOCK_MONOTONIC:
#        {
#            if (QueryPerformanceFrequency(&pf) == 0)
#                return lc_set_errno(EINVAL);
#
#            if (QueryPerformanceCounter(&pc) == 0)
#                return lc_set_errno(EINVAL);
#
#            tp->tv_sec = pc.QuadPart / pf.QuadPart;
#            tp->tv_nsec = (int) (((pc.QuadPart % pf.QuadPart) * POW10_9 + (pf.QuadPart >> 1)) / pf.QuadPart);
#            if (tp->tv_nsec >= POW10_9) {
#                tp->tv_sec ++;
#                tp->tv_nsec -= POW10_9;
#            }
#
#            return 0;
#        }
#
#    case CLOCK_PROCESS_CPUTIME_ID:
#        {
#        if(0 == GetProcessTimes(GetCurrentProcess(), &ct.ft, &et.ft, &kt.ft, &ut.ft))
#            return lc_set_errno(EINVAL);
#        t = kt.u64 + ut.u64;
#        tp->tv_sec = t / POW10_7;
#        tp->tv_nsec = ((int) (t % POW10_7)) * 100;
#
#        return 0;
#        }
#
#    case CLOCK_THREAD_CPUTIME_ID: 
#        {
#            if(0 == GetThreadTimes(GetCurrentThread(), &ct.ft, &et.ft, &kt.ft, &ut.ft))
#                return lc_set_errno(EINVAL);
#            t = kt.u64 + ut.u64;
#            tp->tv_sec = t / POW10_7;
#            tp->tv_nsec = ((int) (t % POW10_7)) * 100;
#
#            return 0;
#        }
#
#    default:
#        break;
#    }
#
#    return lc_set_errno(EINVAL);
#}
#
#/**
# * Sleep for the specified time.
# * @param  clock_id This argument should always be CLOCK_REALTIME (0).
# * @param  flags 0 for relative sleep interval, others for absolute waking up.
# * @param  request The desired sleep interval or absolute waking up time.
# * @param  remain The remain amount of time to sleep.
# *         The current implemention just ignore it.
# * @return If the function succeeds, the return value is 0.
# *         If the function fails, the return value is -1,
# *         with errno set to indicate the error.
# */
#int clock_nanosleep(clockid_t clock_id, int flags,
#                           const struct timespec *request,
#                           struct timespec *remain)
#{
#    struct timespec tp;
#
#    if (clock_id != CLOCK_REALTIME)
#        return lc_set_errno(EINVAL);
#
#    if (flags == 0)
#        return nanosleep(request, remain);
#
#    /* TIMER_ABSTIME = 1 */
#    clock_gettime(CLOCK_REALTIME, &tp);
#
#    tp.tv_sec = request->tv_sec - tp.tv_sec;
#    tp.tv_nsec = request->tv_nsec - tp.tv_nsec;
#    if (tp.tv_nsec < 0) {
#        tp.tv_nsec += POW10_9;
#        tp.tv_sec --;
#    }
#
#    return nanosleep(&tp, remain);
#}
#
#/**
# * Set the time of the specified clock clock_id.
# * @param  clock_id This argument should always be CLOCK_REALTIME (0).
# * @param  tp The requested time.
# * @return If the function succeeds, the return value is 0.
# *         If the function fails, the return value is -1,
# *         with errno set to indicate the error.
# */
#int clock_settime(clockid_t clock_id, const struct timespec *tp)
#{
#    SYSTEMTIME st;
#
#    union {
#        unsigned __int64 u64;
#        FILETIME ft;
#    }  t;
#
#    if (clock_id != CLOCK_REALTIME)
#        return lc_set_errno(EINVAL);
#
#    t.u64 = tp->tv_sec * (__int64) POW10_7 + tp->tv_nsec / 100 + DELTA_EPOCH_IN_100NS;
#    if (FileTimeToSystemTime(&t.ft, &st) == 0)
#        return lc_set_errno(EINVAL);
#
#    if (SetSystemTime(&st) == 0)
#        return lc_set_errno(EPERM);
#
#    return 0;
#}
#EOF
#cat > mingw-w64-crt/time/nanosleep.c << EOF
#/**
# * This file has no copyright assigned and is placed in the Public Domain.
# * This file is part of the w64 mingw-runtime package.
# * No warranty is given; refer to the file DISCLAIMER.PD within this package.
# */
#
##include <errno.h>
##include <time.h>
##include <windows.h>
##include "pthread.h"
##include "pthread_time.h"
#
##define POW10_3                 1000
##define POW10_4                 10000
##define POW10_6                 1000000
##define POW10_9                 1000000000
##define MAX_SLEEP_IN_MS         4294967294UL
#
#/**
# * Sleep for the specified time.
# * @param  request The desired amount of time to sleep.
# * @param  remain The remain amount of time to sleep.
# * @return If the function succeeds, the return value is 0.
# *         If the function fails, the return value is -1,
# *         with errno set to indicate the error.
# */
#int nanosleep(const struct timespec *request, struct timespec *remain)
#{
#    unsigned long ms, rc = 0;
#    unsigned __int64 u64, want, real;
#
#    union {
#        unsigned __int64 ns100;
#        FILETIME ft;
#    }  _start, _end;
#
#    if (request->tv_sec < 0 || request->tv_nsec < 0 || request->tv_nsec >= POW10_9) {
#        errno = EINVAL;
#        return -1;
#    }
#
#    if (remain != NULL) GetSystemTimeAsFileTime(&_start.ft);
#
#    want = u64 = request->tv_sec * POW10_3 + request->tv_nsec / POW10_6;
#    while (u64 > 0 && rc == 0) {
#        if (u64 >= MAX_SLEEP_IN_MS) ms = MAX_SLEEP_IN_MS;
#        else ms = (unsigned long) u64;
#
#        u64 -= ms;
#        rc = SleepEx(ms, TRUE);
#    }
#
#    if (rc != 0) { /* WAIT_IO_COMPLETION (192) */
#        if (remain != NULL) {
#            GetSystemTimeAsFileTime(&_end.ft);
#            real = (_end.ns100 - _start.ns100) / POW10_4;
#
#            if (real >= want) u64 = 0;
#            else u64 = want - real;
#
#            remain->tv_sec = u64 / POW10_3;
#            remain->tv_nsec = (long) (u64 % POW10_3) * POW10_6;
#        }
#
#        errno = EINTR;
#        return -1;
#    }
#
#    return 0;
#}
#EOF
# copy sources
mkdir -p $INSTALLPREFIX/src/mingw-w64 &&
cp -rf * $INSTALLPREFIX/src/mingw-w64/
## fix __rdtsc() issue where using GCC 11 or higher in mingw-w64-crt/intrincs/rdtsc.c (version >= 8.0.0 <= 8.0.2)
#patch -ulbf mingw-w64-crt/intrincs/rdtsc.c << EOF
#@@ -14,3 +14,3 @@
# #if !__has_builtin(__rdtsc)
#-unsigned __int64 __rdtsc(void)
#+unsigned __int64 __rdtsc()
# {
#EOF
## fix version number (version = 8.0.2)
#if [ "$VERSION" == "8.0.2" ]; then
# sed -i.bak -e "s/\(#define __MINGW64_VERSION_BUGFIX \)0/\12/" mingw-w64-headers/crt/_mingw_mac.h
#fi
## fix mingw-w64-headers/crt/setjmp.h (version >= 9.0.0)
#if [ "0$USE_UCRT" -eq 0 ]; then 
#patch -ulbf mingw-w64-headers/crt/setjmp.h << EOF
#@@ -214,3 +214,3 @@
# #    ifdef _WIN64
#-#      define _setjmp __intrinsic_setjmpex
#+#      define _setjmp __intrinsic_setjmp
# #    else
#EOF
#fi
wl-showstatus configure &&
 #mkdir -p m4 &&
 #autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal &&
 mkdir -p build &&
 cd build &&
 #../configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --without-crt --with-libraries=libmangle --with-tools=all LDFLAGS="-Wl,-no-undefined" &&
 #../configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-libraries=libmangle --with-tools=all LDFLAGS="-Wl,-no-undefined" &&
 #../configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-libraries=all --with-tools=all LDFLAGS="-Wl,-no-undefined" &&
 #../configure --prefix=$INSTALLPREFIX/share/mingw-w64 --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-libraries=all --with-tools=all LDFLAGS="-Wl,-no-undefined" &&
 #../configure --prefix=$INSTALLPREFIX/share/mingw-w64 --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-libraries=all --with-tools=all --enable-sdk=all --enable-secure-api --enable-wildcard --enable-lib$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi)  --disable-lib$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 32; else echo 64; fi) LDFLAGS="-Wl,-no-undefined" &&
 #../configure --prefix=$INSTALLPREFIX/share/mingw-w64 --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-libraries=all --with-tools=all --enable-sdk=all --enable-secure-api --enable-wildcard --enable-lib$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi)  --disable-lib$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 32; else echo 64; fi) CFLAGS="-fcommon" LDFLAGS="-Wl,-no-undefined" &&
 #../configure --prefix=$INSTALLPREFIX/share/mingw-w64 --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-libraries=all --with-tools=all --enable-sdk=all --enable-secure-api --enable-wildcard --enable-lib$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi)  --disable-lib$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 32; else echo 64; fi) CFLAGS="-fcommon $(gcc --help -v 2>/dev/null|grep -q " -Wexpansion-to-defined" && echo "-Wno-expansion-to-defined")" LDFLAGS="-Wl,-no-undefined" &&
 #../configure --prefix=$INSTALLPREFIX/share/mingw-w64 --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-libraries=all --with-tools=all --enable-sdk=all --enable-secure-api --enable-wildcard --enable-lib$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) --disable-lib$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 32; else echo 64; fi) --disable-libarm32 --disable-libarm64 CFLAGS="-fcommon $(gcc --help -v 2>/dev/null|grep -q " -Wexpansion-to-defined" && echo "-Wno-expansion-to-defined")" LDFLAGS="-Wl,-no-undefined" &&
 #../configure --prefix=$INSTALLPREFIX/share/mingw-w64 --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrt"; else echo "msvcrt-os"; fi) --with-libraries=all --with-tools=all --enable-sdk=all --enable-secure-api --enable-wildcard --enable-lib$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) --disable-lib$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 32; else echo 64; fi) --disable-libarm32 --disable-libarm64 CFLAGS="-fcommon $(gcc --help -v 2>/dev/null|grep -q " -Wexpansion-to-defined" && echo "-Wno-expansion-to-defined")" LDFLAGS="-Wl,-no-undefined" &&
 #../configure --prefix=$INSTALLPREFIX/share/mingw-w64 --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrt"; else echo "msvcrt-os"; fi) --with-libraries=all --with-tools=all --enable-sdk=all --enable-secure-api --enable-wildcard --enable-lib$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) --disable-lib$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 32; else echo 64; fi) --disable-libarm32 --disable-libarm64 --enable-idl CFLAGS="-fcommon $(gcc --help -v 2>/dev/null|grep -q " -Wexpansion-to-defined" && echo "-Wno-expansion-to-defined")" LDFLAGS="-Wl,-no-undefined" &&
 #../configure --prefix=$INSTALLPREFIX/share/mingw-w64 --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrtbase"; else echo "msvcrt-os"; fi) --with-libraries=all --with-tools=all --enable-sdk=all --enable-secure-api --enable-wildcard --enable-lib$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) --disable-lib$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 32; else echo 64; fi) --disable-libarm32 --disable-libarm64 --enable-idl CFLAGS="-fcommon $(gcc --help -v 2>/dev/null|grep -q " -Wexpansion-to-defined" && echo "-Wno-expansion-to-defined")" LDFLAGS="-Wl,-no-undefined" &&
 #../configure --prefix=$INSTALLPREFIX/share/mingw-w64 --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrtbase"; else echo "msvcrt-os"; fi) --with-default-win32-winnt=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "0x0601"; else echo "0x0501"; fi) --with-libraries=all --with-tools=all --enable-sdk=all --enable-secure-api --enable-wildcard --enable-lib$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) --disable-lib$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 32; else echo 64; fi) --disable-libarm32 --disable-libarm64 --enable-idl CFLAGS="-fcommon $(gcc --help -v 2>/dev/null|grep -q " -Wexpansion-to-defined" && echo "-Wno-expansion-to-defined")" LDFLAGS="-Wl,-no-undefined" &&
 #../configure --prefix=$INSTALLPREFIX/share/mingw-w64 --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrtbase"; else echo "msvcrt-os"; fi) --with-default-win32-winnt=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "0x0601"; else echo "0x0501"; fi) --with-libraries=all --with-tools=all --enable-sdk=all --enable-secure-api --enable-wildcard --$(if echo $RUNPLATFORM | grep -q "^i.86"; then echo "enable"; else echo "disable"; fi)-lib32 --$(if echo $RUNPLATFORM | grep -q "^x86_64"; then echo "enable"; else echo "disable"; fi)-lib64 --$(if echo $RUNPLATFORM | grep -q "^arm"; then echo "enable"; else echo "disable"; fi)-libarm32 --$(if echo $RUNPLATFORM | grep -q "^aarch"; then echo "enable"; else echo "disable"; fi)-libarm64 --enable-idl CFLAGS="-fcommon $(gcc --help -v 2>/dev/null|grep -q " -Wexpansion-to-defined" && echo "-Wno-expansion-to-defined")" LDFLAGS="-Wl,-no-undefined" &&
 ../configure --prefix=$INSTALLPREFIX/share/mingw-w64 --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrt"; else echo "msvcrt"; fi) --with-default-win32-winnt=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "0x0601"; else echo "0x0501"; fi) --with-libraries=all --with-tools=all --enable-sdk=all --enable-secure-api --enable-wildcard --$(if echo $RUNPLATFORM | grep -q "^i.86"; then echo "enable"; else echo "disable"; fi)-lib32 --$(if echo $RUNPLATFORM | grep -q "^x86_64"; then echo "enable"; else echo "disable"; fi)-lib64 --$(if echo $RUNPLATFORM | grep -q "^arm"; then echo "enable"; else echo "disable"; fi)-libarm32 --$(if echo $RUNPLATFORM | grep -q "^aarch"; then echo "enable"; else echo "disable"; fi)-libarm64 --enable-idl CFLAGS="-fcommon $(gcc --help -v 2>/dev/null|grep -q " -Wexpansion-to-defined" && echo "-Wno-expansion-to-defined")" LDFLAGS="-Wl,-no-undefined" &&
 #--with-libraries=libmangle,winpthreads 
 #--with-libraries=libmangle,winpthreads,winstorecompat 
 #-DUSE_NO_MINGW_SETJMP_TWO_ARGS 
 #Windows XP: --with-default-win32-winnt=0x0501
 #Windows 7: --with-default-win32-winnt=0x0601
 cd .. &&
 if [ ! -f mingw-w64-tools/widl/Makefile ]; then
  mkdir -p build_widl &&
  cd build_widl &&
  #../mingw-w64-tools/widl/configure --prefix=$INSTALLPREFIX/share/mingw-w64 --build=$BUILDPLATFORM --host=$RUNPLATFORM &&
  ../mingw-w64-tools/widl/configure --prefix=$INSTALLPREFIX/share/mingw-w64 --build=$BUILDPLATFORM --host=$RUNPLATFORM CFLAGS="$(gcc --help -v 2>/dev/null|grep -q " -Wexpansion-to-defined" && echo "-Wno-expansion-to-defined")" LDFLAGS="-Wl,-no-undefined" &&
  cd ..
 fi &&
 if [ ! -f mingw-w64-libraries/winstorecompat/Makefile ]; then
  mkdir -p build_winstorecompat &&
  cd build_winstorecompat &&
  #../mingw-w64-libraries/winstorecompat/configure --prefix=$INSTALLPREFIX/share/mingw-w64 --build=$BUILDPLATFORM --host=$RUNPLATFORM &&
  ../mingw-w64-libraries/winstorecompat/configure --prefix=$INSTALLPREFIX/share/mingw-w64 --build=$BUILDPLATFORM --host=$RUNPLATFORM CFLAGS="$(gcc --help -v 2>/dev/null|grep -q " -Wexpansion-to-defined" && echo "-Wno-expansion-to-defined")" LDFLAGS="-Wl,-no-undefined" &&
  cd ..
 fi &&
 ## fix link issues when using LLVM/CLang
 #sed -i.bak -e "s?\(-o \)\([^ ]*\)\(.*\) -link \(-dll\)?-shared -s -mwindows \1.libs/libwinpthread-1.dll -Wl,--out-implib,\2 \3 \4?" build/mingw-w64-libraries/winpthreads/libtool &&
 #sed -i.bak -e "s?\$(AM_V_CCLD).*\$(libwinpthread_la_OBJECTS).*?& \&\& \$(AR) \$(ARFLAGS) .libs/libwinpthread.a \$(libwinpthread_la_OBJECTS:.lo=.o) \&\& cp -f .libs/libwinpthread.a .libs/libwinpthread.lib?" build/mingw-w64-libraries/winpthreads/Makefile &&
 wl-showstatus build-install &&
 ( make -Cbuild install-strip || make -j1 -Cbuild install-strip ) &&
 #AR=ar AS=as
 #sed -i.bak -e "s/-link //" build/mingw-w64-libraries/winpthreads/libtool &&
 ## fix issue with llvm-rc when using LLVM/CLang
 #make -Cbuild install-strip RC=llvm-windres.exe &&
 if [ ! -f mingw-w64-tools/widl/Makefile ]; then
  make -Cbuild_widl install-strip
 fi &&
 if [ ! -f mingw-w64-libraries/winstorecompat/Makefile ]; then
  wl-showstatus build-install &&
  #make -Cbuild_winstorecompat install-strip
  make -Cbuild_winstorecompat install-strip || true
 fi &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && rm -rf mingw-w64-v$VERSION
#### bug reported here: https://sourceforge.net/p/mingw-w64/bugs/951/ - typo in include/gdiplus/gdiplusbrush.h: RotateTranform



#export RUNPLATFORM=x86_64-w64ucrt-mingw32
#export RUNPLATFORM=i686-w64ucrt-mingw32
#--default-msvcrt=$(if ( echo $RUNPLATFORM | grep -q "-ucrt" ); then echo "msvcrt-os"; else echo "msvcrt-os"; fi)
#--default-msvcrt=msvcrt-os
#--enable-idl
#--enable-delay-import-libs #### avoid delayed import DLLs because of possible rebasing overhead issues and missing DLLs not being reported at startup (causing unhandled exception)

#--default-msvcrt=??ucrt?? --disable-crt #### for UCRT builds
#### Recent change adds: libwinstorecompat.a + libwindowsappcompat.a
#### bug reported (errors building winstorecompat in version 9.0.0): https://sourceforge.net/p/mingw-w64/bugs/898/
####TO DO: --with-default-msvcrt=ucrt -> MINGW_PACKAGE_PREFIX=mingw-w64-ucrt-x86_64

#### i686-w64-windows-gnu / x86_64-w64-windows-gnu









# avoid error: undefined symbol: __chkstk in mingw-w64-crt/crt/pseudo-reloc.c (version >= 10.0.0)
####see also: https://spclgitlab.ethz.ch/open-climate-compiler/llvm-project/-/blob/370bdd3a0f12629789d3b18b4bea178ee5cf2a23/compiler-rt/lib/builtins/aarch64/chkstk.S
#patch -ulbf mingw-w64-crt/crt/pseudo-reloc.c << EOF
#@@ -518,3 +486,3 @@
#   static NO_COPY int was_init = 0;
#-#ifdef __MINGW64_VERSION_MAJOR
#+#if defined(__MINGW64_VERSION_MAJOR) && !(defined(__ARM_ARCH) || defined(__aarch64__))
#   int mSecs;
#@@ -525,3 +493,3 @@
#   ++was_init;
#-#ifdef __MINGW64_VERSION_MAJOR
#+#if defined(__MINGW64_VERSION_MAJOR) && !(defined(__ARM_ARCH) || defined(__aarch64__))
#   mSecs = __mingw_GetSectionCount ();
#@@ -539,3 +507,3 @@
#                   );
#-#ifdef __MINGW64_VERSION_MAJOR
#+#if defined(__MINGW64_VERSION_MAJOR) && !(defined(__ARM_ARCH) || defined(__aarch64__))
#   restore_modified_sections ();
#EOF
mv mingw-w64-crt/crt/pseudo-reloc.c mingw-w64-crt/crt/pseudo-reloc.c.bak &&
cat > mingw-w64-crt/crt/pseudo-reloc.c << EOF
#if defined(__clang__) && (defined(__ARM_ARCH) || defined(__aarch64__))
void __chkstk ()
{
}
#endif
EOF
cat mingw-w64-crt/crt/pseudo-reloc.c.bak >> mingw-w64-crt/crt/pseudo-reloc.c
# fix mingw-w64-libraries/winpthreads/src/thread.c (version >= 10.0.0)
####mingw-w64-libraries/winpthreads/src/thread.c:1525:5: error: a handler attribute must begin with '@' or '%'
patch -ulbf mingw-w64-libraries/winpthreads/src/thread.c << EOF
@@ -1522,3 +1522,3 @@
       /* Provide to this thread a default exception handler.  */
-      #ifdef __SEH__
+      #if defined(__SEH__) && !(defined(__ARM_ARCH))
        asm ("\\t.tl_start:\\n"
@@ -1534,3 +1534,3 @@
         trslt = (intptr_t) tv->func(tv->ret_arg);
-      #ifdef __SEH__
+      #if defined(__SEH__) && !(defined(__ARM_ARCH))
        asm ("\\tnop\\n\\t.tl_end: nop\\n");
EOF
# force lib as library folder (avoiding lib32/lib64/libarm32/libarm64)
sed -i.bak "s/\(suffx=lib\)[^ ]*/\1/" mingw-w64-crt/configure
#archlist="x86_64 i686 aarch64 armv7" &&
archlist="x86_64 i686 aarch64" &&
 # build MinGW-w64 headers
 mkdir -p build_mingw_w64-headers &&
 wl-showstatus configure &&
 cd build_mingw_w64-headers &&
 ../mingw-w64-headers/configure --prefix=$INSTALLPREFIX/share/mingw-w64 \
  --build=$BUILDPLATFORM \
  --host=$RUNPLATFORM \
  --with-default-win32-winnt=$(if ( echo $RUNPLATFORM | grep -q i686 ); then echo "0x0501"; else echo "0x0601"; fi) \
  --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrtbase"; else echo "msvcrt-os"; fi) \
  --enable-sdk=all \
  --enable-idl \
  &&
 cd .. &&
 wl-showstatus build-install &&
 make -Cbuild_mingw_w64-headers install-strip &&
 # build MinGW-w64 libraries
 for arch in $archlist; do
  mkdir -p build_mingw-w64_$arch &&
  wl-showstatus configure $arch &&
  cd build_mingw-w64_$arch &&
  # --without-libraries \
  # --without-tools \
  #
  # --with-libraries=all \
  # --with-tools=all \
  #
   #../configure --prefix=$INSTALLPREFIX/share/mingw-w64 --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrtbase"; else echo "msvcrt-os"; fi) --with-default-win32-winnt=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "0x0601"; else echo "0x0501"; fi) \
   #--with-libraries=all --with-tools=all --enable-sdk=all --enable-secure-api --enable-wildcard --enable-lib$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) --disable-lib$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 32; else echo 64; fi) --disable-libarm32 --disable-libarm64 --enable-idl CFLAGS="-fcommon $(gcc --help -v 2>/dev/null|grep -q " -Wexpansion-to-defined" && echo "-Wno-expansion-to-defined")" LDFLAGS="-Wl,-no-undefined" &&
   PATH=$MINGWPREFIX/share/binutils/bin:$PATH \
   ../configure --prefix=$INSTALLPREFIX/share/mingw-w64/$arch-w64-mingw32 --includedir=$INSTALLPREFIX/share/mingw-w64/include \
   --build=$BUILDPLATFORM \
   --host=$RUNPLATFORM \
   --with-default-win32-winnt=$(if ( echo $RUNPLATFORM | grep -q i686 ); then echo "0x0501"; else echo "0x0601"; fi) \
   --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrtbase"; else echo "msvcrt-os"; fi) \
   --without-headers \
   --with-libraries=winpthreads \
   --without-tools \
   --enable-sdk=all \
   --enable-secure-api \
   --enable-wildcard \
   --$(if [ "$arch" == "i686" ]; then echo "enable"; else echo "disable"; fi)-lib32 \
   --$(if [ "$arch" == "x86_64" ]; then echo "enable"; else echo "disable"; fi)-lib64 \
   --$(if [ "$arch" == "armv7" ]; then echo "enable"; else echo "disable"; fi)-libarm32 \
   --$(if [ "$arch" == "aarch64" ]; then echo "enable"; else echo "disable"; fi)-libarm64 \
   --with-default-win32-winnt=$(if ( echo $RUNPLATFORM | grep -q i686 ); then echo "0x0501"; else echo "0x0601"; fi) \
   --enable-idl \
   --without-genlib \
   CC="$MINGWPREFIX/share/llvm/bin/clang.exe --target=$arch-w64-windows-gnu -fuse-ld=lld" \
   CXX="$MINGWPREFIX/share/llvm/bin/clang++.exe --target=$arch-w64-windows-gnu" \
   AS="$MINGWPREFIX/share/llvm/bin/llvm-as.exe" \
   AR="$MINGWPREFIX/share/llvm/bin/llvm-ar.exe" \
   RANLIB="$MINGWPREFIX/share/llvm/bin/llvm-ranlib.exe" \
   LD="$MINGWPREFIX/share/llvm/bin/ld.lld.exe" \
   RC="$MINGWPREFIX/share/llvm/bin/llvm-windres.exe --target=$arch-w64-windows-gnu -I$INSTALLPREFIX/share/mingw-w64/include" \
   DLLTOOL="$MINGWPREFIX/share/llvm/bin/llvm-dlltool.exe -m $(if [ "$arch" == "x86_64" ]; then echo "i386:"; fi)$(if [ "$arch" == "aarch64" ]; then echo "arm64"; else echo "$arch"; fi)" \
   STRIP="$MINGWPREFIX/share/llvm/bin/llvm-strip.exe" \
   CFLAGS="-I$INSTALLPREFIX/share/mingw-w64/include" \
   LDFLAGS="-L$INSTALLPREFIX/share/mingw-w64/$arch-w64-mingw32/lib" \
   &&
  cd .. &&
  wl-showstatus build-install $arch &&
  #make -Cbuild_mingw-w64_$arch install-strip &&
  #make -Cbuild_mingw-w64_$arch/mingw-w64-crt install-strip &&
  #( make -Cbuild_mingw-w64_$arch || (
  # mv -f mingw-w64-crt/crt/pseudo-reloc.c mingw-w64-crt/crt/pseudo-reloc.c.orig &&
  # mv -f mingw-w64-crt/crt/pseudo-reloc.c.changed mingw-w64-crt/crt/pseudo-reloc.c &&
  # make -Cbuild_mingw-w64_$arch
  # mv -f mingw-w64-crt/crt/pseudo-reloc.c mingw-w64-crt/crt/pseudo-reloc.c.changed &&
  # mv -f mingw-w64-crt/crt/pseudo-reloc.c.orig mingw-w64-crt/crt/pseudo-reloc.c &&
  # touch mingw-w64-crt/crt/pseudo-reloc.c &&
  # make -Cbuild_mingw-w64_$arch
  #)) &&
  make -Cbuild_mingw-w64_$arch install-strip &&
  #make -Cbuild_mingw-w64_$arch install-strip DLLTOOLFLAGSARM64= &&
  #make -Cbuild_mingw-w64_$arch install-strip CFLAGS="$(if [ "$arch" == "armv7" ] || [ "$arch" == "aarch64" ]; then echo "-femulated-tls"; fi)" &&
  #( ls -1d $INSTALLPREFIX/share/mingw-w64/$arch-w64-mingw32/lib || mv -f $INSTALLPREFIX/share/mingw-w64/$arch-w64-mingw32/lib* $INSTALLPREFIX/share/mingw-w64/$arch-w64-mingw32/lib ) &> /dev/null &&
  touch SUCCESS_MAIN_$arch || break
 done &&
 if [ $(ls -1 SUCCESS_MAIN_*|wc -l) -ne $(echo $archlist|wc -w) ]; then false; fi &&
    echo OK
 #wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && rm -rf mingw-w64-v$VERSION



 for arch in $archlist; do
  mkdir -p build_mingw-w64_widl_$arch &&
  cd build_mingw-w64_widl_$arch &&
  ../mingw-w64-tools/widl/configure --prefix=$INSTALLPREFIX/share/mingw-w64 \
  --build=$BUILDPLATFORM \
  --host=$RUNPLATFORM \
  CC="$MINGWPREFIX/share/llvm/bin/clang.exe --target=$arch-w64-windows-gnu -fuse-ld=lld" \
  CXX="$MINGWPREFIX/share/llvm/bin/clang++.exe --target=$arch-w64-windows-gnu" \
  AS="$MINGWPREFIX/share/llvm/bin/llvm-as.exe" \
  AR="$MINGWPREFIX/share/llvm/bin/llvm-ar.exe" \
  RANLIB="$MINGWPREFIX/share/llvm/bin/llvm-ranlib.exe" \
  LD="$MINGWPREFIX/share/llvm/bin/ld.lld.exe" \
  RC="$MINGWPREFIX/share/llvm/bin/llvm-windres.exe --target=$arch-w64-windows-gnu -I$INSTALLPREFIX/share/mingw-w64/include" \
  DLLTOOL="$MINGWPREFIX/share/llvm/bin/llvm-dlltool.exe -m $(if [ "$arch" == "x86_64" ]; then echo "i386:"; fi)$(if [ "$arch" == "aarch64" ]; then echo "arm64"; else echo "$arch"; fi)" \
  STRIP="$MINGWPREFIX/share/llvm/bin/llvm-strip.exe" \
  CFLAGS="-I$INSTALLPREFIX/share/mingw-w64/include" \
  LDFLAGS="-L$INSTALLPREFIX/share/mingw-w64/$arch-w64-mingw32/lib" \
  &&
  cd .. &&
  wl-showstatus build-install $arch &&
  make -Cbuild_mingw-w64_widl_$arch install-strip &&
  touch SUCCESS_WIDL_$arch || break
 done &&
 for arch in $archlist; do
  mkdir -p build_mingw-w64_winstorecompat_$arch &&
  cd build_mingw-w64_winstorecompat_$arch &&
  ../mingw-w64-tools/widl/configure --prefix=$INSTALLPREFIX/share/mingw-w64 \
  --build=$BUILDPLATFORM \
  --host=$RUNPLATFORM \
  CC="$MINGWPREFIX/share/llvm/bin/clang.exe --target=$arch-w64-windows-gnu -fuse-ld=lld" \
  CXX="$MINGWPREFIX/share/llvm/bin/clang++.exe --target=$arch-w64-windows-gnu" \
  AS="$MINGWPREFIX/share/llvm/bin/llvm-as.exe" \
  AR="$MINGWPREFIX/share/llvm/bin/llvm-ar.exe" \
  RANLIB="$MINGWPREFIX/share/llvm/bin/llvm-ranlib.exe" \
  LD="$MINGWPREFIX/share/llvm/bin/ld.lld.exe" \
  RC="$MINGWPREFIX/share/llvm/bin/llvm-windres.exe --target=$arch-w64-windows-gnu -I$INSTALLPREFIX/share/mingw-w64/include" \
  DLLTOOL="$MINGWPREFIX/share/llvm/bin/llvm-dlltool.exe -m $(if [ "$arch" == "x86_64" ]; then echo "i386:"; fi)$(if [ "$arch" == "aarch64" ]; then echo "arm64"; else echo "$arch"; fi)" \
  STRIP="$MINGWPREFIX/share/llvm/bin/llvm-strip.exe" \
  CFLAGS="-I$INSTALLPREFIX/share/mingw-w64/include" \
  LDFLAGS="-L$INSTALLPREFIX/share/mingw-w64/$arch-w64-mingw32/lib" \
  &&
  cd .. &&
  wl-showstatus build-install $arch &&
  make -Cbuild_mingw-w64_winstorecompat_$arch install-strip &&
  touch SUCCESS_WINSTORECOMPAT_$arch || break
 fi &&
    echo OK

























# avoid error: undefined symbol: __chkstk in mingw-w64-crt/crt/pseudo-reloc.c (version >= 10.0.0)
patch -ulbf mingw-w64-crt/crt/pseudo-reloc.c << EOF
@@ -493,3 +493,3 @@
   ++was_init;
-#ifdef __MINGW64_VERSION_MAJOR
+#if defined(__MINGW64_VERSION_MAJOR) && !(defined(__ARM_ARCH) || defined(__aarch64__))
   mSecs = __mingw_GetSectionCount ();
EOF
## fix mingw-w64-libraries/winpthreads/src/thread.c (version >= 10.0.0)
#####mingw-w64-libraries/winpthreads/src/thread.c:1525:5: error: a handler attribute must begin with '@' or '%'
#patch -ulbf mingw-w64-libraries/winpthreads/src/thread.c << EOF
#@@ -1522,3 +1522,3 @@
#       /* Provide to this thread a default exception handler.  */
#-      #ifdef __SEH__
#+      #if defined(__SEH__) && !(defined(__ARM_ARCH))
#        asm ("\\t.tl_start:\\n"
#@@ -1534,3 +1534,3 @@
#         trslt = (intptr_t) tv->func(tv->ret_arg);
#-      #ifdef __SEH__
#+      #if defined(__SEH__) && !(defined(__ARM_ARCH))
#        asm ("\\tnop\\n\\t.tl_end: nop\\n");
#EOF
# force lib as library folder (avoiding lib32/lib64/libarm32/libarm64)
sed -i.bak "s/\(suffx=lib\)[^ ]*/\1/" mingw-w64-crt/configure
## avoid issue determining ar interface
#sed -i.bak -e "s/\(am_cv_ar_interface=\)unknown/\1ar/" ../mingw-w64-crt/configure
archlist="x86_64 i686 aarch64 armv7" &&
 # build MinGW-w64 headers
 mkdir -p build_mingw_w64-headers &&
 wl-showstatus configure &&
 cd build_mingw_w64-headers &&
 ../mingw-w64-headers/configure --prefix=$INSTALLPREFIX/share/mingw-w64 \
  --build=$BUILDPLATFORM \
  --host=$RUNPLATFORM \
  --with-default-win32-winnt=$(if ( echo $RUNPLATFORM | grep -q i686 ); then echo "0x0501"; else echo "0x0601"; fi) \
  --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrtbase"; else echo "msvcrt-os"; fi) \
  --enable-sdk=all \
  --enable-idl \
  &&
 cd .. &&
 wl-showstatus build-install &&
 make -Cbuild_mingw_w64-headers install-strip &&
 # build MinGW-w64 libraries
 for arch in $archlist; do
  mkdir -p build_mingw_w64_main_$arch &&
  wl-showstatus configure $arch &&
  cd build_mingw_w64_main_$arch &&
  # --without-libraries \
  # --without-tools \
  #
  # --with-libraries=all \
  # --with-tools=all \
  #
  # STRIP="$MINGWPREFIX/share/llvm/bin/llvm-strip.exe" \
  #
  PATH=$MINGWPREFIX/share/binutils/bin:$PATH \
   ../configure --prefix=$INSTALLPREFIX/share/mingw-w64/$arch-w64-mingw32 \
   --build=$BUILDPLATFORM \
   --host=$RUNPLATFORM \
   --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrtbase"; else echo "msvcrt-os"; fi) \
   --without-headers \
   --without-libraries \
   --without-tools \
   --enable-sdk=all \
   --enable-secure-api \
   --enable-wildcard \
   --$(if [ "$arch" == "i686" ]; then echo "enable"; else echo "disable"; fi)-lib32 \
   --$(if [ "$arch" == "x86_64" ]; then echo "enable"; else echo "disable"; fi)-lib64 \
   --$(if [ "$arch" == "armv7" ]; then echo "enable"; else echo "disable"; fi)-libarm32 \
   --$(if [ "$arch" == "aarch64" ]; then echo "enable"; else echo "disable"; fi)-libarm64 \
   --with-default-win32-winnt=$(if ( echo $RUNPLATFORM | grep -q i686 ); then echo "0x0501"; else echo "0x0601"; fi) \
   --enable-idl \
   --without-genlib \
   CC="$MINGWPREFIX/share/llvm/bin/clang.exe --target=$arch-w64-windows-gnu -fuse-ld=lld" \
   CXX="$MINGWPREFIX/share/llvm/bin/clang++.exe --target=$arch-w64-windows-gnu" \
   AS="$MINGWPREFIX/share/llvm/bin/llvm-as.exe" \
   AR="$MINGWPREFIX/share/llvm/bin/llvm-ar.exe" \
   RANLIB="$MINGWPREFIX/share/llvm/bin/llvm-ranlib.exe" \
   LD="$MINGWPREFIX/share/llvm/bin/ld.lld.exe" \
   RC="$MINGWPREFIX/share/llvm/bin/llvm-windres.exe" \
   DLLTOOL="$MINGWPREFIX/share/llvm/bin/llvm-dlltool.exe -m $(if [ "$arch" == "x86_64" ]; then echo "i386:"; fi)$(if [ "$arch" == "aarch64" ]; then echo "arm64"; else echo "$arch"; fi)" \
   STRIP="$MINGWPREFIX/share/llvm/bin/llvm-strip.exe" \
   CFLAGS="-I$INSTALLPREFIX/share/mingw-w64/include" \
   &&
  cd .. &&
  #wl-showstatus build $arch &&
  #( make -Cbuild_mingw_w64_main_$arch || make -Cbuild_mingw_w64_main_$arch CC="$PWD/cross/bin/clang.exe -fuse-ld=lld -fno-integrated-as" ) &&
  wl-showstatus build-install $arch &&
  #make -Cbuild_mingw_w64_main_$arch/mingw-w64-headers install-strip &&
  #make -Cbuild_mingw_w64_main_$arch/mingw-w64-crt install-libarm32LIBRARIES CFLAGS="-target armv7-w64-mingw32 -march=armv7-a -mtune=armv7-a+vfpv4+neon+thumb2 -D__arm__" CCASFLAGS="-target armv7-w64-mingw32 -march=armv7-a -mtune=armv7-a+vfpv4+neon+thumb2" &&
  #make -Cbuild_mingw_w64_main_$arch/mingw-w64-crt install-libarm64LIBRARIES CFLAGS="-target aarch64-w64-mingw32 -mtune=cortex-a57 -D__aarch64__" CCASFLAGS="-target aarch64-w64-mingw32 -mtune=cortex-a57" &&
  #make -Cbuild_mingw_w64_main_$arch/mingw-w64-crt install-strip &&
  make -Cbuild_mingw_w64_main_$arch install-strip &&
  #make -Cbuild_mingw_w64_main_$arch install-strip DLLTOOLFLAGSARM64= &&
  #make -Cbuild_mingw_w64_main_$arch install-strip CFLAGS="$(if [ "$arch" == "armv7" ] || [ "$arch" == "aarch64" ]; then echo "-femulated-tls"; fi)" &&
  #( ls -1d $INSTALLPREFIX/share/mingw-w64/$arch-w64-mingw32/lib || mv -f $INSTALLPREFIX/share/mingw-w64/$arch-w64-mingw32/lib* $INSTALLPREFIX/share/mingw-w64/$arch-w64-mingw32/lib ) &> /dev/null &&
  touch SUCCESS_MAIN_$arch || break
 done &&
 if [ $(ls -1 SUCCESS_MAIN_*|wc -l) -ne $(echo $archlist|wc -w) ]; then false; fi &&
 rm -f SUCCESS_MAIN_* &&
 # build MinGW-w64 winpthreads
 for arch in $archlist; do
  mkdir -p build_mingw_w64_winpthreads_$arch &&
  cp -u $INSTALLPREFIX/share/mingw-w64/$arch-w64-mingw32/lib/{dllcrt2,crtbegin,crtend}.o build_mingw_w64_winpthreads_$arch/ &&
  wl-showstatus configure $arch &&
  cd build_mingw_w64_winpthreads_$arch &&
  ../mingw-w64-libraries/winpthreads/configure --prefix=$INSTALLPREFIX/share/mingw-w64/$arch-w64-mingw32 \
   --build=$BUILDPLATFORM \
   --host=$arch-w64-mingw32 \
   --with-sysroot=$INSTALLPREFIX/share/mingw-w64/$arch-w64-mingw32 \
   --without-gnu-ld \
   CC="$MINGWPREFIX/share/llvm/bin/clang.exe --target=$arch-w64-windows-gnu -fuse-ld=lld" \
   CXX="$MINGWPREFIX/share/llvm/bin/clang++.exe --target=$arch-w64-windows-gnu" \
   AS="$MINGWPREFIX/share/llvm/bin/llvm-as.exe" \
   AR="$MINGWPREFIX/share/llvm/bin/llvm-ar.exe" \
   RANLIB="$MINGWPREFIX/share/llvm/bin/llvm-ranlib.exe" \
   LD="$MINGWPREFIX/share/llvm/bin/ld.lld.exe" \
   RC="$MINGWPREFIX/share/llvm/bin/llvm-windres.exe --target=$arch-w64-windows-gnu -I$INSTALLPREFIX/share/mingw-w64/include" \
   DLLTOOL="$MINGWPREFIX/share/llvm/bin/llvm-dlltool.exe -m $(if [ "$arch" == "x86_64" ]; then echo "i386:"; fi)$(if [ "$arch" == "aarch64" ]; then echo "arm64"; else echo "$arch"; fi)" \
   STRIP="$MINGWPREFIX/share/llvm/bin/llvm-strip.exe" \
   CFLAGS="-I$INSTALLPREFIX/share/mingw-w64/include" \
   LDFLAGS="-L$INSTALLPREFIX/share/mingw-w64/$arch-w64-mingw32/lib" \
   &&
  cd .. &&
  #-rtlib=compiler-rt -unwindlib=libunwind -stdlib=libc++ 
  #-Wl,-m,$(case $arch in i686) echo "i386pe";; x86_64) echo "i386pep";; armv7) echo "thumb2pe";; aarch64) echo "arm64pe";; esac)
  ## fix detection of shared libraries
  #sed -i.bak2 -e "s/\(deplibs_check_method=\"\)[^\"]*/\1pass_all/" build_mingw_w64_winpthreads_$arch/libtool &&
  ## fix link issues in build_mingw_w64/mingw-w64-libraries/winpthreads/
  #sed -i.bak -e "s?\(-o \)\([^ ]*\)\(.*\) -link \(-dll\)?-shared -s -mwindows \1.libs/libwinpthread-1.dll -Wl,--out-implib,\2 \3 \4?" build_mingw_w64_winpthreads_$arch/libtool &&
  #sed -i.bak -e "s?\$(AM_V_CCLD).*\$(libwinpthread_la_OBJECTS).*?& \&\& \$(AR) \$(ARFLAGS) .libs/libwinpthread.a \$(libwinpthread_la_OBJECTS:.lo=.o) \&\& cp -f .libs/libwinpthread.a .libs/libwinpthread.lib?" build_mingw_w64_winpthreads_$arch/Makefile &&
  wl-showstatus build-install $arch &&
  # build include files and make them available
  #PATH=$PWD/prebuilt/bin:$PATH make -Cbuild_mingw_w64_winpthreads_$arch install-strip &&
  make -Cbuild_mingw_w64_winpthreads_$arch install-strip &&
  #make -Cbuild_mingw_w64_winpthreads_$arch install-strip CFLAGS="$(if [ "$arch" == "armv7" ] || [ "$arch" == "aarch64" ]; then echo "-femulated-tls"; fi)" &&
  #cp -u build_mingw_w64_winpthreads_$arch/fakelib/*.a stage1/$arch-w64-mingw32/lib/ &&
  #mkdir -p stage1/$arch-w64-mingw32 &&
  #cp -rf mingw-w64_winpthreads_$arch/* stage1/$arch-w64-mingw32/ &&
  #mkdir -p stage1/lib/$arch-w64-mingw32 &&
  #cp -rf mingw-w64_winpthreads_$arch/* stage1/lib/$arch-w64-mingw32/ &&
  ##mkdir -p stage1/$arch-w64-windows-gnu/lib &&
  ##cp -rf mingw-w64_winpthreads_$arch/lib/* stage1/$arch-w64-windows-gnu/lib/ &&
  touch SUCCESS_PTHREADS_$arch || break
 done &&
 if [ $(ls -1 SUCCESS_PTHREADS_*|wc -l) -ne $(echo $archlist|wc -w) ]; then false; fi &&
 rm -f SUCCESS_PTHREADS_* &&
    echo OK



# # build MinGW-w64 headers
# for arch in $archlist; do
#  mkdir -p build_mingw_w64-headers-$arch &&
#  wl-showstatus configure &&
#  cd build_mingw_w64-headers-$arch &&
#  PATH=$MINGWPREFIX/share/binutils/bin:$PATH \
#   ../mingw-w64-headers/configure --prefix=$INSTALLPREFIX/share/mingw-w64/$arch-w64-mingw32 --build=$BUILDPLATFORM --host=$arch-w64-mingw32 \
#   --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrt"; else echo "msvcrt-os"; fi) \
#   --enable-sdk=all \
#   --enable-idl \
#   CC="$MINGWPREFIX/share/llvm/bin/clang.exe --target=$arch-w64-windows-gnu" \
#   CXX="$MINGWPREFIX/share/llvm/bin/clang++.exe --target=$arch-w64-windows-gnu" \
#   AS="$MINGWPREFIX/share/llvm/bin/llvm-as.exe" \
#   AR="$MINGWPREFIX/share/llvm/bin/llvm-ar.exe" \
#   RANLIB="$MINGWPREFIX/share/llvm/bin/llvm-ranlib.exe" \
#   DLLTOOL="$MINGWPREFIX/share/llvm/bin/llvm-dlltool.exe -m $(if [ "$arch" == "x86_64" ]; then echo "i386:"; fi)$(if [ "$arch" == "aarch64" ]; then echo "arm64"; else echo "$arch"; fi)" \
#   &&
#  cd .. &&
#  wl-showstatus build &&
#  make -Cbuild_mingw_w64-headers-$arch install-strip
# done

# # build MinGW-w64 crt
# for arch in $archlist; do
#  mkdir -p build_mingw_w64-crt-$arch &&
#  wl-showstatus configure &&
#  cd build_mingw_w64-crt-$arch &&
#  PATH=$MINGWPREFIX/share/binutils/bin:$PATH \
#   ../mingw-w64-crt/configure --prefix=$INSTALLPREFIX/share/mingw-w64/$arch-w64-mingw32 --build=$BUILDPLATFORM --host=$arch-w64-mingw32 \
#   --with-sysroot=$INSTALLPREFIX/share/mingw-w64 \
#   --$(if [ "$arch" == "i686" ]; then echo "enable"; else echo "disable"; fi)-lib32 \
#   --$(if [ "$arch" == "x86_64" ]; then echo "enable"; else echo "disable"; fi)-lib64 \
#   --$(if [ "$arch" == "armv7" ]; then echo "enable"; else echo "disable"; fi)-libarm32 \
#   --$(if [ "$arch" == "aarch64" ]; then echo "enable"; else echo "disable"; fi)-libarm64 \
#   --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrt"; else echo "msvcrt-os"; fi) \
#   --enable-wildcard \
#   CC="$MINGWPREFIX/share/llvm/bin/clang.exe --target=$arch-w64-windows-gnu" \
#   CXX="$MINGWPREFIX/share/llvm/bin/clang++.exe --target=$arch-w64-windows-gnu" \
#   AS="$MINGWPREFIX/share/llvm/bin/llvm-as.exe" \
#   AR="$MINGWPREFIX/share/llvm/bin/llvm-ar.exe" \
#   RANLIB="$MINGWPREFIX/share/llvm/bin/llvm-ranlib.exe" \
#   LD="$MINGWPREFIX/share/llvm/bin/ld.lld.exe" \
#   RC="$MINGWPREFIX/share/llvm/bin/llvm-windres.exe" \
#   DLLTOOL="$MINGWPREFIX/share/llvm/bin/llvm-dlltool.exe -m $(if [ "$arch" == "x86_64" ]; then echo "i386:"; fi)$(if [ "$arch" == "aarch64" ]; then echo "arm64"; else echo "$arch"; fi)" \
#   STRIP="$MINGWPREFIX/share/llvm/bin/llvm-strip.exe" \
#   CFLAGS="-I$INSTALLPREFIX/share/mingw-w64/include" \
#   &&
#  cd .. &&
#  wl-showstatus build &&
#  #DLLTOOLFLAGSARM64= 
#  make -Cbuild_mingw_w64-crt-$arch install-strip &&
#  touch SUCCESS_$arch || break
# done &&
# if [ $(ls -1 SUCCESS_*|wc -l) -ne $(echo $archlist|wc -w) ]; then false; fi &&
# rm -f SUCCESS_* &&
#    echo OK




























#archlist="x86_64 i686 aarch64 armv7"
archlist="x86_64 i686"




#../configure --prefix=$INSTALLPREFIX/share/mingw-w64 --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrtbase"; else echo "msvcrt-os"; fi) --with-default-win32-winnt=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "0x0601"; else echo "0x0501"; fi) --with-libraries=all --with-tools=all --enable-sdk=all --enable-secure-api --enable-wildcard --enable-lib$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) --disable-lib$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 32; else echo 64; fi) --disable-libarm32 --disable-libarm64 --enable-idl CFLAGS="-fcommon $(gcc --help -v 2>/dev/null|grep -q " -Wexpansion-to-defined" && echo "-Wno-expansion-to-defined")" LDFLAGS="-Wl,-no-undefined" &&

 # build MinGW-w64 headers
 mkdir -p build_mingw-w64-headers &&
 wl-showstatus configure &&
 cd build_mingw-w64-headers &&
 ../mingw-w64-headers/configure --prefix=$INSTALLPREFIX/share/mingw-w64 --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrtbase"; else echo "msvcrt-os"; fi) --enable-sdk=all --enable-idl &&
 cd .. &&
 wl-showstatus build-install &&
 make -Cbuild_mingw-w64-headers install-strip &&

 # build MinGW-w64 crt
 for arch in $archlist; do
  mkdir -p build_mingw-w64-crt-$arch &&
  wl-showstatus configure &&
  cd build_mingw-w64-crt-$arch &&
  ../mingw-w64-crt/configure --prefix=$INSTALLPREFIX/share/mingw-w64/$arch-w64-mingw32 --build=$BUILDPLATFORM --host=$arch-w64-mingw32 --$(if [ "$arch" == "i686" ]; then echo "enable"; else echo "disable"; fi)-lib32 --$(if [ "$arch" == "x86_64" ]; then echo "enable"; else echo "disable"; fi)-lib64 --$(if [ "$arch" == "armv7" ]; then echo "enable"; else echo "disable"; fi)-libarm32 --$(if [ "$arch" == "aarch64" ]; then echo "enable"; else echo "disable"; fi)-libarm64 --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrtbase"; else echo "msvcrt-os"; fi) --enable-delay-import-libs --enable-wildcard &&
  cd .. &&
  wl-showstatus build-install &&
  make -Cbuild_mingw-w64-crt-$arch install-strip &&
  #make -Cbuild_mingw-w64-crt-$arch install-strip DLLTOOL=$MINGWPREFIX/share/llvm/bin/llvm-dlltool.exe &&
  touch SUCCESS_CRT_$arch || break
 done &&
 if [ $(ls -1 SUCCESS_CRT_*|wc -l) -ne $(echo $archlist|wc -w) ]; then false; fi &&
 rm -f SUCCESS_CRT_* &&
 
 # build MinGW-w64 winpthreads
 for arch in $archlist; do
  mkdir -p build_mingw-w64_winpthreads_$arch &&
  wl-showstatus configure &&
  cd build_mingw-w64_winpthreads_$arch &&
  ../mingw-w64-libraries/winpthreads/configure --prefix=$INSTALLPREFIX/share/mingw-w64/$arch-w64-mingw32 --build=$BUILDPLATFORM --host=$arch-w64-mingw32 --with-sysroot=$PWD/../stage1 &&
  cd .. &&
  #-rtlib=compiler-rt -unwindlib=libunwind -stdlib=libc++ 
  #-Wl,-m,$(case $arch in i686) echo "i386pe";; x86_64) echo "i386pep";; armv7) echo "thumb2pe";; aarch64) echo "arm64pe";; esac)
  ## fix detection of shared libraries
  #sed -i.bak2 -e "s/\(deplibs_check_method=\"\)[^\"]*/\1pass_all/" build_mingw-w64_winpthreads_$arch/libtool &&
  ## fix link issues in build_mingw-w64/mingw-w64-libraries/winpthreads/
  #sed -i.bak -e "s?\(-o \)\([^ ]*\)\(.*\) -link \(-dll\)?-shared -s -mwindows \1.libs/libwinpthread-1.dll -Wl,--out-implib,\2 \3 \4?" build_mingw-w64_winpthreads_$arch/libtool &&
  #sed -i.bak -e "s?\$(AM_V_CCLD).*\$(libwinpthread_la_OBJECTS).*?& \&\& \$(AR) \$(ARFLAGS) .libs/libwinpthread.a \$(libwinpthread_la_OBJECTS:.lo=.o) \&\& cp -f .libs/libwinpthread.a .libs/libwinpthread.lib?" build_mingw-w64_winpthreads_$arch/Makefile &&
  wl-showstatus build-install &&
  # build include files and make them available
  #PATH=$PWD/prebuilt/bin:$PATH make -Cbuild_mingw-w64_winpthreads_$arch install-strip &&
  make -Cbuild_mingw-w64_winpthreads_$arch install-strip &&
  #make -Cbuild_mingw-w64_winpthreads_$arch install-strip CFLAGS="$(if [ "$arch" == "armv7" ] || [ "$arch" == "aarch64" ]; then echo "-femulated-tls"; fi)" &&
  #cp -u build_mingw-w64_winpthreads_$arch/fakelib/*.a stage1/$arch-w64-mingw32/lib/ &&
  #mkdir -p stage1/$arch-w64-mingw32 &&
  #cp -rf mingw-w64_winpthreads_$arch/* stage1/$arch-w64-mingw32/ &&
  #mkdir -p stage1/lib/$arch-w64-mingw32 &&
  #cp -rf mingw-w64_winpthreads_$arch/* stage1/lib/$arch-w64-mingw32/ &&
  ##mkdir -p stage1/$arch-w64-windows-gnu/lib &&
  ##cp -rf mingw-w64_winpthreads_$arch/lib/* stage1/$arch-w64-windows-gnu/lib/ &&
  touch SUCCESS_PTHREADS_$arch || break
 done &&
 if [ $(ls -1 SUCCESS_PTHREADS_*|wc -l) -ne $(echo $archlist|wc -w) ]; then false; fi &&
 rm -f SUCCESS_PTHREADS_* &&
    echo OK







 # build MinGW-w64 winstorecompat
 for arch in $archlist; do
  mkdir -p build_mingw-w64_winstorecompat_$arch &&
  wl-showstatus configure &&
  cd build_mingw-w64_winstorecompat_$arch &&
  ../mingw-w64-libraries/winstorecompat/configure --prefix=$INSTALLPREFIX/share/mingw-w64/$arch-w64-mingw32 --build=$BUILDPLATFORM --host=$arch-w64-mingw32 &&
  cd .. &&
  wl-showstatus build-install &&
  make -Cbuild_mingw-w64_winstorecompat_$arch install-strip &&
  touch SUCCESS_WINSTORECOMPAT_$arch || break
 done &&
 if [ $(ls -1 SUCCESS_WINSTORECOMPAT_*|wc -l) -ne $(echo $archlist|wc -w) ]; then false; fi &&
 rm -f SUCCESS_WINSTORECOMPAT_* &&
    echo OK

 # build MinGW-w64 libmangle
 for arch in $archlist; do
  mkdir -p build_mingw-w64_libmangle_$arch &&
  wl-showstatus configure &&
  cd build_mingw-w64_libmangle_$arch &&
  ../mingw-w64-libraries/libmangle/configure --prefix=$INSTALLPREFIX/share/mingw-w64/$arch-w64-mingw32 --build=$BUILDPLATFORM --host=$arch-w64-mingw32 &&
  cd .. &&
  wl-showstatus build-install &&
  make -Cbuild_mingw-w64_libmangle_$arch install-strip &&
  touch SUCCESS_LIBMANGLE_$arch || break
 done &&
 if [ $(ls -1 SUCCESS_LIBMANGLE_*|wc -l) -ne $(echo $archlist|wc -w) ]; then false; fi &&
 rm -f SUCCESS_LIBMANGLE_* &&
    echo OK

 # build MinGW-w64 pseh (only x86 32-bit Win32 host variants are supported)
 for arch in i686; do
  mkdir -p build_mingw-w64_pseh_$arch &&
  wl-showstatus configure &&
  cd build_mingw-w64_pseh_$arch &&
  ../mingw-w64-libraries/pseh/configure --prefix=$INSTALLPREFIX/share/mingw-w64/$arch-w64-mingw32 --build=$BUILDPLATFORM --host=$arch-w64-mingw32 &&
  cd .. &&
  wl-showstatus build-install &&
  make -Cbuild_mingw-w64_pseh_$arch install-strip &&
  touch SUCCESS_PSEH_$arch || break
 done &&
 if [ $(ls -1 SUCCESS_PSEH_*|wc -l) -ne 1 ]; then false; fi &&
 rm -f SUCCESS_PSEH_* &&
    echo OK





 # build libcxx for supported platforms
 for arch in $archlist; do
  mkdir -p build_libcxx_$arch &&
  mkdir -p build_libcxx_$arch/fakelib &&
  ar cr build_libcxx_$arch/fakelib/libgcc.a
  ar cr build_libcxx_$arch/fakelib/libgcc_s.a
  ar cr build_libcxx_$arch/fakelib/libgcc_eh.a
  wl-showstatus configure &&
  PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH \
  cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
   -DBUILD_SHARED_LIBS:BOOL=ON \
   -DLIBCXX_ENABLE_SHARED:BOOL=ON \
   -DLIBCXX_ENABLE_STATIC:BOOL=ON \
   -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM \
   -DLLVM_PATH:PATH=$PWD/llvm \
   -DLIBCXX_USE_COMPILER_RT:BOOL=ON \
   -DLIBCXX_HAS_WIN32_THREAD_API:BOOL=ON \
   -DLIBCXX_ENABLE_SHARED:BOOL=ON \
   -DLIBCXX_ENABLE_STATIC:BOOL=ON \
   -DLIBCXX_ENABLE_EXPERIMENTAL_LIBRARY:BOOL=OFF \
   -DLIBCXX_CXX_ABI=libcxxabi \
   -DLIBCXX_CXX_ABI_INCLUDE_PATHS=$PWD/libcxxabi/include \
   -DLIBCXX_CXX_ABI_LIBRARY_PATH:PATH=$PWD/build_libcxxabi/lib \
   -DLIBCXX_LIBDIR_SUFFIX="" \
   -DLIBCXX_INCLUDE_TESTS:BOOL=OFF \
   -DLIBCXX_ENABLE_ABI_LINKER_SCRIPT:BOOL=OFF \
   -DLLVM_MAIN_SRC_DIR:PATH=$PWD/llvm \
   -DLLVM_CONFIG_PATH:PATH=$PWD/stage1/bin/llvm-config.exe \
   \
   -DCMAKE_C_COMPILER_TARGET=$arch-windows-gnu \
   -DCMAKE_CXX_COMPILER_TARGET=$arch-windows-gnu \
   \
   -DCMAKE_ASM_COMPILER:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which clang.exe) \
   -DCMAKE_ASM_COMPILER_AR:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ar.exe) \
   -DCMAKE_ASM_COMPILER_RANLIB:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ranlib.exe) \
   -DCMAKE_C_COMPILER:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which clang.exe) \
   -DCMAKE_C_COMPILER_AR:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ar.exe) \
   -DCMAKE_C_COMPILER_RANLIB:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ranlib.exe) \
   -DCMAKE_CXX_COMPILER:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which clang++.exe) \
   -DCMAKE_CXX_COMPILER_AR:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ar.exe) \
   -DCMAKE_CXX_COMPILER_RANLIB:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ranlib.exe) \
   -DCMAKE_RC_COMPILER:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-windres.exe) \
   -DCMAKE_AR:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ar.exe) \
   -DCMAKE_RANLIB:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ranlib.exe) \
   -DCMAKE_READELF:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-readelf.exe) \
   -DCMAKE_DLLTOOL:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-dlltool.exe) \
   -DCMAKE_NM:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-nm.exe) \
   -DCMAKE_OBJCOPY:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-objcopy.exe) \
   -DCMAKE_OBJDUMP:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-objdump.exe) \
   -DCMAKE_LINKER:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-link.exe) \
   -DCMAKE_STRIP:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-strip.exe) \
   -DGOLD_EXECUTABLE:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which ld.lld.exe) \
   \
   -DCMAKE_C_FLAGS:STRING="-g0 -D_WIN32_WINNT=0x0600 -I$MINGWPREFIX/share/mingw-w64/include -L$(cygpath -m $PWD/build_libcxx_$arch/fakelib) -L$(cygpath -m $MINGWPREFIX/share/mingw-w64/$arch-w64-mingw32/lib)" \
   -DCMAKE_CXX_FLAGS:STRING="-g0 -D_WIN32_WINNT=0x0600 -I$MINGWPREFIX/share/mingw-w64/include -L$(cygpath -m $PWD/build_libcxx_$arch/fakelib) -L$(cygpath -m $MINGWPREFIX/share/mingw-w64/$arch-w64-mingw32/lib)" \
   -DCMAKE_{SHARED,MODULE,EXE}_LINKER_FLAGS:STRING="-L$PWD/build_libcxx_$arch/fakelib -L$(cygpath -m $PWD/dummylibs) -L$(cygpath -m $MINGWPREFIX/share/mingw-w64/$arch-w64-mingw32/lib)" \
   -DPython3_EXECUTABLE:FILEPATH=$PYDIR/python.exe -Slibcxx -Bbuild_libcxx_$arch &&
  #-DCMAKE_CXX_FLAGS:STRING="--target=$arch-w64-mingw32 -fuse-ld=lld -stdlib=libc++ -I$PWD/$RUNPLATFORM/include -I$PWD/stage1/include/c++/v1" \
  #-DLIBCXX_BUILD_32_BITS:BOOL=OFF 
  #-DCMAKE_C_FLAGS:STRING="--target=$arch-w64-mingw32 -fuse-ld=lld" \
  #-DCMAKE_CXX_FLAGS:STRING="--target=$arch-w64-mingw32 -fuse-ld=lld -stdlib=libc++ -Wl,-L$PWD/build_libcxx_$arch" \
  wl-showstatus build-install &&
  ninja -Cbuild_libcxx_$arch install/strip &&
     echo OK || break
 done

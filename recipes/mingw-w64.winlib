#export NAME="mingw-w64"
#export STATUS=
#export URL=http://mingw-w64.sourceforge.net/
#export BASENAME=mingw-w64
#export DESCRIPTION="The project's goal is to deliver runtime, headers, and libs for developing 64 bit (x64), as well as 32 bit (x86), windows applications using gcc-4.4 or newer versions."
#export CATEGORY=development
#export TYPE=library
#export VERSION=4.4.1-1a
#export VERSIONDATE=20100208
#wl-showstatus --package-version
#export DEPENDANCIES=
#export OPTIONALDEPENDANCIES=
#export BUILDDEPENDANCIES=
#export LICENSEFILE=
#export LICENSETYPE=
#export DOWNLOADURL=""
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://surfnet.dl.sourceforge.net/project/mingw-w64/Toolchain%20sources/Release%20for%20GCC%204.4.1/mingw-w64-src_$VERSION.tar.bz2
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#tar xfj $TARBALLDIR/$BASENAME/mingw-w64-src_$VERSION.tar.bz2
#mv mingw $BASENAME-$VERSION
#cd $BASENAME-$VERSION/mingw-w64-crt
## --enable-lib32 --enable-lib64 --enable-libce
#wl-showstatus configure &&
#./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-lib32 &&
# wl-showstatus build-install &&
# make &&
#    echo OK
##wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && rm -rf $BASENAME-$VERSION



export NAME="MinGW-w64"
export STATUS=
#export URL=http://mingw-w64.sourceforge.net/
export URL=http://mingw-w64.org/
export BASENAME=mingw-w64
export DESCRIPTION="The project's goal is to deliver runtime, headers, and libs for developing 64 bit (x64), as well as 32 bit (x86), windows applications using gcc-4.4 or newer versions."
export CATEGORY=development
export TYPE=application
#export VERSION=1.0.3
#export VERSIONDATE=20120403
#export VERSION=1.0.5
#export VERSIONDATE=20120801
#export VERSION=1.0.6
#export VERSIONDATE=20120807
#export VERSION=1.0.7
#export VERSIONDATE=20120924
#export VERSION=1.0.8
#export VERSIONDATE=20130411
#export VERSION=1.0.9
#export VERSIONDATE=20140418
#export VERSION=1.0.10
#export VERSIONDATE=20150321
#export VERSION=2.0
#export VERSIONDATE=20111019
#export VERSION=2.0.1
#export VERSIONDATE=20111213
#export VERSION=2.0.2
#export VERSIONDATE=20120403
#export VERSION=2.0.3
#export VERSIONDATE=20120428
#export VERSION=2.0.4
#export VERSIONDATE=20120701
#export VERSION=2.0.5
#export VERSIONDATE=20120801
#export VERSION=2.0.6
#export VERSIONDATE=20120807
#export VERSION=2.0.7
#export VERSIONDATE=20120924
#export VERSION=2.0.8
#export VERSIONDATE=20130411
#export VERSION=2.0.9
#export VERSIONDATE=20140418
#export VERSION=2.0.10
#export VERSIONDATE=20150321
#export VERSION=3.0.0
#export VERSIONDATE=20130921
#export VERSION=3.1.0
#export VERSIONDATE=20140110
####configure: error: Please check if the mingw-w64 header set and the build/host option are set properly.
#export VERSION=3.2.0
#export VERSIONDATE=20140901
#export VERSION=3.3.0
#export VERSIONDATE=20141026
#export VERSION=4.0.0
#export VERSIONDATE=20150314
#export VERSION=4.0.1
#export VERSIONDATE=20150325
#export VERSION=4.0.2
#export VERSIONDATE=20150417
#export VERSION=4.0.4
#export VERSIONDATE=20150811
#export VERSION=4.0.5
#export VERSIONDATE=20160405
#export VERSION=4.0.6
#export VERSIONDATE=20160407
#export VERSION=5.0.0
#export VERSIONDATE=20161017
#export VERSION=5.0.1
#export VERSIONDATE=20170104
#export VERSION=5.0.2
#export VERSIONDATE=20170324
#export VERSION=5.0.3
#export VERSIONDATE=20171104
#export VERSION=5.0.4
#export VERSIONDATE=20180603
#export VERSION=6.0.0
#export VERSIONDATE=20180917
#export VERSION=7.0.0
#export VERSIONDATE=20191110
#export VERSION=8.0.0
#export VERSIONDATE=20200918
#export VERSION=8.0.2
#export VERSIONDATE=20210509
export VERSION=9.0.0
export VERSIONDATE=20210523
wl-showstatus --package-version
export DEPENDANCIES=
export OPTIONALDEPENDANCIES=
export BUILDDEPENDANCIES=
export LICENSEFILE=COPYING
export LICENSETYPE="Zope Public License (ZPL) with exceptions"
export DOWNLOADURL="http://sourceforge.net/projects/mingw-w64/files/mingw-w64/mingw-w64-release/ mingw-w64-v"
#export DOWNLOADURL="https://github.com/mirror/mingw-w64/releases"
#export DOWNLOADURL="https://github.com/mirror/mingw-w64/tags"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://downloads.sourceforge.net/project/mingw-w64/mingw-w64/mingw-w64-release/mingw-w64-v$VERSION.tar.gz
export DOWNLOADSOURCEURL=http://downloads.sourceforge.net/project/mingw-w64/mingw-w64/mingw-w64-release/mingw-w64-v$VERSION.tar.bz2
#export DOWNLOADSOURCEURL=https://github.com/mirror/mingw-w64/archive/refs/tags/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
#tar xfz $TARBALLDIR/$BASENAME/mingw-w64-v$VERSION.tar.gz
tar xfj $TARBALLDIR/$BASENAME/mingw-w64-v$VERSION.tar.bz2
cd mingw-w64-v$VERSION
# fix mingw-w64-libraries/winpthreads/src/thread.c (version >= 9.0.0)
patch -ulf mingw-w64-libraries/winpthreads/src/thread.c << EOF
@@ -27,2 +27,3 @@
 #include <malloc.h>
+#include <string.h>
 #include <signal.h>
EOF
# fix issues detecting clang as cl in mingw-w64-libraries/winpthreads/ (version >= 9.0.0)
#### bug reported here: https://sourceforge.net/p/mingw-w64/bugs/928/
#### bug reported here: https://debbugs.gnu.org/cgi/bugreport.cgi?bug=53479
#sed -i -e "s/cl\*/DISABLED_FOR_CLANG_&/g" mingw-w64-libraries/winpthreads/configure mingw-w64-libraries/winpthreads/m4/libtool.m4
#sed -i -e "s/^\(\s*\)# Assume MSVC wrapper/\1;;\n&/" mingw-w64-libraries/winpthreads/m4/libtool.m4
#sed -i -e "s/^lt_sysroot=.*$/&\nGCC=yes/" mingw-w64-libraries/winpthreads/m4/libtool.m4
sed -i -e "s/cl\*/DISABLED_FOR_CLANG_&/g" mingw-w64-libraries/winpthreads/configure mingw-w64-libraries/winpthreads/m4/libtool.m4
sed -i -e "s/test yes = \"\$GCC\"/true/; s/^\(\s*\)# Assume MSVC wrapper/\1;;\n\1MSVC)\n&/" mingw-w64-libraries/winpthreads/m4/libtool.m4
# copy sources
mkdir -p $INSTALLPREFIX/src/mingw-w64 &&
cp -rf * $INSTALLPREFIX/src/mingw-w64/
## fix __rdtsc() issue where using GCC 11 or higher in mingw-w64-crt/intrincs/rdtsc.c (version >= 8.0.0 <= 8.0.2)
#patch -ulbf mingw-w64-crt/intrincs/rdtsc.c << EOF
#@@ -14,3 +14,3 @@
# #if !__has_builtin(__rdtsc)
#-unsigned __int64 __rdtsc(void)
#+unsigned __int64 __rdtsc()
# {
#EOF
## fix version number (version = 8.0.2)
#if [ "$VERSION" == "8.0.2" ]; then
# sed -i.bak -e "s/\(#define __MINGW64_VERSION_BUGFIX \)0/\12/" mingw-w64-headers/crt/_mingw_mac.h
#fi
## fix mingw-w64-headers/crt/setjmp.h (version >= 9.0.0)
#if [ "0$USE_UCRT" -eq 0 ]; then 
#patch -ulbf mingw-w64-headers/crt/setjmp.h << EOF
#@@ -214,3 +214,3 @@
# #    ifdef _WIN64
#-#      define _setjmp __intrinsic_setjmpex
#+#      define _setjmp __intrinsic_setjmp
# #    else
#EOF
#fi
wl-showstatus configure &&
 #mkdir -p m4 &&
 #autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal &&
 mkdir -p build &&
 cd build &&
 #../configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --without-crt --with-libraries=libmangle --with-tools=all LDFLAGS="-Wl,-no-undefined" &&
 #../configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-libraries=libmangle --with-tools=all LDFLAGS="-Wl,-no-undefined" &&
 #../configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-libraries=all --with-tools=all LDFLAGS="-Wl,-no-undefined" &&
 #../configure --prefix=$INSTALLPREFIX/share/mingw-w64 --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-libraries=all --with-tools=all LDFLAGS="-Wl,-no-undefined" &&
 #../configure --prefix=$INSTALLPREFIX/share/mingw-w64 --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-libraries=all --with-tools=all --enable-sdk=all --enable-secure-api --enable-wildcard --enable-lib$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi)  --disable-lib$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 32; else echo 64; fi) LDFLAGS="-Wl,-no-undefined" &&
 #../configure --prefix=$INSTALLPREFIX/share/mingw-w64 --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-libraries=all --with-tools=all --enable-sdk=all --enable-secure-api --enable-wildcard --enable-lib$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi)  --disable-lib$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 32; else echo 64; fi) CFLAGS="-fcommon" LDFLAGS="-Wl,-no-undefined" &&
 #../configure --prefix=$INSTALLPREFIX/share/mingw-w64 --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-libraries=all --with-tools=all --enable-sdk=all --enable-secure-api --enable-wildcard --enable-lib$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi)  --disable-lib$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 32; else echo 64; fi) CFLAGS="-fcommon $(gcc --help -v 2>/dev/null|grep -q " -Wexpansion-to-defined" && echo "-Wno-expansion-to-defined")" LDFLAGS="-Wl,-no-undefined" &&
 #../configure --prefix=$INSTALLPREFIX/share/mingw-w64 --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-libraries=all --with-tools=all --enable-sdk=all --enable-secure-api --enable-wildcard --enable-lib$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) --disable-lib$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 32; else echo 64; fi) --disable-libarm32 --disable-libarm64 CFLAGS="-fcommon $(gcc --help -v 2>/dev/null|grep -q " -Wexpansion-to-defined" && echo "-Wno-expansion-to-defined")" LDFLAGS="-Wl,-no-undefined" &&
 #../configure --prefix=$INSTALLPREFIX/share/mingw-w64 --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrt"; else echo "msvcrt-os"; fi) --with-libraries=all --with-tools=all --enable-sdk=all --enable-secure-api --enable-wildcard --enable-lib$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) --disable-lib$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 32; else echo 64; fi) --disable-libarm32 --disable-libarm64 CFLAGS="-fcommon $(gcc --help -v 2>/dev/null|grep -q " -Wexpansion-to-defined" && echo "-Wno-expansion-to-defined")" LDFLAGS="-Wl,-no-undefined" &&
 ../configure --prefix=$INSTALLPREFIX/share/mingw-w64 --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrt"; else echo "msvcrt-os"; fi) --with-libraries=all --with-tools=all --enable-sdk=all --enable-secure-api --enable-wildcard --enable-lib$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) --disable-lib$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 32; else echo 64; fi) --disable-libarm32 --disable-libarm64 --enable-idl CFLAGS="-fcommon $(gcc --help -v 2>/dev/null|grep -q " -Wexpansion-to-defined" && echo "-Wno-expansion-to-defined")" LDFLAGS="-Wl,-no-undefined" &&
 #--with-libraries=libmangle,winpthreads,winstorecompat 
 #-DUSE_NO_MINGW_SETJMP_TWO_ARGS 
 #Windows XP: --with-default-win32-winnt=0x0501
 cd .. &&
 if [ ! -f mingw-w64-tools/widl/Makefile ]; then
  mkdir -p build_widl &&
  cd build_widl &&
  ../mingw-w64-tools/widl/configure --prefix=$INSTALLPREFIX/share/mingw-w64 --build=$BUILDPLATFORM --host=$RUNPLATFORM &&
  cd ..
 fi &&
 if [ ! -f mingw-w64-libraries/winstorecompat/Makefile ]; then
  mkdir -p build_winstorecompat &&
  cd build_winstorecompat &&
  ../mingw-w64-libraries/winstorecompat/configure --prefix=$INSTALLPREFIX/share/mingw-w64 --build=$BUILDPLATFORM --host=$RUNPLATFORM &&
  cd ..
 fi &&
 ## fix link issues when using LLVM/CLang
 #sed -i.bak -e "s?\(-o \)\([^ ]*\)\(.*\) -link \(-dll\)?-shared -s -mwindows \1.libs/libwinpthread-1.dll -Wl,--out-implib,\2 \3 \4?" build/mingw-w64-libraries/winpthreads/libtool &&
 #sed -i.bak -e "s?\$(AM_V_CCLD).*\$(libwinpthread_la_OBJECTS).*?& \&\& \$(AR) \$(ARFLAGS) .libs/libwinpthread.a \$(libwinpthread_la_OBJECTS:.lo=.o) \&\& cp -f .libs/libwinpthread.a .libs/libwinpthread.lib?" build/mingw-w64-libraries/winpthreads/Makefile &&
 wl-showstatus build-install &&
 ( make -Cbuild install-strip || make -j1 -Cbuild install-strip ) &&
 #sed -i.bak -e "s/-link //" build/mingw-w64-libraries/winpthreads/libtool &&
 ## fix issue with llvm-rc when using LLVM/CLang
 #make -Cbuild install-strip RC=llvm-windres.exe &&
 if [ ! -f mingw-w64-tools/widl/Makefile ]; then
  make -Cbuild_widl install-strip
 fi &&
 if [ ! -f mingw-w64-libraries/winstorecompat/Makefile ]; then
  wl-showstatus build-install &&
  #make -Cbuild_winstorecompat install-strip
  make -Cbuild_winstorecompat install-strip || true
 fi &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && rm -rf mingw-w64-v$VERSION



#export RUNPLATFORM=x86_64-w64ucrt-mingw32
#export RUNPLATFORM=i686-w64ucrt-mingw32
#--default-msvcrt=$(if ( echo $RUNPLATFORM | grep -q "-ucrt" ); then echo "msvcrt-os"; else echo "msvcrt-os"; fi)
#--default-msvcrt=msvcrt-os
#--enable-idl
#--enable-delay-import-libs #### avoid delayed import DLLs because of possible rebasing overhead issues and missing DLLs not being reported at startup (causing unhandled exception)

#--default-msvcrt=??ucrt?? --disable-crt #### for UCRT builds
#### Recent change adds: libwinstorecompat.a + libwindowsappcompat.a
#### bug reported (errors building winstorecompat in version 9.0.0): https://sourceforge.net/p/mingw-w64/bugs/898/
####TO DO: --with-default-msvcrt=ucrt -> MINGW_PACKAGE_PREFIX=mingw-w64-ucrt-x86_64

#### i686-w64-windows-gnu / x86_64-w64-windows-gnu












 # build MinGW-w64 libraries
 for arch in i686 x86_64 armv7 aarch64; do
  mkdir -p build_mingw-w64_cross_$arch &&
  wl-showstatus configure &&
  cd build_mingw-w64_cross_$arch &&
  ../configure --prefix=$INSTALLPREFIX/share/mingw-w64/$arch-w64-mingw32 \
   --build=$BUILDPLATFORM \
   --host=$RUNPLATFORM \
   --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrt"; else echo "msvcrt-os"; fi) \
   --without-libraries \
   --without-tools \
   --enable-sdk=all \
   --enable-secure-api \
   --enable-wildcard \
   --$(if [ "$arch" == "i686" ]; then echo "enable"; else echo "disable"; fi)-lib32 \
   --$(if [ "$arch" == "x86_64" ]; then echo "enable"; else echo "disable"; fi)-lib64 \
   --$(if [ "$arch" == "armv7" ]; then echo "enable"; else echo "disable"; fi)-libarm32 \
   --$(if [ "$arch" == "aarch64" ]; then echo "enable"; else echo "disable"; fi)-libarm64 \
   --with-default-win32-winnt=0x0600 \
   --enable-idl \
   --without-genlib \
   &&
  cd .. &&
  #wl-showstatus build &&
  #( make -Cbuild_mingw-w64_cross_$arch || make -Cbuild_mingw-w64_cross_$arch CC="$PWD/cross/bin/clang.exe -fuse-ld=lld -fno-integrated-as" ) &&
  wl-showstatus build-install &&
  #make -Cbuild_mingw-w64_cross_$arch/mingw-w64-headers install-strip &&
  #make -Cbuild_mingw-w64_cross_$arch/mingw-w64-crt install-libarm32LIBRARIES CFLAGS="-target armv7-w64-mingw32 -march=armv7-a -mtune=armv7-a+vfpv4+neon+thumb2 -D__arm__" CCASFLAGS="-target armv7-w64-mingw32 -march=armv7-a -mtune=armv7-a+vfpv4+neon+thumb2" &&
  #make -Cbuild_mingw-w64_cross_$arch/mingw-w64-crt install-libarm64LIBRARIES CFLAGS="-target aarch64-w64-mingw32 -mtune=cortex-a57 -D__aarch64__" CCASFLAGS="-target aarch64-w64-mingw32 -mtune=cortex-a57" &&
  #make -Cbuild_mingw-w64_cross_$arch/mingw-w64-crt install-strip &&
  make -Cbuild_mingw-w64_cross_$arch install-strip &&
  #make -Cbuild_mingw-w64_cross_$arch install-strip CFLAGS="$(if [ "$arch" == "armv7" ] || [ "$arch" == "aarch64" ]; then echo "-femulated-tls"; fi)" &&
  ( ls -1d cross/$arch-w64-mingw32/lib || mv -f cross/$arch-w64-mingw32/lib* cross/$arch-w64-mingw32/lib ) &> /dev/null &&
  touch SUCCESS_$arch || break
 done &&
 if [ $(ls -1 SUCCESS_*|wc -l) -ne 4 ]; then false; fi &&
 rm -f SUCCESS_* &&
    echo OK



# build MinGW-w64 headers and crt
for arch in i686 x86_64 armv7 aarch64; do
 mkdir -p build_mingw-w64-headers-$arch build_mingw-w64-crt-$arch &&
 wl-showstatus configure &&
 cd build_mingw-w64-headers-$arch &&
 ../mingw-w64-headers/configure --prefix=$INSTALLPREFIX/share/mingw-w64/$arch-w64-mingw32 --build=$BUILDPLATFORM --host=$arch-w64-mingw32 \
  --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrt"; else echo "msvcrt-os"; fi) \
  --enable-sdk=all \
  --enable-idl &&
 cd .. &&
 wl-showstatus build &&
 make -Cbuild_mingw-w64-headers-$arch install-strip &&
 wl-showstatus configure &&
 cd build_mingw-w64-crt-$arch &&
 ../mingw-w64-crt/configure --prefix=$INSTALLPREFIX/share/mingw-w64/$arch-w64-mingw32 --build=$BUILDPLATFORM --host=$arch-w64-mingw32 \
  --$(if [ "$arch" == "i686" ]; then echo "enable"; else echo "disable"; fi)-lib32 \
  --$(if [ "$arch" == "x86_64" ]; then echo "enable"; else echo "disable"; fi)-lib64 \
  --$(if [ "$arch" == "armv7" ]; then echo "enable"; else echo "disable"; fi)-libarm32 \
  --$(if [ "$arch" == "aarch64" ]; then echo "enable"; else echo "disable"; fi)-libarm64 \
  --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrt"; else echo "msvcrt-os"; fi) \
  --enable-wildcard &&
 cd .. &&
 wl-showstatus build &&
 make -Cbuild_mingw-w64-crt-$arch install-strip
done

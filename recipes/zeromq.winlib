#export NAME="ZeroMQ"
#export STATUS=
#export URL=http://zeromq.org/
#export BASENAME=zeromq
#export DESCRIPTION="ZeroMQ (also known as 0MQ, 0MQ, or zmq) looks like an embeddable networking library but acts like a concurrency framework. It gives you sockets that carry atomic messages across various transports like in-process, inter-process, TCP, and multicast. You can connect sockets N-to-N with patterns like fan-out, pub-sub, task distribution, and request-reply. It's fast enough to be the fabric for clustered products. Its asynchronous I/O model gives you scalable multicore applications, built as asynchronous message-processing tasks."
#export CATEGORY=system
#export TYPE=library
##export VERSION=4.1.4
##export VERSIONDATE=20160215
#####src/tcp_address.cpp:441:52: error: 'if_nametoindex' was not declared in this scope
#export VERSION=4.3.2
#export VERSIONDATE=20190708
#wl-showstatus --package-version
#export DEPENDENCIES=libsodium
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=
#export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=COPYING.LESSER
#export LICENSETYPE=LGPL
##export DOWNLOADURL="http://download.zeromq.org/"
#export DOWNLOADURL="https://github.com/zeromq/libzmq/releases"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://download.zeromq.org/$BASENAME-$VERSION.tar.gz
#export DOWNLOADSOURCEURL=https://github.com/zeromq/libzmq/releases/download/v$VERSION/$BASENAME-$VERSION.tar.gz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#wl-showstatus extract
#tar xz --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
#cd $BASENAME-$VERSION
### echo fix missing if_nametoindex (version <= 4.1.4)
##mv src/tcp_address.cpp src/tcp_address.cpp.bak &&
##if grep -q if_nametoindex $MINGWDIR/*mingw32/include/netioapi.h &> /dev/null; then
## echo "#include <winsock2.h>" > src/tcp_address.cpp
## echo "#include <netioapi.h>" >> src/tcp_address.cpp
##else
## echo "#define if_nametoindex(i) 0" > src/tcp_address.cpp
##fi
##cat src/tcp_address.cpp.bak >> src/tcp_address.cpp
### fix warning that winsock2.h must be included before windows.h (version <= 4.1.4)
##for F in src/*.cpp; do
## mv $F $F.bak &&
## echo "#include <winsock2.h>" > $F &&
## cat $F.bak >> $F
##done
## fix tests/testutil_monitoring.cpp (version >= 4.3.2)
#patch -ulbf tests/testutil_monitoring.cpp << EOF
#@@ -329,4 +329,4 @@
#         pos += snprintf (pos, sizeof buf - (pos - buf),
#-                         "Expected monitor event %llx, but received %llx\n",
#-                         (long long) expected_event_, (long long) event);
#+                         "Expected monitor event %lx, but received %lx\n",
#+                         (long) expected_event_, (long) event);
#         failed = true;
#EOF
## fix src/thread.cpp (version >= 4.3.2)
#patch -ulbf src/thread.cpp << EOF
#@@ -127,4 +127,2 @@
#
#-#pragma warning(push)
#-#pragma warning(disable : 6320 6322)
#     __try {
#@@ -135,5 +133,4 @@
#     }
#-    __except (EXCEPTION_CONTINUE_EXECUTION) {
#+    __catch (...) {
#     }
#-#pragma warning(pop)
# }
#EOF
#wl-showstatus configure &&
##./autogen.sh &&
##    echo OK
### fix building DLLs on 64-bit
##if ( echo $RUNPLATFORM | grep -q x86_64 ); then
## echo "AM_GNU_GETTEXT_VERSION([$(gettext --version|head -n1|sed -e "s/^.* \([0-9\.]*\) *$/\1/")])" >> configure.ac &&
## autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal
##fi
##INTLTOOL_PERL="$PERLDIR/bin/perl.exe" 
##PERL="$PERLDIR/bin/perl.exe -I$PERLDIR/lib" 
##PYTHON=$PYDIR/python.exe 
##PYTHON=$PYDIR/python.exe C_INCLUDE_PATH=$PYDIR/include${C_INCLUDE_PATH:+:$C_INCLUDE_PATH} 
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM LDFLAGS="-Wl,--as-needed -Wl,-no-undefined" &&
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM LDFLAGS="-Wl,--as-needed" &&
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --disable-static --enable-shared &&
#./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-static --enable-shared &&
# ## fix building DLLs
# #mv libtool libtool.bak &&
# #sed -e "s/\(allow_undefined=\)yes/\1no/" libtool.bak > libtool &&
# #wl-showstatus build &&
# #make &&
# wl-showstatus build-install &&
# make install-strip &&
# #make check &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION



export NAME="ZeroMQ"
export STATUS=
export URL=http://zeromq.org/
export BASENAME=zeromq
export DESCRIPTION="ZeroMQ (also known as 0MQ, 0MQ, or zmq) looks like an embeddable networking library but acts like a concurrency framework. It gives you sockets that carry atomic messages across various transports like in-process, inter-process, TCP, and multicast. You can connect sockets N-to-N with patterns like fan-out, pub-sub, task distribution, and request-reply. It's fast enough to be the fabric for clustered products. Its asynchronous I/O model gives you scalable multicore applications, built as asynchronous message-processing tasks."
export CATEGORY=system
export TYPE=library
#export VERSION=4.3.3
#export VERSIONDATE=20200907
export VERSION=4.3.4
export VERSIONDATE=20210117
wl-showstatus --package-version
export DEPENDENCIES=gnutls,libsodium
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=COPYING.LESSER
export LICENSETYPE=LGPL
#export DOWNLOADURL="http://download.zeromq.org/"
export DOWNLOADURL="https://github.com/zeromq/libzmq/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=http://download.zeromq.org/$BASENAME-$VERSION.tar.gz
export DOWNLOADSOURCEURL=https://github.com/zeromq/libzmq/releases/download/v$VERSION/$BASENAME-$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
cd $BASENAME-$VERSION
sed -i.bak -e "s/\(#if defined\|#ifdef\) _MSC_VER/\1 _WIN32/" src/ipc_address.hpp src/ipc_connecter.cpp src/ipc_listener.cpp
mkdir -p build_win &&
 wl-showstatus configure &&
 #PKG_CONFIG= cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED:BOOL=ON -DBUILD_STATIC:BOOL=ON -DENABLE_WS:BOOL=ON -DBUILD_TESTS:BOOL=OFF -DZMQ_BUILD_TESTS:BOOL=OFF -DLIBZMQ_PEDANTIC:BOOL=OFF -DLIBZMQ_WERROR:BOOL=OFF -S. -Bbuild_win &&
 #PKG_CONFIG= cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED:BOOL=ON -DBUILD_STATIC:BOOL=ON -DENABLE_WS:BOOL=ON -DPOLLER:STRING=epoll -DBUILD_TESTS:BOOL=OFF -DZMQ_BUILD_TESTS:BOOL=OFF -DLIBZMQ_PEDANTIC:BOOL=OFF -DLIBZMQ_WERROR:BOOL=OFF -S. -Bbuild_win &&
 cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED:BOOL=ON -DBUILD_STATIC:BOOL=ON -DENABLE_WS:BOOL=ON -DPOLLER:STRING=epoll -DBUILD_TESTS:BOOL=OFF -DZMQ_BUILD_TESTS:BOOL=OFF -DLIBZMQ_PEDANTIC:BOOL=OFF -DLIBZMQ_WERROR:BOOL=OFF -S. -Bbuild_win &&
 wl-showstatus build-install &&
 ninja -Cbuild_win install/strip &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




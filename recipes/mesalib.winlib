#export NAME="Mesa"
#export STATUS=
#export URL=http://www.mesa3d.org/
#export BASENAME=mesalib
#export DESCRIPTION="Mesa is an open-source implementation of the OpenGL specification - a system for rendering interactive 3D graphics."
#export CATEGORY=graphics
#export TYPE=library
##export VERSION=7.6
##export VERSION=7.6.1
##export VERSION=7.7
##export VERSION=7.7.1
##export VERSION=7.8
##export VERSION=7.8.1
##export VERSION=7.8.2
#####shader/slang/slang_compile.c:2797:35: error: library/slang_core_gc.h: No such file or directory
##export VERSIONDATE=
##wl-showstatus --package-version
##export DEPENDENCIES=
##export VERSION=7.9
##export VERSION=7.9.1
##export VERSIONDATE=20110108
#export VERSION=7.9.2
#export VERSIONDATE=20110303
##export VERSION=7.10
##export VERSIONDATE=20110108
##export VERSION=7.10.1
##export VERSIONDATE=20110303
##export VERSION=7.10.2
##export VERSIONDATE=20110407
#####configure: error: makedepend is required to build Mesa
##export VERSION=7.10.3
##export VERSIONDATE=20110614
##export VERSION=7.11
##export VERSIONDATE=20110801
##export VERSION=7.11.1
##export VERSIONDATE=20111118
##export VERSION=7.11.2
##export VERSIONDATE=20111128
#####src/glsl/g++.exe: error: builtin_function.cpp: No such file or directory
##export VERSION=8.0-rc1
##export VERSIONDATE=20120114
##export VERSION=8.0
##export VERSIONDATE=20120210
##export VERSION=8.0.1
##export VERSIONDATE=20120217
##export VERSION=8.0.2
##export VERSIONDATE=20120322
##export VERSION=8.0.3
##export VERSIONDATE=20120519
##export VERSION=8.0.4
##export VERSIONDATE=20120711
##export VERSION=8.0.5
##export VERSIONDATE=20121025
#####src/gls/g++.exe: builtin_function.cpp: No such file or directory
##export VERSION=9.0
##export VERSIONDATE=20121009
##export VERSION=9.0.1
##export VERSIONDATE=20121117
#####configure: WARNING: unrecognized options: --without-x, --enable-gl-osmesa, --with-driver, --disable-glw, --disable-glu, --disable-glut
##export VERSION=9.0.2
##export VERSIONDATE=20130123
##export VERSION=9.0.3
##export VERSIONDATE=20130221
##export VERSION=9.1
##export VERSIONDATE=20130211
##export VERSION=9.1.1
##export VERSIONDATE=20130320
##export VERSION=9.1.2
##export VERSIONDATE=20130501
##export VERSION=9.1.3
##export VERSIONDATE=20130522
##export VERSION=9.1.4
##export VERSIONDATE=20130702
##export VERSION=9.1.5
##export VERSIONDATE=20130718
##export VERSION=9.1.6
##export VERSIONDATE=20130802
##export VERSION=9.1.7
##export VERSIONDATE=20131006
##export VERSION=9.2.0
##export VERSIONDATE=20130828
##export VERSION=9.2.1
##export VERSIONDATE=20131005
##export VERSION=9.2.2
##export VERSIONDATE=20131019
##export VERSION=9.2.3
##export VERSIONDATE=20131113
##export VERSION=9.2.4
##export VERSIONDATE=20131128
##export VERSION=9.2.5
##export VERSIONDATE=20131213
##export VERSION=10.0.0
##export VERSIONDATE=20131201
##export VERSION=10.0.1
##export VERSIONDATE=20131213
##export VERSION=10.0.2
##export VERSIONDATE=20110110
##export VERSION=10.0.3
##export VERSIONDATE=20140204
##export VERSION=10.0.4
##export VERSIONDATE=20140312
##export VERSION=10.0.5
##export VERSIONDATE=20140419
##export VERSION=10.1.0
##export VERSIONDATE=20140305
##export VERSION=10.1.1
##export VERSIONDATE=20140419
##export VERSION=10.1.2
##export VERSIONDATE=20140506
#####The command line is too long.
##export VERSION=10.1.3
##export VERSIONDATE=20140509
##export VERSION=10.1.4
##export VERSIONDATE=20140521
##export VERSION=10.1.5
##export VERSIONDATE=20140607
##export VERSION=10.1.6
##export VERSIONDATE=20140625
##export VERSION=10.2.0
##export VERSIONDATE=20140607
##export VERSION=10.2.1
##export VERSIONDATE=20140607
##export VERSION=10.2.3
##export VERSIONDATE=20140708
##export VERSION=10.2.4
##export VERSIONDATE=20140721
##export VERSION=10.2.5
##export VERSIONDATE=20140803
##export VERSION=10.2.6
##export VERSIONDATE=20140820
##export VERSION=10.2.7
##export VERSIONDATE=20140906
##export VERSION=10.2.8
##export VERSIONDATE=20140920
##export VERSION=10.2.9
##export VERSIONDATE=20141013
##export VERSION=10.3.0
##export VERSIONDATE=20140920
##export VERSION=10.3.1
##export VERSIONDATE=20141013
##export VERSION=10.3.2
##export VERSIONDATE=20141025
##export VERSION=10.3.3
##export VERSIONDATE=20141109
##export VERSION=10.3.4
##export VERSIONDATE=20141122
##export VERSION=10.3.5
##export VERSIONDATE=20141206
##export VERSION=10.3.6
##export VERSIONDATE=20141230
##export VERSION=10.3.7
##export VERSIONDATE=20150112
##export VERSION=10.4.0
##export VERSIONDATE=20141214
##export VERSION=10.4.1
##export VERSIONDATE=20141230
##export VERSION=10.4.2
##export VERSIONDATE=20150112
##export VERSION=10.4.3
##export VERSIONDATE=20150124
##export VERSION=10.4.4
##export VERSIONDATE=20150207
##export VERSION=10.4.5
##export VERSIONDATE=20150221
##export VERSION=10.4.6
##export VERSIONDATE=20150307
##export VERSION=10.4.7
##export VERSIONDATE=20150321
#####src\mesa\main\attrib.c:60:27: fatal error: main/dispatch.h: No such file or directory
##export VERSION=10.5.1
##export VERSIONDATE=20150314
##export VERSION=10.5.2
##export VERSIONDATE=20150329
##export VERSION=10.5.3
##export VERSIONDATE=20150413
##wl-showstatus --package-version
##export DEPENDENCIES=talloc,libxt,libxext
##export VERSION=10.5.4
##export VERSIONDATE=20150425
#####checking if module mako in python is installed... configure: error: mako 0.3.4 or later is required.
##export VERSION=10.5.5
##export VERSIONDATE=20150512
##export VERSION=10.5.6
##export VERSIONDATE=20150524
##export VERSION=10.5.7
##export VERSIONDATE=20150607
##export VERSION=10.5.8
##export VERSIONDATE=20150621
##export VERSION=10.5.9
##export VERSIONDATE=20150705
##export VERSION=10.6.1
##export VERSIONDATE=20150629
##export VERSION=10.6.2
##export VERSIONDATE=20150712
##export VERSION=10.6.3
##export VERSIONDATE=20150726
##export VERSION=10.6.4
##export VERSIONDATE=20150812
##export VERSION=10.6.5
##export VERSIONDATE=20150823
##export VERSION=10.6.6
##export VERSIONDATE=20150905
##export VERSION=10.6.7
##export VERSIONDATE=20150911
##export VERSION=10.6.8
##export VERSIONDATE=20151003
##export VERSION=10.6.9
##export VERSIONDATE=20150920
##export VERSION=11.0.1
##export VERSIONDATE=20150926
##export VERSION=11.0.2
##export VERSIONDATE=20150929
##export VERSION=11.0.3
##export VERSIONDATE=20151011
##export VERSION=11.0.4
##export VERSIONDATE=20151025
##export VERSION=11.0.5
##export VERSIONDATE=20151111
##export VERSION=11.0.6
##export VERSIONDATE=20151121
##export VERSION=11.0.7
##export VERSIONDATE=20151210
##export VERSION=11.0.8
##export VERSIONDATE=20151221
##export VERSION=11.0.9
##export VERSIONDATE=20160405
##export VERSION=11.1.2
##export VERSIONDATE=20160405
##export VERSION=11.1.3
##export VERSIONDATE=20160420
##export VERSION=11.1.4
##export VERSIONDATE=20160510
##export VERSION=11.2.0
##export VERSIONDATE=20160405
##export VERSION=11.2.1
##export VERSIONDATE=20160420
##export VERSION=11.2.2
##export VERSIONDATE=20160510
##export VERSION=12.0.1
##export VERSIONDATE=20160709
##export VERSION=12.0.2
##export VERSIONDATE=20160906
##export VERSION=12.0.3
##export VERSIONDATE=20160915
##export VERSION=12.0.4
##export VERSIONDATE=20161111
##export VERSION=12.0.5
##export VERSIONDATE=20161206
##export VERSION=12.0.6
##export VERSIONDATE=20170124
##export VERSION=13.0.1
##export VERSIONDATE=20161113
##export VERSION=13.0.2
##export VERSIONDATE=20161129
##export VERSION=13.0.3
##export VERSIONDATE=20170106
##export VERSION=13.0.4
##export VERSIONDATE=20170201
##export VERSION=13.0.5
##export VERSIONDATE=20170222
##export VERSION=13.0.6
##export VERSIONDATE=20170320
##export VERSION=17.0.0
##export VERSIONDATE=20170214
##export VERSION=17.1.3
##export VERSIONDATE=20170626
##export VERSION=17.1.4
##export VERSIONDATE=20170701
##export VERSION=17.1.5
##export VERSIONDATE=20170715
##export VERSION=17.1.6
##export VERSIONDATE=20170816
##export VERSION=17.1.7
##export VERSIONDATE=20170821
##export VERSION=17.1.8
##export VERSIONDATE=20170829
##export VERSION=17.2.0
##export VERSIONDATE=20170905
##export VERSION=17.2.1
##export VERSIONDATE=20170918
#wl-showstatus --package-version
#export DEPENDENCIES=talloc,libxt,libxext,mako
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=makedepend,pexports
#export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=docs/COPYING
#export LICENSETYPE=LGPL
##export DOWNLOADURL="ftp://ftp.freedesktop.org/pub/mesa/ MesaLib-"
#export DOWNLOADURL="https://mesa.freedesktop.org/archive/ mesa-"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
##export DOWNLOADSOURCEURL=ftp://ftp.freedesktop.org/pub/mesa/`echo $VERSION|sed -e "s/-rc[0-9]*$//"`/MesaLib-$VERSION.tar.bz2
#export DOWNLOADSOURCEURL=ftp://ftp.freedesktop.org/pub/mesa/$VERSION/MesaLib-$VERSION.tar.bz2
##export DOWNLOADSOURCEURL=ftp://ftp.freedesktop.org/pub/mesa/$(echo $VERSION|sed -e "s/^\([0-9]*\.[0-9]*\).*$/\1/")/MesaLib-$VERSION.tar.bz2
##export DOWNLOADSOURCEURL=ftp://ftp.freedesktop.org/pub/mesa/$VERSION/mesa-$VERSION.tar.xz
##export DOWNLOADSOURCEURL=https://mesa.freedesktop.org/archive/mesa-$VERSION.tar.xz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#tar xj --force-local -f $TARBALLDIR/$BASENAME/MesaLib-$VERSION.tar.bz2
##tar xJ --force-local -f $TARBALLDIR/$BASENAME/mesa-$VERSION.tar.xz
#cd Mesa-$VERSION
##cd mesa-$VERSION
## fix missing symlink bin/install-sh
#cp bin/minstall bin/install-sh
## fix missing depend target in src/mesa/Makefile
#echo "depend:" >> src/mesa/Makefile
#echo "depend:" >> src/glsl/Makefile
#echo "depend:" >> src/gallium/auxiliary/Makefile
## fix missing files
#mkdir -p src/mesa/sys
#touch src/mesa/sys/ipc.h src/mesa/sys/shm.h
#mkdir -p src/gallium/winsys/sw/xlib/sys
#touch src/gallium/winsys/sw/xlib/sys/ipc.h src/gallium/winsys/sw/xlib/sys/shm.h
#
##make -C src/mesa -f Makefile.mgw CC=${CC:-gcc}
##mingw32-make -Csrc/mesa -f Makefile.mgw
#
###PATH=$PATH:$PYDIR:$PYDIR/Scripts scons
##aclocal --force -I $MINGWPREFIX/share/aclocal -I $MINGWDIR/share/aclocal &&
## ACLOCAL="aclocal -I$MINGWPREFIX/share/aclocal  -I $MINGWDIR/share/aclocal" autoconf -f &&
## automake -f --add-missing
#
##autoreconf -v -f -i -I$MINGWPREFIX/share/aclocal
#
## fix missing definition of caddr_t in src/glw/GLwDrawAP.h
#mv src/glw/GLwDrawAP.h src/glw/GLwDrawAP.h.bak
#echo "#include <X11/Xw32defs.h>" > src/glw/GLwDrawAP.h
#cat src/glw/GLwDrawAP.h.bak >> src/glw/GLwDrawAP.h
# 
## fix bin/mklib
#patch -ulbf bin/mklib << EOF
#--- bin/mklib  2010-10-02 00:51:28 +0200
#+++ bin/mklib  2010-10-05 10:18:16 +0200
#@@ -309,3 +309,3 @@
#
#-    'Linux' | 'OpenBSD' | 'DragonFly' | 'GNU' | GNU/*)
#+    'Linux' | 'OpenBSD' | 'DragonFly' | 'GNU' | GNU/* | '`uname`')
#        # we assume gcc
#EOF
## fix missing CHAR in include/GL/glx.h
#mv include/GL/glx.h include/GL/glx.h.bak
#echo "#include <windows.h>" > include/GL/glx.h
#cat include/GL/glx.h.bak >> include/GL/glx.h
## skip making X11 driver
#cat > src/mesa/drivers/x11/Makefile << EOF
#clean:
#all:
#install:
#EOF
### fix missing mklib (version <= 7.8)
##ln -sf bin/mklib .
### fix missing RTLD_LAZY, RTLD_GLOBAL in src/mesa/main/dlopen.c
##cp src/mesa/main/dlopen.c src/mesa/main/dlopen.c.bak
##echo "#include <dlfcn.h>" > src/mesa/main/dlopen.c
##cat src/mesa/main/dlopen.c.bak >> src/mesa/main/dlopen.c
### fix DLL extension
##mv configs/autoconf configs/autoconf.bak &&
##sed -e "s/\(\.\|\*\)so/\1dll/g" configs/autoconf.bak > configs/autoconf
##mv configs/current configs/current.bak &&
##sed -e "s/\(\.\|\*\)so/\1dll/g" configs/current.bak > configs/current
##make linux-x86
### fix configure.ac (see also: https://bugs.freedesktop.org/show_bug.cgi?id=82536)
######undefined reference to `__imp__glapi_Dispatch'
##mv configure.ac configure.ac.bak
##grep -v LT_INIT configure.ac.bak > configure.ac
##echo "LT_INIT()" >> configure.ac
#wl-showstatus configure &&
##autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal
##PYTHON=$PYDIR/python.exe ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --without-x --disable-glw --disable-egl &&
##PYTHON=$PYDIR/python.exe ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --without-x --disable-glw --disable-egl CFLAGS="-DPIPE_SUBSYSTEM_WINDOWS_USER" LDFLAGS="-Wl,--enable-auto-import" &&
##PYTHON=$PYDIR/python.exe ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-x=no --with-driver=osmesa --disable-glw --disable-egl --disable-glu CFLAGS="-DPIPE_SUBSYSTEM_WINDOWS_USER" LDFLAGS="-Wl,--enable-auto-import" &&
##PYTHON=$PYDIR/python.exe ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-x=no --disable-opengl --enable-gl-osmesa --with-driver=xlib --disable-glw --disable-egl --disable-glu --disable-glw --enable-glut --disable-gallium CFLAGS="-DPIPE_SUBSYSTEM_WINDOWS_USER" LDFLAGS="-Wl,--enable-auto-import" &&
##PYTHON=$PYDIR/python.exe ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --without-x --disable-static --enable-shared --disable-opengl --enable-gl-osmesa --with-driver=xlib --disable-glw --disable-egl --disable-glu --disable-glut --disable-gallium CFLAGS="-DPIPE_SUBSYSTEM_WINDOWS_USER" LDFLAGS="-Wl,--enable-auto-import" &&
#PYTHON=$PYDIR/python.exe ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --without-x --disable-static --enable-shared --enable-opengl --enable-gl-osmesa --with-driver=xlib --disable-glw --disable-egl --disable-glu --disable-glut --disable-gallium-egl --disable-gallium-gbm --disable-gallium-llvm --with-gallium-drivers= CFLAGS="-DPIPE_SUBSYSTEM_WINDOWS_USER" LDFLAGS="-Wl,--enable-auto-import" &&
##PYTHON=$PYDIR/python.exe ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --without-x --with-driver=osmesa --disable-static --enable-shared CFLAGS="-DPIPE_SUBSYSTEM_WINDOWS_USER" LDFLAGS="-Wl,--enable-auto-import" &&
##INSTALL=`which install.exe` PYTHON=$PYDIR/python.exe ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --without-x --with-driver=osmesa --enable-static --enable-shared --disable-gl-osmesa --disable-driglx-direct --enable-opengl --enable-egl --enable-glu --enable-glw --with-dri-drivers=swrast --enable-gallium-swrast CFLAGS="-DPIPE_SUBSYSTEM_WINDOWS_USER" LDFLAGS="-Wl,--enable-auto-import -no-undefined -Wl,-no-undefined" &&
##PYTHON=$PYDIR/python.exe ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --without-x --with-driver=osmesa --disable-static --enable-shared --disable-gl-osmesa --enable-driglx-direct --enable-opengl --enable-egl --enable-glu --enable-glw --with-dri-drivers=swrast --enable-gallium-swrast CFLAGS="-DPIPE_SUBSYSTEM_WINDOWS_USER" LDFLAGS="-Wl,--enable-auto-import -Wl,-no-undefined" &&
##PYTHON=$PYDIR/python.exe ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --disable-static --enable-shared --enable-opengl --enable-gles1 --enable-gles2 --disable-openvg --disable-dri --enable-glx --enable-osmesa --disable-egl --disable-gallium-egl --disable-gallium-gbm --disable-gallium-llvm --with-gallium-drivers=swrast --with-dri-drivers=swrast --with-egl-platforms= CFLAGS="-DPIPE_SUBSYSTEM_WINDOWS_USER" LDFLAGS="-Wl,--enable-auto-import" &&
##PYTHON=$PYDIR/python.exe PYTHON2=$PYDIR/python.exe PYTHONPATH=$MINGWPREFIX/python/Lib/site-packages ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --disable-static --enable-shared --enable-opengl --enable-gles1 --enable-gles2 --disable-openvg --disable-dri --enable-glx --enable-osmesa --disable-egl --disable-gallium-llvm --with-gallium-drivers=swrast --with-dri-drivers=swrast --with-egl-platforms= CFLAGS="-DPIPE_SUBSYSTEM_WINDOWS_USER" LDFLAGS="-Wl,--enable-auto-import -Wl,--compat-implib" &&
##PYTHON=$PYDIR/python.exe PYTHON2=$PYDIR/python.exe PYTHONPATH=$MINGWPREFIX/python/Lib/site-packages ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --disable-static --enable-shared --enable-opengl --enable-gles1 --enable-gles2 --disable-openvg --disable-dri --enable-glx --enable-osmesa --disable-egl --disable-gallium-llvm --with-gallium-drivers=swrast --with-dri-drivers=swrast --with-egl-platforms= CFLAGS="-DPIPE_SUBSYSTEM_WINDOWS_USER" LDFLAGS="-Wl,--enable-auto-import" &&
######configure: WARNING: Neither DRI nor Xlib-GLX enabled, disabling GLX
# wl-showstatus build-install &&
# #make install INSTALL=install.exe &&
# #make -C src/glu install &&
# #make -C src/mesa install INSTALL=install.exe &&
# make -C src/glsl &&
# make -C src/mapi/glapi &&
# #make -C src/glu &&
# #make -C src/mesa &&
# ( PYTHON=$PYDIR/python.exe make -C src/mesa || PYTHON=$PYDIR/python.exe PATH=$PATH:$PYDIR make -C src/mesa ) && 
# ( PYTHON=$PYDIR/python.exe PATH=$PATH:$PYDIR make install INSTALL=install || ( make -C src/mesa/drivers; make -C src/gallium/drivers; PYTHON=$PYDIR/python.exe PATH=$PATH:$PYDIR make install INSTALL=install ) ) &&
# mkdir -p $INSTALLPREFIX/bin &&
# find $INSTALLPREFIX/lib/ -iname \*.so | sed -e "s?\(.*/\)\([^/]*\)\.so?mv -f \1\2.so $INSTALLPREFIX/bin/\2.dll?" | sh &&
# find $INSTALLPREFIX/lib/ -iname \*.so.[0-9.]* -exec rm -f {} \; &&
# pexports -o $INSTALLPREFIX/bin/libGL.dll > libGL.def &&
# dlltool --def libGL.def --dllname $INSTALLPREFIX/bin/libGL.dll --output-lib $INSTALLPREFIX/lib/libGL.dll.a &&
# dlltool --def src/mesa/drivers/osmesa/osmesa.def --dllname $INSTALLPREFIX/bin/libOSMesa.dll --output-lib $INSTALLPREFIX/lib/libOSMesa.dll.a &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf Mesa-$VERSION
#####process_begin: CreateProcess(NULL, /bin/install -c -d /home/win32/inst_mesalib-7.9.2/include/GL, ...) failed.
#####src/glsl/g++.exe: error: builtin_function.cpp: No such file or directory
##$PYDIR/python.exe src/glsl/builtins/tools/generate_builtins.py src/glsl/builtin_compiler > src/glsl/builtin_function.cpp
##$PYDIR/python.exe src/gallium/auxiliary/indices/u_indices_gen.py > src/gallium/auxiliary/indices/u_indices_gen.c
##mv src/glsl/Makefile src/glsl/Makefile.bak
##sed -e "s?\(\$(PYTHON2)\).*builtins/tools/generate_builtins.py?$PYDIR/python.exe\1?" src/glsl/Makefile.bak > src/glsl/Makefile
##echo "#include /"../../gallium/state_trackers/clover/api/dispatch.hpp/"" > src/mesa/main/dispatch.h
##cp $(which ar.exe) i686-w64-mingw32-ar.exe
##cp $(which ranlib.exe) i686-w64-mingw32-ranlib.exe
##wl-showstatus build-install &&
### See also: http://fossies.org/unix/misc/MesaLib-9.0.tar.gz:a/Mesa-9.0/docs/install.html
##PYTHONPATH=$MINGWPREFIX/python/scons $PYDIR/python.exe $MINGWPREFIX/python/Scripts/scons.py osmesa mesagdi
##PYTHONPATH=$MINGWPREFIX/python/scons $PYDIR/python.exe $MINGWPREFIX/python/Scripts/scons.py osmesa mesagdi libgl-gdi
##PATH=$PATH:$MINGWPREFIX/python/Lib/site-packages PYTHONUSERBASE=$MINGWPREFIX/python/Lib/site-packages PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/python/scons:$MINGWPREFIX/python/Lib/site-packages $PYDIR/python.exe $MINGWPREFIX/python/Scripts/scons.py osmesa mesagdi libgl-gdi
##PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/python/scons $PYDIR/python.exe $MINGWPREFIX/python/Scripts/scons.py platform=windows toolchain=mingw build=release gles=no llvm=no opengl32 osmesa mesagdi libgl-gdi BF_SPLIT_SRC=1
##PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/python/Lib/site-packages:$MINGWPREFIX/python/scons PATH=$PATH:$PYDIR $PYDIR/python.exe $MINGWPREFIX/python/Scripts/scons.py platform=windows toolchain=mingw build=release gles=no llvm=no mesagdi libgl-gdi opengl32 osmesa
#####The command line is too long.
#####See: http://scons.org/wiki/LongCmdLinesOnWin32
##  PYTHONPATH=$MINGWPREFIX/python/scons:$MINGWPREFIX/python/Lib/site-packages $PYDIR/python.exe $MINGWPREFIX/python/Scripts/scons.py platform=windows toolchain=crossmingw machine=x86 statetrackers=mesa drivers=softpipe,trace winsys=gdi
#####See: http://blenderartists.org/forum/showthread.php?89986-Freestyle-for-Blender/page32&p=1490223&viewfull=1#post1490223
## make -i ACLOCAL="aclocal -I $MINGWPREFIX/share/aclocal"
## make -Csrc/util/ &&
## make -Csrc/glsl &&
#
#
#
### fix command line is too long issue in SConstruct
######The command line is too long
##patch -ulbf SConstruct << EOF
##--- SConstruct  2013-07-18 01:25:48 +0200
##+++ SConstruct  2013-07-18 09:31:06 +0200
##@@ -69,2 +69,35 @@
## #######################################################################
##+# Windows fix for long command line issue, see: http://scons.org/wiki/LongCmdLinesOnWin32
##+if env['PLATFORM'] == 'win32':
##+    import win32file
##+    import win32event
##+    import win32process
##+    import win32security
##+
##+    def my_spawn(sh, escape, cmd, args, spawnenv):
##+        for var in spawnenv:
##+            spawnenv[var] = spawnenv[var].encode('ascii', 'replace')
##+
##+        sAttrs = win32security.SECURITY_ATTRIBUTES()
##+        StartupInfo = win32process.STARTUPINFO()
##+        newargs = ' '.join(map(escape, args[1:]))
##+        cmdline = cmd + " " + newargs
##+
##+        # check for any special operating system commands
##+        if cmd == 'del':
##+            for arg in args[1:]:
##+                win32file.DeleteFile(arg)
##+            exit_code = 0
##+        else:
##+            # otherwise execute the command.
##+            hProcess, hThread, dwPid, dwTid = win32process.CreateProcess(None, cmdline, None, None, 1, 0, spawnenv, None, StartupInfo)
##+            win32event.WaitForSingleObject(hProcess, win32event.INFINITE)
##+            exit_code = win32process.GetExitCodeProcess(hProcess)
##+            win32file.CloseHandle(hProcess);
##+            win32file.CloseHandle(hThread);
##+        return exit_code
##+
##+    env['SPAWN'] = my_spawn
##+
##+#######################################################################
## # Environment setup
##EOF
## fix command line is too long issue in SConstruct
#####The command line is too long
#patch -ulbf SConstruct << EOF
#--- SConstruct  2013-07-18 01:25:48 +0200
#+++ SConstruct  2013-07-18 22:13:52 +0200
#@@ -69,2 +69,30 @@
# #######################################################################
#+# Windows fix for long command line issue, see: http://scons.org/wiki/LongCmdLinesOnWin32
#+import subprocess
#+
#+class ourSpawn:
#+    def ourspawn(self, sh, escape, cmd, args, env):
#+        newargs = ' '.join(args[1:])
#+        cmdline = cmd + " " + newargs
#+        startupinfo = subprocess.STARTUPINFO()
#+        #startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
#+        proc = subprocess.Popen(cmdline, stdin=subprocess.PIPE, stdout=subprocess.PIPE,
#+            stderr=subprocess.PIPE, startupinfo=startupinfo, shell = False, env = env)
#+        data, err = proc.communicate()
#+        rv = proc.wait()
#+        if rv:
#+            print "====="
#+            print err
#+            print "====="
#+        return rv
#+
#+def SetupSpawn( env ):
#+    if sys.platform == 'win32':
#+        buf = ourSpawn()
#+        buf.ourenv = env
#+        env['SPAWN'] = buf.ourspawn
#+
#+SetupSpawn(env)
#+
#+#######################################################################
# # Environment setup
#EOF
#
#
#
##Recognized targets:
##    egl-gallium
##    galahad
##    gallium
##    glcpp
##    glsl2
##    graw-gdi
##    graw-progs
##    i915
##    identity
##    libgl-gdi
##    mesa
##    mesagdi
##    opengl32
##    osmesa
##    pipe_barrier_test
##    rbug
##    softpipe
##    svga
##    trace
##    translate_test
##    u_cache_test
##    u_format_compatible_test
##    u_format_test
##    u_half_test
##    unit
#
#
#
##GET_HASH_GEN="$PYDIR/python.exe $(pwd)/src/mesa/main/get_hash_generator.py"
#
#
#
### fix src/util/u_thread.h
##patch -ulbf src/util/u_thread.h << EOF
##@@ -34,3 +34,3 @@
##
##-#ifdef HAVE_PTHREAD
##+#if defined(HAVE_PTHREAD) && !defined(_WIN32)
## #include <signal.h>
##@@ -42,3 +42,3 @@
##    thrd_t thread;
##-#ifdef HAVE_PTHREAD
##+#if defined(HAVE_PTHREAD) && !defined(_WIN32)
##    sigset_t saved_set, new_set;
##EOF
### fix configure.ac
##patch -ulbf configure.ac << EOF
##@@ -48,7 +48,2 @@
## dnl We only support native Windows builds (MinGW/MSVC) through SCons.
##-case "\$host_os" in
##-mingw*)
##-    AC_MSG_ERROR([MinGW build not supported through autoconf/automake, use SCons instead])
##-    ;;
##-esac
##
##@@ -2012,3 +2007,3 @@
##
##-DEFINES="\$DEFINES -DENABLE_SHADER_CACHE"
##+#DEFINES="\$DEFINES -DENABLE_SHADER_CACHE"
## AM_CONDITIONAL(NEED_MEGADRIVER, test -n "\$DRI_DIRS")
##EOF
##autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal &&
###PYTHON=$PYDIR/python.exe ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-static --enable-shared --enable-opengl --enable-gles1 --enable-gles2 --disable-openvg --disable-dri --enable-glx --enable-osmesa --disable-egl --disable-gallium-egl --disable-gallium-gbm --disable-gallium-llvm --with-gallium-drivers=swrast --with-dri-drivers=swrast --with-egl-platforms= CFLAGS="-DPIPE_SUBSYSTEM_WINDOWS_USER" LDFLAGS="-Wl,--enable-auto-import" &&
###PYTHON=$PYDIR/python.exe ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --disable-static --enable-shared --with-platforms= --enable-opengl --enable-gles1 --enable-gles2 --disable-dri --disable-glx --enable-glx-tls --enable-osmesa --disable-egl --disable-llvm --disable-gbm --with-gallium-drivers=swrast --with-dri-drivers=swrast CFLAGS="-DPIPE_SUBSYSTEM_WINDOWS_USER -I$MINGWPREFIX/include/mman-win32" LDFLAGS="-Wl,--enable-auto-import -Wl,--as-needed -lmman" &&
###PYTHON=$PYDIR/python.exe ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --disable-static --enable-shared --with-platforms= --enable-opengl --enable-gles1 --enable-gles2 --disable-dri --disable-glx --disable-glx-tls --enable-osmesa --disable-egl --disable-llvm --disable-gbm --with-gallium-drivers=swrast --with-dri-drivers=swrast CFLAGS="-DPIPE_SUBSYSTEM_WINDOWS_USER -I$MINGWPREFIX/include/mman-win32" LDFLAGS="-Wl,--enable-auto-import -Wl,--as-needed -lmman" &&
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --disable-static --enable-shared --enable-asm --with-platforms= --enable-opengl --enable-gles1 --enable-gles2 --disable-dri --disable-glx --disable-glx-tls --enable-osmesa --disable-egl --disable-llvm --disable-gbm --with-gallium-drivers=swrast --with-dri-drivers=swrast CFLAGS="-DPIPE_SUBSYSTEM_WINDOWS_USER -I$MINGWPREFIX/include/mman-win32" LDFLAGS="-Wl,--enable-auto-import -Wl,--as-needed -lmman" PYTHON2=$PYDIR/python.exe &&
## PATH=$PATH:$PYDIR make PYTHON2=$PYDIR/python.exe &&
##    echo OK
#
#
#
## fix src/mapi/glapi/gen/gl_table.py for writing to file
#patch -ulbf src/mapi/glapi/gen/gl_table.py << EOF
#@@ -28,2 +28,3 @@
# import argparse
#+import sys
#
#@@ -178,2 +179,6 @@
#                         help="Generate either a table or a remap_table")
#+    parser.add_argument('-t', '--tofile',
#+                        default='',
#+                        metavar="tofile",
#+                        help="Write output to file")
#     return parser.parse_args()
#@@ -185,2 +190,5 @@
#
#+    if args.tofile != "":
#+        sys.stdout = open(args.tofile, 'w')
#+
#     api = gl_XML.parse_GL_API(args.file_name)
#EOF
## fix src/mapi/glapi/gen/gl_genexec.py for writing to file
#patch -ulbf src/mapi/glapi/gen/gl_genexec.py << EOF
#@@ -28,2 +28,3 @@
# import collections
#+import sys
# import license
#@@ -261,2 +262,6 @@
#                         help='an xml file describing an API')
#+    parser.add_argument('-t', '--tofile',
#+                        default='',
#+                        metavar="tofile",
#+                        help="Write output to file")
#     return parser.parse_args()
#@@ -267,2 +272,4 @@
#     args = _parser()
#+    if args.tofile != "":
#+        sys.stdout = open(args.tofile, 'w')
#     printer = PrintCode()
#EOF
## fix src/mapi/glapi/gen/gl_enums.py for writing to file
#patch -ulbf src/mapi/glapi/gen/gl_enums.py << EOF
#@@ -28,2 +28,3 @@
# import argparse
#+import sys
#
#@@ -278,2 +279,6 @@
#                         help="Choose an xml file to parse.")
#+    parser.add_argument('-t', '--tofile',
#+                        default='',
#+                        metavar="tofile",
#+                        help="Write output to file")
#     return parser.parse_args()
#@@ -283,2 +288,4 @@
#     args = _parser()
#+    if args.tofile != "":
#+        sys.stdout = open(args.tofile, 'w')
#     xml = ET.parse(args.input_file)
#EOF
## fix src/mapi/glapi/gen/gl_apitemp.py for writing to file
#patch -ulbf src/mapi/glapi/gen/gl_apitemp.py << EOF
#@@ -27,2 +27,3 @@
# import argparse
#+import sys
#
#@@ -315,2 +316,6 @@
#                         help="Enable OpenGL ES compatibility")
#+    parser.add_argument('-t', '--tofile',
#+                        default='',
#+                        metavar="tofile",
#+                        help="Write output to file")
#     return parser.parse_args()
#@@ -321,2 +326,4 @@
#     args = _parser()
#+    if args.tofile != "":
#+        sys.stdout = open(args.tofile, 'w')
#
#EOF
## fix src/mapi/glapi/gen/gl_procs.py for writing to file
#patch -ulbf src/mapi/glapi/gen/gl_procs.py << EOF
#@@ -27,2 +27,3 @@
# import argparse
#+import sys
#
#@@ -177,2 +177,6 @@
#                         help="filter functions for es")
#+    parser.add_argument('-t', '--tofile',
#+                        default='',
#+                        metavar="tofile",
#+                        help="Write output to file")
#     return parser.parse_args()
#@@ -183,2 +187,4 @@
#     args = _parser()
#+    if args.tofile != "":
#+        sys.stdout = open(args.tofile, 'w')
#     api = gl_XML.parse_GL_API(args.file_name, glX_XML.glx_item_factory())
#EOF
## fix src/mapi/glapi/gen/remap_helper.py for writing to file
#patch -ulbf src/mapi/glapi/gen/remap_helper.py << EOF
#@@ -26,2 +26,3 @@
# import argparse
#+import sys
#
#@@ -133,2 +134,6 @@
#                         help="An xml description file.")
#+    parser.add_argument('-t', '--tofile',
#+                        default='',
#+                        metavar="tofile",
#+                        help="Write output to file")
#     return parser.parse_args()
#@@ -139,2 +144,4 @@
#     args = _parser()
#+    if args.tofile != "":
#+        sys.stdout = open(args.tofile, 'w')
#
#EOF
## fix src/mapi/glapi/gen/SConscript for writing to file
#mv src/mapi/glapi/gen/SConscript src/mapi/glapi/gen/SConscript.bak &&
#sed -e "s/\(python_cmd.* \)>\( \$TARGET\)/\1-t\2/" src/mapi/glapi/gen/SConscript.bak > src/mapi/glapi/gen/SConscript
#
## fix src/mesa/SConscript for writing to file
#mv src/mesa/SConscript src/mesa/SConscript.bak &&
#sed -e "s/\(python_cmd.* \)>\( \$TARGET\)/\1-t\2/" src/mesa/SConscript.bak > src/mesa/SConscript
#
##patch -ulbf src/mesa/main/format_pack.py << EOF
##patch -ulbf src/mesa/main/get_hash_generator.py << EOF
##patch -ulbf src/mesa/main/format_info.py << EOF
##patch -ulbf src/mesa/main/format_unpack.py << EOF
##patch -ulbf src/mesa/main/format_fallback.py << EOF
##@@ -26,2 +26,3 @@
## import argparse
##+import sys
##
##@@ -133,2 +134,6 @@
##
##+    parser.add_argument('-t', '--tofile',
##+                        default='',
##+                        metavar="tofile",
##+                        help="Write output to file")
##     return parser.parse_args()
##@@ -139,2 +144,4 @@
##     args = _parser()
##+    if args.tofile != "":
##+        sys.stdout = open(args.tofile, 'w')
##
##EOF
#
### fix missing i686-w64-mingw32-ar/x86_64-w64-mingw32-ar
##mv scons/crossmingw.py scons/crossmingw.py.bak &&
##sed -e "s/\(env\[.*= *\)mingw_prefix *+ */\1/" scons/crossmingw.py.bak > scons/crossmingw.py
#
##export BUILDDEPENDENCIES=scons,mako
##export OPTIONALBUILDDEPENDENCIES=
##PYTHONPATH=$MINGWPREFIX/python/scons $PYDIR/python.exe $MINGWPREFIX/python/Scripts/scons.py --prefix=$INSTALLPREFIX
##PYTHONPATH=$MINGWPREFIX/python/scons:$MINGWPREFIX/python/Lib/site-packages $PYDIR/python.exe $MINGWPREFIX/python/Scripts/scons.py -j1 platform=windows toolchain=crossmingw machine=x86 libgl-gdi
##SCONS_LIB_DIR=$MINGWPREFIX/python/scons PYTHONPATH=$MINGWPREFIX/python/Lib/site-packages $PYDIR/python.exe $MINGWPREFIX/python/Scripts/scons.py -j1 platform=windows build=release toolchain=crossmingw machine=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo x86_64; else echo x86; fi) libgl-gdi
##SCONS_LIB_DIR=$MINGWPREFIX/python/scons PYTHONPATH=$MINGWPREFIX/python/Lib/site-packages $PYDIR/python.exe $MINGWPREFIX/python/Scripts/scons.py platform=windows build=release toolchain=crossmingw machine=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo x86_64; else echo x86; fi) libgl-gdi



#export NAME="Mesa"
#export STATUS=
#export URL=http://www.mesa3d.org/
#export BASENAME=mesalib
#export DESCRIPTION="Mesa is an open-source implementation of the OpenGL specification - a system for rendering interactive 3D graphics."
#export CATEGORY=graphics
#export TYPE=library
##export VERSION=17.1.10
##export VERSIONDATE=20170926
##export VERSION=17.2.0
##export VERSIONDATE=20170905
##export VERSION=17.2.1
##export VERSIONDATE=20170918
##export VERSION=17.2.2
##export VERSIONDATE=20171003
##export VERSION=17.2.3
##export VERSIONDATE=20171019
##export VERSION=17.2.4
##export VERSIONDATE=20171031
##export VERSION=17.2.5
##export VERSIONDATE=20171111
##export VERSION=17.2.6
##export VERSIONDATE=20171126
##export VERSION=17.2.8
##export VERSIONDATE=20171223
##export VERSION=17.3.0
##export VERSIONDATE=20171208
##export VERSION=17.3.1
##export VERSIONDATE=20171222
##export VERSION=17.3.2
##export VERSIONDATE=20180110
##export VERSION=17.3.3
##export VERSIONDATE=20180119
##export VERSION=17.3.4
##export VERSIONDATE=20180215
##export VERSION=17.3.5
##export VERSIONDATE=20180220
##export VERSION=17.3.6
##export VERSIONDATE=20180227
##export VERSION=17.3.7
##export VERSIONDATE=20180322
##export VERSION=17.3.8
##export VERSIONDATE=20180404
##export VERSION=17.3.9
##export VERSIONDATE=20180418
##export VERSION=18.0.0
##export VERSIONDATE=20180328
##export VERSION=18.0.1
##export VERSIONDATE=20180419
##export VERSION=18.0.2
##export VERSIONDATE=20180429
##export VERSION=18.0.3
##export VERSIONDATE=20180507
##export VERSION=18.0.4
##export VERSIONDATE=20180518
##export VERSION=18.0.5
##export VERSIONDATE=20180603
##export VERSION=18.1.0
##export VERSIONDATE=20180519
##export VERSION=18.1.1
##export VERSIONDATE=20180602
##export VERSION=18.1.2
##export VERSIONDATE=20180616
##export VERSION=18.1.3
##export VERSIONDATE=20180630
##export VERSION=18.1.4
##export VERSIONDATE=20180714
##export VERSION=18.1.5
##export VERSIONDATE=20180727
##export VERSION=18.1.6
##export VERSIONDATE=20180814
##export VERSION=18.1.7
##export VERSIONDATE=20180825
##export VERSION=18.1.8
##export VERSIONDATE=20180908
##export VERSION=18.1.9
##export VERSIONDATE=20180925
##export VERSION=18.2.0
##export VERSIONDATE=20180908
##export VERSION=18.2.1
##export VERSIONDATE=20180921
##export VERSION=18.2.3
##export VERSIONDATE=20181020
##export VERSION=18.2.6
##export VERSIONDATE=20181129
##export VERSION=18.2.8
##export VERSIONDATE=20181228
##export VERSION=18.3.1
##export VERSIONDATE=20181212
##export VERSION=18.3.2
##export VERSIONDATE=20190117
##export VERSION=18.3.4
##export VERSIONDATE=20190219
##export VERSION=18.3.5
##export VERSIONDATE=20190319
##export VERSION=19.0.0
##export VERSIONDATE=20190314
##export VERSION=19.0.1
##export VERSIONDATE=20190328
##export VERSION=19.0.2
##export VERSIONDATE=20190412
##export VERSION=19.0.5
##export VERSIONDATE=20190522
##export VERSION=19.0.6
##export VERSIONDATE=20190606
##export VERSION=19.0.7
##export VERSIONDATE=20190625
##export VERSION=19.0.8
##export VERSIONDATE=20190627
##export VERSION=19.1.0
##export VERSIONDATE=20190612
##export VERSION=19.1.2
##export VERSIONDATE=20190709
##export VERSION=19.1.3
##export VERSIONDATE=20190724
##export VERSION=19.1.4
##export VERSIONDATE=20190808
##export VERSION=19.1.5
##export VERSIONDATE=20190823
##export VERSION=19.1.6
##export VERSIONDATE=20190903
##export VERSION=19.1.7
##export VERSIONDATE=20190917
##export VERSION=19.1.8
##export VERSIONDATE=20191022
##export VERSION=19.2.0
##export VERSIONDATE=20190926
##export VERSION=19.2.2
##export VERSIONDATE=20191025
##export VERSION=19.2.4
##export VERSIONDATE=20191114
##export VERSION=19.2.5
##export VERSIONDATE=20191121
##export VERSION=19.2.6
##export VERSIONDATE=20191122
##export VERSION=19.3.0
##export VERSIONDATE=20191213
##export VERSION=19.3.2
##export VERSIONDATE=20200110
##export VERSION=19.3.4
##export VERSIONDATE=20200214
##export VERSION=19.3.5
##export VERSIONDATE=20200310
##export VERSION=20.0.0
##export VERSIONDATE=20200220
##export VERSION=20.0.1
##export VERSIONDATE=20200306
##export VERSION=20.0.2
##export VERSIONDATE=20200319
#export VERSION=20.0.3
#export VERSIONDATE=20200402
#wl-showstatus --package-version
#export DEPENDENCIES=talloc,libxt,libxext
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=scons,mako
#export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=docs/COPYING
#export LICENSETYPE=LGPL
#export DOWNLOADURL="https://mesa.freedesktop.org/archive/ mesa-"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://mesa.freedesktop.org/archive/mesa-$VERSION.tar.xz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#tar xJ --force-local -f $TARBALLDIR/$BASENAME/mesa-$VERSION.tar.xz
#cd mesa-$VERSION
## fix missing i686-w64-mingw32-ar/x86_64-w64-mingw32-ar
#mv scons/crossmingw.py scons/crossmingw.py.bak &&
#sed -e "s/\(env\[.*= *\)mingw_prefix *+ */\1/" scons/crossmingw.py.bak > scons/crossmingw.py
##BUILDARGS="platform=windows build=release toolchain=crossmingw machine=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo x86_64; else echo x86; fi) gles=no swr=no MSVC_VERSION=none mesa"
#BUILDARGS="platform=windows build=release toolchain=crossmingw machine=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo x86_64; else echo x86; fi) gles=no swr=no MSVC_VERSION=none libgl-gdi"
##BUILDARGS="platform=windows build=release toolchain=crossmingw machine=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo x86_64; else echo x86; fi) gles=yes swr=no MSVC_VERSION=none gallium osmesa glcpp glsl_compiler ws_gdi ws_null"
#wl-showstatus configure-build &&
# ( SCONS_LIB_DIR=$MINGWPREFIX/python/scons PYTHONPATH=$MINGWPREFIX/python/Lib/site-packages $PY2DIR/python.exe $MINGWPREFIX/python/Scripts/scons.py $BUILDARGS -i ; (
#   # fix error in SConstruct
#   ####The command line is too long
#patch -ulbf SConstruct << EOF
#--- SConstruct  2013-07-18 01:25:48 +0200
#+++ SConstruct  2013-07-18 22:13:52 +0200
#@@ -69,2 +69,30 @@
# #######################################################################
#+# Windows fix for long command line issue, see: http://scons.org/wiki/LongCmdLinesOnWin32
#+import subprocess
#+
#+class ourSpawn:
#+    def ourspawn(self, sh, escape, cmd, args, env):
#+        newargs = ' '.join(args[1:])
#+        cmdline = cmd + " " + newargs
#+        startupinfo = subprocess.STARTUPINFO()
#+        #startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
#+        proc = subprocess.Popen(cmdline, stdin=subprocess.PIPE, stdout=subprocess.PIPE,
#+            stderr=subprocess.PIPE, startupinfo=startupinfo, shell = False, env = env)
#+        data, err = proc.communicate()
#+        rv = proc.wait()
#+        if rv:
#+            print "====="
#+            print err
#+            print "====="
#+        return rv
#+
#+def SetupSpawn( env ):
#+    if sys.platform == 'win32':
#+        buf = ourSpawn()
#+        buf.ourenv = env
#+        env['SPAWN'] = buf.ourspawn
#+
#+SetupSpawn(env)
#+
#+#######################################################################
# # Environment setup
#EOF
#  SCONS_LIB_DIR=$MINGWPREFIX/python/scons PYTHONPATH=$MINGWPREFIX/python/Lib/site-packages $PY2DIR/python.exe $MINGWPREFIX/python/Scripts/scons.py $BUILDARGS || (
#   mv SConstruct.orig SConstruct &&
#   SCONS_LIB_DIR=$MINGWPREFIX/python/scons PYTHONPATH=$MINGWPREFIX/python/Lib/site-packages $PY2DIR/python.exe $MINGWPREFIX/python/Scripts/scons.py -j1 $BUILDARGS
# ))) &&
# ## manually make DLL
# #( echo "EXPORTS" && ${NM:-nm} -f posix --defined-only -p build/windows-x86_64/mesa/libmesa.a | sed -n -e "s/^_*\([^ ]*\) T .*$/\1/p" | grep "^mesa" ) > libmesa.def &&
# #${CC:-gcc} -shared -s -mwindows -def libmesa.def -o build/windows-x86_64/mesa/libmesa.dll build/windows-x86_64/mesa/libmesa.a -Wl,--out-implib,build/windows-x86_64/mesa/libmesa.dll.a -lopengl32 &&
# wl-showstatus install &&
# mkdir -p $INSTALLPREFIX/include &&
# #cp -rf include/EGL $INSTALLPREFIX/include &&
#    echo OK
#####See also: https://github.com/msys2/MINGW-packages/blob/master/mingw-w64-mesa/msys2-mingw_w64-fixes.patch



#export NAME="Mesa"
#export STATUS=
#export URL=http://www.mesa3d.org/
#export BASENAME=mesalib
#export DESCRIPTION="Mesa is an open-source implementation of the OpenGL specification - a system for rendering interactive 3D graphics."
#export CATEGORY=graphics
#export TYPE=library
##export VERSION=19.3.0
##export VERSIONDATE=20191213
##export VERSION=19.3.3
##export VERSIONDATE=20200129
##export VERSION=19.3.5
##export VERSIONDATE=20200310
##export VERSION=20.0.0
##export VERSIONDATE=20200220
##export VERSION=20.0.1
##export VERSIONDATE=20200306
##export VERSION=20.0.2
##export VERSIONDATE=20200319
##export VERSION=20.0.3
##export VERSIONDATE=20200402
##export VERSION=20.0.4
##export VERSIONDATE=20200415
##export VERSION=20.0.5
##export VERSIONDATE=20200423
##export VERSION=20.0.6
##export VERSIONDATE=20200430
##export VERSION=20.0.7
##export VERSIONDATE=20200515
##export VERSION=20.0.8
##export VERSIONDATE=20200612
##export VERSION=20.1.0
##export VERSIONDATE=20200528
##export VERSION=20.1.1
##export VERSIONDATE=20200611
##export VERSION=20.1.2
##export VERSIONDATE=20200625
##export VERSION=20.1.3
##export VERSIONDATE=20200709
##export VERSION=20.1.4
##export VERSIONDATE=20200723
##export VERSION=20.1.5
##export VERSIONDATE=20200806
##export VERSION=20.1.6
##export VERSIONDATE=20200820
##export VERSION=20.1.7
##export VERSIONDATE=20200903
##export VERSION=20.1.8
##export VERSIONDATE=20200917
##export VERSION=20.1.9
##export VERSIONDATE=20201001
##export VERSION=20.1.10
##export VERSIONDATE=20201015
##export VERSION=20.2.0
##export VERSIONDATE=20200929
##export VERSION=20.2.1
##export VERSIONDATE=20201015
##export VERSION=20.2.2
##export VERSIONDATE=20201107
##export VERSION=20.2.3
##export VERSIONDATE=20201124
##export VERSION=20.2.4
##export VERSIONDATE=20201205
##export VERSION=20.2.6
##export VERSIONDATE=20201217
##export VERSION=20.3.0
##export VERSIONDATE=20201204
##export VERSION=20.3.1
##export VERSIONDATE=20201217
##export VERSION=20.3.2
##export VERSIONDATE=20201231
#export VERSION=20.3.3
#export VERSIONDATE=20210114
#####src/mesa/drivers/osmesa/osmesa.dll.p/osmesa.c.obj:osmesa.c:(.text+0xb50): undefined reference to `__imp_OSMesaCreateContextAttribs'
#wl-showstatus --package-version
#export DEPENDENCIES=talloc,libxt,libxext
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=meson,ninja,mako
#export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=docs/COPYING
#export LICENSETYPE=LGPL
##export DOWNLOADURL="https://mesa.freedesktop.org/archive/ mesa-"
#export DOWNLOADURL="https://gitlab.freedesktop.org/mesa/mesa/-/tags mesa-"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
##export DOWNLOADSOURCEURL=https://mesa.freedesktop.org/archive/mesa-$VERSION.tar.xz
#export DOWNLOADSOURCEURL=https://gitlab.freedesktop.org/mesa/mesa/-/archive/mesa-$VERSION/mesa-mesa-$VERSION.tar.bz2
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
##tar xJ --force-local -f $TARBALLDIR/$BASENAME/mesa-$VERSION.tar.xz
##cd mesa-$VERSION
#tar xj --force-local -f $TARBALLDIR/$BASENAME/mesa-mesa-$VERSION.tar.bz2
#cd mesa-mesa-$VERSION
## use MinGW-specific .def files
#cp src/gallium/state_trackers/wgl/opengl32.mingw.def src/gallium/state_trackers/wgl/opengl32.def
#cp src/gallium/targets/osmesa/osmesa.mingw.def src/gallium/targets/osmesa/osmesa.def
#mkdir -p build_both &&
# wl-showstatus configure &&
# PKG_CONFIG= PATH=$PYDIR:$PATH PYTHONPATH=$MINGWPREFIX/python/Lib/site-packages:$MINGWPREFIX/lib${PYTHONPATH:+:$PYTHONPATH} $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Dshared-glapi=false -Dshared-llvm=false -Dplatforms=windows -Dosmesa=classic -Dllvm=false -Dglx=disabled -Dvalgrind=false -Dlibunwind=false -Dbuild-tests=false -Dinstall-intel-gpu-tests=false . build_both &&
# #PKG_CONFIG= PATH=$PYDIR:$PATH PYTHONPATH=$MINGWPREFIX/python/Lib/site-packages:$MINGWPREFIX/lib${PYTHONPATH:+:$PYTHONPATH} $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Dshared-glapi=true -Dshared-llvm=false -Dplatforms=windows -Dosmesa=classic -Dllvm=false -Dglx=disabled -Dvalgrind=false -Dlibunwind=false -Dbuild-tests=false -Dinstall-intel-gpu-tests=false . build_both &&
# #PKG_CONFIG= PATH=$PYDIR:$PATH PYTHONPATH=$MINGWPREFIX/python/Lib/site-packages:$MINGWPREFIX/lib${PYTHONPATH:+:$PYTHONPATH} $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Dshared-glapi=false -Dshared-llvm=false -Dplatforms=windows,surfaceless -Dosmesa=classic -Dllvm=false -Dopengl=false -Dgles1=false -Degl=false -Dshared-glapi=true -Dvulkan-drivers=auto -Dgbm=false -Dglx=disabled -Dvalgrind=false -Dlibunwind=false -Dbuild-tests=false -Dinstall-intel-gpu-tests=false . build_both &&
# #-Dosmesa=gallium -Dgallium-nine=true
# #-Dplatforms=windows,surfaceless
# ## fix slash/backslash path issue when calling Python from Ninja
# #sed -i.bak -e "s/join_paths/os.path.join/g; /COMMAND =.*python\.exe/ s?\"/\([a-zA-Z]\)/?\"\1:/?; /COMMAND =.*python\.exe/ s?/?\\\\?g" build_*/build.ninja &&
# ## fix already defined INTERFACE (version <= 20.1.0)
# #mv build_both/src/compiler/glsl/glsl_parser.h build_both/src/compiler/glsl/glsl_parser.h.bak &&
# #echo "#undef INTERFACE" > build_both/src/compiler/glsl/glsl_parser.h &&
# #cat build_both/src/compiler/glsl/glsl_parser.h.bak >> build_both/src/compiler/glsl/glsl_parser.h &&
# #mv build_both/src/compiler/glsl/glsl_parser.cpp build_both/src/compiler/glsl/glsl_parser.cpp.bak &&
# #echo "#undef INTERFACE" > build_both/src/compiler/glsl/glsl_parser.cpp &&
# #cat build_both/src/compiler/glsl/glsl_parser.cpp.bak >> build_both/src/compiler/glsl/glsl_parser.cpp &&
# wl-showstatus build-install &&
# PATH=$PATH:$PYDIR PYTHONPATH=$MINGWPREFIX/python/Lib/site-packages:$MINGWPREFIX/lib${PYTHONPATH:+:$PYTHONPATH} ninja -Cbuild_both install &&
#    echo OK && find . -name '*.a'
## wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf mesa-mesa-$VERSION



#PATH=$MINGWPREFIX/share/winflexbison:$PATH PYTHONPATH=$MINGWPREFIX/python/scons:$MINGWPREFIX/python/Lib/site-packages:$MINGWPREFIX/lib${PYTHONPATH:+:$PYTHONPATH} $PY2DIR/python.exe $MINGWPREFIX/python/Scripts/scons.py --prefix=$INSTALLPREFIX



#export NAME="Mesa"
#export STATUS=
#export URL=http://www.mesa3d.org/
#export BASENAME=mesalib
#export DESCRIPTION="Mesa is an open-source implementation of the OpenGL specification - a system for rendering interactive 3D graphics."
#export CATEGORY=graphics
#export TYPE=library
##export VERSION=20.3.3
##export VERSIONDATE=20210114
#####src/mesa/drivers/osmesa/osmesa.dll.p/osmesa.c.obj:osmesa.c:(.text+0xb50): undefined reference to `__imp_OSMesaCreateContextAttribs'
#export VERSION=20.3.4
#export VERSIONDATE=20210130
##export VERSION=20.3.5
##export VERSIONDATE=20210325
#####src/util/disk_cache.h:98:4: error: unknown type name 'Dl_info'
#wl-showstatus --package-version
#export DEPENDENCIES=zlib,talloc,libxt,libxext
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=meson,ninja,mako
#export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=docs/license.rst
#export LICENSETYPE=MIT
##export DOWNLOADURL="https://mesa.freedesktop.org/archive/ mesa-"
#export DOWNLOADURL="https://gitlab.freedesktop.org/mesa/mesa/-/tags mesa-"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
##export DOWNLOADSOURCEURL=https://mesa.freedesktop.org/archive/mesa-$VERSION.tar.xz
#export DOWNLOADSOURCEURL=https://gitlab.freedesktop.org/mesa/mesa/-/archive/mesa-$VERSION/mesa-mesa-$VERSION.tar.bz2
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#tar xj --force-local -f $TARBALLDIR/$BASENAME/mesa-mesa-$VERSION.tar.bz2
#cd mesa-mesa-$VERSION
#mkdir -p build_both &&
# wl-showstatus configure &&
# PKG_CONFIG= PATH=$PYDIR:$MINGWPREFIX/share/winflexbison:$PATH PYTHONPATH=$MINGWPREFIX/python/Lib/site-packages:$MINGWPREFIX/lib${PYTHONPATH:+:$PYTHONPATH} $(which meson.py) --prefix $INSTALLPREFIX/share/mesa --backend ninja --buildtype release --strip --default-library shared -Dosmesa=gallium -Dosmesa-bits=8 -Dshared-glapi=enabled -Dopengl=true -Dgles1=enabled -Dgles2=enabled -Degl=disabled -Ddri3=disabled -Dgallium-drivers=swrast -Dvulkan-drivers= -Dopencl-spirv=true -Dshader-cache=disabled -Dgbm=disabled -Dglx=disabled -Dlmsensors=disabled -Dllvm=disabled -Dvalgrind=disabled -Dxlib-lease=disabled -Dzstd=enabled -Dselinux=false -Dlibunwind=disabled -Dbuild-tests=false -Dswr-arches="avx,avx2" -Dshared-swr=true . build_both &&
# #-Dvulkan-drivers=swrast
# #-Dgallium-opencl=icd 
# #-Dosmesa=gallium -Dvulkan-icd-dir= -Dglvnd=true -Dllvm=enabled -Dshared-llvm=enabled
# wl-showstatus build-install &&
# PATH=$PATH:$PYDIR PYTHONPATH=$MINGWPREFIX/python/Lib/site-packages:$MINGWPREFIX/lib${PYTHONPATH:+:$PYTHONPATH} ninja -Cbuild_both install &&
# # fix missing library prefix
# for F in $INSTALLPREFIX/share/mesa/lib/*.a; do
#  if ! basename $F | grep -q "^lib"; then
#   cp -f $F $(echo $F | sed -e "s?/\([^/]*\.a\)?/lib\1?")
#  fi
# done &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf mesa-mesa-$VERSION



export NAME="Mesa"
export STATUS=
export URL=http://www.mesa3d.org/
export BASENAME=mesalib
export DESCRIPTION="Mesa is an open-source implementation of the OpenGL specification - a system for rendering interactive 3D graphics."
export CATEGORY=graphics
export TYPE=library
#export VERSION=21.0.0
#export VERSIONDATE=20210312
#export VERSION=21.0.1
#export VERSIONDATE=20210325
#export VERSION=21.0.2
#export VERSIONDATE=20210408
#export VERSION=21.0.3
#export VERSIONDATE=20210422
#export VERSION=21.1.0
#export VERSIONDATE=20210506
#export VERSION=21.1.1
#export VERSIONDATE=20210520
#export VERSION=21.1.2
#export VERSIONDATE=20210603
#export VERSION=21.1.3
#export VERSIONDATE=20210619
#export VERSION=21.1.4
#export VERSIONDATE=20210701
#export VERSION=21.1.5
#export VERSIONDATE=20210715
#export VERSION=21.1.6
#export VERSIONDATE=20210729
#export VERSION=21.1.7
#export VERSIONDATE=20210812
#export VERSION=21.1.8
#export VERSIONDATE=20210909
#export VERSION=21.2.0
#export VERSIONDATE=20210805
#export VERSION=21.2.1
#export VERSIONDATE=20210820
#export VERSION=21.2.2
#export VERSIONDATE=20210922
#export VERSION=21.2.3
#export VERSIONDATE=20210930
#export VERSION=21.2.4
#export VERSIONDATE=20211015
#export VERSION=21.2.5
#export VERSIONDATE=20211029
#export VERSION=21.2.6
#export VERSIONDATE=20211125
#export VERSION=21.3.0
#export VERSIONDATE=20211118
#export VERSION=21.3.1
#export VERSIONDATE=20211202
#export VERSION=21.3.2
#export VERSIONDATE=20211218
#export VERSION=21.3.3
#export VERSIONDATE=20211230
#export VERSION=21.3.4
#export VERSIONDATE=20220114
#export VERSION=21.3.5
#export VERSIONDATE=20220127
#export VERSION=21.3.6
#export VERSIONDATE=20220210
#export VERSION=21.3.7
#export VERSIONDATE=20220224
#export VERSION=21.3.8
#export VERSIONDATE=20220319
#export VERSION=21.3.9
#export VERSIONDATE=20220609
#export VERSION=22.0.0
#export VERSIONDATE=20220310
#export VERSION=22.0.1
#export VERSIONDATE=20220330
#export VERSION=22.0.2
#export VERSIONDATE=20220422
#export VERSION=22.0.3
#export VERSIONDATE=20220506
#export VERSION=22.0.4
#export VERSIONDATE=20220521
#export VERSION=22.0.5
#export VERSIONDATE=20220602
#export VERSION=22.1.0
#export VERSIONDATE=20220519
#export VERSION=22.1.1
#export VERSIONDATE=20220602
#export VERSION=22.1.2
#export VERSIONDATE=20220617
#export VERSION=22.1.3
#export VERSIONDATE=20220630
#export VERSION=22.1.4
#export VERSIONDATE=20220716
#export VERSION=22.1.5
#export VERSIONDATE=20220804
#export VERSION=22.1.6
#export VERSIONDATE=20220811
#export VERSION=22.1.7
#export VERSIONDATE=20220818
####ModuleNotFoundError: No module named 'typing_extensions'
#export VERSION=22.2.0
#export VERSIONDATE=20220921
#export VERSION=22.2.1
#export VERSIONDATE=20221012
export VERSION=22.2.2
export VERSIONDATE=20221020
#export VERSION=22.2.3
#export VERSIONDATE=20221108
#export VERSION=22.2.4
#export VERSIONDATE=20221117
#export VERSION=22.2.5
#export VERSIONDATE=20221210
#export VERSION=22.3.0
#export VERSIONDATE=20221201
#export VERSION=22.3.2
#export VERSIONDATE=20221230
#export VERSION=22.3.3
#export VERSIONDATE=20230112
#export VERSION=22.3.4
#export VERSIONDATE=20230127
#export VERSION=22.3.5
#export VERSIONDATE=20230209
#export VERSION=22.3.6
#export VERSIONDATE=20230223
#export VERSION=23.0.0
#export VERSIONDATE=20230223
wl-showstatus --package-version
export DEPENDENCIES=zlib,talloc,libxt,libxext,libdl,pcre
#export DEPENDENCIES=zlib,talloc,libxt,libxext,libdl,pcre,libclc
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=meson,ninja,mako,sphinx
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=docs/license.rst
export LICENSETYPE=MIT
#export DOWNLOADURL="https://mesa.freedesktop.org/archive/ mesa-"
export DOWNLOADURL="https://gitlab.freedesktop.org/mesa/mesa/-/tags mesa-"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://mesa.freedesktop.org/archive/mesa-$VERSION.tar.xz
export DOWNLOADSOURCEURL=https://gitlab.freedesktop.org/mesa/mesa/-/archive/mesa-$VERSION/mesa-mesa-$VERSION.tar.bz2
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
tar xj --force-local -f $TARBALLDIR/$BASENAME/mesa-mesa-$VERSION.tar.bz2
cd mesa-mesa-$VERSION
## fix undeclared at_quick_exit (version >= 21.3.1)
#####stdlib.h:43:14: error: at_quick_exit' has not been declared in 'std'
#for F in $(find -name '*.cpp'); do
# mv $F $F.bak &&
# echo "#include <cstdlib>" > $F &&
# cat $F.bak >> $F
#done
## fix undeclared ::quick_exit
#for F in $(find -name '*.cpp'); do
# mv $F $F.bak &&
# echo "#include <stdlib.h>" > $F &&
# cat $F.bak >> $F
#done
# fix missing timespec_get in include/c11/threads_win32.h (version >= 22.0.3)
patch -ulbf include/c11/threads_win32.h << EOF
@@ -70,2 +70,5 @@
 #endif
+#if defined(__MINGW32__) && !defined(_UCRT)
+#undef HAVE_TIMESPEC_GET
+#endif

EOF
## fix meson.build (version >= 21.0.0)
#patch -ulbf meson.build << EOF
#@@ -927,3 +927,3 @@
# if _shader_cache != 'disabled'
#-  if host_machine.system() == 'windows'
#+  if host_machine.system() == 'windows_REMOVETHIS'
#     if _shader_cache == 'enabled'
#EOF
# fix looking for dumpbin (version >= 21.1.6)
patch -ulbf meson.build << EOF
@@ -2025,3 +2025,3 @@

-if host_machine.system() == 'windows'
+if host_machine.system() == 'windows_MSVC'
   prog_dumpbin = find_program('dumpbin', required : false)
EOF
mkdir -p build_both &&
 wl-showstatus configure &&
 #PKG_CONFIG= PATH=$PYDIR:$MINGWPREFIX/share/winflexbison:$PATH PYTHONPATH=$MINGWPREFIX/python/Lib/site-packages:$MINGWPREFIX/lib${PYTHONPATH:+:$PYTHONPATH} $(which meson.py) --prefix $INSTALLPREFIX/share/mesa --backend ninja --buildtype release --strip --default-library shared -Dosmesa=true -Dosmesa-bits=8 -Dshared-glapi=enabled -Dopengl=true -Dgles1=enabled -Dgles2=enabled -Degl=disabled -Ddri3=disabled -Dgallium-drivers=swrast -Dvulkan-drivers= -Dopencl-spirv=true -Dshader-cache=false -Dgbm=disabled -Dglx=disabled -Dlmsensors=disabled -Dllvm=disabled -Dvalgrind=disabled -Dxlib-lease=disabled -Dzstd=enabled -Dselinux=false -Dlibunwind=disabled -Dbuild-tests=false -Dswr-arches="avx,avx2" -Dshared-swr=true -Dmicrosoft-clc=disabled -Dc_args="-I$MINGWPREFIX/include/libdl-win32" -Dcpp_args="-I$MINGWPREFIX/include/libdl-win32" . build_both &&
 PKG_CONFIG= PATH=$PYDIR:$MINGWPREFIX/share/winflexbison:$PATH PYTHONPATH=$MINGWPREFIX/python/Lib/site-packages:$MINGWPREFIX/lib${PYTHONPATH:+:$PYTHONPATH} $(which meson.py) --prefix $INSTALLPREFIX/share/mesa --backend ninja --buildtype release --strip --default-library shared -Dosmesa=true -Dosmesa-bits=8 -Dshared-glapi=enabled -Dopengl=true -Dgles1=enabled -Dgles2=enabled -Degl=disabled -Ddri3=disabled -Dgallium-drivers=swrast -Dvulkan-drivers= -Dopencl-spirv=true -Dshader-cache=false -Dgbm=disabled -Dglx=disabled -Dlmsensors=disabled -Dllvm=disabled -Dvalgrind=disabled -Dxlib-lease=disabled -Dzstd=enabled -Dselinux=false -Dlibunwind=disabled -Dbuild-tests=false -Dmicrosoft-clc=disabled -Dc_args="-I$MINGWPREFIX/include/libdl-win32" -Dcpp_args="-I$MINGWPREFIX/include/libdl-win32" . build_both &&
 #-Dmicrosoft-clc=disabled
 #PKG_CONFIG= PATH=$PYDIR:$MINGWPREFIX/share/winflexbison:$PATH PYTHONPATH=$MINGWPREFIX/python/Lib/site-packages:$MINGWPREFIX/lib${PYTHONPATH:+:$PYTHONPATH} $(which meson.py) --prefix $INSTALLPREFIX/share/mesa --backend ninja --buildtype release --strip --default-library shared -Dosmesa=true -Dosmesa-bits=8 -Dshared-glapi=enabled -Dopengl=true -Dgles1=enabled -Dgles2=enabled -Degl=disabled -Ddri3=disabled -Dgallium-drivers=swrast -Dvulkan-drivers= -Dopencl-spirv=true -Dshader-cache=true -Dgbm=disabled -Dglx=disabled -Dlmsensors=disabled -Dllvm=disabled -Dvalgrind=disabled -Dxlib-lease=disabled -Dzstd=enabled -Dselinux=false -Dlibunwind=disabled -Dbuild-tests=false -Dswr-arches="avx,avx2" -Dshared-swr=true -Dmicrosoft-clc=disabled -Dc_args="-I$MINGWPREFIX/include/libdl-win32" -Dcpp_args="-I$MINGWPREFIX/include/libdl-win32" . build_both &&
 #-Dvulkan-drivers=swrast
 #-Dgallium-opencl=icd 
 #-Dosmesa=gallium -Dvulkan-icd-dir= -Dglvnd=true -Dllvm=enabled -Dshared-llvm=enabled
 wl-showstatus build-install &&
 PATH=$PATH:$PYDIR PYTHONPATH=$MINGWPREFIX/python/Lib/site-packages:$MINGWPREFIX/lib${PYTHONPATH:+:$PYTHONPATH} ninja -Cbuild_both install &&
 # fix missing library prefix
 for F in $INSTALLPREFIX/share/mesa/lib/*.a; do
  if ! basename $F | grep -q "^lib"; then
   cp -f $F $(echo $F | sed -e "s?/\([^/]*\.a\)?/lib\1?")
  fi
 done &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf mesa-mesa-$VERSION




export NAME="CAVA"
export STATUS=
export URL=https://github.com/karlstav/cava
export BASENAME=cava
export DESCRIPTION="Cross-platform Audio Visualizer"
export CATEGORY=audio
export TYPE=application
#export VERSION=0.10.2
#export VERSIONDATE=20241110
export VERSION=0.10.3
export VERSIONDATE=20241116
wl-showstatus --package-version
export DEPENDENCIES=pthreads,ncurses,iniparser,sdl2,fftw,pulseaudio,portaudio,mman-win32
export OPTIONALDEPENDENCIES=pipewire,jack
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=MIT
export DOWNLOADURL="https://github.com/karlstav/cava/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/karlstav/cava/archive/refs/tags/$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/$VERSION.tar.gz
cd $BASENAME-$VERSION
## fix detection of Windows
#sed -i.bak -e "s/_MSC_VER/_WIN32/" $(grep -l _MSC_VER $(find -name '*.h' -or -name '*.c'))
## fix number of arguments when calling mkdir()
#sed -i.bak -e "s/^\(\s*\)\(mkdir(.*\),[^,]*\();\)/#ifdef _WIN32\n\1\2\3\n#else\n&\n#endif/" config.c
## fix configure.ac (version >= 0.10.2)
#patch -ulbf configure.ac << EOF
#@@ -34,3 +34,2 @@
#     *)
#-        AC_MSG_ERROR(["OS \$host_os is not supported"])
#         ;;
#EOF
#wl-showstatus preconfigure &&
# mkdir -p m4 &&
# autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal &&
# wl-showstatus configure &&
# ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM CFLAGS="-I$MINGWPREFIX/include/mman-win32" LDFLAGS="-Wl,--as-needed -lmman" &&
# ## fix building DLLs
# #sed -i.bak -e "s/\(allow_undefined=\)yes/\1no/" libtool &&
# ## fix detection of shared libraries
# #sed -i.bak2 -e "s/\(deplibs_check_method=\"\)[^\"]*/\1file_magic ^x86 archive import|^x86 DLL|PE32+* executable (DLL)|pe-i386|pe-x86-64/; s/'file format pe-i386[^']*'/\"\$deplibs_check_method\"/" libtool &&
# #sed -i.bak2 -e "s/\(deplibs_check_method=\"\)[^\"]*/\1none/" libtool &&
# #sed -i.bak2 -e "s/\(deplibs_check_method=\"\)[^\"]*/\1pass_all/" libtool &&
# #wl-showstatus build &&
# #make &&
# wl-showstatus build-install &&
# make install-strip &&
# #( make install-strip || ( make install && strip $INSTALLPREFIX/bin/*.{dll,exe} )) &&
#    echo OK
# also allow building shared library
sed -i.bak -e "s/\(add_library([^\s]*\) STATIC/\1/" CMakeLists.txt
mkdir -p build_static build_shared &&
 wl-showstatus configure-static &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -S. -Bbuild_static &&
 #-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
 wl-showstatus configure-shared &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -S. -Bbuild_shared &&
 ## fix execution of Python scripts
 #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|glib-genmarshal\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
 # fix missing link libraries
 sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lfftw3/" build_shared/build.ninja &&
 wl-showstatus build-static &&
 ninja -Cbuild_static &&
 wl-showstatus build-shared &&
 ninja -Cbuild_shared &&
 strip build_shared/*.dll &&
 wl-showstatus install &&
 mkdir -p $INSTALLPREFIX/include $INSTALLPREFIX/lib $INSTALLPREFIX/bin &&
 cp -f cava*.h $INSTALLPREFIX/include/ &&
 cp -f build_static/*.a build_shared/*.a $INSTALLPREFIX/lib/ &&
 cp -f build_shared/*.dll $INSTALLPREFIX/bin/ &&
 #wl-showstatus build-install-static &&
 #ninja -Cbuild_static install/strip &&
 #wl-showstatus build-install-shared &&
 #ninja -Cbuild_shared install/strip &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




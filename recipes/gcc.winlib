#export NAME="GCC, the GNU Compiler Collection"
#export STATUS=
#export URL=https://gcc.gnu.org/
#export BASENAME=gcc
#export DESCRIPTION="The GNU Compiler Collection includes front ends for C, C++, Objective-C, Fortran, Ada, and Go, as well as libraries for these languages (libstdc++,...). GCC was originally written as the compiler for the GNU operating system. The GNU system was developed to be 100% free software, free in the sense that it respects the user's freedom."
#export CATEGORY=development
#export TYPE=application
##export VERSION=5.5.0
##export VERSIONDATE=20171011
##export VERSION=6.3.0
##export VERSIONDATE=20170327
##export VERSION=6.4.0
##export VERSIONDATE=20170705
##export VERSION=6.5.0
##export VERSIONDATE=20181027
##export VERSION=7.1.0
##export VERSIONDATE=20170503
##export VERSION=7.2.0
##export VERSIONDATE=20170815
##export VERSION=7.3.0
##export VERSIONDATE=20180126
##export VERSION=7.4.0
##export VERSIONDATE=20181207
##export VERSION=7.5.0
##export VERSIONDATE=20191115
##export VERSION=8.1.0
##export VERSIONDATE=20180503
#export VERSION=8.2.0
#export VERSIONDATE=20180727
#wl-showstatus --package-version
#export DEPENDENCIES=mpfr,gmp,mpc,isl
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=
#export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=COPYING
#export LICENSETYPE=GPL
##export DOWNLOADURL="https://gcc.gnu.org/releases.html"
##export DOWNLOADURL="ftp://ftp.mpi-sb.mpg.de/pub/gnu/mirror/gcc.gnu.org/pub/gcc/releases/"
#export DOWNLOADURL="http://ftp.mpi-sb.mpg.de/pub/gnu/mirror/gcc.gnu.org/pub/gcc/releases/"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
##export DOWNLOADSOURCEURL=http://ftp.mpi-sb.mpg.de/pub/gnu/mirror/gcc.gnu.org/pub/gcc/releases/$BASENAME-$VERSION/$BASENAME-$VERSION.tar.bz2
#export DOWNLOADSOURCEURL=http://ftp.mpi-sb.mpg.de/pub/gnu/mirror/gcc.gnu.org/pub/gcc/releases/$BASENAME-$VERSION/$BASENAME-$VERSION.tar.xz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#wl-showstatus extract
##tar xjlh --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.bz2
#tar xJlh --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.xz
#cd $BASENAME-$VERSION
## fix missing isl functions
#mv gcc/graphite.h gcc/graphite.h.bak &&
#echo "#include <isl/id.h>" > gcc/graphite.h &&
#echo "#include <isl/space.h>" >> gcc/graphite.h &&
#cat gcc/graphite.h.bak >> gcc/graphite.h
#sed -i.bak -e "s?/lib/cpp?$(which cpp.exe)?" $(find -name configure)
## fix redefinition of math functions in libstdc++-v3/src/c++98/math_stubs_float.cc
#mv libstdc++-v3/src/c++98/math_stubs_float.cc libstdc++-v3/src/c++98/math_stubs_float.cc.bak &&
#sed -n -e "s/^#ifndef \(.*\)$/#define \1 1/p" libstdc++-v3/src/c++98/math_stubs_float.cc.bak > libstdc++-v3/src/c++98/math_stubs_float.cc &&
#cat libstdc++-v3/src/c++98/math_stubs_float.cc.bak >> libstdc++-v3/src/c++98/math_stubs_float.cc
## fix redefinition of math functions in libstdc++-v3/src/c++98/math_stubs_long_double.cc
#mv libstdc++-v3/src/c++98/math_stubs_long_double.cc libstdc++-v3/src/c++98/math_stubs_long_double.cc.bak &&
#sed -n -e "s/^#ifndef \(.*\)$/#define \1 1/p" libstdc++-v3/src/c++98/math_stubs_long_double.cc.bak > libstdc++-v3/src/c++98/math_stubs_long_double.cc &&
#cat libstdc++-v3/src/c++98/math_stubs_long_double.cc.bak >> libstdc++-v3/src/c++98/math_stubs_long_double.cc
## fix missing uint8_t/uint16_tuint32_t in libstdc++-v3/src/c++11/cow-stdexcept.cc
#mv libstdc++-v3/src/c++11/cow-stdexcept.cc libstdc++-v3/src/c++11/cow-stdexcept.cc.bak &&
#echo "#include <stdint.h>" > libstdc++-v3/src/c++11/cow-stdexcept.cc &&
#cat libstdc++-v3/src/c++11/cow-stdexcept.cc.bak >> libstdc++-v3/src/c++11/cow-stdexcept.cc
## fix missing uint_fast64_t in libstdc++-v3/src/c++11/hashtable_c++0x.cc
#mv libstdc++-v3/src/c++11/hashtable_c++0x.cc libstdc++-v3/src/c++11/hashtable_c++0x.cc.bak &&
##echo "#include <stdint.h>" > libstdc++-v3/src/c++11/hashtable_c++0x.cc &&
#echo "#include <stdint-gcc.h>" > libstdc++-v3/src/c++11/hashtable_c++0x.cc &&
#cat libstdc++-v3/src/c++11/hashtable_c++0x.cc.bak >> libstdc++-v3/src/c++11/hashtable_c++0x.cc
### fix missing libssp/ssp/ssp.h (version >= 8.2.0)
##sed -e "s/@ssp_have_usable_vsnprintf@/define/" libssp/ssp/ssp.h.in > libssp/ssp/ssp.h
#wl-showstatus configure &&
##./autogen.sh &&
##    echo OK
### fix building DLLs on 64-bit
##if ( echo $RUNPLATFORM | grep -q x86_64 ); then
## echo "AM_GNU_GETTEXT_VERSION([$(gettext --version|head -n1|sed -e "s/^.* \([0-9\.]*\) *$/\1/")])" >> configure.ac &&
## autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal
##fi
##INTLTOOL_PERL="$PERLDIR/bin/perl.exe" 
##PERL="$PERLDIR/bin/perl.exe -I$PERLDIR/lib" 
##PYTHON=$PYDIR/python.exe 
##PYTHON=$PYDIR/python.exe C_INCLUDE_PATH=$PYDIR/include${C_INCLUDE_PATH:+:$C_INCLUDE_PATH} 
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM LDFLAGS="-Wl,--as-needed -Wl,-no-undefined" &&
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM LDFLAGS="-Wl,--as-needed" &&
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-system-zlib &&
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-system-zlib --disable-bootstrap --enable-serial-configure --oldincludedir=$(ls -1d $MINGWDIR/*mingw*/include | head -n1) &&
#./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-system-zlib --disable-bootstrap --enable-serial-configure --with-system-zlib --disable-libssp --oldincludedir=$(ls -1d $MINGWDIR/*mingw*/include | head -n1) --oldincludedir=$(find $MINGWDIR -name "stdio.h" |sed -n -e "s?^\(.*/include\)/[^/]*\$?\1?p") &&
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --disable-bootstrap --disable-stage1-checking --enable-serial-configure --enable-host-shared --with-system-zlib --oldincludedir=$(ls -1d $MINGWDIR/*mingw*/include | head -n1) &&
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-bootstrap --enable-serial-configure --enable-host-shared --with-system-zlib --oldincludedir=$(ls -1d $MINGWDIR/*mingw*/include | head -n1) --with-stage1-ldflags="-I$(ls -1d $MINGWDIR/*mingw*/include | head -n1)" &&
# ## fix building DLLs
# #mv libtool libtool.bak &&
# #sed -e "s/\(allow_undefined=\)yes/\1no/" libtool.bak > libtool &&
# ## fix calling xgcc (version <= 7.3.0)
# #sed -i.bak -e "s?\(\./xgcc\) ?\1.exe ?g" host-*/gcc/Makefile &&
# ## fix missing stdio.h (version >= 8.2.0)
# #sed -i.bak -e "s?^\(INTERNAL_CFLAGS\s*=\s*\)?&-I$(pwd)/libssp/ssp -I$(find $MINGWDIR -name "stdio.h" |sed -n -e "s?^\(.*/include\)/[^/]*\$?\1?p") ?" host-$(echo $RUNPLATFORM | sed -e "s/-.*$//")-pc-mingw32/gcc/Makefile &&
# wl-showstatus build &&
# #make &&
# #CPP="cpp.exe" make &&
# ( make || C_INCLUDE_PATH=libssp/ssp${C_INCLUDE_PATH:+:$C_INCLUDE_PATH} make || (
#  #make -C build-$(echo $RUNPLATFORM | sed -e "s/-.*$//")-pc-mingw32/libiberty &&
#  mkdir -p build-$(echo $RUNPLATFORM | sed -e "s/-.*$//")-pc-mingw32/libiberty/pic &&
#  cp -u build-$(echo $RUNPLATFORM | sed -e "s/-.*$//")-pc-mingw32/libiberty/*.a build-$(echo $RUNPLATFORM | sed -e "s/-.*$//")-pc-mingw32/libiberty/pic/ &&
#  make
# ) || (
#  #make -C host-$(echo $RUNPLATFORM | sed -e "s/-.*$//")-pc-mingw32/libiberty &&
#  mkdir -p host-$(echo $RUNPLATFORM | sed -e "s/-.*$//")-pc-mingw32/libiberty/pic &&
#  cp -u host-$(echo $RUNPLATFORM | sed -e "s/-.*$//")-pc-mingw32/libiberty/*.a host-$(echo $RUNPLATFORM | sed -e "s/-.*$//")-pc-mingw32/libiberty/pic/ &&
#  make
# ) || (
#  cd libiberty &&
#  ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM &&
#  make &&
#  mkdir -p pic &&
#  cp -u *.a pic/ &&
#  cd ..
# ) || (
#  CPP="cpp.exe" make
# ) || (
#  make -j1
# )) &&
# wl-showstatus build-install &&
# make install-strip &&
#    echo OK
##mkdir -p build_test; cd build_test; cmake.exe -G"MSYS Makefiles" -LH && echo OK; cd ..; rm -rf build_test
##rm -f CMakeCache.txt; cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -LH && echo OK
##export BUILDDEPENDENCIES=cmake
##export OPTIONALBUILDDEPENDENCIES=
##wl-showstatus configure &&
##cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release &&
## wl-showstatus build-install &&
## make install/strip &&
##    echo OK
## wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
##See also: https://reactos.org/wiki/Building_MINGW-w64
#
#
#cd libcc1 &&
#./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM &&
#make &&
#cd ..
#
#
#
##mkdir -p build &&
##wl-showstatus configure &&
##cd build &&
##../configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --disable-shared --enable-languages=c,c++ --disable-bootstrap --with-system-zlib &&
##make configure-host &&
##make configure-target CPP="cpp.exe" &&
##echo OK
###../gcc-4.9.2/configure --program-suffix=-4.9.2 
#
#
#
##C_INCLUDE_PATH=$(find $MINGWDIR -name "stdio.h"|sed -n -e "s?^\(.*/include\)/[^/]*\$?\1?p")${C_INCLUDE_PATH:+:$C_INCLUDE_PATH} CPLUS_INCLUDE_PATH=$(find $MINGWDIR -name "stdio.h"|sed -n -e "s?^\(.*/include\)/[^/]*\$?\1?p")${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} LIBRARY_PATH=$(find $MINGWDIR -name libmingwex.a|sed -n -e "s?^\(.*/lib\)/[^/]*\$?\1?p")${LIBRARY_PATH:+:$LIBRARY_PATH} make -j1 &&echo OK
##LIBRARY_PA	TH=$(find $MINGWDIR -name libmingwex.a|sed -n -e "s?^\(.*/lib\)/[^/]*\$?\1?p")${LIBRARY_PATH:+:$LIBRARY_PATH} make -j1 &&echo OK



export NAME="GCC, the GNU Compiler Collection"
export STATUS=
export URL=https://gcc.gnu.org/
export BASENAME=gcc
export DESCRIPTION="The GNU Compiler Collection includes front ends for C, C++, Objective-C, Fortran, Ada, and Go, as well as libraries for these languages (libstdc++,...). GCC was originally written as the compiler for the GNU operating system. The GNU system was developed to be 100% free software, free in the sense that it respects the user's freedom."
export CATEGORY=development
export TYPE=application
#export VERSION=7.5.0
#export VERSIONDATE=20200424
#export VERSION=8.1.0
#export VERSIONDATE=20190223
#export VERSION=8.3.0
#export VERSIONDATE=20190223
#export VERSION=8.4.0
#export VERSIONDATE=20200305
#export VERSION=8.5.0
#export VERSIONDATE=20210616
#export VERSION=8-20210401
#export VERSIONDATE=20210408
#export VERSION=9.1.0
#export VERSIONDATE=20190504
#export VERSION=9.2.0
#export VERSIONDATE=20190813
#export VERSION=9-20191221
#export VERSIONDATE=20191222
#export VERSION=9-20200111
#export VERSIONDATE=20200113
#export VERSION=9-20200201
#export VERSIONDATE=20200202
#export VERSION=9-20200222
#export VERSIONDATE=20200223
#export VERSION=9.3.0
#export VERSIONDATE=20200313
#export VERSION=9-20200425
#export VERSIONDATE=20200426
#export VERSION=9-20200703
#export VERSIONDATE=20200704
#export VERSION=9-20210402
#export VERSIONDATE=20210408
#export VERSION=9.4.0
#export VERSIONDATE=20210616
#export VERSION=9-20211202
#export VERSIONDATE=20211105
#export VERSION=9.5.0
#export VERSIONDATE=20221105
#export VERSION=10-20200110
#export VERSIONDATE=20200113
#export VERSION=10-20200126
#export VERSIONDATE=20200130
#export VERSION=10-20200223
#export VERSIONDATE=20200224
#export VERSION=10-20200426
#export VERSIONDATE=20200427
#export VERSION=10.1.0
#export VERSIONDATE=20200508
#export VERSION=10-20200606
#export VERSIONDATE=20200608
#export VERSION=10-20200627
#export VERSIONDATE=20200630
#export VERSION=10-20200704
#export VERSIONDATE=20200705
#export VERSION=10.2.0
#export VERSIONDATE=20200723
#export VERSION=10-20200912
#export VERSIONDATE=20200913
#export VERSION=10-20210206
#export VERSIONDATE=20210208
#export VERSION=10-20210227
#export VERSIONDATE=20210201
#export VERSION=10-20210320
#export VERSIONDATE=20210221
#export VERSION=10-20210403
#export VERSIONDATE=20210404
#export VERSION=10.3.0
#export VERSIONDATE=20210408
#export VERSION=10-20210410
#export VERSIONDATE=20210412
#export VERSION=10-20210424
#export VERSIONDATE=20210426
#export VERSION=10-20210604
#export VERSIONDATE=20210605
#export VERSION=10-20210709
#export VERSIONDATE=20210710
#export VERSION=10-20210827
#export VERSIONDATE=20210828
#export VERSION=10-20211112
#export VERSIONDATE=20211113
#export VERSION=10.4.0
#export VERSIONDATE=20221105
#export VERSION=10.5.0
#export VERSIONDATE=20230727
#export VERSION=11-20201011
#export VERSIONDATE=20201018
#export VERSION=11-20201018
#export VERSIONDATE=20201019
#export VERSION=11-20201115
#export VERSIONDATE=20201116
#export VERSION=11-20201122
#export VERSIONDATE=20201123
#export VERSION=11-20210117
#export VERSIONDATE=20210118
#export VERSION=11-20210131
#export VERSIONDATE=20210201
#export VERSION=11-20210207
#export VERSIONDATE=20210208
#export VERSION=11-20210228
#export VERSIONDATE=20210301
#export VERSION=11-20210314
#export VERSIONDATE=20210318
#export VERSION=11-20210321
#export VERSIONDATE=20210322
#export VERSION=11-20210404
#export VERSIONDATE=20210405
#export VERSION=11.1.0
#export VERSIONDATE=20210427
#export VERSION=11-20210605
#export VERSIONDATE=20210606
#export VERSION=11-20210710
#export VERSIONDATE=20210712
#export VERSION=11.2.0
#export VERSIONDATE=20210728
#export VERSION=11-20210814
#export VERSIONDATE=20210815
#export VERSION=11-20210918
#export VERSIONDATE=20210919
#export VERSION=11-20211030
#export VERSIONDATE=20211102
#export VERSION=11-20211106
#export VERSIONDATE=20211111
#export VERSION=11-20211204
#export VERSIONDATE=20211205
#export VERSION=11-20211211
#export VERSIONDATE=20211213
#export VERSION=11-20220212
#export VERSIONDATE=20220218
#export VERSION=11-20220219
#export VERSIONDATE=20220222
#export VERSION=11-20220409
#export VERSIONDATE=20220416
#export VERSION=11.3.0
#export VERSIONDATE=20220421
#export VERSION=11.4.0
#export VERSIONDATE=20230702
#export VERSION=11.5.0
#export VERSIONDATE=20230723
#export VERSION=12-20211205
#export VERSIONDATE=20211206
#export VERSION=12-20220123
#export VERSIONDATE=20220124
#export VERSION=12-20220213
#export VERSIONDATE=20220218
#export VERSION=12-20220227
#export VERSIONDATE=20220228
#export VERSION=12-20220417
#export VERSIONDATE=20220418
#export VERSION=12.1.0
#export VERSIONDATE=20220506
#export VERSION=12-20220528
#export VERSIONDATE=20220601
#export VERSION=12-20220723
#export VERSIONDATE=20220725
#export VERSION=12.2.0
#export VERSIONDATE=20220819
#export VERSION=12-20221022
#export VERSIONDATE=20221023
#export VERSION=12-20221126
#export VERSIONDATE=20221127
#export VERSION=12-20221224
#export VERSIONDATE=20221226
#export VERSION=12-20230211
#export VERSIONDATE=20230213
#export VERSION=12.3.0
#export VERSIONDATE=20230508
#export VERSION=12.4.0
#export VERSIONDATE=20240620
#export VERSION=13-20221030
#export VERSIONDATE=20221105
#export VERSION=13-20221211
#export VERSIONDATE=20221212
#export VERSION=13-20221225
#export VERSIONDATE=20221226
#export VERSION=13-20230122
#export VERSIONDATE=20230123
#export VERSION=13-20230305
#export VERSIONDATE=20230310
#export VERSION=13-20230312
#export VERSIONDATE=20230319
#export VERSION=13-20230402
#export VERSIONDATE=20230403
#export VERSION=13-20230416
#export VERSIONDATE=20230417
#export DEPENDENCIES=zlib,zstd,pthreads,libiconv,mpfr,gmp,mpc,isl,mingw-w64,libdl,mman-win32
#export OPTIONALDEPENDENCIES=libbacktrace
#export BUILDDEPENDENCIES=binutils
#export OPTIONALBUILDDEPENDENCIES=
#export VERSION=13.1.0
#export VERSIONDATE=20230426
#export VERSION=13.2.0
#export VERSIONDATE=20230727
#export VERSION=13-20231007
#export VERSIONDATE=20231009
#export VERSION=13.3.0
#export VERSIONDATE=20240521
#export VERSION=14-20231119
#export VERSIONDATE=20231120
#export VERSION=14-20231217
#export VERSIONDATE=20231219
#export VERSION=14-20231224
#export VERSIONDATE=20231226
#export VERSION=14-20240107
#export VERSIONDATE=20240112
#export VERSION=14-20240324
#export VERSIONDATE=20240327
#export VERSION=14-20240414
#export VERSIONDATE=20240417
#export VERSION=14.1.0
#export VERSIONDATE=20240507
export VERSION=14.2.0
export VERSIONDATE=20240801
#export VERSION=15-20240505
#export VERSIONDATE=20240508
#export VERSION=15-20240526
#export VERSIONDATE=20240528
#export VERSION=15-20240616
#export VERSIONDATE=20240617
#export VERSION=15-20240728
#export VERSIONDATE=20240730
#export VERSION=15-20240818
#export VERSIONDATE=20240819
#export VERSION=15-20241013
#export VERSIONDATE=20241014
#export VERSION=15-20241110
#export VERSIONDATE=20241111
#export VERSION=15-20241117
#export VERSIONDATE=20241119
#export VERSION=15-20241201
#export VERSIONDATE=20241204
#export VERSION=15-20241215
#export VERSIONDATE=20241221
#export VERSION=15-20241222
#export VERSIONDATE=20241225
#export VERSION=15-20241229
#export VERSIONDATE=20241230
wl-showstatus --package-version
export DEPENDENCIES=zlib,zstd,pthreads,mcfgthread,libiconv,mpfr,gmp,mpc,isl,mingw-w64,libdl,mman-win32
#export OPTIONALDEPENDENCIES=libbacktrace
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=binutils
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=COPYING
export LICENSETYPE=GPL
#export DOWNLOADURL="https://gcc.gnu.org/releases.html"
#export DOWNLOADURL="ftp://ftp.mpi-sb.mpg.de/pub/gnu/mirror/gcc.gnu.org/pub/gcc/releases/"
#export DOWNLOADURL="http://ftp.mpi-sb.mpg.de/pub/gnu/mirror/gcc.gnu.org/pub/gcc/releases/"
#export DOWNLOADURL="http://ftp.mirrorservice.org/sites/sourceware.org/pub/gcc/releases/"
#export DOWNLOADURL="https://ftp.gnu.org/gnu/gcc/"
#export DOWNLOADURL="https://sourceware.org/pub/gcc/releases/"
export DOWNLOADURL="https://gcc.gnu.org/pub/gcc/releases/"
#export DOWNLOADURL="http://mirror.koddos.net/gcc/snapshots/"
#export DOWNLOADURL="https://ftp.mpi-inf.mpg.de/pub/gnu/mirror/gcc.gnu.org/pub/gcc/snapshots/"
#export DOWNLOADURL="http://ftp.mirrorservice.org/sites/sourceware.org/pub/gcc/snapshots/"
#export DOWNLOADURL="https://gcc.gnu.org/pub/gcc/snapshots/"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://ftp.mpi-sb.mpg.de/pub/gnu/mirror/gcc.gnu.org/pub/gcc/releases/$BASENAME-$VERSION/$BASENAME-$VERSION.tar.xz
#export DOWNLOADSOURCEURL=https://ftp.gnu.org/gnu/gcc/$BASENAME-$VERSION/$BASENAME-$VERSION.tar.xz
export DOWNLOADSOURCEURL=https://gcc.gnu.org/pub/gcc/releases/$BASENAME-$VERSION/$BASENAME-$VERSION.tar.xz
#export DOWNLOADSOURCEURL=https://gcc.gnu.org/pub/gcc/snapshots/$VERSION/$BASENAME-$VERSION.tar.xz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xJlh --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.xz
cd $BASENAME-$VERSION
# set to 0 to build Dwarf2 (32-bit) or SEH (64-bit) C++ exception handling (or to 1 to use SJLJ)
if [ "$USE_SJLJ" == "" ]; then
 USE_SJLJ=0
fi
# set to 0 to use msvcrt or to 1 to use ucrt
if [ "$USE_UCRT" == "" ]; then
 USE_UCRT=0
fi
# set to 0 to use POSIX threads or to 1 to use MCF GThread library
if [ "$USE_MCF" == "" ]; then
 USE_MCF=0
fi
# set to 0 to use POSIX threads or to 1 to use Win32 thread library
if [ "$USE_WIN32" == "" ]; then
 USE_WIN32=0
fi
# fix missing syslog in libssp/ssp.c
sed -i.bak -e "s?#ifdef HAVE_SYSLOG_H?#if 0 //&?" libssp/ssp.c
# fix plugin install location in gcc/c/Make-lang.in and gcc/cp/Make-lang.in (version >= 9.2.0)
sed -i.bak -e "s?\(\$(DESTDIR)\)/\(\$(plugin_resourcesdir)\)?\1\2?" gcc/c/Make-lang.in gcc/cp/Make-lang.in
# fix missing sys/wait.h fixincludes/fixincl.c (version >= 9.3.0)
patch -ulbf fixincludes/fixincl.c << EOF
@@ -28,4 +28,12 @@
 #ifndef SEPARATE_FIX_PROC
+#ifdef _WIN32
+#include <Windows.h>
+#define wait(p) Sleep(0)
+#include <fcntl.h>
+#define pipe(fds) _pipe(fds, 4096, _O_BINARY)
+#define fork() -1
+#else
 #include <sys/wait.h>
 #endif
+#endif

EOF
# fix missing pipe in fixincludes/procopen.c (version >= 9.3.0)
patch -ulbf fixincludes/procopen.c << EOF
@@ -50,2 +50,7 @@
 #include "server.h"
+#ifdef _WIN32
+#include <fcntl.h>
+#define pipe(fds) _pipe(fds, 4096, _O_BINARY)
+#define fork() -1
+#endif

EOF
# fix missing kill/alarm in fixincludes/server.c (version >= 9.3.0)
patch -ulbf fixincludes/server.c << EOF
@@ -50,2 +50,6 @@
 #include "server.h"
+#ifdef _WIN32
+#define kill(pid,sig) -1
+#define alarm(n) 0
+#endif

EOF
## fix gcc/attribs.c (version = 8.3.0)
#patch -ulbf gcc/attribs.c << EOF
#@@ -1685,8 +1685,11 @@
#             a function global scope, unless declared static.  */
#          if (current_function_decl != NULL_TREE && !TREE_STATIC (node))
#            TREE_PUBLIC (node) = 1;
#-         /* Clear TREE_STATIC because DECL_EXTERNAL is set.  */
#-         TREE_STATIC (node) = 0;
#+         /* Clear TREE_STATIC because DECL_EXTERNAL is set, unless
#+            it is a C++ static data member.  */
#+         if (DECL_CONTEXT (node) == NULL_TREE
#+             || !RECORD_OR_UNION_TYPE_P (DECL_CONTEXT (node)))
#+           TREE_STATIC (node) = 0;
#        }
#
#       if (*no_add_attrs == false)
#EOF
## fix gcc/testsuite/gcc.dg/pr88568.c (version = 8.3.0)
#mv gcc/testsuite/gcc.dg/pr88568.c gcc/testsuite/gcc.dg/pr88568.c.bak
#cat > gcc/testsuite/gcc.dg/pr88568.c << EOF
#// PR c/88568
#// { dg-do compile }
#// { dg-require-dll "" }
#
#struct S {
#  __attribute__((dllimport)) static const char foo[];
#};
#
#int
#foo (int x)
#{
#  return S::foo[x];
#}
#
#EOF
#cat gcc/testsuite/gcc.dg/pr88568.c.bak >> gcc/testsuite/gcc.dg/pr88568.c
## fix libgfortran/runtime/error.c (version >= 9.5.0)
#patch -ulbf libgfortran/runtime/error.c << EOF
#@@ -140,3 +140,3 @@
# static int
#-gf_vsnprintf (char *str, size_t size, const char *format, va_list ap)
#+gf_vsnprintf (char *buffer, size_t size, const char *format, va_list ap)
# {
#EOF
## fix gcc/analyzer/store.h (version >= 11-20201025)
##### reported bug: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=97614
#patch -ulbf gcc/analyzer/store.h << EOF
#@@ -271,3 +271,3 @@
#   {
#-    return (binding_key::impl_hash () ^ (long)m_region);
#+    return (binding_key::impl_hash () ^ (intptr_t)m_region);
#   }
#EOF
## fix libiberty/vsnprintf.c (version >= 13.2.0)
#patch -ulbf libiberty/vsnprintf.c << EOF
#@@ -57,2 +57,3 @@
#
#+#define vsnprintf CUSTOM_vsnprintf
# /* This implementation relies on a working vasprintf.  */
#EOF
# fix printf format issues with MinGW-w64 >= 8.0.0 (version >= 10.2.0)
####See also: https://sourceforge.net/p/mingw-w64/bugs/853/
####See also: https://github.com/msys2/MINGW-packages-dev/blob/master/mingw-w64-gcc-git/0020-libgomp-Don-t-hard-code-MS-printf-attributes.patch
sed -i.bak -e "s/^\(\s*#\s*\)include <inttypes\.h>.*$/&\n\1ifdef __MINGW32__\n\1undef HAVE_INTTYPES_H\n\1endif/" libgomp/target.c libgomp/oacc-parallel.c
# avoid looking for libiberty.a in a pic subdirectory
sed -i.bak -e "s?pic/\(libiberty\.a\)?\1?g" $(grep -l "pic/libiberty\.a" */Makefile.in)
# fix missing .exe extension of mkoffload in in gcc/lto-wrapper.c (version >= 10.2.0)
#### bug reported: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=98145
patch -ulbf gcc/lto-wrapper.c << EOF
@@ -548,4 +548,10 @@
 /* Parse STR, saving found tokens into PVALUES and return their number.
-   Tokens are assumed to be delimited by ':'.  If APPEND is non-null,
-   append it to every token we find.  */
+   Tokens are assumed to be delimited by ':' (or ';' on Windows).
+   If APPEND is non-null, append it to every token we find.  */
+
+#ifdef _WIN32
+#define PATH_LIST_SEPARATOR ';'
+#else
+#define PATH_LIST_SEPARATOR ':'
+#endif

@@ -558,3 +564,3 @@

-  curval = strchr (str, ':');
+  curval = strchr (str, PATH_LIST_SEPARATOR);
   while (curval)
@@ -562,3 +568,3 @@
       num++;
-      curval = strchr (curval + 1, ':');
+      curval = strchr (curval + 1, PATH_LIST_SEPARATOR);
     }
@@ -567,3 +573,3 @@
   curval = str;
-  nextval = strchr (curval, ':');
+  nextval = strchr (curval, PATH_LIST_SEPARATOR);
   if (nextval == NULL)
@@ -581,3 +587,3 @@
       curval = nextval + 1;
-      nextval = strchr (curval, ':');
+      nextval = strchr (curval, PATH_LIST_SEPARATOR);
       if (nextval == NULL)
@@ -816,2 +822,8 @@

+#ifdef _WIN32
+#define BIN_EXT ".exe"
+#else
+#define BIN_EXT ""
+#endif
+
 static char *
@@ -827,6 +839,6 @@
   char *suffix
-    = XALLOCAVEC (char, sizeof ("/accel//mkoffload") + strlen (target));
+    = XALLOCAVEC (char, sizeof ("/accel//mkoffload" BIN_EXT) + strlen (target));
   strcpy (suffix, "/accel/");
   strcat (suffix, target);
-  strcat (suffix, "/mkoffload");
+  strcat (suffix, "/mkoffload" BIN_EXT);

EOF
## fix precompiled header issues (version = 11.1.0)
#####see also: https://github.com/msys2/MINGW-packages/blob/master/mingw-w64-gcc/0010-Fix-using-large-PCH.patch
#patch -ulbf gcc/config/i386/host-mingw32.c << EOF
#@@ -44,9 +44,6 @@
#
# static inline void w32_error(const char*, const char*, int, const char*);
#
#-/* FIXME: Is this big enough?  */
#-static const size_t pch_VA_max_size  = 128 * 1024 * 1024;
#-
# /* Granularity for reserving address space.  */
# static size_t va_granularity = 0x10000;
#
#@@ -88,9 +85,6 @@
# mingw32_gt_pch_get_address (size_t size, int)
# {
#   void* res;
#-  size = (size + va_granularity - 1) & ~(va_granularity - 1);
#-  if (size > pch_VA_max_size)
#-    return NULL;
#
#   /* FIXME: We let system determine base by setting first arg to NULL.
#      Allocating at top of available address space avoids unnecessary
#@@ -100,7 +94,7 @@
#      If we allocate at bottom we need to reserve the address as early
#      as possible and at the same point in each invocation. */
#
#-  res = VirtualAlloc (NULL, pch_VA_max_size,
#+  res = VirtualAlloc (NULL, size,
#                      MEM_RESERVE | MEM_TOP_DOWN,
#                      PAGE_NOACCESS);
#   if (!res)
#@@ -150,7 +144,7 @@
#
#   /* Offset must be also be a multiple of allocation granularity for
#      this to work.  We can't change the offset. */
#-  if ((offset & (va_granularity - 1)) != 0 || size > pch_VA_max_size)
#+  if ((offset & (va_granularity - 1)) != 0)
#     return -1;
#
#
#EOF
#patch -ulbf gcc/ggc-common.c << EOF
#@@ -591,6 +591,8 @@
#   size_t i;
#   struct mmap_info mmi;
#   int result;
#+  long pch_tabs_off;
#+  long pch_data_off;
#
#   /* Delete any deletable objects.  This makes ggc_pch_read much
#      faster, as it can be sure that no GCable objects remain other
#@@ -599,20 +601,24 @@
#     for (rti = *rt; rti->base != NULL; rti++)
#       memset (rti->base, 0, rti->stride);
#
#-  /* Read in all the scalar variables.  */
#+  /* We need to read tables after mapping, or fatal_error will
#+     segfault when gt_pch_use_address returns -1. Skip them for now.  */
#+  pch_tabs_off = ftell(f);
#+
#+  /* Skip all the scalar variables. */
#   for (rt = gt_pch_scalar_rtab; *rt; rt++)
#     for (rti = *rt; rti->base != NULL; rti++)
#-      if (fread (rti->base, rti->stride, 1, f) != 1)
#-       fatal_error (input_location, "cannot read PCH file: %m");
#+      if (fseek (f, rti->stride, SEEK_CUR) != 0)
#+        fatal_error (input_location, "cannot read PCH file: %m");
#
#   /* Read in all the global pointers, in 6 easy loops.  */
#   for (rt = gt_ggc_rtab; *rt; rt++)
#     for (rti = *rt; rti->base != NULL; rti++)
#       for (i = 0; i < rti->nelt; i++)
#-       if (fread ((char *)rti->base + rti->stride * i,
#-                  sizeof (void *), 1, f) != 1)
#-         fatal_error (input_location, "cannot read PCH file: %m");
#-
#+        if (fseek (f, sizeof (void *), SEEK_CUR) != 0)
#+          fatal_error (input_location, "cannot read PCH file: %m");
#+
#+  /* mmi still has to be read now.  */
#   if (fread (&mmi, sizeof (mmi), 1, f) != 1)
#     fatal_error (input_location, "cannot read PCH file: %m");
#
#@@ -623,12 +629,35 @@
#   if (result == 0)
#     {
#       if (fseek (f, mmi.offset, SEEK_SET) != 0
#-         || fread (mmi.preferred_base, mmi.size, 1, f) != 1)
#-       fatal_error (input_location, "cannot read PCH file: %m");
#+          || fread (mmi.preferred_base, mmi.size, 1, f) != 1)
#+        fatal_error (input_location, "cannot read PCH file: %m");
#     }
#   else if (fseek (f, mmi.offset + mmi.size, SEEK_SET) != 0)
#     fatal_error (input_location, "cannot read PCH file: %m");
#
#+  /* File mapping done, read tables now.  */
#+  pch_data_off = ftell(f);
#+
#+  if (fseek (f, pch_tabs_off, SEEK_SET) != 0)
#+    fatal_error (input_location, "cannot read PCH file: %m");
#+
#+  /* Read in all the scalar variables.  */
#+  for (rt = gt_pch_scalar_rtab; *rt; rt++)
#+    for (rti = *rt; rti->base != NULL; rti++)
#+      if (fread (rti->base, rti->stride, 1, f) != 1)
#+        fatal_error (input_location, "cannot read PCH file: %m");
#+
#+  /* Read in all the global pointers, in 6 easy loops.  */
#+  for (rt = gt_ggc_rtab; *rt; rt++)
#+    for (rti = *rt; rti->base != NULL; rti++)
#+      for (i = 0; i < rti->nelt; i++)
#+        if (fread ((char *)rti->base + rti->stride * i,
#+            sizeof (void *), 1, f) != 1)
#+          fatal_error (input_location, "cannot read PCH file: %m");
#+
#+  if (fseek (f, pch_data_off, SEEK_SET) != 0)
#+    fatal_error (input_location, "cannot read PCH file: %m");
#+
#   ggc_pch_read (f, mmi.preferred_base);
#
#   gt_pch_restore_stringpool ();
#EOF
## fix issue when building for ucrt in libstdc++-v3/src/filesystem/ops.cc (version >= 11)
#patch -ulbf libstdc++-v3/src/filesystem/ops.cc << EOF
#@@ -969,3 +969,3 @@
#   if (nofollow && is_symlink(st))
#-    ec = std::make_error_code(std::errc::operation_not_supported);
#+    ec = std::make_error_code(std::errc::function_not_supported);
#   else if (posix::chmod(p.c_str(), static_cast<mode_t>(prms)))
#EOF
## fix undefined operation_not_supported in libstdc++-v3/config/os/mingw32/error_constants.h
#sed -i.bak -e "s?//\(\s*operation_not_supported\s*=\)?  \1?" libstdc++-v3/config/os/mingw32/error_constants.h
## fix "This app can't run on your PC" issue in gcc/common.opt (version >= 11)
#####bug report: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=98860
#patch -ulbf gcc/common.opt << EOF
#@@ -3181,3 +3181,3 @@
# gdwarf-
#-Common Driver Joined UInteger Var(dwarf_version) Init(5) Negative(gstabs)
#+Common Driver Joined UInteger Var(dwarf_version) Init(4) Negative(gstabs)
# Generate debug information in DWARF v2 (or later) format.
#EOF
#patch -ulbf gcc/config/i386/cygming.h << EOF
#@@ -209,6 +209,9 @@ along with GCC; see the file COPYING3.  If not see
# #define SUBTARGET_OVERRIDE_OPTIONS                                     \\
# do {                                                                   \\
#   flag_pic = TARGET_64BIT ? 1 : 0;                                     \\
#+  /* DWARF5 currently does not work on Windows. */                     \\
#+  if (!global_options_set.x_dwarf_version)                             \\
#+    dwarf_version = 4;                                                 \\
# } while (0)
#
# /* Define this macro if references to a symbol must be treated
#EOF
## fix position of $(LDFLAGS) in c++tools/Makefile.in (version >= 11.1.0)
#sed -i.bak -e "s/\( \$(LDFLAGS)\)\( .*\)$/\2\1/" c++tools/Makefile.in
#### fix required -ldl in libgfortran/Makefile.in (version >= 11.1.0)
#### alternative: libgfortran_la_LIBADD="-Wl,--as-needed -ldl"
###sed -i.bak -e "s/libbacktrace\.la /&-Wl,--as-needed -ldl /" libgfortran/Makefile.in
# fix missing getpagesize() in libbacktrace/mmapio.c (version >= 11.1.0)
mv libbacktrace/mmapio.c libbacktrace/mmapio.c.bak
cat > libbacktrace/mmapio.c << EOF
#ifdef _WIN32
#include <windows.h>
int getpagesize (void);
int getpagesize (void)
{
  SYSTEM_INFO sysinfo;
  GetSystemInfo(&sysinfo);
  return sysinfo.dwPageSize;
}
#endif
EOF
cat libbacktrace/mmapio.c.bak >> libbacktrace/mmapio.c
## show some more information if MapViewOfFileEx fails in gcc/config/i386/host-mingw32.c (version >= 11.2.0)
#patch -ulbf gcc/config/i386/host-mingw32.c << EOF
#@@ -191,3 +191,2 @@
#     {
#-      w32_error (__FUNCTION__, __FILE__, __LINE__, "MapViewOfFileEx");
#       CloseHandle(mmap_handle);
#EOF
## show some more information if MapViewOfFileEx fails in gcc/config/i386/host-mingw32.cc (version >= 12.1.0)
#patch -ulbf gcc/config/i386/host-mingw32.cc << EOF
#@@ -191,3 +191,2 @@
#     {
#-      w32_error (__FUNCTION__, __FILE__, __LINE__, "MapViewOfFileEx");
#       CloseHandle(mmap_handle);
#EOF
# fix precompiled header mapping issues in gcc/config/i386/host-mingw32.cc (version >= 12.2.0)
#### see also: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=105858
#### see also: https://github.com/msys2/MINGW-packages/blob/master/mingw-w64-gcc/0010-Fix-using-large-PCH.patch
#### see also: https://github.com/msys2/MINGW-packages/blob/master/mingw-w64-gcc/0021-PR14940-Allow-a-PCH-to-be-mapped-to-a-different-addr.patch
patch -ulbf gcc/config/i386/host-mingw32.cc << EOF
@@ -46,5 +46,2 @@

-/* FIXME: Is this big enough?  */
-static const size_t pch_VA_max_size  = 128 * 1024 * 1024;
-
 /* Granularity for reserving address space.  */
@@ -90,5 +87,2 @@
   void* res;
-  size = (size + va_granularity - 1) & ~(va_granularity - 1);
-  if (size > pch_VA_max_size)
-    return NULL;

@@ -102,3 +96,3 @@

-  res = VirtualAlloc (NULL, pch_VA_max_size,
+  res = VirtualAlloc (NULL, size,
                      MEM_RESERVE | MEM_TOP_DOWN,
@@ -143,3 +137,2 @@
   OSVERSIONINFO version_info;
-  int r;

@@ -152,3 +145,3 @@
      this to work.  We can't change the offset. */
-  if ((offset & (va_granularity - 1)) != 0 || size > pch_VA_max_size)
+  if ((offset & (va_granularity - 1)) != 0)
     return -1;
@@ -177,21 +170,20 @@

-  /* Retry five times, as here might occure a race with multiple gcc's
-     instances at same time.  */
-  for (r = 0; r < 5; r++)
-   {
-      mmap_addr = MapViewOfFileEx (mmap_handle, FILE_MAP_COPY, 0, offset,
-                                  size, addr);
-      if (mmap_addr == addr)
-       break;
-      if (r != 4)
-        Sleep (500);
-   }
-
-  if (mmap_addr != addr)
+  /* Try mapping the file at \`addr\`.  */
+  mmap_addr = MapViewOfFileEx (mmap_handle, FILE_MAP_COPY, 0, offset,
+                              size, addr);
+  if (mmap_addr == NULL)
     {
-      w32_error (__FUNCTION__, __FILE__, __LINE__, "MapViewOfFileEx");
-      CloseHandle(mmap_handle);
-      return  -1;
+      /* We could not map the file at its original address, so let the
+        system choose a different one. The PCH can be relocated later.  */
+      mmap_addr = MapViewOfFileEx (mmap_handle, FILE_MAP_COPY, 0, offset,
+                                  size, NULL);
+      if (mmap_addr == NULL)
+       {
+         w32_error (__FUNCTION__, __FILE__, __LINE__, "MapViewOfFileEx");
+         CloseHandle(mmap_handle);
+         return  -1;
+       }
     }

+  addr = mmap_addr;
   return 1;
EOF
## fix libphobos/libdruntime/config/mingw/msvc.c (version >= 11-20220219)
#####Bug reported: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=104659
#patch -ulbf libphobos/libdruntime/config/mingw/msvc.c << EOF
#@@ -52,3 +52,3 @@
# #if __MSVCRT_VERSION__ >= 0xE00
#-  msvcUsedUCRT = 1;
#+  msvcUsesUCRT = 1;
# #endif
#EOF
# fix libgo/sysinfo.c (version >= 11-20220409)
patch -ulbf libgo/sysinfo.c << EOF
@@ -19,3 +19,7 @@
 #include <ucontext.h>
+#ifdef _WIN32
+#include <winsock2.h>
+#else
 #include <netinet/in.h>
+#endif
 /* <netinet/tcp.h> needs u_char/u_short, but <sys/bsd_types> is only
@@ -29,3 +33,5 @@
 #endif
+#ifndef _WIN32
 #include <netinet/tcp.h>
+#endif
 #if defined(HAVE_NETINET_IN_SYSTM_H)
@@ -43,4 +49,6 @@
 #include <signal.h>
+#ifndef _WIN32
 #include <sys/ioctl.h>
 #include <termios.h>
+#endif
 #if defined(HAVE_SYSCALL_H)
@@ -72,2 +80,3 @@
 #endif
+#ifndef _WIN32
 #include <sys/resource.h>
@@ -75,4 +84,6 @@
 #include <sys/socket.h>
+#endif
 #include <sys/stat.h>
 #include <sys/time.h>
+#ifndef _WIN32
 #include <sys/times.h>
@@ -80,2 +91,3 @@
 #include <sys/un.h>
+#endif
 #if defined(HAVE_SYS_USER_H)
@@ -91,2 +103,3 @@
 #include <unistd.h>
+#ifndef _WIN32
 #include <netdb.h>
@@ -94,2 +107,3 @@
 #include <grp.h>
+#endif
 #if defined(HAVE_LINUX_FILTER_H)
EOF
## fix gcc/config/i386/host-mingw32.cc (version >= 12.1.0)
##### Bug reported: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=105858
##### See also: https://github.com/msys2/MINGW-packages/blob/master/mingw-w64-gcc/0021-PR14940-Allow-a-PCH-to-be-mapped-to-a-different-addr.patch
#patch -ulbf gcc/config/i386/host-mingw32.cc << EOF
#@@ -143,3 +143,2 @@
#   OSVERSIONINFO version_info;
#-  int r;
#
#@@ -177,19 +176,17 @@
#
#-  /* Retry five times, as here might occure a race with multiple gcc's
#-     instances at same time.  */
#-  for (r = 0; r < 5; r++)
#-   {
#-      mmap_addr = MapViewOfFileEx (mmap_handle, FILE_MAP_COPY, 0, offset,
#-                                  size, addr);
#-      if (mmap_addr == addr)
#-       break;
#-      if (r != 4)
#-        Sleep (500);
#-   }
#-
#-  if (mmap_addr != addr)
#+  /* Try mapping the file at \`addr\`.  */
#+  mmap_addr = MapViewOfFileEx (mmap_handle, FILE_MAP_COPY, 0, offset,
#+                              size, addr);
#+  if (mmap_addr == NULL)
#     {
#-      w32_error (__FUNCTION__, __FILE__, __LINE__, "MapViewOfFileEx");
#-      CloseHandle(mmap_handle);
#-      return  -1;
#+      /* We could not map the file at its original address, so let the
#+        system choose a different one. The PCH can be relocated later.  */
#+      mmap_addr = MapViewOfFileEx (mmap_handle, FILE_MAP_COPY, 0, offset,
#+                                  size, NULL);
#+      if (mmap_addr == NULL)
#+       {
#+         w32_error (__FUNCTION__, __FILE__, __LINE__, "MapViewOfFileEx");
#+         CloseHandle(mmap_handle);
#+         return  -1;
#+       }
#     }
#EOF
## fix libphobos/libdruntime/gcc/config.d.in (version >= 11-20220219)
#####Bug reported: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=104654
#patch -ulbf libphobos/libdruntime/gcc/config.d.in << EOF
#@@ -35,3 +35,3 @@
#
#-enum ThreadModel GNU_Thread_Model = ThreadModel.@DCFG_THREAD_MODEL@;
#+enum ThreadModel GNU_Thread_Model = ThreadModel.Win32;
#
#EOF
## fix gcc/doc/invoke.texi
#####invoke.texi:2203: @include: could not find R:/winlibs64_stage/gcc-11-20210710/build_mingw/gcc/../../gcc/../libiberty/at-file.texi
#sed -i.bak -e "s?[^ ]*\(/libiberty/at-file\.texi\)?../..\1?" gcc/doc/invoke.texi
## fix issue with nul input
#sed -i.bak -e "s?\(-nostdinc \)\$(DEVNULL)?\1$(pwd)/empty?" gcc/Makefile.in
#touch empty
## fix missing mmap in gcc/ggc-common.cc (version >= 12.1.0)
#patch -ulbf gcc/ggc-common.cc << EOF
#@@ -32,2 +32,5 @@
# #include "options.h"
#+#ifdef HAVE_MMAP_FILE
#+#include <sys/mman.h>
#+#endif
#
#EOF
## fix missing mmap in gcc/gcc.cc (version >= 12.2.0)
#patch -ulbf gcc/gcc.cc << EOF
#@@ -45,2 +45,5 @@
# #include "spellcheck.h"
#+#ifdef HAVE_MMAP_FILE
#+#include <sys/mman.h>
#+#endif
#
#EOF
# fix libgomp/env.c (version >= 13-20221030)
patch -ulbf libgomp/env.c << EOF
@@ -285,3 +285,3 @@
 {
-  unsigned upper = (unsigned long) params[2];
+  unsigned upper = (uintptr_t) params[2];
   unsigned long pvalue = 0;
EOF
## fix error: expected identifier before string constant in gcc/system.h (version >= 12.2.0)
#patch -ulbf gcc/system.h << EOF
#@@ -781,3 +781,5 @@
#                                         ATTRIBUTE_NORETURN ATTRIBUTE_COLD;
#+#ifndef __cplusplus
# #define abort() fancy_abort (__FILE__, __LINE__, __FUNCTION__)
#+#endif
#
#EOF
# fix undefined index() in gcc/m2/gm2spec.cc and gcc/m2/mc-boot-ch/Glibc.c(version >= 13.1.0)
sed -i.bak -e "s/\bindex/strchr/" gcc/m2/gm2spec.cc gcc/m2/mc-boot-ch/Glibc.c gcc/m2/mc-boot-ch/Gdtoa.cc
# fix gcc/m2/mc-boot-ch/GSelective.c (version >= 13.1.0)
patch -ulbf gcc/m2/mc-boot-ch/GSelective.c << EOF
@@ -28,2 +28,6 @@
 #include "gm2-libs-host.h"
+#ifdef _WIN32
+#undef HAVE_SELECT
+typedef void fd_set;
+#endif

EOF
# fix gcc/m2/mc-boot-ch/GSysExceptions.c (version >= 13.1.0)
patch -ulbf gcc/m2/mc-boot-ch/GSysExceptions.c << EOF
@@ -25,2 +25,5 @@
 #include "gm2-libs-host.h"
+#ifdef _WIN32
+#undef HAVE_SIGNAL_H
+#endif

EOF
# fix gcc/cp/parser.cc (version >= 14.1.0)
#### See also bug reported here: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=115312
sed -i.bak -e "s?gcc_assert (\!the_parser);?//&?" gcc/cp/parser.cc
## fix libstdc++-v3/src/c++20/tzdb.cc (version >= 14.2.0)
#patch -ulbf libstdc++-v3/src/c++20/tzdb.cc << EOF
#@@ -38,2 +38,3 @@
# #include <filesystem> // filesystem::read_symlink
#+#undef _GLIBCXX_STATIC_TZDATA
#
#EOF
## fix undefined std::unique_ptr (version >= 15-20241110)
#sed -i.bak -e "1i #define INCLUDE_MEMORY\n#include <memory>" gcc/diagnostic.h gcc/pretty-print.h
## fix support for MinGW-w64 on ARM64 (aarch64) in gcc/config.gcc (version >= 15-20241013)
#patch -ulbf gcc/config.gcc << EOF
#@@ -1291,2 +1291,3 @@
#        c_target_objs="\${c_target_objs} msformat-c.o"
#+       cxx_target_objs="\${cxx_target_objs} winnt-cxx.o msformat-c.o"
#        d_target_objs="\${d_target_objs} winnt-d.o"
#EOF
## fix libiberty/putenv.c (version >= 15-20241117)
#patch -ulbf libiberty/putenv.c << EOF
#@@ -71,2 +71,5 @@
# {
#+#ifdef __MINGW32__
#+  return _putenv(string);
#+#else
#   const char *const name_end = strchr (string, '=');
#@@ -83,2 +86,3 @@
#   return 0;
#+#endif
# }
#EOF
## fix support for MinGW-w64 on ARM64 (aarch64) in gcc/config.host (version >= 15-20241013)
#patch -ulbf gcc/config.host << EOF
#@@ -102,3 +102,3 @@
#   aarch64*-*-freebsd* | aarch64*-*-linux* | aarch64*-*-fuchsia* |\\
#-  aarch64*-*-darwin*)
#+  aarch64*-*-darwin* | aarch64-*-mingw*)
#     case \${target} in
#EOF
## fix support for MinGW-w64 on ARM64 (aarch64) in gcc/config.host (version >= 15-20241013)
#mkdir -p build_mingw/mingw-w64/usr/include
#mkdir -p build_mingw/libiberty
#cp -u libiberty/at-file.texi build_mingw/libiberty/
## fix missing -lmman (version >= 12.1.0)
#sed -i.bak -e "s/^NETLIBS := /&-lmman /" c++tools/Makefile.in
#sed -i.bak -e "s/-o \$(FI).*$/& -lmman /" fixincludes/Makefile.in
#sed -i.bak -e "s/^LIBICONV =.*$/& -lmman/" gcc/Makefile.in
# put LDFLAGS at the end of the linker arguments to make sure -lmman works
sed -i.bak -e "s/\(\s\$(LDFLAGS)\)\([^\\\\\"]*\)$/\2\1/" $(grep -l "\$(LDFLAGS)" $(find -name Makefile.in))
# fix build issue (version >= 12.1.0)
#### bug reported: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=105506
patch -ulbf Makefile.in << EOF
@@ -449,2 +449,3 @@

+@if pgo-build
 # Pass additional PGO and LTO compiler options to the PGO build.
@@ -491,2 +492,3 @@
 PGO_BUILD_TRAINING = \$(addprefix maybe-check-,\$(PGO-TRAINING-TARGETS))
+@endif pgo-build

EOF
# fix Makefile.tpl (version >= 12.2.0)
patch -ulbf Makefile.tpl << EOF
@@ -452,2 +452,3 @@

+@if pgo-build
 # Pass additional PGO and LTO compiler options to the PGO build.
@@ -494,2 +495,3 @@
 PGO_BUILD_TRAINING = \$(addprefix maybe-check-,\$(PGO-TRAINING-TARGETS))
+@endif pgo-build

EOF
# fix unsupported go language for GCC 12 and up in configure
if echo $VERSION|grep -q "^1[2-9][.\-]"; then
patch -ulbf configure << EOF
@@ -3577,3 +3577,3 @@
 case "\${target}" in
-*-*-darwin* | *-*-cygwin* | *-*-mingw* | bpf-* )
+*-*-darwin* | *-*-cygwin* | bpf-* )
     unsupported_languages="\$unsupported_languages go"
@@ -3609,3 +3609,3 @@
        ;;
-    *-*-cygwin* | *-*-mingw*)
+    *-*-cygwin*)
        noconfigdirs="\$noconfigdirs target-libgo"
EOF
fi
## fix issue executing executable files without .exe extension (version >= 12.2.0)
#####fatal error: cannot execute 'cc1': CreateProcess: No such file or directory
##### bug reported: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=105506
#patch -ulbf Makefile.in << EOF
#@@ -447,49 +447,6 @@ LIBCXXFLAGS = \$(CXXFLAGS) -fno-implicit-templates
# GOCFLAGS = \$(CFLAGS)
# GDCFLAGS = \$(CFLAGS)
# 
#-# Pass additional PGO and LTO compiler options to the PGO build.
#-BUILD_CFLAGS = \$(PGO_BUILD_CFLAGS) \$(PGO_BUILD_LTO_CFLAGS)
#-override CFLAGS += \$(BUILD_CFLAGS)
#-override CXXFLAGS += \$(BUILD_CFLAGS)
#-
#-# Additional PGO and LTO compiler options to generate profiling data
#-# for the PGO build.
#-PGO_BUILD_GEN_FLAGS_TO_PASS = \\
#-        PGO_BUILD_CFLAGS="@PGO_BUILD_GEN_CFLAGS@" \\
#-        PGO_BUILD_LTO_CFLAGS="@PGO_BUILD_LTO_CFLAGS@"
#-
#-# NB: Filter out any compiler options which may fail PGO training runs.
#-PGO_BUILD_TRAINING_CFLAGS:= \\
#-        \$(filter-out -Werror=%,\$(CFLAGS))
#-PGO_BUILD_TRAINING_CXXFLAGS:=\\
#-        \$(filter-out -Werror=%,\$(CXXFLAGS))
#-PGO_BUILD_TRAINING_CFLAGS:= \\
#-        \$(filter-out -Wall,\$(PGO_BUILD_TRAINING_CFLAGS))
#-PGO_BUILD_TRAINING_CXXFLAGS:= \\
#-        \$(filter-out -Wall,\$(PGO_BUILD_TRAINING_CXXFLAGS))
#-PGO_BUILD_TRAINING_CFLAGS:= \\
#-        \$(filter-out -specs=%,\$(PGO_BUILD_TRAINING_CFLAGS))
#-PGO_BUILD_TRAINING_CXXFLAGS:= \\
#-        \$(filter-out -specs=%,\$(PGO_BUILD_TRAINING_CXXFLAGS))
#-PGO_BUILD_TRAINING_FLAGS_TO_PASS = \\
#-        PGO_BUILD_TRAINING=yes \\
#-        CFLAGS_FOR_TARGET="\$(PGO_BUILD_TRAINING_CFLAGS)" \\
#-        CXXFLAGS_FOR_TARGET="\$(PGO_BUILD_TRAINING_CXXFLAGS)"
#-
#-# Ignore "make check" errors in PGO training runs.
#-PGO_BUILD_TRAINING_MFLAGS = -i
#-
#-# Additional PGO and LTO compiler options to use profiling data for the
#-# PGO build.
#-PGO_BUILD_USE_FLAGS_TO_PASS = \\
#-        PGO_BUILD_CFLAGS="@PGO_BUILD_USE_CFLAGS@" \\
#-        PGO_BUILD_LTO_CFLAGS="@PGO_BUILD_LTO_CFLAGS@"
#-
#-# PGO training targets for the PGO build.  FIXME: Add gold tests to
#-# training.
#-PGO-TRAINING-TARGETS = binutils gas gdb ld sim
#-PGO_BUILD_TRAINING = \$(addprefix maybe-check-,\$(PGO-TRAINING-TARGETS))
#-
# CREATE_GCOV = create_gcov
# 
# TFLAGS =
#@@ -710,6 +667,49 @@ all:
# @host_makefile_frag@
# ###
# 
#+# Pass additional PGO and LTO compiler options to the PGO build.
#+BUILD_CFLAGS = \$(PGO_BUILD_CFLAGS) \$(PGO_BUILD_LTO_CFLAGS)
#+override CFLAGS += \$(BUILD_CFLAGS)
#+override CXXFLAGS += \$(BUILD_CFLAGS)
#+
#+# Additional PGO and LTO compiler options to generate profiling data
#+# for the PGO build.
#+PGO_BUILD_GEN_FLAGS_TO_PASS = \\
#+$(echo -e '\\t')PGO_BUILD_CFLAGS="@PGO_BUILD_GEN_CFLAGS@" \\
#+$(echo -e '\\t')PGO_BUILD_LTO_CFLAGS="@PGO_BUILD_LTO_CFLAGS@"
#+
#+# NB: Filter out any compiler options which may fail PGO training runs.
#+PGO_BUILD_TRAINING_CFLAGS:= \\
#+$(echo -e '\\t')\$(filter-out -Werror=%,\$(CFLAGS))
#+PGO_BUILD_TRAINING_CXXFLAGS:=\\
#+$(echo -e '\\t')\$(filter-out -Werror=%,\$(CXXFLAGS))
#+PGO_BUILD_TRAINING_CFLAGS:= \\
#+$(echo -e '\\t')\$(filter-out -Wall,\$(PGO_BUILD_TRAINING_CFLAGS))
#+PGO_BUILD_TRAINING_CXXFLAGS:= \\
#+$(echo -e '\\t')\$(filter-out -Wall,\$(PGO_BUILD_TRAINING_CXXFLAGS))
#+PGO_BUILD_TRAINING_CFLAGS:= \\
#+$(echo -e '\\t')\$(filter-out -specs=%,\$(PGO_BUILD_TRAINING_CFLAGS))
#+PGO_BUILD_TRAINING_CXXFLAGS:= \\
#+$(echo -e '\\t')\$(filter-out -specs=%,\$(PGO_BUILD_TRAINING_CXXFLAGS))
#+PGO_BUILD_TRAINING_FLAGS_TO_PASS = \\
#+$(echo -e '\\t')PGO_BUILD_TRAINING=yes \\
#+$(echo -e '\\t')CFLAGS_FOR_TARGET="\$(PGO_BUILD_TRAINING_CFLAGS)" \\
#+$(echo -e '\\t')CXXFLAGS_FOR_TARGET="\$(PGO_BUILD_TRAINING_CXXFLAGS)"
#+
#+# Ignore "make check" errors in PGO training runs.
#+PGO_BUILD_TRAINING_MFLAGS = -i
#+
#+# Additional PGO and LTO compiler options to use profiling data for the
#+# PGO build.
#+PGO_BUILD_USE_FLAGS_TO_PASS = \\
#+$(echo -e '\\t')PGO_BUILD_CFLAGS="@PGO_BUILD_USE_CFLAGS@" \\
#+$(echo -e '\\t')PGO_BUILD_LTO_CFLAGS="@PGO_BUILD_LTO_CFLAGS@"
#+
#+# PGO training targets for the PGO build.  FIXME: Add gold tests to
#+# training.
#+PGO-TRAINING-TARGETS = binutils gas gdb ld sim
#+PGO_BUILD_TRAINING = \$(addprefix maybe-check-,\$(PGO-TRAINING-TARGETS))
#+
# # This is the list of directories that may be needed in RPATH_ENVVAR
# # so that programs built for the target machine work.
# TARGET_LIB_PATH = \$(TARGET_LIB_PATH_libstdc++-v3)\$(TARGET_LIB_PATH_libsanitizer)\$(TARGET_LIB_PATH_libvtv)\$(TARGET_LIB_PATH_liboffloadmic)\$(TARGET_LIB_PATH_libssp)\$(TARGET_LIB_PATH_libphobos)\$(TARGET_LIB_PATH_libgomp)\$(TARGET_LIB_PATH_libitm)\$(TARGET_LIB_PATH_libatomic)\$(HOST_LIB_PATH_gcc)
#EOF
#patch -ulbf Makefile.tpl << EOF
#@@ -450,49 +450,6 @@ LIBCXXFLAGS = \$(CXXFLAGS) -fno-implicit-templates
# GOCFLAGS = \$(CFLAGS)
# GDCFLAGS = \$(CFLAGS)
# 
#-# Pass additional PGO and LTO compiler options to the PGO build.
#-BUILD_CFLAGS = \$(PGO_BUILD_CFLAGS) \$(PGO_BUILD_LTO_CFLAGS)
#-override CFLAGS += \$(BUILD_CFLAGS)
#-override CXXFLAGS += \$(BUILD_CFLAGS)
#-
#-# Additional PGO and LTO compiler options to generate profiling data
#-# for the PGO build.
#-PGO_BUILD_GEN_FLAGS_TO_PASS = \\
#-        PGO_BUILD_CFLAGS="@PGO_BUILD_GEN_CFLAGS@" \\
#-        PGO_BUILD_LTO_CFLAGS="@PGO_BUILD_LTO_CFLAGS@"
#-
#-# NB: Filter out any compiler options which may fail PGO training runs.
#-PGO_BUILD_TRAINING_CFLAGS:= \\
#-        \$(filter-out -Werror=%,\$(CFLAGS))
#-PGO_BUILD_TRAINING_CXXFLAGS:=\\
#-        \$(filter-out -Werror=%,\$(CXXFLAGS))
#-PGO_BUILD_TRAINING_CFLAGS:= \\
#-        \$(filter-out -Wall,\$(PGO_BUILD_TRAINING_CFLAGS))
#-PGO_BUILD_TRAINING_CXXFLAGS:= \\
#-        \$(filter-out -Wall,\$(PGO_BUILD_TRAINING_CXXFLAGS))
#-PGO_BUILD_TRAINING_CFLAGS:= \\
#-        \$(filter-out -specs=%,\$(PGO_BUILD_TRAINING_CFLAGS))
#-PGO_BUILD_TRAINING_CXXFLAGS:= \\
#-        \$(filter-out -specs=%,\$(PGO_BUILD_TRAINING_CXXFLAGS))
#-PGO_BUILD_TRAINING_FLAGS_TO_PASS = \\
#-        PGO_BUILD_TRAINING=yes \\
#-        CFLAGS_FOR_TARGET="\$(PGO_BUILD_TRAINING_CFLAGS)" \\
#-        CXXFLAGS_FOR_TARGET="\$(PGO_BUILD_TRAINING_CXXFLAGS)"
#-
#-# Ignore "make check" errors in PGO training runs.
#-PGO_BUILD_TRAINING_MFLAGS = -i
#-
#-# Additional PGO and LTO compiler options to use profiling data for the
#-# PGO build.
#-PGO_BUILD_USE_FLAGS_TO_PASS = \\
#-        PGO_BUILD_CFLAGS="@PGO_BUILD_USE_CFLAGS@" \\
#-        PGO_BUILD_LTO_CFLAGS="@PGO_BUILD_LTO_CFLAGS@"
#-
#-# PGO training targets for the PGO build.  FIXME: Add gold tests to
#-# training.
#-PGO-TRAINING-TARGETS = binutils gas gdb ld sim
#-PGO_BUILD_TRAINING = \$(addprefix maybe-check-,\$(PGO-TRAINING-TARGETS))
#-
# CREATE_GCOV = create_gcov
# 
# TFLAGS =
#@@ -633,6 +590,49 @@ all:
# @host_makefile_frag@
# ###
# 
#+# Pass additional PGO and LTO compiler options to the PGO build.
#+BUILD_CFLAGS = \$(PGO_BUILD_CFLAGS) \$(PGO_BUILD_LTO_CFLAGS)
#+override CFLAGS += \$(BUILD_CFLAGS)
#+override CXXFLAGS += \$(BUILD_CFLAGS)
#+
#+# Additional PGO and LTO compiler options to generate profiling data
#+# for the PGO build.
#+PGO_BUILD_GEN_FLAGS_TO_PASS = \\
#+$(echo -e '\\t')PGO_BUILD_CFLAGS="@PGO_BUILD_GEN_CFLAGS@" \\
#+$(echo -e '\\t')PGO_BUILD_LTO_CFLAGS="@PGO_BUILD_LTO_CFLAGS@"
#+
#+# NB: Filter out any compiler options which may fail PGO training runs.
#+PGO_BUILD_TRAINING_CFLAGS:= \\
#+$(echo -e '\\t')\$(filter-out -Werror=%,\$(CFLAGS))
#+PGO_BUILD_TRAINING_CXXFLAGS:=\\
#+$(echo -e '\\t')\$(filter-out -Werror=%,\$(CXXFLAGS))
#+PGO_BUILD_TRAINING_CFLAGS:= \\
#+$(echo -e '\\t')\$(filter-out -Wall,\$(PGO_BUILD_TRAINING_CFLAGS))
#+PGO_BUILD_TRAINING_CXXFLAGS:= \\
#+$(echo -e '\\t')\$(filter-out -Wall,\$(PGO_BUILD_TRAINING_CXXFLAGS))
#+PGO_BUILD_TRAINING_CFLAGS:= \\
#+$(echo -e '\\t')\$(filter-out -specs=%,\$(PGO_BUILD_TRAINING_CFLAGS))
#+PGO_BUILD_TRAINING_CXXFLAGS:= \\
#+$(echo -e '\\t')\$(filter-out -specs=%,\$(PGO_BUILD_TRAINING_CXXFLAGS))
#+PGO_BUILD_TRAINING_FLAGS_TO_PASS = \\
#+$(echo -e '\\t')PGO_BUILD_TRAINING=yes \\
#+$(echo -e '\\t')CFLAGS_FOR_TARGET="\$(PGO_BUILD_TRAINING_CFLAGS)" \\
#+$(echo -e '\\t')CXXFLAGS_FOR_TARGET="\$(PGO_BUILD_TRAINING_CXXFLAGS)"
#+
#+# Ignore "make check" errors in PGO training runs.
#+PGO_BUILD_TRAINING_MFLAGS = -i
#+
#+# Additional PGO and LTO compiler options to use profiling data for the
#+# PGO build.
#+PGO_BUILD_USE_FLAGS_TO_PASS = \\
#+$(echo -e '\\t')PGO_BUILD_CFLAGS="@PGO_BUILD_USE_CFLAGS@" \\
#+$(echo -e '\\t')PGO_BUILD_LTO_CFLAGS="@PGO_BUILD_LTO_CFLAGS@"
#+
#+# PGO training targets for the PGO build.  FIXME: Add gold tests to
#+# training.
#+PGO-TRAINING-TARGETS = binutils gas gdb ld sim
#+PGO_BUILD_TRAINING = \$(addprefix maybe-check-,\$(PGO-TRAINING-TARGETS))
#+
# # This is the list of directories that may be needed in RPATH_ENVVAR
# # so that programs built for the target machine work.
# TARGET_LIB_PATH = [+ FOR target_modules +][+
#EOF
## avoid -fPIC (useless on Windows and not supported by clang)
#sed -i.bak -e "s/-fPIC//" $(grep -l "\-fPIC" $(find -name configure))
## fix linker error: export ordinal too large (version >= 13)
##sed -i.bak "s/--export-all-symbols/--discard-all/" gcc/configure
##sed -i.bak "s/--export-all-symbols/--gc-keep-exported/" gcc/configure
if ! ${CC:-gcc} --version|grep -q "^clang"; then
 sed -i.bak "s/--export-all-symbols/--gc-keep-exported/" $(grep -l "\--export-all-symbols" $(find -name configure))
fi
## missing mmap/munmap
#for F in $(find -name config.h.in); do echo "#include <sys/mman.h>" >> $F; done
# fix missing mmap/munmap and linker error: export ordinal too large
##sed -i.bak "s/\(\$wl\)--export-all-symbols/\1--gc-keep-exported \1-lmman/" gcc/configure
##sed -i.bak "s/\(\$wl\)--export-all-symbols/\1--discard-all/" libgo/configure
##sed -i.bak "s/\(\$wl\)--export-all-symbols/\1--gc-keep-exported \1-lmman/" $(grep -l "\${wl}--export-all-symbols" $(find -name configure))
if ! ${CC:-gcc} --version|grep -q "^clang"; then
 sed -i.bak "s/\(\${wl}\)--export-all-symbols/\1--gc-keep-exported \1-lmman/" $(grep -l "\${wl}--export-all-symbols" $(find -name configure))
fi
# fix detection of GMP/MPFR/MPC
sed -i.bak -e  "s/#include [<\"]\(gmp\|mpc\|mpfr\|isl\)\.h[>\"]/#include <stdio.h>\n&/" configure
# copy MinGW-w64 files
mkdir -p build_mingw/mingw-w64/mingw/lib &&
cp -rf $MINGWPREFIX/share/mingw-w64/include build_mingw/mingw-w64/mingw &&
( cp -rf $MINGWPREFIX/share/mingw-w64/$RUNPLATFORM/lib/* build_mingw/mingw-w64/mingw/lib/ || cp -rf $MINGWPREFIX/share/mingw-w64/lib build_mingw/mingw-w64/mingw/ ) &&
mkdir -p build_mingw &&
 wl-showstatus configure &&
 cd build_mingw &&
 #../configure --prefix=$INSTALLPREFIX/share/gcc --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-pkgversion="MinGW-W64 $(echo $RUNPLATFORM | sed -e "s/-.*$//")-win32-dwarf, built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi))" --enable-threads=win32 --with-dwarf2 --disable-sjlj-exceptions --enable-serial-configure --disable-bootstrap --enable-host-shared --disable-multilib --enable-languages=c,c++,fortran,lto,objc,obj-c++ --disable-{nls,stage1-checking,win32-registry} --enable-{ld,gold,libquadmath,libada,libssp,libstdcxx,lto,fully-dynamic-string} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX --enable-install-libiberty --with-diagnostics-color=auto --with-system-zlib --with-host-libstdcxx="-lstdc++" --with-build-sysroot=$(pwd)/mingw-w64 &&
 #../configure --prefix=$INSTALLPREFIX/share/gcc --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-pkgversion="MinGW-W64 $(echo $RUNPLATFORM | sed -e "s/-.*$//")-win32-dwarf, built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi))" --enable-checking=release --enable-threads=win32 --with-dwarf2 --disable-sjlj-exceptions --disable-libunwind-exceptions --enable-serial-configure --disable-bootstrap --enable-host-shared --disable-multilib --enable-languages=c,c++,fortran,lto,objc,obj-c++ --disable-{nls,stage1-checking,win32-registry} --enable-{ld,gold,libquadmath,libada,libssp,libstdcxx,lto,fully-dynamic-string} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX --enable-install-libiberty --enable-__cxa_atexit --without-included-gettext --with-diagnostics-color=auto --with-system-zlib --with-host-libstdcxx="-lstdc++" --with-build-sysroot=$(pwd)/mingw-w64 &&
 #../configure --prefix=$INSTALLPREFIX/share/gcc --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-pkgversion="MinGW-W64 $(echo $RUNPLATFORM | sed -e "s/-.*$//")-posix-dwarf, built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi))" --enable-checking=release --enable-threads=posix --with-dwarf2 --disable-sjlj-exceptions --disable-libunwind-exceptions --enable-serial-configure --disable-bootstrap --enable-host-shared --disable-multilib --enable-languages=c,c++,fortran,lto,objc,obj-c++ --disable-{nls,stage1-checking,win32-registry} --enable-{ld,gold,libquadmath,libada,libssp,libstdcxx,lto,fully-dynamic-string} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX --enable-install-libiberty --enable-__cxa_atexit --without-included-gettext --with-diagnostics-color=auto --with-system-zlib --with-host-libstdcxx="-lstdc++" --with-build-sysroot=$(pwd)/mingw-w64 &&
 #../configure --prefix=$INSTALLPREFIX/share/gcc --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-pkgversion="MinGW-W64 $(echo $RUNPLATFORM | sed -e "s/-.*$//")-posix-dwarf, built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi))" --enable-checking=release --enable-threads=posix --with-dwarf2 --disable-sjlj-exceptions --disable-libunwind-exceptions --enable-serial-configure --disable-bootstrap --enable-host-shared --disable-multilib --disable-rpath --disable-version-specific-runtime-libs --with-stabs --enable-languages=c,c++,fortran,lto,objc,obj-c++ --disable-{nls,stage1-checking,win32-registry} --enable-{ld,gold,libquadmath,libada,libssp,libstdcxx,lto,fully-dynamic-string} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX --enable-install-libiberty --enable-__cxa_atexit --without-included-gettext --with-diagnostics-color=auto --with-system-zlib --with-host-libstdcxx="-lstdc++" --with-build-sysroot=$(pwd)/mingw-w64 &&
 #../configure --prefix=$INSTALLPREFIX/share/gcc --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-pkgversion="MinGW-W64 $(echo $RUNPLATFORM | sed -e "s/-.*$//")-posix-dwarf, built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi))" --enable-checking=release --enable-threads=posix --with-dwarf2 --disable-sjlj-exceptions --disable-libunwind-exceptions --enable-serial-configure --disable-bootstrap --enable-host-shared --disable-multilib --disable-rpath --disable-version-specific-runtime-libs --with-stabs --enable-languages=c,c++,fortran,lto,objc,obj-c++,d --disable-{nls,stage1-checking,win32-registry} --enable-{ld,gold,libquadmath,libada,libssp,libstdcxx,lto,fully-dynamic-string,libgomp} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX --enable-install-libiberty --enable-__cxa_atexit --without-included-gettext --with-diagnostics-color=auto --with-system-zlib --with-host-libstdcxx="-lstdc++" --with-build-sysroot=$(pwd)/mingw-w64 &&
 #../configure --prefix=$INSTALLPREFIX/share/gcc --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-pkgversion="MinGW-W64 $(echo $RUNPLATFORM | sed -e "s/-.*$//")-posix-dwarf, built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi))" --with-tune=generic --enable-checking=release --enable-threads=posix --with-dwarf2 --disable-sjlj-exceptions --disable-libunwind-exceptions --enable-serial-configure --disable-bootstrap --enable-host-shared --disable-rpath --disable-libstdcxx-pch --enable-libstdcxx-time=yes --disable-libstdcxx-debug --disable-version-specific-runtime-libs --with-stabs --disable-symvers --enable-languages=c,c++,fortran,lto,objc,obj-c++$(if echo $VERSION|grep -vq "^[3-8]\."; then echo -n ",d"; fi) --disable-{nls,stage1-checking,win32-registry,multilib} --enable-{ld,gold,libquadmath,libada,libssp,libstdcxx,lto,fully-dynamic-string,libgomp,graphite} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX --enable-install-libiberty --enable-__cxa_atexit --without-included-gettext --with-diagnostics-color=auto --with-libiconv --with-system-zlib --with-host-libstdcxx="-lstdc++" --with-build-sysroot=$(pwd)/mingw-w64 &&
 #../configure --prefix=$INSTALLPREFIX/share/gcc --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-pkgversion="MinGW-W64 $(echo $RUNPLATFORM | sed -e "s/-.*$//")-posix-dwarf, built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi))" --with-tune=generic --enable-checking=release --enable-threads=posix --with-dwarf2 --enable-serial-configure --disable-bootstrap --enable-host-shared --disable-rpath --disable-version-specific-runtime-libs --with-stabs --disable-symvers --enable-languages=c,c++,fortran,lto,objc,obj-c++$(if echo $VERSION|grep -vq "^[3-8]\."; then echo -n ",d"; fi) --disable-{sjlj-exceptions,libunwind-exceptions,nls,stage1-checking,win32-registry,multilib,libstdcxx-pch,libstdcxx-debug} --enable-{ld,gold,libquadmath,libada,libssp,libstdcxx,lto,fully-dynamic-string,libgomp,graphite,libstdcxx-time,libstdcxx-threads} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX --enable-install-libiberty --enable-__cxa_atexit --without-included-gettext --with-diagnostics-color=auto --with-libiconv --with-system-zlib --with-host-libstdcxx="-lstdc++" --with-build-sysroot=$(pwd)/mingw-w64 &&
 #../configure --prefix=$INSTALLPREFIX/share/gcc --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-pkgversion="MinGW-W64 $(echo $RUNPLATFORM | sed -e "s/-.*$//")-posix-dwarf, built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi))" --with-tune=generic --enable-checking=release --enable-threads=posix --with-dwarf2 --disable-sjlj-exceptions --disable-libunwind-exceptions --enable-serial-configure --disable-bootstrap --enable-host-shared --disable-rpath --disable-libstdcxx-pch --enable-libstdcxx-time=yes --disable-libstdcxx-debug --disable-version-specific-runtime-libs --with-stabs --disable-symvers --enable-languages=c,c++,fortran,lto,objc,obj-c++$(if echo $VERSION|grep -vq "^[3-8]\."; then echo -n ",d"; fi) --disable-{nls,stage1-checking,win32-registry,multilib} --enable-{ld,gold,libquadmath,libada,libssp,libstdcxx,lto,fully-dynamic-string,libgomp,graphite,mingw-wildcard} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX --enable-install-libiberty --enable-__cxa_atexit --without-included-gettext --with-diagnostics-color=auto --with-libiconv --with-system-zlib --with-build-sysroot=$(pwd)/mingw-w64 &&
 #../configure --prefix=$INSTALLPREFIX/share/gcc --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-pkgversion="MinGW-W64 $(echo $RUNPLATFORM | sed -e "s/-.*$//")-posix-dwarf, built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi))" --with-tune=generic --enable-checking=release --enable-threads=posix --with-dwarf2 --disable-sjlj-exceptions --disable-libunwind-exceptions --enable-serial-configure --disable-bootstrap --enable-host-shared --enable-default-ssp --disable-rpath --disable-libstdcxx-pch --enable-libstdcxx-time=yes --disable-libstdcxx-debug --disable-version-specific-runtime-libs --with-stabs --disable-symvers --enable-languages=c,c++,fortran,lto,objc,obj-c++$(if echo $VERSION|grep -vq "^[3-8]\."; then echo -n ",d"; fi) --disable-{gold,nls,stage1-checking,win32-registry,multilib} --enable-{ld,libquadmath,libada,libssp,libstdcxx,lto,fully-dynamic-string,libgomp,graphite,mingw-wildcard} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX --enable-install-libiberty --enable-__cxa_atexit --without-included-gettext --with-diagnostics-color=auto --with-libiconv --with-system-zlib --with-build-sysroot=$(pwd)/mingw-w64 &&
 #../configure --prefix=$INSTALLPREFIX/share/gcc --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-pkgversion="MinGW-W64 $(echo $RUNPLATFORM | sed -e "s/-.*$//")-posix-dwarf, built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi))" --with-tune=generic --enable-checking=release --enable-threads=posix --with-dwarf2 --disable-sjlj-exceptions --disable-libunwind-exceptions --enable-serial-configure --disable-bootstrap --enable-host-shared --enable-plugin --enable-default-ssp --disable-rpath --disable-libstdcxx-pch --enable-libstdcxx-time=yes --disable-libstdcxx-debug --disable-version-specific-runtime-libs --with-stabs --disable-symvers --enable-languages=c,c++,fortran,lto,objc,obj-c++$(if echo $VERSION|grep -vq "^[3-8]\."; then echo -n ",d"; fi) --disable-{gold,nls,stage1-checking,win32-registry,multilib} --enable-{ld,libquadmath,libada,libssp,libstdcxx,lto,fully-dynamic-string,libgomp,graphite,mingw-wildcard} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX --enable-install-libiberty --enable-__cxa_atexit --without-included-gettext --with-diagnostics-color=auto --with-libiconv --with-system-zlib --with-build-sysroot=$(pwd)/mingw-w64 --disable-large-address-aware &&
 #../configure --prefix=$INSTALLPREFIX/share/gcc --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-pkgversion="MinGW-W64 $(echo $RUNPLATFORM | sed -e "s/-.*$//")-posix-$(if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "dwarf"; else echo "seh"; fi), built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi))" --with-tune=generic --enable-checking=release --enable-threads=posix $(if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--with-dwarf2"; fi) --disable-sjlj-exceptions --disable-libunwind-exceptions --enable-serial-configure --disable-bootstrap --enable-host-shared --enable-plugin --enable-default-ssp --disable-rpath --disable-libstdcxx-pch --enable-libstdcxx-time=yes --disable-libstdcxx-debug --disable-version-specific-runtime-libs --with-stabs --disable-symvers --enable-languages=c,c++,fortran,lto,objc,obj-c++$(if echo $VERSION|grep -vq "^[3-8]\."; then echo -n ",d"; fi) --disable-{gold,nls,stage1-checking,win32-registry,multilib} --enable-{ld,libquadmath,libada,libssp,libstdcxx,lto,fully-dynamic-string,libgomp,graphite,mingw-wildcard} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX --enable-install-libiberty --enable-__cxa_atexit --without-included-gettext --with-diagnostics-color=auto --with-libiconv --with-system-zlib --with-build-sysroot=$(pwd)/mingw-w64 $(if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--enable-large-address-aware"; fi) &&
 #LDFLAGS="-Wl,--allow-multiple-definition" 
 #PATH=$MINGWPREFIX/share/binutils/bin:$PATH ../configure --prefix=$INSTALLPREFIX/share/gcc --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-pkgversion="MinGW-W64 $(echo $RUNPLATFORM | sed -e "s/-.*$//")-posix-$(if [ "0$USE_SJLJ" -ne 0 ]; then echo "sjlj"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "dwarf"; else echo "seh"; fi; fi), built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi))" --with-tune=generic --enable-checking=release --enable-threads=posix $(if [ "0$USE_SJLJ" -ne 0 ]; then if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--without-dwarf2 "; fi; echo "--enable-sjlj-exceptions"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--with-dwarf2 "; fi; echo "--disable-sjlj-exceptions"; fi) --disable-libunwind-exceptions --enable-serial-configure --disable-bootstrap --enable-host-shared --disable-plugin --enable-default-ssp --disable-rpath --disable-libstdcxx-pch --enable-libstdcxx-time=yes --disable-libstdcxx-debug --disable-version-specific-runtime-libs --with-stabs --disable-symvers --enable-languages=c,c++,fortran,lto,objc,obj-c++$(if echo $VERSION|grep -vq "^[3-8]\."; then echo -n ",d"; fi) --disable-{gold,nls,stage1-checking,win32-registry,multilib} --enable-{ld,libquadmath,libada,libssp,libstdcxx,lto,fully-dynamic-string,libgomp,graphite,mingw-wildcard} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX --enable-install-libiberty --enable-__cxa_atexit --without-included-gettext --with-diagnostics-color=auto --with-libiconv --with-system-zlib --with-native-system-header-dir=$MINGWPREFIX/share/mingw-w64/include --with-build-sysroot=$(pwd)/mingw-w64 $(if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--enable-large-address-aware"; fi) &&
 #PATH=$MINGWPREFIX/share/binutils/bin:$PATH ../configure --prefix=$INSTALLPREFIX/share/gcc --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-pkgversion="MinGW-W64 $(echo $RUNPLATFORM | sed -e "s/-.*$//")-posix-$(if [ "0$USE_SJLJ" -ne 0 ]; then echo "sjlj"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "dwarf"; else echo "seh"; fi; fi), built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi))" --with-tune=generic --enable-checking=release --enable-threads=posix $(if [ "0$USE_SJLJ" -ne 0 ]; then if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--without-dwarf2 "; fi; echo "--enable-sjlj-exceptions"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--with-dwarf2 "; fi; echo "--disable-sjlj-exceptions"; fi) --disable-libunwind-exceptions --enable-serial-configure --disable-bootstrap --enable-host-shared --enable-plugin --enable-default-ssp --disable-rpath --disable-libstdcxx-pch --enable-libstdcxx-time=yes --disable-libstdcxx-debug --disable-version-specific-runtime-libs --with-stabs --disable-symvers --enable-languages=c,c++,fortran,lto,objc,obj-c++$(if echo $VERSION|grep -vq "^[3-8]\."; then echo -n ",d"; fi) --disable-{gold,nls,stage1-checking,win32-registry,multilib} --enable-{ld,libquadmath,libada,libssp,libstdcxx,lto,fully-dynamic-string,libgomp,graphite,mingw-wildcard} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX --enable-install-libiberty --enable-__cxa_atexit --without-included-gettext --with-diagnostics-color=auto --with-libiconv --with-system-zlib --with-build-sysroot=$(pwd)/mingw-w64 $(if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--enable-large-address-aware"; fi) CFLAGS="-I$MINGWPREFIX/include/libdl-win32" &&
 #PATH=$MINGWPREFIX/share/binutils/bin:$PATH ../configure --prefix=$INSTALLPREFIX/share/gcc --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-pkgversion="MinGW-W64 $(echo $RUNPLATFORM | sed -e "s/-.*$//")-posix-$(if [ "0$USE_SJLJ" -ne 0 ]; then echo "sjlj"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "dwarf"; else echo "seh"; fi; fi), built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi))" --with-tune=generic --enable-checking=release --enable-threads=posix $(if [ "0$USE_SJLJ" -ne 0 ]; then if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--without-dwarf2 "; fi; echo "--enable-sjlj-exceptions"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--with-dwarf2 "; fi; echo "--disable-sjlj-exceptions"; fi) --disable-libunwind-exceptions --disable-serial-configure --disable-bootstrap --enable-host-shared --enable-plugin --enable-default-ssp --disable-rpath --disable-libstdcxx-pch --enable-libstdcxx-time=yes --disable-libstdcxx-debug --disable-version-specific-runtime-libs --with-stabs --disable-symvers --enable-languages=c,c++,fortran,lto,objc,obj-c++$(if echo $VERSION|grep -vq "^[3-8]\."; then echo -n ",d"; fi) --disable-{gold,nls,stage1-checking,win32-registry,multilib} --enable-{ld,libquadmath,libada,libssp,libstdcxx,lto,fully-dynamic-string,libgomp,graphite,mingw-wildcard} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX --enable-install-libiberty --enable-__cxa_atexit --without-included-gettext --with-diagnostics-color=auto --with-libiconv --with-system-zlib --with-build-sysroot=$(pwd)/mingw-w64 $(if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--enable-large-address-aware"; fi) CFLAGS="-I$MINGWPREFIX/include/libdl-win32" &&
 #PATH=$MINGWPREFIX/share/binutils/bin:$PATH ../configure --prefix=$INSTALLPREFIX/share/gcc --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-pkgversion="MinGW-W64 $(echo $RUNPLATFORM | sed -e "s/-.*$//")-posix-$(if [ "0$USE_SJLJ" -ne 0 ]; then echo "sjlj"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "dwarf"; else echo "seh"; fi; fi), built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi))" --with-tune=generic --enable-checking=release --enable-threads=posix $(if [ "0$USE_SJLJ" -ne 0 ]; then if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--without-dwarf2 "; fi; echo "--enable-sjlj-exceptions"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--with-dwarf2 "; fi; echo "--disable-sjlj-exceptions"; fi) --disable-libunwind-exceptions --disable-serial-configure --disable-bootstrap --enable-host-shared --enable-plugin --disable-default-ssp --disable-rpath --disable-libstdcxx-pch --enable-libstdcxx-time=yes --disable-libstdcxx-debug --disable-version-specific-runtime-libs --with-stabs --disable-symvers --enable-languages=c,c++,fortran,lto,objc,obj-c++ --disable-{gold,nls,stage1-checking,win32-registry,multilib} --enable-{ld,libquadmath,libada,libssp,libstdcxx,lto,fully-dynamic-string,libgomp,graphite,mingw-wildcard} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX --enable-install-libiberty --enable-__cxa_atexit --without-included-gettext --with-diagnostics-color=auto --with-libiconv --with-system-zlib --with-build-sysroot=$(pwd)/mingw-w64 $(if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--enable-large-address-aware"; fi) CFLAGS="-I$MINGWPREFIX/include/libdl-win32" &&
 #PATH=$MINGWPREFIX/share/binutils/bin:$PATH ../configure --prefix=$INSTALLPREFIX/share/gcc --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-pkgversion="MinGW-W64 $(echo $RUNPLATFORM | sed -e "s/-.*$//")-posix-$(if [ "0$USE_SJLJ" -ne 0 ]; then echo "sjlj"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "dwarf"; else echo "seh"; fi; fi), built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi))" --with-tune=generic --enable-checking=release --enable-threads=posix $(if [ "0$USE_SJLJ" -ne 0 ]; then if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--without-dwarf2 "; fi; echo "--enable-sjlj-exceptions"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--with-dwarf2 "; fi; echo "--disable-sjlj-exceptions"; fi) --disable-libunwind-exceptions --disable-serial-configure --disable-bootstrap --enable-host-shared --enable-plugin --disable-default-ssp --disable-rpath --disable-libstdcxx-pch --enable-libstdcxx-time=yes --disable-libstdcxx-debug --disable-version-specific-runtime-libs --with-stabs --disable-symvers --enable-languages=c,c++,fortran,lto,objc,obj-c++ --disable-{gold,nls,stage1-checking,win32-registry,multilib} --enable-{ld,libquadmath,libada,libssp,libstdcxx,lto,fully-dynamic-string,libgomp,graphite,mingw-wildcard} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX --enable-install-libiberty --enable-__cxa_atexit --without-included-gettext --with-diagnostics-color=auto --enable-clocale=generic --with-libiconv --with-system-zlib --with-build-sysroot=$(pwd)/mingw-w64 $(if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--enable-large-address-aware"; fi) CFLAGS="-I$MINGWPREFIX/include/libdl-win32" &&
 #PATH=$MINGWPREFIX/share/binutils/bin:$PATH ../configure --prefix=$INSTALLPREFIX/share/gcc --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-offload-targets=nvptx-none --with-pkgversion="MinGW-W64 $(echo $RUNPLATFORM | sed -e "s/-.*$//")-posix-$(if [ "0$USE_SJLJ" -ne 0 ]; then echo "sjlj"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "dwarf"; else echo "seh"; fi; fi), built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi))" --with-tune=generic --enable-checking=release --enable-threads=posix $(if [ "0$USE_SJLJ" -ne 0 ]; then if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--without-dwarf2 "; fi; echo "--enable-sjlj-exceptions"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--with-dwarf2 "; fi; echo "--disable-sjlj-exceptions"; fi) --disable-libunwind-exceptions --disable-serial-configure --disable-bootstrap --enable-host-shared --enable-plugin --disable-default-ssp --disable-rpath --enable-libstdcxx-pch --enable-libstdcxx-time=yes --disable-libstdcxx-debug --disable-version-specific-runtime-libs --with-stabs --disable-symvers --enable-languages=c,c++,fortran,lto,objc,obj-c++ --disable-{gold,nls,stage1-checking,win32-registry,multilib} --enable-{ld,libquadmath,libada,libssp,libstdcxx,lto,fully-dynamic-string,libgomp,graphite,mingw-wildcard} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX --enable-install-libiberty --enable-__cxa_atexit --without-included-gettext --with-diagnostics-color=auto --enable-clocale=generic --with-libiconv --with-system-zlib --with-build-sysroot=$(pwd)/mingw-w64 $(if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--enable-large-address-aware"; fi) CFLAGS="-I$MINGWPREFIX/include/libdl-win32" &&
 #PATH=$MINGWPREFIX/share/binutils/bin:$PATH ../configure --prefix=$INSTALLPREFIX/share/gcc --build=$BUILDPLATFORM --host=$RUNPLATFORM $(if echo $VERSION|grep -q "^1[0-9]\."; then echo "--enable-offload-targets=nvptx-none"; fi) --with-pkgversion="MinGW-W64 $(echo $RUNPLATFORM | sed -e "s/-.*$//")-posix-$(if [ "0$USE_SJLJ" -ne 0 ]; then echo "sjlj"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "dwarf"; else echo "seh"; fi; fi), built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi))" --with-tune=generic --enable-checking=release --enable-threads=posix $(if [ "0$USE_SJLJ" -ne 0 ]; then if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--without-dwarf2 "; fi; echo "--enable-sjlj-exceptions"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--with-dwarf2 "; fi; echo "--disable-sjlj-exceptions"; fi) --disable-libunwind-exceptions --disable-serial-configure --disable-bootstrap --enable-host-shared --enable-plugin --disable-default-ssp --disable-rpath --enable-libstdcxx-pch --enable-libstdcxx-time=yes --disable-libstdcxx-debug --disable-version-specific-runtime-libs --with-stabs --disable-symvers --enable-languages=c,c++,fortran,lto,objc,obj-c++$(if echo $VERSION|grep -q "^1[1-9]\."; then echo ",d,jit"; fi) --disable-{gold,nls,stage1-checking,win32-registry,multilib} --enable-{ld,libquadmath,libada,libssp,libstdcxx,lto,fully-dynamic-string,libgomp,graphite,mingw-wildcard} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX --enable-install-libiberty --enable-__cxa_atexit --without-included-gettext --with-diagnostics-color=auto --enable-clocale=generic --with-libiconv --with-system-zlib --with-build-sysroot=$(pwd)/mingw-w64 $(if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--enable-large-address-aware"; fi) CFLAGS="-I$MINGWPREFIX/include/libdl-win32" &&
 #PATH=$MINGWPREFIX/share/binutils/bin:$PATH ../configure --prefix=$INSTALLPREFIX/share/gcc --build=$BUILDPLATFORM --host=$RUNPLATFORM $(if echo $VERSION|grep -q "^1[0-9]\."; then echo "--enable-offload-targets=nvptx-none"; fi) --with-pkgversion="MinGW-W64 $(echo $RUNPLATFORM | sed -e "s/-.*$//")$(if [ "0$USE_UCRT" -ne 0 ]; then echo -n "-ucrt"; fi)-posix-$(if [ "0$USE_SJLJ" -ne 0 ]; then echo "sjlj"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "dwarf"; else echo "seh"; fi; fi), built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi))" --with-tune=generic --enable-checking=release --enable-threads=posix $(if [ "0$USE_SJLJ" -ne 0 ]; then if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--without-dwarf2 "; fi; echo "--enable-sjlj-exceptions"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--with-dwarf2 "; fi; echo "--disable-sjlj-exceptions"; fi) --disable-libunwind-exceptions --disable-serial-configure --disable-bootstrap --enable-host-shared --enable-plugin --disable-default-ssp --disable-rpath --enable-libstdcxx-pch --enable-libstdcxx-time=yes --disable-libstdcxx-debug --disable-version-specific-runtime-libs --with-stabs --disable-symvers --enable-languages=c,c++,fortran,lto,objc,obj-c++$(if echo $VERSION|grep -q "^1[1-9]\."; then echo ",d,jit"; fi) --disable-{gold,nls,stage1-checking,win32-registry,multilib} --enable-{ld,libquadmath,libada,libssp,libstdcxx,lto,fully-dynamic-string,libgomp,graphite,mingw-wildcard} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX --enable-install-libiberty --enable-__cxa_atexit --without-included-gettext --with-diagnostics-color=auto --enable-clocale=generic --with-libiconv --with-system-zlib --with-build-sysroot=$(pwd)/mingw-w64 $(if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--enable-large-address-aware"; fi) CFLAGS="-I$MINGWPREFIX/include/libdl-win32" &&
 #PATH=$MINGWPREFIX/share/binutils/bin:$PATH ../configure --prefix=$INSTALLPREFIX/share/gcc --build=$BUILDPLATFORM --host=$RUNPLATFORM $(if echo $VERSION|grep -q "^1[0-9]\."; then echo "--enable-offload-targets=nvptx-none"; fi) --with-pkgversion="MinGW-W64 $(echo $RUNPLATFORM | sed -e "s/-.*$//")$(if [ "0$USE_UCRT" -ne 0 ]; then echo -n "-ucrt"; fi)-posix-$(if [ "0$USE_SJLJ" -ne 0 ]; then echo "sjlj"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "dwarf"; else echo "seh"; fi; fi), built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi))" --with-tune=generic --enable-checking=release --enable-threads=posix $(if [ "0$USE_SJLJ" -ne 0 ]; then if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--without-dwarf2 "; fi; echo "--enable-sjlj-exceptions"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--with-dwarf2 "; fi; echo "--disable-sjlj-exceptions"; fi) --disable-libunwind-exceptions --disable-serial-configure --disable-bootstrap --enable-host-shared $(if echo $VERSION|grep -q "^[1-6]\."; then echo "--disable-plugin"; else echo "--enable-plugin"; fi) --disable-default-ssp --disable-rpath --enable-libstdcxx-pch --enable-libstdcxx-time=yes --disable-libstdcxx-debug --disable-version-specific-runtime-libs --with-stabs --disable-symvers --enable-languages=c,c++,fortran,lto,objc,obj-c++$(if echo $VERSION|grep -q "^1[1-9][.\-]"; then echo ",jit"; fi) --disable-{gold,nls,stage1-checking,win32-registry,multilib} --enable-{ld,libquadmath,libada,libssp,libstdcxx,lto,fully-dynamic-string,libgomp,graphite,mingw-wildcard} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX --enable-install-libiberty --enable-__cxa_atexit --without-included-gettext --with-diagnostics-color=auto --enable-clocale=generic --with-libiconv --with-system-zlib --with-build-sysroot=$(pwd)/mingw-w64 $(if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--enable-large-address-aware"; fi) CFLAGS="-I$MINGWPREFIX/include/libdl-win32" &&
 #PATH=$MINGWPREFIX/share/binutils/bin:$PATH ../configure --prefix=$INSTALLPREFIX/share/gcc --build=$BUILDPLATFORM --host=$RUNPLATFORM $(if echo $VERSION|grep -q "^1[0-9]\."; then echo "--enable-offload-targets=nvptx-none"; fi) --with-pkgversion="MinGW-W64 $(echo $RUNPLATFORM | sed -e "s/-.*$//")$(if [ "0$USE_UCRT" -ne 0 ]; then echo -n "-ucrt"; fi)-posix-$(if [ "0$USE_SJLJ" -ne 0 ]; then echo "sjlj"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "dwarf"; else echo "seh"; fi; fi), built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi))" --with-tune=generic --enable-checking=release --enable-threads=posix $(if [ "0$USE_SJLJ" -ne 0 ]; then if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--without-dwarf2 "; fi; echo "--enable-sjlj-exceptions"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--with-dwarf2 "; fi; echo "--disable-sjlj-exceptions"; fi) --disable-libunwind-exceptions --disable-serial-configure --disable-bootstrap --enable-host-shared $(if echo $VERSION|grep -q "^[1-6]\."; then echo "--disable-plugin"; else echo "--enable-plugin"; fi) --disable-default-ssp --disable-rpath --enable-libstdcxx-pch --enable-libstdcxx-time=yes --disable-libstdcxx-debug --disable-version-specific-runtime-libs --with-stabs --disable-symvers --enable-languages=c,c++,fortran,lto,objc,obj-c++$(if echo $VERSION|grep -q "^1[1-9][.\-]"; then echo ",jit"; fi) --disable-{gold,nls,stage1-checking,win32-registry,multilib} --enable-{ld,libquadmath,libada,libssp,libstdcxx,lto,fully-dynamic-string,libgomp,graphite,mingw-wildcard} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX --enable-install-libiberty --enable-__cxa_atexit --without-included-gettext --with-diagnostics-color=auto --enable-clocale=generic --with-libiconv --with-system-zlib --with-build-sysroot=$(pwd)/mingw-w64 $(if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--enable-large-address-aware"; fi) CFLAGS="-I$MINGWPREFIX/include/libdl-win32" LDFLAGS="-Wl,--disable-nxcompat $(if echo "int main() { return 0; }" | gcc -xc - -o test_arg.exe -Wl,--disable-high-entropy-va &> /dev/null; then echo "-Wl,--disable-high-entropy-va"; fi) -Wl,--disable-dynamicbase" &&
 #PATH=$MINGWPREFIX/share/binutils/bin:$PATH ../configure --prefix=$INSTALLPREFIX/share/gcc --build=$BUILDPLATFORM --host=$RUNPLATFORM $(if echo $VERSION|grep -q "^1[0-9]\."; then echo "--enable-offload-targets=nvptx-none"; fi) --with-pkgversion="MinGW-W64 $(echo $RUNPLATFORM | sed -e "s/-.*$//")$(if [ "0$USE_UCRT" -ne 0 ]; then echo -n "-ucrt"; fi)-posix-$(if [ "0$USE_SJLJ" -ne 0 ]; then echo "sjlj"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "dwarf"; else echo "seh"; fi; fi), built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi))" --with-tune=generic --enable-checking=release --enable-threads=posix $(if [ "0$USE_SJLJ" -ne 0 ]; then if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--without-dwarf2 "; fi; echo "--enable-sjlj-exceptions"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--with-dwarf2 "; fi; echo "--disable-sjlj-exceptions"; fi) --disable-libunwind-exceptions --disable-serial-configure --disable-bootstrap --enable-host-shared $(if echo $VERSION|grep -q "^[1-6]\."; then echo "--disable-plugin"; else echo "--enable-plugin"; fi) --disable-default-ssp --disable-rpath --disable-libstdcxx-debug --disable-version-specific-runtime-libs --with-stabs --disable-symvers --enable-languages=c,c++,fortran,lto,objc,obj-c++$(if echo $VERSION|grep -q "^1[1-9][.\-]"; then echo ",jit"; fi) --disable-{gold,nls,stage1-checking,win32-registry,multilib} --enable-{ld,libquadmath,libada,libssp,libstdcxx,lto,fully-dynamic-string,libgomp,graphite,mingw-wildcard,libstdcxx-pch,libstdcxx-time} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX $(if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--enable-large-address-aware"; fi) $(if echo $VERSION|grep -q "^1[2-9][.\-]"; then echo "--enable-libstdcxx-backtrace"; fi) --enable-install-libiberty --enable-__cxa_atexit --without-included-gettext --with-diagnostics-color=auto --enable-clocale=generic --with-libiconv --with-system-zlib --with-build-sysroot=$(pwd)/mingw-w64 CFLAGS="-I$MINGWPREFIX/include/libdl-win32" LDFLAGS="-Wl,--disable-nxcompat $(if echo "int main() { return 0; }" | gcc -xc - -o test_arg.exe -Wl,--disable-high-entropy-va &> /dev/null; then echo "-Wl,--disable-high-entropy-va"; fi) -Wl,--disable-dynamicbase" &&
 #PATH=$MINGWPREFIX/share/binutils/bin:$PATH ../configure --prefix=$INSTALLPREFIX/share/gcc --build=$BUILDPLATFORM --host=$RUNPLATFORM $(if echo $VERSION|grep -q "^1[0-9]\."; then echo "--enable-offload-targets=nvptx-none"; fi) --with-pkgversion="MinGW-W64 $(echo $RUNPLATFORM | sed -e "s/-.*$//")$(if [ "0$USE_UCRT" -ne 0 ]; then echo -n "-ucrt"; else echo -n "-msvcrt"; fi)-posix-$(if [ "0$USE_SJLJ" -ne 0 ]; then echo "sjlj"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "dwarf"; else echo "seh"; fi; fi), built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi))" --with-tune=generic --enable-checking=release --enable-threads=posix $(if [ "0$USE_SJLJ" -ne 0 ]; then if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--without-dwarf2 "; fi; echo "--enable-sjlj-exceptions"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--with-dwarf2 "; fi; echo "--disable-sjlj-exceptions"; fi) --disable-libunwind-exceptions --disable-serial-configure --disable-bootstrap --enable-host-shared $(if echo $VERSION|grep -q "^[1-6]\."; then echo "--disable-plugin"; else echo "--enable-plugin"; fi) --disable-default-ssp --disable-rpath --disable-libstdcxx-debug --disable-version-specific-runtime-libs --with-stabs --disable-symvers --enable-languages=c,c++,fortran,lto,objc,obj-c++$(if echo $VERSION|grep -q "^1[1-9][.\-]"; then echo ",jit"; fi) --disable-{gold,nls,stage1-checking,win32-registry,multilib} --enable-{ld,libquadmath,libada,libssp,libstdcxx,lto,fully-dynamic-string,libgomp,graphite,mingw-wildcard,libstdcxx-time} --disable-libstdcxx-pch --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX $(if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--enable-large-address-aware"; fi) $(if echo $VERSION|grep -q "^1[2-9][.\-]"; then echo "--enable-libstdcxx-backtrace"; fi) --enable-install-libiberty --enable-__cxa_atexit --without-included-gettext --with-diagnostics-color=auto --enable-clocale=generic --with-libiconv --with-system-zlib --with-build-sysroot=$(pwd)/mingw-w64 CFLAGS="-I$MINGWPREFIX/include/libdl-win32 -D__USE_MINGW_ACCESS" CXXFLAGS="-D__USE_MINGW_ACCESS" LDFLAGS="-Wl,--disable-nxcompat $(if echo "int main() { return 0; }" | gcc -xc - -o test_arg.exe -Wl,--disable-high-entropy-va &> /dev/null; then echo "-Wl,--disable-high-entropy-va"; fi) -Wl,--disable-dynamicbase" &&
 #PATH=$MINGWPREFIX/share/binutils/bin:$PATH ../configure --prefix=$INSTALLPREFIX/share/gcc --build=$BUILDPLATFORM --host=$RUNPLATFORM $(if echo $VERSION|grep -q "^1[0-9]\."; then echo "--enable-offload-targets=nvptx-none"; fi) --with-pkgversion="MinGW-W64 $(echo $RUNPLATFORM | sed -e "s/-.*$//")$(if [ "0$USE_UCRT" -ne 0 ]; then echo -n "-ucrt"; else echo -n "-msvcrt"; fi)-posix-$(if [ "0$USE_SJLJ" -ne 0 ]; then echo "sjlj"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "dwarf"; else echo "seh"; fi; fi), built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi))" --with-tune=generic --enable-checking=release --enable-threads=posix $(if [ "0$USE_SJLJ" -ne 0 ]; then if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--without-dwarf2 "; fi; echo "--enable-sjlj-exceptions"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--with-dwarf2 "; fi; echo "--disable-sjlj-exceptions"; fi) --disable-libunwind-exceptions --disable-serial-configure --disable-bootstrap --enable-host-shared $(if echo $VERSION|grep -q "^[1-7]\."; then echo "--disable-plugin"; else echo "--enable-plugin"; fi) --disable-default-ssp --disable-rpath --disable-libstdcxx-debug --disable-version-specific-runtime-libs --with-stabs --disable-symvers --enable-languages=c,c++,fortran,lto,objc,obj-c++$(if echo $VERSION|grep -q "^1[1-9][.\-]"; then echo ",jit"; fi) --disable-{gold,nls,stage1-checking,win32-registry,multilib} --enable-{ld,libquadmath,libada,libssp,libstdcxx,lto,fully-dynamic-string,libgomp,graphite,mingw-wildcard,libstdcxx-time,libstdcxx-pch} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX $(if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--enable-large-address-aware"; fi) $(if echo $VERSION|grep -q "^1[2-9][.\-]"; then echo "--enable-libstdcxx-backtrace"; fi) --enable-install-libiberty --enable-__cxa_atexit --without-included-gettext --with-diagnostics-color=auto --enable-clocale=generic --with-libiconv --with-system-zlib --with-build-sysroot=$(pwd)/mingw-w64 CFLAGS="-I$MINGWPREFIX/include/libdl-win32 -D__USE_MINGW_ACCESS" CXXFLAGS="-D__USE_MINGW_ACCESS" LDFLAGS="$(if echo "int main() { return 0; }" | gcc -xc - -o test_arg.exe -Wl,--dynamicbase &> /dev/null; then echo "-Wl,--dynamicbase"; fi) $(if echo "int main() { return 0; }" | gcc -xc - -o test_arg.exe -Wl,--high-entropy-va &> /dev/null; then echo "-Wl,--high-entropy-va"; fi) $(if echo "int main() { return 0; }" | gcc -xc - -o test_arg.exe -Wl,--nxcompat &> /dev/null; then echo "-Wl,--nxcompat"; fi) $(if echo "int main() { return 0; }" | gcc -xc - -o test_arg.exe -Wl,--tsaware &> /dev/null; then echo "-Wl,--tsaware"; fi)" &&
 #PATH=$MINGWPREFIX/share/binutils/bin:$PATH ../configure --prefix=$INSTALLPREFIX/share/gcc --build=$BUILDPLATFORM --host=$RUNPLATFORM $(if echo $VERSION|grep -q "^1[0-9]\."; then echo "--enable-offload-targets=nvptx-none"; fi) --with-pkgversion="MinGW-W64 $(echo $RUNPLATFORM | sed -e "s/-.*$//")$(if [ "0$USE_UCRT" -ne 0 ]; then echo -n "-ucrt"; else echo -n "-msvcrt"; fi)-posix-$(if [ "0$USE_SJLJ" -ne 0 ]; then echo "sjlj"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "dwarf"; else echo "seh"; fi; fi), built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi))" --with-tune=generic --enable-checking=release --enable-threads=posix $(if [ "0$USE_SJLJ" -ne 0 ]; then if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--without-dwarf2 "; fi; echo "--enable-sjlj-exceptions"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--with-dwarf2 "; fi; echo "--disable-sjlj-exceptions"; fi) --disable-libunwind-exceptions --disable-serial-configure --disable-bootstrap --enable-host-shared $(if echo $VERSION|grep -q "^[1-7]\."; then echo "--disable-plugin"; else echo "--enable-plugin"; fi) --disable-default-ssp --disable-rpath --disable-libstdcxx-debug --disable-version-specific-runtime-libs --with-stabs --disable-symvers --enable-languages=c,c++,fortran,lto,objc,obj-c++$(if echo $VERSION|grep -q "^1[1-9][.\-]"; then echo ",jit"; fi) --disable-{gold,nls,stage1-checking,win32-registry,multilib} --enable-{ld,libquadmath,libada,libssp,libstdcxx,lto,fully-dynamic-string,libgomp,graphite,mingw-wildcard,libstdcxx-time,libstdcxx-pch} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX $(if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--enable-large-address-aware"; fi) $(if echo $VERSION|grep -q "^1[2-9][.\-]"; then echo "--enable-libstdcxx-backtrace"; fi) --enable-install-libiberty --enable-__cxa_atexit --without-included-gettext --with-diagnostics-color=auto --enable-clocale=generic --with-libiconv --with-system-zlib --with-build-sysroot=$(pwd)/mingw-w64 CFLAGS="-I$MINGWPREFIX/include/libdl-win32 -D__USE_MINGW_ACCESS -Wno-int-conversion" CXXFLAGS="-D__USE_MINGW_ACCESS -Wno-int-conversion" LDFLAGS="-pthread $(if echo "int main() { return 0; }" | gcc -xc - -o test_arg.exe -Wl,--dynamicbase &> /dev/null; then echo "-Wl,--dynamicbase"; fi) $(if echo "int main() { return 0; }" | gcc -xc - -o test_arg.exe -Wl,--high-entropy-va &> /dev/null; then echo "-Wl,--high-entropy-va"; fi) $(if echo "int main() { return 0; }" | gcc -xc - -o test_arg.exe -Wl,--nxcompat &> /dev/null; then echo "-Wl,--nxcompat"; fi) $(if echo "int main() { return 0; }" | gcc -xc - -o test_arg.exe -Wl,--tsaware &> /dev/null; then echo "-Wl,--tsaware"; fi)" &&
 #PATH=$MINGWPREFIX/share/binutils/bin:$PATH ../configure --prefix=$INSTALLPREFIX/share/gcc --build=$BUILDPLATFORM --host=$RUNPLATFORM $(if echo $VERSION|grep -q "^1[0-9]\."; then echo "--enable-offload-targets=nvptx-none"; fi) --with-pkgversion="MinGW-W64 $(echo $RUNPLATFORM | sed -e "s/-.*$//")$(if [ "0$USE_UCRT" -ne 0 ]; then echo -n "-ucrt"; else echo -n "-msvcrt"; fi)-posix-$(if [ "0$USE_SJLJ" -ne 0 ]; then echo "sjlj"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "dwarf"; else echo "seh"; fi; fi), built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi))" $(if echo $RUNPLATFORM | grep -vq "aarch64"; then echo "--with-tune=generic"; fi) --enable-checking=release --enable-threads=posix $(if [ "0$USE_SJLJ" -ne 0 ]; then if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--without-dwarf2 "; fi; echo "--enable-sjlj-exceptions"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--with-dwarf2 "; fi; echo "--disable-sjlj-exceptions"; fi) --disable-libunwind-exceptions --disable-serial-configure --disable-bootstrap --enable-host-shared $(if echo $VERSION|grep -q "^[1-7]\."; then echo "--disable-plugin"; else echo "--enable-plugin"; fi) --disable-default-ssp --disable-rpath --disable-libstdcxx-debug --disable-version-specific-runtime-libs --with-stabs --disable-symvers --enable-languages=c,c++,fortran,lto,objc,obj-c++$(if echo $VERSION|grep -q "^1[1-9][.\-]" && [ $(echo $VERSION|sed -e "s/^\([0-9]*\)\..*$/\1/") -lt 13 ]; then echo ",jit"; fi) --disable-{gold,nls,stage1-checking,win32-registry,multilib} --enable-{ld,libquadmath,libada,libssp,libstdcxx,lto,fully-dynamic-string,libgomp,graphite,mingw-wildcard,libstdcxx-time,libstdcxx-pch} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX $(if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--enable-large-address-aware"; fi) $(if echo $VERSION|grep -q "^1[2-9][.\-]"; then echo "--enable-libstdcxx-backtrace"; fi) --enable-install-libiberty --enable-__cxa_atexit --without-included-gettext --with-diagnostics-color=auto --enable-clocale=generic --with-libiconv --with-system-zlib --with-build-sysroot=$PWD/mingw-w64 CFLAGS="-I$MINGWPREFIX/include/libdl-win32 -Wno-int-conversion" CXXFLAGS="-Wno-int-conversion" LDFLAGS="-pthread $(if echo "int main() { return 0; }" | gcc -xc - -o test_arg.exe -Wl,--dynamicbase &> /dev/null; then echo "-Wl,--dynamicbase"; fi) $(if echo "int main() { return 0; }" | gcc -xc - -o test_arg.exe -Wl,--high-entropy-va &> /dev/null; then echo "-Wl,--high-entropy-va"; fi) $(if echo "int main() { return 0; }" | gcc -xc - -o test_arg.exe -Wl,--nxcompat &> /dev/null; then echo "-Wl,--nxcompat"; fi) $(if echo "int main() { return 0; }" | gcc -xc - -o test_arg.exe -Wl,--tsaware &> /dev/null; then echo "-Wl,--tsaware"; fi)" &&
 #PATH=$MINGWPREFIX/share/binutils/bin:$PATH ../configure --prefix=$INSTALLPREFIX/share/gcc --build=$BUILDPLATFORM --host=$RUNPLATFORM $(if echo $VERSION|grep -q "^1[0-9]\."; then echo "--enable-offload-targets=nvptx-none"; fi) --with-pkgversion="MinGW-W64 $(echo $RUNPLATFORM | sed -e "s/-.*$//")$(if [ "0$USE_UCRT" -ne 0 ]; then echo -n "-ucrt"; else echo -n "-msvcrt"; fi)-$(if [ "0$USE_MCF" -ne 0 ]; then echo -n "mcf"; else echo -n "posix"; fi)-$(if [ "0$USE_SJLJ" -ne 0 ]; then echo "sjlj"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "dwarf"; else echo "seh"; fi; fi), built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi))" $(if echo $RUNPLATFORM | grep -vq "aarch64"; then echo "--with-tune=generic"; fi) --enable-checking=release --enable-threads=$(if [ "0$USE_MCF" -ne 0 ]; then echo -n "mcf"; else echo -n "posix"; fi) $(if [ "0$USE_SJLJ" -ne 0 ]; then if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--without-dwarf2 "; fi; echo "--enable-sjlj-exceptions"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--with-dwarf2 "; fi; echo "--disable-sjlj-exceptions"; fi) --disable-libunwind-exceptions --disable-serial-configure --disable-bootstrap --enable-host-shared $(if echo $VERSION|grep -q "^[1-7]\."; then echo "--disable-plugin"; else echo "--enable-plugin"; fi) --disable-default-ssp --disable-rpath --disable-libstdcxx-debug --disable-version-specific-runtime-libs --with-stabs --disable-symvers --enable-languages=c,c++,fortran,lto,objc,obj-c++$(if echo $VERSION|grep -q "^1[1-9][.\-]" && [ $(echo $VERSION|sed -e "s/^\([0-9]*\)\..*$/\1/") -lt 13 ]; then echo ",jit"; fi) --disable-{gold,nls,stage1-checking,win32-registry,multilib} --enable-{ld,libquadmath,libada,libssp,libstdcxx,lto,fully-dynamic-string,libgomp,graphite,mingw-wildcard,libstdcxx-time,libstdcxx-pch} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX $(if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--enable-large-address-aware"; fi) $(if echo $VERSION|grep -q "^1[2-9][.\-]"; then echo "--enable-libstdcxx-backtrace"; fi) --enable-install-libiberty --enable-__cxa_atexit --without-included-gettext --with-diagnostics-color=auto --enable-clocale=generic --with-libiconv --with-system-zlib --with-build-sysroot=$PWD/mingw-w64 CFLAGS="-I$MINGWPREFIX/include/libdl-win32 -Wno-int-conversion" CXXFLAGS="-Wno-int-conversion" LDFLAGS="-pthread" &&
 #PATH=$MINGWPREFIX/share/binutils/bin:$PATH ../configure --prefix=$INSTALLPREFIX/share/gcc --build=$BUILDPLATFORM --host=$RUNPLATFORM $(if echo $VERSION|grep -q "^1[0-9]\."; then echo "--enable-offload-targets=nvptx-none"; fi) --with-pkgversion="MinGW-W64 $(echo $RUNPLATFORM | sed -e "s/-.*$//")$(if [ "0$USE_UCRT" -ne 0 ]; then echo -n "-ucrt"; else echo -n "-msvcrt"; fi)-$(if [ "0$USE_MCF" -ne 0 ]; then echo -n "mcf"; else echo -n "posix"; fi)-$(if [ "0$USE_SJLJ" -ne 0 ]; then echo "sjlj"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "dwarf"; else echo "seh"; fi; fi), built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi))" $(if echo $RUNPLATFORM | grep -vq "aarch64"; then echo "--with-tune=generic"; fi) --enable-checking=release --enable-threads=$(if [ "0$USE_MCF" -ne 0 ]; then echo -n "mcf"; else echo -n "posix"; fi) $(if [ "0$USE_SJLJ" -ne 0 ]; then if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--without-dwarf2 "; fi; echo "--enable-sjlj-exceptions"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--with-dwarf2 "; fi; echo "--disable-sjlj-exceptions"; fi) --disable-libunwind-exceptions --disable-serial-configure --disable-bootstrap --enable-host-shared $(if echo $VERSION|grep -q "^[1-7]\."; then echo "--disable-plugin"; else echo "--enable-plugin"; fi) --disable-default-ssp --disable-rpath --disable-libstdcxx-debug --disable-version-specific-runtime-libs --with-stabs --disable-symvers --enable-languages=c,c++,fortran,lto,objc,obj-c++$(if echo $VERSION|grep -q "^1[1-9][.\-]" && [ $(echo $VERSION|sed -e "s/^\([0-9]*\)\..*$/\1/") -lt 13 ]; then echo ",jit"; fi) --disable-{gold,nls,stage1-checking,win32-registry,multilib} --enable-{ld,libquadmath,libada,libssp,libstdcxx,lto,fully-dynamic-string,libgomp,graphite,mingw-wildcard,libstdcxx-time,libstdcxx-pch} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX $(if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--enable-large-address-aware"; fi) --disable-libstdcxx-backtrace --enable-install-libiberty --enable-__cxa_atexit --without-included-gettext --with-diagnostics-color=auto --enable-clocale=generic --with-libiconv --with-system-zlib --with-build-sysroot=$PWD/mingw-w64 CFLAGS="-I$MINGWPREFIX/include/libdl-win32 -Wno-int-conversion" CXXFLAGS="-Wno-int-conversion" LDFLAGS="-pthread  $(if echo "int main() { return 0; }" | gcc -xc - -o test_arg.exe -Wl,--dynamicbase &> /dev/null; then echo "-Wl,--dynamicbase"; fi) $(if echo "int main() { return 0; }" | gcc -xc - -o test_arg.exe -Wl,--high-entropy-va &> /dev/null; then echo "-Wl,--high-entropy-va"; fi) $(if echo "int main() { return 0; }" | gcc -xc - -o test_arg.exe -Wl,--nxcompat &> /dev/null; then echo "-Wl,--nxcompat"; fi) $(if echo "int main() { return 0; }" | gcc -xc - -o test_arg.exe -Wl,--tsaware &> /dev/null; then echo "-Wl,--tsaware"; fi)" &&
 #PATH=$MINGWPREFIX/share/binutils/bin:$PATH ../configure --prefix=$INSTALLPREFIX/share/gcc --build=$BUILDPLATFORM --host=$RUNPLATFORM $(if echo $VERSION|grep -q "^1[0-9]\."; then echo "--enable-offload-targets=nvptx-none"; fi) --with-pkgversion="MinGW-W64 $(echo $RUNPLATFORM | sed -e "s/-.*$//")$(if [ "0$USE_UCRT" -ne 0 ]; then echo -n "-ucrt"; else echo -n "-msvcrt"; fi)-$(if [ "0$USE_MCF" -ne 0 ]; then echo -n "mcf"; else echo -n "posix"; fi)-$(if [ "0$USE_SJLJ" -ne 0 ]; then echo "sjlj"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "dwarf"; else echo "seh"; fi; fi), built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi))" $(if echo $RUNPLATFORM | grep -vq "aarch64"; then echo "--with-tune=generic"; fi) --enable-checking=release --enable-threads=$(if [ "0$USE_MCF" -ne 0 ]; then echo -n "mcf"; else echo -n "posix"; fi) $(if [ "0$USE_SJLJ" -ne 0 ]; then if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--without-dwarf2 "; fi; echo "--enable-sjlj-exceptions"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--with-dwarf2 "; fi; echo "--disable-sjlj-exceptions"; fi) --disable-libunwind-exceptions --disable-serial-configure --disable-bootstrap --enable-host-shared $(if echo $VERSION|grep -q "^[1-7]\."; then echo "--disable-plugin"; else echo "--enable-plugin"; fi) --disable-default-ssp --disable-rpath --disable-libstdcxx-debug --disable-version-specific-runtime-libs --with-stabs --disable-symvers --enable-languages=c,c++,fortran,lto,objc,obj-c++$(if echo $VERSION|grep -q "^1[1-9][.\-]" && [ $(echo $VERSION|sed -e "s/^\([0-9]*\)\..*$/\1/") -lt 13 ]; then echo ",jit"; fi) --disable-{gold,nls,stage1-checking,win32-registry,multilib} --enable-{ld,libquadmath,libada,libssp,libstdcxx,lto,fully-dynamic-string,libgomp,graphite,mingw-wildcard,libstdcxx-time,libstdcxx-pch} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX $(if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--enable-large-address-aware"; fi) --disable-libstdcxx-backtrace --enable-install-libiberty --enable-__cxa_atexit --without-included-gettext --with-diagnostics-color=auto --enable-clocale=generic --with-libiconv --with-system-zlib --with-build-sysroot=$PWD/mingw-w64 CFLAGS="-I$MINGWPREFIX/include/libdl-win32 -Wno-int-conversion $(if echo $RUNPLATFORM | grep -q "^i.86"; then echo "-march=pentium4 -mtune=generic -O2"; fi) $(if echo $RUNPLATFORM | grep -q "^x86_64"; then echo "-march=nocona -msahf -mtune=generic -O2"; fi)" CXXFLAGS="-Wno-int-conversion $(if echo $RUNPLATFORM | grep -q "^i.86"; then echo "-march=pentium4 -mtune=generic -O2"; fi) $(if echo $RUNPLATFORM | grep -q "^x86_64"; then echo "-march=nocona -msahf -mtune=generic -O2"; fi)" LDFLAGS="-pthread -Wl,--no-insert-timestamp $(if echo "int main() { return 0; }" | gcc -xc - -o test_arg.exe -Wl,--dynamicbase &> /dev/null; then echo "-Wl,--dynamicbase"; fi) $(if echo "int main() { return 0; }" | gcc -xc - -o test_arg.exe -Wl,--high-entropy-va &> /dev/null; then echo "-Wl,--high-entropy-va"; fi) $(if echo "int main() { return 0; }" | gcc -xc - -o test_arg.exe -Wl,--nxcompat &> /dev/null; then echo "-Wl,--nxcompat"; fi) $(if echo "int main() { return 0; }" | gcc -xc - -o test_arg.exe -Wl,--tsaware &> /dev/null; then echo "-Wl,--tsaware"; fi)" LD=$MINGWPREFIX/share/binutils/bin/ld.exe &&
 #PATH=$MINGWPREFIX/share/binutils/bin:$PATH ../configure --prefix=$INSTALLPREFIX/share/gcc --build=$BUILDPLATFORM --host=$RUNPLATFORM $(if echo $VERSION|grep -q "^1[0-9]\."; then echo "--enable-offload-targets=nvptx-none"; fi) --with-pkgversion="MinGW-W64 $(echo $RUNPLATFORM | sed -e "s/-.*$//")$(if [ "0$USE_UCRT" -ne 0 ]; then echo -n "-ucrt"; else echo -n "-msvcrt"; fi)-$(if [ "0$USE_MCF" -ne 0 ]; then echo -n "mcf"; else echo -n "posix"; fi)-$(if [ "0$USE_SJLJ" -ne 0 ]; then echo "sjlj"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "dwarf"; else echo "seh"; fi; fi), built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi))" $(if echo $RUNPLATFORM | grep -vq "aarch64"; then echo "--with-tune=generic"; fi) --enable-checking=release --enable-threads=$(if [ "0$USE_MCF" -ne 0 ]; then echo -n "mcf"; else echo -n "posix"; fi) $(if [ "0$USE_SJLJ" -ne 0 ]; then if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--without-dwarf2 "; fi; echo "--enable-sjlj-exceptions"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--with-dwarf2 "; fi; echo "--disable-sjlj-exceptions"; fi) --disable-libunwind-exceptions --disable-serial-configure --disable-bootstrap --enable-host-shared $(if echo $VERSION|grep -q "^[1-7]\."; then echo "--disable-plugin"; else echo "--enable-plugin"; fi) --disable-default-ssp --disable-rpath --disable-libstdcxx-debug --disable-version-specific-runtime-libs --with-stabs --disable-symvers --enable-languages=c,c++,fortran,lto,objc,obj-c++$(if echo $VERSION|grep -q "^1[1-9][.\-]" && [ $(echo $VERSION|sed -e "s/^\([0-9]*\)\..*$/\1/") -lt 13 ]; then echo ",jit"; fi) --disable-{gold,nls,stage1-checking,win32-registry,multilib} --enable-{ld,libquadmath,libada,libssp,libstdcxx,lto,fully-dynamic-string,libgomp,graphite,mingw-wildcard,libstdcxx-time,libstdcxx-pch} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX $(if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--enable-large-address-aware"; fi) --disable-libstdcxx-backtrace --enable-install-libiberty --enable-__cxa_atexit --without-included-gettext --with-diagnostics-color=auto --enable-clocale=generic --with-libiconv --with-system-zlib --with-build-sysroot=$PWD/mingw-w64 CFLAGS="-I$MINGWPREFIX/include/libdl-win32 -Wno-int-conversion $(if echo $RUNPLATFORM | grep -q "^i.86"; then echo "-march=pentium4 -mtune=generic -O2"; fi) $(if echo $RUNPLATFORM | grep -q "^x86_64"; then echo "-march=nocona -msahf -mtune=generic -O2"; fi)" CXXFLAGS="-Wno-int-conversion $(if echo $RUNPLATFORM | grep -q "^i.86"; then echo "-march=pentium4 -mtune=generic -O2"; fi) $(if echo $RUNPLATFORM | grep -q "^x86_64"; then echo "-march=nocona -msahf -mtune=generic -O2"; fi)" LDFLAGS="-pthread -Wl,--no-insert-timestamp $(if echo "int main() { return 0; }" | ${CC:-gcc} -xc - -o test_arg.exe -Wl,--dynamicbase &> /dev/null; then echo "-Wl,--dynamicbase"; fi) $(if echo "int main() { return 0; }" | ${CC:-gcc} -xc - -o test_arg.exe -Wl,--high-entropy-va &> /dev/null; then echo "-Wl,--high-entropy-va"; fi) $(if echo "int main() { return 0; }" | ${CC:-gcc} -xc - -o test_arg.exe -Wl,--nxcompat &> /dev/null; then echo "-Wl,--nxcompat"; fi) $(if echo "int main() { return 0; }" | ${CC:-gcc} -xc - -o test_arg.exe -Wl,--tsaware &> /dev/null; then echo "-Wl,--tsaware"; fi)" LD=$MINGWPREFIX/share/binutils/bin/ld.exe &&
 #PATH=$MINGWPREFIX/share/binutils/bin:$PATH ../configure --prefix=$INSTALLPREFIX/share/gcc --build=$BUILDPLATFORM --host=$RUNPLATFORM $(if echo $VERSION|grep -q "^1[0-9]\."; then echo "--enable-offload-targets=nvptx-none"; fi) --with-pkgversion="MinGW-W64 $(echo $RUNPLATFORM | sed -e "s/-.*$//")$(if [ "0$USE_UCRT" -ne 0 ]; then echo -n "-ucrt"; else echo -n "-msvcrt"; fi)-$(if [ "0$USE_MCF" -ne 0 ]; then echo -n "mcf"; else echo -n "posix"; fi)-$(if [ "0$USE_SJLJ" -ne 0 ]; then echo "sjlj"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "dwarf"; else echo "seh"; fi; fi), built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi))" $(if echo $RUNPLATFORM | grep -vq "aarch64"; then echo "--with-tune=generic"; fi) --enable-checking=release --enable-threads=$(if [ "0$USE_MCF" -ne 0 ]; then echo -n "mcf"; else echo -n "posix"; fi) $(if [ "0$USE_SJLJ" -ne 0 ]; then if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--without-dwarf2 "; fi; echo "--enable-sjlj-exceptions"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--with-dwarf2 "; fi; echo "--disable-sjlj-exceptions"; fi) --disable-libunwind-exceptions --disable-serial-configure --disable-bootstrap --enable-host-shared $(if echo $VERSION|grep -q "^[1-7]\."; then echo "--disable-plugin"; else echo "--enable-plugin"; fi) --disable-default-ssp --disable-rpath --disable-libstdcxx-debug --disable-version-specific-runtime-libs --with-stabs --disable-symvers --enable-languages=c,c++,fortran,lto,objc,obj-c++$(if echo $VERSION|grep -q "^1[1-9][.\-]" && [ $(echo $VERSION|sed -e "s/^\([0-9]*\)\..*$/\1/") -lt 13 ]; then echo ",jit"; fi) --disable-{gold,nls,stage1-checking,win32-registry,multilib} --enable-{ld,libquadmath,libada,libssp,libstdcxx,lto,fully-dynamic-string,libgomp,graphite,mingw-wildcard,libstdcxx-time,libstdcxx-pch} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX $(if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--enable-large-address-aware"; fi) --disable-libstdcxx-backtrace --enable-install-libiberty --enable-__cxa_atexit --without-included-gettext --with-diagnostics-color=auto --enable-clocale=generic --with-libiconv --with-system-zlib --with-build-sysroot=$PWD/mingw-w64 CFLAGS="-I$MINGWPREFIX/include/libdl-win32 $(if ${CC:-gcc} --version|grep -q "^clang"; then echo "-Wno-int-conversion"; fi) $(if echo $RUNPLATFORM | grep -q "^i.86"; then echo "-march=pentium4 -mtune=generic -O2"; fi) $(if echo $RUNPLATFORM | grep -q "^x86_64"; then echo "-march=nocona -msahf -mtune=generic -O2"; fi)" CXXFLAGS="-Wno-int-conversion $(if echo $RUNPLATFORM | grep -q "^i.86"; then echo "-march=pentium4 -mtune=generic -O2"; fi) $(if echo $RUNPLATFORM | grep -q "^x86_64"; then echo "-march=nocona -msahf -mtune=generic -O2"; fi)" LDFLAGS="-pthread -Wl,--no-insert-timestamp $(if echo "int main() { return 0; }" | ${CC:-gcc} -xc - -o test_arg.exe -Wl,--dynamicbase &> /dev/null; then echo "-Wl,--dynamicbase"; fi) $(if echo "int main() { return 0; }" | ${CC:-gcc} -xc - -o test_arg.exe -Wl,--high-entropy-va &> /dev/null; then echo "-Wl,--high-entropy-va"; fi) $(if echo "int main() { return 0; }" | ${CC:-gcc} -xc - -o test_arg.exe -Wl,--nxcompat &> /dev/null; then echo "-Wl,--nxcompat"; fi) $(if echo "int main() { return 0; }" | ${CC:-gcc} -xc - -o test_arg.exe -Wl,--tsaware &> /dev/null; then echo "-Wl,--tsaware"; fi)" LD=$MINGWPREFIX/share/binutils/bin/ld.exe &&
 #PATH=$MINGWPREFIX/share/binutils/bin:$PATH ../configure --prefix=$INSTALLPREFIX/share/gcc --build=$BUILDPLATFORM --host=$RUNPLATFORM $(if echo $VERSION|grep -q "^1[0-9]\."; then echo "--enable-offload-targets=nvptx-none"; fi) --with-pkgversion="MinGW-W64 $(echo $RUNPLATFORM | sed -e "s/-.*$//")$(if [ "0$USE_UCRT" -ne 0 ]; then echo -n "-ucrt"; else echo -n "-msvcrt"; fi)-$(if [ "0$USE_MCF" -ne 0 ]; then echo -n "mcf"; else echo -n "posix"; fi)-$(if [ "0$USE_SJLJ" -ne 0 ]; then echo "sjlj"; else if ! ( echo $RUNPLATFORM | grep -q "x86_64\|aarch64" ); then echo "dwarf"; else echo "seh"; fi; fi), built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi))" $(if echo $RUNPLATFORM | grep -vq "aarch64"; then echo "--with-tune=generic"; fi) --enable-checking=release --enable-threads=$(if [ "0$USE_MCF" -ne 0 ]; then echo -n "mcf"; else echo -n "posix"; fi) $(if [ "0$USE_SJLJ" -ne 0 ]; then if ! ( echo $RUNPLATFORM | grep -q "x86_64\|aarch64" ); then echo "--without-dwarf2 "; fi; echo "--enable-sjlj-exceptions"; else if ! ( echo $RUNPLATFORM | grep -q "x86_64\|aarch64" ); then echo "--with-dwarf2 "; fi; echo "--disable-sjlj-exceptions"; fi) --disable-libunwind-exceptions --disable-serial-configure --disable-bootstrap --enable-host-shared $(if echo $VERSION|grep -q "^[1-7]\."; then echo "--disable-plugin"; else echo "--enable-plugin"; fi) --disable-default-ssp --disable-rpath --disable-libstdcxx-debug --disable-version-specific-runtime-libs --with-stabs --disable-symvers --enable-languages=c,c++,fortran,lto,objc,obj-c++$(if echo $VERSION|grep -q "^1[1-9][.\-]" && [ $(echo $VERSION|sed -e "s/^\([0-9]*\)[.-].*$/\1/") -lt 13 ]; then echo ",jit"; fi) --disable-{gold,nls,stage1-checking,win32-registry,multilib} --enable-{ld,libquadmath,libada,libssp,libstdcxx,lto,fully-dynamic-string,libgomp,graphite,mingw-wildcard,libstdcxx-time,libstdcxx-pch} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX $(if ! ( echo $RUNPLATFORM | grep -q "x86_64\|aarch64" ); then echo "--enable-large-address-aware"; fi) --disable-libstdcxx-backtrace --enable-install-libiberty --enable-__cxa_atexit --without-included-gettext --with-diagnostics-color=auto --enable-clocale=generic --with-libiconv --with-system-zlib --with-build-sysroot=$PWD/mingw-w64 CFLAGS="-I$MINGWPREFIX/include/libdl-win32 $(if ${CC:-gcc} --version|grep -q "^clang"; then echo "-Wno-int-conversion"; fi) $(if echo $RUNPLATFORM | grep -q "^i.86"; then echo "-march=pentium4 -mtune=generic -O2"; fi) $(if echo $RUNPLATFORM | grep -q "^x86_64"; then echo "-march=nocona -msahf -mtune=generic -O2"; fi)" CXXFLAGS="-Wno-int-conversion $(if echo $RUNPLATFORM | grep -q "^i.86"; then echo "-march=pentium4 -mtune=generic -O2"; fi) $(if echo $RUNPLATFORM | grep -q "^x86_64"; then echo "-march=nocona -msahf -mtune=generic -O2"; fi)" LDFLAGS="-pthread -Wl,--no-insert-timestamp $(if echo "int main() { return 0; }" | ${CC:-gcc} -xc - -o test_arg.exe -Wl,--dynamicbase &> /dev/null; then echo "-Wl,--dynamicbase"; fi) $(if echo "int main() { return 0; }" | ${CC:-gcc} -xc - -o test_arg.exe -Wl,--high-entropy-va &> /dev/null; then echo "-Wl,--high-entropy-va"; fi) $(if echo "int main() { return 0; }" | ${CC:-gcc} -xc - -o test_arg.exe -Wl,--nxcompat &> /dev/null; then echo "-Wl,--nxcompat"; fi) $(if echo "int main() { return 0; }" | ${CC:-gcc} -xc - -o test_arg.exe -Wl,--tsaware &> /dev/null; then echo "-Wl,--tsaware"; fi)" LD=$MINGWPREFIX/share/binutils/bin/ld.exe &&
 #PATH=$MINGWPREFIX/share/binutils/bin:$PATH ../configure --prefix=$INSTALLPREFIX/share/gcc --build=$BUILDPLATFORM --host=$RUNPLATFORM $(if echo $VERSION|grep -q "^1[0-9]\."; then echo "--enable-offload-targets=nvptx-none"; fi) --with-pkgversion="MinGW-W64 $(echo $RUNPLATFORM | sed -e "s/-.*$//")$(if [ "0$USE_UCRT" -ne 0 ]; then echo -n "-ucrt"; else echo -n "-msvcrt"; fi)-$(if [ "0$USE_MCF" -ne 0 ]; then echo -n "mcf"; elif [ "0$USE_WIN32" -ne 0 ]; then echo -n "win32"; else echo -n "posix"; fi)-$(if [ "0$USE_SJLJ" -ne 0 ]; then echo "sjlj"; else if ! ( echo $RUNPLATFORM | grep -q "x86_64\|aarch64" ); then echo "dwarf"; else echo "seh"; fi; fi), built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi))" $(if echo $RUNPLATFORM | grep -vq "aarch64"; then echo "--with-tune=generic"; fi) --enable-checking=release --enable-threads=$(if [ "0$USE_MCF" -ne 0 ]; then echo -n "mcf"; elif [ "0$USE_WIN32" -ne 0 ]; then echo -n "win32"; else echo -n "posix"; fi) $(if [ "0$USE_SJLJ" -ne 0 ]; then if ! ( echo $RUNPLATFORM | grep -q "x86_64\|aarch64" ); then echo "--without-dwarf2 "; fi; echo "--enable-sjlj-exceptions"; else if ! ( echo $RUNPLATFORM | grep -q "x86_64\|aarch64" ); then echo "--with-dwarf2 "; fi; echo "--disable-sjlj-exceptions"; fi) --disable-libunwind-exceptions --disable-serial-configure --disable-bootstrap --enable-host-shared $(if echo $VERSION|grep -q "^[1-7]\."; then echo "--disable-plugin"; else echo "--enable-plugin"; fi) --disable-default-ssp --disable-rpath --disable-libstdcxx-debug --disable-version-specific-runtime-libs --with-stabs --disable-symvers --enable-languages=c,c++,fortran,lto,objc,obj-c++$(if echo $VERSION|grep -q "^1[1-9][.\-]" && [ $(echo $VERSION|sed -e "s/^\([0-9]*\)[.-].*$/\1/") -lt 13 ]; then echo ",jit"; fi) --disable-{gold,nls,stage1-checking,win32-registry,multilib} --enable-{ld,libquadmath,libada,libssp,libstdcxx,lto,fully-dynamic-string,libgomp,graphite,mingw-wildcard,libstdcxx-time,libstdcxx-pch} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX $(if ! ( echo $RUNPLATFORM | grep -q "x86_64\|aarch64" ); then echo "--enable-large-address-aware"; fi) --disable-libstdcxx-backtrace --enable-install-libiberty --enable-__cxa_atexit --without-included-gettext --with-diagnostics-color=auto --enable-clocale=generic --with-libiconv --with-system-zlib --with-build-sysroot=$PWD/mingw-w64 CFLAGS="-D__USE_MINGW_ANSI_STDIO=0 -I$MINGWPREFIX/include/libdl-win32 $(if ${CC:-gcc} --version|grep -q "^clang"; then echo "-Wno-int-conversion"; fi) $(if echo $RUNPLATFORM | grep -q "^i.86"; then echo "-march=pentium4 -mtune=generic -O2"; fi) $(if echo $RUNPLATFORM | grep -q "^x86_64"; then echo "-march=nocona -msahf -mtune=generic -O2"; fi) -Wno-error=format" CXXFLAGS="-D__USE_MINGW_ANSI_STDIO=0 -Wno-int-conversion $(if echo $RUNPLATFORM | grep -q "^i.86"; then echo "-march=pentium4 -mtune=generic -O2"; fi) $(if echo $RUNPLATFORM | grep -q "^x86_64"; then echo "-march=nocona -msahf -mtune=generic -O2"; fi)" LDFLAGS="-pthread -Wl,--no-insert-timestamp $(if echo "int main() { return 0; }" | ${CC:-gcc} -xc - -o test_arg.exe -Wl,--dynamicbase &> /dev/null; then echo "-Wl,--dynamicbase"; fi) $(if echo "int main() { return 0; }" | ${CC:-gcc} -xc - -o test_arg.exe -Wl,--high-entropy-va &> /dev/null; then echo "-Wl,--high-entropy-va"; fi) $(if echo "int main() { return 0; }" | ${CC:-gcc} -xc - -o test_arg.exe -Wl,--nxcompat &> /dev/null; then echo "-Wl,--nxcompat"; fi) $(if echo "int main() { return 0; }" | ${CC:-gcc} -xc - -o test_arg.exe -Wl,--tsaware &> /dev/null; then echo "-Wl,--tsaware"; fi)" LD=$MINGWPREFIX/share/binutils/bin/ld.exe &&
 PATH=$MINGWPREFIX/share/binutils/bin:$PATH ../configure --prefix=$INSTALLPREFIX/share/gcc --build=$BUILDPLATFORM --host=$RUNPLATFORM $(if echo $VERSION|grep -q "^1[0-9]\."; then echo "--enable-offload-targets=nvptx-none"; fi) --with-pkgversion="MinGW-W64 $(echo $RUNPLATFORM | sed -e "s/-.*$//")$(if [ "0$USE_UCRT" -ne 0 ]; then echo -n "-ucrt"; else echo -n "-msvcrt"; fi)-$(if [ "0$USE_MCF" -ne 0 ]; then echo -n "mcf"; elif [ "0$USE_WIN32" -ne 0 ]; then echo -n "win32"; else echo -n "posix"; fi)-$(if [ "0$USE_SJLJ" -ne 0 ]; then echo "sjlj"; else if ! ( echo $RUNPLATFORM | grep -q "x86_64\|aarch64" ); then echo "dwarf"; else echo "seh"; fi; fi), built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi))" $(if echo $RUNPLATFORM | grep -vq "aarch64"; then echo "--with-tune=generic"; fi) --enable-checking=release --enable-threads=$(if [ "0$USE_MCF" -ne 0 ]; then echo -n "mcf"; elif [ "0$USE_WIN32" -ne 0 ]; then echo -n "win32"; else echo -n "posix"; fi) $(if [ "0$USE_SJLJ" -ne 0 ]; then if ! ( echo $RUNPLATFORM | grep -q "x86_64\|aarch64" ); then echo "--without-dwarf2 "; fi; echo "--enable-sjlj-exceptions"; else if ! ( echo $RUNPLATFORM | grep -q "x86_64\|aarch64" ); then echo "--with-dwarf2 "; fi; echo "--disable-sjlj-exceptions"; fi) --disable-libunwind-exceptions --disable-serial-configure --disable-bootstrap --enable-host-shared $(if echo $VERSION|grep -q "^[1-7]\."; then echo "--disable-plugin"; else echo "--enable-plugin"; fi) --disable-default-ssp --disable-rpath --disable-libstdcxx-debug --disable-version-specific-runtime-libs --disable-symvers --enable-languages=c,c++,fortran,lto,objc,obj-c++$(if echo $VERSION|grep -q "^1[1-9][.\-]" && [ $(echo $VERSION|sed -e "s/^\([0-9]*\)[.-].*$/\1/") -lt 13 ]; then echo ",jit"; fi) --disable-{gold,nls,stage1-checking,win32-registry,multilib} --enable-{ld,libquadmath,libada,libssp,libstdcxx,lto,fully-dynamic-string,libgomp,graphite,mingw-wildcard,libstdcxx-time,libstdcxx-pch} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX $(if ! ( echo $RUNPLATFORM | grep -q "x86_64\|aarch64" ); then echo "--enable-large-address-aware"; fi) --disable-libstdcxx-backtrace --enable-install-libiberty --enable-__cxa_atexit --without-included-gettext --with-diagnostics-color=auto --enable-clocale=generic --with-libiconv --with-system-zlib --with-build-sysroot=$PWD/mingw-w64 CFLAGS="-I$MINGWPREFIX/include/libdl-win32 $(if ${CC:-gcc} --version|grep -q "^clang"; then echo "-Wno-int-conversion"; fi) $(if echo $RUNPLATFORM | grep -q "^i.86"; then echo "-march=pentium4 -mtune=generic -O2"; fi) $(if echo $RUNPLATFORM | grep -q "^x86_64"; then echo "-march=nocona -msahf -mtune=generic -O2"; fi) -Wno-error=format" CXXFLAGS="-Wno-int-conversion $(if echo $RUNPLATFORM | grep -q "^i.86"; then echo "-march=pentium4 -mtune=generic -O2"; fi) $(if echo $RUNPLATFORM | grep -q "^x86_64"; then echo "-march=nocona -msahf -mtune=generic -O2"; fi)" LDFLAGS="-pthread -Wl,--no-insert-timestamp $(if echo "int main() { return 0; }" | ${CC:-gcc} -xc - -o test_arg.exe -Wl,--dynamicbase &> /dev/null; then echo "-Wl,--dynamicbase"; fi) $(if echo "int main() { return 0; }" | ${CC:-gcc} -xc - -o test_arg.exe -Wl,--high-entropy-va &> /dev/null; then echo "-Wl,--high-entropy-va"; fi) $(if echo "int main() { return 0; }" | ${CC:-gcc} -xc - -o test_arg.exe -Wl,--nxcompat &> /dev/null; then echo "-Wl,--nxcompat"; fi) $(if echo "int main() { return 0; }" | ${CC:-gcc} -xc - -o test_arg.exe -Wl,--tsaware &> /dev/null; then echo "-Wl,--tsaware"; fi)" LD=$MINGWPREFIX/share/binutils/bin/ld.exe &&
 #-D__USE_MINGW_ANSI_STDIO=0
 #--enable-multiarch --target=$RUNPLATFORM --enable-targets=$(for arch in i686 x86_64 aarch64; do if [ "$arch-w64-mingw32" != "$RUNPLATFORM" ]; then echo -n $arch-w64-mingw32,; fi; done | sed -e "s/,$//") 
 #PATH=$MINGWPREFIX/share/binutils/bin:$PATH ../configure --prefix=$INSTALLPREFIX/share/gcc --build=$BUILDPLATFORM --host=$RUNPLATFORM $(if echo $VERSION|grep -q "^1[0-9]\."; then echo "--enable-offload-targets=nvptx-none"; fi) --with-pkgversion="MinGW-W64 $(echo $RUNPLATFORM | sed -e "s/-.*$//")$(if [ "0$USE_UCRT" -ne 0 ]; then echo -n "-ucrt"; else echo -n "-msvcrt"; fi)-posix-$(if [ "0$USE_SJLJ" -ne 0 ]; then echo "sjlj"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "dwarf"; else echo "seh"; fi; fi), built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi))" --with-tune=generic --enable-checking=release --enable-threads=posix $(if [ "0$USE_SJLJ" -ne 0 ]; then if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--without-dwarf2 "; fi; echo "--enable-sjlj-exceptions"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--with-dwarf2 "; fi; echo "--disable-sjlj-exceptions"; fi) --disable-libunwind-exceptions --disable-serial-configure --disable-bootstrap --enable-host-shared $(if echo $VERSION|grep -q "^[1-7]\."; then echo "--disable-plugin"; else echo "--enable-plugin"; fi) --disable-default-ssp --disable-rpath --disable-libstdcxx-debug --disable-version-specific-runtime-libs --with-stabs --disable-symvers --enable-languages=c,c++,fortran,lto,objc,obj-c++$(if echo $VERSION|grep -q "^1[1-9][.\-]"; then echo ",jit"; fi) --disable-{gold,nls,stage1-checking,win32-registry,multilib} --enable-{ld,libquadmath,libada,libssp,libstdcxx,lto,fully-dynamic-string,libgomp,graphite,mingw-wildcard,libstdcxx-time,libstdcxx-pch} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX $(if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--enable-large-address-aware"; fi) $(if echo $VERSION|grep -q "^1[2-9][.\-]"; then echo "--enable-libstdcxx-backtrace"; fi) --enable-install-libiberty --enable-__cxa_atexit --without-included-gettext --with-diagnostics-color=auto --enable-clocale=generic --with-libiconv --with-system-zlib --with-build-sysroot=$(pwd)/mingw-w64 CFLAGS="-I$MINGWPREFIX/include/libdl-win32 -D__USE_MINGW_ACCESS -I$MINGWPREFIX/include/mman-win32" CXXFLAGS="-D__USE_MINGW_ACCESS -I$MINGWPREFIX/include/mman-win32" LDFLAGS="-Wl,--as-needed -lmman $(if echo "int main() { return 0; }" | gcc -xc - -o test_arg.exe -Wl,--dynamicbase &> /dev/null; then echo "-Wl,--dynamicbase"; fi) $(if echo "int main() { return 0; }" | gcc -xc - -o test_arg.exe -Wl,--high-entropy-va &> /dev/null; then echo "-Wl,--high-entropy-va"; fi) $(if echo "int main() { return 0; }" | gcc -xc - -o test_arg.exe -Wl,--nxcompat &> /dev/null; then echo "-Wl,--nxcompat"; fi) $(if echo "int main() { return 0; }" | gcc -xc - -o test_arg.exe -Wl,--tsaware &> /dev/null; then echo "-Wl,--tsaware"; fi)" TARGET_CFLAGS="-I$MINGWPREFIX/include/mman-win32" TARGET_CXXFLAGS="-I$MINGWPREFIX/include/mman-win32" TARGET_LDFLAGS="-Wl,--as-needed -lmman" &&
 #PATH=$MINGWPREFIX/share/binutils/bin:$PATH ../configure --prefix=$INSTALLPREFIX/share/gcc --build=$BUILDPLATFORM --host=$RUNPLATFORM $(if echo $VERSION|grep -q "^1[0-9]\."; then echo "--enable-offload-targets=nvptx-none"; fi) --with-pkgversion="MinGW-W64 $(echo $RUNPLATFORM | sed -e "s/-.*$//")$(if [ "0$USE_UCRT" -ne 0 ]; then echo -n "-ucrt"; else echo -n "-msvcrt"; fi)-posix-$(if [ "0$USE_SJLJ" -ne 0 ]; then echo "sjlj"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "dwarf"; else echo "seh"; fi; fi), built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi))" --with-tune=generic --enable-checking=release --enable-threads=posix $(if [ "0$USE_SJLJ" -ne 0 ]; then if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--without-dwarf2 "; fi; echo "--enable-sjlj-exceptions"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--with-dwarf2 "; fi; echo "--disable-sjlj-exceptions"; fi) --disable-libunwind-exceptions --disable-serial-configure --disable-bootstrap --enable-host-shared $(if echo $VERSION|grep -q "^[1-6]\."; then echo "--disable-plugin"; else echo "--enable-plugin"; fi) --disable-default-ssp --disable-rpath --disable-libstdcxx-debug --disable-version-specific-runtime-libs --with-stabs --disable-symvers --enable-languages=c,c++,fortran,lto,objc,obj-c++$(if echo $VERSION|grep -q "^1[1-9][.\-]"; then echo ",jit"; fi),go --disable-{gold,nls,stage1-checking,win32-registry,multilib} --enable-{ld,libquadmath,libada,libssp,libstdcxx,lto,fully-dynamic-string,libgomp,graphite,mingw-wildcard,libstdcxx-time,libstdcxx-pch} -with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX $(if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--enable-large-address-aware"; fi) $(if echo $VERSION|grep -q "^1[2-9][.\-]"; then echo "--enable-libstdcxx-backtrace"; fi) --enable-install-libiberty --enable-__cxa_atexit --without-included-gettext --with-diagnostics-color=auto --enable-clocale=generic --with-libiconv --with-system-zlib --with-build-sysroot=$(pwd)/mingw-w64 CFLAGS="-I$MINGWPREFIX/include/libdl-win32 -I$MINGWPREFIX/include/mman-win32 -D__USE_MINGW_ACCESS -O3" CXXFLAGS="-I$MINGWPREFIX/include/mman-win32 -DHAVE_MMAP_FILE -D__USE_MINGW_ACCESS -O3" LDFLAGS="-s -Wa,-mbig-obj -Wl,--as-needed -ldl -lmman $(if echo "int main() { return 0; }" | gcc -xc - -o test_arg.exe -Wl,--dynamicbase &> /dev/null; then echo "-Wl,--dynamicbase"; fi) $(if echo "int main() { return 0; }" | gcc -xc - -o test_arg.exe -Wl,--high-entropy-va &> /dev/null; then echo "-Wl,--high-entropy-va"; fi) $(if echo "int main() { return 0; }" | gcc -xc - -o test_arg.exe -Wl,--nxcompat &> /dev/null; then echo "-Wl,--nxcompat"; fi) $(if echo "int main() { return 0; }" | gcc -xc - -o test_arg.exe -Wl,--tsaware &> /dev/null; then echo "-Wl,--tsaware"; fi)" LIBS="-lmman" HOST_LIBS="-lmman" &&
 #PATH=$MINGWPREFIX/share/binutils/bin:$PATH ../configure --prefix=$INSTALLPREFIX/share/gcc --build=$BUILDPLATFORM --host=$RUNPLATFORM $(if echo $VERSION|grep -q "^1[0-9]\."; then echo "--enable-offload-targets=nvptx-none"; fi) --with-pkgversion="MinGW-W64 $(echo $RUNPLATFORM | sed -e "s/-.*$//")$(if [ "0$USE_UCRT" -ne 0 ]; then echo -n "-ucrt"; else echo -n "-msvcrt"; fi)-posix-$(if [ "0$USE_SJLJ" -ne 0 ]; then echo "sjlj"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "dwarf"; else echo "seh"; fi; fi), built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi))" --with-tune=generic --enable-checking=release --enable-threads=posix $(if [ "0$USE_SJLJ" -ne 0 ]; then if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--without-dwarf2 "; fi; echo "--enable-sjlj-exceptions"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--with-dwarf2 "; fi; echo "--disable-sjlj-exceptions"; fi) --disable-libunwind-exceptions --disable-serial-configure --disable-bootstrap --enable-host-shared $(if echo $VERSION|grep -q "^[1-6]\."; then echo "--disable-plugin"; else echo "--enable-plugin"; fi) --disable-default-ssp --disable-rpath --disable-libstdcxx-debug --disable-version-specific-runtime-libs --with-stabs --disable-symvers --enable-languages=c,c++,fortran,lto,objc,obj-c++$(if echo $VERSION|grep -q "^1[1-9][.\-]"; then echo ",jit"; fi) --disable-{gold,nls,stage1-checking,win32-registry,multilib} --enable-{ld,libquadmath,libada,libssp,libstdcxx,lto,fully-dynamic-string,libgomp,graphite,mingw-wildcard,libstdcxx-pch,libstdcxx-time} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX $(if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--enable-large-address-aware"; fi) $(if echo $VERSION|grep -q "^1[2-9][.\-]"; then echo "--enable-libstdcxx-backtrace"; fi) --enable-install-libiberty --enable-__cxa_atexit --without-included-gettext --with-diagnostics-color=auto --enable-clocale=generic --with-libiconv --with-system-zlib --with-build-sysroot=$(pwd)/mingw-w64 CFLAGS="-I$MINGWPREFIX/include/libdl-win32 -I$MINGWPREFIX/include/mman-win32 -DHAVE_MMAP_FILE -D__USE_MINGW_ACCESS" CXXFLAGS="-I$MINGWPREFIX/include/libdl-win32 -I$MINGWPREFIX/include/mman-win32 -DHAVE_MMAP_FILE -D__USE_MINGW_ACCESS" LDFLAGS="-Wl,--as-needed -ldl -lmman -Wl,--disable-nxcompat $(if echo "int main() { return 0; }" | gcc -xc - -o test_arg.exe -Wl,--disable-high-entropy-va &> /dev/null; then echo "-Wl,--disable-high-entropy-va"; fi) -Wl,--disable-dynamicbase" HOST_LIBS="-ldl" &&
 #PATH=$MINGWPREFIX/share/binutils/bin:$PATH ../configure --prefix=$INSTALLPREFIX/share/gcc --build=$BUILDPLATFORM --host=$RUNPLATFORM --target=$RUNPLATFORM $(if echo $VERSION|grep -q "^1[0-9]\."; then echo "--enable-offload-targets=nvptx-none"; fi) --with-pkgversion="MinGW-W64 $(echo $RUNPLATFORM | sed -e "s/-.*$//")$(if [ "0$USE_UCRT" -ne 0 ]; then echo -n "-ucrt"; fi)-posix-$(if [ "0$USE_SJLJ" -ne 0 ]; then echo "sjlj"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "dwarf"; else echo "seh"; fi; fi), built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi))" --with-tune=generic --enable-checking=release --enable-threads=posix $(if [ "0$USE_SJLJ" -ne 0 ]; then if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--without-dwarf2 "; fi; echo "--enable-sjlj-exceptions"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--with-dwarf2 "; fi; echo "--disable-sjlj-exceptions"; fi) --disable-libunwind-exceptions --disable-serial-configure --disable-bootstrap --enable-host-shared $(if echo $VERSION|grep -q "^[1-6]\."; then echo "--disable-plugin"; else echo "--enable-plugin"; fi) --disable-default-ssp --disable-rpath --enable-libstdcxx-pch --enable-libstdcxx-time=yes --disable-libstdcxx-debug --disable-version-specific-runtime-libs --with-stabs --disable-symvers --enable-languages=c,c++,fortran,lto,objc,obj-c++$(if echo $VERSION|grep -q "^1[1-9][.\-]"; then echo ",jit"; fi)$(if echo $VERSION|grep -q "^1[1-9][.\-]"; then echo -n ",d"; fi) $(if echo $VERSION|grep -vq "^[3-8]\."; then echo -n "--enable-libphobos"; fi) --disable-{gold,nls,stage1-checking,win32-registry,multilib,libssp,libitm,libsanitizer} --enable-{ld,libquadmath,libada,libstdcxx,lto,fully-dynamic-string,libgomp,graphite,mingw-wildcard} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX --enable-install-libiberty --enable-__cxa_atexit --without-included-gettext --with-diagnostics-color=auto --enable-clocale=generic --with-libiconv --with-system-zlib --with-build-sysroot=$(pwd)/mingw-w64 $(if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--enable-large-address-aware"; fi) CFLAGS="-I$MINGWPREFIX/include/libdl-win32" &&
 #$(if echo $VERSION|grep -q "^1[1-9][.\-]" && [ $(echo $VERSION|sed -e "s/^\([0-9]*\)\..*$/\1/") -ge 13 ]; then echo ",m2"; fi)
 #--disable-dynamicbase --high-entropy-va --nxcompat --tsaware
 #--enable-threads=mcf
 #--with-native-system-header-dir=$MINGWPREFIX/share/mingw-w64/include 
 #--enable-languages=d --disable-libphobos --with-libphobos-druntime-only GDC=$MINGWPREFIX/share/gcc9/bin/gdc.exe 
 #GDC=$MINGWPREFIX/share/dmd/windows/bin/dmd.exe 
 #--enable-languages=c,c++,fortran,lto,objc,obj-c++$(if echo $VERSION|grep -q "^1[1-9][.\-]"; then echo ",d,jit"; fi)$(if echo $VERSION|grep -q "^1[2-9][.\-]"; then echo ",brig,go"; fi) 
 #--disable-libstdcxx-pch
 #--enable-languages=ada 
 #--enable-default-ssp 
 #--enable-default-pie (doesn't seem to work)
 #CFLAGS="-D__USE_MINGW_ACCESS" CXXFLAGS="-D__USE_MINGW_ACCESS" 
 ####configure: error: GNAT is required to build ada
 #--with-native-system-header-dir=/$(echo $(pwd)/mingw-w64|sed -e "s?[^/]*?..?g")$MINGWPREFIX/share/mingw-w64/include 
 #CFLAGS="-I$MINGWPREFIX/include/libdl-win32 -I$MINGWPREFIX/include/mman-win32" CXXFLAGS="-I$MINGWPREFIX/include/libdl-win32 -I$MINGWPREFIX/include/mman-win32" LDFLAGS="-Wl,--as-needed -lmman" LDFLAGS_FOR_TARGET="-Wl,--as-needed -lmman" 
 #--enable-languages=go,brig ####not supported for this target
 #LDFLAGS_FOR_TARGET="-s"
 #CFLAGS_FOR_TARGET="-O0" CXXFLAGS_FOR_TARGET="-O0" 
 #LDFLAGS_FOR_TARGET="-lpthread"
 ## required for D language
 # --enable-languages=...$(if echo $VERSION|grep -vq "^[3-8]\."; then echo -n ",d"; fi) $(if echo $VERSION|grep -vq "^[3-8]\."; then echo -n "--enable-libphobos"; fi)
 # LDFLAGS="-Wl,--allow-multiple-definition" 
 #Note: GCC11 supports libgccjit
 #PATH=$MINGWPREFIX/share/binutils/bin:$MINGWPREFIX/share/mingw-w64/bin:$PATH C_INCLUDE_PATH=$MINGWPREFIX/share/mingw-w64/include${C_INCLUDE_PATH:+:$C_INCLUDE_PATH} CPLUS_INCLUDE_PATH=$MINGWPREFIX/share/mingw-w64/include${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} LD_RUN_PATH=$MINGWPREFIX/share/mingw-w64/lib${LD_RUN_PATH:+:$LD_RUN_PATH} LIBRARY_PATH=$MINGWPREFIX/share/mingw-w64/lib${LIBRARY_PATH:+:$LIBRARY_PATH} ../configure --prefix=$INSTALLPREFIX/share/gcc --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-pkgversion="MinGW-W64 $(echo $RUNPLATFORM | sed -e "s/-.*$//")-posix-$(if [ "0$USE_SJLJ" -ne 0 ]; then echo "sjlj"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "dwarf"; else echo "seh"; fi; fi), built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi))" --with-tune=generic --enable-checking=release --enable-threads=posix $(if [ "0$USE_SJLJ" -ne 0 ]; then if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--without-dwarf2 "; fi; echo "--enable-sjlj-exceptions"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--with-dwarf2 "; fi; echo "--disable-sjlj-exceptions"; fi) --disable-libunwind-exceptions --enable-serial-configure --disable-bootstrap --enable-host-shared --enable-plugin --enable-default-ssp --disable-rpath --disable-libstdcxx-pch --enable-libstdcxx-time=yes --disable-libstdcxx-debug --disable-version-specific-runtime-libs --with-stabs --disable-symvers --enable-languages=c,c++,fortran,lto,objc,obj-c++$(if echo $VERSION|grep -vq "^[3-8]\."; then echo -n ",d"; fi) --disable-{gold,nls,stage1-checking,win32-registry,multilib} --enable-{ld,libquadmath,libada,libssp,libstdcxx,lto,fully-dynamic-string,libgomp,graphite,mingw-wildcard} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX --enable-install-libiberty --enable-__cxa_atexit --without-included-gettext --with-diagnostics-color=auto --with-libiconv --with-system-zlib --with-build-sysroot=$(pwd)/mingw-w64 $(if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--enable-large-address-aware"; fi) &&
 #CFLAGS_FOR_TARGET="-O2 -flto -ffat-lto-objects" CXXFLAGS_FOR_TARGET="-O2 -flto -ffat-lto-objects" LDFLAGS="-fno-use-linker-plugin" 
 #CXXFLAGS="-fpermissive" 
 #LDFLAGS="-Wl,--as-needed -lgcc" 
 #--enable-languages=go --enable-libgo -> know not to work on MinGW
 #PATH=$MINGWPREFIX/share/binutils/bin:$PWD/build_mingw/gcc:$PATH build_mingw/gcc/gccgo.exe -c build_mingw/x86_64-w64-mingw32/libgo/cpugen.go -o build_mingw/x86_64-w64-mingw32/libgo/cpugen.o
 #PATH=$MINGWPREFIX/share/binutils/bin:$PWD/build_mingw/gcc:$PATH build_mingw/gcc/gccgo.exe -c build_mingw/x86_64-w64-mingw32/libgo/cpugen.go -o build_mingw/x86_64-w64-mingw32/libgo/internal/cpu.o
 #PATH=$MINGWPREFIX/share/binutils/bin:$PWD/build_mingw/gcc:$PATH build_mingw/gcc/gccgo.exe -c build_mingw/x86_64-w64-mingw32/libgo/cpugen.go -o build_mingw/x86_64-w64-mingw32/libgo/internal/.libs/cpu.o
 #--enable-languages=jit -> still experimental
 #--enable-languages=brig -> not supported
 #--enable-default-pie -> causes build to fail
 #--enable-gold -> does not build gold linker on Windows (no use because Windows uses PE/COFF instead of ELF)
 #--without-cuda-driver
 #--enable-default-ssp 
 #--disable-default-ssp
 # disable DEP: -Wl,--disable-nxcompat
 # disable ASLR: -Wl,--disable-high-entropy-va -Wl,--disable-dynamicbase
 ## fix empty defines of _GLIBCXX_STDIO_SEEK_CUR/_GLIBCXX_STDIO_SEEK_END
 #sed -i.bak -e "s/^#define _GLIBCXX_STDIO_SEEK_CUR $/&1/; s/^#define _GLIBCXX_STDIO_SEEK_END $/&2/" $(echo $RUNPLATFORM | sed -e "s/-.*$//")-w64-mingw32/libstdc++-v3/include/x86_64-w64-mingw32/bits/c++config.h &&
 ## fix location of MinGW-w64 headers
 #sed -i.bak -e "s?\(NATIVE_SYSTEM_HEADER_DIR\s*=\s*\)/mingw/include?\1$MINGWPREFIX/share/mingw-w64/include?" gcc/Makefile &&
 ## replace -O3 with -O0 in case of errors like: undefined reference to LC1
 #sed -i.bak -e "s/-O2/-O0/" Makefile &&
 #sed -i.bak -e "s/-O2/-O0/" gcc/checksum-options &&
 #sed -i.bak -e "s/-O2/-O0/" */libgfortran/Makefile &&
 #Note: GCC13: remove/disable: jit plugins
 cd .. &&
 ## fix building DLLs
 #sed -i.bak -e "s/\(allow_undefined=\)yes/\1no/" $(find build_mingw -name libtool) &&
 ## force using the right binutils
 ##### see also: https://www.spiria.com/en/blog/desktop-software/building-mingw-w64-toolchain-links-specific-visual-studio-runtime-library/
 ##sed -i.bak -e "s?^\(ORIGINAL_.*_FOR_TARGET\s*=\s*\"*\).*/bin/\([^/\" ]*\)?\1$MINGWPREFIX/share/binutils/bin/\2?" build_mingw/gcc/as build_mingw/gcc/collect-ld build_mingw/gcc/nm build_mingw/gcc/Makefile &&
 #sed -i.bak -e "s?^\(ORIGINAL_.*_FOR_TARGET\s*=\s*\"*\).*/bin/\([^/\" ]*\)?\1$MINGWPREFIX/share/binutils/bin/\2?" build_mingw/gcc/collect-ld
 make -Cbuild_mingw configure-host &&
 ## avoid invalid linker flags -Wl,--gc-keep-exported and -no-pie when building with CLang
 #if ${CC:-gcc} --version|grep -q "^clang"; then sed -i.bak -e "s/-Wl,--gc-keep-exported//; s/ -no-pie//" build_mingw/gcc/Makefile; fi &&
 ## missing mmap/munmap
 #for F in $(grep -lv "#include <sys/mman\.h>" $(find build_mingw -name config.h)); do echo "#include <sys/mman.h>" >> $F; done &&
 wl-showstatus build &&
 #( make -Cbuild_mingw || make -j1 -Cbuild_mingw ) &&
 #make -Cbuild_mingw/gcc CPP=$(which cpp.exe) &&
 #( make -Cbuild_mingw || ( make -Cbuild_mingw $(echo $RUNPLATFORM | sed -e "s/-.*$//")-w64-mingw32/libstdc++-v3/src CXXFLAGS="-D__CRT__NO_INLINE" && make -Cbuild_mingw ) || make -j1 -Cbuild_mingw ) &&
 #( PATH=$MINGWPREFIX/share/binutils/bin:$PATH make -Cbuild_mingw || ( PATH=$MINGWPREFIX/share/binutils/bin:$PATH make -Cbuild_mingw $(echo $RUNPLATFORM | sed -e "s/-.*$//")-w64-mingw32/libstdc++-v3/src CXXFLAGS="-D__CRT__NO_INLINE" && PATH=$MINGWPREFIX/share/binutils/bin:$PATH make -Cbuild_mingw ) || PATH=$MINGWPREFIX/share/binutils/bin:$PATH make -j1 -Cbuild_mingw ) &&
 ( PATH=$MINGWPREFIX/share/binutils/bin:$PATH:$PWD/build_mingw/gcc make -Cbuild_mingw || ( PATH=$MINGWPREFIX/share/binutils/bin:$PATH:$PWD/build_mingw/gcc make -Cbuild_mingw $(echo $RUNPLATFORM | sed -e "s/-.*$//")-w64-mingw32/libstdc++-v3/src CXXFLAGS="-D__CRT__NO_INLINE" && PATH=$MINGWPREFIX/share/binutils/bin:$PATH:$PWD/build_mingw/gcc make -Cbuild_mingw ) || PATH=$MINGWPREFIX/share/binutils/bin:$PATH:$PWD/build_mingw/gcc make -j1 -Cbuild_mingw ) &&
 #( PATH=$MINGWPREFIX/share/binutils/bin:$PWD/build_mingw/gcc:$PATH make -Cbuild_mingw || ( PATH=$MINGWPREFIX/share/binutils/bin:$PWD/build_mingw/gcc:$PATH make -Cbuild_mingw $(echo $RUNPLATFORM | sed -e "s/-.*$//")-w64-mingw32/libstdc++-v3/src CXXFLAGS="-D__CRT__NO_INLINE" && PATH=$MINGWPREFIX/share/binutils/bin:$PWD/build_mingw/gcc:$PATH make -Cbuild_mingw ) || PATH=$MINGWPREFIX/share/binutils/bin:$PWD/build_mingw/gcc:$PATH make -j1 -Cbuild_mingw ) &&
 #( PATH=$MINGWPREFIX/share/mingw-w64/bin:$PATH C_INCLUDE_PATH=$MINGWPREFIX/share/mingw-w64/include${C_INCLUDE_PATH:+:$C_INCLUDE_PATH} CPLUS_INCLUDE_PATH=$MINGWPREFIX/share/mingw-w64/include${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} LD_RUN_PATH=$MINGWPREFIX/share/mingw-w64/lib${LD_RUN_PATH:+:$LD_RUN_PATH} LIBRARY_PATH=$MINGWPREFIX/share/mingw-w64/lib${LIBRARY_PATH:+:$LIBRARY_PATH} make -Cbuild_mingw || ( 
 # PATH=$MINGWPREFIX/share/mingw-w64/bin:$PATH C_INCLUDE_PATH=$MINGWPREFIX/share/mingw-w64/include${C_INCLUDE_PATH:+:$C_INCLUDE_PATH} CPLUS_INCLUDE_PATH=$MINGWPREFIX/share/mingw-w64/include${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} LD_RUN_PATH=$MINGWPREFIX/share/mingw-w64/lib${LD_RUN_PATH:+:$LD_RUN_PATH} LIBRARY_PATH=$MINGWPREFIX/share/mingw-w64/lib${LIBRARY_PATH:+:$LIBRARY_PATH} make -Cbuild_mingw $(echo $RUNPLATFORM | sed -e "s/-.*$//")-w64-mingw32/libstdc++-v3/src CXXFLAGS="-D__CRT__NO_INLINE" &&
 # PATH=$MINGWPREFIX/share/mingw-w64/bin:$PATH C_INCLUDE_PATH=$MINGWPREFIX/share/mingw-w64/include${C_INCLUDE_PATH:+:$C_INCLUDE_PATH} CPLUS_INCLUDE_PATH=$MINGWPREFIX/share/mingw-w64/include${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} LD_RUN_PATH=$MINGWPREFIX/share/mingw-w64/lib${LD_RUN_PATH:+:$LD_RUN_PATH} LIBRARY_PATH=$MINGWPREFIX/share/mingw-w64/lib${LIBRARY_PATH:+:$LIBRARY_PATH} make -Cbuild_mingw
 #) || PATH=$MINGWPREFIX/share/mingw-w64/bin:$PATH C_INCLUDE_PATH=$MINGWPREFIX/share/mingw-w64/include${C_INCLUDE_PATH:+:$C_INCLUDE_PATH} CPLUS_INCLUDE_PATH=$MINGWPREFIX/share/mingw-w64/include${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} LD_RUN_PATH=$MINGWPREFIX/share/mingw-w64/lib${LD_RUN_PATH:+:$LD_RUN_PATH} LIBRARY_PATH=$MINGWPREFIX/share/mingw-w64/lib${LIBRARY_PATH:+:$LIBRARY_PATH} make -j1 -Cbuild_mingw ) &&
 #make -Cbuild_mingw glibcxx_lt_pic_flag= &&
 # fix missing cc1.exe.a / cc1plus.exe.a (version >= 13)
 #### Bug reported here: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=116091
 touch build_mingw/gcc/cc1.exe.a build_mingw/gcc/cc1plus.exe.a &&
 wl-showstatus build-install &&
 #make -Cbuild_mingw install-strip &&
 ( make -Cbuild_mingw install-strip || make -Cbuild_mingw install-strip LIBS="-lmman" ) &&
 ## strip absolute -L paths from libstdc++.la and libsupc++.la
 #sed -i -e "s? -L$(pwd)[^\s]*??g; s? -L$INSTALLPREFIX/share/gcc/? -L../?g" $INSTALLPREFIX/share/gcc/lib/*.la &&
 # remove .la files
 rm -f $(find $INSTALLPREFIX -name '*.la') &&
 # fix absolute path
 sed -i -e "s?$INSTALLPREFIX/share/gcc?\$(realpath \$(dirname \$0)/../../../../..)?" $INSTALLPREFIX/share/gcc/libexec/gcc/*/*/install-tools/mkheaders &&
 sed -i -e "s?'$INSTALLPREFIX/share/gcc?os.path.realpath(os.path.dirname(os.path.realpath(__file__)) + '/..') + '?" $INSTALLPREFIX/share/gcc/lib/libstdc++.dll.a-gdb.py &&
 ## when using --enable-version-specific-runtime-libs
 #sed -i -e "s?'$INSTALLPREFIX/share/gcc?os.path.realpath(os.path.dirname(os.path.realpath(__file__)) + '/..') + '?" $INSTALLPREFIX/share/gcc/lib/gcc/*/*/libstdc++.dll.a-gdb.py &&
 # remove dummy cc1.exe.a / cc1plus.exe.a (version >= 13)
 #for F in build_mingw/gcc/cc1.exe.a build_mingw/gcc/cc1plus.exe.a; do if [ ! -s $F ]; then echo rm -f $F; fi; done &&
 find $INSTALLPREFIX -size 0 -type f -name '*.exe.a' -delete &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
####To get all configure parameters: rm -f configure_help && for F in $(find -name configure); do ( echo "[$F]" && $F --help ) >> configure_help; done
####TO DO: check if architecture triplet vor UCRT should be *-w64-mingw32crt



export RELEASE=1
export PACKAGEDESTDIR=..
#export PACKAGEDESTDIR='\\SERVER\Download\Programming\mingw-w64\winlibs.com\staged'
#export PACKAGEDESTDIR='\\SERVER\Download\Programming\mingw-w64\winlibs.com'
export GCC_SPECIFIC_VERSION=
export WITH_GCC=1
export WITH_GCC_OFFLOAD=
export WITH_GCC_TARGET_AVR=
export WITH_GDB=1
export WITH_ASM=1
export WITH_LLVM=
export WITH_CCACHE=1
export WITH_CMAKE=1
export WITH_NINJA=1
export WITH_DOXYGEN=1
export WITH_EXTRA_TOOLS=1
export MAKE_ZIP=1
export MAKE_CHECKSUMS=1
export BASENAME=winlibs-$(if [ "0$WITH_GCC" -ne 0 ]; then echo -n "gcc-"; fi)$(if [ "0$WITH_LLVM" -ne 0 ]; then echo -n "llvm-"; fi)mingw-w64$(if [ "0$USE_UCRT" -ne 0 ]; then echo -n "ucrt"; else echo -n "msvcrt"; fi)
#export DEPENDENCIES=gcc,gdb,mingw-w64,binutils,make,pexports,dos2unix
#export DEPENDENCIES=gcc,mingw-w64,binutils,make,pexports,dos2unix$(if [ "0$WITH_GDB" -ne 0 ]; then echo -n ",gdb"; fi)$(if [ "0$WITH_ASM" -ne 0 ]; then echo -n ",yasm,nasm,jwasm"; fi)$(if [ "0$WITH_CCACHE" -ne 0 ]; then echo -n ",ccache"; fi)$(if [ "0$WITH_LLVM" -ne 0 ]; then echo -n ",llvm,lld,clang,compiler-rt,lldb,libunwind,clang-tools-extra"; fi)
#export DEPENDENCIES=gcc,mingw-w64,binutils,make,pexports,dos2unix$(if [ "0$WITH_GDB" -ne 0 ]; then echo -n ",gdb"; fi)$(if [ "0$WITH_ASM" -ne 0 ]; then echo -n ",yasm,nasm,jwasm"; fi)$(if [ "0$WITH_CCACHE" -ne 0 ]; then echo -n ",ccache"; fi)$(if [ "0$WITH_LLVM" -ne 0 ]; then echo -n ",llvm,lld,clang,compiler-rt,lldb,libunwind,clang-tools-extra"; fi)$(if [ "0$WITH_GCC_OFFLOAD" -ne 0 ]; then echo -n ",gcc-offload-nvptx,nvptx-gcc"; fi)
export DEPENDENCIES=$(if [ "0$WITH_GCC" -ne 0 ]; then echo -n "gcc$GCC_SPECIFIC_VERSION,"; fi)mingw-w64,binutils,make,pexports,dos2unix$(if [ "0$WITH_GDB" -ne 0 ]; then echo -n ",gdb"; fi)$(if [ "0$WITH_ASM" -ne 0 ]; then echo -n ",yasm,nasm,jwasm"; fi)$(if [ "0$WITH_CCACHE" -ne 0 ]; then echo -n ",ccache"; fi)$(if [ "0$WITH_CMAKE" -ne 0 ]; then echo -n ",cmake"; fi)$(if [ "0$WITH_LLVM" -ne 0 ]; then echo -n ",llvm-project,lldb-mi"; fi)$(if [ "0$WITH_GCC_OFFLOAD" -ne 0 ]; then echo -n ",gcc-offload-nvptx,nvptx-gcc"; fi)$(if [ "0$WITH_NINJA" -ne 0 ]; then echo -n ",ninja"; fi)$(if [ "0$WITH_DOXYGEN" -ne 0 ]; then echo -n ",doxygen"; fi)$(if [ "0$WITH_EXTRA_TOOLS" -ne 0 ]; then echo -n ",pedeps,ctags,cppcheck"; fi)
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=pedeps
export OPTIONALBUILDDEPENDENCIES=
wl-wait4deps
PATH=$PATH:/C/Program\ Files/7-Zip SEVENZIP="$(which 7z.exe)"
if [ "0$WITH_GCC" -ne 0 ]; then
 #GCCVER=$(cat $MINGWPREFIX/var/lib/packages/gcc/version)
 GCCVER=$($MINGWPREFIX/share/gcc$GCC_SPECIFIC_VERSION/bin/gcc.exe --version|head -n1|sed -e "s/ ([a-z]*)$//"|sed -e "s/^.*) \([0-9][0-9. ]*\)$/\1/"|sed -e "s/ /-snapshot/")
fi
GCCTHREADS=$($MINGWPREFIX/share/gcc$GCC_SPECIFIC_VERSION/bin/gcc.exe -v 2>&1 | sed -ne "s/^.*--enable-threads=\([^ ]*\)\b.*$/\1/p")
GCCEH=$(echo -e "#include <iostream>\n#if defined(__USING_SJLJ_EXCEPTIONS__)\n#define EH \"sjlj\"\n#elif defined(__SEH__)\n#define EH \"seh\"\n#elif defined(__GCC_HAVE_DWARF2_CFI_ASM)\n#define EH \"dwarf\"\n#else\n#define EH \"unknown\"\n#endif\nint main() {\nstd::cout << EH;\nreturn 0;\n}" | g++ -xc++ -mconsole - -otest_eh.exe && test_eh.exe && rm -f test_eh.exe)
#GCCEH=$(echo -e "#include <iostream>\n#if defined(__USING_SJLJ_EXCEPTIONS__)\n#define EH \"sjlj\"\n#elif defined(__SEH__)\n#define EH \"seh\"\n#elif defined(__GCC_HAVE_DWARF2_CFI_ASM)\n#define EH \"dwarf\"\n#else\n#define EH \"unknown\"\n#endif\nint main() {\nstd::cout << EH;\nreturn 0;\n}" | $MINGWPREFIX/share/gcc$GCC_SPECIFIC_VERSION/bin/g++.exe -xc++ -mconsole - -otest_eh.exe && test_eh.exe && rm -f test_eh.exe)
if [ "0$WITH_LLVM" -ne 0 ]; then
 CLANGVER=$($MINGWPREFIX/share/llvm/bin/clang.exe --version|head -n1|sed -e "s/^.* \([0-9][0-9.]*[^ ]*\)\s*$/\1/")
fi
#MINGW64VER=$(cat $MINGWPREFIX/var/lib/packages/mingw-w64/version)
#MINGW64VER=$(sed -ne "s/^#define\s*__MINGW64_VERSION_MAJOR\s*\([0-9]*\)$/\1/p" $MINGWPREFIX/share/mingw-w64/include/_mingw_mac.h)$(sed -ne "s/^#define\s*__MINGW64_VERSION_MINOR\s*\([0-9]*\)$/.\1/p" $MINGWPREFIX/share/mingw-w64/include/_mingw_mac.h)$(sed -ne "s/^#define\s*__MINGW64_VERSION_BUGFIX\s*\([0-9]*\)$/.\1/p" $MINGWPREFIX/share/mingw-w64/include/_mingw_mac.h)
#MINGW64VER=$(echo -e "#include <stdio.h>\nint main() {\nprintf(\"%i.%i.%i\", __MINGW64_VERSION_MAJOR, __MINGW64_VERSION_MINOR, __MINGW64_VERSION_BUGFIX);\nreturn 0;\n}" | $MINGWPREFIX/share/gcc$GCC_SPECIFIC_VERSION/bin/gcc.exe -xc -mconsole -I$MINGWPREFIX/share/mingw-w64/include - -otest_ver.exe && test_ver.exe && rm -f test_ver.exe)
#MINGW64VER=$(echo -e "#include <stdio.h>\nint main() {\nprintf(\"%i.%i.%i\", __MINGW64_VERSION_MAJOR, __MINGW64_VERSION_MINOR, __MINGW64_VERSION_BUGFIX);\nreturn 0;\n}" | gcc -xc -mconsole -I$MINGWPREFIX/share/mingw-w64/include - -otest_ver.exe && test_ver.exe && rm -f test_ver.exe)
MINGW64VER=$(sed -ne "s/^#define __MINGW64_VERSION_MAJOR\s*//p" $MINGWPREFIX/share/mingw-w64/include/_mingw_mac.h).$(sed -ne "s/^#define __MINGW64_VERSION_MINOR\s*//p" $MINGWPREFIX/share/mingw-w64/include/_mingw_mac.h).$(sed -ne "s/^#define __MINGW64_VERSION_BUGFIX\s*//p" $MINGWPREFIX/share/mingw-w64/include/_mingw_mac.h)
ARCH=$(echo $RUNPLATFORM | sed -e "s/-.*$//")
BITS=$(if ( echo $RUNPLATFORM | grep -q "x86_64\|aarch64" ); then echo 64; else echo 32; fi)
ROOTFOLDER=mingw$(if ( echo $RUNPLATFORM | grep -q "aarch64" ); then echo "ARM64"; else echo "$BITS"; fi)
export BASENAME=winlibs-$ARCH$(if [ "0$WITH_GCC" -ne 0 ]; then echo -n "-$GCCTHREADS-$GCCEH"; fi)
export VERSION=$(if [ "0$WITH_GCC" -ne 0 ]; then echo -n "gcc-$GCCVER-"; fi)$(if [ "0$WITH_LLVM" -ne 0 ]; then echo -n "llvm-$CLANGVER-"; fi)mingw-w64$(if [ "0$USE_UCRT" -ne 0 ]; then echo -n "ucrt"; else echo -n "msvcrt"; fi)-$MINGW64VER-r$RELEASE
export INSTALLPREFIX=$PWD/inst_$BASENAME-$VERSION
rm -rf $INSTALLPREFIX &&
mkdir -p $INSTALLPREFIX/$ROOTFOLDER/bin $INSTALLPREFIX/$ROOTFOLDER/lib $INSTALLPREFIX/$ROOTFOLDER/include $INSTALLPREFIX/$ROOTFOLDER/$RUNPLATFORM &&
echo [Generate version information] &&
cat > $INSTALLPREFIX/$ROOTFOLDER/version_info << EOF &&
winlibs personal build version $VERSION

This is the winlibs $(if ( echo $RUNPLATFORM | grep -q "aarch64" ); then echo "ARM64"; else echo "Intel/AMD $BITS-bit"; fi) standalone build of:
EOF
if [ "0$WITH_GCC" -ne 0 ]; then
cat >> $INSTALLPREFIX/$ROOTFOLDER/version_info << EOF
- GCC $GCCVER
EOF
fi &&
if [ "0$WITH_GDB" -ne 0 ]; then
cat >> $INSTALLPREFIX/$ROOTFOLDER/version_info << EOF
- GDB $(PYTHONHOME=$MINGWPREFIX/share/python PATH=$MINGWPREFIX/share/python/bin:$PATH $MINGWPREFIX/share/gdb/bin/gdb.exe --version|head -n1|sed -e "s/^.*) \([0-9][0-9. ]*\)$/\1/")
EOF
fi &&
if [ "0$WITH_LLVM" -ne 0 ]; then
cat >> $INSTALLPREFIX/$ROOTFOLDER/version_info << EOF
- LLVM/Clang/LLD/LLDB $($MINGWPREFIX/share/llvm/bin/clang.exe --version|head -n1|sed -e "s/^.* \([0-9][0-9.]*\)\s*$/\1/")
EOF
fi &&
cat >> $INSTALLPREFIX/$ROOTFOLDER/version_info << EOF &&
- MinGW-w64 $MINGW64VER (linked with $(if [ "0$USE_UCRT" -ne 0 ]; then echo -n "ucrt"; else echo -n "msvcrt"; fi))
- GNU Binutils $($MINGWPREFIX/share/binutils/bin/dlltool.exe --version|head -n1|sed -e "s/^.*) \([0-9][0-9. ]*\)$/\1/")
- GNU Make $($MINGWPREFIX/share/make/bin/mingw32-make.exe --version|head -n1|sed -e "s/^.* \([0-9][0-9. ]*\)$/\1/")
- PExports $($MINGWPREFIX/bin/pexports.exe|head -n1|sed -e "s/^PExports //; s/ *;.*$//")
- dos2unix $($MINGWPREFIX/bin/dos2unix.exe --version|head -n1|sed -e "s/^dos2unix //; s/ (.*$//")
EOF
if [ "0$WITH_ASM" -ne 0 ]; then
cat >> $INSTALLPREFIX/$ROOTFOLDER/version_info << EOF
- Yasm $($MINGWPREFIX/bin/yasm.exe --version|head -n1|sed -e "s/^yasm //")
- NASM $($MINGWPREFIX/bin/nasm.exe --version|head -n1|sed -e "s/^NASM version //; s/ .*$//")
- JWasm $($MINGWPREFIX/bin/jwasm.exe --version|head -n1|sed -e "s/^JWasm v*//; s/,* .*$//")
EOF
fi &&
if [ "0$WITH_CCACHE" -ne 0 ]; then
cat >> $INSTALLPREFIX/$ROOTFOLDER/version_info << EOF
- ccache $($MINGWPREFIX/bin/ccache.exe --version|head -n1|sed -e "s/^ccache \(version \)*//")
EOF
fi &&
if [ "0$WITH_CMAKE" -ne 0 ]; then
cat >> $INSTALLPREFIX/$ROOTFOLDER/version_info << EOF
- CMake $($MINGWPREFIX/bin/cmake.exe --version|head -n1|sed -ne "s/^.* version //p")
EOF
fi &&
if [ "0$WITH_NINJA" -ne 0 ]; then
cat >> $INSTALLPREFIX/$ROOTFOLDER/version_info << EOF
- ninja $($MINGWPREFIX/bin/ninja.exe --version)
EOF
fi &&
if [ "0$WITH_DOXYGEN" -ne 0 ]; then
cat >> $INSTALLPREFIX/$ROOTFOLDER/version_info << EOF
- Doxygen $($MINGWPREFIX/bin/doxygen.exe --version|sed -e "s/ (GIT-NOTFOUND)//")
EOF
fi &&
if [ "0$WITH_EXTRA_TOOLS" -ne 0 ]; then
cat >> $INSTALLPREFIX/$ROOTFOLDER/version_info << EOF
- pedeps $($MINGWPREFIX/bin/copypedeps.exe -h|sed -ne "s/^[Vv]ersion: \([^ ]*\).*$/\1/p")
- Universal Ctags $($MINGWPREFIX/bin/ctags.exe --version|head -n1|sed -e "s/^.*[Cc]tags \([0-9][0-9.]*\).*$/\1/")
- Cppcheck $($MINGWPREFIX/bin/cppcheck.exe --version|head -n1|sed -e "s/^.* \([0-9][0-9.]*\)$/\1/")
- Premake $(premake5 --version|head -n1|sed -e "s/^.* //")
EOF
fi &&
cat >> $INSTALLPREFIX/$ROOTFOLDER/version_info << EOF &&

Thread model: $($MINGWPREFIX/share/gcc$GCC_SPECIFIC_VERSION/bin/gcc.exe -v 2>&1 |sed -ne "s/^Thread model: //p")$(if $MINGWPREFIX/share/gcc$GCC_SPECIFIC_VERSION/bin/gcc.exe -v 2>&1 | grep -q "^Thread model: mcf"; then sed -ne "s/^#define\s*_MCF_ABI_VERSION_STRING\s*\"\(.*\)\"\s*$/ (MCF Gthread \1)/p" $MINGWPREFIX/include/mcfgthread/version.h; fi)
Runtime library: $(if [ "0$USE_UCRT" -ne 0 ]; then echo -n "UCRT (Windows 10 or higher, or when [Update for Universal C Runtime](https://support.microsoft.com/en-us/topic/update-for-universal-c-runtime-in-windows-c0514201-7fe6-95a3-b0a5-287930f3560c) is installed on older Windows versions, not supported on systems older than Windows 7 SP1 and Windows Server 2008 R2 SP1)"; else echo -n "MSVCRT"; fi)

This build was compiled with $(if ${CC:-gcc} --version|grep -q clang; then echo "LLVM"; else echo "GCC"; fi) $(${CC:-gcc} --version|head -n1|sed -e "s/^clang version //"|sed -e "s/ ([a-z ]*)$//"|sed -e "s/^.*) \([0-9][0-9. ]*\)$/\1/"|sed -e "s/ /-snapshot/") and packaged on $(date +"%Y-%m-%d").

Please check out https://winlibs.com/ for the latest personal build.
EOF
$MINGWPREFIX/bin/unix2dos.exe < $INSTALLPREFIX/$ROOTFOLDER/version_info > $INSTALLPREFIX/$ROOTFOLDER/version_info.txt &&
rm -f $INSTALLPREFIX/$ROOTFOLDER/version_info &&
echo [Copying binutils] &&
cp -r -i $MINGWPREFIX/share/binutils/* $INSTALLPREFIX/$ROOTFOLDER/ &&
#cp -r -i $MINGWPREFIX/share/binutils/{include,lib,bin,share,$RUNPLATFORM} $INSTALLPREFIX/$ROOTFOLDER/ &&
#copypedeps -r -n $MINGWPREFIX/share/binutils/bin/*.{dll,exe} $INSTALLPREFIX/$ROOTFOLDER/bin/ &>/dev/null &&
#copypedeps -r -n $MINGWPREFIX/share/binutils/$RUNPLATFORM/bin/*.{dll,exe} $INSTALLPREFIX/$ROOTFOLDER/$RUNPLATFORM/bin/ &>/dev/null &&
# remove binutils libiberty (use libiberty from gcc)
rm -rf $INSTALLPREFIX/$ROOTFOLDER/include/libiberty &&
rm -f $INSTALLPREFIX/$ROOTFOLDER/lib/libiberty.a &&
# fix issue where libdep.dll.a is loaded instead of libdep.dll, see: https://sourceware.org/bugzilla/show_bug.cgi?id=27113
rm -f $INSTALLPREFIX/$ROOTFOLDER/lib/bfd-plugins/*.a &&
rm -f $INSTALLPREFIX/$ROOTFOLDER/share/info/dir &&
# TO DO: ldscripts in $ARCH/lib/ldscripts
echo [Copying make] &&
cp -r -i $MINGWPREFIX/share/make/* $INSTALLPREFIX/$ROOTFOLDER/ &&
#cp -i $MINGWPREFIX/share/make/bin/mingw32-make.exe $INSTALLPREFIX/$ROOTFOLDER/bin/make.exe &&
#copypedeps -r -n $MINGWPREFIX/share/make/bin/*.{dll,exe} $INSTALLPREFIX/$ROOTFOLDER/bin/ &&
rm -f $INSTALLPREFIX/$ROOTFOLDER/share/info/dir &&
echo [Copying pexports] &&
copypedeps -r -n $MINGWPREFIX/bin/pexports.exe $INSTALLPREFIX/$ROOTFOLDER/bin/ &>/dev/null &&
echo [Copying dos2unix/unix2dos] &&
copypedeps -r -n $MINGWPREFIX/bin/dos2unix.exe $MINGWPREFIX/bin/unix2dos.exe $MINGWPREFIX/bin/mac2unix.exe $MINGWPREFIX/bin/unix2mac.exe $INSTALLPREFIX/$ROOTFOLDER/bin/ &>/dev/null &&
if [ "0$WITH_GDB" -ne 0 ]; then
 echo [Copying gdb] &&
 #cp -r -i $MINGWPREFIX/share/gdb/* $INSTALLPREFIX/$ROOTFOLDER/ &&
 #cp -r -i $MINGWPREFIX/share/gdb/{bin,include} $INSTALLPREFIX/$ROOTFOLDER/ &&
 cp -r -i $MINGWPREFIX/share/gdb/bin $INSTALLPREFIX/$ROOTFOLDER/ &&
 #cp -r -i $MINGWPREFIX/share/gdb/{syscalls,system-gdbinit} $INSTALLPREFIX/$ROOTFOLDER/share/ &&
 mkdir -p $INSTALLPREFIX/$ROOTFOLDER/share/gdb &&
 cp -rf $MINGWPREFIX/share/gdb/share/gdb/* $INSTALLPREFIX/$ROOTFOLDER/share/gdb/
fi &&
echo [Copying mingw-w64] &&
cp -f $MINGWPREFIX/share/mingw-w64/bin/*.{dll,exe} $INSTALLPREFIX/$ROOTFOLDER/bin/ &&
cp -r -i $MINGWPREFIX/share/mingw-w64/{lib,include} $INSTALLPREFIX/$ROOTFOLDER/$RUNPLATFORM/ &&
( cp -rf $MINGWPREFIX/share/mingw-w64/*-w64-mingw32 $INSTALLPREFIX/$ROOTFOLDER/ || true ) &&
mv -i $INSTALLPREFIX/$ROOTFOLDER/$RUNPLATFORM/lib/libmangle.a $INSTALLPREFIX/$ROOTFOLDER/lib/ &&
mv -i $INSTALLPREFIX/$ROOTFOLDER/$RUNPLATFORM/include/libmangle.h $INSTALLPREFIX/$ROOTFOLDER/include/ &&
if [ "0$WITH_GCC" -ne 0 ]; then
 echo [Copying gcc] &&
 cp -rf $MINGWPREFIX/share/gcc$GCC_SPECIFIC_VERSION/* $INSTALLPREFIX/$ROOTFOLDER/ &&
 rm -f $INSTALLPREFIX/$ROOTFOLDER/share/info/dir &&
 # manually copy libdl library archives
 ####see also: https://github.com/brechtsanders/winlibs_mingw/issues/62
 #cp -u $MINGWPREFIX/lib/libdl.a $MINGWPREFIX/lib/libdl.dll.a $INSTALLPREFIX/$ROOTFOLDER/lib/ &&
 cp -u $MINGWPREFIX/lib/libdl.a $MINGWPREFIX/lib/libdl.dll.a $INSTALLPREFIX/$ROOTFOLDER/$RUNPLATFORM/lib/ &&
 #( cp -u $MINGWPREFIX/share/gcc$GCC_SPECIFIC_VERSION/lib/gcc/$RUNPLATFORM/lib/*.a $INSTALLPREFIX/$ROOTFOLDER/$RUNPLATFORM/lib/ || true ) &&
 ( cp -u $MINGWPREFIX/share/gcc$GCC_SPECIFIC_VERSION/lib/gcc/$RUNPLATFORM/lib/*.a $INSTALLPREFIX/$ROOTFOLDER/$RUNPLATFORM/lib/ &> /dev/null || (
  mkdir -p $INSTALLPREFIX/$ROOTFOLDER/$RUNPLATFORM/$(echo $GCCVER|sed -e "s/-.*$//")
  cp -u $MINGWPREFIX/share/gcc$GCC_SPECIFIC_VERSION/lib/gcc/$RUNPLATFORM/$(echo $GCCVER|sed -e "s/-.*$//")/*.a $INSTALLPREFIX/$ROOTFOLDER/$RUNPLATFORM/$(echo $GCCVER|sed -e "s/-.*$//")/ 
 ) || true ) &&
 # manually copy libmcfgthread library archives
 if [ "$($MINGWPREFIX/share/gcc$GCC_SPECIFIC_VERSION/bin/gcc.exe -v 2>&1|sed -ne "s/^Thread model: //p")" == "mcf" ]; then
  mkdir -p $INSTALLPREFIX/$ROOTFOLDER/$RUNPLATFORM/include/mcfgthread &&
  cp -rf $MINGWPREFIX/include/mcfgthread/* $INSTALLPREFIX/$ROOTFOLDER/$RUNPLATFORM/include/mcfgthread/ &&
  cp -f $MINGWPREFIX/lib/libmcfgthread.a $MINGWPREFIX/lib/libmcfgthread.dll.a $INSTALLPREFIX/$ROOTFOLDER/$RUNPLATFORM/lib/
 fi
fi &&
if [ "0$WITH_ASM" -ne 0 ]; then
 echo [Copying yasm] &&
 cp -i $MINGWPREFIX/bin/vsyasm.exe $MINGWPREFIX/bin/yasm.exe $MINGWPREFIX/bin/ytasm.exe $INSTALLPREFIX/$ROOTFOLDER/bin/ &&
 cp -ri $MINGWPREFIX/lib/libyasm*.a $INSTALLPREFIX/$ROOTFOLDER/lib/ &&
 cp -ri $MINGWPREFIX/include/libyasm* $INSTALLPREFIX/$ROOTFOLDER/include/ &&
 echo [Copying nasm] &&
 cp -i $MINGWPREFIX/bin/nasm.exe $MINGWPREFIX/bin/ndisasm.exe $INSTALLPREFIX/$ROOTFOLDER/bin/ &&
 echo [Copying jwasm] &&
 cp -i $MINGWPREFIX/bin/jwasm.exe $INSTALLPREFIX/$ROOTFOLDER/bin/
fi &&
if [ "0$WITH_CCACHE" -ne 0 ]; then
 echo [Copying ccache] &&
 cp -i $MINGWPREFIX/bin/ccache.exe $INSTALLPREFIX/$ROOTFOLDER/bin/
fi &&
if [ "0$WITH_CMAKE" -ne 0 ]; then
 echo [Copying cmake] &&
 cp -i $MINGWPREFIX/bin/{cmake,cmcldeps,cpack,ctest}.exe $INSTALLPREFIX/$ROOTFOLDER/bin/ &&
 mkdir -p $INSTALLPREFIX/$ROOTFOLDER/share &&
 cp -rf $MINGWPREFIX/share/cmake-$($MINGWPREFIX/bin/cmake.exe --version|head -n1|sed -ne "s/^.* version \([0-9]*\.[0-9]*\).*$/\1/p") $INSTALLPREFIX/$ROOTFOLDER/share/
fi &&
if [ "0$WITH_LLVM" -ne 0 ]; then
 echo [Copying llvm] &&
 cp -ri $MINGWPREFIX/share/llvm/{bin,libexec,share} $INSTALLPREFIX/$ROOTFOLDER/ &&
 mkdir -p $INSTALLPREFIX/$ROOTFOLDER/lib &&
 cp -ri $(find $MINGWPREFIX/share/llvm/lib/* -prune -type d) $INSTALLPREFIX/$ROOTFOLDER/lib/ &&
 cp -i $MINGWPREFIX/share/llvm/lib/*.dll.a $INSTALLPREFIX/$ROOTFOLDER/lib/
fi &&
if [ "0$WITH_GCC_OFFLOAD" -ne 0 ]; then
 echo [Copying nvptx-tools] &&
 cp -ri $MINGWPREFIX/share/nvptx-gcc/{bin,include,nvptx-none} $INSTALLPREFIX/$ROOTFOLDER/ &&
 cp -rn $MINGWPREFIX/share/nvptx-gcc/{lib,libexec} $INSTALLPREFIX/$ROOTFOLDER/
fi &&
if [ "0$WITH_GCC_TARGET_AVR" -ne 0 ]; then
 echo [Copying files for target AVR] &&
 cp -ri $MINGWPREFIX/share/avr-binutils/{bin,$RUNPLATFORM} $INSTALLPREFIX/$ROOTFOLDER/ &&
 cp -ri $MINGWPREFIX/share/avr-gcc/{bin,include} $INSTALLPREFIX/$ROOTFOLDER/ &&
 cp -rn $MINGWPREFIX/share/avr-gcc/{lib,libexec} $INSTALLPREFIX/$ROOTFOLDER/
fi &&
echo [Copying iconv] &&
cp -i $MINGWPREFIX/bin/iconv.exe $INSTALLPREFIX/$ROOTFOLDER/bin/ &&
echo [Copying dependancies] &&
#PATH=$MINGWPREFIX/share/python/bin:$PATH copypedeps -r -n $INSTALLPREFIX/$ROOTFOLDER/bin/*.dll $INSTALLPREFIX/$ROOTFOLDER/bin/ &>/dev/null &&
#PATH=$MINGWPREFIX/share/python/bin:$PATH copypedeps -r -n $INSTALLPREFIX/$ROOTFOLDER/bin/*.exe $INSTALLPREFIX/$ROOTFOLDER/bin/ &>/dev/null &&
PATH=$MINGWPREFIX/share/python/bin:$PATH copypedeps -r -n $INSTALLPREFIX/$ROOTFOLDER/bin/ $INSTALLPREFIX/$ROOTFOLDER/bin/ &>/dev/null &&
if [ "0$WITH_GCC" -ne 0 ]; then
 #copypedeps -r -n $INSTALLPREFIX/$ROOTFOLDER/libexec/gcc/$RUNPLATFORM/$(echo $GCCVER|sed -e "s/-.*$//")/*.{dll,exe} $INSTALLPREFIX/$ROOTFOLDER/libexec/gcc/$RUNPLATFORM/$(echo $GCCVER|sed -e "s/-.*$//")/ &>/dev/null
 PATH=$MINGWPREFIX/share/gcc/bin:$MINGWPREFIX/share/binutils/bin:$PATH copypedeps -r -n $INSTALLPREFIX/$ROOTFOLDER/libexec/gcc/$RUNPLATFORM/$(echo $GCCVER|sed -e "s/-.*$//")/*.{dll,exe} $INSTALLPREFIX/$ROOTFOLDER/libexec/gcc/$RUNPLATFORM/$(echo $GCCVER|sed -e "s/-.*$//")/ &>/dev/null
fi &&
#copypedeps -r -n $INSTALLPREFIX/$ROOTFOLDER/$RUNPLATFORM/bin/*.{dll,exe} $INSTALLPREFIX/$ROOTFOLDER/$RUNPLATFORM/bin/ &>/dev/null &&
PATH=$MINGWPREFIX/share/binutils/bin:$PATH copypedeps -r -n $INSTALLPREFIX/$ROOTFOLDER/$RUNPLATFORM/bin/*.{dll,exe} $INSTALLPREFIX/$ROOTFOLDER/$RUNPLATFORM/bin/ &>/dev/null &&
if ls -1 $INSTALLPREFIX/$ROOTFOLDER/bin/libpython*.dll &>/dev/null; then
 echo [Copying Python components] &&
 #copypedeps -r -n $MINGWPREFIX/share/python/bin/*.{dll,exe} $INSTALLPREFIX/$ROOTFOLDER/bin/ &&
 cp -rf $MINGWPREFIX/share/python/include/* $INSTALLPREFIX/$ROOTFOLDER/include/ &&
 cp -rf $MINGWPREFIX/share/python/lib/* $INSTALLPREFIX/$ROOTFOLDER/lib/ &&
 cp -rf $MINGWPREFIX/share/python/share/* $INSTALLPREFIX/$ROOTFOLDER/share/ &&
 find $INSTALLPREFIX -name __pycache__ -exec echo rm -rf {} \; | sh
fi &&
if [ "0$WITH_NINJA" -ne 0 ]; then
 echo [Copying Ninja] &&
 copypedeps -r -n $MINGWPREFIX/bin/ninja.exe $INSTALLPREFIX/$ROOTFOLDER/bin/ &>/dev/null
fi &&
if [ "0$WITH_DOXYGEN" -ne 0 ]; then
 echo [Copying Doxygen] &&
 copypedeps -r -n $MINGWPREFIX/bin/doxygen.exe $INSTALLPREFIX/$ROOTFOLDER/bin/ &>/dev/null
fi &&
if [ "0$WITH_EXTRA_TOOLS" -ne 0 ]; then
 echo [Copying pedeps] &&
 copypedeps -r -n $MINGWPREFIX/bin/{ctags,optscript,readtags}.exe $INSTALLPREFIX/$ROOTFOLDER/bin/ &>/dev/null &&
 #echo [Copying Ctags] &&
 #copypedeps -r -n $MINGWPREFIX/ctags.exe $INSTALLPREFIX/$ROOTFOLDER/bin/ &>/dev/null &&
 echo [Copying Universal Ctags] &&
 copypedeps -r -n $MINGWPREFIX/bin/{copypedeps,listpedeps}.exe $INSTALLPREFIX/$ROOTFOLDER/bin/ &>/dev/null &&
 echo [Copying Cppcheck] &&
 copypedeps -r -n $MINGWPREFIX/bin/cppcheck.exe $INSTALLPREFIX/$ROOTFOLDER/bin/ &>/dev/null &&
 mkdir -p $INSTALLPREFIX/$ROOTFOLDER/share/Cppcheck &&
 cp -rf $MINGWPREFIX/share/Cppcheck/* $INSTALLPREFIX/$ROOTFOLDER/share/Cppcheck/ &&
 echo [Copying Premake] &&
 copypedeps -r -n $MINGWPREFIX/bin/premake5.exe $INSTALLPREFIX/$ROOTFOLDER/bin/ &>/dev/null
fi &&
echo [Creating archives] &&
pushd $INSTALLPREFIX &> /dev/null &&
rm -f $PACKAGEDESTDIR/$BASENAME-$VERSION.7z &&
"$SEVENZIP" a -r -mx9 -t7z $PACKAGEDESTDIR/$BASENAME-$VERSION.7z $ROOTFOLDER &&
if [ "0$MAKE_CHECKSUMS" -ne 0 ]; then
 sha256sum $PACKAGEDESTDIR/$BASENAME-$VERSION.7z | sed -e 's?^\\??; s? .*[/\\]? ?' > $PACKAGEDESTDIR/$BASENAME-$VERSION.7z.sha256 &&
 sha512sum $PACKAGEDESTDIR/$BASENAME-$VERSION.7z | sed -e 's?^\\??; s? .*[/\\]? ?' > $PACKAGEDESTDIR/$BASENAME-$VERSION.7z.sha512
fi &&
if [ "0$MAKE_ZIP" -ne 0 ]; then
 rm -f $PACKAGEDESTDIR/$BASENAME-$VERSION.zip &&
 "$SEVENZIP" a -r -mx9 -tzip $PACKAGEDESTDIR/$BASENAME-$VERSION.zip $ROOTFOLDER &&
 if [ "0$MAKE_CHECKSUMS" -ne 0 ]; then
  sha256sum $PACKAGEDESTDIR/$BASENAME-$VERSION.zip | sed -e 's?^\\??; s? .*[/\\]? ?' > $PACKAGEDESTDIR/$BASENAME-$VERSION.zip.sha256 &&
  sha512sum $PACKAGEDESTDIR/$BASENAME-$VERSION.zip | sed -e 's?^\\??; s? .*[/\\]? ?' > $PACKAGEDESTDIR/$BASENAME-$VERSION.zip.sha512
 fi
fi &&
popd &> /dev/null &&
echo [Archives created] &&
echo "Release tag:   $(if [ "0$WITH_GCC" -ne 0 ]; then echo -n "$GCCVER$GCCTHREADS-"; fi)$(if [ "0$WITH_LLVM" -ne 0 ]; then echo -n "$CLANGVER-"; fi)$MINGW64VER-$(if [ "0$USE_UCRT" -ne 0 ]; then echo -n "ucrt"; else echo -n "msvcrt"; fi)-r$RELEASE" &&
echo "Release title: $(if [ "0$WITH_GCC" -ne 0 ]; then echo -n "GCC $GCCVER ($($MINGWPREFIX/share/gcc$GCC_SPECIFIC_VERSION/bin/gcc.exe -v 2>&1 | sed -ne "s/^Thread model: //p" | tr '[:lower:]' '[:upper:]')$(if $MINGWPREFIX/share/gcc$GCC_SPECIFIC_VERSION/bin/gcc.exe -v 2>&1 | grep -q "^Thread model: mcf"; then sed -ne "s/^#define\s*_MCF_ABI_VERSION_STRING\s*\"\(.*\)\"\s*$/ (MCF Gthread \1)/p" $MINGWPREFIX/include/mcfgthread/version.h; fi) threads) + "; fi)$(if [ "0$WITH_LLVM" -ne 0 ]; then echo -n "LLVM $CLANGVER + "; fi)MinGW-w64 $MINGW64VER $(if [ "0$USE_UCRT" -ne 0 ]; then echo -n "UCRT"; else echo -n "MSVCRT"; fi) (release $RELEASE)" &&
echo [$ROOTFOLDER/version_info.txt] &&
cat $INSTALLPREFIX/$ROOTFOLDER/version_info.txt &&
cat << EOF &&

Available downloads:
- Files with extension \`.7z\` and \`.zip\` have the same contents.
  The \`.7z\` files are smaller but require [7-Zip](https://7-zip.org/) or [PeaZip](https://peazip.github.io/) to extract.
  The \`.zip\` files are larger but Windows can extract this file without additional tools.
- The \`i686\` download is the Windows Intel/AMD 32-bit version, which runs natively on and compiles for Windows 32-bit (also runs on Windows 64-bit in 32-bit mode).
  The \`x86_64\` download is the Windows Intel/AMD 64-bit version, which runs natively on and compiles for Windows 64-bit.
- The \`.sha256\` and  \`.sha512\` files are checksum files for validating the download.
EOF
if echo $GCCVER|grep -q snapshot; then
cat << EOF

_WARNING_: this is a snapshot version of $(echo $GCCVER | sed -e "s/-snapshot.*$//") (experimental), not recommended for production use.
EOF
fi &&
rm -rf $INSTALLPREFIX &&
echo [Done]















####https://gcc.gnu.org/bugzilla/show_bug.cgi?id=91595
sed -i.bak -e "s/^\(\s*\)cxx_target_objs=\"\${cxx_target_objs} winnt-cxx\.o msformat-c\.o\"/&\n\1d_target_objs=\"\${d_target_objs} winnt-d.o\"\n\1target_has_targetdm=\"yes\"/; s/^\(\s*\)cxx_target_objs=\"\${cxx_target_objs} winnt-c\.o\"/&\n\1d_target_objs=\"\${d_target_objs} winnt-d.o\"\n\1target_has_targetdm=\"yes\"/" gcc/config.gcc
patch -ulbf gcc/config/i386/cygwin.h << EOF
@@ -29,6 +29,14 @@ along with GCC; see the file COPYING3.  If not see
     }                            \\
   while (0)
 
+#define EXTRA_TARGET_D_OS_VERSIONS()              \\
+  do                            \\
+    {                            \\
+      builtin_version ("Cygwin");              \\
+      builtin_version ("Posix");              \\
+    }                            \\
+  while (0)
+
 #undef CPP_SPEC
 #define CPP_SPEC "%(cpp_cpu) %{posix:-D_POSIX_SOURCE} \\
   %{!ansi:-Dunix} \\
EOF
patch -ulbf gcc/config/i386/mingw32.h << EOF
@@ -53,6 +53,17 @@ along with GCC; see the file COPYING3.  If not see
     }                            \\
   while (0)
 
+#define EXTRA_TARGET_D_OS_VERSIONS()              \\
+  do                            \\
+    {                           \\
+      builtin_version ("MinGW");               \\
+      if (TARGET_64BIT && ix86_abi == MS_ABI)  \\
+        builtin_version ("Win64");             \\
+      else if (!TARGET_64BIT)                  \\
+        builtin_version ("Win32");             \\
+    }                            \\
+  while (0)
+
 #ifndef TARGET_USE_PTHREAD_BY_DEFAULT
 #define SPEC_PTHREAD1 "pthread"
 #define SPEC_PTHREAD2 "!no-pthread"
EOF
patch -ulbf gcc/config/i386/t-cygming << EOF
@@ -32,6 +32,9 @@ winnt-cxx.o: \$(srcdir)/config/i386/winnt-cxx.c \$(CONFIG_H) \$(SYSTEM_H) coretypes
        \$(COMPILER) -c \$(ALL_COMPILERFLAGS) \$(ALL_CPPFLAGS) \$(INCLUDES) \\
        \$(srcdir)/config/i386/winnt-cxx.c
 
+winnt-d.o: config/i386/winnt-d.c
+$(echo -e "\t")\$(COMPILE) \$<
+$(echo -e "\t")\$(POSTCOMPILE)
 
 winnt-stubs.o: \$(srcdir)/config/i386/winnt-stubs.c \$(CONFIG_H) \$(SYSTEM_H) coretypes.h \\
   \$(TM_H) \$(RTL_H) \$(REGS_H) hard-reg-set.h output.h \$(TREE_H) flags.h \\
EOF
cat > gcc/config/i386/winnt-d.c << EOF
/* Windows support needed only by D front-end.
   Copyright (C) 2020 Free Software Foundation, Inc.

GCC is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation; either version 3, or (at your option) any later
version.

GCC is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with GCC; see the file COPYING3.  If not see
<http://www.gnu.org/licenses/>.  */

#include "config.h"
#include "system.h"
#include "coretypes.h"
#include "target.h"
#include "d/d-target.h"
#include "d/d-target-def.h"
#include "tm_p.h"

/* Implement TARGET_D_OS_VERSIONS for Windows targets.  */

static void
winnt_d_os_builtins (void)
{
  d_add_builtin_version ("Windows");

#define builtin_version(TXT) d_add_builtin_version (TXT)

#ifdef EXTRA_TARGET_D_OS_VERSIONS
  EXTRA_TARGET_D_OS_VERSIONS ();
#endif
}

/* Implement TARGET_D_CRITSEC_SIZE for Windows targets.  */

static unsigned
winnt_d_critsec_size (void)
{
  /* This is the sizeof CRITICAL_SECTION.  */
  if (TYPE_PRECISION (long_integer_type_node) == 64
      && POINTER_SIZE == 64
      && TYPE_PRECISION (integer_type_node) == 32)
    return 40;
  else
    return 24;
}

#undef TARGET_D_OS_VERSIONS
#define TARGET_D_OS_VERSIONS winnt_d_os_builtins

#undef TARGET_D_CRITSEC_SIZE
#define TARGET_D_CRITSEC_SIZE winnt_d_critsec_size

struct gcc_targetdm targetdm = TARGETDM_INITIALIZER;
EOF
mkdir -p build_mingw/gcc/config && cp -u gcc/config/i386/winnt-d.c build_mingw/gcc/config/






## fix gcc/ggc-common.cc (version >= 12-20221224)
#patch -ulbf gcc/ggc-common.cc << EOF
#@@ -1 +1,4 @@
#+#if HAVE_MMAP_FILE
#+#include <sys/mman.h>
#+#endif
# /* Simple garbage collection for the GNU compiler.
#EOF
## fix gcc/gcc.cc (version >= 12-20221224)
#patch -ulbf gcc/gcc.cc << EOF
#@@ -1 +1,4 @@
#+#if HAVE_MMAP_FILE
#+#include <sys/mman.h>
#+#endif
# /* Compiler driver program that can handle many languages.
#EOF
#
## put LDFLAGS at the end of the linker arguments to make sure -lmman works
#sed -i.bak -e "s/\(\s\$(LDFLAGS)\)\([^\\\\\"]*\)$/\2\1/" $(grep -l "\$(LDFLAGS)" $(find -name Makefile.in))
#  
# #PATH=$MINGWPREFIX/share/binutils/bin:$PATH ../configure --prefix=$INSTALLPREFIX/share/gcc --build=$BUILDPLATFORM --host=$RUNPLATFORM $(if echo $VERSION|grep -q "^1[0-9]\."; then echo "--enable-offload-targets=nvptx-none"; fi) --with-pkgversion="MinGW-W64 $(echo $RUNPLATFORM | sed -e "s/-.*$//")$(if [ "0$USE_UCRT" -ne 0 ]; then echo -n "-ucrt"; else echo -n "-msvcrt"; fi)-posix-$(if [ "0$USE_SJLJ" -ne 0 ]; then echo "sjlj"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "dwarf"; else echo "seh"; fi; fi), built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi))" --with-tune=generic --enable-checking=release --enable-threads=posix $(if [ "0$USE_SJLJ" -ne 0 ]; then if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--without-dwarf2 "; fi; echo "--enable-sjlj-exceptions"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--with-dwarf2 "; fi; echo "--disable-sjlj-exceptions"; fi) --disable-libunwind-exceptions --disable-serial-configure --disable-bootstrap --enable-host-shared $(if echo $VERSION|grep -q "^[1-7]\."; then echo "--disable-plugin"; else echo "--enable-plugin"; fi) --disable-default-ssp --disable-rpath --disable-libstdcxx-debug --disable-version-specific-runtime-libs --with-stabs --disable-symvers --enable-languages=c,c++,fortran,lto,objc,obj-c++$(if echo $VERSION|grep -q "^1[1-9][.\-]"; then echo ",jit"; fi) --disable-{gold,nls,stage1-checking,win32-registry,multilib} --enable-{ld,libquadmath,libada,libssp,libstdcxx,lto,fully-dynamic-string,libgomp,graphite,mingw-wildcard,libstdcxx-time} --disable-libstdcxx-pch --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX $(if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--enable-large-address-aware"; fi) $(if echo $VERSION|grep -q "^1[2-9][.\-]"; then echo "--enable-libstdcxx-backtrace"; fi) --enable-install-libiberty --enable-__cxa_atexit --without-included-gettext --with-diagnostics-color=auto --enable-clocale=generic --with-libiconv --with-system-zlib --with-build-sysroot=$(pwd)/mingw-w64 CFLAGS="-I$MINGWPREFIX/include/libdl-win32 -D__USE_MINGW_ACCESS -I$MINGWPREFIX/include/mman-win32" CXXFLAGS="-D__USE_MINGW_ACCESS -I$MINGWPREFIX/include/mman-win32" LDFLAGS="-Wl,--as-needed -lmman $(if echo "int main() { return 0; }" | gcc -xc - -o test_arg.exe -Wl,--dynamicbase &> /dev/null; then echo "-Wl,--dynamicbase"; fi) $(if echo "int main() { return 0; }" | gcc -xc - -o test_arg.exe -Wl,--high-entropy-va &> /dev/null; then echo "-Wl,--high-entropy-va"; fi) $(if echo "int main() { return 0; }" | gcc -xc - -o test_arg.exe -Wl,--nxcompat &> /dev/null; then echo "-Wl,--nxcompat"; fi) $(if echo "int main() { return 0; }" | gcc -xc - -o test_arg.exe -Wl,--tsaware &> /dev/null; then echo "-Wl,--tsaware"; fi)" TARGET_CFLAGS="-I$MINGWPREFIX/include/mman-win32" TARGET_CXXFLAGS="-I$MINGWPREFIX/include/mman-win32" TARGET_LDFLAGS="-Wl,--as-needed -lmman" &&
# PATH=$MINGWPREFIX/share/binutils/bin:$PATH ../configure --prefix=$INSTALLPREFIX/share/gcc --build=$BUILDPLATFORM --host=$RUNPLATFORM $(if echo $VERSION|grep -q "^1[0-9]\."; then echo "--enable-offload-targets=nvptx-none"; fi) --with-pkgversion="MinGW-W64 $(echo $RUNPLATFORM | sed -e "s/-.*$//")$(if [ "0$USE_UCRT" -ne 0 ]; then echo -n "-ucrt"; else echo -n "-msvcrt"; fi)-posix-$(if [ "0$USE_SJLJ" -ne 0 ]; then echo "sjlj"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "dwarf"; else echo "seh"; fi; fi), built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi))" --with-tune=generic --enable-checking=release --enable-threads=posix $(if [ "0$USE_SJLJ" -ne 0 ]; then if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--without-dwarf2 "; fi; echo "--enable-sjlj-exceptions"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--with-dwarf2 "; fi; echo "--disable-sjlj-exceptions"; fi) --disable-libunwind-exceptions --disable-serial-configure --disable-bootstrap --enable-host-shared $(if echo $VERSION|grep -q "^[1-7]\."; then echo "--disable-plugin"; else echo "--enable-plugin"; fi) --disable-default-ssp --disable-rpath --disable-libstdcxx-debug --disable-version-specific-runtime-libs --with-stabs --disable-symvers --enable-languages=c,c++,fortran,lto,objc,obj-c++$(if echo $VERSION|grep -q "^1[1-9][.\-]"; then echo ",jit"; fi) --disable-{gold,nls,stage1-checking,win32-registry,multilib} --enable-{ld,libquadmath,libada,libssp,libstdcxx,lto,fully-dynamic-string,libgomp,graphite,mingw-wildcard,libstdcxx-time,libstdcxx-pch} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX $(if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--enable-large-address-aware"; fi) $(if echo $VERSION|grep -q "^1[2-9][.\-]"; then echo "--enable-libstdcxx-backtrace"; fi) --enable-install-libiberty --enable-__cxa_atexit --without-included-gettext --with-diagnostics-color=auto --enable-clocale=generic --with-libiconv --with-system-zlib --with-build-sysroot=$(pwd)/mingw-w64 CFLAGS="-I$MINGWPREFIX/include/libdl-win32 -D__USE_MINGW_ACCESS -DHAVE_MMAP_FILE -I$MINGWPREFIX/include/mman-win32" CXXFLAGS="-D__USE_MINGW_ACCESS -DHAVE_MMAP_FILE -I$MINGWPREFIX/include/mman-win32" LDFLAGS="-Wl,--as-needed -lmman $(if echo "int main() { return 0; }" | gcc -xc - -o test_arg.exe -Wl,--dynamicbase &> /dev/null; then echo "-Wl,--dynamicbase"; fi) $(if echo "int main() { return 0; }" | gcc -xc - -o test_arg.exe -Wl,--high-entropy-va &> /dev/null; then echo "-Wl,--high-entropy-va"; fi) $(if echo "int main() { return 0; }" | gcc -xc - -o test_arg.exe -Wl,--nxcompat &> /dev/null; then echo "-Wl,--nxcompat"; fi) $(if echo "int main() { return 0; }" | gcc -xc - -o test_arg.exe -Wl,--tsaware &> /dev/null; then echo "-Wl,--tsaware"; fi)" TARGET_CFLAGS="-DHAVE_MMAP_FILE -I$MINGWPREFIX/include/mman-win32" TARGET_CXXFLAGS="-DHAVE_MMAP_FILE -I$MINGWPREFIX/include/mman-win32" TARGET_LDFLAGS="-Wl,--as-needed -lmman" &&








#/usr/build2/gcc/gcc-4.6.0/configure --prefix=/usr --libdir=/usr/lib64\
#    --with-cpu-32=i686 --with-cpu-64=k8 --enable-languages=all \
#    --enable-targets=all --enable-multilib --enable-threads=posix --enable-tls\
#    --enable-lto --enable-shared --enable-checking=release \
#    --with-build-time-tools=/usr/bin --with-ld=/usr/bin/ld --with-gnu-ld \
#    --with-as=/usr/bin/as --with-gnu-as --enable-__cxa_atexit \
#    --disable-libunwind-exceptions --with-gxx-include-dir=/usr/include/c++\
#    --enable-version-specific-runtime-libs --with-system-zlib --disable-werror\
#    --enable-classpath --with-x --enable-gtk-cairo --enable-java-awt=gtk,xlib\
#    --withjava-home=/usr/java --with-jvm-root-dir=/usr/java/jvm \
#    --with-jvm-jar-dir=/usr/java/jvm_exports --enable-browser-plugin\ 
#    --host=x86_64-pc-linux-gnu --build=x86_64-pc-linux-gnu \
#    --without-included-gettext --enable-serial-configure



mkdir -p build_mingw_libitm &&
cd build_mingw_libitm &&
../libitm/configure --prefix=$INSTALLPREFIX/share/gcc --build=$BUILDPLATFORM --host=$RUNPLATFORM &&
cd .. &&
make -Cbuild_mingw_libitm install-strip &&
echo OK



wl-download -v -d $TARBALLDIR/$BASENAME https://community.download.adacore.com/v1/797dbae8bdb8a3f661dad78dd73d8e40218a68d8?filename=gnat-2021-20210519-x86_64-windows64-bin.exe
wl-download -v -d $TARBALLDIR/$BASENAME https://community.download.adacore.com/v1/3af961d8c675e36d87934450bc6356a84a0d753b?filename=gnat-2021-20210519-arm-elf-windows64-bin.exe
mkdir -p prebuilt/gnat
'C:\Program Files\7-Zip\7z.exe' x $TARBALLDIR/$BASENAME/*gnat-2021-20210519-x86_64-windows64-bin.exe -oprebuilt/gnat




#--enable-offload-targets=nvptx-none,hsa
#--enable-offload-targets=x86_64-intelmicemul-linux-gnu=/install/prefix,nvptx-none=/install/usr/local/nvptx-none --with-cuda-driver=[cuda_install_path]



echo -e "#include <iostream>\n#if defined(__USING_SJLJ_EXCEPTIONS__)\n#define EH \"sjlj\"\n#elif defined(__SEH__)\n#define EH \"seh\"\n#elif defined(__GCC_HAVE_DWARF2_CFI_ASM)\n#define EH \"dwarf\"\n#else\n#define EH \"unknown\"\n#endif\nint main() {\nstd::cout << EH;\nreturn 0;\n}" | g++ -xc++ -mconsole - -otest_sjlj.exe && test_sjlj.exe && rm -f test_sjlj.exe


# run checks
#  check SJLJ
echo -e "#include <iostream>\n#ifdef __USING_SJLJ_EXCEPTIONS__\n#define ANSWER \"yes\"\n#else\n#define ANSWER \"no\"\n#endif\nint main() {\nstd::cout << \"SJLJ: \" << ANSWER << std::endl;\nreturn 0;\n}" | g++ -xc++ -mconsole - -otest_sjlj.exe && test_sjlj.exe && rm -f test_sjlj.exe
#  check SEH
echo -e "#include <iostream>\n#ifdef __SEH__\n#define ANSWER \"yes\"\n#else\n#define ANSWER \"no\"\n#endif\nint main() {\nstd::cout << \"SEH: \" << ANSWER << std::endl;\nreturn 0;\n}" | g++ -xc++ -mconsole - -otest_seh.exe && test_seh.exe && rm -f test_seh.exe
#  check Dwarf2
echo -e "#include <iostream>\n#ifdef __GCC_HAVE_DWARF2_CFI_ASM\n#define ANSWER \"yes\"\n#else\n#define ANSWER \"no\"\n#endif\nint main() {\nstd::cout << \"Dwarf2: \" << ANSWER << std::endl;\nreturn 0;\n}" | g++ -xc++ -mconsole - -otest_dwarf.exe && test_dwarf.exe && rm -f test_dwarf.exe

g++ -v 2>&1 | grep -i "\(--with-dwarf2\|--enable-sjlj-exceptions\)" --color

# DWARF is only for 32-bits.	And you don't have to specify --without-dwarf2 when building for 64-bits.
# SJLJ is for both 32-bits and 64-bits.
# SEH is only for 64-bits.








####Note: ARM Windows target = aarch64-pc-msys
####Note: ARM Raspberry PI = arm-none-eabi ??? ARM4:arm-linux-gnueabi ARM7:arm-linux-gnueabihf ARM8:aarch64-linux-gnu (arm-elf ???)
####Note: macOS target = x86_64-apple-darwin
####macOS, see also: https://github.com/tpoechtrager/osxcross



# Windows for ARM: ARM64 = aarch64-w64-mingw32, ARM32 = armv7-w64-mingw32

# test C
echo -e "#include <stdio.h>\n#if defined(__clang__)\n#define COMPILERNAME \"clang\"\n#elif defined(__GNUC__)\n#define COMPILERNAME \"gcc\"\n#else\n#define COMPILERNAME \"unknown compiler\"\n#endif\nint main() {\nprintf(\"C compiled with %s: OK\\\\n\", COMPILERNAME);\nreturn 0;\n}\n" | gcc -xc - -o test.exe && ./test.exe && rm test.exe
echo -e "#include <stdio.h>\n#if defined(__clang__)\n#define COMPILERNAME \"clang\"\n#elif defined(__GNUC__)\n#define COMPILERNAME \"gcc\"\n#else\n#define COMPILERNAME \"unknown compiler\"\n#endif\nint main() {\nprintf(\"C compiled with %s: OK\\\\n\", COMPILERNAME);\nreturn 0;\n}\n" | clang -xc - -o test.exe && ./test.exe && rm test.exe
# test C++
echo -e "#include <iostream>\n#if defined(__clang__)\n#define COMPILERNAME \"clang++\"\n#elif defined(__GNUC__)\n#define COMPILERNAME \"g++\"\n#else\n#define COMPILERNAME \"unknown compiler\"\n#endif\nint main() {\nstd::cout << \"C++ compiled with \" << COMPILERNAME << \": OK\" << std::endl;\nreturn 0;\n}\n" | g++ -xc++ - -o test.exe && ./test.exe && rm test.exe
echo -e "#include <iostream>\n#if defined(__clang__)\n#define COMPILERNAME \"clang++\"\n#elif defined(__GNUC__)\n#define COMPILERNAME \"g++\"\n#else\n#define COMPILERNAME \"unknown compiler\"\n#endif\nint main() {\nstd::cout << \"C++ compiled with \" << COMPILERNAME << \": OK\" << std::endl;\nreturn 0;\n}\n" | clang++ -xc++ - -o test.exe && ./test.exe && rm test.exe
# test D
echo -e "module conftest;\nint main()\n{ return 0; }\n" | gdc -xd - -o test.exe



# ISSUES
# https://gcc.gnu.org/bugzilla/show_bug.cgi?id=98729 -> https://gcc.gnu.org/bugzilla/show_bug.cgi?id=98860
# https://gcc.gnu.org/bugzilla/show_bug.cgi?id=98860 (GCC11 prerelease bootstrap failure)
# https://gcc.gnu.org/bugzilla/show_bug.cgi?id=97618 / https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99401 (undefined references to LC0/LC1/LC2/LC3) -> resolved in version 11.1.0
# https://gcc.gnu.org/bugzilla/show_bug.cgi?id=99913 (GCC11 windows 32-bit build issues)
# https://gcc.gnu.org/bugzilla/show_bug.cgi?id=104654 (undefined PTHREAD_ONCE_INIT/pthread_key_t/pthread_once_t in libphobos/libdruntime/gcc/gthread.d when building D language)
# https://gcc.gnu.org/bugzilla/show_bug.cgi?id=100160 (-fopenmp -foffload=nvptx-none looks for libgomp-plugin-nvptx.so.1 instead of libgomp-plugin-nvptx-1.dll)
# https://gcc.gnu.org/bugzilla/show_bug.cgi?id=104659 (undefined msvcUsedUCRT in libphobos/libdruntime/config/mingw/msvc.c)
# https://gcc.gnu.org/bugzilla/show_bug.cgi?id=105302 (GCC12 building gccgo)
# https://gcc.gnu.org/bugzilla/show_bug.cgi?id=105506 (GCC12 first release (UCRT): fatal error: cannot execute 'cc1': CreateProcess: No such file or directory)
# https://gcc.gnu.org/bugzilla/show_bug.cgi?id=105858 (GCC12 first release (64-bit): build_mingw/x86_64-w64-mingw32/libstdc++-v3/include/ext/enc_filebuf.h:63:1: fatal error: cannot write PCH file: required memory segment unavailable)
# https://gcc.gnu.org/bugzilla/show_bug.cgi?id=108678 (Windows on ARM64 (target aarch64-w64-mingw32) support)
# https://gcc.gnu.org/bugzilla/show_bug.cgi?id=118238 (GCC15 LTO broken due to missing mkstemps and link)
# https://gcc.gnu.org/bugzilla/show_bug.cgi?id=118244 (GCC15 libstdc++-v3 build errors) -> remove compiler flag -D__USE_MINGW_ANSI_STDIO=0
# -fstack-protector need -lssp_nonshared -lssp -> https://sourceware.org/legacy-ml/gdb-patches/2019-12/msg00795.html
# --enable-offload-targets doesn't work when using ucrt


#--enable-offload-targets=nvptx-none
#--with-native-system-header-dir=$MINGWPREFIX/share/mingw-w64/include

#for -m32 support on Win64: --with-arch-32=i686

# Roadmap / development plan: https://gcc.gnu.org/develop.html


# mingw-w64-ucrt-x86_64 -> x86_64-w64-mingw32ucrt

# enable DEP and ASLR
#LDFLAGS="-Wl,--nxcompat -Wl,--disable-auto-image-base -Wl,--dynamicbase -Wl,--high-entropy-va -Wl,--image-base,0x180000000" #Wl,--enable-auto-image-base
# the following breaks building of boost
#export CC="gcc.exe -Wl,--nxcompat -Wl,--disable-auto-image-base -Wl,--large-address-aware -Wl,--dynamicbase -Wl,--high-entropy-va"
#export CXX="g++.exe -Wl,--nxcompat -Wl,--disable-auto-image-base -Wl,--large-address-aware -Wl,--dynamicbase -Wl,--high-entropy-va"
#export LD="ld.exe --nxcompat --disable-auto-image-base --large-address-aware --dynamicbase --high-entropy-va"


# download prebuilt D compiler and add to PATH
if echo $VERSION|grep -q "^11[.\-]"; then
 wl-download -v -d $TARBALLDIR/dmd https://downloads.dlang.org/releases/2022/dmd.2.100.2.windows.7z
 PATH=$PATH:/C/Progra~1/7-Zip 7z x -y $TARBALLDIR/dmd/dmd.2.100.2.windows.7z -oprebuilt_dmd
 export PATH=$PWD/prebuilt_dmd/dmd2/windows/bin$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; fi):$PATH
fi




# building for aarch64
#sed -i.bak -e "s/\( | x86_64-\*-mingw\*\))/\1 | aarch64-*-mingw*)/" gcc/config.gcc
patch -ulbf gcc/config.gcc << EOF
@@ -2123,3 +2123,3 @@
        ;;
-i[34567]86-*-mingw* | x86_64-*-mingw*)
+i[34567]86-*-mingw* | x86_64-*-mingw* | aarch64-*-mingw*)
        tm_file="\${tm_file} i386/unix.h i386/bsd.h i386/gas.h i386/cygming.h"
@@ -2132,3 +2132,3 @@
        case \${target} in
-               x86_64-*-* | *-w64-*)
+               x86_64-*-* | aarch64-*-* | *-w64-*)
                        need_64bit_isa=yes
@@ -2176,3 +2176,3 @@
         case \${target} in
-               x86_64-w64-*)
+               x86_64-w64-* | aarch64-w64-*)
                                tmake_file="\${tmake_file} i386/t-mingw-w64"
@@ -5673,3 +5673,3 @@
                ;;
-       i[34567]86-*-mingw* | x86_64-*-mingw*)
+       i[34567]86-*-mingw* | x86_64-*-mingw* | aarch64-*-mingw*)
                ;;
EOF
cat >> build_mingw/gcc/auto-host.h << EOF
#if defined(__aarch64__) && !defined(TARGET_64BIT)
#define TARGET_64BIT 1
#define TARGET_64BIT_MS_ABI 1
#define MS_ABI 1
#define ix86_abi MS_ABI
#endif
EOF
#echo "#define TARGET_64BIT 1" >> build_mingw/gcc/auto-host.h
#remove ./configure flag: --with-tune=generic



#CARGO_VERSION=1.10.17
#wl-download -v -d . https://github.com/cargo-bins/cargo-binstall/releases/download/v$CARGO_VERSION/cargo-binstall-$(echo $RUNPLATFORM|sed -e "s/-.*$//")-pc-windows-msvc.zip

ls $USERPROFILE/.cargo $USERPROFILE/.rustup

wl-download -v -d . https://static.rust-lang.org/rustup/dist/$(echo $RUNPLATFORM|sed -e "s/-.*$//")-pc-windows-msvc/rustup-init.exe
mkdir $PWD/prebuilt
mkdir -p $PWD/prebuilt/.rustup/toolchains/stable-$(echo $RUNPLATFORM|sed -e "s/-.*$//")-pc-windows-gnu/bin
USERPROFILE=$PWD/prebuilt ./rustup-init.exe -y --default-host $(echo $RUNPLATFORM|sed -e "s/-.*$//")-pc-windows-gnu --default-toolchain stable --profile minimal --no-modify-path
#USERPROFILE=$PWD/prebuilt ./rustup-init.exe -y --default-host $(echo $RUNPLATFORM|sed -e "s/-.*$//")-pc-windows-gnu --default-toolchain stable --profile default --no-modify-path
#USERPROFILE=$PWD/prebuilt ./rustup-init.exe -y --default-host $(echo $RUNPLATFORM|sed -e "s/-.*$//")-pc-windows-gnu --default-toolchain stable --profile complete --no-modify-path
#USERPROFILE=$PWD/prebuilt prebuilt/.cargo/bin/rustup default stable
USERPROFILE=$PWD/prebuilt prebuilt/.cargo/bin/rustup default stable-$(echo $RUNPLATFORM|sed -e "s/-.*$//")-pc-windows-gnu
#USERPROFILE=$PWD/prebuilt prebuilt/.cargo/bin/rustup toolchain install stable-$(echo $RUNPLATFORM|sed -e "s/-.*$//")-pc-windows-gnu
export PATH=$PATH:$PWD/prebuilt/.cargo/bin
export RUSTUP_TOOLCHAIN=$PWD/prebuilt/.rustup/toolchains/stable-$(echo $RUNPLATFORM|sed -e "s/-.*$//")-pc-windows-gnu


# fix gcc/rust/parse/rust-parse.cc (version >= 15-20241222)
patch -ulbf gcc/rust/parse/rust-parse.cc << EOF
@@ -91,3 +91,3 @@
 #if defined(HAVE_DOS_BASED_FILE_SYSTEM)
-  path.replace ('/', '\\\\');
+  std::replace(path.begin(), path.end(), '/', '\\\\');
 #endif /* HAVE_DOS_BASED_FILE_SYSTEM */
EOF
# fix undefined dlsym in gcc/rust/expand/rust-proc-macro.cc (version >= 15-20241222)
patch -ulbf gcc/rust/expand/rust-proc-macro.cc << EOF
@@ -24,3 +24,5 @@

-#ifndef _WIN32
+#ifdef _WIN32
+#include <libdl-win32/dlfcn.h>
+#else
 #include <dlfcn.h>
EOF
# fix gcc/rust/checks/errors/borrowck/rust-borrow-checker.cc (version >= 15-20241222)
patch -ulbf gcc/rust/checks/errors/borrowck/rust-borrow-checker.cc << EOF
@@ -31,3 +31,5 @@
   int ret;
-#ifdef _WIN32
+#ifdef __MINGW32__
+  ret = mkdir (dirname.c_str (), 0775);
+#elif defined(_WIN32)
   ret = _mkdir (dirname.c_str ());
EOF
# fix gcc/lto-wrapper.cc (version >= 15-20241222)
patch -ulbf gcc/lto-wrapper.cc << EOF
@@ -1872,2 +1872,3 @@

+#ifndef _WIN32
       if (ltrans_cache_dir)
@@ -1882,3 +1883,5 @@
        }
-      else if (save_temps)
+      else
+#endif
+      if (save_temps)
        ltrans_output_file = concat (dumppfx, "ltrans.out", NULL);
@@ -2044,2 +2047,3 @@

+#ifndef _WIN32
       ltrans_file_cache ltrans_cache (ltrans_cache_dir, "ltrans", ".o",
@@ -2160,2 +2164,3 @@
        }
+#endif
       if (parallel)
@@ -2211,2 +2216,3 @@

+#ifndef _WIN32
          if (!ltrans_cache)
@@ -2214,4 +2220,6 @@
              maybe_unlink (input_names[i]);
+#endif
        }

+#ifndef _WIN32
       if (ltrans_cache)
@@ -2259,2 +2267,3 @@
        }
+#endif

@@ -2267,4 +2276,6 @@

+#ifndef _WIN32
       if (ltrans_cache && !save_temps)
        ltrans_cache.try_prune ();
+#endif

EOF
# fix gcc/lockfile.cc (version >= 15-20241222)
patch -ulbf gcc/lockfile.cc << EOF
@@ -21,2 +21,3 @@
 #include "config.h"
+#undef HAVE_FCNTL_H
 #include "system.h"
EOF
## fix undefined read()/write() in libstdc++-v3/libsupc++/pure.cc (version >= 15-20241222)
#sed -i.bak -e "1i #include <io.h>" libstdc++-v3/libsupc++/pure.cc

USERPROFILE=$PWD/prebuilt RUSTUP_TOOLCHAIN=$PWD/prebuilt/.rustup/toolchains/stable-x86_64-pc-windows-gnu PATH=$PATH:$PWD/prebuilt/.cargo/bin make -C build_mingw/libgrust AR="ar -cru"
#make -Cbuild_mingw/gcc -j1 LDFLAGS="-lws2_32"
pushd build_mingw/gcc && x86_64-w64-mingw32-g++ -no-pie   -D__USE_MINGW_ANSI_STDIO=0 -Wno-int-conversion -march=nocona -msahf -mtune=generic -D__USE_MINGW_ACCESS  -DIN_GCC    -fno-exceptions -fno-rtti -fasynchronous-unwind-tables -W -Wall -Wno-error=narrowing -Wwrite-strings -Wcast-qual -Wmissing-format-attribute -Wconditionally-supported -Woverloaded-virtual -pedantic -Wno-long-long -Wno-variadic-macros -Wno-overlength-strings  -DHAVE_CONFIG_H -no-pie -static-libstdc++ -static-libgcc -pthread -Wl,--no-insert-timestamp -Wl,--dynamicbase -Wl,--high-entropy-va -Wl,--nxcompat -Wl,--tsaware -Wl,--stack,12582912  -Wl,--undefined=HOST_EXTRA_OBJS_SYMBOL -o crab1.exe       rust/rust-lang.o rust/rust-attribs.o rust/rust-object-export.o rust/rust-linemap.o rust/rust-diagnostics.o rust/rust-gcc.o rust/rust-token.o rust/rust-lex.o rust/rust-cfg-parser.o rust/rust-parse.o rust/rust-ast.o rust/rust-ast-formatting.o rust/rust-path.o rust/rust-pattern.o rust/rust-ast-fragment.o rust/rust-ast-dump.o rust/rust-ast-collector.o rust/rust-ast-visitor.o rust/rust-hir-dump.o rust/rust-session-manager.o rust/rust-compile.o rust/rust-mangle.o rust/rust-mangle-v0.o rust/rust-mangle-legacy.o rust/rust-compile-resolve-path.o rust/rust-macro-expand.o rust/rust-cfg-strip.o rust/rust-expand-visitor.o rust/rust-ast-builder.o rust/rust-derive.o rust/rust-derive-clone.o rust/rust-derive-copy.o rust/rust-proc-macro.o rust/rust-macro-invoc-lexer.o rust/rust-proc-macro-invoc-lexer.o rust/rust-macro-substitute-ctx.o rust/rust-macro-builtins.o rust/rust-macro-builtins-helpers.o rust/rust-macro-builtins-asm.o rust/rust-macro-builtins-trait.o rust/rust-macro-builtins-utility.o rust/rust-macro-builtins-log-debug.o rust/rust-macro-builtins-test-bench.o rust/rust-macro-builtins-format-args.o rust/rust-macro-builtins-location.o rust/rust-macro-builtins-include.o rust/rust-fmt.o rust/rust-hir.o rust/rust-hir-map.o rust/rust-attributes.o rust/rust-keyword-values.o rust/rust-abi.o rust/rust-token-converter.o rust/rust-macro.o rust/rust-ast-lower.o rust/rust-ast-lower-base.o rust/rust-ast-lower-pattern.o rust/rust-ast-lower-item.o rust/rust-ast-lower-implitem.o rust/rust-ast-lower-expr.o rust/rust-ast-lower-type.o rust/rust-ast-lower-stmt.o rust/rust-ast-lower-format-args.o rust/rust-rib.o rust/rust-name-resolution-context.o rust/rust-default-resolver.o rust/rust-toplevel-name-resolver-2.0.o rust/rust-early-name-resolver-2.0.o rust/rust-late-name-resolver-2.0.o rust/rust-immutable-name-resolution-context.o rust/rust-early-name-resolver.o rust/rust-name-resolver.o rust/rust-ast-resolve.o rust/rust-ast-resolve-base.o rust/rust-ast-resolve-item.o rust/rust-ast-resolve-pattern.o rust/rust-ast-resolve-expr.o rust/rust-ast-resolve-type.o rust/rust-ast-resolve-path.o rust/rust-ast-resolve-stmt.o rust/rust-ast-resolve-struct-expr-field.o rust/rust-hir-type-check.o rust/rust-privacy-check.o rust/rust-privacy-ctx.o rust/rust-reachability.o rust/rust-visibility-resolver.o rust/rust-pub-restricted-visitor.o rust/rust-privacy-reporter.o rust/rust-tyty.o rust/rust-tyty-util.o rust/rust-tyty-call.o rust/rust-tyty-subst.o rust/rust-tyty-variance-analysis.o rust/rust-typecheck-context.o rust/rust-tyty-bounds.o rust/rust-hir-trait-resolve.o rust/rust-hir-trait-reference.o rust/rust-hir-type-check-item.o rust/rust-hir-type-check-type.o rust/rust-hir-type-check-struct.o rust/rust-hir-type-check-pattern.o rust/rust-hir-type-check-expr.o rust/rust-hir-type-check-stmt.o rust/rust-hir-type-check-enumitem.o rust/rust-hir-type-check-implitem.o rust/rust-borrow-checker.o rust/rust-bir-builder-expr-stmt.o rust/rust-bir-dump.o rust/rust-hir-dot-operator.o rust/rust-hir-path-probe.o rust/rust-type-util.o rust/rust-coercion.o rust/rust-casts.o rust/rust-unify.o rust/rust-hir-type-check-base.o rust/rust-autoderef.o rust/rust-substitution-mapper.o rust/rust-const-checker.o rust/rust-lint-marklive.o rust/rust-lint-unused-var.o rust/rust-readonly-check.o rust/rust-hir-type-check-path.o rust/rust-unsafe-checker.o rust/rust-compile-intrinsic.o rust/rust-compile-pattern.o rust/rust-compile-fnparam.o rust/rust-compile-proc-macro.o rust/rust-base62.o rust/rust-compile-item.o rust/rust-compile-implitem.o rust/rust-compile-stmt.o rust/rust-compile-expr.o rust/rust-compile-type.o rust/rust-compile-block.o rust/rust-compile-struct-field-expr.o rust/rust-constexpr.o rust/rust-compile-base.o rust/rust-tree.o rust/rust-compile-context.o rust/rust-export-metadata.o rust/rust-imports.o rust/rust-import-archive.o rust/rust-extern-crate.o rust/rust-builtins.o rust/rust-feature.o rust/rust-feature-gate.o rust/rust-ast-validation.o rust/rust-dir-owner.o rust/rust-unicode.o rust/rust-punycode.o rust/rust-lang-item.o rust/rust-expand-format-args.o  i386-rust.o winnt-rust.o attribs.o libbackend.a main.o libcommon-target.a libcommon.a ../libcpp/libcpp.a ../libdecnumber/libdecnumber.a libcommon.a ../libcpp/libcpp.a  -liconv ../libbacktrace/.libs/libbacktrace.a ../libiberty//libiberty.a ../libdecnumber/libdecnumber.a   ../libgrust/libproc_macro_internal/libproc_macro_internal.a ../libgrust/libformat_parser/debug/liblibformat_parser.a -L/c/Prog/winlibs14.2.0msvcrt/custombuilt64/lib -lisl -L/c/Prog/winlibs14.2.0msvcrt/custombuilt64/lib -L/c/Prog/winlibs14.2.0msvcrt/custombuilt64/lib -L/c/Prog/winlibs14.2.0msvcrt/custombuilt64/lib -lmpc -lmpfr -lgmp -Wl,--gc-keep-exported -Wl,--out-implib=crab1.exe.a  -lz -lzstd -lws2_32 -lntoskrnl -luserenv && popd
make -Cbuild_mingw CRAB1_LIBS="-ldl -lws2_32 -lntoskrnl -luserenv"
make -Cbuild_mingw/$RUNPLATFORM/libstdc++-v3 LDFLAGS="-L$PWD/build_mingw/gcc -lcommon"

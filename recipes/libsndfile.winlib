#export NAME="libsndfile"
#export STATUS=
#export URL=http://www.mega-nerd.com/libsndfile/
#export BASENAME=libsndfile
#export DESCRIPTION="Libsndfile is a C library for reading and writing files containing sampled sound (such as MS Windows WAV and the Apple/SGI AIFF format) through one standard library interface."
#export CATEGORY=audio,fileformat
#export TYPE=library
##export VERSION=1.0.17
##export VERSION=1.0.19
##export VERSION=1.0.20
##export VERSION=1.0.21
##export VERSIONDATE=20091214
##export VERSION=1.0.22
##export VERSIONDATE=20101004
##export VERSION=1.0.23
##export VERSIONDATE=20101010
##export VERSION=1.0.24
##export VERSIONDATE=20110324
##export VERSION=1.0.25
##export VERSIONDATE=20110713
##export VERSION=1.0.26
##export VERSIONDATE=20151122
##export VERSION=1.0.27
##export VERSIONDATE=20160622
#export VERSION=1.0.28
#export VERSIONDATE=20170403
#wl-showstatus --package-version
#export DEPENDENCIES=flac,libogg,libvorbis,sqlite3
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=
#export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=COPYING
#export LICENSETYPE=LGPL
#export DOWNLOADURL="http://www.mega-nerd.com/libsndfile/"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
##export DOWNLOADSOURCEURL=http://www.mega-nerd.com/libsndfile/$BASENAME-$VERSION.tar.gz
#export DOWNLOADSOURCEURL=http://www.mega-nerd.com/libsndfile/files/$BASENAME-$VERSION.tar.gz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#tar xz --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
#cd $BASENAME-$VERSION
### fix for undeclared int64_t
##mv tests/utils.c tests/utils.c.bak
##echo "#include <stdint.h>" > tests/utils.c
##cat tests/utils.c.bak >> tests/utils.c
#wl-showstatus configure &&
# #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --disable-flac
# #cat > tests/Makefile << EOF
# #all:
# #install:
# #EOF
# #make install
# #make check
# #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM && make install
# #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --disable-shared LDFLAGS="-lws2_32" && make install
# #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --disable-external-libs &&
# #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-external-libs --enable-sqlite --disable-shave &&
# #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --disable-external-libs --enable-sqlite --disable-shave &&
# ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --disable-external-libs --enable-sqlite --disable-shave LIBS="-Wl,--as-needed -lssp" &&
# #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-external-libs --enable-sqlite LIBS="-Wl,--as-needed -lssp" &&
# wl-showstatus build-install &&
# make install-strip &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION



## fix src/sfconfig.h
#cat >> src/sfconfig.h << EOF
##ifdef _WIN32
##ifdef __MINGW32__
##define COMPILER_IS_GCC 1
##endif
##ifndef CPU_IS_LITTLE_ENDIAN
##define CPU_IS_LITTLE_ENDIAN 1
##endif
##ifndef CPU_IS_BIG_ENDIAN
##define CPU_IS_BIG_ENDIAN 0
##endif
##if defined(_M_IX86) || defined(_M_X64)
##undef CPU_IS_X86
##define CPU_IS_X86 1
##endif
##if defined(_M_X64)
##undef CPU_IS_X86_64
##define CPU_IS_X86_64 1
##endif
##endif
##ifndef CPU_CLIPS_POSITIVE
##define CPU_CLIPS_POSITIVE 0
##endif
##ifndef CPU_CLIPS_POSITIVE
##define CPU_CLIPS_POSITIVE 0
##endif
##ifndef SIZEOF_SF_COUNT_T
##define SIZEOF_SF_COUNT_T sizeof(sf_count_t)
##endif
##ifndef PACKAGE_NAME
##define PACKAGE_NAME "libsndfile"
##endif
##ifndef PACKAGE_VERSION
##define PACKAGE_VERSION "$VERSION"
##endif
#EOF
## also allow building static library
#sed -i.bak -e "s/\(add_library *([^ ]*\)  *SHARED/\1/" CMakeLists.txt
## also allow building static library
#sed -i.bak2 -e "s/\(if (\)\(\${undef_count}\)/\1\"\2\"/" CMakeLists.txt
## fix missing CMakeFiles/config.h.in
#sed -i.bak3 -e "s?CMakeFiles\(/config\.h\.in\)?src\1?g" CMakeLists.txt
##export BUILDDEPENDENCIES=cmake,ninja
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -S. -Bbuild_static &&
# #-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -S. -Bbuild_shared &&
# ## fix execution of Python scripts
# #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|glib-genmarshal\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
# ## fix missing link libraries
# #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lws2_32/" build_shared/build.ninja &&
# #wl-showstatus build &&
# #cmake.exe --build build_static &&
# #ninja -Cbuild_static &&
# #wl-showstatus build &&
# #cmake.exe --build build_shared &&
# #ninja -Cbuild_shared &&
# wl-showstatus build-install &&
# #cmake.exe --install build_static --strip &&
# #cmake.exe --build build_static --target "install/strip" &&
# #cmake.exe --build build_static --target "library/install/strip" &&
# ninja -Cbuild_static install/strip &&
# #ninja -Cbuild_static library/install/strip &&
# wl-showstatus build-install &&
# #cmake.exe --install build_shared --strip &&
# #cmake.exe --build build_shared --target "install/strip" &&
# ninja -Cbuild_shared install/strip &&
#    echo OK



export NAME="libsndfile"
export STATUS=
#export URL=http://www.mega-nerd.com/libsndfile/
export URL=https://github.com/libsndfile/libsndfile
export BASENAME=libsndfile
export DESCRIPTION="Libsndfile is a C library for reading and writing files containing sampled sound (such as MS Windows WAV and the Apple/SGI AIFF format) through one standard library interface."
export CATEGORY=audio,fileformat
export TYPE=library
export VERSION=1.2.2
export VERSIONDATE=20250520
wl-showstatus --package-version
export DEPENDENCIES=flac,libogg,libvorbis,sqlite3
export OPTIONALDEPENDENCIES=lame,libmpg123,libopus
#export BUILDDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=COPYING
export LICENSETYPE=LGPL
export DOWNLOADURL="https://github.com/libsndfile/libsndfile/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/libsndfile/libsndfile/releases/download/$VERSION/$BASENAME-$VERSION.tar.xz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
tar xJ --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.xz
cd $BASENAME-$VERSION
# fix redefinition of bool/true/false in src/ALAC/alac_decoder.c (version >= 1.2.2)
patch -ulbf src/ALAC/alac_decoder.c << EOF
@@ -40,2 +40,5 @@

+#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 202311L
+#include <stdbool.h>
+#else
 typedef enum
@@ -44,2 +47,3 @@
 } bool ;
+#endif

EOF
# fix redefinition of bool/true/false in src/ALAC/alac_encoder.c (version >= 1.2.2)
patch -ulbf src/ALAC/alac_encoder.c << EOF
@@ -46,2 +46,5 @@

+#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 202311L
+#include <stdbool.h>
+#else
 typedef enum
@@ -51,2 +54,3 @@
 } bool ;
+#endif

EOF
#wl-showstatus configure &&
# ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --disable-external-libs --enable-sqlite --disable-shave LIBS="-Wl,--as-needed -lssp" PYTHON=$PYDIR/python.exe &&
# wl-showstatus build-install &&
# make install-strip &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
mkdir -p build_static build_shared &&
 wl-showstatus configure-static &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DENABLE_STATIC_RUNTIME:BOOL=ON -DENABLE_MPEG:BOOL=ON -DENABLE_EXTERNAL_LIBS:BOOL=ON -DBUILD_EXAMPLES:BOOL=OFF -DBUILD_TESTING:BOOL=OFF -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DCMAKE_POLICY_VERSION_MINIMUM:STRING=3.5 -S. -Bbuild_static &&
 wl-showstatus configure-shared &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DENABLE_STATIC_RUNTIME:BOOL=OFF -DENABLE_MPEG:BOOL=ON -DENABLE_EXTERNAL_LIBS:BOOL=ON -DBUILD_EXAMPLES:BOOL=OFF -DBUILD_TESTING:BOOL=OFF -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DCMAKE_POLICY_VERSION_MINIMUM:STRING=3.5 -S. -Bbuild_shared &&
 wl-showstatus build-install-static &&
 ninja -Cbuild_static install/strip &&
 wl-showstatus build-install-shared &&
 ninja -Cbuild_shared install/strip &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




export NAME="KRDC"
export STATUS=
export URL=https://apps.kde.org/krdc/
export BASENAME=krdc
export DESCRIPTION="KRDC is a client application that allows you to view or even control the desktop session on another machine that is running a compatible server. VNC and RDP is supported."
export CATEGORY=communication
export TYPE=application
#export VERSION=23.08.4
#export VERSIONDATE=20240128
#export VERSION=24.02.0
#export VERSIONDATE=20240228
#export VERSION=24.02.1
#export VERSIONDATE=20240321
#export VERSION=24.02.2
#export VERSIONDATE=20240412
#export VERSION=24.05.0
#export VERSIONDATE=20240523
#export VERSION=24.05.1
#export VERSIONDATE=20240613
#export VERSION=24.05.2
#export VERSIONDATE=20240704
#export VERSION=24.07.80
#export VERSIONDATE=20240726
#export VERSION=24.07.90
#export VERSIONDATE=20240810
#export VERSION=24.08.0
#export VERSIONDATE=20240822
#export VERSION=24.08.1
#export VERSIONDATE=20240912
#export VERSION=24.08.2
#export VERSIONDATE=20241010
export VERSION=24.08.3
export VERSIONDATE=20241107
wl-showstatus --package-version
#export DEPENDENCIES=freerdp,libvncserver,gettext,qt,libkf5config,libkf5kcmutils,libkf5dnssd,libkf5notifications,libkf5bookmarks,libkf5iconthemes,libkf5xmlgui,libkf5completion,libkf5wallet,libkf5widgetsaddons,libkf5windowsystem,libkf5notifyconfig,libkf5i18n
export DEPENDENCIES=freerdp,libvncserver,gettext,qt,libkf6config,libkf6kcmutils,libkf6dnssd,libkf6notifications,libkf6bookmarks,libkf6iconthemes,libkf6xmlgui,libkf6completion,libkf6wallet,libkf6widgetsaddons,libkf6windowsystem,libkf6notifyconfig,libkf6i18n,libkf6kstatusnotifieritem,plasma-activities
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja,extra-cmake-modules
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSES/BSD-3-Clause.txt
export LICENSETYPE=BSD
export DOWNLOADURL="https://invent.kde.org/network/krdc/-/tags krdc-v"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://invent.kde.org/network/krdc/-/archive/v$VERSION/krdc-v$VERSION.tar.bz2
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xj --force-local -f $TARBALLDIR/$BASENAME/krdc-v$VERSION.tar.bz2
cd krdc-v$VERSION
# fix vnc/vncclientthread.cpp (version >= 24.08.3)
patch -ulbf vnc/vncclientthread.cpp << EOF
@@ -15,2 +15,6 @@
 #include <cerrno>
+#ifdef _WIN32
+#include <winsock2.h>
+#include <ws2tcpip.h>
+#else
 #include <netinet/in.h>
@@ -18,2 +22,3 @@
 #include <sys/socket.h>
+#endif
 #include <sys/types.h>
@@ -654,3 +659,3 @@
     optval = 1;
-    if (setsockopt(cl->sock, SOL_SOCKET, SO_KEEPALIVE, &optval, optlen) < 0) {
+    if (setsockopt(cl->sock, SOL_SOCKET, SO_KEEPALIVE, (const char*)&optval, optlen) < 0) {
         qCritical(KRDC) << "setsockopt(SO_KEEPALIVE)" << strerror(errno);
@@ -660,3 +665,3 @@
     optval = m_keepalive.intervalSeconds;
-    if (setsockopt(cl->sock, IPPROTO_TCP, TCP_KEEPIDLE, &optval, optlen) < 0) {
+    if (setsockopt(cl->sock, IPPROTO_TCP, TCP_KEEPIDLE, (const char*)&optval, optlen) < 0) {
         qCritical(KRDC) << "setsockopt(TCP_KEEPIDLE)" << strerror(errno);
@@ -666,3 +671,3 @@
     optval = m_keepalive.intervalSeconds;
-    if (setsockopt(cl->sock, IPPROTO_TCP, TCP_KEEPINTVL, &optval, optlen) < 0) {
+    if (setsockopt(cl->sock, IPPROTO_TCP, TCP_KEEPINTVL, (const char*)&optval, optlen) < 0) {
         qCritical(KRDC) << "setsockopt(TCP_KEEPINTVL)" << strerror(errno);
@@ -672,3 +677,3 @@
     optval = m_keepalive.failedProbes;
-    if (setsockopt(cl->sock, IPPROTO_TCP, TCP_KEEPCNT, &optval, optlen) < 0) {
+    if (setsockopt(cl->sock, IPPROTO_TCP, TCP_KEEPCNT, (const char*)&optval, optlen) < 0) {
         qCritical(KRDC) << "setsockopt(TCP_KEEPCNT)" << strerror(errno);
EOF
# fix vnc/vncsshtunnelthread.cpp (version >= 24.08.3)
patch -ulbf vnc/vncsshtunnelthread.cpp << EOF
@@ -12,2 +12,6 @@

+#ifdef _WIN32
+#include <winsock2.h>
+#include <ws2tcpip.h>
+#else
 #include <arpa/inet.h>
@@ -16,2 +20,3 @@
 #include <sys/socket.h>
+#endif

@@ -137,3 +142,3 @@
     int sockopt = 1;
-    setsockopt(server_sock, SOL_SOCKET, SO_REUSEADDR, &sockopt, sizeof(sockopt));
+    setsockopt(server_sock, SOL_SOCKET, SO_REUSEADDR, (const char*)&sockopt, sizeof(sockopt));

@@ -188,4 +193,9 @@

+#ifdef _WIN32
+        unsigned long sock_flags = 1;
+        ioctlsocket(client_sock, FIONBIO, &sock_flags);
+#else
         int sock_flags = fcntl(client_sock, F_GETFL, 0);
         fcntl(client_sock, F_SETFL, sock_flags | O_NONBLOCK);
+#endif
     }
EOF
# fix factorwidget.h (version >= 24.08.3)
patch -ulbf factorwidget.h << EOF
@@ -23,3 +23,3 @@
  */
-class KRDCCORE_EXPORT FactorWidget : public QWidgetAction
+class FactorWidget : public QWidgetAction
 {
EOF
# ignore version when detecting FreeRDP
sed -i.bak -e "s/\(find_package(\)\(FreeRDP\|FreeRDP-Client\|WinPR\) [0-9]*\.[0-9.]*\()\)/\1\2\3/" CMakeLists.txt
# also allow building static library
sed -i.bak -e "s/\(add_library([^ ]*\) SHARED/\1/" core/CMakeLists.txt
mkdir -p build_static build_shared &&
 wl-showstatus configure &&
 PATH=$PATH:$MINGWPREFIX/qt6/bin cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DBUILD_WITH_QT6:BOOL=ON -DWITH_RDP:BOOL=OFF -DWITH_VNC:BOOL=ON -DBUILD_TESTING:BOOL=OFF -DCMAKE_CXX_FLAGS:STRING="-DKRDCCORE_STATIC_DEFINE" -S. -Bbuild_static &&
 #-DWITH_RDP:BOOL=ON 
 wl-showstatus configure &&
 PATH=$PATH:$MINGWPREFIX/qt6/bin cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DBUILD_WITH_QT6:BOOL=ON -DWITH_RDP:BOOL=OFF -DWITH_VNC:BOOL=ON -DBUILD_TESTING:BOOL=OFF -S. -Bbuild_shared &&
 wl-showstatus build-install &&
 PATH=$PATH:$MINGWPREFIX/qt6/bin ninja -Cbuild_static install/strip &&
 wl-showstatus build-install &&
 PATH=$PATH:$MINGWPREFIX/qt6/bin ninja -Cbuild_shared install/strip &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf krdc-v$VERSION
####TO DO: enable FreeRDP support




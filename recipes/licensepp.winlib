export NAME="License++"
export STATUS=
export URL=https://muflihun.github.io/licensepp/
#export URL=https://github.com/muflihun/licensepp
export BASENAME=licensepp
export DESCRIPTION="License++ is a cross platform software licensing library which allows you to implement licensing into your application."
export CATEGORY=security
export TYPE=library
#export VERSION=1.0.5
#export VERSIONDATE=20180210
####src/external/Ripe.cc:27:10: fatal error: cryptopp/pem.h: No such file or directory
#export DEPENDENCIES=cryptopp,pempack
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=cmake
#export OPTIONALBUILDDEPENDENCIES=
export VERSION=1.0.6
export VERSIONDATE=20200124
wl-showstatus --package-version
export DEPENDENCIES=cryptopp-pem
export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=cmake
#export OPTIONALBUILDDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=Apache
export DOWNLOADURL="https://github.com/muflihun/licensepp/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/muflihun/licensepp/archive/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd $BASENAME-$VERSION
# fix already defined struct timeval in src/utils.h (version >= 1.0.6)
patch -ulbf src/utils.h << EOF
@@ -61,3 +61,3 @@

-#if LICENSEPP_OS_WINDOWS
+#if LICENSEPP_OS_WINDOWS && !defined(__MINGW32__)
 struct timeval {
EOF
## fix PEM_Save parameters in src/external/Ripe.cc (version >= 1.0.6)
#patch -ulbf src/external/Ripe.cc << EOF
#@@ -227,5 +227,5 @@
#         if (secret.empty()) {
#-            PEM_Save(snk, privateKey);
#+            PEM_Save(snk.Ref(), privateKey);
#         } else {
#-            PEM_Save(snk, privateKey, rng, PRIVATE_RSA_ALGORITHM, secret.data(), secret.size());
#+            PEM_Save(snk.Ref(), rng, privateKey, PRIVATE_RSA_ALGORITHM, secret.data(), secret.size());
#         }
#EOF
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -Dtest:BOOL=OFF -Bbuild_static -D. &&
# wl-showstatus configure &&
# cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -Dtest:BOOL=OFF -Bbuild_shared -S. &&
# wl-showstatus build-install &&
# make -Cbuild_static install/strip &&
# wl-showstatus build-install &&
# make -Cbuild_shared install/strip &&
# mkdir -p $INSTALLPREFIX/bin &&
# mv -f $INSTALLPREFIX/lib/*.dll $INSTALLPREFIX/bin/ &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
mkdir -p build_static build_shared &&
 wl-showstatus configure &&
 cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -Dtest:BOOL=OFF -Bbuild_static -S. &&
 wl-showstatus configure &&
 cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -Dtest:BOOL=OFF -Bbuild_shared -S. &&
 wl-showstatus build-install &&
 ninja -Cbuild_static install/strip &&
 wl-showstatus build-install &&
 ninja -Cbuild_shared install/strip &&
 mkdir -p $INSTALLPREFIX/bin &&
 mv -f $INSTALLPREFIX/lib/*.dll $INSTALLPREFIX/bin/ &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




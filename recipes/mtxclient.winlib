export NAME="mtxclient"
export STATUS=
export URL=https://nheko.im/nheko-reborn/mtxclient
export BASENAME=mtxclient
export DESCRIPTION="Client API library for the Matrix protocol"
export CATEGORY=
export TYPE=library
#export VERSION=0.10.0
#export VERSIONDATE=20240801
export VERSION=0.10.1
export VERSIONDATE=20250803
wl-showstatus --package-version
export DEPENDENCIES=gtest,cjson,libcurl,libevent,libolm,openssl,re2,spdlog
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
#export BUILDDEPENDENCIES=meson,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=MIT
export DOWNLOADURL="https://nheko.im/nheko-reborn/mtxclient/-/tags"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://nheko.im/nheko-reborn/mtxclient/-/archive/v$VERSION/$BASENAME-v$VERSION.tar.bz2
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xj --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-v$VERSION.tar.bz2
cd $BASENAME-v$VERSION
# fix CMakeLists.txt (version >= 0.10.0)
patch -ulbf CMakeLists.txt << EOF
@@ -148,3 +148,3 @@
        pkg_check_modules(libevent_core REQUIRED IMPORTED_TARGET libevent_core)
-       if (WIN32)
+       if (MSVC)
                pkg_check_modules(libevent_windows REQUIRED IMPORTED_TARGET libevent_windows)
EOF
mkdir -p build_static build_shared &&
 wl-showstatus configure-static &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DUSE_BUNDLED_JSON:BOOL=OFF -DUSE_BUNDLED_LIBCURL:BOOL=OFF -DUSE_BUNDLED_COEURL:BOOL=OFF -DUSE_BUNDLED_LIBEVENT:BOOL=OFF -DUSE_BUNDLED_OLM:BOOL=OFF -DUSE_BUNDLED_OPENSSL:BOOL=OFF -DUSE_BUNDLED_RE2:BOOL=OFF -DUSE_BUNDLED_SPDLOG:BOOL=OFF -DUSE_BUNDLED_GTEST:BOOL=OFF -DBUILD_LIB_EXAMPLES:BOOL=OFF -DBUILD_LIB_TESTS:BOOL=OFF -S. -Bbuild_static &&
 wl-showstatus configure-shared &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DUSE_BUNDLED_JSON:BOOL=OFF -DUSE_BUNDLED_LIBCURL:BOOL=OFF -DUSE_BUNDLED_COEURL:BOOL=OFF -DUSE_BUNDLED_LIBEVENT:BOOL=OFF -DUSE_BUNDLED_OLM:BOOL=OFF -DUSE_BUNDLED_OPENSSL:BOOL=OFF -DUSE_BUNDLED_RE2:BOOL=OFF -DUSE_BUNDLED_SPDLOG:BOOL=OFF -DUSE_BUNDLED_GTEST:BOOL=OFF -DBUILD_LIB_EXAMPLES:BOOL=OFF -DBUILD_LIB_TESTS:BOOL=OFF -S. -Bbuild_shared &&
 wl-showstatus build-install-static &&
 ninja -Cbuild_static install/strip &&
 wl-showstatus build-install-shared &&
 strip build_shared/*.dll &&
 ninja -Cbuild_shared install/strip &&
 mkdir -p $INSTALLPREFIX/include $INSTALLPREFIX/bin &&
 cp -rf include/* $INSTALLPREFIX/include/ &&
 cp -f build_shared/*.dll $INSTALLPREFIX/bin/ &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-v$VERSION
#mkdir -p build_both &&
# wl-showstatus configure &&
# PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Dexamples=false -Dtests=false . build_both &&
# wl-showstatus build-install &&
# ninja -Cbuild_both install &&
# mkdir -p $INSTALLPREFIX/include &&
# cp -rf include/* $INSTALLPREFIX/include/ &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-v$VERSION




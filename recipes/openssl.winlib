#export NAME="OpenSSL"
#export URL=http://www.openssl.org/source/
#export BASENAME=openssl
#export DESCRIPTION="The OpenSSL Project is a collaborative effort to develop a robust, commercial-grade, full-featured, and Open Source toolkit implementing the Secure Sockets Layer (SSL v2/v3) and Transport Layer Security (TLS v1) protocols as well as a full-strength general purpose cryptography library managed by a worldwide community of volunteers that use the Internet to communicate, plan, and develop the OpenSSL toolkit and its related documentation."
#export CATEGORY=security
#export TYPE=library
##export VERSION=0.9.8h
#export VERSION=0.9.8i
##export VERSION=0.9.8j
## see also: http://blog.goo.ne.jp/kelley567/c/ac06bbf96f6766cfd6deb7a6273a87a8
##export VERSION=0.9.8l
##export VERSION=0.9.8n
##export VERSION=0.9.8r
##export VERSIONDATE=20110209
##export VERSION=0.9.8s
##export VERSIONDATE=20120105
##export VERSION=0.9.8t
##export VERSIONDATE=20120118
##export VERSION=0.9.8u
##export VERSIONDATE=20120312
##export VERSION=0.9.8v
##export VERSIONDATE=20120419
##export VERSION=0.9.8w
##export VERSIONDATE=20120424
##export VERSION=0.9.8x
##export VERSIONDATE=20120510
##export VERSION=0.9.8zf
##export VERSIONDATE=20150319
##export VERSION=0.9.8zg
##export VERSIONDATE=20150611
##export VERSION=0.9.8zh
##export VERSIONDATE=20151204
#export VERSIONDATE=
#wl-showstatus --package-version
#export DEPENDANCIES=zlib
#export OPTIONALDEPENDANCIES=
#export BUILDDEPENDANCIES=
#export LICENSEFILE=LICENSE
#export LICENSETYPE=BSD-style
#export DOWNLOADURL="http://www.openssl.org/source/"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://www.openssl.org/source/$BASENAME-$VERSION.tar.gz
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#tar xfz $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz &> /tmp/$BASENAME.err
#sed -e "s/^tar: \([^:]*\/\)\([^:\/]*\): Cannot create symlink to \`\([^']*\)': No such file or directory/ln -s \\1\\3 \\1\\2/" -e "s/^\(tar:.*\)$/#\\1/" /tmp/$BASENAME.err | sh
#rm /tmp/$BASENAME.err
#cd $BASENAME-$VERSION
## fix for error: "redefinition of typedef 'pid_t'"
##mv engines/e_aep.c engines/e_aep.c.bak
##sed -e "s/typedef int pid_t;/#include <sys\/types.h>/" engines/e_aep.c.bak > engines/e_aep.c
#
##cmd /c "ms\\mw no-asm"
##cmd /c "ms\\mingw32 no-asm"
#cmd /c "ms\\mw 386 threads shared zlib-dynamic no-hw"
#cmd /c "ms\\mingw32 386 threads shared zlib-dynamic no-hw"
#
##make files
##perl util/mk1mf.pl
#
##perl ./Configure mingw
#
##PERL=`which perl` ./Configure mingw --prefix=$INSTALLPREFIX 386 threads shared zlib -Wl,--export-all -I$MINGWPREFIX/include -L$MINGWPREFIX/lib &&
##PERL=`which perl` ./Configure mingw --prefix=$INSTALLPREFIX 386 threads shared zlib no-asm -Wl,--export-all -Wl,-no-undefined -I$MINGWPREFIX/include -L$MINGWPREFIX/lib &&
##PERL=`which perl` ./Configure mingw --prefix=$INSTALLPREFIX 386 threads shared zlib -Wl,--export-all -Wl,-no-undefined -I$MINGWPREFIX/include -L$MINGWPREFIX/lib &&
##PERL=`which perl` ./Configure mingw --prefix=$INSTALLPREFIX 386 threads shared zlib-dynamic no-asm no-hw -DOPENSSL_USE_APPLINK -Wl,--allow-multiple-definition -Wl,--export-all -Wl,-no-undefined -I$MINGWPREFIX/include -L$MINGWPREFIX/lib &&
##PERL=`which perl` ./Configure mingw --prefix=$INSTALLPREFIX 386 threads shared zlib no-asm &&
##PERL=`which perl` ./Configure mingw --prefix=$INSTALLPREFIX 386 threads shared zlib-dynamic no-asm no-hw -DOPENSSL_USE_APPLINK -Wl,--export-all &&
#PERL=`which perl` ./Configure mingw --prefix=$INSTALLPREFIX 386 threads shared zlib-dynamic no-hw -DOPENSSL_USE_APPLINK -Wl,--export-all &&
# make depend
##./config && make depend
##### LDFLAGS="-Wl,--allow-multiple-definition
##./config 386 shared 386 threads zlib-dynamic && make depend
##./config shared threads zlib-dynamic no-asm no-hw -DOPENSSL_USE_APPLINK && make depend
#
## fix for missing SSL (struct ssl_st) in include/openssl/engine.h
#mv crypto/ossl_typ.h  crypto/ossl_typ.h.bak
#echo "#include <openssl/ssl.h>" > crypto/ossl_typ.h
#cat crypto/ossl_typ.h.bak >> crypto/ossl_typ.h
#
## skip building test
#cat > test/Makefile << EOF
#all:
#depend:
#links:
#generate:
#install:
#EOF
## fix for correctly installing .dll.a files (instead of .bad)
#mv engines/Makefile engines/Makefile.bak
#sed -e 's/"bad"/"dll.a"/' engines/Makefile.bak > engines/Makefile
## fix some bad file locations
##cp crypto/ossl_typ.h crypto/opensslconf.h crypto/crypto.h crypto/opensslv.h crypto/symhacks.h crypto/tmdiff.h e_os2.h ssl/ssl.h ssl/ssl2.h ssl/ssl3.h ssl/ssl23.h ssl/kssl.h ssl/tls1.h ssl/dtls1.h crypto/cms/cms.h include/openssl/
#cp -u *.h include/openssl/
#find crypto/ -name "*.h" -exec cp -u {} include/openssl/ \;
#find ssl/ -name "*.h" -exec cp -u {} include/openssl/ \;
#
#make -C crypto CPUID_OBJ=uplink.o 
#
##mv ms/mingw32a.mak ms/mingw32a.mak.bak
##sed -e "s/^CP=copy/CP=cp -rf/; s/^RM=del/RM=rm -f/" ms/mingw32a.mak.bak > ms/mingw32a.mak
##mv ms/mingw32.mak ms/mingw32.mak.bak
##sed -e "s/^CP=copy/CP=cp -rf/; s/^RM=del/RM=rm -f/" ms/mingw32.mak.bak > ms/mingw32.mak
#
##find crypto/ ssl/ -name "*.h" -exec cp -u {} . \;
##find crypto/ -name "*.c" -exec cp -u {} . \;
#
##ln -s include/openssl/*.h crypto/*.h apps/*.h engines/* .
#ln -s crypto/*/*.c crypto/
#ln -s crypto/evp/m_ripemd.c crypto/ripemd.c
#ln -s crypto/evp/e_rc2.c crypto/rc2.c
#ln -s crypto/evp/e_idea.c crypto/idea.c
#ln -s crypto/evp/e_bf.c crypto/bf.c
#ln -s crypto/evp/e_cast.c crypto/cast.c
#ln -s crypto/evp/e_aes.c crypto/aes.c
#ln -s crypto/bn/bn_lib.c crypto/bn.c
#ln -s apps/rsa.c crypto/
#ln -s apps/dsa.c crypto/
#ln -s apps/dso.c crypto/
#ln -s crypto/dso/dso_lib.c crypto/dso.c
#ln -s apps/dh.c crypto/
#ln -s crypto/bio/bio_lib.c crypto/bio.c
#ln -s crypto/evp/evp_lib.c crypto/evp.c
#ln -s crypto/asn1/asn1_lib.c crypto/asn1.c
#ln -s crypto/pem/pem_lib.c crypto/pem.c
#ln -s crypto/comp/comp_lib.c crypto/comp.c
#
#find crypto/*/*.c -name "*_lib.c" -exec echo {} \; | sed -e "s?^\(.*/\)\([^/]*\)_lib.c?ln -s \1\2_lib.c crypto/\2.c?" | sh
#
#
#ln -s crypto/engine/tb_ecdh.c crypto/ecdh.c
#ln -s crypto/engine/tb_ecdsa.c crypto/ecdsa.c
#ln -s crypto/engine/tb_store.c crypto/store.c
#ln -s crypto/x509v3/v3_conf.c crypto/conf.c
#ln -s crypto/krb5/krb5_asn.c crypto/krb5.c
#
#ln -s apps/*.c crypto/
#
#ln -s apps/* .
#ln -s engine.c engines.c
#cat > crypto.c << EOF
##include <windows.h>
#int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpszCmdLine, int nCmdShow)
#{
#  return 0;
#}
#EOF
#cat > crypto/objects.c << EOF
##include <windows.h>
#int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpszCmdLine, int nCmdShow)
#{
#  return 0;
#}
#EOF
#cat > crypto/x509v3.c << EOF
##include <windows.h>
#int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpszCmdLine, int nCmdShow)
#{
#  return 0;
#}
#EOF
#cat > ssl.c << EOF
##include <windows.h>
#int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpszCmdLine, int nCmdShow)
#{
#  return 0;
#}
#EOF
#
##make --win32 -f ms/mingw32.mak
#make --win32 -f ms/mingw32.mak SSL=ssl CRYPTO=crypto
#
#
##mingw32-make -f ms/mingw32.mak
##mingw32-make -f ms/mingw32a.mak
##dllwrap --dllname libeay32.dll --output-lib out/libeay32.a --def ms/libeay32.def libcrypto.a -lwsock32 -lgdi32
##dllwrap --dllname libssl32.dll --output-lib out/libssl32.a --def ms/ssleay32.def libssl.a libeay32.a
#
#
## -DOPENSSL_USE_APPLINK
#
##-no-idea -no-rc5 -no-mdc2
#
#
#
#
#
#
#
## fix missing compilation of ms/uplink
###gcc -c ms/uplink.c
###mv crypto/Makefile crypto/Makefile.bak
###sed -e "s/^\(LIBOBJ=.*\)$/\1 uplink.o/" crypto/Makefile.bak > crypto/Makefile
#mv Makefile Makefile.bak
#sed -e "s/^\(CPUID_OBJ=\)/\1 uplink.o /" Makefile.bak > Makefile
##rm libcrypto.a libcrypto.dll.a
#
#make
#make install
#cp *.dll engines/*.dll $INSTALLPREFIX/bin/
##mkdir -p $INSTALLPREFIX/include $INSTALLPREFIX/lib/pkgconfig $INSTALLPREFIX/bin
##cp -rfp include/* $INSTALLPREFIX/include
##cp -rfp crypto/*.h ssl/*.h $INSTALLPREFIX/include/openssl
##cp *.a $INSTALLPREFIX/lib
##cp *.pc $INSTALLPREFIX/lib/pkgconfig
##cp *.dll apps/*.exe $INSTALLPREFIX/bin
## create Windows-specific names
#
#
#
#####cryptoeay32-0.9.8.dll
##CMD.EXE
##ms\\mingw32.bat
##EXIT
#
#rm libcrypto.a; make -C crypto ../libcrypto.a CPUID_OBJ=uplink.o
#
#
#rm libcrypto.a libcrypto.dll.a; make libcrypto.dll.a
#
#make -C crypto
##SDIRS=dummy make subdirs
##mkdir dummy
##cat > dummy/Makefile << EOF
##all:
##EOF
##SDIRS=dummy make
#
#cp $INSTALLPREFIX/lib/libcrypto.a $INSTALLPREFIX/lib/libeay32.a
#cp $INSTALLPREFIX/lib/libcrypto.dll.a $INSTALLPREFIX/lib/libeay32.dll.a
#cp $INSTALLPREFIX/lib/libssl.a $INSTALLPREFIX/lib/ssleay32.a
#cp $INSTALLPREFIX/lib/libssl.dll.a $INSTALLPREFIX/lib/ssleay32.dll.a
#
#cp *.h ssl/*.h crypto/*.h crypto/*/*.h $INSTALLPREFIX/include/openssl
#
#dllwrap --dllname libeay32.dll --output-lib libeay32.a --def ms/libeay32.def libcrypto.a -lwsock32 -lgdi32
#dllwrap --dllname libssl32.dll --output-lib libssl32.a --def ms/ssleay32.def libssl.a libeay32.a
#
##wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION
#cd ..
#
#export DOWNLOADSOURCEURL=http://www.openssl.org/contrib/cross_mingw32.sh.gz
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL



#export NAME="openssl"
#export STATUS=
#export URL=http://www.openssl.org/
#export BASENAME=openssl
#export DESCRIPTION="The OpenSSL Project is a collaborative effort to develop a robust, commercial-grade, full-featured, and Open Source toolkit implementing the Secure Sockets Layer (SSL v2/v3) and Transport Layer Security (TLS v1) protocols as well as a full-strength general purpose cryptography library managed by a worldwide community of volunteers that use the Internet to communicate, plan, and develop the OpenSSL toolkit and its related documentation."
#export CATEGORY=security
#export TYPE=library
#export VERSION=0.9.8j
#export VERSIONDATE=
##see also: http://vitus.wagner.pp.ru/articles/openssl-mingw.html
##export VERSION=0.9.8za
##export VERSIONDATE=20140605
##export VERSION=0.9.8zb
##export VERSIONDATE=20120510
##export VERSION=0.9.8zc
##export VERSIONDATE=20141015
#wl-showstatus --package-version
#export DEPENDANCIES=zlib
#export OPTIONALDEPENDANCIES=
#export BUILDDEPENDANCIES=
#export LICENSEFILE=LICENSE
#export LICENSETYPE=BSD-style
#export DOWNLOADURL="http://www.openssl.org/source/"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://www.openssl.org/source/$BASENAME-$VERSION.tar.gz
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#tar xfz $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
#cd $BASENAME-$VERSION
#patch -ulbf Configure << EOF
#--- Configure  Mon Dec 29 01:18:23 2008
#+++ Configure  Tue Mar 24 10:29:51 2009
#@@ -1053,3 +1053,3 @@
# 
#-\$IsMK1MF=1 if (\$target eq "mingw" && \$^O ne "cygwin" && !is_msys());
#+#\$IsMK1MF=1 if (\$target eq "mingw" && \$^O ne "cygwin" && !is_msys());
#EOF
##mv Configure Configure.bak
##sed -e "s/-DCRYPTO_MDEBUG//g" Configure.bak > Configure
##mv crypto/Makefile crypto/Makefile.bak
##sed -e "s/-DCRYPTO_MDEBUG//g" crypto/Makefile.bak > crypto/Makefile
##"$PERLDIR/bin/perl.exe" ./Configure mingw --prefix=$INSTALLPREFIX 386 threads shared zlib-dynamic no-hw -DOPENSSL_USE_APPLINK -Wl,--export-all && make depend
#"$PERLDIR/bin/perl.exe" ./Configure mingw --prefix=$INSTALLPREFIX threads shared zlib-dynamic
#make depend
#make CC=i586-mingw32msvc-gcc RANLIB=i585-mingw32msvc-ranlib
##wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && rm -rf $BASENAME-$VERSION



#export NAME="OpenSSL"
#export STATUS=
#export URL=http://www.openssl.org/
#export BASENAME=openssl
#export DESCRIPTION="The OpenSSL Project is a collaborative effort to develop a robust, commercial-grade, full-featured, and Open Source toolkit implementing the Secure Sockets Layer (SSL v2/v3) and Transport Layer Security (TLS v1) protocols as well as a full-strength general purpose cryptography library."
#export CATEGORY=security
#export TYPE=library
##export VERSION=1.0.0-beta2
##export VERSIONDATE=
##export VERSION=1.0.0-beta5
##export VERSIONDATE=20100126
##export VERSION=1.0.0
##export VERSIONDATE=20100330
##export VERSION=1.0.0a
##export VERSIONDATE=20100601
##export VERSION=1.0.0b
##export VERSIONDATE=20101117
##export VERSION=1.0.0c
##export VERSIONDATE=20101203
##export VERSION=1.0.0d
##export VERSIONDATE=20110209
##export VERSION=1.0.0e
##export VERSIONDATE=20110906
##export VERSION=1.0.0f
##export VERSIONDATE=20120105
##export VERSION=1.0.0g
##export VERSIONDATE=20120118
##export VERSION=1.0.0h
##export VERSIONDATE=20120312
##export VERSION=1.0.0i
##export VERSIONDATE=20120419
##export VERSION=1.0.0j
##export VERSIONDATE=20120511
##export VERSION=1.0.0l
##export VERSIONDATE=20140106
##export VERSION=1.0.0m
##export VERSIONDATE=20140605
##export VERSION=1.0.0n
##export VERSIONDATE=20140807
##export VERSION=1.0.0o
##export VERSIONDATE=20141015
##export VERSION=1.0.0p
##export VERSIONDATE=20150108
##export VERSION=1.0.0q
##export VERSIONDATE=20150115
##export VERSION=1.0.0r
##export VERSIONDATE=20150319
##export VERSION=1.0.0s
##export VERSIONDATE=20150611
##export VERSION=1.0.0t
##export VERSIONDATE=20151204
##export VERSION=1.0.1
##export VERSIONDATE=20120314
##export VERSION=1.0.1a
##export VERSIONDATE=20120419
##export VERSION=1.0.1b
##export VERSIONDATE=20120426
##export VERSION=1.0.1c
##export VERSIONDATE=20120511
##export VERSION=1.0.1d
##export VERSIONDATE=20130205
##export VERSION=1.0.1e
##export VERSIONDATE=20130211
##export VERSION=1.0.1f
##export VERSIONDATE=20140106
##export VERSION=1.0.1g
##export VERSIONDATE=20140408
##export VERSION=1.0.1h
##export VERSIONDATE=20140605
##export VERSION=1.0.1i
##export VERSIONDATE=20140807
##export VERSION=1.0.1j
##export VERSIONDATE=20141015
##export VERSION=1.0.1k
##export VERSIONDATE=20150108
##export VERSION=1.0.1l
##export VERSIONDATE=20150115
##export VERSION=1.0.1m
##export VERSIONDATE=20150319
##export VERSION=1.0.1n
##export VERSIONDATE=20150611
##export VERSION=1.0.1o
##export VERSIONDATE=20150613
##export VERSION=1.0.1p
##export VERSIONDATE=20150710
##export VERSION=1.0.1q
##export VERSIONDATE=20151204
##export VERSION=1.0.1s
##export VERSIONDATE=20160405
##export VERSION=1.0.1t
##export VERSIONDATE=20160504
##export VERSION=1.0.1u
##export VERSIONDATE=20160922
##export VERSION=1.0.2
##export VERSIONDATE=20150122
##export VERSION=1.0.2a
##export VERSIONDATE=20150319
##export VERSION=1.0.2b
##export VERSIONDATE=20150611
##export VERSION=1.0.2c
##export VERSIONDATE=20150613
##export VERSION=1.0.2d
##export VERSIONDATE=20150710
##export VERSION=1.0.2e
##export VERSIONDATE=20151204
##export VERSION=1.0.2g
##export VERSIONDATE=20160405
##export VERSION=1.0.2h
##export VERSIONDATE=20160504
##export VERSION=1.0.2i
##export VERSIONDATE=20160922
##export VERSION=1.0.2j
##export VERSIONDATE=20160926
##export VERSION=1.0.2k
##export VERSIONDATE=20170126
##export VERSION=1.0.2l
##export VERSIONDATE=20170526
##export VERSION=1.0.2m
##export VERSIONDATE=20171103
##export VERSION=1.0.2n
##export VERSIONDATE=20171207
##export VERSION=1.0.2o
##export VERSIONDATE=20180327
##export VERSION=1.0.2p
##export VERSIONDATE=20180814
##export VERSION=1.0.2q
##export VERSIONDATE=20181120
##export VERSION=1.0.2r
##export VERSIONDATE=20190226
##export VERSION=1.0.2s
##export VERSIONDATE=20190529
##export VERSION=1.0.2t
##export VERSIONDATE=20190912
#export VERSION=1.0.2u
#export VERSIONDATE=20191220
##export VERSION=1.1.0
##export VERSIONDATE=20160826
##export VERSION=1.1.0a
##export VERSIONDATE=20160922
##export VERSION=1.1.0b
##export VERSIONDATE=20160926
##export VERSION=1.1.0c
##export VERSIONDATE=20161110
##export VERSION=1.1.0d
##export VERSIONDATE=20170126
##export VERSION=1.1.0e
##export VERSIONDATE=20170217
#####/bin/sh: line 4: pod2man: command not found
##export VERSION=1.1.0f
##export VERSIONDATE=20170526
##export VERSION=1.1.0g
##export VERSIONDATE=20171103
##export VERSION=1.1.0h
##export VERSIONDATE=20180327
##export VERSION=1.1.0i
##export VERSIONDATE=20180814
##export VERSION=1.1.0j
##export VERSIONDATE=20181120
##export VERSION=1.1.0k
##export VERSIONDATE=2019052
##export VERSION=1.1.0l
##export VERSIONDATE=20190912
##export VERSION=1.1.1
##export VERSIONDATE=20180911
#####This perl implementation doesn't produce Unix like paths (with forward slash directory separators).  Please use an implementation that matches your building platform.
#wl-showstatus --package-version
#export DEPENDANCIES=zlib
#export OPTIONALDEPENDANCIES=
#export BUILDDEPENDANCIES=
#export LICENSEFILE=LICENSE
#export LICENSETYPE=BSD-style
#export DOWNLOADURL="http://www.openssl.org/source/"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://www.openssl.org/source/$BASENAME-$VERSION.tar.gz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#tar xfz $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz &> /tmp/$BASENAME.err
#sed -e "s/^tar: \([^:]*\/\)\([^:\/]*\): Cannot create symlink to \`\([^']*\)': No such file or directory/ln -s \\1\\3 \\1\\2/" -e "s/^\(tar:.*\)$/#\\1/" /tmp/$BASENAME.err | sh
#rm /tmp/$BASENAME.err
#cd $BASENAME-$VERSION
#wl-showstatus configure &&
#if ( echo $RUNPLATFORM | grep -qv x86_64 ); then
# #./config --prefix=$INSTALLPREFIX threads shared zlib-dynamic -DOPENSSL_NO_CAPIENG
# PATH=$PATH:$PERLDIR/bin:$PERLDIR/../c/bin $PERLDIR/bin/perl.exe ./Configure --prefix=$INSTALLPREFIX threads shared zlib-dynamic -DOPENSSL_NO_CAPIENG mingw
#else
# PATH=$PATH:$PERLDIR/bin:$PERLDIR/../c/bin $PERLDIR/bin/perl.exe ./Configure --prefix=$INSTALLPREFIX threads shared zlib-dynamic no-asm -DOPENSSL_NO_CAPIENG mingw64
#fi &&
# # fix multiple definitions
# mv Makefile Makefile.bak &&
# sed -e "s/^\(SHARED_LDFLAGS=.*\)/\1 -Wl,--allow-multiple-definition/" Makefile.bak > Makefile &&
# mv apps/Makefile apps/Makefile.bak &&
# sed -e "s/^\(LIBSSL=.*\)/\1 -Wl,--allow-multiple-definition/" apps/Makefile.bak > apps/Makefile &&
##sed -e "s/^\(LIBSSL=.*\)/\1 -Wl,--allow-multiple-definition -Wl,--as-needed -lws2_32/" apps/Makefile.bak > apps/Makefile
### fix conflicting STRING type
##patch -ulbf $INSTALLPREFIX/include/openssl/safestack.h << EOF
##--- /include/openssl/safestack.h  Mon Jul  6 13:08:54 2009
##+++ /include/openssl/safestack.h  Mon Jul  6 13:09:06 2009
##@@ -104,5 +104,5 @@
##  */
##-typedef char *STRING;
##+typedef char *OPENSSLSTRING;
## 
##-typedef const char *CSTRING;
##+typedef const char *OPENSSLCSTRING;
## 
##@@ -116,3 +116,3 @@
## 
##-DECLARE_SPECIAL_STACK_OF(STRING, char)
##+DECLARE_SPECIAL_STACK_OF(OPENSSLSTRING, char)
##EOF
### fix include/openssl/ocsp.h (version >= 1.0.1j)
##patch -ulbf include/openssl/ocsp.h << EOF
##--- include/openssl/ocsp.h  2014-10-15 14:54:48.000000000 +0200
##+++ include/openssl/ocsp.h  2014-12-11 11:27:48.000000000 +0100
##@@ -151,4 +151,5 @@
##  *       optionalSignature   [0]     EXPLICIT Signature OPTIONAL }
##  */
##+#undef OCSP_REQUEST
## typedef struct ocsp_request_st
##        {
##@@ -178,4 +179,5 @@
##  *       response       OCTET STRING }
##  */
##+#undef OCSP_RESPBYTES
## typedef struct ocsp_resp_bytes_st
##        {
##@@ -188,9 +190,10 @@
##  *      responseBytes          [0] EXPLICIT ResponseBytes OPTIONAL }
##  */
##-struct ocsp_response_st
##+#undef OCSP_RESPONSE
##+typedef struct ocsp_response_st
##        {
##        ASN1_ENUMERATED *responseStatus;
##        OCSP_RESPBYTES  *responseBytes;
##-       };
##+       } OCSP_RESPONSE;
##
## /*   ResponderID ::= CHOICE {
##@@ -200,4 +203,5 @@
## #define V_OCSP_RESPID_NAME 0
## #define V_OCSP_RESPID_KEY  1
##+#undef X509_NAME
## struct ocsp_responder_id_st
##        {
##EOF
### fix include/openssl/pem.h (version >= 1.0.1j)
##patch -ulbf include/openssl/pem.h << EOF
##--- include/openssl/pem.h  2014-10-15 14:54:48.000000000 +0200
##+++ include/openssl/pem.h  2014-12-11 12:10:20.000000000 +0100
##@@ -153,4 +153,5 @@
## #define PEM_TYPE_CLEAR         40
##
##+#undef X509_NAME
## typedef struct pem_recip_st
##        {
##@@ -461,4 +462,5 @@
## DECLARE_PEM_rw(X509_AUX, X509)
##
##+#undef X509_CERT_PAIR
## DECLARE_PEM_rw(X509_CERT_PAIR, X509_CERT_PAIR)
##
##EOF
### fix include/openssl/ssl.h (version >= 1.0.1j)
##patch -ulbf include/openssl/ssl.h << EOF
##--- include/openssl/ssl.h  2014-10-15 14:54:48.000000000 +0200
##+++ include/openssl/ssl.h  2014-12-11 12:17:08.000000000 +0100
##@@ -1120,2 +1120,3 @@
##
##+#undef X509_EXTENSIONS
## struct ssl_st
##
##EOF
### fix apps/apps.h (version >= 1.0.1j)
##patch -ulbf apps/apps.h << EOF
##--- apps/apps.h  2014-10-15 14:53:40.000000000 +0200
##+++ apps/apps.h  2014-12-11 14:32:14.000000000 +0100
##@@ -239,2 +239,3 @@
## int dump_cert_text(BIO *out, X509 *x);
##+#undef X509_NAME
## void print_name(BIO *out, const char *title, X509_NAME *nm, unsigned long lflags);
##@@ -263,2 +264,4 @@
## #ifndef OPENSSL_NO_OCSP
##+#undef OCSP_RESPONSE
##+#undef OCSP_REQUEST
## OCSP_RESPONSE *process_responder(BIO *err, OCSP_REQUEST *req,
##
##EOF
##make test
### fix missing winsock stuff (in crypto/bio/b_sock.c) (version >= 1.0.1j)
##echo "#include <winsock2.h>" >> crypto/cryptlib.h
# wl-showstatus build-install &&
# #make -j1 install PERL=$PERLDIR/bin/perl.exe &&
# make -j1 install PERL=$PERLDIR/bin/perl.exe PLATFORM=mingw CC=${CC:-gcc} RANLIB=ranlib &&
# cp -f $INSTALLPREFIX/lib/libcrypto.dll.a $INSTALLPREFIX/lib/libeay32.a && 
# cp -f $INSTALLPREFIX/lib/libcrypto.dll.a $INSTALLPREFIX/lib/libeay32.dll.a && 
# cp -f $INSTALLPREFIX/lib/libssl.dll.a $INSTALLPREFIX/lib/libssleay32.a && 
# cp -f $INSTALLPREFIX/lib/libssl.dll.a $INSTALLPREFIX/lib/libssleay32.dll.a && 
# rm -rf $INSTALLPREFIX/ssl/man && 
# cp -f ms/applink.c $INSTALLPREFIX/include/openssl/ && 
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION



#export NAME="OpenSSL"
#export STATUS=
#export URL=http://www.openssl.org/
#export BASENAME=openssl
#export DESCRIPTION="The OpenSSL Project is a collaborative effort to develop a robust, commercial-grade, full-featured, and Open Source toolkit implementing the Secure Sockets Layer (SSL v2/v3) and Transport Layer Security (TLS v1) protocols as well as a full-strength general purpose cryptography library."
#export CATEGORY=security
#export TYPE=library
##export VERSION=1.1.1
##export VERSIONDATE=20180911
##export VERSION=1.1.1a
##export VERSIONDATE=20181120
##export VERSION=1.1.1b
##export VERSIONDATE=20190226
##export VERSION=1.1.1c
##export VERSIONDATE=20190529
#####This perl implementation doesn't produce Unix like paths (with forward slash directory separators).  Please use an implementation that matches your building platform.
#####Perl v5.10.0 required--this is only v5.8.8
##export VERSION=1.1.1d
##export VERSIONDATE=20190912
##export VERSION=1.1.1e
##export VERSIONDATE=20200318
##export VERSION=1.1.1f
##export VERSIONDATE=20200331
##export VERSION=1.1.1g
##export VERSIONDATE=20200422
##export VERSION=1.1.1h
##export VERSIONDATE=20200922
##export VERSION=1.1.1i
##export VERSIONDATE=20201209
##export VERSION=1.1.1j
##export VERSIONDATE=20210217
##export VERSION=1.1.1k
##export VERSIONDATE=20210325
##export VERSION=1.1.1l
##export VERSIONDATE=20210825
##export VERSION=1.1.1m
##export VERSIONDATE=20211515
##export VERSION=1.1.1n
##export VERSIONDATE=20220316
##export VERSION=1.1.1o
##export VERSIONDATE=20220504
#export VERSION=1.1.1p
#export VERSIONDATE=20220622
#####sh: pod2html: command not found
#####/bin/sh: -c: line 0: syntax error near unexpected token `('
#####/bin/sh: -c: line 0: `perl ./util/mkdir-p.pl C:/Program Files (x86)/Common Files/SSL/certs'
##export VERSION=3.0.0
##export VERSIONDATE=20210907
#####Parameter to use fallback must be a directory, not a file at configdata.pm line 30735.
#wl-showstatus --package-version
#export DEPENDANCIES=zlib
#export OPTIONALDEPENDANCIES=
#export BUILDDEPENDANCIES=
#export LICENSEFILE=LICENSE
#export LICENSETYPE=BSD-style
#export DOWNLOADURL="http://www.openssl.org/source/"
##export DOWNLOADURL="https://github.com/openssl/openssl/releases"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://www.openssl.org/source/$BASENAME-$VERSION.tar.gz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#tar xfz $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
#cd $BASENAME-$VERSION
## fix names conflicting with wincrypt.h in include/openssl/x509.h
#mv include/openssl/x509.h include/openssl/x509.h.bak
#cat > include/openssl/x509.h << EOF
##ifndef HEADER_X509_H
##define X509_NAME WIN_X509_NAME
##define X509_EXTENSIONS WIN_X509_EXTENSIONS
##define PKCS7_SIGNER_INFO WIN_PKCS7_SIGNER_INFO
##include <windows.h>
##undef X509_NAME
##undef X509_EXTENSIONS
##undef PKCS7_SIGNER_INFO
##endif
#EOF
#cat include/openssl/x509.h.bak >> include/openssl/x509.h
## skip building documentation
#sed -i.bak -e "s/^\(install:.*\)install_docs/\1/" Configurations/windows-makefile.tmpl
#wl-showstatus configure &&
# ./Configure --prefix=$INSTALLPREFIX threads shared zlib-dynamic -DOPENSSL_NO_CAPIENG $(if ( echo $RUNPLATFORM | grep -qv x86_64 ); then echo mingw; else echo mingw64; fi) &&
# wl-showstatus build &&
# make &&
# #PERL5LIB=$(pwd)/util/perl 
# wl-showstatus build-install &&
# #make install &&
# #PATH=$PERLDIR/bin:$PATH make -j1 install OPENSSLDIR_dev= OPENSSLDIR_dir=$INSTALLPREFIX &&
# ( PATH=$PERLDIR/bin:$PATH make install OPENSSLDIR_dev= OPENSSLDIR_dir=$INSTALLPREFIX || PATH=$PERLDIR/bin:$PATH make -j1 install OPENSSLDIR_dev= OPENSSLDIR_dir=$INSTALLPREFIX ) &&
# strip $INSTALLPREFIX/bin/*.exe $INSTALLPREFIX/bin/*.dll &&
# #cp -f $INSTALLPREFIX/lib/libcrypto.dll.a $INSTALLPREFIX/lib/libeay32.a && 
# cp -f $INSTALLPREFIX/lib/libcrypto.a $INSTALLPREFIX/lib/libeay32.a && 
# cp -f $INSTALLPREFIX/lib/libcrypto.dll.a $INSTALLPREFIX/lib/libeay32.dll.a && 
# #cp -f $INSTALLPREFIX/lib/libssl.dll.a $INSTALLPREFIX/lib/libssleay32.a && 
# cp -f $INSTALLPREFIX/lib/libssl.a $INSTALLPREFIX/lib/libssleay32.a && 
# cp -f $INSTALLPREFIX/lib/libssl.dll.a $INSTALLPREFIX/lib/libssleay32.dll.a && 
# #rm -rf $INSTALLPREFIX/share/man && 
# cp -f ms/applink.c $INSTALLPREFIX/include/openssl/ && 
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION



export NAME="OpenSSL"
export STATUS=
export URL=http://www.openssl.org/
export BASENAME=openssl
export DESCRIPTION="The OpenSSL Project is a collaborative effort to develop a robust, commercial-grade, full-featured, and Open Source toolkit implementing the Secure Sockets Layer (SSL v2/v3) and Transport Layer Security (TLS v1) protocols as well as a full-strength general purpose cryptography library."
export CATEGORY=security
export TYPE=library
#export VERSION=3.0.0
#export VERSIONDATE=20210907
#export VERSION=3.0.1
#export VERSIONDATE=20211215
#export VERSION=3.0.2
#export VERSIONDATE=20220316
#export VERSION=3.0.3
#export VERSIONDATE=20220504
export VERSION=3.0.4
export VERSIONDATE=20220622
wl-showstatus --package-version
export DEPENDANCIES=zlib
export OPTIONALDEPENDANCIES=
export BUILDDEPENDANCIES=
export LICENSEFILE=LICENSE.txt
export LICENSETYPE=Apache
export DOWNLOADURL="http://www.openssl.org/source/"
#export DOWNLOADURL="https://github.com/openssl/openssl/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=http://www.openssl.org/source/$BASENAME-$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
tar xfz $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
cd $BASENAME-$VERSION
# fix configdata.pm.in (version >= 3.0.0)
patch -ulbf configdata.pm.in << EOF
@@ -83,3 +83,3 @@
     use lib '{- sourcedir('util', 'perl') -}';
-    use OpenSSL::fallback '{- sourcefile('external', 'perl', 'MODULES.txt') -}';
+    use OpenSSL::fallback;

EOF
wl-showstatus configure &&
 PERLLIB=$(pwd)/external/perl/Text-Template-1.56/lib ./Configure --prefix=$INSTALLPREFIX threads shared zlib-dynamic -DOPENSSL_NO_CAPIENG $(if ( echo $RUNPLATFORM | grep -qv x86_64 ); then echo mingw; else echo mingw64; fi) &&
 wl-showstatus build &&
 PERLLIB=$(pwd)/Configurations:$(pwd)/util/perl:$(pwd)/external/perl/Text-Template-1.56/lib PATH=$PERLDIR/bin:$PATH make build_sw &&
 wl-showstatus build-install &&
 PERLLIB=$(pwd)/Configurations:$(pwd)/util/perl:$(pwd)/external/perl/Text-Template-1.56/lib PATH=$PERLDIR/bin:$PATH make -j1 install_sw install_ssldirs LIBDIR=lib OPENSSLDIR_dev= OPENSSLDIR_dir=$INSTALLPREFIX &&
 cp -f $INSTALLPREFIX/lib/libcrypto.a $INSTALLPREFIX/lib/libeay32.a && 
 cp -f $INSTALLPREFIX/lib/libcrypto.dll.a $INSTALLPREFIX/lib/libeay32.dll.a && 
 cp -f $INSTALLPREFIX/lib/libssl.a $INSTALLPREFIX/lib/libssleay32.a && 
 cp -f $INSTALLPREFIX/lib/libssl.dll.a $INSTALLPREFIX/lib/libssleay32.dll.a && 
 cp -f ms/applink.c $INSTALLPREFIX/include/openssl/ && 
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




export NAME="GPGME (GnuPG Made Easy)"
export STATUS=
export URL=http://www.gnupg.org/download/#gpgme
export BASENAME=gpgme
export DESCRIPTION="GPGME (GnuPG Made Easy) is a C language library that allows to add support for cryptography to a program. It is designed to make access to public key crypto engines like GnuPG or GpgSM easier for applications. GPGME provides a high-level crypto API for encryption, decryption, signing, signature verification and key management."
export CATEGORY=security
export TYPE=library
#export VERSION=1.1.8
#export VERSION=1.2.0
#export VERSIONDATE=
#export VERSION=1.3.0
#export VERSIONDATE=20100111
#export VERSION=1.3.1
#export VERSIONDATE=20110617
#export VERSION=1.3.2
#export VERSIONDATE=20120502
#export VERSION=1.4.0
#export VERSIONDATE=20130227
#export VERSION=1.4.1
#export VERSIONDATE=20130501
#export VERSION=1.4.2
#export VERSIONDATE=20130528
#export VERSION=1.4.3
#export VERSIONDATE=20130816
#export VERSION=1.4.4
#export VERSIONDATE=20140730
#export VERSION=1.5.0
#export VERSIONDATE=20140521
#export VERSION=1.5.1
#export VERSIONDATE=20140730
#export VERSION=1.5.2
#export VERSIONDATE=20141122
#export VERSION=1.5.3
#export VERSIONDATE=20141211
#export VERSION=1.5.4
#export VERSIONDATE=20150414
#export VERSION=1.5.5
#export VERSIONDATE=20150609
#export VERSION=1.6.0
#export VERSIONDATE=20150826
#export VERSION=1.7.0
#export VERSIONDATE=20160924
#export VERSION=1.7.1
#export VERSIONDATE=20161020
#export VERSION=1.8.0
#export VERSIONDATE=20161119
#export VERSION=1.9.0
#export VERSIONDATE=20170405
####checking for a Python interpreter with version >= 3.4... none
####configure: error: no suitable Python interpreter found
#export VERSION=1.10.0
#export VERSIONDATE=20171213
#export VERSION=1.11.1
#export VERSIONDATE=20180501
#export VERSION=1.12.0
#export VERSIONDATE=20181008
#export VERSION=1.13.0
#export VERSIONDATE=20190327
#export VERSION=1.13.1
#export VERSIONDATE=20190614
#export VERSION=1.14.0
#export VERSIONDATE=20200717
#export VERSION=1.15.0
#export VERSIONDATE=20201112
#export VERSION=1.15.1
#export VERSIONDATE=20210109
#export VERSION=1.16.0
#export VERSIONDATE=20210625
#export VERSION=1.17.0
#export VERSIONDATE=20220208
#export VERSION=1.17.1
#export VERSIONDATE=20220307
#export VERSION=1.18.0
#export VERSIONDATE=20220811
#export VERSION=1.19.0
#export VERSIONDATE=20230317
#export VERSION=1.20.0
#export VERSIONDATE=20230421
#export VERSION=1.21.0
#export VERSIONDATE=20230708
#export VERSION=1.22.0
#export VERSIONDATE=20230821
#export VERSION=1.23.0
#export VERSIONDATE=20231025
#export VERSION=1.23.1
#export VERSIONDATE=20231028
export VERSION=1.23.2
export VERSIONDATE=20231129
wl-showstatus --package-version
export DEPENDENCIES=libassuan,gnupg,glib2,libgpg-error,argp-standalone
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=COPYING
export LICENSETYPE=GPL/LGPL
#export DOWNLOADURL="http://ftp.heanet.ie/mirrors/ftp.gnupg.org/gcrypt/gpgme/ gpgme-"
export DOWNLOADURL="https://gnupg.org/ftp/gcrypt/gpgme/"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://ftp.heanet.ie/mirrors/ftp.gnupg.org/gcrypt/gpgme/$BASENAME-$VERSION.tar.bz2
export DOWNLOADSOURCEURL=https://gnupg.org/ftp/gcrypt/gpgme/$BASENAME-$VERSION.tar.bz2
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
tar xj --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.bz2
cd $BASENAME-$VERSION
# fix src/util.h for 64-bit
mv src/util.h src/util.h.bak
echo "#include <winsock2.h>" > src/util.h
cat src/util.h.bak >> src/util.h
## fix src/w32-util.c for 64-bit (version <= 1.3.1)
#mv src/w32-util.c src/w32-util.c.bak
#echo "#define _WIN32_IE 0x0400" > src/w32-util.c
#echo "#include <shlobj.h>" >> src/w32-util.c
#cat src/w32-util.c.bak >> src/w32-util.c
# fix src/w32-util.c for 64-bit (version >= 1.3.2)
mv src/w32-util.c src/w32-util.c.bak
cat > src/w32-util.c << EOF
//#define _WIN32_IE 0x0400
#define _WIN32_IE 0x0501
#include <winsock2.h>
#include <shlobj.h>
EOF
cat src/w32-util.c.bak >> src/w32-util.c
# remove redefinition of mkstemp in src/w32-util.c (version >= 1.5.5)
mv src/w32-util.c src/w32-util.c.bak2
cat > src/w32-util.c << EOF
#include <stdlib.h>
#define mkstemp custom_mkstemp
EOF
cat src/w32-util.c.bak2 >> src/w32-util.c
# fix src/gpgme-tool.c (version >= 1.3.2)
patch -ulbf src/gpgme-tool.c << EOF
--- src/gpgme-tool.c  2012-04-13 10:01:10 +0200
+++ src/gpgme-tool.c  2012-05-03 23:34:52 +0200
@@ -34,2 +34,5 @@
 #ifdef HAVE_ARGP_H
+#ifdef error_t
+#define __error_t_defined
+#endif
 #include <argp.h>
@@ -1962,3 +1965,3 @@
   else
-    err = gpgme_data_new_from_fd (data, (int) fd);
+    err = gpgme_data_new_from_fd (data, (intptr_t) fd);

EOF
## fix winsock.h/winsock2.h problems in src/wait-private.c (version = 1.4.3)
#mv src/wait-private.c src/wait-private.c.bak
#echo "#include <winsock2.h>" > src/wait-private.c
#cat src/wait-private.c.bak >> src/wait-private.c
# fix winsock.h/winsock2.h problems in src/w32-glib-io.c (version >= 1.4.3)
mv src/w32-glib-io.c src/w32-glib-io.c.bak
echo "#include <winsock2.h>" > src/w32-glib-io.c
cat src/w32-glib-io.c.bak >> src/w32-glib-io.c
## fix redefinition of sleep in tests/gpg/t-wait.c (when not using MinGW-W64)
#if ! echo -e "#include<_mingw.h>\nint v=__MINGW64_VERSION_MAJOR;" | ${CC:-gcc} -c -xc - -o /dev/null &> /dev/null; then
#patch -ulbf tests/gpg/t-wait.c << EOF
#--- tests/gpg/t-wait.c  2013-03-15 20:27:33 +0100
#+++ tests/gpg/t-wait.c  2015-04-11 20:16:56 +0200
#@@ -32,3 +31,0 @@
#-#ifdef HAVE_W32_SYSTEM
#-#define sleep _sleep
#-#endif
#EOF
#fi
# remove unsupported comment lines in src/*.def
for F in src/*.def; do
 mv $F $F.bak &&
 grep -v "^\(;.*\|\)$" $F.bak > $F
done
## fix missing mkstemp in src/w32-util.c (version >= 1.5.4)
#mv src/w32-util.c src/w32-util.c.bak2
#sed -e "s/^\(mkstemp *(\)/UNUSED_\1/" src/w32-util.c.bak2 > src/w32-util.c
## skip making tests/gpgsm (version >= 1.5.0)
#cat > tests/gpgsm/Makefile.in << EOF
#clean:
#all:
#install:
#install-strip:
#EOF
## fix missing iconv.dll
#cp $MINGWPREFIX/bin/libiconv-2.dll iconv.dll
wl-showstatus preconfigure &&
 autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal &&
 wl-showstatus configure &&
 #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM LDFLAGS="-Wl,--allow-multiple-definition" &&
 #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-w32-glib --with-libassuan-prefix=$MINGWPREFIX LDFLAGS="-Wl,--allow-multiple-definition" &&
 #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-w32-glib --with-libassuan-prefix=$MINGWPREFIX CFLAGS="`$PKG_CONFIG --cflags glib-2.0`" LDFLAGS="`$PKG_CONFIG --libs glib-2.0`" LDFLAGS="-Wl,--allow-multiple-definition" &&
 #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-static --enable-shared --enable-w32-glib --with-libassuan-prefix=$MINGWPREFIX CFLAGS="`$PKG_CONFIG --cflags glib-2.0`" LDFLAGS="`$PKG_CONFIG --libs glib-2.0`" LDFLAGS="-Wl,--allow-multiple-definition" &&
 #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-static --enable-shared --enable-w32-glib --with-libassuan-prefix=$MINGWPREFIX CFLAGS="`$PKG_CONFIG --cflags glib-2.0`" LDFLAGS="`$PKG_CONFIG --libs glib-2.0`" LDFLAGS="-Wl,--allow-multiple-definition -Wl,--as-needed -lshell32" &&
 #PATH=$PYDIR:$PATH ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-static --enable-shared --enable-w32-glib --with-libassuan-prefix=$MINGWPREFIX CFLAGS="`$PKG_CONFIG --cflags glib-2.0`" LDFLAGS="`$PKG_CONFIG --libs glib-2.0`" LDFLAGS="-Wl,--allow-multiple-definition -Wl,--as-needed -lshell32 -L$PYDIR/libs" PYTHON_EXTRA_LDFLAGS= PYTHON=$PYDIR/python.exe &&
 #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-static --enable-shared --enable-languages="cpp" --enable-w32-glib --with-libassuan-prefix=$MINGWPREFIX CFLAGS="$($PKG_CONFIG --cflags glib-2.0)" LDFLAGS="$($PKG_CONFIG --libs glib-2.0)" LDFLAGS="-Wl,--allow-multiple-definition -Wl,--as-needed -lshell32" PYTHON=$PYDIR/python.exe &&
 #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-static --enable-shared --enable-languages="cpp" --enable-w32-glib --with-libassuan-prefix=$MINGWPREFIX --disable-gpgconf-test --disable-gpg-test --disable-gpgsm-test --disable-g13-test CFLAGS="$($PKG_CONFIG --cflags glib-2.0)" LDFLAGS="$($PKG_CONFIG --libs glib-2.0)" LDFLAGS="-Wl,--allow-multiple-definition -Wl,--as-needed -lshell32" PYTHON=$PYDIR/python.exe &&
 ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-static --enable-shared --enable-languages="cpp" --enable-w32-glib --with-libassuan-prefix=$MINGWPREFIX --disable-gpgconf-test --disable-gpg-test --disable-gpgsm-test --disable-g13-test CFLAGS="$($PKG_CONFIG --cflags glib-2.0)" LDFLAGS="$($PKG_CONFIG --libs glib-2.0)" CFLAGS="$(if ${CC:-gcc} --version|grep -q "^clang"; then echo "-Wno-incompatible-function-pointer-types -Wno-int-conversion"; fi)" LDFLAGS="-Wl,--allow-multiple-definition -Wl,--as-needed -lshell32" PYTHON=$PYDIR/python.exe &&
 # fix detection of shared libraries
 sed -i.bak -e "s/\(deplibs_check_method=\"\)[^\"]*/\1pass_all/" libtool &&
 # fix redefinition of off_t and ssize_t in src/gpgme.h
 sed -i.bak -e "s/^\(typedef long off_t;\)/\/\/\1/; s?\(typedef long ssize_t;\)?//\1?" src/gpgme.h &&
 wl-showstatus build-install &&
 ( ( make && make install-strip ) || make -j1 install-strip LIBS="-Wl,--as-needed -lglib-2.0 -lshell32" || make -j1 install-strip LIBS="-Wl,--as-needed -lglib-2.0 -lshell32 -largp" || make -j1 install-strip ) &&
 ( cp -f $MINGWPREFIX/libexec/gpgme-w32spawn.exe $MINGWPREFIX/bin/ || true) &&
 # fix absolute link in .cmake file(s)
 sed -i -e "s?$INSTALLPREFIX\|$(echo $INSTALLPREFIX|sed -e "s?^/\([a-zA-Z]\)/?\1:/?")?\${CMAKE_CURRENT_LIST_FILE}/../../../..?g" $INSTALLPREFIX/lib/cmake/Gpgmepp/GpgmeppConfig.cmake &&
 # fix name of DLL file (version >= 1.21.0)
 sed -i -e "s?libgpgmepp-[0-9]*\.dll?$(basename $INSTALLPREFIX/bin/libgpgmepp*.dll)?g" $INSTALLPREFIX/lib/cmake/Gpgmepp/GpgmeppConfig.cmake &&
 # also put gpgme-w32spawn.exe in bin folder
 cp -u $INSTALLPREFIX/libexec/gpgme-w32spawn.exe $INSTALLPREFIX/bin/ &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




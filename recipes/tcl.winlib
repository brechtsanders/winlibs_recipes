export NAME="Tcl"
export STATUS=
export URL=http://www.tcl.tk/
export BASENAME=tcl
export DESCRIPTION="Tcl (Tool Command Language) is a very powerful but easy to learn dynamic programming language, suitable for a very wide range of uses, including web and desktop applications, networking, administration, testing and many more. Open source and business-friendly, Tcl is a mature yet evolving language that is truly cross platform, easily deployed and highly extensible."
export CATEGORY=development
export TYPE=application
#export VERSION=8.4.20
#export VERSIONDATE=20171127
#export VERSION=8.5.10
#export VERSIONDATE=20110825
#export VERSION=8.5.11
#export VERSIONDATE=20120303
#export VERSION=8.5.12
#export VERSIONDATE=20120727
#export VERSION=8.5.13
#export VERSIONDATE=20121113
#export VERSION=8.5.14
#export VERSIONDATE=20130403
#export VERSION=8.5.15
#export VERSIONDATE=20130919
#export VERSION=8.5.16
#export VERSIONDATE=20140823
#export VERSION=8.5.17
#export VERSIONDATE=20141025
#export VERSION=8.5.18
#export VERSIONDATE=20150307
#export VERSION=8.5.19
#export VERSIONDATE=20171127
#export VERSION=8.6.0
#export VERSIONDATE=20121220
#export VERSION=8.6.1
#export VERSIONDATE=20130920
#export VERSION=8.6.2
#export VERSIONDATE=20140826
#export VERSION=8.6.3
#export VERSIONDATE=20141112
#export VERSION=8.6.4
#export VERSIONDATE=20150312
#export VERSION=8.6.5
#export VERSIONDATE=20160406
#export VERSION=8.6.6
#export VERSIONDATE=20160801
#export VERSION=8.6.7
#export VERSIONDATE=20170816
#export VERSION=8.6.8
#export VERSIONDATE=20171223
#export VERSION=8.6.9
#export VERSIONDATE=20181115
#export VERSION=8.6.10
#export VERSIONDATE=20181122
#export VERSION=8.6.11
#export VERSIONDATE=20210105
#export VERSION=8.6.12
#export VERSIONDATE=20211106
####tkWinX.c:919:16: error: 'VK_PACKET' undeclared (first use in this function)
#export VERSION=8.6.13
#export VERSIONDATE=20211123
export VERSION=8.6.14
export VERSIONDATE=20240229
wl-showstatus --package-version
export DEPENDENCIES=zlib
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=../doc/license.terms
export LICENSETYPE=
export DOWNLOADURL="http://www.tcl.tk/software/tcltk/download.html tcl -src.tar.gz"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://prdownloads.sourceforge.net/tcl/$BASENAME$VERSION-src.tar.gz
export DOWNLOADSOURCEURL=https://prdownloads.sourceforge.net/tcl/$BASENAME$VERSION-src.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
tar xz --force-local -f $TARBALLDIR/$BASENAME/$BASENAME$VERSION-src.tar.gz
cd $BASENAME$VERSION/win
# fix for 64-bit
patch -ulbf ../generic/tclPosixStr.c << EOF
--- ../generic/tclPosixStr.c  2011-05-31 17:03:46 +0200
+++ ../generic/tclPosixStr.c  2011-09-14 08:20:12 +0200
@@ -337,3 +337,3 @@
 #endif
-#if defined(EOVERFLOW) && (!defined(EFBIG) || (EOVERFLOW != EFBIG)) && (!defined(EINVAL) || (EOVERFLOW != EINVAL))
+#if defined(EOVERFLOW) && (!defined(EFBIG) || (EOVERFLOW != EFBIG)) && (!defined(EINVAL) || (EOVERFLOW != EINVAL)) && (EOVERFLOW != E2BIG)
     case EOVERFLOW: return "EOVERFLOW";
@@ -785,3 +785,3 @@
 #endif
-#if defined(EOVERFLOW) && (!defined(EFBIG) || (EOVERFLOW != EFBIG)) && (!defined(EINVAL) || (EOVERFLOW != EINVAL))
+#if defined(EOVERFLOW) && (!defined(EFBIG) || (EOVERFLOW != EFBIG)) && (!defined(EINVAL) || (EOVERFLOW != EINVAL)) && (EOVERFLOW != E2BIG)
     case EOVERFLOW: return "file too big";
EOF
# fix redefinition of EXCEPTION_REGISTRATION (version >= 8.6.1)
if grep -w EXCEPTION_REGISTRATION $MINGWDIR/*mingw32/include/winnt.h > /dev/null; then
 # fix redefinition of EXCEPTION_REGISTRATION in tclWin32Dll.c (version >= 8.6.1)
 mv tclWin32Dll.c tclWin32Dll.c.bak
 echo "#define __MINGW_EXCPT_DEFINE_PSDK 1" > tclWin32Dll.c
 cat tclWin32Dll.c.bak >> tclWin32Dll.c
 # fix redefinition of EXCEPTION_REGISTRATION in tclWinChan.c (version >= 8.6.1)
 mv tclWinChan.c tclWinChan.c.bak
 echo "#define __MINGW_EXCPT_DEFINE_PSDK 1" > tclWinChan.c
 cat tclWinChan.c.bak >> tclWinChan.c
 # fix redefinition of EXCEPTION_REGISTRATION in tclWinFCmd.c (version >= 8.6.1)
 mv tclWinFCmd.c tclWinFCmd.c.bak
 echo "#define __MINGW_EXCPT_DEFINE_PSDK 1" > tclWinFCmd.c
 cat tclWinFCmd.c.bak >> tclWinFCmd.c
fi
# include levmar.h instead of lm.h and fix missing USER_INFO_1 in tclWinFile.c (version >= 8.6.2)
echo "#include <levmar.h>" | gcc -c -xc - -o /dev/null &> /dev/null && (
 sed -i.bak -e "s/#include <lm\.h>.*$/#include <levmar.h>\n#include <lmaccess.h>\n#include <lmapibuf.h>/" tclWinFile.c
)
## fix undeclared uintptr_t in ../generic/tclInt.h (version >= 8.6.8)
#mv ../generic/tclInt.h ../generic/tclInt.h.bak &&
#echo "#include <stdint.h>" > ../generic/tclInt.h &&
#cat ../generic/tclInt.h.bak >> ../generic/tclInt.h
## fix missing getaddrinfo/freeaddrinfo in tclWinSock.c (version >= 8.6.8)
#mv tclWinSock.c tclWinSock.c.bak
#cat > tclWinSock.c << EOF
##define _WIN32_WINNT 0x0501
##include <ws2tcpip.h>
#EOF
#cat tclWinSock.c.bak >> tclWinSock.c
## fix missing getaddrinfo in ../generic/tclIOSock.c (version >= 8.6.8)
#mv ../generic/tclIOSock.c ../generic/tclIOSock.c.bak
#cat > ../generic/tclIOSock.c << EOF
##define _WIN32_WINNT 0x0501
##include <ws2tcpip.h>
#EOF
#cat ../generic/tclIOSock.c.bak >> ../generic/tclIOSock.c
# support Windows on ARM64 in tclWin32Dll.c (version >= 8.6.13)
patch -ulbf tclWin32Dll.c << EOF
@@ -668,3 +668,3 @@

-#elif defined(__GNUC__) && defined(HAVE_CPUID)
+#elif defined(__GNUC__) && defined(HAVE_CPUID) && !defined(__aarch64__)
 #   if defined(_WIN64)
EOF
# use existing zlib
cp -f $MINGWPREFIX/bin/zlib1.dll .
#cp $MINGWPREFIX/lib/libz.a ../compat/zlib/win32/zdll.lib
## fix missing tclsh on 64-bit
#mv Makefile.in Makefile.in.bak
#sed -e "s/^\(TCL_EXE\s*=\s\)tclsh/\1\$(TCLSH)/" Makefile.in.bak > Makefile.in
# fix zlib link issue
sed -i.bak -e "s?\$(shell \$(CYGPATH) '\@ZLIB_LIBS@')?-lz?" Makefile.in
wl-showstatus configure &&
 #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-threads --enable-shared &&
 ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-threads --enable-shared $(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo --enable-64bit; fi) &&
 wl-showstatus build-install &&
 ( make -j1 install || make -j1 TCL_EXE=$(pwd)/tclsh86.exe install ) &&
 # remove zlib1.dll
 ( rm $INSTALLPREFIX/bin/zlib1.dll || true ) &&
 cp -f $INSTALLPREFIX/bin/tclsh$(echo $VERSION|sed -e "s/^\([0-9]*\)\.\([0-9]*\).*/\1\2/").exe $INSTALLPREFIX/bin/tclsh.exe &&
 strip $INSTALLPREFIX/bin/*.dll $INSTALLPREFIX/bin/*.exe &&
 # fix and install tclConfig.sh
 #sed -e "s?$INSTALLPREFIX?'\"\$MINGWPREFIX\"'?g" tclConfig.sh > $INSTALLPREFIX/bin/tclConfig.sh &&
 #sed -e "s?$INSTALLPREFIX?'\"\$(realpath \$(dirname \$0)/..)\"'?g" tclConfig.sh > $INSTALLPREFIX/bin/tclConfig.sh &&
 sed -e "s?$INSTALLPREFIX?'\"\$(realpath \$(dirname \$(if [ \"\${BASH_ARGV[0]}\" == \"\" ]; then echo \$0; else echo \${BASH_ARGV[0]}; fi))/..)\"'?g" tclConfig.sh > $INSTALLPREFIX/bin/tclConfig.sh &&
 # manually install private header
 mkdir -p $INSTALLPREFIX/include/tcl-private/generic &&
 cp ../generic/tclInt.h $INSTALLPREFIX/include/tcl-private/generic/ &&
 #wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION &&
 ## wait with clean up so tk can be built
 #( sleep 1200 || true ) &&
 #cd ../.. && rm -rf $BASENAME$VERSION
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd ../.. && rm -rf $BASENAME$VERSION




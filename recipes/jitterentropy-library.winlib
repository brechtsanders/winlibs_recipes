export NAME="jitterentropy-library"
export STATUS=
export URL=https://github.com/smuellerDD/jitterentropy-library
export BASENAME=jitterentropy-library
export DESCRIPTION="The Jitter RNG provides a noise source using the CPU execution timing jitter. It does not depend on any system resource other than a high-resolution time stamp. It is a small-scale, yet fast entropy source that is viable in almost all environments and on a lot of CPU architectures."
export CATEGORY=system
export TYPE=library
#export VERSION=3.4.1
#export VERSIONDATE=20230109
#export VERSION=3.5.0
#export VERSIONDATE=20240602
#export VERSION=3.6.0
#export VERSIONDATE=20240918
#export VERSION=3.6.1
#export VERSIONDATE=20241213
#export VERSION=3.6.2
#export VERSIONDATE=20250316
export VERSION=3.6.3
export VERSIONDATE=20250421
wl-showstatus --package-version
export DEPENDENCIES=
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=BSD
export DOWNLOADURL="https://github.com/smuellerDD/jitterentropy-library/tags"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/smuellerDD/jitterentropy-library/archive/refs/tags/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd $BASENAME-$VERSION
#wl-showstatus build &&
# make CC=${CC:-gcc} &&
#    echo OK
# skip invalid flag
sed -i.bak -e "s/-Wl,-z,relro,-z,now//" CMakeLists.txt
## skip building tests
#sed -i.bak2 -e "s?^add_subdirectory(tests?#&?" CMakeLists.txt
mkdir -p build_static build_shared &&
 wl-showstatus configure &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DSTACK_PROTECTOR:BOOL=OFF -S. -Bbuild_static &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DSTACK_PROTECTOR:BOOL=OFF -DCMAKE_POLICY_VERSION_MINIMUM:STRING=3.5 -S. -Bbuild_static &&
 wl-showstatus configure &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DSTACK_PROTECTOR:BOOL=OFF -S. -Bbuild_shared &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DSTACK_PROTECTOR:BOOL=OFF -DCMAKE_POLICY_VERSION_MINIMUM:STRING=3.5 -S. -Bbuild_shared &&
 # remove optimizations (version >= 3.6.1)
 sed -i.bak -e "s/-O[^0]/-O0/g" $(grep -rwl "\-O[^0]" build_{static,shared}) &&
 wl-showstatus build &&
 ninja -Cbuild_static &&
 wl-showstatus build &&
 ninja -Cbuild_shared &&
 strip build_shared/*.dll &&
 #wl-showstatus build-install &&
 #ninja -Cbuild_static install/strip &&
 #wl-showstatus build-install &&
 #ninja -Cbuild_shared install/strip &&
 wl-showstatus install &&
 mkdir -p $INSTALLPREFIX/include $INSTALLPREFIX/lib $INSTALLPREFIX/bin &&
 cp -f *.h $INSTALLPREFIX/include/ &&
 cp -f build_static/*.a build_shared/*.a $INSTALLPREFIX/lib/ &&
 cp -f build_shared/*.dll $INSTALLPREFIX/bin/ &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




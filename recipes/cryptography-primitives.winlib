export NAME="cryptography-primitives"
export STATUS=
export URL=https://github.com/intel/cryptography-primitives
export BASENAME=cryptography-primitives
export DESCRIPTION="Intel(R) Cryptography Primitives Library is a secure, fast and lightweight library of building blocks for cryptography, highly-optimized for various Intel(R) CPUs."
export CATEGORY=security,hardware
export TYPE=library
#export VERSION=1.0.0
#export VERSIONDATE=20241017
#export VERSION=1.0.1
#export VERSIONDATE=20241212
#export VERSION=1.1.0
#export VERSIONDATE=20250226
export VERSION=1.2.0
export VERSIONDATE=20250531
wl-showstatus --package-version
export DEPENDENCIES=
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja,nasm
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=Apache
export DOWNLOADURL="https://github.com/intel/cryptography-primitives/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/intel/cryptography-primitives/archive/refs/tags/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd $BASENAME-$VERSION
## fix missing winres.h in sources/include/ippres.gen (version <= 2020u3)
#patch -ulbf sources/include/ippres.gen << EOF
#@@ -17,3 +17,7 @@
#
#+#ifdef __MINGW32__
#+#include <winver.h>
#+#else
# #include "winres.h"
#+#endif
#
#@@ -44,3 +48,3 @@
#             VALUE "CompanyName", "Intel Corporation.\\0"
#-            VALUE "FileVersion", STR( VERSION() ) "\\0"
#+            VALUE "FileVersion", STR_VERSION() "\\0"
#             VALUE "ProductName", IPP_LIB_SHORTNAME() ". Intel(R) Integrated Performance Primitives. " IPP_LIB_LONGNAME() ".\\0"
#EOF
## fix sources/ippcp/crypto_mb/src/common/crypto_mb_res.gen (version >= 2021.8)
#patch -ulbf sources/ippcp/crypto_mb/src/common/crypto_mb_res.gen << EOF
#@@ -41,3 +41,3 @@
#             VALUE "CompanyName", "Intel Corporation.\\0"
#-            VALUE "FileVersion", STR( MBX_VERSION() ) "\\0"
#+            VALUE "FileVersion", "$VERSION\\0"
#             VALUE "ProductName", MBX_LIB_SHORTNAME() ". Intel(R) Integrated Performance Primitives. " MBX_LIB_LONGNAME() ".\\0"
#EOF
## fix sources/include/ippres.gen (version >= 2021.8)
#patch -ulbf sources/include/ippres.gen << EOF
#@@ -45,3 +45,3 @@
#             VALUE "CompanyName", "Intel Corporation.\\0"
#-            VALUE "FileVersion", STR( VERSION() ) "\\0"
#+            VALUE "FileVersion", STR_VERSION() "\\0"
#             VALUE "ProductName", IPP_LIB_SHORTNAME() ". Intel(R) Integrated Performance Primitives. " IPP_LIB_LONGNAME() ".\\0"
#EOF
# fix sources/include/owndefs.h (version >= 1.0.0)
patch -ulbf sources/include/owndefs.h << EOF
@@ -74,3 +74,3 @@
 #if defined( IPP_W32DLL )
-  #if defined( _MSC_VER ) || defined( __INTEL_COMPILER ) || defined(__INTEL_LLVM_COMPILER)
+  #if defined( _WIN32 ) || defined( __INTEL_COMPILER ) || defined(__INTEL_LLVM_COMPILER)
     #define IPPDEF(type) __declspec(dllexport) type
@@ -233,3 +233,3 @@
 #if defined( IPP_W32DLL )
-  #if defined( _MSC_VER ) || defined( __INTEL_COMPILER ) || defined(__INTEL_LLVM_COMPILER)
+  #if defined( _WIN32 ) || defined( __INTEL_COMPILER ) || defined(__INTEL_LLVM_COMPILER)
     #define IPPFUN(type,name,arg) __declspec(dllexport) type IPP_CALL name arg
EOF
# fix missing __int64 in include/ippcpdefs.h
mv include/ippcpdefs.h include/ippcpdefs.h.bak &&
echo "#include <sys/types.h>" > include/ippcpdefs.h &&
cat include/ippcpdefs.h.bak >> include/ippcpdefs.h
# fix invalid __asm in sources/dispatcher/gen_disp_win32.py
#sed -i.bak -e "s/__asm {{\(.*\)}}/__asm__ (\\\\\"\1\\\\\\\\n\\\\\");/" sources/dispatcher/gen_disp_win32.py
#mv sources/dispatcher/gen_disp_win32.py sources/dispatcher/gen_disp_win32.py.bak &&
#grep -v "global " sources/dispatcher/gen_disp_lin32.py > sources/dispatcher/gen_disp_win32.py
#cat sources/dispatcher/gen_disp_lin32.py > sources/dispatcher/gen_disp_win32.py
cat sources/dispatcher/gen_disp_lin32.nonpic.py > sources/dispatcher/gen_disp_win32.py
# avoid installing in lib32 and bin32 folders (version >= 2021.9.0)
sed -i.bak -e "s/\(lib\|bin\)32/\1/" sources/cmake/ippcp-gen-pkg-config.cmake sources/cmake/ippcp-gen-config.cmake include/ippcpdefs.h
## fix sources/ippcp/crypto_mb/dispatcher/gen_disp_common_crypto_mb.py
#sed -i.bak -e "s?\(re\.sub(\s*\)\([^,]*, \s*\)\([^,]*,\)?\1r\2r\3?; s?\(re\.match(\s*\)\([^,]*,\)?\1r\2?" sources/ippcp/crypto_mb/dispatcher/gen_disp_common_crypto_mb.py
# fix GCC build flags (version >= 2021.8)
#cp -u sources/cmake/windows/GNU8.2.0.cmake sources/cmake/windows/GNU.cmake
cp -u sources/ippcp/crypto_mb/src/cmake/linux/GNU.cmake sources/ippcp/crypto_mb/src/cmake/windows/GNU.cmake
#sed -i.bak -e "s?/Od??" sources/ippcp/crypto_mb/src/CMakeLists.txt
# fix sources/ippcp/crypto_mb/src/CMakeLists.txt (version >= 1.1.0)
patch -ulbf sources/ippcp/crypto_mb/src/CMakeLists.txt << EOF
@@ -93,3 +93,3 @@

-if("\${OS_STRING}" STREQUAL "windows")
+if("\${OS_STRING}" STREQUAL "windows" AND NOT MINGW)
     set_source_files_properties(\${CPU_FEATURES_FILE} PROPERTIES  COMPILE_FLAGS  "\${CMAKE_C_FLAGS_SECURITY} /Od")
EOF
# avoid -z linker flags in sources/ippcp/crypto_mb/src/cmake/windows/GNU.cmake (version >= 1.1.0)
sed -i.bak -e "s/-Wl,-z,[^ \"]*//g" sources/ippcp/crypto_mb/src/cmake/windows/GNU.cmake
# fix missing file
####Bug reported: https://github.com/intel/cryptography-primitives/issues/94
cp -f sources/cmake/linux/GNU8.2.0.cmake sources/cmake/windows/GNU8.2.0.cmake &&
grep "^set(.*_opt" sources/cmake/linux/GNU8.2.0.cmake >> sources/cmake/windows/GNU8.2.0.cmake &&
cat >> sources/cmake/windows/GNU8.2.0.cmake << EOF
set(LINK_FLAG_STATIC_WINDOWS " ")
set(LINK_FLAG_DYNAMIC_WINDOWS " ")
set(CMAKE_C_FLAGS "\${CMAKE_C_FLAGS} -DIPP_W32DLL")
EOF
mkdir -p build_win &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DARCH:STRING=$(if ( echo $RUNPLATFORM | grep -q "^i.86" ); then echo "ia32"; else echo "intel64"; fi) -DPython_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DBUILD_EXAMPLES:BOOL=OFF -DCMAKE_ASM_NASM_COMPILER:FILEPATH=$(which nasm.exe) -DCMAKE_C_FLAGS:STRING="$(if ${CC:-gcc} --help -v 2>/dev/null|grep -q "\-Wint-conversion" || ${CC:-gcc} --version|grep -q "^clang"; then echo "-Wno-error=int-conversion"; fi)" -S. -Bbuild_win &&
 wl-showstatus build-install &&
 ninja -Cbuild_win install/strip &&
 cp -u build_win/.build/RELEASE/lib/*.dll.a $INSTALLPREFIX/lib/ &&
 mkdir -p $INSTALLPREFIX/bin &&
 mv -f $INSTALLPREFIX/lib/intel64/*.dll $INSTALLPREFIX/bin/ &&
 mv -f $INSTALLPREFIX/lib/intel64/*.a $INSTALLPREFIX/lib/ &&
 rmdir $INSTALLPREFIX/lib/intel64 &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
####TO DO: build fails on Windows 32-bit




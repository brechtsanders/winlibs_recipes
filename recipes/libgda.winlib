#export NAME="libgda"
#export STATUS=
#export URL=http://www.gnome-db.org/
#export BASENAME=libgda
#export DESCRIPTION="libgda is a GUI-independant library for developing database applications"
#export CATEGORY=db
#export TYPE=library
##export VERSION=3.0.2
#export VERSION=3.0.3
##export VERSION=3.0.4
##export VERSION=3.1.4
##export VERSION=3.1.5
##### undefined reference to `gda_vprovider_data_model_new'
##### undefined reference to `gda_server_provider_create_connection'
##export VERSION=3.99.2
##export VERSION=3.99.3
##### undefined reference to `gda_postgres_render_DROP_VIEW'
##### undefined reference to `gda_data_model_bdb_new'
##export VERSION=3.99.5
##export VERSION=3.99.6
##export VERSION=3.99.8
##export VERSION=3.99.9
##export VERSION=3.99.10
##export VERSION=3.99.11
##export VERSION=3.99.12
##export VERSION=3.99.13
##export VERSION=3.99.14
##export VERSION=4.0.0
##export VERSION=4.0.1
##export VERSION=4.0.2
##export VERSION=4.0.3
##export VERSION=4.0.4
##export VERSION=4.0.5
##export VERSION=4.0.6
##export VERSION=4.0.8
##export VERSION=4.0.9
##export VERSION=4.0.11
##export VERSION=4.0.12
#####providers/mysql/.libs/gda-mysql-parser.o:gda-mysql-parser.c:(.text+0xfb): undefined reference to `gda_lemon_mysql_parserTrace'
#####providers/mysql/.libs/gda-mysql-provider.o:gda-mysql-provider.c:(.text+0x3acb): undefined reference to `mysql_set_character_set@8'
##export VERSION=4.1.0
##export VERSION=4.1.1
##export VERSION=4.1.3
##export VERSION=4.1.4
##export VERSION=4.1.6
##export VERSION=4.1.8
##### tools/Makefile LDFLAGS = -lreadline -lcurses
##export VERSION=4.1.10
#####Cannot export gda_transaction_status_dump: symbol not defined
##export VERSION=4.1.11
##export VERSION=4.2.0
##export VERSIONDATE=20101019
#####.libs/gda-mysql-provider.o:gda-mysql-provider.c:(.text+0x1a74): undefined reference to `mysql_set_character_set@8'
#export VERSIONDATE=
#wl-showstatus --package-version
#export DEPENDANCIES=pthreads,glib2,gettext,libxml2
#export OPTIONALDEPENDANCIES=
#export BUILDDEPENDANCIES=
#export LICENSEFILE=COPYING.LIB
#export LICENSETYPE=GPL2
#export DOWNLOADURL="http://ftp.gnome.org/pub/GNOME/sources/libgda/"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://ftp.gnome.org/pub/GNOME/sources/libgda/`echo $VERSION|sed 's/^\([0-9]*\.[0-9]*\)\..*$/\1/'`/libgda-$VERSION.tar.bz2
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#tar xfj $TARBALLDIR/$BASENAME/libgda-$VERSION.tar.bz2
#cd libgda-$VERSION
## fix for strtok_r missing on win32
#cat >> libgda/gda-decl.h << EOF
##ifdef G_OS_WIN32
#  //#define strtok_r(s,d,p) strtok(s,d)
#  // on Windows strtok() is also multithreading-safe (but not stateless, still uses only one buffer pointer per thread).
#  #define strtok_r(s,sep,lasts) (*(lasts)=strtok((s),(sep)))
##endif
#EOF
## fix to use g_mkstemp instead of mkstemp
#mv tools/gda-inspect-dict-file.c tools/gda-inspect-dict-file.c.bak
#sed -e 's/mkstemp/g_mkstemp/g' tools/gda-inspect-dict-file.c.bak > tools/gda-inspect-dict-file.c
#mv testing/gda-test-sql.c testing/gda-test-sql.c.bak
#sed -e 's/mkstemp/g_mkstemp/g' testing/gda-test-sql.c.bak > testing/gda-test-sql.c
#mv testing/gda-test-model-query.c testing/gda-test-model-query.c.bak
#sed -e 's/mkstemp/g_mkstemp/g' testing/gda-test-model-query.c.bak > testing/gda-test-model-query.c
## fix for detection location of FreeTDS, ODBC and Oracle, and remove -ldl from Oracle libraries
#mv configure configure.bak
#sed -e 's?$d/$lib/libtds$libext?$d/lib/libtds.a?g; s?/w32api/?/?g; s?lib/libclntsh.so?lib/libclntsh.dll.a?; s?\(ORACLE_LIBS=.*\) -ldl ?\1 ?' configure.bak > configure
## fix for type problems with ODBC
#mv providers/odbc/gda-odbc.h providers/odbc/gda-odbc.h.bak
#sed -e 's/#if defined(__CYGWIN__)/#if defined(G_PLATFORM_WIN32)/' providers/odbc/gda-odbc.h.bak > providers/odbc/gda-odbc.h
#mv providers/odbc/gda-odbc-provider.h providers/odbc/gda-odbc-provider.h.bak
#sed -e 's/#ifdef __CYGWIN__/#if defined(G_PLATFORM_WIN32)/' providers/odbc/gda-odbc-provider.h.bak > providers/odbc/gda-odbc-provider.h
## fix for missing my_config.h
#touch providers/mysql/my_config.h
## fix for missing definition of SOCKET
#echo "#include <winsock.h>" >> providers/mysql/gda-mysql-provider.h
### fix libraries required for Oracle
##mv providers/oracle/Makefile providers/oracle/Makefile.bak
##sed -e "s/ -lm -ldl -lclntsh/ -loci/" providers/oracle/Makefile.bak > providers/oracle/Makefile
### fix libraries required for Firebird
##mv providers/firebird/Makefile providers/firebird/Makefile.bak
##sed -e "s/ -lgds -ldl/ -lfbclient/" providers/firebird/Makefile.bak> providers/firebird/Makefile
### fix for FreeTDS
##mv /lib/libtds.la /lib/libtds.la.bak
##cp /lib/libsybdb.la /lib/libtds.la
## fix undefined gda_transaction_status_dump (version >= 4.1.10)
#mv libgda/libgda.symbols libgda/libgda.symbols.bak
#grep -v gda_transaction_status_dump libgda/libgda.symbols.bak > libgda/libgda.symbols
##libgda/libgda.def
##wl-showstatus configure &&
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --disable-static --enable-shared --with-postgres=$MINGWDIR CFLAGS="-I$MINGWPREFIX/include/glib-2.0 -DLIBGDA_WIN32 -Duint=guint" LDFLAGS="-L$MINGWPREFIX/lib/glib-2.0" GMSGFMT=$MINGWPREFIX/bin/msgfmt MSGFMT=$MINGWPREFIX/bin/msgmerge XGETTEXT=$MINGWPREFIX/bin/xgettext
##export OBJDUMP=objdump
#INTLTOOL_PERL="$PERLDIR/bin/perl.exe -I$PERLDIR/lib" ORACLE_HOME=$MINGWPREFIX ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --disable-static --enable-shared --without-unique \
#  --with-firebird=$MINGWPREFIX \
#  --with-tds=$MINGWPREFIX \
#  --with-mysql=$MINGWPREFIX \
#  --with-odbc=$MINGWPREFIX \
#  --with-oracle=$MINGWPREFIX \
#  --with-postgres=$MINGWPREFIX \
#  --with-xbase=$MINGWPREFIX \
#  --with-bdb=$MINGWPREFIX \
#  --with-mdb=$MINGWPREFIX \
#  CFLAGS="-DLIBGDA_WIN32 -I$MINGWPREFIX/include/glib-2.0 -I$MINGWPREFIX/include/mysql -I$MINGWPREFIX/include/oracle -Duint=guint" \
#  LDFLAGS="-Wl,--allow-multiple-definition -Wl,--enable-auto-import" \
#  GMSGFMT=$MINGWPREFIX/bin/msgfmt MSGFMT=$MINGWPREFIX/bin/msgmerge XGETTEXT=$MINGWPREFIX/bin/xgettext
#
##INTLTOOL_PERL="$PERLDIR/bin/perl.exe -I$PERLDIR/lib" ORACLE_HOME=$MINGWPREFIX ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --disable-static --enable-shared && make install
#
##rm $MINGWPREFIX/lib/libtds.so $MINGWPREFIX/lib/libclntsh.so
### fix for badly generated libgda/gda-enum-types.h (contains Windows path and /n on comment lines)
##mv libgda/Makefile libgda/Makefile.bak
##sed 's/--fprod \".*[^\\]\"//' libgda/Makefile.bak > libgda/Makefile
### fix for MySQL provider not linking with MySQL
##mv providers/mysql/Makefile providers/mysql/Makefile.bak
###sed -e 's/^LDFLAGS = */LDFLAGS = -lmysql /' providers/mysql/Makefile.bak > providers/mysql/Makefile
##sed -e 's/^\(MYSQL_LIBS = .*\)$/\1 -lmysql /' providers/mysql/Makefile.bak > providers/mysql/Makefile
## fix for FreeTDS provider not linking with FreeTDS
#mv providers/freetds/Makefile providers/freetds/Makefile.bak
##sed -e 's/^LDFLAGS = */LDFLAGS = -lwsock32 -liconv /' providers/freetds/Makefile.bak > providers/freetds/Makefile
##sed -e 's/^\(FREETDS_LIBS = .*\)$/\1 -lwsock32 -liconv /' providers/freetds/Makefile.bak > providers/freetds/Makefile
#sed -e 's/^\(FREETDS_LIBS = .*\)$/\1 -lws2_32 -liconv /' providers/freetds/Makefile.bak > providers/freetds/Makefile
#
## change libgda/Makefile to make LIBGDA_PLUGINDIR point to a better location
#mv libgda/Makefile libgda/Makefile.bak
#sed -e 's?\(-DLIBGDA_PLUGINDIR=\)[^ ]*?\1\\\"providers\\\"?' libgda/Makefile.bak > libgda/Makefile
#
## fix for parameters surrounded by @ generated by mysql_config
#mv providers/mysql/Makefile providers/mysql/Makefile.bak
#sed -e 's/@[_a-z]*@//gi; s?"/MT" "/Zi" "/O2" "/Ob1" "/D" "NDEBUG"?-O2 -DNDEBUG?; s?"/wd4996"??' providers/mysql/Makefile.bak > providers/mysql/Makefile
#
## linking applications may need to be compiled with -dlopen
#
## to work around the "/usr/bin/env: perl -w: No such file or directory" error:
##   ln -s `which perl.exe` '/usr/local/bin/perl -w'
##   => seems to be a bug in /usr/local/bin/glib-mkenums
##   => replace "#!/usr/bin/env perl -w" with "#!/usr/bin/env - perl -w"
##   => maybe can be solved with: export PERL=`which perl`
#
## to fix the badly generated libgda/gda-enum-types.h (replace "C:/Prog/MinGW-mSys/*" with "/*" and "*//n" with "*/"):
##   mv libgda/gda-enum-types.h libgda/gda-enum-types.h.orig
##   sed -e 's/^.:\/.*\(\/\*.*\*\/\)\/n$/\1/' libgda/gda-enum-types.h.orig > libgda/gda-enum-types.h
##   => or 2x remove '--fprod "/* enumerations from \"@filename@\" */\n"' from libgda/Makefile.am
#
## dirty workaround for missing libgda_graph-3.0.la and libgda_handlers-3.0.la
##sed -e 's/libgda_sql_delimiter/libgda_graph/g' libgda/sql-delimiter/libgda_sql_delimiter-3.0.la > win32/libgda_graph-3.0.la
##sed -e 's/libgda_sql_delimiter/libgda_handlers/g' libgda/sql-delimiter/libgda_sql_delimiter-3.0.la > win32/libgda_handlers-3.0.la
## workaround for misplaced libgda_sql_delimiter-3.0.dll.a
##ln -s libgda/sql-delimiter/.libs/libgda_sql_delimiter-3.0.dll.a win32/.libs/libgda_sql_delimiter-3.0.dll.a
#
## fix undefined reference to rl_set_signals in tools-input.c
#echo "#define rl_set_signals() ;" >> tools/tools-input.h
#
### fix undetected windres
##mv tools/Makefile tools/Makefile.bak
##sed -e "s/^\(WINDRES *= *\)$/\1windres/" tools/Makefile.bak > tools/Makefile
#
## fix dynamic link warnings causing .DLLs not to be generates (version = ?, experimental)
#patch -ulbf libtool << EOF
#--- libtool  Mon Mar  9 23:40:36 2009
#+++ libtool  Mon Mar  9 23:40:37 2009
#@@ -3095,6 +3095,12 @@
#     *MS\ Windows\ PE\ Intel*)
#       win32_libid_type="x86 DLL"
#       ;;
#+    *MS-DOS\ executable*) # ugh! some DLLs built on Windows
#+      win32_libid_type="x86 DLL"
#+      ;;
#+    *PE32*DLL*)
#+      win32_libid_type="x86 DLL"
#+      ;;
#     esac
#     ;;
#   esac
#EOF
#
#make all install-strip
##OBJDUMP=objdump make install
#
#cd tools
#ln -s ../../inst_libgda-$VERSION/lib/libgda-?.0/providers .
##GDA_PROVIDERS_ROOT_DIR=$INSTALLPREFIX/lib/libgda-3.0/providers
##./gda-list-config-?.0
#$INSTALLPREFIX/bin/gda-list-config-?.0.exe
#./gda-diagnose-?.0
# start GDA_DIAGNOSE_OUTPUT/index.html &
#./gda-author-dict-file-?.0 -p SQLite -c "DB_DIR=.;DB_NAME=test_db" -o test_db_dict.xml
#./gda-inspect-dict-file-?.0 test_db_dict.xml
#rm -rf providers
#cd ..
#
##cd tests/queries
##make check
##cp *.xml /
##check_delimiter.exe
##check_gdaquery.exe
##rm /*.xml
##cd ../..
#
###mv -f $INSTALLPREFIX/include/libgda-3.0/* $INSTALLPREFIX/include/
##cp -rfp $INSTALLPREFIX/include/libgda-3.0/* $INSTALLPREFIX/include/
###rmdir $INSTALLPREFIX/include/libgda-3.0
###mv -f $INSTALLPREFIX/lib/libgda-3.0/* $INSTALLPREFIX/lib/
##cp -rfp $INSTALLPREFIX/lib/libgda-3.0/* $INSTALLPREFIX/lib/
###rmdir $INSTALLPREFIX/lib/libgda-3.0
#wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION
#cd ..
#
##mv libgda/Makefile libgda/Makefile.bak
##sed -e "s?\(-L$MINGWDIR/lib\)?\1 -L$MINGWDIR/bin?g" libgda/Makefile.bak > libgda/Makefile
#
## fix redefinition of uint8_t in tools/web-server.c (version >= 4.0.1)
#patch -ulbf tools/web-server.c << EOF
#--- tools/web-server.c  Tue Mar 24 20:41:30 2009
#+++ tools/web-server.c  Wed Apr  1 13:48:55 2009
#@@ -477,3 +477,3 @@
#
#-#ifdef G_OS_WIN32
#+#if defined(G_OS_WIN32) && !defined(__MINGW32__)
# typedef guint8 uint8_t;
#EOF



#export NAME="libgda"
#export STATUS=
#export URL=http://www.gnome-db.org/
#export BASENAME=libgda
#export DESCRIPTION="libgda is a GUI-independant library for developing database applications"
#export CATEGORY=db
#export TYPE=library
##export VERSION=4.2.0
##export VERSIONDATE=20101019
##export VERSION=4.2.1
##export VERSIONDATE=20101115
##export VERSION=4.2.2
##export VERSIONDATE=20101127
##export VERSION=4.2.3
##export VERSIONDATE=20110115
##export VERSION=4.2.4
##export VERSIONDATE=20110216
##export VERSION=4.2.5
##export VERSIONDATE=20110224
#####include/mdbtools.h:394: note: previous declaration of 'mdb_get_byte' was here
##export VERSION=4.2.6
##export VERSIONDATE=20110421
#####make[2]: *** No rule to make target `Gda-4.0.typelib', needed by `all-am'.  Stop.
##export VERSION=4.2.7
##export VERSIONDATE=20110505
##export VERSION=4.2.8
##export VERSIONDATE=20110602
#####tools/browser/schema-browser/table-columns.c:121: error: 'TableColumnsPrivate' has no member named 'ldap_props_shown'
##export VERSION=4.2.9
##export VERSIONDATE=20110903
##export VERSION=4.2.10
##export VERSIONDATE=20111027
##export VERSION=4.2.11
##export VERSIONDATE=20111107
##export VERSION=4.2.12
##export VERSIONDATE=20111215
#export VERSION=4.2.13
#export VERSIONDATE=20120429
##export VERSION=5.0.0
##export VERSIONDATE=20111027
##export VERSION=5.0.1
##export VERSIONDATE=20111107
##export VERSION=5.0.2
##export VERSIONDATE=20111121
##export VERSION=5.0.3
##export VERSIONDATE=20120125
##export VERSION=5.0.4
##export VERSIONDATE=20130605
#####providers/reuseable/mysql/gda-mysql-meta.c:397: undefined reference to `gda_value_new_null'
##export VERSION=5.1.0
##export VERSIONDATE=20120506
##export VERSION=5.1.1
##export VERSIONDATE=20120826
#####libgda/gda-quark-list.c:78: undefined reference to `VirtualLock'
##export VERSION=5.1.2
##export VERSIONDATE=20130317
##export VERSION=5.2.0
##export VERSIONDATE=20131112
#wl-showstatus --package-version
##export DEPENDANCIES=pthreads,glib2,gettext,libxml2,sqlite3,postgresql,mysql,gtk2,cairo,pango,gettext,readline,gdk-pixbuf,goocanvas,libsoup-2.4,libxml2,libxslt
#export DEPENDANCIES=pthreads,glib2,gettext,libxml2,sqlite3,postgresql,mariadb-client,gtk2,cairo,pango,gettext,readline,gdk-pixbuf,goocanvas,libsoup-2.4,libxml2,libxslt
#export OPTIONALDEPENDANCIES=
#export BUILDDEPENDANCIES=
#export LICENSEFILE=COPYING.LIB
#export LICENSETYPE=GPL2
#export DOWNLOADURL="http://ftp.gnome.org/pub/GNOME/sources/libgda/"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
##export DOWNLOADSOURCEURL=http://ftp.gnome.org/pub/GNOME/sources/libgda/`echo $VERSION|sed 's/^\([0-9]*\.[0-9]*\)\..*$/\1/'`/libgda-$VERSION.tar.bz2
#export DOWNLOADSOURCEURL=http://ftp.gnome.org/pub/GNOME/sources/libgda/`echo $VERSION|sed 's/^\([0-9]*\.[0-9]*\)\..*$/\1/'`/libgda-$VERSION.tar.xz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
##tar xfj $TARBALLDIR/$BASENAME/libgda-$VERSION.tar.bz2
#tar xfJ $TARBALLDIR/$BASENAME/libgda-$VERSION.tar.xz
#cd libgda-$VERSION
## fix undefined gda_transaction_status_dump (version >= 4.1.10)
#mv libgda/libgda.symbols libgda/libgda.symbols.bak
#grep -v gda_transaction_status_dump libgda/libgda.symbols.bak >> libgda/libgda.symbols
## fix missing export of gda_sql_statement_get_type
#echo " gda_sql_statement_get_type" >> libgda/libgda.symbols
## fix providers/mdb/libmdb-src/file.c (version >= 4.2.5)
#patch -ulbf providers/mdb/libmdb-src/file.c << EOF
#--- providers/mdb/libmdb-src/file.c  2011-02-22 21:41:04 +0100
#+++ providers/mdb/libmdb-src/file.c  2011-02-24 11:13:01 +0100
#@@ -292,84 +291,0 @@
#-/* really stupid, just here for consistancy */
#-unsigned char mdb_get_byte(unsigned char *buf, int offset)
#-{
#-       return buf[offset];
#-}
#-unsigned char mdb_pg_get_byte(MdbHandle *mdb, int offset)
#-{
#-       if (offset < 0 || offset+1 > mdb->fmt->pg_size) return -1;
#-       mdb->cur_pos++;
#-       return mdb->pg_buf[offset];
#-}
#-
#-int mdb_get_int16(unsigned char *buf, int offset)
#-{
#-       return buf[offset+1]*256+buf[offset];
#-}
#-int mdb_pg_get_int16(MdbHandle *mdb, int offset)
#-{
#-       if (offset < 0 || offset+2 > mdb->fmt->pg_size) return -1;
#-       mdb->cur_pos+=2;
#-       return mdb_get_int16(mdb->pg_buf, offset);
#-}
#-
#-gint32 mdb_pg_get_int24_msb(MdbHandle *mdb, int offset)
#-{
#-       gint32 l = 0;
#-       if (offset <0 || offset+3 > mdb->fmt->pg_size) return -1;
#-       mdb->cur_pos+=3;
#-       memcpy(&l, &(mdb->pg_buf[offset]), 3);
#-       return GINT32_FROM_BE(l);
#-}
#-gint32 mdb_get_int24(unsigned char *buf, int offset)
#-{
#-       gint32 l = 0;
#-       memcpy(&l, &buf[offset], 3);
#-       return GINT32_FROM_LE(l);
#-}
#-gint32 mdb_pg_get_int24(MdbHandle *mdb, int offset)
#-{
#-       if (offset <0 || offset+3 > mdb->fmt->pg_size) return -1;
#-       mdb->cur_pos+=3;
#-       return mdb_get_int24(mdb->pg_buf, offset);
#-}
#-
#-long mdb_get_int32(unsigned char *buf, int offset)
#-{
#-       guint32 l;
#-       memcpy(&l, &buf[offset], 4);
#-       return (long)GINT32_FROM_LE(l);
#-}
#-long mdb_pg_get_int32(MdbHandle *mdb, int offset)
#-{
#-       if (offset <0 || offset+4 > mdb->fmt->pg_size) return -1;
#-       mdb->cur_pos+=4;
#-       return mdb_get_int32(mdb->pg_buf, offset);
#-}
#-
#-float mdb_get_single(unsigned char *buf, int offset)
#-{
#-       union {guint32 g; float f;} f;
#-       memcpy(&f, &buf[offset], 4);
#-       f.g = GUINT32_FROM_LE(f.g);
#-       return f.f;
#-}
#-float mdb_pg_get_single(MdbHandle *mdb, int offset)
#-{
#-       if (offset <0 || offset+4 > mdb->fmt->pg_size) return -1;
#-       mdb->cur_pos+=4;
#-       return mdb_get_single(mdb->pg_buf, offset);
#-}
#-
#-double mdb_get_double(unsigned char *buf, int offset)
#-{
#-       union {guint64 g; double d;} d;
#-       memcpy(&d, &buf[offset], 8);
#-       d.g = GUINT64_FROM_LE(d.g);
#-       return d.d;
#-}
#-double mdb_pg_get_double(MdbHandle *mdb, int offset)
#-{
#-       if (offset <0 || offset+8 > mdb->fmt->pg_size) return -1;
#-       mdb->cur_pos+=8;
#-       return mdb_get_double(mdb->pg_buf, offset);
#-}
#EOF
## fix providers/mdb/libmdb-src/table.c (version >= 4.2.5)
#patch -ulbf providers/mdb/libmdb-src/table.c << EOF
#--- providers/mdb/libmdb-src/table.c  2011-02-22 21:41:04 +0100
#+++ providers/mdb/libmdb-src/table.c  2011-02-24 11:17:17 +0100
#@@ -170,15 +169,0 @@
#-guint16
#-read_pg_if_n(MdbHandle *mdb, unsigned char *buf, int *cur_pos, int len)
#-{
#-       if (*cur_pos + len < mdb->fmt->pg_size) {
#-               memcpy(buf, &mdb->pg_buf[*cur_pos], len);
#-               return 0;
#-       } else {
#-               int half = mdb->fmt->pg_size - *cur_pos;
#-               memcpy(buf, &mdb->pg_buf[*cur_pos], half);
#-               mdb_read_pg(mdb, mdb_get_int32(mdb->pg_buf,4));
#-               memcpy(buf + half, &mdb->pg_buf[8], len - half);
#-               *cur_pos = 8 - half;
#-               return 1;
#-       }
#-}
#EOF
## fix providers/mdb/libmdb-src/data.c (version >= 4.2.5)
#patch -ulbf providers/mdb/libmdb-src/data.c << EOF
#--- providers/mdb/libmdb-src/data.c  2011-02-22 21:41:04 +0100
#+++ providers/mdb/libmdb-src/data.c  2011-02-24 11:29:06 +0100
#@@ -106,0 +107 @@
#+#if 0
#@@ -119,0 +121 @@
#+#endif
#@@ -815,59 +816,0 @@
#-char *mdb_col_to_string(MdbHandle *mdb, unsigned char *buf, int start, int datatype, int size)
#-{
#-       char *text;
#-       float tf;
#-       double td;
#-
#-       switch (datatype) {
#-               case MDB_BOOL:
#-                       /* shouldn't happen.  bools are handled specially
#-                       ** by mdb_xfer_bound_bool() */
#-               break;
#-               case MDB_BYTE:
#-                       text = g_strdup_printf("%d", mdb_get_byte(buf, start));
#-               break;
#-               case MDB_INT:
#-                       text = g_strdup_printf("%ld",
#-                               (long)mdb_get_int16(buf, start));
#-               break;
#-               case MDB_LONGINT:
#-                       text = g_strdup_printf("%ld",
#-                               mdb_get_int32(buf, start));
#-               break;
#-               case MDB_FLOAT:
#-                       tf = mdb_get_single(mdb->pg_buf, start);
#-                       text = g_strdup_printf("%.*f",
#-                               FLT_DIG - floor_log10(tf,1) - 1, tf);
#-                       trim_trailing_zeros(text);
#-               break;
#-               case MDB_DOUBLE:
#-                       td = mdb_get_double(mdb->pg_buf, start);
#-                       text = g_strdup_printf("%.*f",
#-                               DBL_DIG - floor_log10(td,0) - 1, td);
#-                       trim_trailing_zeros(text);
#-               break;
#-               case MDB_TEXT:
#-                       if (size<0) {
#-                               text = g_strdup("");
#-                       } else {
#-                               text = (char *) g_malloc(MDB_BIND_SIZE);
#-                               mdb_unicode2ascii(mdb, mdb->pg_buf + start,
#-                                       size, text, MDB_BIND_SIZE);
#-                       }
#-               break;
#-               case MDB_SDATETIME:
#-                       text = mdb_date_to_string(mdb, start);
#-               break;
#-               case MDB_MEMO:
#-                       text = mdb_memo_to_string(mdb, start, size);
#-               break;
#-               case MDB_MONEY:
#-                       text = mdb_money_to_string(mdb, start);
#-               case MDB_NUMERIC:
#-               break;
#-               default:
#-                       text = g_strdup("");
#-               break;
#-       }
#-       return text;
#-}
#EOF
## fix providers/mdb/libmdb-src/backend.c (version >= 4.2.5)
#patch -ulbf providers/mdb/libmdb-src/backend.c << EOF
#--- providers/mdb/libmdb-src/backend.c  2011-02-22 21:41:04 +0100
#+++ providers/mdb/libmdb-src/backend.c  2011-02-24 11:56:22 +0100
#@@ -204,23 +203,0 @@
#-/**
#- * mdb_set_default_backend
#- * @mdb: Handle to open MDB database file
#- * @backend_name: Name of the backend to set as default
#- *
#- * Sets the default backend of the handle @mdb to @backend_name.
#- *
#- * Returns: 1 if successful, 0 if unsuccessful.
#- */
#-int mdb_set_default_backend(MdbHandle *mdb, char *backend_name)
#-{
#-       MdbBackend *backend;
#-
#-       backend = (MdbBackend *) g_hash_table_lookup(mdb_backends, backend_name);
#-       if (backend) {
#-               mdb->default_backend = backend;
#-               mdb->backend_name = (char *) g_strdup(backend_name);
#-               is_init = 0;
#-               return 1;
#-       } else {
#-               return 0;
#-       }
#-}
#EOF
## fix providers/mdb/libmdb-src/index.c (version >= 4.2.5)
#patch -ulbf providers/mdb/libmdb-src/index.c << EOF
#--- providers/mdb/libmdb-src/index.c  2011-02-22 21:41:04 +0100
#+++ providers/mdb/libmdb-src/index.c  2011-02-24 13:25:42 +0100
#@@ -167,13 +166,0 @@
#-void
#-mdb_index_hash_text(guchar *text, guchar *hash)
#-{
#-       unsigned int k;
#-
#-       for (k=0;k<strlen(text);k++) {
#-               hash[k] = idx_to_text[text[k]];
#-               if (!(hash[k])) fprintf(stderr,
#-                               "No translation available for %02x %d\n",
#-                               text[k],text[k]);
#-       }
#-       hash[strlen(text)]=0;
#-}
#EOF
## fix providers/mdb/libmdb-src/write.c (version >= 4.2.5)
#patch -ulbf providers/mdb/libmdb-src/write.c << EOF
#--- providers/mdb/libmdb-src/write.c  2011-02-22 21:41:04 +0100
#+++ providers/mdb/libmdb-src/write.c  2011-02-24 13:29:16 +0100
#@@ -457,15 +456,0 @@
#-unsigned char *
#-mdb_new_data_pg(MdbCatalogEntry *entry)
#-{
#- MdbFormatConstants *fmt = entry->mdb->fmt;
#- unsigned char *new_pg;
#-
#- new_pg = (unsigned char *) g_malloc0(fmt->pg_size);
#-  
#- new_pg[0]=0x01;
#- new_pg[1]=0x01;
#- _mdb_put_int16(new_pg, 2, fmt->pg_size - fmt->row_count_offset - 2);
#- _mdb_put_int32(new_pg, 4, entry->table_pg);
#- 
#- return new_pg;
#-}
#@@ -711,62 +695,0 @@
#- return 0;
#-}
#-int 
#-mdb_replace_row(MdbTableDef *table, int row, unsigned char *new_row, int new_row_size)
#-{
#-MdbCatalogEntry *entry = table->entry;
#-MdbHandle *mdb = entry->mdb;
#-int pg_size = mdb->fmt->pg_size;
#-int rco = mdb->fmt->row_count_offset;
#-unsigned char *new_pg;
#-guint16 num_rows;
#-int row_start, row_size;
#-int i, pos;
#-
#- if (mdb_get_option(MDB_DEBUG_WRITE)) {
#-  buffer_dump(mdb->pg_buf, 0, 39);
#-  buffer_dump(mdb->pg_buf, pg_size - 160, pg_size-1);
#- }
#- mdb_debug(MDB_DEBUG_WRITE,"updating row %d on page %lu", row, (unsigned long) table->cur_phys_pg);
#- new_pg = mdb_new_data_pg(entry);
#-
#- num_rows = mdb_get_int16(mdb->pg_buf, rco);
#- _mdb_put_int16(new_pg, rco, num_rows);
#-
#- pos = pg_size;
#-
#- /* rows before */
#- for (i=0;i<row;i++) {
#-  mdb_find_row(mdb, i, &row_start, &row_size);
#-  pos -= row_size;
#-  memcpy(&new_pg[pos], &mdb->pg_buf[row_start], row_size);
#-  _mdb_put_int16(new_pg, rco + 2 + i*2, pos);
#- }
#- 
#- /* our row */
#- pos -= new_row_size;
#- memcpy(&new_pg[pos], new_row, new_row_size);
#- _mdb_put_int16(new_pg, rco + 2 + row*2, pos);
#- 
#- /* rows after */
#- for (i=row+1;i<num_rows;i++) {
#-  mdb_find_row(mdb, i, &row_start, &row_size);
#-  pos -= row_size;
#-  memcpy(&new_pg[pos], &mdb->pg_buf[row_start], row_size);
#-  _mdb_put_int16(new_pg, rco + 2 + i*2, pos);
#- }
#-
#- /* almost done, copy page over current */
#- memcpy(mdb->pg_buf, new_pg, pg_size);
#-
#- g_free(new_pg);
#-
#- _mdb_put_int16(mdb->pg_buf, 2, mdb_pg_get_freespace(mdb));
#- if (mdb_get_option(MDB_DEBUG_WRITE)) {
#-  buffer_dump(mdb->pg_buf, 0, 39);
#-  buffer_dump(mdb->pg_buf, pg_size - 160, pg_size-1);
#- }
#- /* drum roll, please */
#- if (!mdb_write_pg(mdb, table->cur_phys_pg)) {
#-  fprintf(stderr, "write failed! exiting...\n");
#-  exit(1);
#- }
#EOF
## fix providers/mdb/libmdb-src/iconv.c (version >= 4.2.5)
#patch -ulbf providers/mdb/libmdb-src/iconv.c << EOF
#--- providers/mdb/libmdb-src/iconv.c  2011-02-22 21:41:04 +0100
#+++ providers/mdb/libmdb-src/iconv.c  2011-02-24 13:32:06 +0100
#@@ -27,10 +26,0 @@
#-/*
#- * This function is used in reading text data from an MDB table.
#- */
#-int
#-mdb_unicode2ascii(MdbHandle *mdb, unsigned char *src, unsigned int slen, unsigned char *dest, unsigned int dlen)
#-{
#- unsigned char *tmp = NULL;
#- size_t tlen = 0;
#- size_t len_in, len_out;
#- char *in_ptr, *out_ptr;
#@@ -38,141 +27,0 @@
#- if ((!src) || (!dest))
#-  return 0;
#-
#- /* Uncompress 'Unicode Compressed' string into tmp */
#- if (IS_JET4(mdb) && (slen>=2) && (src[0]==0xff) && (src[1]==0xfe)) {
#-  unsigned int compress=1;
#-  src += 2;
#-  slen -= 2;
#-  tmp = (unsigned char *)g_malloc(slen*2);
#-  while (slen) {
#-   if (*src == 0) {
#-    compress = (compress) ? 0 : 1;
#-    src++;
#-    slen--;
#-   } else if (compress) {
#-    tmp[tlen++] = *src++;
#-    tmp[tlen++] = 0;
#-    slen--;
#-   } else if (slen >= 2){
#-    tmp[tlen++] = *src++;
#-    tmp[tlen++] = *src++;
#-    slen-=2;
#-   }
#-  }
#- }
#-
#- in_ptr = (char *)((tmp) ? tmp : src);
#- out_ptr = (char *)dest;
#- len_in = (tmp) ? tlen : slen;
#- len_out = dlen;
#-
#-#if HAVE_ICONV
#- //printf("1 len_in %d len_out %d\n",len_in, len_out);
#- while (1) {
#-  iconv(mdb->iconv_in, &in_ptr, &len_in, &out_ptr, &len_out);
#-  if ((!len_in) || (errno == E2BIG)) break;
#-  /* Don't bail if impossible conversion is encountered */
#-  in_ptr += (IS_JET4(mdb)) ? 2 : 1;
#-  len_in -= (IS_JET4(mdb)) ? 2 : 1;
#-  *out_ptr++ = '?';
#-  len_out--;
#- }
#- //printf("2 len_in %d len_out %d\n",len_in, len_out);
#- dlen -= len_out;
#-#else
#- if (IS_JET3(mdb)) {
#-  strncpy(out_ptr, in_ptr, len_in);
#-  dlen = len_in;
#- } else {
#-  /* rough UCS-2LE to ISO-8859-1 conversion */
#-  unsigned int i;
#-  for (i=0; i<len_in; i+=2)
#-   dest[i/2] = (in_ptr[i+1] == 0) ? in_ptr[i] : '?';
#-  dlen = len_in/2;
#- }
#-#endif
#-
#- if (tmp) g_free(tmp);
#- dest[dlen]='\0';
#- //printf("dest %s\n",dest);
#- return dlen;
#-}
#-
#-/*
#- * This function is used in writing text data to an MDB table.
#- * If slen is 0, strlen will be used to calculate src's length.
#- */
#-int
#-mdb_ascii2unicode(MdbHandle *mdb, unsigned char *src, unsigned int slen, unsigned char *dest, unsigned int dlen)
#-{
#-        size_t len_in, len_out;
#-        char *in_ptr, *out_ptr;
#-
#- if ((!src) || (!dest))
#-  return 0;
#-
#-        in_ptr = (char *)src;
#-        out_ptr = (char *)dest;
#-        len_in = (slen) ? slen : strlen(in_ptr);
#-        len_out = dlen;
#-
#-#ifdef HAVE_ICONV
#- iconv(mdb->iconv_out, &in_ptr, &len_in, &out_ptr, &len_out);
#- //printf("len_in %d len_out %d\n", len_in, len_out);
#- dlen -= len_out;
#-#else
#- if (IS_JET3(mdb)) {
#-  dlen = MIN(len_in, len_out);
#-  strncpy(out_ptr, in_ptr, dlen);
#- } else {
#-  unsigned int i;
#-  slen = MIN(len_in, len_out/2);
#-  dlen = slen*2;
#-  for (i=0; i<slen; i++) {
#-   out_ptr[i*2] = in_ptr[i];
#-   out_ptr[i*2+1] = 0;
#-  }
#- }
#-#endif
#-
#- /* Unicode Compression */
#- if(IS_JET4(mdb) && (dlen>4)) {
#-  unsigned char *tmp = g_malloc(dlen);
#-  unsigned int tptr = 0, dptr = 0;
#-  int comp = 1;
#-
#-  tmp[tptr++] = 0xff;
#-  tmp[tptr++] = 0xfe;
#-  while((dptr < dlen) && (tptr < dlen)) {
#-   if (((dest[dptr+1]==0) && (comp==0))
#-    || ((dest[dptr+1]!=0) && (comp==1))) {
#-    /* switch encoding mode */
#-    tmp[tptr++] = 0;
#-    comp = (comp) ? 0 : 1;
#-   } else if (dest[dptr]==0) {
#-    /* this string cannot be compressed */
#-    tptr = dlen;
#-   } else if (comp==1) {
#-    /* encode compressed character */
#-    tmp[tptr++] = dest[dptr];
#-    dptr += 2;
#-   } else if (tptr+1 < dlen) {
#-    /* encode uncompressed character */
#-    tmp[tptr++] = dest[dptr];
#-    tmp[tptr++] = dest[dptr+1];
#-    dptr += 2;
#-   } else {
#-    /* could not encode uncompressed character
#-     * into single byte */
#-    tptr = dlen;
#-   }
#-  }
#-  if (tptr < dlen) {
#-   memcpy(dest, tmp, tptr);
#-   dlen = tptr;
#-  }
#-  g_free(tmp);
#- }
#-
#- return dlen;
#-}
#EOF
### fix missing symbols (version >= 5.0.3)
##mv libgda-ui/libgda-ui.symbols libgda-ui/libgda-ui.symbols.bak
##grep -v "gdaui_entry_combo_set_unknown_color\|gdaui_entry_wrapper_set_unknown_color" libgda-ui/libgda-ui.symbols.bak > libgda-ui/libgda-ui.symbols
### fix invalid compiler parameters mysql_config
##mv providers/mysql/Makefile.in providers/mysql/Makefile.in.bak
##sed -e 's?"/MT" "/Zi" "/O2" "/Ob1" "/D" "NDEBUG"?-O2 -DNDEBUG?; s?"/wd4996"??' providers/mysql/Makefile.in.bak > providers/mysql/Makefile.in
### fix error: ImportError: No module named xml2po
##ln -sf $MINGWPREFIX/bin/xml2po $PYDIR/Lib/site-packages/xml2po.py
#####NotImplementedError
## skip making help
#cat > tools/browser/help/Makefile.in << EOF
#clean:
#all:
#install:
#install-strip:
#EOF
## skip making mdb (version >= 4.2.5)
#cat > providers/mdb/Makefile.in << EOF
#clean:
#all:
#install:
#install-strip:
#EOF
## fix problem detecting GNU gettext tools on 64-bit
#if ( echo $RUNPLATFORM | grep -q x86_64 ); then
# mv configure configure.bak
# sed -e "s/as_fn_error\(.*GNU gettext tools not found; required for intltool\)/as_echo\1/" configure.bak > configure
#fi
#wl-showstatus configure &&
##INTLTOOL_PERL="$PERLDIR/bin/perl.exe" ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --without-unique --disable-gtk-doc --without-help-dir --without-html-dir LDFLAGS="-Wl,--enable-auto-import" &&
##INTLTOOL_PERL="$PERLDIR/bin/perl.exe" ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-introspection=no --with-ldap=$MINGWPREFIX --with-postgres=$MINGWPREFIX --without-unique --disable-gtk-doc --without-help-dir --without-html-dir LDFLAGS="-Wl,--enable-auto-import" &&
##PERL="$PERLDIR/bin/perl.exe" ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-introspection=no --without-unique --disable-gtk-doc --without-help-dir --without-html-dir LDFLAGS="-Wl,--enable-auto-import" &&
#INTLTOOL_PERL="$PERLDIR/bin/perl.exe" ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-introspection=no --without-unique --disable-gtk-doc --without-help-dir --without-html-dir LDFLAGS="-Wl,--enable-auto-import" &&
#####to do: mysql, bdb
# wl-showstatus build &&
# make &&
# wl-showstatus build-install &&
# make install-strip &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf libgda-$VERSION



#export NAME="libgda"
#export STATUS=
#export URL=http://www.gnome-db.org/
#export BASENAME=libgda
#export DESCRIPTION="libgda is a GUI-independant library for developing database applications"
#export CATEGORY=db
#export TYPE=library
##export VERSION=5.1.2
##export VERSIONDATE=20130317
##export VERSION=5.2.0
##export VERSIONDATE=20131112
##export VERSION=5.2.1
##export VERSIONDATE=20131118
##export VERSION=5.2.2
##export VERSIONDATE=20131223
##export VERSION=5.2.3
##export VERSIONDATE=20150613
#export VERSION=5.2.4
#export VERSIONDATE=20150613
##export VERSION=5.2.5
##export VERSIONDATE=20180928
##export VERSION=5.2.8
##export VERSIONDATE=20181204
##export VERSION=5.2.9
##export VERSIONDATE=20190509
#####make[2]: *** No rule to make target 'Gda-5.0.gir', needed by 'libgda-5.0.vapi'.
##export VERSION=5.2.10
##export VERSIONDATE=20201109
#####make[2]: *** No rule to make target 'Gda-5.0.typelib', needed by 'all-am'.  Stop.
##export VERSION=5.90.1
##export VERSIONDATE=20180802
#####Cannot export gda_data_model_iter_get_column_for_param: symbol not defined
#wl-showstatus --package-version
##export DEPENDANCIES=pthreads,glib2,gettext,libxml2,sqlite3,postgresql,mysql,gtk3,cairo,pango,gettext,readline,gdk-pixbuf,goocanvas,libsoup-2.4,libxml2,libxslt
#export DEPENDANCIES=pthreads,glib2,gettext,libxml2,sqlite3,postgresql,mariadb-client,gtk3,cairo,pango,gettext,readline,gdk-pixbuf,goocanvas,libsoup-2.4,libxml2,libxslt
##export DEPENDANCIES=pthreads,glib2,gettext,gobject-introspection,libxml2,sqlite3,postgresql,mariadb-client,gtk3,cairo,pango,gettext,readline,gdk-pixbuf,goocanvas,libsoup-2.4,libxml2,libxslt
#export OPTIONALDEPENDANCIES=
#export BUILDDEPENDANCIES=
#export LICENSEFILE=COPYING.LIB
#export LICENSETYPE=GPL2
#export DOWNLOADURL="http://ftp.gnome.org/pub/GNOME/sources/libgda/"
##export DOWNLOADURL="https://github.com/GNOME/libgda/releases"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://ftp.gnome.org/pub/GNOME/sources/libgda/`echo $VERSION|sed 's/^\([0-9]*\.[0-9]*\)\..*$/\1/'`/libgda-$VERSION.tar.xz
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#tar xfJ $TARBALLDIR/$BASENAME/libgda-$VERSION.tar.xz
#cd libgda-$VERSION
### fix missing uint  (version >= 5.90.1)
##sed -i.bak -e "s/uint/unsigned int/" libgda/sqlite/mkkeywordhash.c
##sed -i.bak -e "s/uint/unsigned int/" libgda/sqlite/gen_emb_string.c
##sed -i.bak -e "s/uint/unsigned int/" libgda/sql-parser/lemon.c
### fix MSVC issue
##mkdir -p winfix
##cp -rf $PYDIR/lib/distutils winfix/
##patch -ulbf winfix/distutils/cygwinccompiler.py << EOF
##@@ -85,3 +85,3 @@
##         else:
##-            raise ValueError("Unknown MS Compiler version %s " % msc_ver)
##+            return None
##
##EOF
## skip making help
#cat > tools/browser/help/Makefile.in << EOF
#clean:
#all:
#install:
#install-strip:
#EOF
## skip making mdb (version >= 4.2.5)
#cat > providers/mdb/Makefile.in << EOF
#clean:
#all:
#install:
#install-strip:
#EOF
## fix problem detecting GNU gettext tools on 64-bit
#if ( echo $RUNPLATFORM | grep -q x86_64 ); then
# mv configure configure.bak
# sed -e "s/as_fn_error\(.*GNU gettext tools not found; required for intltool\)/as_echo\1/" configure.bak > configure
#fi
#wl-showstatus configure &&
#INTLTOOL_PERL="$PERLDIR/bin/perl.exe" ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-introspection=no --without-unique --disable-gtk-doc --without-help-dir --without-html-dir LDFLAGS="-Wl,--enable-auto-import" &&
##INTLTOOL_PERL="$PERLDIR/bin/perl.exe" ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-introspection=no --without-unique --disable-gtk-doc --without-help-dir --without-html-dir --disable-vala --disable-introspection LDFLAGS="-Wl,--enable-auto-import" &&
##INTLTOOL_PERL="$PERLDIR/bin/perl.exe" ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-introspection=no --with-ldap=$MINGWPREFIX --with-postgres=$MINGWPREFIX --without-unique --disable-gtk-doc --without-help-dir --without-html-dir LDFLAGS="-Wl,--enable-auto-import" &&
##PKG_CONFIG=$(which pkg-config.exe) INTLTOOL_PERL="$PERLDIR/bin/perl.exe" ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-static --enable-shared --with-ui --with-gtksourceview --with-goocanvas --with-graphviz --with-bdb=$MINGWPREFIX --with-mysql=$MINGWPREFIX --with-postgres=$MINGWPREFIX --with-ldap=$MINGWPREFIX --with-mdb=$MINGWPREFIX --enable-system-mdbtools --enable-system-sqlite --with-libsoup --with-gnome-keyring --enable-vala --enable-introspection --disable-gtk-doc LDFLAGS="-Wl,--enable-auto-import" &&
#####to do: mysql, bdb
# wl-showstatus build-install &&
# #touch libgda/Gda-5.0.typelib &&
# #touch libgda-ui/Gdaui-5.0.typelib &&
# PYTHONPATH=$MINGWPREFIX/python/Lib/site-packages${PYTHONPATH:+:$PYTHONPATH} PATH=$PYDIR:$PATH make && make install-strip &&
# #PYTHONPATH=$(pwd)/winfix:$MINGWPREFIX/lib:$MINGWPREFIX/python/Lib/site-packages${PYTHONPATH:+:$PYTHONPATH} PATH=$PYDIR:$PATH make && make install-strip &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && rm -rf libgda-$VERSION
######To do: enable all known databases
######MySQL May need CFLAGS="-DSOCKET=int"



export NAME="libgda"
export STATUS=
export URL=http://www.gnome-db.org/
export BASENAME=libgda
export DESCRIPTION="libgda is a GUI-independant library for developing database applications"
export CATEGORY=db
export TYPE=library
export VERSION=6.0.0
export VERSIONDATE=20210201
wl-showstatus --package-version
export DEPENDANCIES=pthreads,glib2,gettext,libxml2,sqlite3,postgresql,mariadb-client,gtk3,cairo,pango,gettext,readline,gdk-pixbuf,goocanvas,libsoup-2.4,libxml2,libxslt
#export DEPENDANCIES=pthreads,glib2,gettext,gobject-introspection,libxml2,sqlite3,postgresql,mariadb-client,gtk3,cairo,pango,gettext,readline,gdk-pixbuf,goocanvas,libsoup-2.4,libxml2,libxslt
export OPTIONALDEPENDANCIES=
export BUILDDEPENDANCIES=meson,ninja
export LICENSEFILE=COPYING.LIB
export LICENSETYPE=GPL2
export DOWNLOADURL="http://ftp.gnome.org/pub/GNOME/sources/libgda/"
#export DOWNLOADURL="https://github.com/GNOME/libgda/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=http://ftp.gnome.org/pub/GNOME/sources/libgda/`echo $VERSION|sed 's/^\([0-9]*\.[0-9]*\)\..*$/\1/'`/libgda-$VERSION.tar.xz
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
tar xfJ $TARBALLDIR/$BASENAME/libgda-$VERSION.tar.xz
cd libgda-$VERSION
mkdir -p build_both &&
 wl-showstatus configure &&
 PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Dui=true -Djson=true -Dsqlcipher=true -Dlibsoup=true -Dlibsecret=true -Ddoc=false -Dexamples=false . build_both &&
 # fix Python path issues in meson_exe
 #sed -i.bak -e "s?$PYDIR?$(echo $PYDIR|sed -e "s?^/\([a-zA-Z]\)/?\1:/?")?" build_both/meson-private/meson_exe_*.dat &&
 sed -i.bak -e "s?$(cygpath -m $PYDIR/python.exe|sed -e 's?/?\\\\?g')?$(cygpath -m $PYDIR/python.exe)/?" build_both/meson-private/meson_exe_*.dat &&
 # fix lemon.exe path issues in meson_exe
 sed -i.bak2 -e "s?$(cygpath -m $PWD/build_both/libgda/sql-parser/lemon.exe|sed -e 's?/?\\\\?g')?$(cygpath -m $PWD/build_both/libgda/sql-parser/lemon.exe)/?" build_both/meson-private/meson_exe_*.dat &&
 wl-showstatus build-install &&
 PATH=$PATH:$PYDIR PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib ninja -Cbuild_both install &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && rm -rf libgda-$VERSION




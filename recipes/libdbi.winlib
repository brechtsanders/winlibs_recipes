#export NAME="libdbi"
#export STATUS=
#export URL=http://libdbi.sourceforge.net/
#export BASENAME=libdbi
#export DESCRIPTION="libdbi implements a database-independent abstraction layer in C, similar to the DBI/DBD layer in Perl. Writing one generic set of code, programmers can leverage the power of multiple databases and multiple simultaneous database connections by using this framework."
#export CATEGORY=database
#export TYPE=library
##export VERSION=0.8.3
#export VERSION=0.8.4
#export VERSIONDATE=20100902
##export VERSION=0.9.0
##export VERSIONDATE=20130312
#wl-showstatus --package-version
#export DEPENDANCIES=
#export OPTIONALDEPENDANCIES=
#export BUILDDEPENDANCIES=
#export LICENSEFILE=COPYING
#export LICENSETYPE=LGPL
##export DOWNLOADURL="http://sourceforge.net/projects/libdbi/files/"
#export DOWNLOADURL="http://sourceforge.net/projects/libdbi/files/libdbi/"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://downloads.sourceforge.net/libdbi/$BASENAME-$VERSION.tar.gz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#tar xfz $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
#cd $BASENAME-$VERSION
### fix src/dbi_main.c (version >= 0.9.0)
##patch -ulbf src/dbi_main.c << EOF
##--- src/dbi_main.c  2013-01-24 23:10:18 +0100
##+++ src/dbi_main.c  2013-04-20 22:35:28 +0200
##@@ -182,5 +182,6 @@
##        else {
##+               int status;
##+#ifndef __MINGW32__
##                struct dirent *buffer;
##                size_t buffer_size;
##-               int status;
##
##@@ -198,2 +199,3 @@
##                memset (buffer, 0, buffer_size);
##+#endif
##
##@@ -201,2 +203,3 @@
##                while (42) { /* yes, we all admire Douglas Adams */
##+#ifndef __MINGW32__
##                        driver_dirent = NULL;
##@@ -206,2 +209,8 @@
##                        }
##+#else
##+                       driver_dirent = readdir (dir);
##+                       if (driver_dirent == NULL) {
##+                         break;
##+                       }
##+#endif
##
##@@ -232,3 +241,5 @@
##                closedir(dir);
##+#ifndef __MINGW32__
##                free(buffer);
##+#endif
##        }
##EOF
### fix src/dbd_helper.c (version >= 0.9.0)
##patch -ulbf src/dbd_helper.c << EOF
##--- src/dbd_helper.c  2011-08-09 13:14:14 +0200
##+++ src/dbd_helper.c  2013-04-20 22:37:08 +0200
##@@ -432,3 +432,3 @@
## #       else
##-#           error "buffer size for readdir_r cannot be determined"
##+            return 0;
## #       endif
##EOF
### fix missing gmtime_r in src/dbi_result.c (version >= 0.9.0)
##mv src/dbi_result.c src/dbi_result.c.bak
##cat > src/dbi_result.c << EOF
###include <stdlib.h>
###include <string.h>
###include <time.h>
##inline struct tm* gmtime_r (const time_t* timer, struct tm* result)
##{
##  struct tm* local_result;
##  if ((local_result = gmtime (timer)) == NULL || result == NULL)
##    return NULL;
##  memcpy (result, local_result, sizeof (result));
##  return result;
##}
##EOF
##cat src/dbi_result.c.bak >> src/dbi_result.c
### fix missing gmtime_r in src/timegm.c (version >= 0.9.0)
##mv src/timegm.c src/timegm.c.bak
##cat > src/timegm.c << EOF
###include <stdlib.h>
###include <string.h>
###include <time.h>
##inline struct tm* gmtime_r (const time_t* timer, struct tm* result)
##{
##  struct tm* local_result;
##  if ((local_result = gmtime (timer)) == NULL || result == NULL)
##    return NULL;
##  memcpy (result, local_result, sizeof (result));
##  return result;
##}
##EOF
##cat src/timegm.c.bak >> src/timegm.c
## fix for building .DLL files
#mv configure.in configure.in.bak
#echo "AC_LIBTOOL_WIN32_DLL" > configure.in
#cat configure.in.bak >> configure.in
#wl-showstatus configure &&
##autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal &&
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --disable-docs LDFLAGS="-no-undefined" &&
#./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --disable-docs LDFLAGS="-Wl,-no-undefined" &&
# wl-showstatus build-install &&
# make install &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION



export NAME="libdbi"
export STATUS=
export URL=http://libdbi.sourceforge.net/
export BASENAME=libdbi
export DESCRIPTION="libdbi implements a database-independent abstraction layer in C, similar to the DBI/DBD layer in Perl. Writing one generic set of code, programmers can leverage the power of multiple databases and multiple simultaneous database connections by using this framework."
export CATEGORY=database
export TYPE=library
export VERSION=0.9.0
export VERSIONDATE=20130312
wl-showstatus --package-version
export DEPENDANCIES=
export OPTIONALDEPENDANCIES=
export BUILDDEPENDANCIES=
export LICENSEFILE=COPYING
export LICENSETYPE=LGPL
export DOWNLOADURL="http://sourceforge.net/projects/libdbi/files/libdbi/"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=http://downloads.sourceforge.net/libdbi/$BASENAME-$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
tar xfz $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
cd $BASENAME-$VERSION
# fix src/dbi_main.c (version >= 0.9.0)
patch -ulbf src/dbi_main.c << EOF
--- src/dbi_main.c  2013-01-24 23:10:18 +0100
+++ src/dbi_main.c  2013-04-20 22:35:28 +0200
@@ -182,5 +182,6 @@
        else {
+               int status;
+#ifndef __MINGW32__
                struct dirent *buffer;
                size_t buffer_size;
-               int status;

@@ -198,2 +199,3 @@
                memset (buffer, 0, buffer_size);
+#endif

@@ -201,2 +203,3 @@
                while (42) { /* yes, we all admire Douglas Adams */
+#ifndef __MINGW32__
                        driver_dirent = NULL;
@@ -206,2 +209,8 @@
                        }
+#else
+                       driver_dirent = readdir (dir);
+                       if (driver_dirent == NULL) {
+                         break;
+                       }
+#endif

@@ -232,3 +241,5 @@
                closedir(dir);
+#ifndef __MINGW32__
                free(buffer);
+#endif
        }
EOF
# fix src/dbd_helper.c (version >= 0.9.0)
patch -ulbf src/dbd_helper.c << EOF
--- src/dbd_helper.c  2011-08-09 13:14:14 +0200
+++ src/dbd_helper.c  2013-04-20 22:37:08 +0200
@@ -432,3 +432,3 @@
 #       else
-#           error "buffer size for readdir_r cannot be determined"
+            return 0;
 #       endif
EOF
# fix missing gmtime_r in src/dbi_result.c (version >= 0.9.0)
mv src/dbi_result.c src/dbi_result.c.bak
cat > src/dbi_result.c << EOF
#include <stdlib.h>
#include <string.h>
#include <time.h>
inline struct tm* gmtime_r (const time_t* timer, struct tm* result)
{
  struct tm* local_result;
  if ((local_result = gmtime (timer)) == NULL || result == NULL)
    return NULL;
  memcpy (result, local_result, sizeof (result));
  return result;
}
EOF
cat src/dbi_result.c.bak >> src/dbi_result.c
# fix missing gmtime_r in src/timegm.c (version >= 0.9.0)
mv src/timegm.c src/timegm.c.bak
cat > src/timegm.c << EOF
#include <stdlib.h>
#include <string.h>
#include <time.h>
inline struct tm* gmtime_r (const time_t* timer, struct tm* result)
{
  struct tm* local_result;
  if ((local_result = gmtime (timer)) == NULL || result == NULL)
    return NULL;
  memcpy (result, local_result, sizeof (result));
  return result;
}
EOF
cat src/timegm.c.bak >> src/timegm.c
wl-showstatus configure &&
./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --disable-docs LDFLAGS="-Wl,-no-undefined" &&
 wl-showstatus build-install &&
 make install &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




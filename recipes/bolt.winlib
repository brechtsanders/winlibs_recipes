export NAME="Bolt"
export STATUS=
export URL=http://developer.amd.com/tools-and-sdks/opencl-zone/bolt-c-template-library/
#export URL=https://github.com/HSA-Libraries/Bolt
export BASENAME=bolt
export DESCRIPTION="Bolt is a C++ template library optimized for GPUs. Bolt provides high-performance library implementations for common algorithms such as scan, reduce, transform, and sort."
#export DESCRIPTION="Bolt is an STL compatible library of high level constructs for creating accelerated data parallel applications. Code written using STL or other STL compatible libraries (example: TBB) can be converted to Bolt in minutes. Bolt supports C++ AMP in addition to OpenCL(TM) as underlying supported compute technologies. With Bolt, kernel code to be accelerated is written in-line in the C++ source file. No OpenCL(TM) or C++ AMP API calls are required since all initialization of and communication with the OpenCL(TM) or C++ AMP device is handled by the library. Bolt includes comprehensive documentation for the library routines, memory management, control interfaces, and host/device code sharing."
export CATEGORY=development
export TYPE=library
export VERSION=1.3GA
export VERSIONDATE=20160610
wl-showstatus --package-version
export DEPENDENCIES=
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE.txt
export LICENSETYPE=Apache
export DOWNLOADURL="https://github.com/HSA-Libraries/Bolt/releases v"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/HSA-Libraries/Bolt/archive/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#mv $TARBALLDIR/$BASENAME/v$VERSION.tar.gz $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
wl-wait4deps
wl-showstatus extract
#tar xz --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
tar xz --force-local -f $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd Bolt-$VERSION
mkdir -p build &&
 wl-showstatus configure &&
 cd build &&
 #cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_StripSymbols:BOOL=OFF -DBUILD_UNICODE:BOOL=ON -DBUILD_tests:BOOL=OFF .. &&
 #cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_StripSymbols:BOOL=OFF -DBUILD_UNICODE:BOOL=ON -DBUILD_tests:BOOL=OFF -DBUILD_benchmarks:BOOL=OFF -DBOOST_ROOT:PATH=$MINGWPREFIX .. &&
 cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_StripSymbols:BOOL=OFF -DBUILD_UNICODE:BOOL=ON -DBUILD_clBolt:BOOL=OFF -DBUILD_tests:BOOL=OFF .. &&
 cd .. &&
 ## fix invalid compiler flags
 #mv build/bolt/cl/CMakeFiles/clBolt.Runtime.dir/flags.make build/bolt/cl/CMakeFiles/clBolt.Runtime.dir/flags.make.bak &&
 #sed -e "s?/D\(_*UNICODE\)?-D\1?g" build/bolt/cl/CMakeFiles/clBolt.Runtime.dir/flags.make.bak > build/bolt/cl/CMakeFiles/clBolt.Runtime.dir/flags.make &&
 #mv build/tools/StringifyKernels/CMakeFiles/clBolt.StringifyKernels.dir/flags.make build/tools/StringifyKernels/CMakeFiles/clBolt.StringifyKernels.dir/flags.make.bak &&
 #sed -e "s?/D\(_*UNICODE\)?-D\1?g" build/tools/StringifyKernels/CMakeFiles/clBolt.StringifyKernels.dir/flags.make.bak > build/tools/StringifyKernels/CMakeFiles/clBolt.StringifyKernels.dir/flags.make &&
 wl-showstatus build-install &&
 make -Cbuild install/strip &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf Bolt-$VERSION




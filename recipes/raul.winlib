export NAME="Raul"
export STATUS=
export URL=http://drobilla.net/software/raul/
export BASENAME=raul
export DESCRIPTION="Raul (Realtime Audio Utility Library) is a C++ utility library primarily aimed at audio/musical applications."
export CATEGORY=audio
export TYPE=library
export VERSION=0.8.0
export VERSIONDATE=20160606
wl-showstatus --package-version
export DEPENDANCIES=pthreads,glib2,boost
export OPTIONALDEPENDANCIES=
export BUILDDEPENDANCIES=waf
export LICENSEFILE=COPYING
export LICENSETYPE=GPL
#export DOWNLOADURL="http://drobilla.net/software/raul/"
export DOWNLOADURL="https://drobilla.net/category/raul/"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://download.drobilla.net/$BASENAME-$VERSION.tar.bz2
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xfj $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.bz2
cd $BASENAME-$VERSION
## fix autowaf/autowaf.py for Python 3
#patch -ulbf autowaf/autowaf.py << EOF
#@@ -374,3 +374,3 @@
#        except IOError:
#-               print "Could not open", source_path, " for writing\n"
#+               print("Could not open", source_path, " for writing\n")
#                sys.exit(-1)
#@@ -389,3 +389,3 @@
#        except IOError:
#-               print "Could not open", header_path, " for writing\n"
#+               print("Could not open", header_path, " for writing\n")
#                sys.exit(-1)
#@@ -414,3 +414,3 @@
#                lcov = False
#-               print "Failed to run lcov, no coverage report will be generated"
#+               print("Failed to run lcov, no coverage report will be generated")
#
#@@ -456,3 +456,3 @@
#        Logs.pprint('BOLD', 'Coverage:', sep='')
#-       print os.path.abspath('coverage/index.html')
#+       print(os.path.abspath('coverage/index.html'))
#
#@@ -462,3 +462,3 @@
#        if ctx.cmd == 'install':
#-               print 'Running /sbin/ldconfig'
#+               print('Running /sbin/ldconfig')
#                try:
#EOF
## force using older C++ standard (version >= 0.8.0)
patch -ulbf wscript << EOF
@@ -123,2 +123,3 @@
        obj.uselib          = 'GLIB GTHREAD'
+$(echo -e '\t')obj.cxxflags        = [ '-std=c++98' ]
        obj.framework       = framework
EOF
wl-showstatus configure &&
 #PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$(pwd)/autowaf $PYDIR/python.exe waf configure --prefix=$INSTALLPREFIX &&
 PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$(pwd)/autowaf $PY2DIR/python.exe waf configure --prefix=$INSTALLPREFIX --check-c-compiler=gcc --check-cxx-compiler=g++ &&
 wl-showstatus build &&
 #PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$(pwd)/autowaf $PYDIR/python.exe waf build &&
 PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$(pwd)/autowaf $PY2DIR/python.exe waf build &&
 wl-showstatus install &&
 #PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$(pwd)/autowaf $PYDIR/python.exe waf install &&
 PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$(pwd)/autowaf $PY2DIR/python.exe waf install &&
 mkdir -p $INSTALLPREFIX/bin &&
 mv -f $INSTALLPREFIX/lib/*.dll $INSTALLPREFIX/bin/ &&
 # replace backslash(es) with forward slash(es) in .pc file
 sed -i -e 's?\\?/?g' $INSTALLPREFIX/lib/pkgconfig/*.pc &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




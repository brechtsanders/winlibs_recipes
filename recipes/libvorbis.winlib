export NAME="libvorbis"
export STATUS=
export URL=http://www.xiph.org/
export BASENAME=libvorbis
export DESCRIPTION='Ogg Vorbis is a fully open, non-proprietary, patent-and-royalty-free, general-purpose compressed audio format for mid to high quality (8kHz-48.0kHz, 16+ bit, polyphonic) audio and music at fixed and variable bitrates from 16 to 128 kbps/channel. This places Vorbis in the same competitive class as audio representations such as MPEG-4 (AAC), and similar to, but higher performance than MPEG-1/2 audio layer 3, MPEG-4 audio (TwinVQ), WMA and PAC.'
export CATEGORY=audio,codec
export TYPE=library
#export VERSION=1.2.0
#export VERSION=1.2.2
#export VERSION=1.2.3
#export VERSION=1.3.1
#export VERSIONDATE=20100326
#export VERSION=1.3.2
#export VERSIONDATE=20101102
#export VERSION=1.3.3
#export VERSIONDATE=20120104
#export VERSION=1.3.4
#export VERSIONDATE=20140123
#export VERSION=1.3.5
#export VERSIONDATE=20150303
#export VERSION=1.3.6
#export VERSIONDATE=20180317
export VERSION=1.3.7
export VERSIONDATE=20200705
wl-showstatus --package-version
export DEPENDENCIES=libogg
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=COPYING
export LICENSETYPE=
#export DOWNLOADURL="http://downloads.xiph.org/releases/vorbis/"
export DOWNLOADURL="https://gitlab.xiph.org/xiph/vorbis/-/tags"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://downloads.xiph.org/releases/vorbis/$BASENAME-$VERSION.tar.gz
export DOWNLOADSOURCEURL=https://gitlab.xiph.org/xiph/vorbis/-/archive/v$VERSION/vorbis-v$VERSION.tar.bz2
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
#tar xz --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
#cd $BASENAME-$VERSION
tar xj --force-local -f $TARBALLDIR/$BASENAME/vorbis-v$VERSION.tar.bz2
cd vorbis-v$VERSION
wl-showstatus preconfigure &&
 mkdir -p m4 &&
 autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal &&
 wl-showstatus configure &&
 ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --disable-docs --disable-oggtest LDFLAGS="-logg" &&
 wl-showstatus build-install &&
 make install-strip &&
 #wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf vorbis-v$VERSION



#export BUILDDEPENDENCIES=cmake,ninja
#mkdir -p build_static build_shared &&
# wl-showstatus configure-static &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DCMAKE_POLICY_VERSION_MINIMUM:STRING=3.5 -S. -Bbuild_static &&
# #-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
# wl-showstatus configure-shared &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DCMAKE_POLICY_VERSION_MINIMUM:STRING=3.5 -S. -Bbuild_shared &&
# ## fix execution of Python scripts
# #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|glib-genmarshal\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
# ## fix missing link libraries
# #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lws2_32/" build_shared/build.ninja &&
# #wl-showstatus build-static &&
# #cmake.exe --build build_static &&
# #ninja -Cbuild_static &&
# #wl-showstatus build-shared &&
# #cmake.exe --build build_shared &&
# #ninja -Cbuild_shared &&
# wl-showstatus build-install-static &&
# #cmake.exe --install build_static --strip &&
# #cmake.exe --build build_static --target "install/strip" &&
# #cmake.exe --build build_static --target "library/install/strip" &&
# ninja -Cbuild_static install/strip &&
# #ninja -Cbuild_static library/install/strip &&
# wl-showstatus build-install-shared &&
# #cmake.exe --install build_shared --strip &&
# #cmake.exe --build build_shared --target "install/strip" &&
# ninja -Cbuild_shared install/strip &&
#    echo OK




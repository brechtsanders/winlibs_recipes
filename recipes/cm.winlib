export NAME="CM"
export STATUS=
#export URL=http://www.multiprecision.org/index.php?prog=cm
export URL=http://www.multiprecision.org/cm/
export BASENAME=cm
export DESCRIPTION="The CM software implements the construction of ring class fields of imaginary quadratic number fields and of elliptic curves with complex multiplication via floating point approximations. It consists of libraries that can be called from within a C program and of executable command line applications."
export CATEGORY=math
export TYPE=library
#export VERSION=0.2
#export VERSIONDATE=20120529
#export VERSION=0.2.1
#export VERSIONDATE=20150320
#export VERSION=0.3
#export VERSIONDATE=20160316
#export VERSION=0.3.1
#export VERSIONDATE=20200929
####64-bit: include/gmp.h:141:23: error: 'long long long' is too long for GCC
export VERSION=0.4.0
export VERSIONDATE=20220505
wl-showstatus --package-version
export DEPENDENCIES=gmp,mpc,mpfrcx,pari
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=
export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=COPYING.LIB
export LICENSEFILE=COPYING
#export LICENSETYPE=LGPL
export LICENSETYPE=GPL
#export DOWNLOADURL="http://www.multiprecision.org/index.php?prog=cm&page=download"
export DOWNLOADURL="http://www.multiprecision.org/cm/download.html"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://www.multiprecision.org/cm/download/$BASENAME-$VERSION.tar.gz
export DOWNLOADSOURCEURL=http://www.multiprecision.org/downloads/$BASENAME-$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
tar xfz $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
cd $BASENAME-$VERSION
## fix missing sys/times.h
#patch -ulbf lib/common/cm_common.h << EOF
#--- lib/common/cm_common.h  2012-02-22 10:09:36 +0100
#+++ lib/common/cm_common.h  2012-05-29 20:12:26 +0200
#@@ -26,3 +26,7 @@
#
#+#ifdef __WIN32__
#+#include <time.h>
#+#else
# #include <sys/times.h>
#+#endif
# #include <stdbool.h>
#@@ -54,3 +58,7 @@
# typedef struct {
#+#ifdef __WIN32__
#+   clock_t time_old;
#+#else
#    struct tms time_old;
#+#endif
#    double     elapsed;
#EOF
## fix missing sys/times.h and DLL issues (version <= 0.2)
#patch -ulbf lib/common/cm_common.h << EOF
#--- lib/common/cm_common.h  2012-02-22 10:09:36 +0100
#+++ lib/common/cm_common.h  2012-05-29 20:12:26 +0200
#@@ -26,3 +26,13 @@
#
#+#ifdef __WIN32__
#+#ifdef DLL_EXPORT
#+#define CM_COMMON_API_DECL __declspec(dllexport)
#+#else
#+#define CM_COMMON_API_DECL __declspec(dllimport)
#+#endif
#+#include <time.h>
#+#else
#+#define CM_COMMON_API_DECL extern
# #include <sys/times.h>
#+#endif
# #include <stdbool.h>
#@@ -54,3 +64,7 @@
# typedef struct {
#+#ifdef __WIN32__
#+   clock_t time_old;
#+#else
#    struct tms time_old;
#+#endif
#    double     elapsed;
#@@ -100,48 +114,48 @@
# /* functions for measuring the passing time */
#-extern void cm_timer_start (cm_timer clock);
#-extern void cm_timer_stop (cm_timer clock);
#-extern double cm_timer_get (cm_timer clock);
#+CM_COMMON_API_DECL void cm_timer_start (cm_timer clock);
#+CM_COMMON_API_DECL void cm_timer_stop (cm_timer clock);
#+CM_COMMON_API_DECL double cm_timer_get (cm_timer clock);
#
# /* generic functions for opening files */
#-extern bool cm_file_open_write (FILE **f, char *filename);
#-extern bool cm_file_open_read (FILE **f, char *filename);
#-extern void cm_file_close (FILE *f);
#-extern void cm_file_gzopen_write (gzFile *f, char *filename);
#-extern void cm_file_gzopen_read (gzFile *f, char *filename);
#-extern void cm_file_gzclose (gzFile f);
#+CM_COMMON_API_DECL bool cm_file_open_write (FILE **f, char *filename);
#+CM_COMMON_API_DECL bool cm_file_open_read (FILE **f, char *filename);
#+CM_COMMON_API_DECL void cm_file_close (FILE *f);
#+CM_COMMON_API_DECL void cm_file_gzopen_write (gzFile *f, char *filename);
#+CM_COMMON_API_DECL void cm_file_gzopen_read (gzFile *f, char *filename);
#+CM_COMMON_API_DECL void cm_file_gzclose (gzFile f);
#
# /* different functions for number theoretic computations */
#-extern int cm_nt_is_prime (mpz_t a);
#-extern int cm_nt_is_prime_l (const unsigned long int prime);
#-extern unsigned long int cm_nt_next_prime (const unsigned long int n);
#-extern long int cm_nt_gcd (long int a, long int b);
#-extern long int cm_nt_gcdext (long int *u, long int *v, long int a,
#+CM_COMMON_API_DECL int cm_nt_is_prime (mpz_t a);
#+CM_COMMON_API_DECL int cm_nt_is_prime_l (const unsigned long int prime);
#+CM_COMMON_API_DECL unsigned long int cm_nt_next_prime (const unsigned long int n);
#+CM_COMMON_API_DECL long int cm_nt_gcd (long int a, long int b);
#+CM_COMMON_API_DECL long int cm_nt_gcdext (long int *u, long int *v, long int a,
#    long int b);
#-extern int cm_nt_kronecker (long int a, long int b);
#-extern long int cm_nt_sqrt (const unsigned long int n);
#-extern void cm_nt_factor (long int d, unsigned long int *factors,
#+CM_COMMON_API_DECL int cm_nt_kronecker (long int a, long int b);
#+CM_COMMON_API_DECL long int cm_nt_sqrt (const unsigned long int n);
#+CM_COMMON_API_DECL void cm_nt_factor (long int d, unsigned long int *factors,
#    unsigned int *exponents);
#
#-extern void cm_nt_mpz_tonelli_z (mpz_t root, mpz_t a, mpz_t p);
#-extern void cm_nt_mpz_tonelli (mpz_t root, const long int a, mpz_t p);
#+CM_COMMON_API_DECL void cm_nt_mpz_tonelli_z (mpz_t root, mpz_t a, mpz_t p);
#+CM_COMMON_API_DECL void cm_nt_mpz_tonelli (mpz_t root, const long int a, mpz_t p);
#
#-extern void cm_nt_elliptic_curve_multiply (mpz_t P_x, mpz_t P_y, bool *P_infty,
#+CM_COMMON_API_DECL void cm_nt_elliptic_curve_multiply (mpz_t P_x, mpz_t P_y, bool *P_infty,
#    mpz_t m, mpz_t a, mpz_t p);
#-extern void cm_nt_elliptic_curve_random (mpz_t P_x, mpz_t P_y,
#+CM_COMMON_API_DECL void cm_nt_elliptic_curve_random (mpz_t P_x, mpz_t P_y,
#    mpz_t cofactor, mpz_t a, mpz_t b, mpz_t p);
#
#-extern bool cm_nt_mpfr_get_z (mpz_t out, mpfr_t in);
#+CM_COMMON_API_DECL bool cm_nt_mpfr_get_z (mpz_t out, mpfr_t in);
#
# /* functions for evaluating modular functions */
#-extern void cm_modular_fundamental_domain (mpc_ptr z);
#-extern void cm_modular_init (cm_modular_t *m, mp_prec_t prec);
#-extern void cm_modular_clear (cm_modular_t *m);
#-extern void cm_modular_eta_transform (cm_modular_t m, mpc_t rop, mpc_t z,
#+CM_COMMON_API_DECL void cm_modular_fundamental_domain (mpc_ptr z);
#+CM_COMMON_API_DECL void cm_modular_init (cm_modular_t *m, mp_prec_t prec);
#+CM_COMMON_API_DECL void cm_modular_clear (cm_modular_t *m);
#+CM_COMMON_API_DECL void cm_modular_eta_transform (cm_modular_t m, mpc_t rop, mpc_t z,
#    cm_matrix_t M);
#-extern void cm_modular_eta_series (cm_modular_t m, mpc_t rop, mpc_t q_24);
#-extern void cm_modular_eta_eval (cm_modular_t m, mpc_t rop, mpc_t op);
#-extern void cm_modular_eta_eval_fr (cm_modular_t m, mpfr_t rop, mpfr_t op);
#-extern void cm_modular_atkinhecke_eval (cm_modular_t m, mpc_t rop, mpc_t op,
#+CM_COMMON_API_DECL void cm_modular_eta_series (cm_modular_t m, mpc_t rop, mpc_t q_24);
#+CM_COMMON_API_DECL void cm_modular_eta_eval (cm_modular_t m, mpc_t rop, mpc_t op);
#+CM_COMMON_API_DECL void cm_modular_eta_eval_fr (cm_modular_t m, mpfr_t rop, mpfr_t op);
#+CM_COMMON_API_DECL void cm_modular_atkinhecke_eval (cm_modular_t m, mpc_t rop, mpc_t op,
#    unsigned long int l, unsigned long int r);
#-extern void cm_modular_atkinhecke_level_eval (cm_modular_t m, mpc_t rop,
#+CM_COMMON_API_DECL void cm_modular_atkinhecke_level_eval (cm_modular_t m, mpc_t rop,
#    mpc_t op, unsigned long int l);
#@@ -149,9 +163,9 @@
# /* functions for evaluating modular functions using the AGM */
#-extern void cm_fem_eta_eval (cm_modular_t m, mpc_t rop, mpc_t op);
#+CM_COMMON_API_DECL void cm_fem_eta_eval (cm_modular_t m, mpc_t rop, mpc_t op);
#
# /* functions reading modular polynomials */
#-extern mpz_t* cm_modpol_read_specialised_mod (int* n, int level, char type,
#+CM_COMMON_API_DECL mpz_t* cm_modpol_read_specialised_mod (int* n, int level, char type,
#    mpz_t p, mpz_t x, const char * datadir);
#-extern void cm_modpol_print_pari (int level, char type, const char* datadir);
#-extern void cm_modpol_print_magma (int level, char type, const char* datadir);
#+CM_COMMON_API_DECL void cm_modpol_print_pari (int level, char type, const char* datadir);
#+CM_COMMON_API_DECL void cm_modpol_print_magma (int level, char type, const char* datadir);
#
#EOF
# fix missing sys/times.h and DLL issues (version >= 0.2.1)
patch -ulbf lib/common/cm_common.h << EOF
--- lib/common/cm_common.h  2014-01-24 17:02:15.000000000 +0100
+++ lib/common/cm_common.h  2015-03-23 22:59:42.465803200 +0100
@@ -26,3 +26,7 @@

+#ifdef __MINGW32__
+#include <time.h>
+#else
 #include <sys/times.h>
+#endif
 #include <stdbool.h>
@@ -54,3 +58,7 @@
 typedef struct {
+#ifdef __MINGW32__
+   clock_t time_old;
+#else
    struct tms time_old;
+#endif
    double     elapsed;
EOF
patch -ulbf lib/common/timer.c << EOF
--- lib/common/timer.c  2010-10-11 18:56:28 +0200
+++ lib/common/timer.c  2012-05-29 20:18:30 +0200
@@ -27,7 +27,11 @@

-void cm_timer_start (cm_timer clock)
+void cm_timer_start (cm_timer clck)

 {
-   clock->elapsed = 0;
-   times (&(clock->time_old));
+   clck->elapsed = 0;
+#ifdef __WIN32__
+   clck->time_old = clock();
+#else
+   times (&(clck->time_old));
+#endif
 }
@@ -36,9 +40,13 @@

-void cm_timer_stop (cm_timer clock)
+void cm_timer_stop (cm_timer clck)

 {
+#ifdef __WIN32__
+   clck->elapsed = (double)(clock() - clck->time_old) / 100;//for seconds: / CLOCKS_PER_SEC
+#else
    struct tms time_new;
    times (&time_new);
-   clock->elapsed =
-     ((double) (time_new.tms_utime - clock->time_old.tms_utime)) / 100;
+   clck->elapsed =
+     ((double) (time_new.tms_utime - clck->time_old.tms_utime)) / 100;
+#endif
 }
@@ -47,6 +55,6 @@

-double cm_timer_get (cm_timer clock)
+double cm_timer_get (cm_timer clck)

 {
-   return clock->elapsed;
+   return clck->elapsed;
 }
EOF
## fix long long long issues on 64-bit (version >= 0.3)
#if ( echo $RUNPLATFORM | grep -q x86_64 ); then
#cat >> lib/class/pari.c << EOF
##include <stdint.h>
##include <sys/types.h>
##include <pari/pari.h>
##undef long
#EOF
#fi
# fix invalid -no-undefined in configure
sed -i.bak -e "s/ -no-undefined/ -Wl,-no-undefined/" configure
## fix missing off64_t
#mv configure configure.bak2 &&
#sed -e "s/-std=c99//" configure.bak2 > configure
wl-showstatus configure &&
 #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM LDFLAGS="-Wl,--enable-auto-import -Wl,-no-undefined" &&
 #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --disable-shared LDFLAGS="-Wl,--enable-auto-import" &&
 ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM LDFLAGS="-Wl,--enable-auto-import" &&
 # fix building DLLs
 mv libtool libtool.bak &&
 sed -e "s/\(allow_undefined=\)yes/\1no/" libtool.bak > libtool &&
 wl-showstatus build-install &&
 #make install-strip LDFLAGS="-Wl,-no-undefined" &&
 ( make install-strip || make install-strip libcm_class_la_LIBADD="-Wl,--as-needed -L$(pwd)/lib/common/.libs -lcm_common -L$(pwd)/lib/mpfpx/.libs -lmpfpx" ) &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




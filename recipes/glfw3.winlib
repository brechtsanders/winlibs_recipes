export NAME="GLFW3"
export STATUS=
export URL=http://www.glfw.org/
export BASENAME=glfw3
export DESCRIPTION="GLFW is a free, Open Source, multi-platform library for opening a window, creating an OpenGL context and managing input. It is easy to integrate into existing applications and does not lay claim to the main loop. GLFW is written in C and has native support for Windows, Mac OS X and many Unix-like systems using the X Window System, such as Linux and FreeBSD."
export CATEGORY=graphics
export TYPE=library
#export VERSION=3.0
#export VERSIONDATE=20130613
#export VERSION=3.0.1
#export VERSIONDATE=20130617
#export VERSION=3.0.2
#export VERSIONDATE=20130826
#export VERSION=3.0.3
#export VERSIONDATE=20130926
#export VERSION=3.0.4
#export VERSIONDATE=20140101
#export VERSION=3.1
#export VERSIONDATE=20150119
#export VERSION=3.1.1
#export VERSIONDATE=20150320
#export VERSION=3.1.2
#export VERSIONDATE=20151013
#export VERSION=3.2
#export VERSIONDATE=20160603
####src/win32_platform.h:204:28: error: expected ')' before '*' token
#export VERSION=3.2.1
#export VERSIONDATE=20160819
#export VERSION=3.3
#export VERSIONDATE=20190417
####src/win32_window.c:2050:14: error: 'OCR_NORMAL' undeclared (first use in this function)
#export VERSION=3.3.1
#export VERSIONDATE=20200102
#export VERSION=3.3.2
#export VERSIONDATE=20200121
#export VERSION=3.3.3
#export VERSIONDATE=20210301
#export VERSION=3.3.4
#export VERSIONDATE=20210408
#export VERSION=3.3.5
#export VERSIONDATE=20211029
#export VERSION=3.3.6
#export VERSIONDATE=20211210
#export VERSION=3.3.7
#export VERSIONDATE=20220407
#export VERSION=3.3.8
#export VERSIONDATE=20220723
export VERSION=3.3.9
export VERSIONDATE=20231214
wl-showstatus --package-version
export DEPENDENCIES=
export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=cmake
#export OPTIONALBUILDDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=COPYING.txt
export LICENSEFILE=LICENSE.md
export LICENSETYPE="zlib/libpng license"
#export DOWNLOADURL="http://www.glfw.org/download.html"
export DOWNLOADURL="http://sourceforge.net/projects/glfw/files/glfw/ glfw-"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://downloads.sourceforge.net/project/glfw/glfw/$VERSION/glfw-$VERSION.tar.bz2
export DOWNLOADSOURCEURL=https://downloads.sourceforge.net/project/glfw/glfw/$VERSION/glfw-$VERSION.tar.bz2
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
tar xj --force-local -f $TARBALLDIR/$BASENAME/glfw-$VERSION.tar.bz2
cd glfw-$VERSION
## fix CMakeLists.txt (version <= 3.1)
#patch -ulbf CMakeLists.txt << EOF
#--- CMakeLists.txt  2013-06-12 23:08:02 +0200
#+++ CMakeLists.txt  2013-06-13 09:32:20 +0200
#@@ -358,5 +358,5 @@
# # Choose library output name
# #--------------------------------------------------------------------
#-if (BUILD_SHARED_LIBS AND UNIX)
#+if (BUILD_SHARED_LIBS AND (UNIX OR MSYS))
#     # On Unix-like systems, shared libraries can use the soname system.
#     set(GLFW_LIB_NAME glfw)
#@@ -410,5 +410,5 @@
#                DESTINATION lib\${LIB_SUFFIX}/cmake/glfw)
#
#-if (UNIX)
#+if (UNIX OR MSYS)
#     install(EXPORT glfwTargets DESTINATION lib\${LIB_SUFFIX}/cmake/glfw)
# endif()
#@@ -417,5 +417,5 @@
# # Create and install pkg-config file on supported platforms
# #--------------------------------------------------------------------
#-if (UNIX)
#+if (UNIX OR MSYS)
#     configure_file(\${GLFW_SOURCE_DIR}/src/glfw3.pc.in
#                    \${GLFW_BINARY_DIR}/src/glfw3.pc @ONLY)
#EOF
## fix CMakeLists.txt (version >= 3.1.1 <= 3.3)
#patch -ulbf CMakeLists.txt << EOF
#--- CMakeLists.txt  2015-03-19 16:21:52.000000000 +0100
#+++ CMakeLists.txt  2015-03-30 20:49:09.889646700 +0200
#@@ -503,8 +503,3 @@
# #--------------------------------------------------------------------
#-if (BUILD_SHARED_LIBS AND UNIX)
#-    # On Unix-like systems, shared libraries can use the soname system.
#-    set(GLFW_LIB_NAME glfw)
#-else()
#     set(GLFW_LIB_NAME glfw3)
#-endif()
#
#@@ -515,3 +510,3 @@
#
#-if (UNIX)
#+if (UNIX OR MSYS)
#     set(GLFW_CONFIG_PATH "\${CMAKE_INSTALL_PREFIX}/lib/cmake/glfw3/")
#EOF
## fix windows includes (version >= 3.1.2 <= 3.3)
#mv src/internal.h src/internal.h.bak &&
#echo "#include <windows.h>" > src/internal.h &&
#cat src/internal.h.bak >> src/internal.h
## fix missing APIENTRY in src/win32_platform.h (version >= 3.2 <= 3.3)
#sed -i.bak -e "s?^#undef APIENTRY?//&?" src/win32_platform.h
## fix src/win32_window.c (version = 3.3.1)
#mv src/win32_window.c src/win32_window.c.bak &&
#echo "#define OEMRESOURCE" > src/win32_window.c &&
#cat src/win32_window.c.bak >> src/win32_window.c
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DGLFW_BUILD_EXAMPLES:BOOL=OFF -DGLFW_BUILD_TESTS:BOOL=OFF -S. -Bbuild_static &&
# #-DGLFW_USE_EGL:BOOL=ON &&
# wl-showstatus configure &&
# cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DGLFW_BUILD_EXAMPLES:BOOL=OFF -DGLFW_BUILD_TESTS:BOOL=OFF -S. -Bbuild_shared &&
# wl-showstatus build_install &&
# ( make -Cbuild_static install/strip || make -Cbuild_static install ) &&
# wl-showstatus build_install &&
# ( make -Cbuild_shared install/strip || make -Cbuild_shared install ) &&
# #mkdir -p $INSTALLPREFIX/bin &&
# #mv -f $INSTALLPREFIX/lib/*.dll $INSTALLPREFIX/bin/ &&
# ##mv -f $INSTALLPREFIX/lib/glfw3dll.a $INSTALLPREFIX/lib/libglfw3.dll.a &&
# #mv -f $INSTALLPREFIX/lib/cmake/glfw3/glfw3Targets-release.cmake $INSTALLPREFIX/lib/cmake/glfw3/glfw3Targets-release.cmake.bak &&
# #sed -e "s?lib\(/glfw3\.dll\)\b?bin\1?" $INSTALLPREFIX/lib/cmake/glfw3/glfw3Targets-release.cmake.bak > $INSTALLPREFIX/lib/cmake/glfw3/glfw3Targets-release.cmake &&
# #rm -f $INSTALLPREFIX/lib/cmake/glfw3/glfw3Targets-release.cmake.bak &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && rm -rf glfw-$VERSION
mkdir -p build_static build_shared &&
 wl-showstatus configure &&
 cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DGLFW_BUILD_EXAMPLES:BOOL=OFF -DGLFW_BUILD_TESTS:BOOL=OFF -S. -Bbuild_static &&
 #-DGLFW_USE_EGL:BOOL=ON &&
 wl-showstatus configure &&
 cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DGLFW_BUILD_EXAMPLES:BOOL=OFF -DGLFW_BUILD_TESTS:BOOL=OFF -S. -Bbuild_shared &&
 wl-showstatus build_install &&
 ninja -Cbuild_static install/strip &&
 wl-showstatus build_install &&
 ninja -Cbuild_shared install/strip &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && rm -rf glfw-$VERSION




export NAME="libxmlb"
export STATUS=
export URL=https://github.com/hughsie/libxmlb
export BASENAME=libxmlb
export DESCRIPTION="A library to help create and query binary XML blobs"
export CATEGORY=dataprocessing,fileformat
export TYPE=library
#export VERSION=0.3.11
#export VERSIONDATE=20230305
#export VERSION=0.3.12
#export VERSIONDATE=20230811
#export VERSION=0.3.13
#export VERSIONDATE=20230818
#export VERSION=0.3.14
#export VERSIONDATE=20230825
export VERSION=0.3.15
export VERSIONDATE=20240102
wl-showstatus --package-version
export DEPENDENCIES=gobject-introspection,zstd,snowball
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=meson,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=LGPL
export DOWNLOADURL="https://github.com/hughsie/libxmlb/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/hughsie/libxmlb/releases/download/$VERSION/$BASENAME-$VERSION.tar.xz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xJ --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.xz
cd $BASENAME-$VERSION
# fix meson.build
patch -ulbf meson.build << EOF
@@ -83,3 +83,3 @@

-if not meson.is_cross_build()
+if not meson.is_cross_build() and not (host_machine.system() == 'windows')
   add_project_arguments('-fstack-protector-strong', language : 'c')
@@ -105,2 +105,3 @@
 if host_machine.system() == 'windows'
+  prefix = get_option('prefix')
   bindir = get_option('bindir')
EOF
mkdir -p build_both &&
 wl-showstatus configure &&
 #PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Dcli=true -Dstemmer=true -Dintrospection=true -Dgtkdoc=false -Dtests=false . build_both &&
 #PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Dcli=true -Dstemmer=true -Dintrospection=true -Dgtkdoc=false -Dtests=false . build_both &&
 PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Dcli=true -Dzstd=true -Dstemmer=true -Dintrospection=true -Dgtkdoc=false -Dtests=false . build_both &&
 wl-showstatus build-install &&
 #PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -Cbuild_both install &&
 ninja -Cbuild_both install &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




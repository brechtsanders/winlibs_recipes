#export NAME="libdispatch"
#export STATUS=
#export URL=https://github.com/apple/swift-corelibs-libdispatch
#export BASENAME=libdispatch
#export DESCRIPTION="The libdispatch Project, (a.k.a. Grand Central Dispatch), for concurrency on multicore hardware"
#export CATEGORY=system
#export TYPE=library
#export VERSION=4.2.2
#export VERSIONDATE=20210816
#wl-showstatus --package-version
#export DEPENDANCIES=
#export OPTIONALDEPENDANCIES=
#export BUILDDEPENDANCIES=cmake,ninja
#export LICENSEFILE=LICENSE
#export LICENSETYPE=Apache
#export DOWNLOADURL="https://github.com/apple/swift-corelibs-libdispatch/releases"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://github.com/apple/swift-corelibs-libdispatch/archive/refs/tags/swift-$VERSION-RELEASE.tar.gz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#wl-showstatus extract
#tar xfz $TARBALLDIR/$BASENAME/swift-$VERSION-RELEASE.tar.gz
#cd swift-corelibs-libdispatch-swift-$VERSION-RELEASE
## fix cmake/modules/DispatchWindowsSupport.cmake (version >= 4.2.2)
#patch -ulbf cmake/modules/DispatchWindowsSupport.cmake << EOF
#@@ -6,2 +6,4 @@
#     set(\${var} x64 PARENT_SCOPE)
#+  elseif(\${arch} STREQUAL AMD64)
#+    set(\${var} x64 PARENT_SCOPE)
#   elseif(\${arch} STREQUAL armv7)
#EOF
## avoid unsupported flags
#sed -i.bak -e "s/add_compile_options(\(-Werror\|-Wall\|-Wextra\|-Warray-bounds-pointer-arithmetic\|-Wassign-enum\|-Watomic-properties\|-Wcomma\|-Wconditional-uninitialized\|-Wcovered-switch-default\|-Wdocumentation\|-Wduplicate-enum\|-Widiomatic-parentheses\|-Winfinite-recursion\|-Wnewline-eof\|-Wnullable-to-nonnull-conversion\|-Wobjc-interface-ivars\|-Wover-aligned\|-Wshorten-64-to-32\|-Wstatic-in-inline\|-Wsuper-class-method-mismatch\|-Wunguarded-availability\|-fblocks\|-Wselector\|-Wno-old-style-cast\|-Wno-error=assign-enum\|-Wno-used-but-marked-unused\|-Wno-unreachable-code-aggressive\|-Wno-shift-sign-overflow\|-Wno-reserved-id-macro\|-Wno-missing-variable-declarations\|-Wno-documentation-unknown-command\|-Wno-c++98-compat-pedantic\|-Wno-c++98-compat\|-Wno-disabled-macro-expansion\|-Wno-four-char-constants\|-Wno-unknown-warning-option\)/#&/g" cmake/modules/DispatchCompilerWarnings.cmake
#sed -i.bak -e "s/-fblocks//" src/CMakeLists.txt
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# VCToolsInstallDir=$(dirname $(which gcc.exe)) UniversalCRTSdkDir=$INSTALLPREFIX/VCToolsInstallDir UCRTVersion=0 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DENABLE_SWIFT:BOOL=OFF -DENABLE_TESTING:BOOL=OFF -DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) -S. -Bbuild_static &&
# wl-showstatus configure &&
# VCToolsInstallDir=$(dirname $(which gcc.exe)) UniversalCRTSdkDir=$INSTALLPREFIX/VCToolsInstallDir UCRTVersion=0 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DENABLE_SWIFT:BOOL=OFF -DENABLE_TESTING:BOOL=OFF -DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) -S. -Bbuild_shared &&
# wl-showstatus build-install &&
# ninja -Cbuild_static install/strip &&
# wl-showstatus build-install &&
# ninja -Cbuild_shared install/strip &&
#    echo OK
## wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf swift-corelibs-libdispatch-swift-$VERSION-RELEASE



#export NAME="libdispatch"
#export STATUS=
#export URL=https://github.com/apple/swift-corelibs-libdispatch
#export BASENAME=libdispatch
#export DESCRIPTION="The libdispatch Project, (a.k.a. Grand Central Dispatch), for concurrency on multicore hardware"
#export CATEGORY=system
#export TYPE=library
##export VERSION=DEVELOPMENT-SNAPSHOT-2020-05-18-a
##export VERSIONDATE=20200519
#export VERSION=5.3-RELEASE
#export VERSIONDATE=20200917
#wl-showstatus --package-version
#export DEPENDANCIES=cmake,ninja
#export OPTIONALDEPENDANCIES=
#export BUILDDEPENDANCIES=
#export LICENSEFILE=LICENSE
#export LICENSETYPE=Apache
#export DOWNLOADURL="https://github.com/apple/swift-corelibs-libdispatch/releases"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://github.com/apple/swift-corelibs-libdispatch/archive/swift-$VERSION.tar.gz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#wl-showstatus extract
#tar xfz $TARBALLDIR/$BASENAME/swift-$VERSION.tar.gz
#cd swift-corelibs-libdispatch-swift-$VERSION
## avoid invalid compiler warning flags in cmake/modules/DispatchCompilerWarnings.cmake (version >= DEVELOPMENT-SNAPSHOT-2020-05-18-a)
#patch -ulbf cmake/modules/DispatchCompilerWarnings.cmake << EOF
#@@ -3,2 +3,3 @@
#   # TODO: someone needs to provide the msvc equivalent warning flags
#+elseif(MINGW)
# else()
#EOF
## fix src/CMakeLists.txt (version >= DEVELOPMENT-SNAPSHOT-2020-05-18-a)
#patch -ulbf src/CMakeLists.txt << EOF
#@@ -127,3 +127,5 @@
# # FIXME(compnerd) add check for -fblocks?
#+if(NOT MINGW)
# target_compile_options(dispatch PRIVATE -fblocks)
#+endif()
#
#EOF
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# VCToolsInstallDir=$(dirname $(which gcc.exe)) UniversalCRTSdkDir=$(dirname $(which gcc.exe))/../include UCRTVersion=0 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DENABLE_SWIFT:BOOL=OFF -DENABLE_DTRACE:BOOL=OFF -DBUILD_TESTING:BOOL=OFF -S. -Bbuild_static &&
# wl-showstatus configure &&
# VCToolsInstallDir=$(dirname $(which gcc.exe)) UniversalCRTSdkDir=$(dirname $(which gcc.exe))/../include UCRTVersion=0 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -S. -Bbuild_shared &&
# ## fix execution of Python scripts
# #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
# #wl-showstatus build &&
# #ninja -Cbuild_static &&
# #wl-showstatus build &&
# #ninja -Cbuild_shared &&
# wl-showstatus build-install &&
# ninja -Cbuild_static install/strip &&
# wl-showstatus build-install &&
# ninja -Cbuild_shared install/strip &&
#    echo OK
## wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION



#export NAME="Grand Central Dispatch (GCD or libdispatch)"
#export STATUS=
#export URL=https://developer.apple.com/documentation/dispatch/
#export BASENAME=libdispatch
#export DESCRIPTION="Grand Central Dispatch (GCD or libdispatch), is a technology developed by Apple Inc. to optimize application support for systems with multi-core processors and other symmetric multiprocessing systems. It is an implementation of task parallelism based on the thread pool pattern."
#export CATEGORY=system
#export TYPE=library
##export VERSION=1271.100.5
##export VERSIONDATE=20210516
#export VERSION=1271.120.2
#export VERSIONDATE=20210701
#wl-showstatus --package-version
#export DEPENDANCIES=
#export OPTIONALDEPENDANCIES=
#export BUILDDEPENDANCIES=cmake,ninja
#export LICENSEFILE=LICENSE
#export LICENSETYPE=Apache
#export DOWNLOADURL="https://opensource.apple.com/tarballs/libdispatch/"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://opensource.apple.com/tarballs/libdispatch/$BASENAME-$VERSION.tar.gz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#wl-showstatus extract
#tar xfz $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
#cd $BASENAME-$VERSION
## fix os/generic_win_base.h (version >= 1271.100.5)
#patch -ulbf os/generic_win_base.h << EOF
#@@ -24,4 +24,9 @@
#
#+#ifdef __MINGW32__
#+#include <sys/types.h>
#+#include <pthread.h>
#+#else
# typedef int mode_t;
# typedef void pthread_attr_t;
#+#endif
#
#@@ -104,3 +109,3 @@
#
#-#if __has_feature(objc_fixed_enum) || __has_extension(cxx_strong_enums)
#+#if __has_feature(objc_fixed_enum)
# #define OS_ENUM(name, type, ...) typedef enum : type { __VA_ARGS__ } name##_t
#EOF
## fix missing mach/port.h
#mkdir -p winfix/mach winfix/os
#touch winfix/mach/port.h
#touch winfix/mach/mach.h
#touch winfix/mach/message.h
#touch winfix/Availability.h
#touch winfix/os/base.h
## fix cmake/modules/DispatchCompilerWarnings.cmake (version >= 1271.100.5)
#patch -ulbf cmake/modules/DispatchCompilerWarnings.cmake << EOF
#@@ -5,2 +5,5 @@
#   endmacro()
#+elseif(MINGW)
#+  macro(dispatch_common_warnings)
#+  endmacro()
# else()
#EOF
## fix src/CMakeLists.txt (version >= 1271.100.5)
#patch -ulbf src/CMakeLists.txt << EOF
#@@ -233,3 +233,5 @@
#   check_c_compiler_flag("-momit-leaf-frame-pointer -Werror -Wall -O3" C_SUPPORTS_OMIT_LEAF_FRAME_POINTER)
#+  if(NOT MINGW)
#   target_compile_options(dispatch PRIVATE -fblocks)
#+  endif()
#   if (C_SUPPORTS_OMIT_LEAF_FRAME_POINTER)
#EOF
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# VCToolsInstallDir=$INSTALLPREFIX/VCToolsInstallDir UniversalCRTSdkDir=$INSTALLPREFIX/VCToolsInstallDir UCRTVersion=0 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DENABLE_SWIFT:BOOL=OFF -DENABLE_TESTING:BOOL=OFF -DCMAKE_C_FLAGS:STRING="-I$(pwd)/winfix" -S. -Bbuild_static &&
# wl-showstatus configure &&
# VCToolsInstallDir=$INSTALLPREFIX/VCToolsInstallDir UniversalCRTSdkDir=$INSTALLPREFIX/VCToolsInstallDir UCRTVersion=0 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DENABLE_SWIFT:BOOL=OFF -DENABLE_TESTING:BOOL=OFF -DCMAKE_C_FLAGS:STRING="-I$(pwd)/winfix" -S. -Bbuild_shared &&
# ## fix execution of Python scripts
# #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
# #wl-showstatus build &&
# #ninja -Cbuild_static &&
# #wl-showstatus build &&
# #ninja -Cbuild_shared &&
# wl-showstatus build-install &&
# ninja -Cbuild_static install/strip &&
# wl-showstatus build-install &&
# ninja -Cbuild_shared install/strip &&
#    echo OK
## wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION



#export NAME="libdispatch"
#export STATUS=
#export URL=https://github.com/DrPizza/libdispatch
#export BASENAME=libdispatch
#export DESCRIPTION="Port of libdispatch to support Win32."
#export CATEGORY=system
#export TYPE=library
#export VERSION=master
#export VERSIONDATE=20210816
#wl-showstatus --package-version
#export DEPENDANCIES=libkqueue
#export OPTIONALDEPENDANCIES=
#export BUILDDEPENDANCIES=
#export LICENSEFILE=libdispatch/LICENSE 
#export LICENSETYPE=Apache
#export DOWNLOADURL="https://github.com/DrPizza/libdispatch/tags"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://github.com/DrPizza/libdispatch/archive/refs/heads/$VERSION.tar.gz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#wl-showstatus extract
#tar xfz $TARBALLDIR/$BASENAME/$VERSION.tar.gz
#cd $BASENAME-$VERSION
#
#cd libdispatch
#
## fix dispatch/source.h
#patch -ulbf dispatch/source.h << EOF
#@@ -33,3 +33,3 @@
#
#-#ifndef _MSC_VER
#+#ifndef _WIN32
# #include <sys/signal.h>
#EOF
## fix platform/windows/sys/time.h
#patch -ulbf platform/windows/sys/time.h << EOF
#@@ -7,2 +7,5 @@
#
#+#ifdef __MINGW32__
#+#define gettimeofday win_gettimeofday
#+#else
# struct timeval;
#@@ -13,2 +16,3 @@
# };
#+#endif
#
#EOF
## fix undefined u_char in testing/shims/arc4random.c
#sed -i.bak -e "s/u_char/unsigned char/" testing/shims/arc4random.c
## fix testing/dispatch_test.c
#patch -ulbf testing/dispatch_test.c << EOF
#@@ -3,3 +3,5 @@
# #include <sys/types.h>
#+#ifndef _WIN32
# #include <sys/wait.h>
#+#endif
#
#@@ -10,3 +12,5 @@
# #include <errno.h>
#+#ifndef _WIN32
# #include <sys/errno.h>
#+#endif
# #include <string.h>
#@@ -116,3 +120,5 @@
#
#+#ifndef _WIN32
# #include <spawn.h>
#+#endif
#
#EOF
## fix src/queue.c
#mv src/queue.c src/queue.c.bak
#cat > src/queue.c << EOF
##if !defined(_WIN32_WINNT) || _WIN32_WINNT < 0x0601
##undef _WIN32_WINNT
##define _WIN32_WINNT 0x0601
##endif
#EOF
#cat src/queue.c.bak >> src/queue.c
## fix dispatch/base.h
#patch -ulbf dispatch/base.h << EOF
#@@ -22,2 +22,3 @@
# #define __DISPATCH_BASE__
#+#include <stddef.h>
#
#@@ -33,5 +34,8 @@
#
#-#if __GNUC__
#+#if !defined(_WIN32) && __GNUC__
# #define DISPATCH_EXPORT extern __attribute__((visibility("default")))
# #else
#+#if !defined(_WINDLL) && defined(_WIN32) && defined(DLL_EXPORT) && defined(BUILDING_LIBDISPATCH)
#+#define _WINDLL
#+#endif
# #if defined(_WINDLL) // building a DLL
#EOF
#wl-showstatus configure &&
# mkdir -p m4 &&
# autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal &&
# #./autogen.sh &&
# #    echo OK
# ## fix building DLLs on 64-bit
# #if ( echo $RUNPLATFORM | grep -q x86_64 ); then
# # echo "AM_GNU_GETTEXT_VERSION([$(gettext --version|head -n1|sed -e "s/^.* \([0-9\.]*\) *$/\1/")])" >> configure.ac &&
# # autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal
# #fi
# #INTLTOOL_PERL="$PERLDIR/bin/perl.exe" 
# #PERL="$PERLDIR/bin/perl.exe -I$PERLDIR/lib" 
# #PYTHON=$PYDIR/python.exe 
# #PYTHON=$PYDIR/python.exe C_INCLUDE_PATH=$PYDIR/include${C_INCLUDE_PATH:+:$C_INCLUDE_PATH} 
# #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --enable-shared --enable-static --host=$RUNPLATFORM LDFLAGS="-Wl,-no-undefined -Wl,--as-needed" &&
# ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM CFLAGS="-DBUILDING_LIBDISPATCH" LDFLAGS="-Wl,--allow-multiple-definition" &&
# ## fix building DLLs
# sed -i.bak -e "s/\(allow_undefined=\)yes/\1no/" libtool &&
# ## fix detection of shared libraries
# #sed -i.bak2 -e "s/\(deplibs_check_method=\"\)[^\"]*/\1file_magic ^x86 archive import|^x86 DLL|PE32+* executable (DLL)|pe-i386|pe-x86-64/; s/'file format pe-i386[^']*'/\"\$deplibs_check_method\"/" libtool &&
# #sed -i.bak2 -e "s/\(deplibs_check_method=\"\)[^\"]*/\1none/" libtool &&
# #wl-showstatus build &&
# #make &&
# wl-showstatus build-install &&
# make install-strip &&
#    echo OK
#
#cd ..
#
## wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION



export NAME="libdispatch (a.k.a. Grand Central Dispatch)"
export STATUS=
export URL=https://github.com/apple/swift-corelibs-libdispatch
export BASENAME=libdispatch
export DESCRIPTION="The libdispatch Project, (a.k.a. Grand Central Dispatch), for concurrency on multicore hardware"
export CATEGORY=development
export TYPE=library
export VERSION=5.5
export VERSIONDATE=20220619
wl-showstatus --package-version
export DEPENDANCIES=pthreads
export OPTIONALDEPENDANCIES=
export BUILDDEPENDANCIES=cmake,ninja
export LICENSEFILE=LICENSE
export LICENSETYPE=Apache
export DOWNLOADURL="https://github.com/apple/swift-corelibs-libdispatch/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/apple/swift-corelibs-libdispatch/archive/refs/tags/swift-$VERSION-RELEASE.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xfz $TARBALLDIR/$BASENAME/swift-$VERSION-RELEASE.tar.gz
cd swift-corelibs-libdispatch-swift-$VERSION-RELEASE
# fix os/generic_win_base.h (version >= 5.5)
patch -ulbf os/generic_win_base.h << EOF
@@ -24,4 +24,9 @@

+#ifdef __MINGW32__
+#include <sys/types.h>
+#include <pthread.h>
+#else
 typedef int mode_t;
 typedef void pthread_attr_t;
+#endif

EOF
# fix dispatch/base.h (version >= 5.5)
patch -ulbf dispatch/base.h << EOF
@@ -207,3 +207,7 @@
 #if __GNUC__
+#ifdef __MINGW32__
+#define DISPATCH_EXPECT(x, v) (x)
+#else
 #define DISPATCH_EXPECT(x, v) __builtin_expect((x), (v))
+#endif
 #define dispatch_compiler_barrier()  __asm__ __volatile__("" ::: "memory")
EOF
# fix src/shims/generic_win_stubs.h (version >= 5.5)
patch -ulbf src/shims/generic_win_stubs.h << EOF
@@ -27,5 +27,11 @@

+#ifndef S_ISDIR
 #define S_ISDIR(mode)  (((mode) & S_IFMT) == S_IFDIR)
+#endif
+#ifndef S_ISFIFO
 #define S_ISFIFO(mode) ((mode) & _S_IFIFO)
+#endif
+#ifndef S_ISREG
 #define S_ISREG(mode)  ((mode) & _S_IFREG)
+#endif
 #define S_ISSOCK(mode) 0
@@ -51,2 +57,3 @@

+#ifndef __MINGW32__
 enum {
@@ -67,2 +74,3 @@
 } FILE_PIPE_LOCAL_INFORMATION, *PFILE_PIPE_LOCAL_INFORMATION;
+#endif

EOF
# fix src/internal.h (version >= 5.5)
patch -ulbf src/internal.h << EOF
@@ -551,3 +551,3 @@
 static inline void
-_dispatch_assert(long e, size_t line) DISPATCH_STATIC_ASSERT_IF(!e)
+_dispatch_assert(uintptr_t e, size_t line) DISPATCH_STATIC_ASSERT_IF(!e)
 {
@@ -555,3 +555,3 @@
 }
-#define dispatch_assert(e) _dispatch_assert((long)(e), __LINE__)
+#define dispatch_assert(e) _dispatch_assert((uintptr_t)(e), __LINE__)

EOF
# fix src/init.c (version >= 5.5)
patch -ulbf src/init.c << EOF
@@ -1055,3 +1055,5 @@

+#if !defined(_WIN32)
 DISPATCH_NOINLINE DISPATCH_WEAK
+#endif
 void
EOF
# fix cmake/modules/DispatchWindowsSupport.cmake (version >= 5.5)
patch -ulbf cmake/modules/DispatchWindowsSupport.cmake << EOF
@@ -32,2 +32,3 @@
 function(dispatch_windows_include_for_arch arch var)
+ if(NOT MINGW)
   dispatch_verify_windows_environment_variables()
@@ -40,2 +41,3 @@
   set(\${var} \${paths} PARENT_SCOPE)
+ endif()
 endfunction()
@@ -43,2 +45,3 @@
 function(dispatch_windows_lib_for_arch arch var)
+ if(NOT MINGW)
   dispatch_verify_windows_environment_variables()
@@ -56,2 +59,3 @@
   set(\${var} \${paths} PARENT_SCOPE)
+ endif()
 endfunction()
@@ -59,2 +63,3 @@
 function(dispatch_windows_generate_sdk_vfs_overlay flags)
+ if(NOT MINGW)
   dispatch_verify_windows_environment_variables()
@@ -73,2 +78,3 @@
       PARENT_SCOPE)
+ endif()
 endfunction()
EOF
# fix missing __popcnt64 in src/shims/hw_config.h (version >= 5.5)
patch -ulbf src/shims/hw_config.h << EOF
@@ -156,3 +156,7 @@
                        ++dwProcessorPhysicalCount;
+#ifdef __MINGW32__
+                       dwProcessorLogicalCount += (DWORD)__builtin_popcountll(slpiCurrent->ProcessorMask);
+#else
                        dwProcessorLogicalCount += __popcnt64(slpiCurrent->ProcessorMask);
+#endif
                        break;
EOF
# don't abort on warnings
sed -i.bak -e "s/-Werror -Wall//" src/CMakeLists.txt
sed -i.bak -e "s/add_compile_options(.*\(-Werror\|-Wassign-enum\|-Wconditional-uninitialized\|-Wshorten-64-to-32\)/#&/" cmake/modules/DispatchCompilerWarnings.cmake
mkdir -p build_static build_shared &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DENABLE_SWIFT:BOOL=OFF -DBUILD_TESTING:BOOL=OFF -DBUILD_SHARED_LIBS:BOOL=OFF -DCMAKE_C_COMPILER:FILEPATH="$(PATH=$PATH:$MINGWPREFIX/share/llvm/bin which clang.exe)" -DCMAKE_CXX_COMPILER:FILEPATH="$(PATH=$PATH:$MINGWPREFIX/share/llvm/bin which clang++.exe)" -S. -Bbuild_static &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DENABLE_SWIFT:BOOL=OFF -DBUILD_TESTING:BOOL=OFF -DBUILD_SHARED_LIBS:BOOL=ON -DCMAKE_C_COMPILER:FILEPATH="$(PATH=$PATH:$MINGWPREFIX/share/llvm/bin which clang.exe)" -DCMAKE_CXX_COMPILER:FILEPATH="$(PATH=$PATH:$MINGWPREFIX/share/llvm/bin which clang++.exe)" -S. -Bbuild_shared &&
 wl-showstatus build-install &&
 ninja -Cbuild_static install/strip &&
 wl-showstatus build-install &&
 ninja -Cbuild_shared install/strip &&
 cp -u private/*.h $INSTALLPREFIX/include/dispatch/ &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf swift-corelibs-libdispatch-swift-$VERSION-RELEASE




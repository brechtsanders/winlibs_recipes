#export NAME="JRTPLIB"
#export STATUS=
##export URL=http://research.edm.uhasselt.be/~jori/page/index.php?n=CS.Jrtplib
#export URL=http://research.edm.uhasselt.be/jori/page/CS/Jrtplib.html
#export BASENAME=jrtplib
#export DESCRIPTION="JRTPLIB is an object-oriented RTP library written in C++."
#export CATEGORY=audio,communication
#export TYPE=library
##export VERSION=3.7.1
##export VERSION=3.8.0
##export VERSIONDATE=20101001
##export VERSION=3.8.1
##export VERSIONDATE=20101008
##export VERSION=3.8.1
##export VERSIONDATE=20110202
##export VERSION=3.9.0
##export VERSIONDATE=20110731
#####src/rtcpcompoundpacketbuilder.cpp:239: error: no matching function for call to 'operator new [](unsigned int, jrtplib::RTPMemoryManager*, int)'
#####/lib/gcc/mingw32/4.4.0/include/c++/new:92: note: candidates are: void* operator new [](size_t)
#####/lib/gcc/mingw32/4.4.0/include/c++/new:96: note: void* operator new [](size_t, const std::nothrow_t&)
#####/lib/gcc/mingw32/4.4.0/include/c++/new:102: note: void* operator new [](size_t, void*)
##export VERSION=3.9.1
##export VERSIONDATE=20111108
##export VERSION=3.10.0
##export VERSIONDATE=20161225
##export VERSION=3.11.0
##export VERSIONDATE=20170323
#export VERSION=3.11.1
#export VERSIONDATE=20170329
#wl-showstatus --package-version
#export DEPENDENCIES=jthread,srtp
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=cmake
#export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=LICENSE.MIT
#export LICENSETYPE=
##export DOWNLOADURL="http://research.edm.uhasselt.be/~jori/page/index.php?n=CS.Jrtplib"
#export DOWNLOADURL="http://research.edm.uhasselt.be/jori/page/CS/Jrtplib.html"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://research.edm.uhasselt.be/jori/jrtplib/$BASENAME-$VERSION.tar.bz2
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#tar xj --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.bz2
#cd $BASENAME-$VERSION
## fix for different redefinition of int8_t
#mv src/rtptypes_win.h src/rtptypes_win.h.bak
#sed -e "s/typedef char int/typedef signed char int/" src/rtptypes_win.h.bak >> src/rtptypes_win.h
## fix ui64 prefix which should be ull
#mv src/rtptimeutilities.h src/rtptimeutilities.h.bak
#sed -e "s/\([0-9]*\)ui64/\1ull/g" src/rtptimeutilities.h.bak > src/rtptimeutilities.h
## fix new[] in rtpmemorymanager.h
#mv src/rtpmemorymanager.h src/rtpmemorymanager.h.bak
#sed -e "s/^\(#if _MSC_VER >= 1300\)/\1 || defined(__MINGW32__)/" src/rtpmemorymanager.h.bak > src/rtpmemorymanager.h
## fix unused and non-existing includes in rtpfaketransmitter.cpp
#mv src/extratransmitters/rtpfaketransmitter.cpp src/extratransmitters/rtpfaketransmitter.cpp.bak
#sed -e "s?^\(#include <\)\(sys/socket.h\|net/if.h\|netdb.h\)?//\1\2?" src/extratransmitters/rtpfaketransmitter.cpp.bak > src/extratransmitters/rtpfaketransmitter.cpp
### fix for missing _snprintf in src/rtperrors.cpp (version <= 3.7.1)
##mv src/rtperrors.cpp src/rtperrors.cpp.bak
##echo "#include <stdio.h>" > src/rtperrors.cpp
##cat src/rtperrors.cpp.bak >> src/rtperrors.cpp
### add required libraries for building examples
##mv examples/Makefile examples/Makefile.bak
##sed -e "s?^\(LIBS *= *\)?\1-ljthread -lws2_32 ?" examples/Makefile.bak > examples/Makefile
## fix missing getaddrinfo and freeaddrinfo in src/rtpudpv6transmitter.cpp (version >= 3.9.1)
#mv src/rtpudpv6transmitter.cpp src/rtpudpv6transmitter.cpp.bak
#cat > src/rtpudpv6transmitter.cpp << EOF
##define _WIN32_WINNT 0x0501
##include <ws2tcpip.h>
#EOF
#cat src/rtpudpv6transmitter.cpp.bak >> src/rtpudpv6transmitter.cpp
### fix invalid ui64 suffix in src/rtptimeutilities.h
##mv src/rtptimeutilities.h src/rtptimeutilities.h.bak
##sed -e "s/ui64/ULL/g" src/rtptimeutilities.h.bak > src/rtptimeutilities.h
## fix missing rand_s in src/rtprandomrands.cpp (version >= 3.11.1)
#mv src/rtprandomrands.cpp src/rtprandomrands.cpp.bak
#cat > src/rtprandomrands.cpp << EOF
##include <time.h>
##include <stdlib.h>
#int rand_s (unsigned int* r);
#int rand_s (unsigned int* r)
#{
#  static int srand_called = 0;
#  if (!srand_called) {
#    srand(time(0));
#    srand_called++;
#  }
#  if (r)
#    *r = rand();
#  return 0;
#}
#EOF
#cat src/rtprandomrands.cpp.bak >> src/rtprandomrands.cpp
### skip making examples
##cat > examples/Makefile.in << EOF
##all:
##install:
##install-strip:
##EOF
#### remove dependancy on dynamic libstdc++ (GCC 4)
###mv libtool libtool.bak
###sed -e "s/-lstdc++/-lstdc++_s -lsupc++/" libtool.bak > libtool
### fix for building .DLL files
###mv configure.in configure.in.bak
###echo "AC_LIBTOOL_WIN32_DLL" > configure.in
###cat configure.in.bak >> configure.in
###wl-showstatus configure &&
###./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM CXXFLAGS="-I$MINGWPREFIX/include/jthread" LDFLAGS="-no-undefined"
###./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM CXXFLAGS="-I$MINGWPREFIX/include/jthread"
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM CXXFLAGS="-I$MINGWPREFIX/include/jthread" LDFLAGS="-static-libgcc -static-libstdc++ -lws2_32 -ljthread -no-undefined -Wl,-no-undefined" &&
## make install-strip &&
## wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && rm -rf $BASENAME-$VERSION
### fix build test failure
##mkdir -p CMakeFiles/cmTryCompileExec.dir
### skip making examples
##mv CMakeLists.txt CMakeLists.txt.bak
##grep -v examples CMakeLists.txt.bak > CMakeLists.txt
## skip making examples and fix building jrtplib.pc
#patch -ulbf CMakeLists.txt << EOF
#--- CMakeLists.txt  2011-08-29 15:03:54 +0200
#+++ CMakeLists.txt  2012-05-27 00:12:50 +0200
#@@ -123,5 +123,4 @@
#
# add_subdirectory(src)
#-add_subdirectory(examples)
#
# if (UNIX)
#@@ -161,5 +160,4 @@
# install(FILES "\${PROJECT_BINARY_DIR}/cmake/JRTPLIBConfig.cmake" DESTINATION \${LIBRARY_INSTALL_DIR}/cmake/JRTPLIB)
#
#-if (UNIX)
#        foreach(ARG \${JRTPLIB_LIBS})
#                set(JRTPLIB_LIBS_PKGCONFIG "\${JRTPLIB_LIBS_PKGCONFIG} \${ARG}")
#@@ -171,5 +169,4 @@
#        configure_file(\${PROJECT_SOURCE_DIR}/pkgconfig/jrtplib.pc.in \${PROJECT_BINARY_DIR}/pkgconfig/jrtplib.pc)
#        install(FILES \${PROJECT_BINARY_DIR}/pkgconfig/jrtplib.pc DESTINATION \${LIBRARY_INSTALL_DIR}/pkgconfig)
#-endif (UNIX)
#
#
#EOF
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# #cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:String=Release -DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) -S. -Bbuild_static &&
# cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:String=Release -DJRTPLIB_COMPILE_STATIC:BOOL=ON -DJTHREAD_ENABLED:BOOL=ON -DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) -S. -Bbuild_static &&
# wl-showstatus build-install &&
# echo "#include <winsock2.h>" >> build_static/src/rtpconfig.h &&
# wl-showstatus configure &&
# cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:String=Release -DJRTPLIB_COMPILE_STATIC:BOOL=OFF -DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) -S. -Bbuild_shared &&
# ## fix missing libjthread.lib
# #sed -i.bak -e "s? [^ ]*libjthread\.lib? $MINGWPREFIX/lib/libjthread.dll.a?" build_shared/src/CMakeFiles/jrtplib-shared.dir/build.make &&
# ## fix missing libjthread.lib
# #sed -i.bak -e "s?[^ ]*libjthread\.lib?-ljthread -lws2_32?" build_shared/src/CMakeFiles/jrtplib-shared.dir/linklibs.rsp &&
# sed -i.bak -e "s/\(-ladvapi32\)/\1 -lws2_32/" build_shared/src/CMakeFiles/jrtplib-shared.dir/linklibs.rsp &&
# echo "#include <winsock2.h>" >> build_shared/src/rtpconfig.h &&
# wl-showstatus build-install &&
# ( make -Cbuild_static install/strip || make -Cbuild_static install ) &&
# wl-showstatus build-install &&
# ( make -Cbuild_shared install/strip || make -Cbuild_shared install ) &&
# #cp -f $INSTALLPREFIX/lib/libjrtplib.dll.a $INSTALLPREFIX/lib/libjrtp.dll.a &&
# mkdir -p $INSTALLPREFIX/bin &&
# mv $INSTALLPREFIX/lib/*.dll $INSTALLPREFIX/bin/ &&
# # fix absolute link in .cmake file(s)
# sed -i -e "s?$(echo $INSTALLPREFIX|sed -e "s?^/\([a-zA-Z]\)/?\1:/?")?\${CMAKE_CURRENT_LIST_FILE}/../../../..?g" $INSTALLPREFIX/lib/cmake/JRTPLIB/JRTPLIBConfig.cmake &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION



export NAME="JRTPLIB"
export STATUS=
export URL=http://research.edm.uhasselt.be/jori/page/CS/Jrtplib.html
export BASENAME=jrtplib
export DESCRIPTION="JRTPLIB is an object-oriented RTP library written in C++."
export CATEGORY=audio,communication
export TYPE=library
export VERSION=3.11.2
export VERSIONDATE=20240612
wl-showstatus --package-version
export DEPENDENCIES=jthread,srtp
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE.MIT
export LICENSETYPE=
#export DOWNLOADURL="https://research.edm.uhasselt.be/jori/page/Cs/JrtplibOld.html"
export DOWNLOADURL="https://github.com/j0r1/JRTPLIB/tags"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://research.edm.uhasselt.be/jori/jrtplib/$BASENAME-$VERSION.tar.bz2
export DOWNLOADSOURCEURL=https://github.com/j0r1/JRTPLIB/archive/refs/tags/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
#tar xj --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.bz2
tar xz --force-local -f $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd JRTPLIB-$VERSION
mkdir -p build_win &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DJTHREAD_ENABLED:BOOL=ON -DSRTP2_ENABLED:BOOL=ON -DSRTP_ENABLED:BOOL=OFF -DJRTPLIB_COMPILE_EXAMPLES:BOOL=OFF -DJRTPLIB_COMPILE_TESTS:BOOL=OFF -S. -Bbuild_win &&
 wl-showstatus build-install &&
 ninja -Cbuild_win install/strip &&
 strip $INSTALLPREFIX/lib/*.dll &&
 mkdir -p $INSTALLPREFIX/bin &&
 mv -f $INSTALLPREFIX/lib/*.dll $INSTALLPREFIX/bin/ &&
 # fix absolute link in .cmake file(s)
 sed -i -e "s?$(echo $INSTALLPREFIX|sed -e "s?^/\([a-zA-Z]\)/?\1:/?")?\${CMAKE_CURRENT_LIST_FILE}/../../../..?g" $INSTALLPREFIX/lib/cmake/JRTPLIB/JRTPLIBConfig.cmake &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf JRTPLIB-$VERSION




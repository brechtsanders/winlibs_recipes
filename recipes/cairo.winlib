export NAME="cairo"
export STATUS=
export URL=http://www.cairographics.org/
export BASENAME=cairo
export DESCRIPTION="Cairo is a 2D graphics library with support for multiple output devices. Currently supported output targets include the X Window System, Quartz, Win32, image buffers, PostScript, PDF, and SVG file output. Experimental backends include OpenGL (through glitz), XCB, BeOS, OS/2, and DirectFB."
export CATEGORY=graphics
export TYPE=library
#export VERSION=1.8.8
#export VERSION=1.8.10
#export VERSIONDATE=20100221
#export VERSION=1.9.12
#export VERSIONDATE=20100714
#export VERSION=1.10.0
#export VERSIONDATE=20100907
#export VERSION=1.10.2
#export VERSIONDATE=20101226
#export VERSION=1.12.0
#export VERSIONDATE=20120324
####boilerplate/cairo-boilerplate-win32-printing.c:158: undefined reference to `_cairo_win32_print_gdi_error'
#export VERSION=1.12.2
#export VERSIONDATE=20120430
#export VERSION=1.12.4
#export VERSIONDATE=20121006
####/include/X11/Xlibint.h:136:2: error: expected specifier-qualifier-list before 'Status'
#export VERSION=1.12.6
#export VERSIONDATE=20121022
#export VERSION=1.12.8
#export VERSIONDATE=20121104
#export VERSION=1.12.10
#export VERSIONDATE=20130118
#export VERSION=1.12.12
#export VERSIONDATE=20130201
#export VERSION=1.12.14
#export VERSIONDATE=20130210
#export VERSION=1.12.16
#export VERSIONDATE=20130827
#export VERSION=1.12.18
#export VERSIONDATE=20141107
####Unknown float word ordering. You need to manually preset ax_cv_c_float_words_bigendian=no (or yes) according to your system.
#export VERSION=1.14.0
#export VERSIONDATE=20141014
#export VERSION=1.14.2
#export VERSIONDATE=20150311
#export VERSION=1.14.4
#export VERSIONDATE=20151101
####perf/cairo-boilerplate-win32.c:173:5: error: implicit declaration of function 'cairo_win32_surface_create_with_format' [-Werror=implicit-function-declaration]
####see also: https://github.com/Alexpux/MINGW-packages/blob/master/mingw-w64-cairo/0030-add-cairo-API-to-setup-Win32-surface-for-HDC.patch#L60
#export VERSION=1.14.6
#export VERSIONDATE=20151210
#export VERSION=1.14.8
#export VERSIONDATE=20161208
#export VERSION=1.14.10
#export VERSIONDATE=20170616
#export VERSION=1.14.12
#export VERSIONDATE=20171207
#export VERSION=1.15.2
#export VERSIONDATE=20160718
#export VERSION=1.16.0
#export VERSIONDATE=20181020
export VERSION=1.17.4
export VERSIONDATE=20210215
wl-showstatus --package-version
export DEPENDENCIES=glib2,pixman,freetype2,fontconfig,pthreads,zlib,libpng,libjpeg,libopenjpeg,expat,libiconv,libxext
export OPTIONALDEPENDENCIES=libx11,xcb,libspectre,lzo
export BUILDDEPENDENCIES=
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=COPYING
export LICENSETYPE=LGPL/MPL
#export DOWNLOADURL="http://www.cairographics.org/releases/"
export DOWNLOADURL="https://www.cairographics.org/releases/"
#export DOWNLOADURL="https://cairographics.org/snapshots/"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
##export DOWNLOADSOURCEURL=http://cairographics.org/snapshots/$BASENAME-$VERSION.tar.gz
#export DOWNLOADSOURCEURL=http://www.cairographics.org/releases/$BASENAME-$VERSION.tar.gz
#export DOWNLOADSOURCEURL=http://www.cairographics.org/releases/$BASENAME-$VERSION.tar.xz
export DOWNLOADSOURCEURL=https://www.cairographics.org/snapshots/$BASENAME-$VERSION.tar.xz
#export DOWNLOADSOURCEURL=https://www.cairographics.org/releases/$BASENAME-$VERSION.tar.xz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
#tar xfz $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
tar xfJ $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.xz
cd $BASENAME-$VERSION
# fix missing ffs in src/cairo.c
mv src/cairo.c src/cairo.c.bak
echo "#define ffs __builtin_ffs" > src/cairo.c
cat src/cairo.c.bak >> src/cairo.c
## fix missing file
#mkdir -p sys
#touch sys/ipc.h
## fix test/cairo-test.c (version >= 1.12.0)
#patch -ulbf test/cairo-test << EOF
#--- test/cairo-test.c  2012-02-29 13:10:30 +0100
#+++ test/cairo-test.c  2012-03-24 08:14:42 +0100
#@@ -92,3 +92,3 @@
#
#-#if ! HAVE_ALARM
#+#ifndef HAVE_ALARM
# #define alarm(X);
#EOF
## fix test/test/any2ppm.c (version >= 1.12.0)
#mv test/any2ppm.c test/any2ppm.c.bak
#sed -e "s/_write/_write_/g" test/any2ppm.c.bak > test/any2ppm.c
# fix redefinition of ssize_t in util/cairo-missing/cairo-missing.h (version >= 1.12.2 <= 1.12.16)
patch -ulbf util/cairo-missing/cairo-missing.h << EOF
--- util/cairo-missing/cairo-missing.h  2012-03-29 22:13:10 +0200
+++ util/cairo-missing/cairo-missing.h  2012-04-30 09:56:06 +0200
@@ -43,3 +43,3 @@

-#ifndef _SSIZE_T_DEFINED
+#if !defined(_SSIZE_T_DEFINED) && !defined(__MINGW32__)
 typedef SSIZE_T ssize_t;
EOF
# fix already defined DIFFERENCE in src/cairo-xcb-surface-render.c (version >= 1.12.6)
patch -ulbf src/cairo-xcb-surface-render.c << EOF
--- src/cairo-xcb-surface-render.c  2012-10-09 17:52:36 +0200
+++ src/cairo-xcb-surface-render.c  2012-10-23 23:13:24 +0200
@@ -51,2 +51,3 @@
 #define PIXMAN_MAX_INT ((pixman_fixed_1 >> 1) - pixman_fixed_e) /* need to ensure deltas also fit */
+#undef DIFFERENCE

EOF
# fix missing INT_MIN in boilerplate/cairo-boilerplate-win32.c (version >= 1.15.2)
mv boilerplate/cairo-boilerplate-win32.c boilerplate/cairo-boilerplate-win32.c.bak &&
echo "#include <limits.h>" > boilerplate/cairo-boilerplate-win32.c
cat boilerplate/cairo-boilerplate-win32.c.bak >> boilerplate/cairo-boilerplate-win32.c
## fix missing DBL_EPSILON (version >= 1.16.0)
#sed -i.bak -e "s/\bDBL_EPSILON\b/__DBL_EPSILON__/g" $(grep -lw DBL_EPSILON */*.c)
## fix missing folder (version >= 1.16.0)
#mkdir -p lib
# skip building test (version >= 1.12.0)
cat > test/Makefile.in << EOF
clean:
all:
install:
install-strip:
EOF
cp -f test/Makefile.in test/Makefile.am
# don't enable stack protector (version >= 1.17.4)
sed -i.bak -e "s/-Wp,-D_FORTIFY_SOURCE=2//" configure
wl-showstatus configure &&
 #mkdir -p m4 &&
 #autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal &&
 ## fix for building DLLs on 64-bit
 #if ( echo $RUNPLATFORM | grep -q x86_64 ); then
 # #libtoolize -i -c -f ||
 # autoreconf -f -i -I $MINGWPREFIX/share/aclocal
 #fi &&
 ## fix configure (version = 1.14.0)
 #mv configure configure.bak &&
 #sed -e "s/\(strings - conftest\)/\1.exe/" configure.bak > configure &&
 if [ ! -f $MINGWPREFIX/include/X11/Xlib.h ]; then
  ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-ft --enable-fc --enable-pdf --disable-xlib --disable-xlib-xrender --disable-xcb LDFLAGS="-lpthread"
  #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-ft --enable-fc --enable-pdf --disable-xlib --disable-xlib-xrender --disable-xcb LDFLAGS="-lpthread -fstack-protector"
 else
  #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-ft --enable-fc --enable-pdf --enable-xlib --disable-xlib-xrender --disable-xcb LDFLAGS="-lpthread"
  ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-ft --enable-fc --enable-pdf --enable-xlib --disable-xlib-xrender --enable-xcb --enable-xlib-xcb --disable-xcb-shm LDFLAGS="-lpthread"
  #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-ft --enable-fc --enable-pdf --enable-xlib --disable-xlib-xrender --enable-xcb --enable-xlib-xcb --disable-xcb-shm LDFLAGS="-lpthread -fstack-protector"
 fi &&
 # fix detection of shared libraries
 sed -i.bak -e "s/\(deplibs_check_method=\"\)[^\"]*/\1pass_all/" libtool &&
 wl-showstatus build-install &&
 #( make install-strip || make install-strip LIBS="-Wl,--as-needed -lpng.dll -lopenjpeg.dll" ) && 
 #( make install-strip || make install-strip LIBS="-Wl,--as-needed -lpng -lopenjpeg" ) && 
 ( make install-strip || make install-strip LIBS="-Wl,--as-needed -lpng -lopenjp2" ) && 
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION



#export NAME="cairo"
#export STATUS=
#export URL=http://www.cairographics.org/
#export BASENAME=cairo
#export DESCRIPTION="Cairo is a 2D graphics library with support for multiple output devices. Currently supported output targets include the X Window System, Quartz, Win32, image buffers, PostScript, PDF, and SVG file output. Experimental backends include OpenGL (through glitz), XCB, BeOS, OS/2, and DirectFB."
#export CATEGORY=graphics
#export TYPE=library
#export VERSION=1.17.4
#export VERSIONDATE=20210215
#####Run-time dependency cogl-2.0-experimental found: NO (tried pkgconfig and cmake)
#wl-showstatus --package-version
#export DEPENDENCIES=glib2,pixman,freetype2,fontconfig,pthreads,zlib,libpng,libjpeg,libopenjpeg,expat,libiconv
#export OPTIONALDEPENDENCIES=libx11,xcb,libxext,libspectre,lzo
##export OPTIONALDEPENDENCIES=libx11,xcb,libxext,libspectre,lzo,cogl
#export BUILDDEPENDENCIES=meson,ninja
#export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=COPYING
#export LICENSETYPE=LGPL/MPL
#export DOWNLOADURL="https://www.cairographics.org/releases/"
##export DOWNLOADURL="https://cairographics.org/snapshots/"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://www.cairographics.org/releases/$BASENAME-$VERSION.tar.xz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#tar xfJ $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.xz
#cd $BASENAME-$VERSION
#mkdir -p build_both &&
# wl-showstatus configure &&
# PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Dfontconfig=enabled -Dfreetype=enabled -Dgl-backend=disabled -Dwgl=enabled -Dcogl=disabled -Dzlib=enabled -Dpng=enabled -Dxcb=disabled -Dxlib=disabled -Dtests=disabled -Dc_args="-I$MINGWPREFIX/include/libdl-win32" . build_both &&
# #PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Dfontconfig=enabled -Dfreetype=enabled -Dgl-backend=disabled -Dwgl=enabled -Dcogl=disabled -Dzlib=enabled -Dpng=enabled -Dxcb=disabled -Dxlib=auto -Dtests=disabled -Dc_args="-I$MINGWPREFIX/include/libdl-win32" . build_both &&
# #PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Dfontconfig=enabled -Dfreetype=enabled -Dgl-backend=disabled -Dwgl=enabled -Dcogl=enabled -Dzlib=enabled -Dpng=enabled -Dxcb=disabled -Dxlib=disabled -Dtests=disabled -Dc_args="-I$MINGWPREFIX/include/libdl-win32" . build_both &&
# #PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Dfontconfig=enabled -Dfreetype=enabled -Dgl-backend=gl -Dwgl=enabled -Dcogl=enabled -Dzlib=enabled -Dpng=enabled -Dxcb=disabled -Dxlib=disabled -Dtests=disabled -Dc_args="-I$MINGWPREFIX/include/libdl-win32" . build_both &&
# #sed -i.bak -e "s?^\s*LINK_ARGS\s*=.*-ladvapi32\(\"\)*?& \1-lopengl32\1 \1-lglu32\1?" build_both/build.ninja &&
# wl-showstatus build-install &&
# PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib ninja -Cbuild_both install &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




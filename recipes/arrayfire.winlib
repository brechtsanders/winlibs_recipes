export NAME="ArrayFire"
export STATUS=
export URL=http://gpuopen.com/compute-product/arrayfire/
#export URL=https://github.com/arrayfire/arrayfire
export BASENAME=arrayfire
export DESCRIPTION="ArrayFire is a parallel-computing library that focuses on ease of use and portability. Its array-based functions make parallel programming simple. By providing multiple back ends, ArrayFire enables you to easily compile applications once and run them on Cuda, OpenCL or multithreaded devices, depending on the hardware."
export CATEGORY=development
export TYPE=library
#export VERSION=3.3.2
#export VERSIONDATE=20160611
#export VERSION=3.4.0
#export VERSIONDATE=20160914
#export VERSION=3.4.1
#export VERSIONDATE=20161016
#export VERSION=3.4.2
#export VERSIONDATE=20170419
#export VERSION=3.5.0
#export VERSIONDATE=20170624
#export VERSION=3.5.1
#export VERSIONDATE=20170919
#export VERSION=3.6.0
#export VERSIONDATE=20180504
####Could NOT find FFTW (missing: FFTW_LIBRARIES)
#export VERSION=3.6.1
#export VERSIONDATE=20180706
#export VERSION=3.6.2
#export VERSIONDATE=20181130
#export VERSION=3.6.3
#export VERSIONDATE=20190422
#export VERSION=3.6.4
#export VERSIONDATE=20190521
#export VERSION=3.7.0
#export VERSIONDATE=20200214
#export VERSION=3.7.1
#export VERSIONDATE=20200329
#export VERSION=3.7.2
#export VERSIONDATE=20200713
#export VERSION=3.7.3
#export VERSIONDATE=20201124
####CMake Error at CMakeModules/FindMKL.cmake:58 (if):  if given arguments:  "GREATER_EQUAL" "1900"
export VERSION=3.8.0
export VERSIONDATE=20210109
#export VERSION=3.8.1
#export VERSIONDATE=20220119
#export VERSION=3.8.2
#export VERSIONDATE=20220520
wl-showstatus --package-version
export DEPENDENCIES=fftw,glad,freeimage,openblas,khronos-opencl-icd-loader,openblas
#clfft,forge
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja,doxygen
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=
#export DOWNLOADURL="https://github.com/arrayfire/arrayfire/releases arrayfire-full-"
#export DOWNLOADURL="http://arrayfire.com/arrayfire_source/ arrayfire-full-"
export DOWNLOADURL="https://github.com/arrayfire/arrayfire/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://arrayfire.com/arrayfire_source/arrayfire-full-$VERSION.tar.bz2
#export DOWNLOADSOURCEURL=http://arrayfire.com/arrayfire_source/arrayfire-full-$VERSION.tar.bz2
#export DOWNLOADSOURCEURL=https://github.com/arrayfire/arrayfire/archive/v$VERSION.tar.gz
export DOWNLOADSOURCEURL=https://github.com/arrayfire/arrayfire/releases/download/v$VERSION/arrayfire-full-$VERSION.tar.bz2
#export DOWNLOADSOURCEURL=https://github.com/arrayfire/arrayfire/archive/refs/tags/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xfj $TARBALLDIR/$BASENAME/arrayfire-full-$VERSION.tar.bz2
cd arrayfire-full-$VERSION
#tar xfz $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
#cd $BASENAME-$VERSION
# fix undefined __FUNCSIG__
sed -i.bak "s/^\(\s*\)\(#define __PRETTY_FUNCTION__\) \(__FUNCSIG__\)/\1#ifdef \3\n\1    \2 \3\n\1#else\n\1    \2 __func__\n\1#endif/" include/af/defines.h src/backend/common/defines.hpp extern/forge/src/backend/common/defines.hpp
# fix undefined __FUNCSIG__ (version >= 3.8.0)
sed -i.bak2 "s/^\(\s*\)\(#define STATIC_ \)\(static\)/\1#ifndef __MINGW32__\n\1    \2\3\n\1#else\n\1    \2inline\n\1#endif/" src/backend/common/defines.hpp
# fix src/backend/opencl/homography.cpp (version >= 3.7.3)
mv src/backend/opencl/homography.cpp src/backend/opencl/homography.cpp.bak &&
echo "#include <cfloat>" > src/backend/opencl/homography.cpp &&
cat src/backend/opencl/homography.cpp.bak >> src/backend/opencl/homography.cpp
# fix src/backend/cpu/math.hpp (version >= 3.8.0)
patch -ulbf src/backend/cpu/math.hpp << EOF
@@ -49,3 +49,3 @@
 template<>
-STATIC_ cfloat division<cfloat>(cfloat lhs, double rhs) {
+cfloat division<cfloat>(cfloat lhs, double rhs) {
     cfloat retVal(real(lhs) / static_cast<float>(rhs),
@@ -56,3 +56,3 @@
 template<>
-STATIC_ cdouble division<cdouble>(cdouble lhs, double rhs) {
+cdouble division<cdouble>(cdouble lhs, double rhs) {
     cdouble retVal(real(lhs) / rhs, imag(lhs) / rhs);
@@ -62,3 +62,3 @@
 template<typename T>
-STATIC_ T maxval() {
+T maxval() {
     return std::numeric_limits<T>::max();
@@ -66,3 +66,3 @@
 template<typename T>
-STATIC_ T minval() {
+T minval() {
     return std::numeric_limits<T>::lowest();
@@ -70,3 +70,3 @@
 template<>
-STATIC_ float maxval() {
+float maxval() {
     return std::numeric_limits<float>::infinity();
@@ -74,3 +74,3 @@
 template<>
-STATIC_ double maxval() {
+double maxval() {
     return std::numeric_limits<double>::infinity();
@@ -78,3 +78,3 @@
 template<>
-STATIC_ common::half maxval() {
+common::half maxval() {
     return std::numeric_limits<common::half>::infinity();
@@ -82,3 +82,3 @@
 template<>
-STATIC_ float minval() {
+float minval() {
     return -std::numeric_limits<float>::infinity();
@@ -86,3 +86,3 @@
 template<>
-STATIC_ double minval() {
+double minval() {
     return -std::numeric_limits<double>::infinity();
@@ -90,3 +90,3 @@
 template<>
-STATIC_ common::half minval() {
+common::half minval() {
     return -std::numeric_limits<common::half>::infinity();
EOF
# fix type conversion issue in src/backend/common/module_loading_windows.cpp (version >= 3.8.0)
####src/backend/common/module_loading_windows.cpp:21:12: error: invalid conversion from 'uintptr_t' {aka 'long long unsigned int'} to 'void*' [-fpermissive]
patch -ulbf src/backend/common/module_loading_windows.cpp << EOF
@@ -20,3 +20,3 @@
 void* getFunctionPointer(LibHandle handle, const char* symbolName) {
-    return GetProcAddress(handle, symbolName);
+    return (void*)(uintptr_t)GetProcAddress(handle, symbolName);
 }
EOF
# fix CMakeModules/AFconfigure_forge_submodule.cmake (version >= 3.8.0)
patch -ulbf CMakeModules/AFconfigure_forge_submodule.cmake << EOF
@@ -47,4 +47,4 @@
   configure_file(
-    \${PROJECT_SOURCE_DIR}/extern/forge/CMakeModules/version.h.in
-    \${PROJECT_BINARY_DIR}/extern/forge/include/fg/version.h
+    \${PROJECT_SOURCE_DIR}/CMakeModules/version.h.in
+    \${PROJECT_BINARY_DIR}/include/fg/version.h
     )
EOF
# fix src/backend/common/CMakeLists.txt (version >= 3.8.0)
patch -ulbf src/backend/common/CMakeLists.txt << EOF
@@ -79,2 +79,3 @@

+find_package(glad CONFIG REQUIRED)
 target_link_libraries(afcommon_interface
@@ -83,3 +84,3 @@
     Boost::boost
-    af_glad_interface
+    glad::glad
     \${CMAKE_DL_LIBS}
EOF
# fix src/backend/opencl/kernel/scan_by_key/CMakeLists.txt (version >= 3.8.0)
patch -ulbf src/backend/opencl/kernel/scan_by_key/CMakeLists.txt << EOF
@@ -29,2 +29,3 @@

+    find_package(glad CONFIG REQUIRED)
     target_include_directories(opencl_scan_by_key_\${SBK_BINARY_OP}
@@ -41,3 +42,3 @@
         \$<TARGET_PROPERTY:Boost::boost,INTERFACE_INCLUDE_DIRECTORIES>
-        \$<TARGET_PROPERTY:af_glad_interface,INTERFACE_INCLUDE_DIRECTORIES>
+        \$<TARGET_PROPERTY:glad::glad,INTERFACE_INCLUDE_DIRECTORIES>
         \${ArrayFire_SOURCE_DIR}/extern/forge/include
EOF
# fix src/backend/opencl/kernel/sort_by_key/CMakeLists.txt (version >= 3.8.0)
patch -ulbf src/backend/opencl/kernel/sort_by_key/CMakeLists.txt << EOF
@@ -34,2 +34,3 @@

+    find_package(glad CONFIG REQUIRED)
     target_include_directories(opencl_sort_by_key_\${SBK_TYPE}
@@ -39,3 +40,3 @@
         \$<TARGET_PROPERTY:Boost::boost,INTERFACE_INCLUDE_DIRECTORIES>
-        \$<TARGET_PROPERTY:af_glad_interface,INTERFACE_INCLUDE_DIRECTORIES>
+        \$<TARGET_PROPERTY:glad::glad,INTERFACE_INCLUDE_DIRECTORIES>
         \${ArrayFire_SOURCE_DIR}/extern/forge/include
EOF
# fix missing files
touch extern/glad/CMakeLists.txt
mkdir -p extern/forge/CMakeModules; touch extern/forge/CMakeModules/version.h.in
sed -i.bak -e "s?^.*extern/spdlog?#&?" CMakeLists.txt
sed -i.bak -e "s?\${MSVC_VERSION} GREATER_EQUAL 1900?TRUE?" CMakeModules/FindMKL.cmake
# avoid invalid compiler flags (version >= 3.8.0)
sed -i.bak -e "s?/wd[0-9]*??g" CMakeModules/platform.cmake
mkdir -p build_win &&
 wl-showstatus configure &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DAF_BUILD_CPU:BOOL=ON -DAF_BUILD_OPENCL:BOOL=OFF -DAF_BUILD_CUDA:BOOL=OFF -DAF_BUILD_UNIFIED:BOOL=ON -DAF_WITH_CUDNN:BOOL=OFF -DAF_BUILD_FORGE:BOOL=OFF -DMKL_THREAD_LAYER:STRING=sequential -DAF_WITH_LOGGING:BOOL=OFF -DAF_WITH_STACKTRACE:BOOL=OFF -DAF_STACKTRACE_TYPE:STRING=None -DFFTW_INCLUDES:PATH=$MINGWPREFIX/include -DFFTW_LIB:FILEPATH=$MINGWPREFIX/lib/libfftw3.dll.a -DFFTW_LIB:FILEPATH=$MINGWPREFIX/lib/libfftwf3.dll.a -DAF_BUILD_DOCS:BOOL=OFF -DAF_BUILD_EXAMPLES:BOOL=OFF -DBUILD_TEST:BOOL=OFF -DBUILD_TESTING:BOOL=OFF -DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) -S. -Bbuild_win &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DAF_BUILD_CPU:BOOL=ON -DAF_BUILD_OPENCL:BOOL=ON -DAF_BUILD_CUDA:BOOL=OFF -DAF_BUILD_UNIFIED:BOOL=ON -DAF_WITH_CUDNN:BOOL=OFF -DAF_BUILD_FORGE:BOOL=OFF -DMKL_THREAD_LAYER:STRING=Sequential -DAF_WITH_LOGGING:BOOL=OFF -DAF_WITH_STACKTRACE:BOOL=OFF -DAF_STACKTRACE_TYPE:STRING=None -DFFTW_INCLUDES:PATH=$MINGWPREFIX/include -DFFTW_LIB:FILEPATH=$MINGWPREFIX/lib/libfftw3.dll.a -DFFTW_LIB:FILEPATH=$MINGWPREFIX/lib/libfftwf3.dll.a -DAF_BUILD_DOCS:BOOL=OFF -DAF_BUILD_EXAMPLES:BOOL=OFF -DBUILD_TEST:BOOL=OFF -DBUILD_TESTING:BOOL=OFF -DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) -S. -Bbuild_win &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DAF_BUILD_CPU:BOOL=ON -DAF_BUILD_OPENCL:BOOL=ON -DAF_BUILD_CUDA:BOOL=OFF -DAF_BUILD_UNIFIED:BOOL=ON -DAF_WITH_CUDNN:BOOL=OFF -DAF_BUILD_FORGE:BOOL=OFF -DMKL_THREAD_LAYER:STRING="GNU OpenMP" -DAF_WITH_LOGGING:BOOL=OFF -DAF_WITH_STACKTRACE:BOOL=OFF -DAF_STACKTRACE_TYPE:STRING=None -DFFTW_INCLUDES:PATH=$MINGWPREFIX/include -DFFTW_LIB:FILEPATH=$MINGWPREFIX/lib/libfftw3.dll.a -DFFTW_LIB:FILEPATH=$MINGWPREFIX/lib/libfftwf3.dll.a -DAF_BUILD_DOCS:BOOL=OFF -DAF_BUILD_EXAMPLES:BOOL=OFF -DBUILD_TEST:BOOL=OFF -DBUILD_TESTING:BOOL=OFF -DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) -DCMAKE_CXX_FLAGS:STRING="-fpermissive" -S. -Bbuild_win &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DAF_BUILD_CPU:BOOL=ON -DAF_BUILD_OPENCL:BOOL=ON -DAF_BUILD_CUDA:BOOL=OFF -DAF_BUILD_UNIFIED:BOOL=ON -DAF_BUILD_CUDA:BOOL=OFF -DAF_BUILD_FORGE:BOOL=OFF -DMKL_THREAD_LAYER:STRING="GNU OpenMP" -DAF_WITH_IMAGEIO:BOOL=OFF -DAF_WITH_LOGGING:BOOL=OFF -DAF_STACKTRACE_TYPE:STRING=None -DAF_BUILD_DOCS:BOOL=OFF -DAF_BUILD_EXAMPLES:BOOL=OFF -DBUILD_TEST:BOOL=OFF -DBUILD_TESTING:BOOL=OFF -DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) -S. -Bbuild_win &&
 #TBB;GNU OpenMP;Intel OpenMP;Sequential
 sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*-ladvapi32/& -Wl,-allow-multiple-definition/" build_win/build.ninja &&
 wl-showstatus build &&
 ( ninja -Cbuild_win || ( sed -i.bak -e "s/CreateFile/&W/" build_win/third_party/clFFT/src/clFFT-ext/src/library/fft_binary_lookup.cpp && ninja -Cbuild_win )) &&
 wl-showstatus build-install &&
 ninja -Cbuild_win install/strip &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf arrayfire-full-$VERSION
####See also: https://gitcode.net/mirrors/microsoft/vcpkg/-/blob/master/ports/arrayfire/build.patch
####TO DO: build static library




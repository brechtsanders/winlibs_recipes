export NAME="Szip"
export STATUS=
#export URL=http://www.compressconsult.com/szip/
export URL=http://www.hdfgroup.org/doc_resource/SZIP/
#export URL=https://github.com/erdc/szip
export BASENAME=libsz
export DESCRIPTION="General purpose lossless compression library."
export CATEGORY=compression
export TYPE=library
#export VERSION=2.1
#export VERSIONDATE=20101210
export VERSION=2.1.1
export VERSIONDATE=20170204
wl-showstatus --package-version
export DEPENDENCIES=
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=COPYING
export LICENSETYPE=
#export DOWNLOADURL="ftp://ftp.hdfgroup.org/lib-external/szip/2.1/src/"
#export DOWNLOADURL="http://www.hdfgroup.org/ftp/lib-external/szip/"
export DOWNLOADURL="https://support.hdfgroup.org/ftp/lib-external/szip/"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=ftp://grads.iges.org/grads/Supplibs/2.0/src/szip-$VERSION.tar.gz
#export DOWNLOADSOURCEURL=ftp://ftp.hdfgroup.org/lib-external/szip/$VERSION/src/szip-$VERSION.tar.gz
export DOWNLOADSOURCEURL=https://support.hdfgroup.org/ftp/lib-external/szip/$VERSION/src/szip-$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
tar xz --force-local -f $TARBALLDIR/$BASENAME/szip-$VERSION.tar.gz
cd szip-$VERSION
# fix src/rice.c (version >= 2.1.1)
patch -ulbf src/rice.c << EOF
@@ -105,4 +105,4 @@
 #ifndef REMOVE_SZIP_ENCODER
-static int (*winner_function)();
-static int (*winner_ref_function)();
+static int (*winner_function)(unsigned*, unsigned*);
+static int (*winner_ref_function)(unsigned*, unsigned*);
 #endif /* !defined(REMOVE_SZIP_ENCODER) */
EOF
# fix missing libsz.pc
cat > libsz.pc << EOF
prefix=$INSTALLPREFIX
exec_prefix=\${prefix}
libdir=\${prefix}/lib
includedir=\${prefix}/include

Name: libsz
Description: $DESCRIPTION
Version: $VERSION
Libs: -L\${libdir} -lsz
Cflags: -I\${includedir}
EOF
wl-showstatus configure &&
 ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM LDFLAGS="-Wl,-no-undefined" &&
 wl-showstatus build-install &&
 # fix building DLLs
 sed -i.bak -e "s/\(allow_undefined=\)yes/\1no/" libtool &&
 make install-strip &&
 # manually install libsz.pc
 mkdir -p $INSTALLPREFIX/lib/pkgconfig &&
 cp -u libsz.pc $INSTALLPREFIX/lib/pkgconfig/ &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf szip-$VERSION



#export BUILDDEPENDENCIES=cmake,ninja
#mkdir -p build_static build_shared &&
# wl-showstatus configure-static &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DBUILD_TESTING:BOOL=OFF -DCMAKE_POLICY_VERSION_MINIMUM:STRING=3.5 -S. -Bbuild_static &&
# wl-showstatus configure-shared &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DBUILD_TESTING:BOOL=OFF -DCMAKE_POLICY_VERSION_MINIMUM:STRING=3.5 -S. -Bbuild_shared &&
# wl-showstatus build-install-static &&
# ninja -Cbuild_static install/strip &&
# wl-showstatus build-install-shared &&
# ninja -Cbuild_shared install/strip &&
#    echo OK




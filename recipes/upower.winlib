#export NAME="UPower"
#export STATUS=
#export URL=http://upower.freedesktop.org/
#export BASENAME=upower
#export DESCRIPTION="UPower is an abstraction for enumerating power devices, listening to device events and querying history and statistics. Any application or service on the system can access the org.freedesktop.UPower service via the system message bus."
#export CATEGORY=hardware
#export TYPE=library
##export VERSION=0.9.7
##export VERSIONDATE=20101117
##export VERSION=0.9.8
##export VERSIONDATE=20110107
##export VERSION=0.9.9
##export VERSIONDATE=20110321
##export VERSION=0.9.10
##export VERSIONDATE=20110504
##export VERSION=0.9.11
##export VERSIONDATE=20110525
##export VERSION=0.9.14
##export VERSIONDATE=20111126
##export VERSION=0.9.15
##export VERSIONDATE=20111205
##export VERSION=0.9.16
##export VERSIONDATE=20120430
##export VERSION=0.9.17
##export VERSIONDATE=20120625
##export VERSION=0.9.18
##export VERSIONDATE=20120808
##export VERSION=0.9.19
##export VERSIONDATE=20130102
##export VERSION=0.9.20
##export VERSIONDATE=20130318
##export VERSION=0.9.21
##export VERSIONDATE=20130726
##export VERSION=0.9.22
##export VERSIONDATE=20131008
##export VERSION=0.9.23
##export VERSIONDATE=20131018
##export VERSION=0.99.0
##export VERSIONDATE=20131029
##export VERSION=0.99.1
##export VERSIONDATE=20140818
#####No package 'gio-unix-2.0' found
##export VERSION=0.99.2
##export VERSIONDATE=20141218
##export VERSION=0.99.3
##export VERSIONDATE=20150528
##export VERSION=0.99.4
##export VERSIONDATE=20160406
##export VERSION=0.99.5
##export VERSIONDATE=20170724
##export VERSION=0.99.6
##export VERSIONDATE=20170912
##export VERSION=0.99.7
##export VERSIONDATE=20171128
#export VERSION=0.99.11
#export VERSIONDATE=20190903
#wl-showstatus --package-version
#export DEPENDANCIES=glib2,dbus,polkit
#export OPTIONALDEPENDANCIES=
#export BUILDDEPENDANCIES=
#export LICENSEFILE=COPYING
#export LICENSETYPE=GPL
#export DOWNLOADURL="http://upower.freedesktop.org/releases/"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
##export DOWNLOADSOURCEURL=http://upower.freedesktop.org/releases/$BASENAME-$VERSION.tar.bz2
#export DOWNLOADSOURCEURL=http://upower.freedesktop.org/releases/$BASENAME-$VERSION.tar.xz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
##tar xfj $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.bz2
#tar xfJ $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.xz
#cd $BASENAME-$VERSION
### fix problem detecting GNU gettext tools on 64-bit
##if ( echo $RUNPLATFORM | grep -q x86_64 ); then
## sed -i.bak -e "s/as_fn_error\(.*GNU gettext tools not found; required for intltool\)/as_echo\1/" configure
##fi
## fix missing gio-unix-2.0 (version >= 0.99.0)
#sed -i.bak2 -e "s/gio-unix-2.0/gio-windows-2.0/" configure
#wl-showstatus configure &&
# #INTLTOOL_PERL="$PERLDIR/bin/perl.exe" ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-introspection=no &&
# #PERL="$PERLDIR/bin/perl.exe" ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-introspection=no &&
# PATH=$PATH:$PERLDIR/../c/bin INTLTOOL_PERL="$PERLDIR/bin/perl.exe" ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-introspection=no &&
# wl-showstatus build-install &&
# ( PATH=$PATH:$PERLDIR/../c/bin make install-strip || PATH=$PATH:$PERLDIR/../c/bin make -i install-strip; make install-pkgconfigDATA ) &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION



export NAME="UPower"
export STATUS=
export URL=http://upower.freedesktop.org/
export BASENAME=upower
export DESCRIPTION="UPower is an abstraction for enumerating power devices, listening to device events and querying history and statistics. Any application or service on the system can access the org.freedesktop.UPower service via the system message bus."
export CATEGORY=hardware
export TYPE=library
#export VERSION=0.99.17
#export VERSIONDATE=20220319
#export VERSION=0.99.18
#export VERSIONDATE=20220517
export VERSION=0.99.19
export VERSIONDATE=20220608
wl-showstatus --package-version
export DEPENDANCIES=glib2,dbus,polkit,libudev-stub
export OPTIONALDEPENDANCIES=
export BUILDDEPENDANCIES=meson,ninja
export LICENSEFILE=COPYING
export LICENSETYPE=GPL
#export DOWNLOADURL="https://cgit.freedesktop.org/upower/ ?h=v"
export DOWNLOADURL="https://gitlab.freedesktop.org/upower/upower/-/tags"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://gitlab.freedesktop.org/upower/upower/-/archive/v$VERSION/upower-v$VERSION.tar.bz2
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
tar xfj $TARBALLDIR/$BASENAME/upower-v$VERSION.tar.bz2
cd upower-v$VERSION
## fix src/up-main.c (version >= 0.99.17)
#patch -ulbf src/up-main.c << EOF
#@@ -31,3 +31,5 @@
# #include <glib.h>
#+#ifndef _WIN32
# #include <glib-unix.h>
#+#endif
# #include <glib/gi18n-lib.h>
#@@ -242,2 +244,3 @@
#        /* do stuff on ctrl-c */
#+#ifndef _WIN32
#        g_unix_signal_add_full (G_PRIORITY_DEFAULT,
#@@ -247,2 +250,3 @@
#                                NULL);
#+#endif
#
#EOF
# fix src/up-main.c (version >= 0.99.18)
patch -ulbf src/up-main.c << EOF
@@ -31,3 +31,7 @@
 #include <glib.h>
+#ifdef _WIN32
+#define g_unix_signal_add_full(...)
+#else
 #include <glib-unix.h>
+#endif
 #include <glib/gi18n-lib.h>
EOF
# fix missing mkdtemp() (version >= 0.99.18)
cat > mkdtemp.c << EOF
#include <time.h>
#include <math.h>
#include <errno.h>
#include <sys/stat.h>
#include <string.h>
#include <windows.h>
#include <accctrl.h>
#include <aclapi.h>

static PSECURITY_DESCRIPTOR create_sd (int permissions)
{
  PSECURITY_DESCRIPTOR pSD = NULL;
  int i;
  int j;
  EXPLICIT_ACCESS ea[3];
  PSID sids[3] = { NULL, NULL, NULL };
  WELL_KNOWN_SID_TYPE sidtypes[3] = { WinCreatorOwnerSid, WinCreatorGroupSid, WinWorldSid };
  int ea_len = 0;
  DWORD dwRes, dwDisposition;
  PACL pACL = NULL;

  /* Initialize a security descriptor. */
  pSD = (PSECURITY_DESCRIPTOR)LocalAlloc(LPTR, SECURITY_DESCRIPTOR_MIN_LENGTH);
  if (NULL == pSD) {
    errno = ENOMEM;
    return NULL;
  }

  if (!InitializeSecurityDescriptor(pSD, SECURITY_DESCRIPTOR_REVISION)) {
    LocalFree(pSD);
    errno = EIO;
    return NULL;
  }

  for (i = 0; i < 3; i++) {
    BOOL b;
    DWORD bytes;
    int imasked = permissions & (0x07 << (2 - i));
    if (!imasked)
      continue;

    bytes = SECURITY_MAX_SID_SIZE;
    sids[ea_len] = (PSID)LocalAlloc(LMEM_FIXED, bytes);
    if (NULL == sids[ea_len]) {
      errno = ENOMEM;
      LocalFree(pSD);
      for (j = 0; j < ea_len; j++) {
        if (sids[j] != NULL) {
          LocalFree(sids[j]);
          sids[j] = NULL;
        }
      }
      return NULL;
    }

    b = CreateWellKnownSid(sidtypes[i], NULL, sids[ea_len], &bytes);
    if (!b) {
      errno = EINVAL;
      LocalFree(pSD);
      for (j = 0; j < ea_len; j++) {
        if (sids[j] != NULL) {
          LocalFree(sids[j]);
          sids[j] = NULL;
        }
      }
      return NULL;
    }

    /* Initialize an EXPLICIT_ACCESS structure for an ACE. */
    ZeroMemory(&ea[ea_len], sizeof(EXPLICIT_ACCESS));
    bytes = 0;
    if (01 & imasked)
      bytes = bytes | GENERIC_READ;
    if (02 & imasked)
      bytes = bytes | GENERIC_WRITE;
    if (04 & imasked)
      bytes = bytes | GENERIC_EXECUTE;
    ea[ea_len].grfAccessPermissions = bytes;
    ea[ea_len].grfAccessMode = SET_ACCESS;
    ea[ea_len].grfInheritance= NO_INHERITANCE;
    ea[ea_len].Trustee.TrusteeForm = TRUSTEE_IS_SID;
    ea[ea_len].Trustee.TrusteeType = TRUSTEE_IS_WELL_KNOWN_GROUP;
    ea[ea_len].Trustee.ptstrName  = (LPTSTR)sids[ea_len];
    ea_len = ea_len + 1;
  }

  /* Create a new ACL that contains the new ACEs. */
  dwRes = SetEntriesInAcl(ea_len, ea, NULL, &pACL);
  if (ERROR_SUCCESS != dwRes) {
    errno = EIO;
    LocalFree(pSD);
    for (j = 0; j < ea_len; j++) {
      if (sids[j] != NULL) {
        LocalFree(sids[j]);
        sids[j] = NULL;
      }
    }
    return NULL;
  }

  for (j = 0; j < ea_len; j++) {
    if (sids[j] != NULL) {
      LocalFree(sids[j]);
      sids[j] = NULL;
    }
  }

  /* Add the ACL to the security descriptor. */
  if (!SetSecurityDescriptorDacl(pSD, TRUE, pACL, FALSE)) {
    errno = EIO;
    LocalFree(pSD);
    LocalFree(pACL);
    return NULL;
  } 

  return pSD;
}

static void free_sd (PSECURITY_DESCRIPTOR sd)
{
  BOOL b, present, defaulted;
  PACL pACL = NULL;
  present = FALSE;
  b = GetSecurityDescriptorDacl(sd, &present, &pACL, &defaulted);
  if (b && present && !defaulted && pACL)
    LocalFree(pACL);
  LocalFree(sd);
}

static void randtemplate (char* template, size_t l)
{
  int i;
  for (i = l - 6; i < l; i++) {
    int r = rand ();
    if ((r / (RAND_MAX + 1)) > ((RAND_MAX + 1) / 2))
      template[i] = 'A' + (double)rand() / (RAND_MAX + 1) * ('Z' - 'A');
    else
      template[i] = 'a' + (double)rand() / (RAND_MAX + 1) * ('z' - 'a');
  }
}

static char* mkdtemp (char* template)
{
  int i;
  size_t l;
  BOOL b;
  SECURITY_ATTRIBUTES sa;
  
  if (template == NULL) {
    errno = EINVAL;
    return NULL;
  }
  l = strlen (template);
  if (l < 6 || strcmp(&template[l - 6], "XXXXXX") != 0) {
    errno = EINVAL;
    return NULL;
  }
  srand(time(NULL));
  sa.nLength = sizeof(sa);
  sa.lpSecurityDescriptor = create_sd(0700);
  sa.bInheritHandle = FALSE;
  do {
    randtemplate(template, l);
    SetLastError(0);
    b = CreateDirectoryA(template, &sa);
  } while (!b && GetLastError() == ERROR_ALREADY_EXISTS);
  free_sd(sa.lpSecurityDescriptor);
  if (!b) {
    errno = EIO;
    return NULL;
  } else {
    errno = 0;
    return template;
  }
}
EOF
# fix src/up-self-test.c (version >= 0.99.18)
patch -ulbf src/up-self-test.c << EOF
@@ -35,2 +35,5 @@
 #include "up-native.h"
+#ifdef _WIN32
+#include "../mkdtemp.c"
+#endif

EOF
# fix skip up_self_test in src/meson.build (version >= 0.99.17)
patch -ulbf src/meson.build << EOF
@@ -60,16 +60,2 @@

-up_self_test = executable('up_self_test',
-    sources: [
-        'up-self-test.c',
-    ],
-    c_args: [
-        '-DUPOWER_CONF_PATH="@0@"'.format(meson.source_root() / 'etc' / 'UPower.conf'),
-        '-DG_LOG_DOMAIN="UPower"',
-    ],
-    dependencies: upowerd_deps,
-    link_with: [ upowerd_private, upshared['dummy'] ],
-    gnu_symbol_visibility: 'hidden',
-    build_by_default: true,
-    install: false,
-)

@@ -111,6 +97,2 @@
 #############
-test(
-   'self-test',
-   up_self_test,
-)

EOF
# allow building both static and shared library
sed -i.bak -e "s/shared_\(library\)/\1/" libupower-glib/meson.build
# fix missing gio-unix
sed -i.bak -e "s/gio-unix-/gio-windows-/" meson.build
# fix missing udev (version >= 0.99.18)
sed -i.bak2 -e "s/\(dependency('\)\(udev'\)/\1lib\2/" meson.build
mkdir -p build_both &&
 wl-showstatus configure &&
 PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Dos_backend=dummy -Dudevrulesdir= -Dsystemdsystemunitdir=no -Didevice=disabled -Dintrospection=enabled -Dman=false -Dgtk-doc=false . build_both &&
 wl-showstatus build-install &&
 PKG_CONFIG= PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib ninja -Cbuild_both install &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf upower-v$VERSION




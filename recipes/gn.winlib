#export NAME="GN"
#export STATUS=
##export URL=https://chromium.googlesource.com/chromium/src/tools/gn/
##export URL=https://chromium.googlesource.com/chromium/src/+/master/tools/gn/
#export URL=https://gn.googlesource.com/gn/
#export BASENAME=gn
#export DESCRIPTION="GN is a meta-build system that generates Ninja build files so that you can build Chromium with Ninja."
#export CATEGORY=development
#export TYPE=application
##export VERSION=master
##export VERSIONDATE=20171107
##export VERSION=6630c2e334d7bc179e95a3d543a8eca3201d6725
##export VERSIONDATE=20181123
#export VERSION=9355a7a751f1822545a9d7047f1bda8bc0c54ea8
#export VERSIONDATE=20190828
#wl-showstatus --package-version
#export DEPENDENCIES=libevent
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=
#export OPTIONALBUILDDEPENDENCIES=
##export LICENSEFILE=COPYING
#export LICENSEFILE=LICENSE
#export LICENSETYPE=
##export DOWNLOADURL="https://gn.googlesource.com/gn/"
#export DOWNLOADURL="https://chromium.googlesource.com/chromium/src/tools/gn/"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
##export DOWNLOADSOURCEURL=https://chromium.googlesource.com/chromium/src/+archive/master/tools/gn.tar.gz
##export DOWNLOADSOURCEURL=https://gn.googlesource.com/gn/+archive/$VERSION.tar.gz
#export DOWNLOADSOURCEURL=https://chromium.googlesource.com/chromium/src/tools/gn/+archive/$VERSION.tar.gz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
##mv $TARBALLDIR/$BASENAME/gn.tar.gz $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
#wl-wait4deps
#wl-showstatus extract
#mkdir -p $BASENAME-$VERSION
##tar xz --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz -C$BASENAME-$VERSION
#tar xz --force-local -f $TARBALLDIR/$BASENAME/$VERSION.tar.gz -C$BASENAME-$VERSION
#cd $BASENAME-$VERSION
## fix builfing with MinGW
#mv build/build_win.ninja.template build/build_win.ninja.template.bak &&
#cp -f build/build_linux.ninja.template build/build_win.ninja.template
#sed -i.bak -e "s/platform.is_msvc()/platform.is_darwin()/g" build/gen.py
#wl-showstatus configure &&
#$PYDIR/python.exe bootstrap/bootstrap.py
##$PY2DIR/python.exe build/gen.py --help
##$PY2DIR/python.exe build/gen.py --platform=linux
##$PY2DIR/python.exe build/gen.py --platform=msvc
#CC=${CC:-gcc} CXX=${CXX:-g++} $PY2DIR/python.exe build/gen.py --no-last-commit-position &&
# wl-showstatus build &&
# ninja -C out &&
#    echo OK
##git clone https://gn.googlesource.com/gn
#$PYDIR/python.exe bootstrap/bootstrap.py --help
#$PYDIR/python.exe bootstrap/bootstrap.py &&
# ninja -C out &&
#    echo OK
## wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
#####See also: https://gist.github.com/mohamed/4fa7eb75807463d4dfa3



#export NAME="gn"
#export STATUS=
##export URL=https://gn.googlesource.com/gn
#export URL=https://github.com/o-lim/generate-ninja
#export BASENAME=gn
#export DESCRIPTION="Generate-Ninja, or GN, is a meta-build system that generates Ninja build files so that you can build your project with Ninja."
#export CATEGORY=development
#export TYPE=application
#export VERSION=0.4.1
#export VERSIONDATE=20190828
#wl-showstatus --package-version
#export DEPENDENCIES=
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=
#export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=LICENSE
#export LICENSETYPE=
#export DOWNLOADURL="https://github.com/o-lim/generate-ninja/releases"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://github.com/o-lim/generate-ninja/archive/v$VERSION.tar.gz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#wl-showstatus extract
#tar xz --force-local -f $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
#cd generate-ninja-$VERSION
### fix missing #include <concurrencysal.h> in base/win/windows_types.h
##sed -i.bak -e "s?#include <concurrencysal\.h>?//&?" base/win/windows_types.h
### fix base/win/windows_types.h
##mv base/win/windows_types.h base/win/windows_types.h.bak &&
##echo "#include <concurrencysal.h>" > base/win/windows_types.h &&
##mv base/win/windows_types.h.bak >> base/win/windows_types.h
## fix base/win/windows_types.h
#mv base/win/windows_types.h base/win/windows_types.h.bak &&
#cat > base/win/windows_types.h << EOF
##define UNICODE
##define _UNICODE
##include <windows.h>
#EOF
## fix redefinition of Windows API functions in base/files/file_util.h (version >= 0.4.1)
#patch -ulbf base/files/file_util.h << EOF
#@@ -29,2 +29,3 @@
# #if defined(OS_WIN)
#+#include <windows.h>
# #include "base/win/windows_types.h"
#@@ -66,2 +67,3 @@
# //          TO "rm -rf", SO USE WITH CAUTION.
#+#undef DeleteFile
# bool DeleteFile(const FilePath& path, bool recursive);
#@@ -233,2 +235,3 @@
# // Backward-compatible convenience method for the above.
#+#undef CreateDirectory
# bool CreateDirectory(const FilePath& full_path);
#@@ -305,2 +308,3 @@
# // Sets the current working directory for the process.
#+#undef SetCurrentDirectory
# bool SetCurrentDirectory(const FilePath& path);
#EOF
## fix Unicode issue in base/environment.cc (version >= 0.4.1)
#sed -i.bak -e "s/\([GS]etEnvironmentVariable\)(/\1W(/" base/environment.cc
## fix Unicode issue in tools/gn/setup.cc (version >= 0.4.1)
#sed -i.bak -e "s/\(\s::\)\([GS]etEnvironmentVariable\|GetCurrentDirectory\)(/\1\2W(/" tools/gn/setup.cc
## fix Unicode issue in base/files/file_util_win.cc (version >= 0.4.1)
#sed -i.bak -e "s/\(::\)\(DeleteFile\|CreateDirectory\|SetCurrentDirectory\)(/\1\2W(/; s/#include <windows\.h>/&\n#include <share.h>/" base/files/file_util_win.cc
### fix redefinition of CreateDirectory tools/gn/command_args.cc (version >= 0.4.1)
##sed -i.bak -e "s/^#include <windows.h>$/&\n#undef CreateDirectory/" tools/gn/command_args.cc
## fix tools/gn/command_format_unittest.cc (version >= 0.4.1)
#patch -ulbf tools/gn/command_format_unittest.cc << EOF
#@@ -1 +1,3 @@
#+#include <windows.h>
#+#undef SetCurrentDirectory
# // Copyright 2014 The Chromium Authors. All rights reserved.
#EOF
### fix base/files/file_enumerator_win.cc
##sed -i.bak -e "s/\(FindFirstFileEx\|GetFileAttributes\|PathMatchSpec\)(/\1W(/; s/\(FilePath(\)\(find_data_\.cFileName)\)/\1(char*)\2/" base/files/file_enumerator_win.cc
## fix base/files/file_enumerator_win.cc (version >= 0.4.1)
#patch -ulbf base/files/file_enumerator_win.cc << EOF
#@@ -5,2 +5,3 @@
# #include "base/files/file_enumerator.h"
#+#include "base/strings/utf_string_conversions.h"
#
#@@ -44,3 +45,3 @@
# FilePath FileEnumerator::FileInfo::GetName() const {
#-  return FilePath(find_data_.cFileName);
#+  return FilePath(UTF8ToWide(find_data_.cFileName));
# }
#@@ -121,3 +122,3 @@
#           BuildSearchFilter(folder_search_policy_, root_path_, pattern_);
#-      find_handle_ = FindFirstFileEx(src.value().c_str(),
#+      find_handle_ = FindFirstFileExW(src.value().c_str(),
#                                      FindExInfoBasic,  // Omit short name.
#@@ -151,3 +152,3 @@
#
#-    const FilePath filename(find_data_.cFileName);
#+    const FilePath filename(UTF8ToWide(find_data_.cFileName));
#     if (ShouldSkip(filename))
#@@ -165,3 +166,3 @@
#       // may end up with an infinite cycle.
#-      DWORD attributes = GetFileAttributes(abs_path.value().c_str());
#+      DWORD attributes = GetFileAttributesW(abs_path.value().c_str());
#       if (!(attributes & FILE_ATTRIBUTE_REPARSE_POINT))
#@@ -185,3 +186,3 @@
#       // manually.
#-      return PathMatchSpec(src.value().c_str(), pattern_.c_str()) == TRUE;
#+      return PathMatchSpecW(src.value().c_str(), pattern_.c_str()) == TRUE;
#   }
#EOF
## fix base/files/file_win.cc (version >= 0.4.1)
#patch -ulbf base/files/file_win.cc << EOF
#@@ -1 +1,6 @@
#+#undef _WIN32_WINNT
#+#define _WIN32_WINNT 0x0602
#+#undef WINAPI_FAMILY
#+#define WINAPI_FAMILY WINAPI_FAMILY_DESKTOP_APP
#+
# // Copyright (c) 2012 The Chromium Authors. All rights reserved.
#@@ -259,3 +264,5 @@
#     case ERROR_DISK_FULL:
#+#ifdef ERROR_DISK_RESOURCES_EXHAUSTED
#     case ERROR_DISK_RESOURCES_EXHAUSTED:
#+#endif
#       return FILE_ERROR_NO_SPACE;
#EOF
## fix build/gen.py for mingw
#patch -ulbf build/gen.py << EOF
#@@ -36,4 +36,6 @@
#       self._platform = 'mingw'
#+    elif self._platform.startswith('msys'):
#+      self._platform = 'mingw'
#     elif self._platform.startswith('win'):
#-      self._platform = 'msvc'
#+      self._platform = 'mingw'
#     elif self._platform.startswith('aix'):
#@@ -47,3 +49,3 @@
#   def known_platforms():
#-    return ['linux', 'darwin', 'msvc', 'aix', 'fuchsia']
#+    return ['linux', 'darwin', 'mingw', 'msvc', 'aix', 'fuchsia']
#
#@@ -158,2 +160,3 @@
#       'darwin': 'build_mac.ninja.template',
#+      'mingw': 'build_linux.ninja.template',
#       'linux': 'build_linux.ninja.template',
#EOF
### don't use MSVC
##cp -f build/build_linux.ninja.template build/build_win.ninja.template
##sed -i.bak -e "s/--out-path/--platform mingw &/" Makefile
##wl-showstatus build &&
###ninja.exe -Cout/bootstrap -j1 &&
##PATH=$PYDIR:$PATH Platform=mingw make -j1 CC="${CC:-gcc} -DUNICODE -D_UNICODE -DWIN32_LEAN_AND_MEAN" CXX="${CXX:-g++} -DUNICODE -D_UNICODE -DWIN32_LEAN_AND_MEAN" &&
##    echo OK
#wl-showstatus configure &&
# $PYDIR/python build/gen.py &&
# wl-showstatus build &&
# #sed -i.bak -e "/solibs\s=/ s/\([^ ]*\)\.lib/-l\1/g; /libs\s=/ s/\(base\|gn_lib\)\.lib//g" out/build.ninja &&
# sed -i.bak -e "/solibs\s=/ s/\([^ ]*\)\.lib/-l\1/g" out/build.ninja &&
# ninja -Cout base.lib gn_lib.lib &&
# ninja -Cout &&
#    echo OK
## wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf generate-ninja-$VERSION
#PATH=$PYDIR:$PATH Platform=mingw make  -j1 V=1
#sed -i.bak -e "/solibs\s=/ s/\([^ ]*\)\.lib/-l\1/g" out/bootstrap/build.ninja &&



export NAME="GN"
export STATUS=
export URL=https://gn.googlesource.com/gn
export BASENAME=gn
export DESCRIPTION="GN is a meta-build system that generates build files for Ninja."
export CATEGORY=build
export TYPE=application
export VERSION=master
export VERSIONDATE=20200419
wl-showstatus --package-version
export DEPENDENCIES=
#export DEPENDENCIES=mman-win32
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=
export DOWNLOADURL=https://gn.googlesource.com/gn
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://gn.googlesource.com/gn/+archive/refs/heads/$VERSION.tar.gz
wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
mkdir -p $BASENAME-$VERSION
#tar xzv --force-local -f $TARBALLDIR/$BASENAME/$VERSION.tar.gz -C$BASENAME-$VERSION
cd $BASENAME-$VERSION
wl-showstatus clone &&
git clone --branch $VERSION https://gn.googlesource.com/gn
#cp src/base/files/file_util_win.cc src/base/files/file_util_posix.cc
#cp src/base/files/file_win.cc src/base/files/file_posix.cc
#cp src/base/files/file_enumerator_win.cc src/base/files/file_enumerator_posix.cc
## fix src/base/posix/safe_strerror.cc
#patch -ulbf src/base/posix/safe_strerror.cc << EOF
#@@ -115,3 +115,7 @@
#   // static.
#+#ifdef _WIN32
#+  strerror_s(buf, len, err);
#+#else
#   wrap_posix_strerror_r(&strerror_r, err, buf, len);
#+#endif
# }
#EOF
# fix missing std::numeric_limits when using ${CC:-gcc} 11 in gn/src/base/files/file_enumerator_win.cc
mv gn/src/base/files/file_enumerator_win.cc gn/src/base/files/file_enumerator_win.cc.bak &&
echo "#include <limits>" > gn/src/base/files/file_enumerator_win.cc &&
cat gn/src/base/files/file_enumerator_win.cc.bak >> gn/src/base/files/file_enumerator_win.cc
# avoid MSVC /DEF: flag in gn/src/gn/ninja_binary_target_writer.cc (version >= master)
sed -i.bak -e "s?/DEF:??" gn/src/gn/ninja_binary_target_writer.cc
# support ARM64 in gn/src/util/sys_info.cc (version >= master)
patch -ulbf gn/src/util/sys_info.cc << EOF
@@ -46,2 +46,4 @@
   switch (system_info.wProcessorArchitecture) {
+    case PROCESSOR_ARCHITECTURE_ARM64:
+      return "arm64";
     case PROCESSOR_ARCHITECTURE_INTEL:
EOF
# fix gn/build/build_linux.ninja.template (version >= master)
patch -ulbf gn/build/build_linux.ninja.template << EOF
@@ -7,3 +7,3 @@
 rule alink_thin
-  command = rm -f \$out && \$ar rcsT \$out \$in
+  command = \$ar rcsT \$out \$in
   description = AR \$out
EOF
# fix gn/build/gen.py (version >= master)
patch -ulbf gn/build/gen.py << EOF
@@ -43,2 +43,6 @@
       self._platform = 'msvc'
+      if 'MSC' in sys.version:
+        self._platform = 'msvc'
+      else:
+        self._platform = 'mingw'
     elif self._platform.startswith('aix'):
@@ -303,3 +307,3 @@
     executable_ext = '.exe'
-    library_ext = '.lib'
+    library_ext = '.a'
     object_ext = '.obj'
@@ -381,4 +385,8 @@
   elif platform.is_msys() or platform.is_mingw():
-    cxx = os.environ.get('CXX', 'g++')
-    ld = os.environ.get('LD', 'g++')
+    if 'Clang' in sys.version:
+      cxx = os.environ.get('CXX', 'clang++')
+      ld = os.environ.get('LD', 'clang++')
+    else:
+      cxx = os.environ.get('CXX', 'g++')
+      ld = os.environ.get('LD', 'g++')
     ar = os.environ.get('AR', 'ar')
@@ -471,2 +479,5 @@

+    if cxx == 'g++':
+      cflags.append('-Wno-restrict')
+
     # flags not supported by gcc/g++.
EOF
## don't abort on warnings
#sed -i.bak -e "s/'\(-Wall\|-Wextra\)',//g" gn/build/gen.py
## avoid invalid linker flag -Wl,--gc-sections
#sed -i.bak2 -e "s/-Wl,--gc-sections//" gn/build/gen.py &&
## avoid invalid linker flag -Wl,--as-needed
#sed -i.bak3 -e "s/-Wl,--as-needed//" gn/build/gen.py &&
## avoid invalid linker flag -static-libstdc++
#sed -i.bak4 -e "s/\('\)\(-static-libstdc++'\)/''/" gn/build/gen.py &&
wl-showstatus configure &&
 cd gn &&
 #$PYDIR/python.exe build/gen.py --host=mingw --platform=msys --out-path=build_win &&
 #$PYDIR/python.exe build/gen.py --host=mingw --platform=mingw --out-path=build_win &&
 $PYDIR/python.exe build/gen.py --host=mingw --platform=mingw --out-path=build_win --allow-warnings --no-static-libstdc++ &&
 #CC=${CC:-gcc.exe} CXX=${CXX:-g++.exe} AR=${AR:-ar} $PYDIR/python.exe build/gen.py --host=mingw --platform=mingw --out-path=build_win &&
 # fix for building with GCC, use .a instead of .lib as library extenstion, avoid rm -f
 sed -i.bak -e "s/clang++/g++/; s/\([^ ]*\.\)lib/lib\1a/g; s/rm -f \$out \&\& //" build_win/build.ninja &&
 # fix linker errors when linking with ld instead of g++
 sed -i.bak2 -e "s?^\(ld = \).*?\1$(cygpath -m ${CXX:-g++})?" build_win/build.ninja &&
 wl-showstatus build &&
 #CPLUS_INCLUDE_PATH=$MINGWPREFIX/include/mman-win32${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} ninja -Cbuild_win &&
 ninja -Cbuild_win &&
 #build_win/gn_unittests.exe &&
 wl-showstatus install &&
 mkdir -p $INSTALLPREFIX/bin &&
 cp -f build_win/gn.exe $INSTALLPREFIX/bin/ &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd ../.. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
####PATH=$PYDIR:$PATH gn gen build_win --args='is_official_build=true'
####PATH=$PYDIR:$PATH gn args --list build_win




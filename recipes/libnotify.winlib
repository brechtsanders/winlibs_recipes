#export NAME="libnotify"
#export STATUS=
#export URL=http://www.galago-project.org/
#export BASENAME=libnotify
#export DESCRIPTION="Galago is a desktop presence framework, designed to transmit presence information between programs."
#export CATEGORY=
#export TYPE=library
#export VERSION=0.4.5
#export VERSIONDATE=
#wl-showstatus --package-version
#export DEPENDENCIES=glib2,dbus,dbus-glib,gtk+
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=
#export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=COPYING
#export LICENSETYPE=LGPL2
#export DOWNLOADURL="http://www.galago-project.org/files/releases/source/libnotify/"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://www.galago-project.org/files/releases/source/libnotify/libnotify-$VERSION.tar.bz2
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#tar xj --force-local -f $TARBALLDIR/$BASENAME/libnotify-$VERSION.tar.bz2
#cd libnotify-$VERSION
## create dummy gdk/gdkx.h (missing on Windows)
#mkdir -p gdk
#cat > gdk/gdkx.h << EOF
##include <X11/Xlib.h>
##include <gdk/gdkwin32.h>
#//#define GDK_WINDOW_XID GDK_WINDOW_HWND
##define GDK_WINDOW_XID(dw) (int)GDK_WINDOW_HWND(dw)
#EOF
## fix strange errors in libnotify/notification.c
#mv libnotify/notification.c libnotify/notification.c.bak
#cat > libnotify/notification.c << EOF
##include <dbus/dbus.h>
##include <windows.h>
#EOF
#cat libnotify/notification.c.bak >> libnotify/notification.c
## skip making tests
#cat > tests/Makefile.in << EOF
#clean:
#all:
#install:
#install-strip:
#EOF
### fix missing file
##mkdir -p sys
##touch sys/mman.h
### fix missing sleep in tests/test-replace.c
##mv tests/test-replace.c tests/test-replace.c.bak
##echo "#define sleep(t) _sleep((t) * 1000)" > tests/test-replace.c
##cat tests/test-replace.c.bak >> tests/test-replace.c
#wl-showstatus configure &&
#./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM LDFLAGS="-no-undefined -Wl,-no-undefined" &&
# mv libtool libtool.bak && ln -sf `which libtool` libtool && 
# make install-strip &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && rm -rf libnotify--$VERSION
##To do: generate DLL also with MinGW 4.5.0



#export NAME="libnotify"
#export STATUS=
#export URL=http://library.gnome.org/devel/libnotify/
#export BASENAME=libnotify
#export DESCRIPTION="libnotify is a library that sends desktop notifications to a notification daemon, as defined in the Desktop Notifications spec. These notifications can be used to inform the user about an event or display some form of information without getting in the user's way."
#export CATEGORY=communication
#export TYPE=library
##export VERSION=0.5.2
##export VERSIONDATE=20101111
##export DEPENDENCIES=glib2,dbus,dbus-glib,gtk2
##export VERSION=0.6.0
##export VERSIONDATE=20101111
##export VERSION=0.7.1
##export VERSIONDATE=20110115
##export VERSION=0.7.2
##export VERSIONDATE=20110322
##export VERSION=0.7.3
##export VERSIONDATE=20110510
##export VERSION=0.7.4
##export VERSIONDATE=20110828
##export VERSION=0.7.5
##export VERSIONDATE=20120327
##export VERSION=0.7.6
##export VERSIONDATE=20130903
#export VERSION=0.7.7
#export VERSIONDATE=20161014
##export VERSION=0.7.8
##export VERSIONDATE=20190406
#####docs/reference/Makefile.am:81: error: EXTRA_DIST must be set with '=' before using '+='
#####libnotify/Makefile.am:85: error: HAVE_INTROSPECTION does not appear in AM_CONDITIONAL
##export VERSION=0.7.9
##export VERSIONDATE=20200227
#####meson.build:72:4: ERROR: Problem encountered: DocBook stylesheet for generating man pages not found, you need to install docbook-xsl-ns or similar package.
#wl-showstatus --package-version
#export DEPENDENCIES=glib2,dbus,dbus-glib,gtk3,gdk-pixbuf
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=
#export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=COPYING
#export LICENSETYPE=LGPL
#export DOWNLOADURL="http://ftp.gnome.org/pub/gnome/sources/libnotify/"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
##export DOWNLOADSOURCEURL=http://ftp.gnome.org/pub/GNOME/sources/$BASENAME/`echo $VERSION|sed 's/^\([0-9]*\.[0-9]*\)\..*$/\1/'`/$BASENAME-$VERSION.tar.bz2
#export DOWNLOADSOURCEURL=http://ftp.gnome.org/pub/GNOME/sources/$BASENAME/`echo $VERSION|sed 's/^\([0-9]*\.[0-9]*\)\..*$/\1/'`/$BASENAME-$VERSION.tar.xz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
##tar xj --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.bz2
#tar xJ --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.xz
#cd $BASENAME-$VERSION
## fix missing gdk/gdkx.h
#mkdir -p gdk
#cat > gdk/gdkx.h << EOF
##include <gdk/gdkwin32.h>
#//#include <X11/X.h>
#//#include <X11/Xlib.h>
##define GDK_WINDOW_XID(dw) (int)GDK_WINDOW_HWND(dw)
#EOF
### fix missing gtk-doc.make (version >= 0.7.8)
##touch gtk-doc.make
## fix globbing issues with glib-mkenums
#mv libnotify/Makefile.in libnotify/Makefile.in.bak &&
#sed -e "s/\(--fprod \"\)\(\/\*\)/\1\\\\n\2/g" libnotify/Makefile.in.bak > libnotify/Makefile.in
## skip making tests
#cat > tests/Makefile.in << EOF
#clean:
#all:
#install:
#install-strip:
#EOF
#wl-showstatus configure &&
##mkdir -p m4 &&
##autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal &&
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-introspection=no LDFLAGS="-no-undefined -Wl,-no-undefined" &&
#./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-introspection=no LDFLAGS="-Wl,-no-undefined" &&
# wl-showstatus build-install &&
# # fix building DLLs
# sed -i.bak -e "s/\(allow_undefined=\)yes/\1no/" libtool &&
# #make install-strip &&
# PATH=$PYDIR:$PATH make install-strip &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION



export NAME="libnotify"
export STATUS=
export URL=http://library.gnome.org/devel/libnotify/
export BASENAME=libnotify
export DESCRIPTION="libnotify is a library that sends desktop notifications to a notification daemon, as defined in the Desktop Notifications spec. These notifications can be used to inform the user about an event or display some form of information without getting in the user's way."
export CATEGORY=communication
export TYPE=library
#export VERSION=0.7.9
#export VERSIONDATE=20200227
#export VERSION=0.7.11
#export VERSIONDATE=20220428
####meson.build:72:4: ERROR: Problem encountered: DocBook stylesheet for generating man pages not found, you need to install docbook-xsl-ns or similar package.
#export VERSION=0.7.12
#export VERSIONDATE=20220506
#export VERSION=0.8.0
#export VERSIONDATE=20220715
#export VERSION=0.8.2
#export VERSIONDATE=20230218
#export VERSION=0.8.3
#export VERSIONDATE=20231010
export VERSION=0.8.4
export VERSIONDATE=20240220
wl-showstatus --package-version
export DEPENDENCIES=glib2,dbus,dbus-glib,gtk3,gdk-pixbuf
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=meson,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=COPYING
export LICENSETYPE=LGPL
export DOWNLOADURL="http://ftp.gnome.org/pub/gnome/sources/libnotify/"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=http://ftp.gnome.org/pub/GNOME/sources/$BASENAME/$(echo $VERSION|sed 's/^\([0-9]*\.[0-9]*\)\..*$/\1/')/$BASENAME-$VERSION.tar.xz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
tar xJ --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.xz
cd $BASENAME-$VERSION
# fix missing realpath in libnotify/notification.c (version >= 0.7.9)
mv libnotify/notification.c libnotify/notification.c.bak &&
echo "#include <stdlib.h>" > libnotify/notification.c &&
echo "#define realpath(N,R) _fullpath((R),(N),_MAX_PATH)" >> libnotify/notification.c &&
cat libnotify/notification.c.bak >> libnotify/notification.c
# fix MSVC issue
mkdir -p winfix
cp -rf $PYDIR/lib/distutils winfix/ &&
patch -ulbf winfix/distutils/cygwinccompiler.py << EOF
@@ -85,3 +85,3 @@
         else:
-            raise ValueError("Unknown MS Compiler version %s " % msc_ver)
+            return None

EOF
# avoid UNIX stuff in tools/notify-send.c (version >= 0.8.0)
patch -ulbf tools/notify-send.c << EOF
@@ -28,3 +28,5 @@
 #include <glib.h>
+#ifndef _WIN32
 #include <glib-unix.h>
+#endif
 #include <glib/gprintf.h>
@@ -470,3 +472,5 @@
         if (wait) {
+#ifndef _WIN32
                 g_unix_signal_add (SIGINT, on_sigint, notify);
+#endif
                 loop = g_main_loop_new (NULL, FALSE);
EOF
# fix undefined getpid() in libnotify/notification.c (version >= 0.8.3)
mv libnotify/notification.c libnotify/notification.c.bak2 &&
echo "#include <windows.h>" > libnotify/notification.c &&
echo "#define getpid() GetCurrentProcessId()" >> libnotify/notification.c &&
cat libnotify/notification.c.bak2 >> libnotify/notification.c
# fix already defined interface in libnotify/notification.c (version >= 0.8.3)
sed -i.bak3 -e "s/\binterface\b/iface/g" libnotify/notification.c
# fix also building static library
sed -i.bak -e "s/shared_\(library\)/\1/" libnotify/meson.build
mkdir -p build_both &&
 wl-showstatus configure &&
 #PKG_CONFIG= PYTHONPATH=$MINGWPREFIX/lib${PYTHONPATH:+:$PYTHONPATH} $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Dintrospection=disabled -Dman=false -Dgtk_doc=false -Ddocbook_docs=disabled -Dtests=false . build_both &&
 PYTHONPATH=$MINGWPREFIX/lib${PYTHONPATH:+:$PYTHONPATH} $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Dintrospection=disabled -Dman=false -Dgtk_doc=false -Ddocbook_docs=disabled -Dtests=false . build_both &&
 #PKG_CONFIG= PYTHONPATH=$MINGWPREFIX/lib${PYTHONPATH:+:$PYTHONPATH} $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Dintrospection=enabled -Dman=false -Dgtk_doc=false -Ddocbook_docs=disabled -Dtests=false . build_both &&
 # fix slash/backslash path issue when calling Python from Ninja
 sed -i.bak -e "s/join_paths/os.path.join/g; /COMMAND =.*python\.exe/ s?\"/\([a-zA-Z]\)/?\"\1:/?; /COMMAND =.*python\.exe/ s?/?\\\\?g" build_*/build.ninja &&
 # fix Python path issues in meson_exe
 sed -i.bak -e "s?$PYDIR?$(echo $PYDIR|sed -e "s?^/\([a-zA-Z]\)/?\1:/?")?" build_both/meson-private/meson_exe_python.exe_*.dat &&
 wl-showstatus build-install &&
 #PKG_CONFIG= PATH=$PATH:$PYDIR PYTHONPATH=$(pwd)/winfix:$MINGWPREFIX/lib${PYTHONPATH:+:$PYTHONPATH} ninja -C build_both install &&
 PATH=$PATH:$PYDIR PYTHONPATH=$(pwd)/winfix:$MINGWPREFIX/lib${PYTHONPATH:+:$PYTHONPATH} ninja -C build_both install &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




#export NAME="GCC, the GNU Compiler Collection"
#export STATUS=
#export URL=https://gcc.gnu.org/
#export BASENAME=gcc
#export DESCRIPTION="The GNU Compiler Collection includes front ends for C, C++, Objective-C, Fortran, Ada, and Go, as well as libraries for these languages (libstdc++,...). GCC was originally written as the compiler for the GNU operating system. The GNU system was developed to be 100% free software, free in the sense that it respects the user's freedom."
#export CATEGORY=development
#export TYPE=application
##export VERSION=5.5.0
##export VERSIONDATE=20171011
##export VERSION=6.3.0
##export VERSIONDATE=20170327
##export VERSION=6.4.0
##export VERSIONDATE=20170705
##export VERSION=6.5.0
##export VERSIONDATE=20181027
##export VERSION=7.1.0
##export VERSIONDATE=20170503
##export VERSION=7.2.0
##export VERSIONDATE=20170815
##export VERSION=7.3.0
##export VERSIONDATE=20180126
##export VERSION=7.4.0
##export VERSIONDATE=20181207
##export VERSION=7.5.0
##export VERSIONDATE=20191115
##export VERSION=8.1.0
##export VERSIONDATE=20180503
#export VERSION=8.2.0
#export VERSIONDATE=20180727
#wl-showstatus --package-version
#export DEPENDENCIES=mpfr,gmp,mpc,isl
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=
#export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=COPYING
#export LICENSETYPE=GPL
##export DOWNLOADURL="https://gcc.gnu.org/releases.html"
##export DOWNLOADURL="ftp://ftp.mpi-sb.mpg.de/pub/gnu/mirror/gcc.gnu.org/pub/gcc/releases/"
#export DOWNLOADURL="http://ftp.mpi-sb.mpg.de/pub/gnu/mirror/gcc.gnu.org/pub/gcc/releases/"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
##export DOWNLOADSOURCEURL=http://ftp.mpi-sb.mpg.de/pub/gnu/mirror/gcc.gnu.org/pub/gcc/releases/$BASENAME-$VERSION/$BASENAME-$VERSION.tar.bz2
#export DOWNLOADSOURCEURL=http://ftp.mpi-sb.mpg.de/pub/gnu/mirror/gcc.gnu.org/pub/gcc/releases/$BASENAME-$VERSION/$BASENAME-$VERSION.tar.xz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#wl-showstatus extract
##tar xfjlh $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.bz2
#tar xfJlh $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.xz
#cd $BASENAME-$VERSION
## fix missing isl functions
#mv gcc/graphite.h gcc/graphite.h.bak &&
#echo "#include <isl/id.h>" > gcc/graphite.h &&
#echo "#include <isl/space.h>" >> gcc/graphite.h &&
#cat gcc/graphite.h.bak >> gcc/graphite.h
#sed -i.bak -e "s?/lib/cpp?$(which cpp.exe)?" $(find -name configure)
## fix redefinition of math functions in libstdc++-v3/src/c++98/math_stubs_float.cc
#mv libstdc++-v3/src/c++98/math_stubs_float.cc libstdc++-v3/src/c++98/math_stubs_float.cc.bak &&
#sed -n -e "s/^#ifndef \(.*\)$/#define \1 1/p" libstdc++-v3/src/c++98/math_stubs_float.cc.bak > libstdc++-v3/src/c++98/math_stubs_float.cc &&
#cat libstdc++-v3/src/c++98/math_stubs_float.cc.bak >> libstdc++-v3/src/c++98/math_stubs_float.cc
## fix redefinition of math functions in libstdc++-v3/src/c++98/math_stubs_long_double.cc
#mv libstdc++-v3/src/c++98/math_stubs_long_double.cc libstdc++-v3/src/c++98/math_stubs_long_double.cc.bak &&
#sed -n -e "s/^#ifndef \(.*\)$/#define \1 1/p" libstdc++-v3/src/c++98/math_stubs_long_double.cc.bak > libstdc++-v3/src/c++98/math_stubs_long_double.cc &&
#cat libstdc++-v3/src/c++98/math_stubs_long_double.cc.bak >> libstdc++-v3/src/c++98/math_stubs_long_double.cc
## fix missing uint8_t/uint16_tuint32_t in libstdc++-v3/src/c++11/cow-stdexcept.cc
#mv libstdc++-v3/src/c++11/cow-stdexcept.cc libstdc++-v3/src/c++11/cow-stdexcept.cc.bak &&
#echo "#include <stdint.h>" > libstdc++-v3/src/c++11/cow-stdexcept.cc &&
#cat libstdc++-v3/src/c++11/cow-stdexcept.cc.bak >> libstdc++-v3/src/c++11/cow-stdexcept.cc
## fix missing uint_fast64_t in libstdc++-v3/src/c++11/hashtable_c++0x.cc
#mv libstdc++-v3/src/c++11/hashtable_c++0x.cc libstdc++-v3/src/c++11/hashtable_c++0x.cc.bak &&
##echo "#include <stdint.h>" > libstdc++-v3/src/c++11/hashtable_c++0x.cc &&
#echo "#include <stdint-gcc.h>" > libstdc++-v3/src/c++11/hashtable_c++0x.cc &&
#cat libstdc++-v3/src/c++11/hashtable_c++0x.cc.bak >> libstdc++-v3/src/c++11/hashtable_c++0x.cc
### fix missing libssp/ssp/ssp.h (version >= 8.2.0)
##sed -e "s/@ssp_have_usable_vsnprintf@/define/" libssp/ssp/ssp.h.in > libssp/ssp/ssp.h
#wl-showstatus configure &&
##./autogen.sh &&
##    echo OK
### fix building DLLs on 64-bit
##if ( echo $RUNPLATFORM | grep -q x86_64 ); then
## echo "AM_GNU_GETTEXT_VERSION([$(gettext --version|head -n1|sed -e "s/^.* \([0-9\.]*\) *$/\1/")])" >> configure.ac &&
## autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal
##fi
##INTLTOOL_PERL="$PERLDIR/bin/perl.exe" 
##PERL="$PERLDIR/bin/perl.exe -I$PERLDIR/lib" 
##PYTHON=$PYDIR/python.exe 
##PYTHON=$PYDIR/python.exe C_INCLUDE_PATH=$PYDIR/include${C_INCLUDE_PATH:+:$C_INCLUDE_PATH} 
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM LDFLAGS="-Wl,--as-needed -Wl,-no-undefined" &&
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM LDFLAGS="-Wl,--as-needed" &&
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-system-zlib &&
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-system-zlib --disable-bootstrap --enable-serial-configure --oldincludedir=$(ls -1d $MINGWDIR/*mingw*/include | head -n1) &&
#./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-system-zlib --disable-bootstrap --enable-serial-configure --with-system-zlib --disable-libssp --oldincludedir=$(ls -1d $MINGWDIR/*mingw*/include | head -n1) --oldincludedir=$(find $MINGWDIR -name "stdio.h" |sed -n -e "s?^\(.*/include\)/[^/]*\$?\1?p") &&
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --disable-bootstrap --disable-stage1-checking --enable-serial-configure --enable-host-shared --with-system-zlib --oldincludedir=$(ls -1d $MINGWDIR/*mingw*/include | head -n1) &&
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-bootstrap --enable-serial-configure --enable-host-shared --with-system-zlib --oldincludedir=$(ls -1d $MINGWDIR/*mingw*/include | head -n1) --with-stage1-ldflags="-I$(ls -1d $MINGWDIR/*mingw*/include | head -n1)" &&
# ## fix building DLLs
# #mv libtool libtool.bak &&
# #sed -e "s/\(allow_undefined=\)yes/\1no/" libtool.bak > libtool &&
# ## fix calling xgcc (version <= 7.3.0)
# #sed -i.bak -e "s?\(\./xgcc\) ?\1.exe ?g" host-*/gcc/Makefile &&
# ## fix missing stdio.h (version >= 8.2.0)
# #sed -i.bak -e "s?^\(INTERNAL_CFLAGS\s*=\s*\)?&-I$(pwd)/libssp/ssp -I$(find $MINGWDIR -name "stdio.h" |sed -n -e "s?^\(.*/include\)/[^/]*\$?\1?p") ?" host-$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo x86_64; else echo i686; fi)-pc-mingw32/gcc/Makefile &&
# wl-showstatus build &&
# #make &&
# #CPP="cpp.exe" make &&
# ( make || C_INCLUDE_PATH=libssp/ssp${C_INCLUDE_PATH:+:$C_INCLUDE_PATH} make || (
#  #make -C build-$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo x86_64; else echo i686; fi)-pc-mingw32/libiberty &&
#  mkdir -p build-$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo x86_64; else echo i686; fi)-pc-mingw32/libiberty/pic &&
#  cp -u build-$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo x86_64; else echo i686; fi)-pc-mingw32/libiberty/*.a build-$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo x86_64; else echo i686; fi)-pc-mingw32/libiberty/pic/ &&
#  make
# ) || (
#  #make -C host-$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo x86_64; else echo i686; fi)-pc-mingw32/libiberty &&
#  mkdir -p host-$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo x86_64; else echo i686; fi)-pc-mingw32/libiberty/pic &&
#  cp -u host-$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo x86_64; else echo i686; fi)-pc-mingw32/libiberty/*.a host-$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo x86_64; else echo i686; fi)-pc-mingw32/libiberty/pic/ &&
#  make
# ) || (
#  cd libiberty &&
#  ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM &&
#  make &&
#  mkdir -p pic &&
#  cp -u *.a pic/ &&
#  cd ..
# ) || (
#  CPP="cpp.exe" make
# ) || (
#  make -j1
# )) &&
# wl-showstatus build-install &&
# make install-strip &&
#    echo OK
##mkdir -p build_test; cd build_test; cmake.exe -G"MSYS Makefiles" -LH && echo OK; cd ..; rm -rf build_test
##rm -f CMakeCache.txt; cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -LH && echo OK
##export BUILDDEPENDENCIES=cmake
##export OPTIONALBUILDDEPENDENCIES=
##wl-showstatus configure &&
##cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release &&
## wl-showstatus build-install &&
## make install/strip &&
##    echo OK
## wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
##See also: https://reactos.org/wiki/Building_MINGW-w64
#
#
#cd libcc1 &&
#./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM &&
#make &&
#cd ..
#
#
#
##mkdir -p build &&
##wl-showstatus configure &&
##cd build &&
##../configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --disable-shared --enable-languages=c,c++ --disable-bootstrap --with-system-zlib &&
##make configure-host &&
##make configure-target CPP="cpp.exe" &&
##echo OK
###../gcc-4.9.2/configure --program-suffix=-4.9.2 
#
#
#
##C_INCLUDE_PATH=$(find $MINGWDIR -name "stdio.h"|sed -n -e "s?^\(.*/include\)/[^/]*\$?\1?p")${C_INCLUDE_PATH:+:$C_INCLUDE_PATH} CPLUS_INCLUDE_PATH=$(find $MINGWDIR -name "stdio.h"|sed -n -e "s?^\(.*/include\)/[^/]*\$?\1?p")${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} LIBRARY_PATH=$(find $MINGWDIR -name libmingwex.a|sed -n -e "s?^\(.*/lib\)/[^/]*\$?\1?p")${LIBRARY_PATH:+:$LIBRARY_PATH} make -j1 &&echo OK
##LIBRARY_PATH=$(find $MINGWDIR -name libmingwex.a|sed -n -e "s?^\(.*/lib\)/[^/]*\$?\1?p")${LIBRARY_PATH:+:$LIBRARY_PATH} make -j1 &&echo OK



export NAME="GCC, the GNU Compiler Collection (version 6)"
export STATUS=
export URL=https://gcc.gnu.org/
export BASENAME=gcc6
export DESCRIPTION="The GNU Compiler Collection includes front ends for C, C++, Objective-C, Fortran, Ada, and Go, as well as libraries for these languages (libstdc++,...). GCC was originally written as the compiler for the GNU operating system. The GNU system was developed to be 100% free software, free in the sense that it respects the user's freedom."
export CATEGORY=development
export TYPE=application
export VERSION=6.5.0
export VERSIONDATE=20220122
export DOWNLOADURL="https://gcc.gnu.org/pub/gcc/releases/ gcc-"
#export DOWNLOADURL="https://gcc.gnu.org/pub/gcc/snapshots/ gcc-"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://gcc.gnu.org/pub/gcc/releases/gcc-$VERSION/gcc-$VERSION.tar.xz
#export DOWNLOADSOURCEURL=https://gcc.gnu.org/pub/gcc/snapshots/$VERSION/gcc-$VERSION.tar.xz
wl-showstatus download
wl-download -v -d $TARBALLDIR/gcc $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xfJlh $TARBALLDIR/gcc/gcc-$VERSION.tar.xz
cd gcc-$VERSION
# set to 0 to build Dwarf2 (32-bit) or SEH (64-bit) C++ exception handling (or to 1 to use SJLJ)
#if [ "$USE_SJLJ" == "" ]; then
# USE_SJLJ=0
#fi
USE_SJLJ=1
# set to 0 to use msvcrt or to 1 to use ucrt
if [ "$USE_UCRT" == "" ]; then
 USE_UCRT=0
fi
# fix printf format issues with MinGW-w64 >= 8.0.0 (version >= 10.2.0)
####See also: https://sourceforge.net/p/mingw-w64/bugs/853/
####See also: https://github.com/msys2/MINGW-packages-dev/blob/master/mingw-w64-gcc-git/0020-libgomp-Don-t-hard-code-MS-printf-attributes.patch
sed -i.bak -e "s/^\(\s*#\s*\)include <inttypes\.h>.*$/&\n\1ifdef __MINGW32__\n\1undef HAVE_INTTYPES_H\n\1endif/" libgomp/target.c libgomp/oacc-parallel.c
# avoid looking for libiberty.a in pic subdirectory
sed -i.bak -e "s?pic/\(libiberty\.a\)?\1?g" $(grep -l "pic/libiberty\.a" */Makefile.in)
# fix location of cpp
sed -i.bak -e "s?/lib/cpp?$(which cpp.exe)?" $(find -name configure)
# copy MinGW-w64 files
mkdir -p build_mingw/mingw-w64/mingw/lib &&
cp -rf $MINGWPREFIX/share/mingw-w64/include build_mingw/mingw-w64/mingw/ &&
#cp -f $MINGWPREFIX/share/mingw-w64/$RUNPLATFORM/include/*.h build_mingw/mingw-w64/mingw/include &&
( cp -rf $MINGWPREFIX/share/mingw-w64/$RUNPLATFORM/lib/* build_mingw/mingw-w64/mingw/lib/ || cp -rf $MINGWPREFIX/share/mingw-w64/lib/* build_mingw/mingw-w64/mingw/lib/ ) &&
mkdir -p build_mingw &&
 wl-showstatus configure &&
 cd build_mingw &&
 PATH=$MINGWPREFIX/share/binutils/bin:$PATH ../configure --prefix=$INSTALLPREFIX/share/gcc6 --build=$BUILDPLATFORM --host=$RUNPLATFORM \
  --with-pkgversion="MinGW-W64 $(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo x86_64; else echo i686; fi)$(if [ "0$USE_UCRT" -ne 0 ]; then echo -n "-ucrt"; else echo -n "-msvcrt"; fi)-posix-$(if [ "0$USE_SJLJ" -ne 0 ]; then echo "sjlj"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "dwarf"; else echo "seh"; fi; fi), built by Brecht Sanders" \
  --with-tune=generic \
  --enable-checking=release \
  --enable-threads=posix \
  $(if [ "0$USE_SJLJ" -ne 0 ]; then if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--without-dwarf2 "; fi; echo "--enable-sjlj-exceptions"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--with-dwarf2 "; fi; echo "--disable-sjlj-exceptions"; fi) \
  --disable-libunwind-exceptions \
  --disable-serial-configure \
  --disable-bootstrap \
  --enable-host-shared \
  --disable-plugin \
  --disable-default-ssp \
  --disable-rpath \
  --disable-libstdcxx-debug \
  --disable-version-specific-runtime-libs \
  --with-stabs \
  --disable-symvers \
  --enable-languages=c,c++,fortran,lto,objc,obj-c++ \
  --disable-{gold,nls,stage1-checking,win32-registry,multilib} \
  --enable-{ld,libquadmath,libada,libssp,libstdcxx,lto,fully-dynamic-string,libgomp,graphite,mingw-wildcard,libstdcxx-time,libstdcxx-pch} \
  --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX \
  --enable-install-libiberty \
  --enable-__cxa_atexit \
  --without-included-gettext \
  --with-diagnostics-color=auto \
  --enable-clocale=generic \
  --with-libiconv \
  --with-system-zlib \
  --with-build-sysroot=$PWD/mingw-w64 \
  --with-native-system-header-dir=$MINGWPREFIX/share/mingw-w64/include \
  --enable-version-specific-runtime-libs \
  CFLAGS="-I$MINGWPREFIX/include/libdl-win32 -Wno-int-conversion" \
  CXXFLAGS="-Wno-int-conversion" \
  LDFLAGS="-pthread $(if echo "int main() { return 0; }" | gcc -xc - -o test_arg.exe -Wl,--dynamicbase &> /dev/null; then echo "-Wl,--dynamicbase"; fi) $(if echo "int main() { return 0; }" | gcc -xc - -o test_arg.exe -Wl,--high-entropy-va &> /dev/null; then echo "-Wl,--high-entropy-va"; fi) $(if echo "int main() { return 0; }" | gcc -xc - -o test_arg.exe -Wl,--nxcompat &> /dev/null; then echo "-Wl,--nxcompat"; fi) $(if echo "int main() { return 0; }" | gcc -xc - -o test_arg.exe -Wl,--tsaware &> /dev/null; then echo "-Wl,--tsaware"; fi)" \
  &&
 #--enable-languages=java --enable-libgcj --disable-static-libjava
 cd .. &&
 make -Cbuild_mingw configure-host &&
 wl-showstatus build &&
 ( PATH=$MINGWPREFIX/share/binutils/bin:$PATH:$PWD/build_mingw/gcc make -Cbuild_mingw || ( PATH=$MINGWPREFIX/share/binutils/bin:$PATH:$PWD/build_mingw/gcc make -Cbuild_mingw $(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo x86_64; else echo i686; fi)-w64-mingw32/libstdc++-v3/src CXXFLAGS="-D__CRT__NO_INLINE" && PATH=$MINGWPREFIX/share/binutils/bin:$PATH:$PWD/build_mingw/gcc make -Cbuild_mingw ) || PATH=$MINGWPREFIX/share/binutils/bin:$PATH:$PWD/build_mingw/gcc make -j1 -Cbuild_mingw ) &&
 wl-showstatus build-install &&
 make -Cbuild_mingw install-strip &&
 ( make -Cbuild_mingw install-strip || make -Cbuild_mingw install-strip LIBS="-lmman" ) &&
 # remove .la files
 rm -f $(find $INSTALLPREFIX -name '*.la') &&
 # fix absolute path
 sed -i -e "s?$INSTALLPREFIX/share/gcc?\$(realpath \$(dirname \$0)/../../../../..)?" $INSTALLPREFIX/share/gcc6/libexec/gcc/*/*/install-tools/mkheaders &&
 sed -i -e "s?'$INSTALLPREFIX/share/gcc?os.path.realpath(os.path.dirname(os.path.realpath(__file__)) + '/..') + '?" $INSTALLPREFIX/share/gcc6/lib/gcc/*/*/libstdc++.dll.a-gdb.py &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf gcc-$VERSION

export NAME="urdfdom"
export STATUS=
export URL=https://wiki.ros.org/urdf
export BASENAME=urdfdom
export DESCRIPTION="The URDF (U-Robot Description Format) library provides core data structures and a simple XML parsers for populating the class data structures from an URDF file."
export CATEGORY=fileformat,dataprocessing
export TYPE=library
#export VERSION=3.0.0
#export VERSIONDATE=20230405
export VERSION=4.0.1
export VERSIONDATE=20250214
wl-showstatus --package-version
export DEPENDENCIES=urdfdom-headers,console-bridge,tinyxml
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=BSD
#export DOWNLOADURL="https://github.com/ros/urdfdom/releases"
export DOWNLOADURL="https://github.com/ros/urdfdom/tags"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/ros/urdfdom/archive/refs/tags/$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/$VERSION.tar.gz
cd $BASENAME-$VERSION
## fix urdf_parser/src/pose.cpp (version = 3.0.0)
#patch -ulbf urdf_parser/src/pose.cpp << EOF
#@@ -126,4 +126,4 @@
#   std::string pose_rpy_str = urdf_export_helpers::values2str(pose.rotation);
#-  origin->SetAttribute("xyz", pose_xyz_str);
#-  origin->SetAttribute("rpy", pose_rpy_str);
#+  origin->SetAttribute("xyz", pose_xyz_str.c_str());
#+  origin->SetAttribute("rpy", pose_rpy_str.c_str());
#   xml->LinkEndChild(origin);
#EOF
## fix urdf_parser/src/model.cpp (version = 3.0.0)
#patch -ulbf urdf_parser/src/model.cpp << EOF
#@@ -279,3 +279,3 @@
#   TiXmlElement *robot = new TiXmlElement("robot");
#-  robot->SetAttribute("name", model.name_);
#+  robot->SetAttribute("name", model.name_.c_str());
#   doc->LinkEndChild(robot);
#EOF
## fix urdf_parser/src/link.cpp (version = 3.0.0)
#patch -ulbf urdf_parser/src/link.cpp << EOF
#@@ -230,3 +230,3 @@
#
#-  std::string type_name = shape->ValueStr();
#+  std::string type_name = shape->ValueTStr().c_str();
#   if (type_name == "sphere")
#@@ -320,3 +320,3 @@
#   {
#-    if (!inertia_xml->Attribute(attr.first))
#+    if (!inertia_xml->Attribute(attr.first.c_str()))
#     {
#@@ -493,3 +493,3 @@
#   TiXmlElement *material_xml = new TiXmlElement("material");
#-  material_xml->SetAttribute("name", material.name);
#+  material_xml->SetAttribute("name", material.name.c_str());
#
#@@ -497,3 +497,3 @@
#   if (!material.texture_filename.empty())
#-    texture->SetAttribute("filename", material.texture_filename);
#+    texture->SetAttribute("filename", material.texture_filename.c_str());
#   material_xml->LinkEndChild(texture);
#@@ -501,3 +501,3 @@
#   TiXmlElement* color = new TiXmlElement("color");
#-  color->SetAttribute("rgba", urdf_export_helpers::values2str(material.color));+  color->SetAttribute("rgba", urdf_export_helpers::values2str(material.color).c_str());
#   material_xml->LinkEndChild(color);
#@@ -511,3 +511,3 @@
#   TiXmlElement *sphere_xml = new TiXmlElement("sphere");
#-  sphere_xml->SetAttribute("radius", urdf_export_helpers::values2str(s.radius));
#+  sphere_xml->SetAttribute("radius", urdf_export_helpers::values2str(s.radius).c_str());
#   xml->LinkEndChild(sphere_xml);
#@@ -520,3 +520,3 @@
#   TiXmlElement *box_xml = new TiXmlElement("box");
#-  box_xml->SetAttribute("size", urdf_export_helpers::values2str(b.dim));
#+  box_xml->SetAttribute("size", urdf_export_helpers::values2str(b.dim).c_str());
#   xml->LinkEndChild(box_xml);
#@@ -529,4 +529,4 @@
#   TiXmlElement *cylinder_xml = new TiXmlElement("cylinder");
#-  cylinder_xml->SetAttribute("radius", urdf_export_helpers::values2str(y.radius));
#-  cylinder_xml->SetAttribute("length", urdf_export_helpers::values2str(y.length));
#+  cylinder_xml->SetAttribute("radius", urdf_export_helpers::values2str(y.radius).c_str());
#+  cylinder_xml->SetAttribute("length", urdf_export_helpers::values2str(y.length).c_str());
#   xml->LinkEndChild(cylinder_xml);
#@@ -540,4 +540,4 @@
#   if (!m.filename.empty())
#-    mesh_xml->SetAttribute("filename", m.filename);
#-  mesh_xml->SetAttribute("scale", urdf_export_helpers::values2str(m.scale));
#+    mesh_xml->SetAttribute("filename", m.filename.c_str());
#+  mesh_xml->SetAttribute("scale", urdf_export_helpers::values2str(m.scale).c_str());
#   xml->LinkEndChild(mesh_xml);
#@@ -588,3 +588,3 @@
#   TiXmlElement *mass_xml = new TiXmlElement("mass");
#-  mass_xml->SetAttribute("value", urdf_export_helpers::values2str(i.mass));
#+  mass_xml->SetAttribute("value", urdf_export_helpers::values2str(i.mass).c_str());
#   inertial_xml->LinkEndChild(mass_xml);
#@@ -594,8 +594,8 @@
#   TiXmlElement *inertia_xml = new TiXmlElement("inertia");
#-  inertia_xml->SetAttribute("ixx", urdf_export_helpers::values2str(i.ixx));
#-  inertia_xml->SetAttribute("ixy", urdf_export_helpers::values2str(i.ixy));
#-  inertia_xml->SetAttribute("ixz", urdf_export_helpers::values2str(i.ixz));
#-  inertia_xml->SetAttribute("iyy", urdf_export_helpers::values2str(i.iyy));
#-  inertia_xml->SetAttribute("iyz", urdf_export_helpers::values2str(i.iyz));
#-  inertia_xml->SetAttribute("izz", urdf_export_helpers::values2str(i.izz));
#+  inertia_xml->SetAttribute("ixx", urdf_export_helpers::values2str(i.ixx).c_str());
#+  inertia_xml->SetAttribute("ixy", urdf_export_helpers::values2str(i.ixy).c_str());
#+  inertia_xml->SetAttribute("ixz", urdf_export_helpers::values2str(i.ixz).c_str());
#+  inertia_xml->SetAttribute("iyy", urdf_export_helpers::values2str(i.iyy).c_str());
#+  inertia_xml->SetAttribute("iyz", urdf_export_helpers::values2str(i.iyz).c_str());
#+  inertia_xml->SetAttribute("izz", urdf_export_helpers::values2str(i.izz).c_str());
#   inertial_xml->LinkEndChild(inertia_xml);
#@@ -653,3 +653,3 @@
#   TiXmlElement * link_xml = new TiXmlElement("link");
#-  link_xml->SetAttribute("name", link.name);
#+  link_xml->SetAttribute("name", link.name.c_str());
#
#EOF
## fix urdf_parser/src/joint.cpp (version = 3.0.0)
#patch -ulbf urdf_parser/src/joint.cpp << EOF
#@@ -531,4 +531,4 @@
#   TiXmlElement *dynamics_xml = new TiXmlElement("dynamics");
#-  dynamics_xml->SetAttribute("damping", urdf_export_helpers::values2str(jd.damping) );
#-  dynamics_xml->SetAttribute("friction", urdf_export_helpers::values2str(jd.friction) );
#+  dynamics_xml->SetAttribute("damping", urdf_export_helpers::values2str(jd.damping).c_str() );
#+  dynamics_xml->SetAttribute("friction", urdf_export_helpers::values2str(jd.friction).c_str() );
#   xml->LinkEndChild(dynamics_xml);
#@@ -540,6 +540,6 @@
#   TiXmlElement *limit_xml = new TiXmlElement("limit");
#-  limit_xml->SetAttribute("effort", urdf_export_helpers::values2str(jl.effort)
#);
#-  limit_xml->SetAttribute("velocity", urdf_export_helpers::values2str(jl.velocity) );
#-  limit_xml->SetAttribute("lower", urdf_export_helpers::values2str(jl.lower) );-  limit_xml->SetAttribute("upper", urdf_export_helpers::values2str(jl.upper) );+  limit_xml->SetAttribute("effort", urdf_export_helpers::values2str(jl.effort).c_str() );
#+  limit_xml->SetAttribute("velocity", urdf_export_helpers::values2str(jl.velocity).c_str() );
#+  limit_xml->SetAttribute("lower", urdf_export_helpers::values2str(jl.lower).c_str() );
#+  limit_xml->SetAttribute("upper", urdf_export_helpers::values2str(jl.upper).c_str() );
#   xml->LinkEndChild(limit_xml);
#@@ -551,6 +551,6 @@
#   TiXmlElement *safety_xml = new TiXmlElement("safety_controller");
#-  safety_xml->SetAttribute("k_position", urdf_export_helpers::values2str(js.k_position) );
#-  safety_xml->SetAttribute("k_velocity", urdf_export_helpers::values2str(js.k_velocity) );
#-  safety_xml->SetAttribute("soft_lower_limit", urdf_export_helpers::values2str(js.soft_lower_limit) );
#-  safety_xml->SetAttribute("soft_upper_limit", urdf_export_helpers::values2str(js.soft_upper_limit) );
#+  safety_xml->SetAttribute("k_position", urdf_export_helpers::values2str(js.k_position).c_str() );
#+  safety_xml->SetAttribute("k_velocity", urdf_export_helpers::values2str(js.k_velocity).c_str() );
#+  safety_xml->SetAttribute("soft_lower_limit", urdf_export_helpers::values2str(js.soft_lower_limit).c_str() );
#+  safety_xml->SetAttribute("soft_upper_limit", urdf_export_helpers::values2str(js.soft_upper_limit).c_str() );
#   xml->LinkEndChild(safety_xml);
#@@ -565,6 +565,6 @@
#     if (jc.falling)
#-      calibration_xml->SetAttribute("falling", urdf_export_helpers::values2str(*jc.falling) );
#+      calibration_xml->SetAttribute("falling", urdf_export_helpers::values2str(*jc.falling).c_str() );
#     if (jc.rising)
#-      calibration_xml->SetAttribute("rising", urdf_export_helpers::values2str(*jc.rising) );
#-    //calibration_xml->SetAttribute("reference_position", urdf_export_helpers::values2str(jc.reference_position) );
#+      calibration_xml->SetAttribute("rising", urdf_export_helpers::values2str(*jc.rising).c_str() );
#+    //calibration_xml->SetAttribute("reference_position", urdf_export_helpers::values2str(jc.reference_position).c_str() );
#     xml->LinkEndChild(calibration_xml);
#@@ -579,5 +579,5 @@
#     TiXmlElement *mimic_xml = new TiXmlElement("mimic");
#-    mimic_xml->SetAttribute("offset", urdf_export_helpers::values2str(jm.offset) );
#-    mimic_xml->SetAttribute("multiplier", urdf_export_helpers::values2str(jm.multiplier) );
#-    mimic_xml->SetAttribute("joint", jm.joint_name );
#+    mimic_xml->SetAttribute("offset", urdf_export_helpers::values2str(jm.offset).c_str() );
#+    mimic_xml->SetAttribute("multiplier", urdf_export_helpers::values2str(jm.multiplier).c_str() );
#+    mimic_xml->SetAttribute("joint", jm.joint_name.c_str() );
#     xml->LinkEndChild(mimic_xml);
#@@ -590,3 +590,3 @@
#   TiXmlElement * joint_xml = new TiXmlElement("joint");
#-  joint_xml->SetAttribute("name", joint.name);
#+  joint_xml->SetAttribute("name", joint.name.c_str());
#   if (joint.type == urdf::Joint::PLANAR)
#@@ -611,3 +611,3 @@
#   TiXmlElement * axis_xml = new TiXmlElement("axis");
#-  axis_xml->SetAttribute("xyz", urdf_export_helpers::values2str(joint.axis));
#+  axis_xml->SetAttribute("xyz", urdf_export_helpers::values2str(joint.axis).c_str());
#   joint_xml->LinkEndChild(axis_xml);
#@@ -616,3 +616,3 @@
#   TiXmlElement * parent_xml = new TiXmlElement("parent");
#-  parent_xml->SetAttribute("link", joint.parent_link_name);
#+  parent_xml->SetAttribute("link", joint.parent_link_name.c_str());
#   joint_xml->LinkEndChild(parent_xml);
#@@ -621,3 +621,3 @@
#   TiXmlElement * child_xml = new TiXmlElement("child");
#-  child_xml->SetAttribute("link", joint.child_link_name);
#+  child_xml->SetAttribute("link", joint.child_link_name.c_str());
#   joint_xml->LinkEndChild(child_xml);
#EOF
# also allow building static library
sed -i.bak -e "s/\(add_library([^ ]*\) SHARED/\1/" urdf_parser/CMakeLists.txt
mkdir -p build_static build_shared &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DBUILD_TESTING:BOOL=OFF -DCMAKE_CXX_FLAGS:STRING="-DURDFDOM_STATIC" -S. -Bbuild_static &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DBUILD_TESTING:BOOL=OFF -S. -Bbuild_shared &&
 wl-showstatus build-install &&
 ninja -Cbuild_static install/strip &&
 wl-showstatus build-install &&
 ninja -Cbuild_shared install/strip &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




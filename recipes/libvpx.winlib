export NAME="libvpx"
export STATUS=
#export URL=http://code.google.com/p/webm/downloads/list
export URL=http://www.webmproject.org/
export BASENAME=libvpx
export DESCRIPTION="VP8 video codec"
export CATEGORY=video,codec
export TYPE=library
#export VERSION=0.9.0
#export VERSIONDATE=20100520
#export VERSION=0.9.1
#export VERSIONDATE=20100618
#export VERSION=0.9.2
#export VERSIONDATE=20101006
#export VERSION=0.9.5
#export VERSIONDATE=20110220
#export VERSION=0.9.6
#export VERSIONDATE=20110504
#export VERSION=1.0.0
#export VERSIONDATE=20120304
#export VERSION=1.1.0
#export VERSIONDATE=20120901
####./libvpx.a(systemdependent.c.o):(.text+0xb5): undefined reference to `__imp__pthread_once'
#export VERSION=1.3.0
#export VERSIONDATE=20140602
#export VERSION=1.6.1
#export VERSIONDATE=20170505
#export VERSION=1.7.0
#export VERSIONDATE=20180305
#export VERSION=1.9.0
#export VERSIONDATE=20201027
#export VERSION=1.10.0
#export VERSIONDATE=20210325
#export VERSION=1.11.0
#export VERSIONDATE=20211008
#export VERSION=1.12.0
#export VERSIONDATE=20220629
export VERSION=1.13.0
export VERSIONDATE=20230210
wl-showstatus --package-version
export DEPENDENCIES=
#export DEPENDENCIES=libwebm
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=yasm,pexports
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=
#export DOWNLOADURL="http://code.google.com/p/webm/downloads/list libvpx-"
#export DOWNLOADURL="http://code.google.com/p/webm/downloads/list libvpx-v"
#export DOWNLOADURL="http://downloads.webmproject.org/releases/webm/index.html"
#export DOWNLOADURL="https://github.com/webmproject/libvpx/releases"
export DOWNLOADURL="https://github.com/webmproject/libvpx/tags"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://webm.googlecode.com/files/$BASENAME-$VERSION.tar.bz2
#export DOWNLOADSOURCEURL=http://webm.googlecode.com/files/$BASENAME-v$VERSION.tar.bz2
#export DOWNLOADSOURCEURL=http://storage.googleapis.com/downloads.webmproject.org/releases/webm/$BASENAME-$VERSION.tar.bz2
#export DOWNLOADSOURCEURL=https://chromium.googlesource.com/webm/libvpx/+archive/v$VERSION.tar.gz
#export DOWNLOADSOURCEURL=https://github.com/webmproject/libvpx/archive/v$VERSION.tar.gz
export DOWNLOADSOURCEURL=https://github.com/webmproject/libvpx/archive/refs/tags/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
#tar xfj $TARBALLDIR/$BASENAME/$BASENAME-v$VERSION.tar.bz2
#tar xfj $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.bz2
#mkdir -p $BASENAME-$VERSION
#tar xfz $TARBALLDIR/$BASENAME/v$VERSION.tar.gz -C$BASENAME-$VERSION
tar xfz $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
#cd $BASENAME-v$VERSION
cd $BASENAME-$VERSION
# fix missing strtok_r in vpx/src/svc_encodeframe.c (version >= 1.3.0)
mv vpx/src/svc_encodeframe.c vpx/src/svc_encodeframe.c.bak
cat > vpx/src/svc_encodeframe.c << EOF
#define strtok_r(_s,_sep,_lasts) (*(_lasts)=strtok((_s),(_sep)))
#define MINGW_HAS_SECURE_API 1
EOF
cat vpx/src/svc_encodeframe.c.bak >> vpx/src/svc_encodeframe.c
## fix redefinition of max_align_t nestegg/halloc/src/align.h (version = 1.3.0)
#mv nestegg/halloc/src/align.h nestegg/halloc/src/align.h.bak
#cat > nestegg/halloc/src/align.h << EOF
##include <stddef.h>
##define max_align_t VPX_max_align_t
#EOF
#cat nestegg/halloc/src/align.h.bak >> nestegg/halloc/src/align.h
# fix missing fseeko/ftello in third_party/libwebm/mkvparser/mkvreader.cc (version >= 1.6.1)
if ! echo -e "#include<_mingw.h>\nint v=__MINGW64_VERSION_MAJOR;" | ${CC:-gcc} -c -xc - -o /dev/null &> /dev/null; then
mv third_party/libwebm/mkvparser/mkvreader.cc third_party/libwebm/mkvparser/mkvreader.cc.bak
cat > third_party/libwebm/mkvparser/mkvreader.cc << EOF
#define fseeko(fp,offset,whence) fseeko64(fp, offset, whence)
#define ftello(fp) ftello64(fp)
EOF
cat third_party/libwebm/mkvparser/mkvreader.cc.bak >> third_party/libwebm/mkvparser/mkvreader.cc
fi
# fix missing fseeko/ftello in third_party/libwebm/mkvmuxer/mkvwriter.cc (version >= 1.6.1)
if ! echo -e "#include<_mingw.h>\nint v=__MINGW64_VERSION_MAJOR;" | ${CC:-gcc} -c -xc - -o /dev/null &> /dev/null; then
mv third_party/libwebm/mkvmuxer/mkvwriter.cc third_party/libwebm/mkvmuxer/mkvwriter.cc.bak
cat > third_party/libwebm/mkvmuxer/mkvwriter.cc << EOF
#define fseeko(fp,offset,whence) fseeko64(fp, offset, whence)
#define ftello(fp) ftello64(fp)
EOF
cat third_party/libwebm/mkvmuxer/mkvwriter.cc.bak >> third_party/libwebm/mkvmuxer/mkvwriter.cc
fi
# fix missing mode_t (version >= 1.6.1)
for F in vp8/*.c vp8/*/*.c; do
 mv $F $F.bak &&
 echo "#include <sys/types.h>" > $F &&
 cat $F.bak >> $F
done
# fix shared library
####--enable-shared only supported on ELF for now
mv configure configure.bak &&
sed -e "s/die\(.*--enable-shared only supported on .* for now\)/echo\1/" configure.bak > configure &&
mv libs.mk libs.mk.bak &&
sed -e "s/ln -sf /cp -f /" libs.mk.bak > libs.mk &&
wl-showstatus configure &&
####--enable-shared only supported on ELF for now
if ( echo $RUNPLATFORM | grep -qv x86_64 ); then
 #./configure --enable-vp8 --as=yasm --target=x86-win32-gcc
 #./configure --enable-vp8 --as=yasm --target=x86-win32-gcc --enable-shared --enable-static
 ./configure --enable-vp8 --enable-vp9 --as=yasm --target=x86-win32-gcc --enable-shared --enable-static --enable-libyuv --disable-webm-io --disable-debug-libs --disable-unit-tests
 #./configure --enable-vp8 --enable-vp9 --as=yasm --target=x86-win32-gcc --enable-shared --enable-static --enable-libyuv --disable-debug-libs --disable-unit-tests
else
 #./configure --enable-vp8 --as=yasm --target=x86_64-win64-gcc &&
 ## remove MMX/SSE stuff on 64-bit (version <= 1.1.0)
 #sed -i.bak -e "s/\(#define HAVE_\)\(MMX\|SSE[^ ]*\|SSSE3\) 1/\1\2 0/" vpx_config.h
 #./configure --enable-vp8 --as=yasm --target=x86_64-win64-gcc
 #./configure --enable-vp8 --as=yasm --target=x86_64-win64-gcc --enable-shared --enable-static
 ./configure --enable-vp8 --enable-vp9 --as=yasm --target=x86_64-win64-gcc --enable-shared --enable-static --enable-libyuv --disable-webm-io --disable-debug-libs --disable-unit-tests &&
 #./configure --enable-vp8 --enable-vp9 --as=yasm --target=x86_64-win64-gcc --enable-shared --enable-static --enable-libyuv --disable-debug-libs --disable-unit-tests &&
 # fix invalid register for .seh_savexmm
 sed -i.bak -e "s/avx512.*$/& -fno-asynchronous-unwind-tables/" Makefile
fi &&
 ## avoid pthreads on Windows (version = 1.1.0)
 #echo "#undef HAVE_PTHREAD_H" >> vpx_config.h &&
 wl-showstatus build-install &&
 ( make install DIST_DIR=$INSTALLPREFIX || make install DIST_DIR=$INSTALLPREFIX HAVE_GNU_STRIP=0 ) &&
 (( ls -1 $INSTALLPREFIX/lib/libvpx.so &> /dev/null && (
  mkdir -p $INSTALLPREFIX/bin &&
  mv -f $INSTALLPREFIX/lib/libvpx.so $INSTALLPREFIX/bin/vpx.dll &&
  pexports $INSTALLPREFIX/bin/vpx.dll | sed -e "s/^LIBRARY libvpx\.so.*$/LIBRARY vpx.dll/" > libvpx.def &&
  dlltool -D $INSTALLPREFIX/bin/vpx.dll -d libvpx.def -l $INSTALLPREFIX/lib/libvpx.dll.a &&
  rm -f $INSTALLPREFIX/lib/*.so.*
 )) || true ) &&
 rm -rf $INSTALLPREFIX/src $INSTALLPREFIX/build $INSTALLPREFIX/md5sums.txt &&
 # fix references to /usr/local in vpx.pc (version >= 1.11.0)
 sed -i -e "s?/usr/local?$INSTALLPREFIX?" $INSTALLPREFIX/lib/pkgconfig/vpx.pc &&
 #wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-v$VERSION
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




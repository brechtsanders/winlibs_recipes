#export NAME="libutf8proc"
#export STATUS=
#export URL=https://www.netsurf-browser.org/projects/libutf8proc/
#export BASENAME=libutf8proc
#export DESCRIPTION="libutf8proc"
#export CATEGORY=internationalization
#export TYPE=library
#export VERSION=2.4.0-1
#export VERSIONDATE=20210303
#wl-showstatus --package-version
#export DEPENDENCIES=
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=
#export OPTIONALBUILDDEPENDENCIES=
##export BUILDDEPENDENCIES=cmake,ninja
##export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=README
#export LICENSETYPE="MIT expat"
#export DOWNLOADURL="http://download.netsurf-browser.org/libs/releases/"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://download.netsurf-browser.org/libs/releases/libutf8proc-$VERSION-src.tar.gz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#wl-showstatus extract
#tar xz --force-local -f $TARBALLDIR/$BASENAME/libutf8proc-$VERSION-src.tar.gz
#cd $BASENAME-$VERSION
##mv src/utf8proc_data.c src/utf8proc_data.c.bak &&
##echo "#include \"utf8proc.h\"" > src/utf8proc_data.c &&
##cat src/utf8proc_data.c.bak >> src/utf8proc_data.c
##wl-showstatus build &&
## touch SUCCESS &&
## for F in $(find src -name '*.c'); do
##  echo CC $F &&
##  gcc -c -o $F.o $F -Isrc -Iinclude -O3 -DUTF8PROC_EXPORTS &>>_ || rm -f SUCCESS
## done &&
## rm SUCCESS &&
## ar cru $BASENAME.a $(find src -name '*.c.o') &&
## ( echo "EXPORTS" && nm -f posix --defined-only -p $BASENAME.a | sed -n -e "s/^_*\([^ ]*\) T .*$/\1/p" ) > $BASENAME.def &&
## gcc -shared -s -mwindows -def $BASENAME.def -o $BASENAME.dll $BASENAME.a -Wl,--out-implib,$BASENAME.dll.a &&
## sed -e "s?PREFIX?$INSTALLPREFIX?; s?LIBDIR?lib?; s?INCLUDEDIR?include/libutf8proc?; s?VERSION?$VERSION?" $BASENAME.pc.in > $BASENAME.pc &&
## wl-showstatus install &&
## mkdir -p $INSTALLPREFIX/include $INSTALLPREFIX/lib/pkgconfig $INSTALLPREFIX/bin &&
## cp -rf include/* $INSTALLPREFIX/include/ &&
## cp -f *.a *.def $INSTALLPREFIX/lib/ &&
## cp -f *.dll $INSTALLPREFIX/bin/ &&
## cp -f *.pc $INSTALLPREFIX/lib/pkgconfig &&
## wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
## copy files to current directory as specified in CMakeLists.txt
#cp -f src/*.c .
#cp -f include/libutf8proc/*.h .
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -S. -Bbuild_static &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -S. -Bbuild_shared &&
# ## fix execution of Python scripts
# #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
# #wl-showstatus build &&
# #ninja -Cbuild_static &&
# #wl-showstatus build &&
# #ninja -Cbuild_shared &&
# wl-showstatus build-install &&
# ninja -Cbuild_static install/strip &&
# wl-showstatus build-install &&
# ninja -Cbuild_shared install/strip &&
# # manually install .pc file
# mkdir -p $INSTALLPREFIX/lib/pkgconfig &&
# sed -e "s?PREFIX?$INSTALLPREFIX?; s?LIBDIR?lib?; s?INCLUDEDIR?include?; s?VERSION?$VERSION?" libutf8proc.pc.in > $INSTALLPREFIX/lib/pkgconfig/libutf8proc.pc &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION



#export NAME="utf8"
#export STATUS=
#export URL=https://github.com/sheredom/utf8.h
#export BASENAME=utf8
#export DESCRIPTION="A simple one header solution to supporting utf8 strings in C and C++."
#export CATEGORY=development
#export TYPE=library
#export VERSION=master
#export VERSIONDATE=20170430
#wl-showstatus --package-version
#export DEPENDENCIES=
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=
#export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=LICENSE
#export LICENSETYPE=
#export DOWNLOADURL="https://github.com/sheredom/utf8.h/releases"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://github.com/sheredom/utf8.h/archive/$VERSION.tar.gz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
##mv $TARBALLDIR/$BASENAME/$VERSION.tar.gz $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
#wl-wait4deps
#wl-showstatus extract
#mkdir -p $BASENAME-$VERSION
##tar xz --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz -C$BASENAME-$VERSION
#tar xz --force-local -f $TARBALLDIR/$BASENAME/$VERSION.tar.gz -C$BASENAME-$VERSION
#cd $BASENAME-$VERSION/utf8*
#wl-showstatus install &&
# mkdir -p $INSTALLPREFIX/include &&
# cp -f *.h $INSTALLPREFIX/include &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd ../.. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION



#export NAME="utf8proc"
#export STATUS=
#export URL=https://github.com/JuliaStrings/utf8proc
#export BASENAME=libutf8proc
#export DESCRIPTION="a clean C library for processing UTF-8 Unicode data"
#export CATEGORY=internationalization
#export TYPE=library
#export VERSION=2.6.1
#export VERSIONDATE=20210303
#wl-showstatus --package-version
#export DEPENDENCIES=
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=cmake,ninja
#export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=LICENSE.md
#export LICENSETYPE="MIT expat"
#export DOWNLOADURL="https://github.com/JuliaStrings/utf8proc/releases"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://github.com/JuliaStrings/utf8proc/archive/v$VERSION.tar.gz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#wl-showstatus extract
#tar xz --force-local -f $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
#cd utf8proc-$VERSION
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DUTF8PROC_ENABLE_TESTING:BOOL=OFF -S. -Bbuild_static &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DUTF8PROC_ENABLE_TESTING:BOOL=OFF -S. -Bbuild_shared &&
# ## fix execution of Python scripts
# #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
# #wl-showstatus build &&
# #ninja -Cbuild_static &&
# #wl-showstatus build &&
# #ninja -Cbuild_shared &&
# wl-showstatus build-install &&
# ninja -Cbuild_static install/strip &&
# wl-showstatus build-install &&
# ninja -Cbuild_shared install/strip &&
# # manually install .pc file
# mkdir -p $INSTALLPREFIX/lib/pkgconfig &&
# sed -e "s?PREFIX?$INSTALLPREFIX?; s?LIBDIR?lib?; s?INCLUDEDIR?include?; s?VERSION?$VERSION?" libutf8proc.pc.in > $INSTALLPREFIX/lib/pkgconfig/libutf8proc.pc &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf utf8proc-$VERSION



export NAME="utf8proc"
export STATUS=
#export URL=https://julialang.org/utf8proc/
export URL=https://github.com/JuliaStrings/utf8proc
export BASENAME=libutf8proc
export DESCRIPTION="utf8proc is a small, clean C library that provides Unicode normalization, case-folding, and other operations for data in the UTF-8 encoding, supporting Unicode version 9.0."
export CATEGORY=internationalization
export TYPE=library
#export VERSION=2.1.0
#export VERSIONDATE=20180413
#export VERSION=2.1.1
#export VERSIONDATE=20180428
#export VERSION=2.2.0
#export VERSIONDATE=20180725
#export VERSION=2.3.0
#export VERSIONDATE=20190331
#export VERSION=2.4.0
#export VERSIONDATE=20190511
#export VERSION=2.5.0
#export VERSIONDATE=20200328
#export VERSION=2.6.0
#export VERSIONDATE=20201124
#export VERSION=2.6.1
#export VERSIONDATE=20201216
#export VERSION=2.7.0
#export VERSIONDATE=20211217
#export VERSION=2.8.0
#export VERSIONDATE=20221031
#export VERSION=2.9.0
#export VERSIONDATE=20231021
export VERSION=2.10.0
export VERSIONDATE=20250101
wl-showstatus --package-version
export DEPENDENCIES=
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE.md
export LICENSETYPE="MIT expat"
#export DOWNLOADURL="https://github.com/JuliaLang/utf8proc/releases"
export DOWNLOADURL="https://github.com/JuliaStrings/utf8proc/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://github.com/JuliaLang/utf8proc/archive/v$VERSION.tar.gz
export DOWNLOADSOURCEURL=https://github.com/JuliaStrings/utf8proc/archive/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd utf8proc-$VERSION
# fix utf8proc.h (version >= 2.2.0)
patch -ulbf utf8proc.h << EOF
@@ -127 +127 @@
-#    ifdef UTF8PROC_EXPORTS
+#    if defined(UTF8PROC_EXPORTS) || defined(utf8proc_shared_EXPORTS)
EOF
# also build shared library
mv CMakeLists.txt CMakeLists.txt.bak &&
cat CMakeLists.txt.bak > CMakeLists.txt &&
sed -e '/add_library/,$!d; s/\(add_library *([^ ]*\)\b/\1_shared SHARED/; s/\(set_target_properties *(\)\([^ ]*\)\b/\1\2_shared PROPERTIES OUTPUT_NAME \2)\n\1\2_shared/' CMakeLists.txt.bak >> CMakeLists.txt
mkdir -p build_win &&
 wl-showstatus configure &&
 cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -S. -Bbuild_win &&
 wl-showstatus build &&
 make -Cbuild_win &&
 strip build_win/*.dll &&
 #wl-showstatus build-install &&
 #make -Cbuild install/strip &&
 wl-showstatus install &&
 mkdir -p $INSTALLPREFIX/include $INSTALLPREFIX/lib $INSTALLPREFIX/bin &&
 cp -f *.h $INSTALLPREFIX/include/ &&
 cp -f build_win/*.a $INSTALLPREFIX/lib/ &&
 cp -f build_win/*.dll $INSTALLPREFIX/bin/ &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf utf8proc-$VERSION




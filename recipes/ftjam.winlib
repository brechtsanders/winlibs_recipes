export NAME="FT Jam"
export STATUS=
export URL=http://www.perforce.com/documentation/jam
export BASENAME=ftjam
export DESCRIPTION="Jam is a small open-source build tool that can be used as a replacement for Make. Even though Jam is a lot simpler to use than Make, it is far more powerful and easy to master. It already works on a large variety of platforms (Unix, Windows, OS/2, VMS, MacOS, BeOS, etc.), it is trivial to port, and its design is sufficiently clear to allow any average programmer to extend it with advanced features at will."
export CATEGORY=development
export TYPE=application
export VERSION=2.5.2
export VERSIONDATE=20160620
wl-showstatus --package-version
export DEPENDENCIES=
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=
export LICENSETYPE=
export DOWNLOADURL="https://sourceforge.net/projects/freetype/files/ftjam/"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://sourceforge.net/projects/freetype/files/ftjam/$VERSION/$BASENAME-$VERSION.tar.bz2
export DOWNLOADSOURCEURL="https://sourceforge.net/projects/freetype/files/ftjam/$VERSION/$BASENAME-$VERSION.tar.bz2 https://downloads.sourceforge.net/project/freetype/ftjam/$VERSION/ftjam-$VERSION-win32.zip"
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xj --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.bz2
cd $BASENAME-$VERSION
#wl-showstatus build &&
# #make -f common.mk CC=${CC:-gcc} CFLAGS="-DNT -O3" TARGET="-s -o jam0.exe" &&
# #JAM_TOOLSET=MINGW make -fbuilds/win32-gcc.mk &&
# #( JAM_TOOLSET=MINGW make -fbuilds/win32-gcc.mk || ( unzip -oq $TARBALLDIR/$BASENAME/ftjam-$VERSION-win32.zip && mv -f jam.exe jam0.exe )) &&
# ( JAM_TOOLSET=MINGW make -fbuilds/win32-gcc.mk || (( unzip -oq $TARBALLDIR/$BASENAME/ftjam-$VERSION-win32.zip || 'C:\Program Files\7-Zip\7z.exe' x $TARBALLDIR/$BASENAME/ftjam-$VERSION-win32.zip ) && mv -f jam.exe jam0.exe )) &&
# ./jam0 JAM_TOOLSET=MINGW &&
# strip bin.nt*/*.exe &&
# wl-showstatus install &&
# mkdir -p $INSTALLPREFIX/bin &&
# cp -f bin.nt*/*.exe $INSTALLPREFIX/bin/ &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
# fix segmentation fault in filent.c (version >= 2.5.2)
patch -ulbf filent.c << EOF
@@ -47,2 +47,5 @@
 # include <sys/stat.h>
+# ifdef __MINGW32__
+#  include <windows.h>
+# endif

@@ -112,2 +115,17 @@
        }
+# elif defined(__MINGW32__)
+       HANDLE dirhandle;
+       WIN32_FIND_DATAA direntry;
+       dirhandle = FindFirstFileA( filespec, &direntry );
+       if (dirhandle != INVALID_HANDLE_VALUE) {
+           do {
+               f.f_base.ptr = direntry.cFileName;
+               f.f_base.len = strlen( direntry.cFileName );
+
+               path_build( &f, filename, 0 );
+
+               (*func)( closure, filename, 1 /* stat()'ed */, finfo->time_write );
+           } while (FindNextFileA( dirhandle, &direntry ));
+           FindClose( dirhandle );
+       }
 # else
EOF
# fix execunix.c (version >= 2.5.2)
patch -ulbf execunix.c << EOF
@@ -218,3 +218,3 @@
 # ifdef USE_EXECNT
-       if( ( pid = spawnvp( P_NOWAIT, argv[0], argv ) ) == -1 )
+       if( ( pid = spawnvp( P_NOWAIT, argv[0], (void*)argv ) ) == -1 )
        {
EOF
# fix mkjambase.c (version >= 2.5.2)
patch -ulbf mkjambase.c << EOF
@@ -26,3 +26,3 @@

-main( int argc, char **argv, char **envp )
+int main( int argc, char **argv, char **envp )
 {
EOF
## don't strip executable
#sed -i.bak -e "s/if \$(JAM_TOOLSET) = MINGW/&_SKIP/" Jamfile
# use prebuilt binary
( unzip -oq $TARBALLDIR/$BASENAME/ftjam-$VERSION-win32.zip || 'C:\Program Files\7-Zip\7z.exe' x $TARBALLDIR/$BASENAME/ftjam-$VERSION-win32.zip ) && mv -f jam.exe jam0.exe
# support ARM64 in config.sub
sed -i.bak -e "s/| x86_64-\* /&| aarch64-\* /" builds/unix/config.sub
wl-showstatus configure &&
 #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM CFLAGS="-DNT -O0 -g" LDFLAGS="-Wl,--stack,0x100000000" &&
 ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM CFLAGS="-DNT" LDFLAGS="-s" &&
 wl-showstatus build &&
 #make JAM_TOOLSET=MINGW &&
 ( make JAM_TOOLSET=MINGW || make JAM_TOOLSET=MINGW AR="${AR:-ar} ru" ) &&
 wl-showstatus install &&
 mkdir -p $INSTALLPREFIX/bin &&
 cp -f bin.nt*/*.exe $INSTALLPREFIX/bin/ &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




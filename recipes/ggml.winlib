export NAME="ggml"
export STATUS=
export URL=https://github.com/ggerganov/ggml
export BASENAME=ggml
export DESCRIPTION="Tensor library for machine learning"
export CATEGORY=artificialintelligence
export TYPE=library
#export VERSION=master
#export VERSIONDATE=20231202
#export VERSION=0.9.1
#export VERSIONDATE=20250921
#export VERSION=0.9.3
#export VERSIONDATE=20250921
export VERSION=0.9.4
export VERSIONDATE=20250930
wl-showstatus --package-version
export DEPENDENCIES=openblas,clblast
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=MIT
export DOWNLOADURL="https://github.com/ggerganov/ggml/tags"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://github.com/ggerganov/ggml/archive/refs/heads/$VERSION.tar.gz
export DOWNLOADSOURCEURL=https://github.com/ggml-org/ggml/archive/refs/tags/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
#tar xz --force-local -f $TARBALLDIR/$BASENAME/$VERSION.tar.gz
tar xz --force-local -f $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd $BASENAME-$VERSION
# manually create Findggml.cmake (version >= 1.8.2)
cat > Findggml.cmake << EOF
# Find the GGML library
# Defines:

#  GGML_INCLUDE_DIR - GGML include directory
#  GGML_LIBRARY     - GGML library file
#  GGML_FOUND       - TRUE if GGML is found

if (GGML_INCLUDE_DIR)
 #check cache 
  set(GGML_FIND_QUIETLY TRUE)
endif ()

if (NOT GGML_INCLUDE_DIR)
    find_path(GGML_INCLUDE_DIR NAMES ggml.h)
    set(GGML_INCLUDE_DIR \${GGML_INCLUDE_DIR} CACHE PATH "GGML includes")
endif ()

find_library(GGML_LIBRARY NAMES ggml)

if (GGML_INCLUDE_DIR AND GGML_LIBRARY)
  set(GGML_FOUND TRUE)
  set(UriParser_FOUND TRUE)
endif ()

if (GGML_FOUND)
   if (NOT GGML_FIND_QUIETLY)
      message(STATUS "Found GGML library: \${GGML_LIBRARY}")
   endif ()
else ()
   if (NOT GGML_FIND_QUIETLY)
      message(FATAL_ERROR "Could NOT find GGML library")
    else ()
      message(STATUS "Could NOT find GGML library")
    endif ()
endif ()
EOF
## fix src/CMakeLists.txt
#patch -ulbf src/CMakeLists.txt << EOF
#@@ -388,3 +388,4 @@
#     LIBRARY DESTINATION lib
#-    ARCHIVE DESTINATION lib/static
#+    ARCHIVE DESTINATION lib
#+    RUNTIME DESTINATION bin
#     PUBLIC_HEADER DESTINATION include/ggml
#EOF
mkdir -p build_static build_shared &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DGGML_OPENBLAS:BOOL=ON -DGGML_CLBLAST:BOOL=ON -DGGML_BUILD_EXAMPLES:BOOL=OFF -DGGML_BUILD_TESTS:BOOL=OFF -S. -Bbuild_static &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DGGML_OPENBLAS:BOOL=ON -DGGML_CLBLAST:BOOL=ON -DGGML_BUILD_EXAMPLES:BOOL=OFF -DGGML_BUILD_TESTS:BOOL=OFF -S. -Bbuild_shared &&
 wl-showstatus build-install &&
 ninja -Cbuild_static install/strip &&
 wl-showstatus build-install &&
 ninja -Cbuild_shared install/strip &&
 cp -n Findggml.cmake $INSTALLPREFIX/lib/cmake/ &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




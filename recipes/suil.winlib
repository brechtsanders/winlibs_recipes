export NAME="suil"
export STATUS=
export URL=https://drobilla.net/software/.html
export BASENAME=suil
export DESCRIPTION="Suil is a lightweight C library for loading and wrapping LV2 plugin UIs."
export CATEGORY=
export TYPE=library
#export VERSION=0.10.14
#export VERSIONDATE=20220719
#export VERSION=0.10.16
#export VERSIONDATE=20220814
export VERSION=0.10.18
export VERSIONDATE=20220910
wl-showstatus --package-version
export DEPENDENCIES=
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=meson,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=COPYING
export LICENSETYPE=GPL
#export DOWNLOADURL="https://drobilla.net/category/suil/"
export DOWNLOADURL="http://download.drobilla.net/"
#export DOWNLOADURL="https://gitlab.com/lv2/suil/-/tags"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://download.drobilla.net/$BASENAME-$VERSION.tar.xz
#export DOWNLOADSOURCEURL=https://gitlab.com/lv2/suil/-/archive/v$VERSION/$BASENAME-v$VERSION.tar.bz2
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xJ --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.xz
cd $BASENAME-$VERSION
# fix src/win_in_gtk2.cpp (version >= 0.10.14)
patch -ulbf src/win_in_gtk2.cpp << EOF
@@ -42,4 +42,4 @@

-using SuilWinWrapper      = _SuilWinWrapper;
-using SuilWinWrapperClass = _SuilWinWrapperClass;
+typedef struct _SuilWinWrapper SuilWinWrapper;
+typedef struct _SuilWinWrapperClass SuilWinWrapperClass;

EOF
# fix meson/library/meson.build (version >= 0.10.14)
patch -ulbf meson/library/meson.build << EOF
@@ -19,3 +19,3 @@
 if host_system == 'windows' and default_library == 'both'
-  error('default_library=both is not supported on Windows')
+  warning('default_library=both is not supported on Windows')
 endif
EOF
mkdir -p build_both &&
 wl-showstatus configure &&
 PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Dstrict=false -Dcocoa=disabled -Dx11=disabled -Dgtk2=disabled -Dgtk3=enabled -Dqt5=disabled -Ddocs=disabled . build_both &&
 ## fix slash/backslash path issue when calling Python from Ninja
 #sed -i.bak -e "s/join_paths/os.path.join/g; /COMMAND =.*python\.exe/ s?\"/\([a-zA-Z]\)/?\"\1:/?; /COMMAND =.*python\.exe/ s?/?\\\\?g" build_*/build.ninja &&
 ## fix Python path issues in meson_exe
 #sed -i.bak -e "s?$PYDIR?$(echo $PYDIR|sed -e "s?^/\([a-zA-Z]\)/?\1:/?")?" build_both/meson-private/meson_exe_python.exe_*.dat &&
 ## fix execution of Python scripts
 #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *= *\| *=.*\&\& *\)\(\"\{0,1\}[^ ]*\)\(\.py\|glib-mkenums\|g-ir-scanner\|asciidoc\)\(\"\{0,1\} \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_both/build.ninja &&
 ## fix executing shell scripts
 #sed -i.bak -e "s?^\(\s*COMMAND\s*=\s*\)\(\"[^\"]*\.sh\"\)?\1\"$(cygpath -m $(which sh.exe))\" \2?" build_both/build.ninja &&
 wl-showstatus build-install &&
 PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -Cbuild_both install &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




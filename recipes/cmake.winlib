#export NAME="CMake"
#export STATUS=
#export URL=http://www.cmake.org/
#export BASENAME=cmake
#export DESCRIPTION="CMake, the cross-platform, open-source build system. CMake is a family of tools designed to build, test and package software. CMake is used to control the software compilation process using simple platform and compiler independent configuration files. CMake generates native makefiles and workspaces that can be used in the compiler environment of your choice. CMake is quite sophisticated: it is possible to support complex environments requiring system introspection, pre-processor generation, code generation and template instantiation. In addition to controling the build process, CMake includes CTest for testing and CPack for packaging."
#export CATEGORY=build
#export TYPE=application
##export VERSION=2.6.0
##export VERSION=2.6.3
##export VERSION=2.6.4
##export VERSION=2.8.0
##export VERSION=2.8.1
##export VERSIONDATE=20100317
##export VERSION=2.8.2
##export VERSIONDATE=20100629
##export VERSION=2.8.3
##export VERSIONDATE=20101104
##export VERSION=2.8.4
##export VERSIONDATE=20110216
##export VERSION=2.8.5
##export VERSIONDATE=20110713
##export VERSION=2.8.6
##export VERSIONDATE=20111005
##export VERSION=2.8.7
##export VERSIONDATE=20111231
##export VERSION=2.8.8
##export VERSIONDATE=20120419
##export VERSION=2.8.9
##export VERSIONDATE=20120810
#export VERSION=2.8.10.2
#export VERSIONDATE=20121128
#wl-showstatus --package-version
#export DEPENDENCIES=
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=
#export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=
#export LICENSETYPE=BSD
#export DOWNLOADURL="http://www.cmake.org/files/ cmake- -win32-x86.zip"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://www.cmake.org/files/v`echo $VERSION|sed 's/^\([0-9]*\.[0-9]*\)\..*$/\1/'`/cmake-$VERSION-win32-x86.zip
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#mkdir -p $INSTALLPREFIX
#unzip -oq $TARBALLDIR/$BASENAME/cmake-$VERSION-win32-x86.zip -d $INSTALLPREFIX
#mv $INSTALLPREFIX/cmake-$VERSION-win32-x86/* $INSTALLPREFIX/ &&
# rmdir $INSTALLPREFIX/cmake-$VERSION-win32-x86 &&
# rm -f $INSTALLPREFIX/bin/*.dll $INSTALLPREFIX/bin/*.manifest &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION



#export NAME="CMake"
#export STATUS=
#export URL=http://www.cmake.org/
#export BASENAME=cmake
#export DESCRIPTION="Welcome to CMake, the cross-platform, open-source build system. CMake is a family of tools designed to build, test and package software. CMake is used to control the software compilation process using simple platform and compiler independent configuration files. CMake generates native makefiles and workspaces that can be used in the compiler environment of your choice."
#export CATEGORY=build
#export TYPE=application
##export VERSION=2.8.4
##export VERSIONDATE=20110619
##export VERSION=2.8.5
##export VERSIONDATE=20110713
##export VERSION=2.8.6
##export VERSIONDATE=20111005
##export VERSION=2.8.7
##export VERSIONDATE=20111231
#####gmake: *** No rule to make target `/M/win32/cmake-2.8.7/Source/cmStandardIncludes.cxx', needed by `cmStandardIncludes.o'.  Stop.
#export VERSION=2.8.8
#export VERSIONDATE=20140419
#####gmake: *** No rule to make target `/home/win64/cmake-2.8.8/Sourudes.cxx', needed by `cmStandardIncludes.o'.  Stop.
##export VERSION=2.8.9
##export VERSIONDATE=20120810
##export VERSION=2.8.10
##export VERSIONDATE=20121101
##export VERSION=2.8.10.1
##export VERSIONDATE=20121108
##export VERSION=2.8.10.2
##export VERSIONDATE=20121128
##export VERSION=2.8.11
##export VERSIONDATE=20130517
#####gmake: *** No rule to make target `/home/win64/cmake-2.8.10/Source/cmStandardIncludes.cxx', needed by `cmStandardIncludes.o'.  Stop.
#wl-showstatus --package-version
#export DEPENDENCIES=libcurl,expat,zlib,libbz2,libarchive
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=
#export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=Copyright.txt
#export LICENSETYPE=BSD
#export DOWNLOADURL="http://www.cmake.org/cmake/resources/software.html"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://www.cmake.org/files/v`echo $VERSION|sed 's/^\([0-9]*\.[0-9]*\)\..*$/\1/'`/$BASENAME-$VERSION.tar.gz
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#tar xz --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
#cd $BASENAME-$VERSION
### fix bootstrap for proper detection of system libraries
##patch -ulbf bootstrap << EOF
##--- bootstrap  2011-02-15 18:47:26 +0100
##+++ bootstrap  2011-06-19 20:32:48 +0200
##@@ -1530,3 +1530,3 @@
## # Run bootstrap CMake to configure real CMake
##-cmake_options="-DCMAKE_BOOTSTRAP=1"
##+cmake_options="-DCMAKE_BOOTSTRAP=1 -DCMAKE_INSTALL_PREFIX=$INSTALLPREFIX -DZLIB_INCLUDE_DIR=$MINGWPREFIX/include -DCURL_INCLUDE_DIR=$MINGWPREFIX/include -DCURL_LIBRARY=$MINGWPREFIX/lib/libcurl.dll.a -DBZIP2_INCLUDE_DIR=$MINGWPREFIX/include -DBZIP2_LIBRARY=$MINGWPREFIX/lib/libz.dll.a -DLibArchive_INCLUDE_DIR=$MINGWPREFIX/include -DLibArchive_LIBRARY=$MINGWPREFIX/lib/libarchive.dll.a -DEXPAT_INCLUDE_DIR=$MINGWPREFIX/include"
## if [ -n "\${cmake_verbose}" ]; then
##EOF
## fix bootstrap for proper detection of system libraries and force ANSI scoping (version >= 2.8.8)
#patch -ulbf bootstrap << EOF
#--- bootstrap  2012-04-18 20:10:54 +0200
#+++ bootstrap  2012-04-19 08:18:44 +0200
#@@ -1314,5 +1314,3 @@
# # Test for ansi FOR scope
#-if cmake_try_run "\${cmake_cxx_compiler}" \\
#-  "\${cmake_cxx_flags}" \\
#-  "\${cmake_source_dir}/Modules/TestForAnsiForScope.cxx" >> cmake_bootstrap.log 2>&1; then
#+if true; then
#   cmake_report cmConfigure.h\${_tmp} "/* #undef CMAKE_NO_ANSI_FOR_SCOPE */"
#@@ -1514,3 +1512,3 @@
# # Run bootstrap CMake to configure real CMake
#-cmake_options="-DCMAKE_BOOTSTRAP=1"
#+cmake_options="-DCMAKE_BOOTSTRAP=1 -DCMAKE_INSTALL_PREFIX=$INSTALLPREFIX -DZLIB_INCLUDE_DIR=$MINGWPREFIX/include -DCURL_INCLUDE_DIR=$MINGWPREFIX/include -DCURL_LIBRARY=$MINGWPREFIX/lib/libcurl.dll.a -DBZIP2_INCLUDE_DIR=$MINGWPREFIX/include -DBZIP2_LIBRARY=$MINGWPREFIX/lib/libz.dll.a -DLibArchive_INCLUDE_DIR=$MINGWPREFIX/include -DLibArchive_LIBRARY=$MINGWPREFIX/lib/libarchive.dll.a -DEXPAT_INCLUDE_DIR=$MINGWPREFIX/include"
# if [ -n "\${cmake_verbose}" ]; then
#EOF
### fix missing Source/cmStandardIncludes.cxx
#mv Bootstrap.cmk/Makefile Bootstrap.cmk/Makefile.bak
#sed -e "s?$(pwd)/Source/cmStandardIncludes.cxx??" Bootstrap.cmk/Makefile.bak > Bootstrap.cmk/Makefile
#wl-showstatus configure &&
##GREP_OPTIONS= ./bootstrap --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --system-curl --system-expat --system-zlib --system-bzip2 --system-libarchive --no-qt-gui &&
#GREP_OPTIONS= ./bootstrap --prefix=$INSTALLPREFIX --system-curl --system-expat --system-zlib --system-bzip2 --system-libarchive --no-qt-gui &&
# wl-showstatus build-install &&
# make install/strip &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && rm -rf $BASENAME-$VERSION
##cp -f Bootstrap.cmk/*.h Source/
##cp -rf Bootstrap.cmk/cmsys Source/
##mingw32-make.exe -C Source/ -f ../Bootstrap.cmk/Makefile
##wl-showstatus configure &&
##cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_TESTING:BOOL=OFF -DCMAKE_USE_SYSTEM_BZIP2:BOOL=ON -DCMAKE_USE_SYSTEM_CURL:BOOL=ON -DCMAKE_USE_SYSTEM_EXPAT:BOOL=ON -DCMAKE_USE_SYSTEM_LIBARCHIVE:BOOL=ON -DCMAKE_USE_SYSTEM_ZLIB:BOOL=ON . &&
## make install/strip &&
## wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && rm -rf $BASENAME-$VERSION



#export NAME="CMake"
#export STATUS=
#export URL=http://www.cmake.org/
#export BASENAME=cmake
#export DESCRIPTION="Welcome to CMake, the cross-platform, open-source build system. CMake is a family of tools designed to build, test and package software. CMake is used to control the software compilation process using simple platform and compiler independent configuration files. CMake generates native makefiles and workspaces that can be used in the compiler environment of your choice."
#export CATEGORY=build
#export TYPE=application
##export VERSION=2.8.10.2
##export VERSIONDATE=20121128
##export VERSION=2.8.11
##export VERSIONDATE=20130517
##export VERSION=2.8.11.1
##export VERSIONDATE=20130608
##export VERSION=2.8.11.2
##export VERSIONDATE=20130704
##export VERSION=2.8.12
##export VERSIONDATE=20131012
##export VERSION=2.8.12.1
##export VERSIONDATE=20131109
##export VERSION=2.8.12.2
##export VERSIONDATE=20140128
##export VERSION=3.0.0
##export VERSIONDATE=20140611
##export VERSION=3.0.1
##export VERSIONDATE=20140807
##export VERSION=3.0.2
##export VERSIONDATE=20140912
##export DEPENDENCIES=libcurl,expat,zlib,libbz2,libarchive
##export VERSION=3.1.0
##export VERSIONDATE=20141218
##export VERSION=3.1.1
##export VERSIONDATE=20150123
##export VERSION=3.1.2
##export VERSIONDATE=20150206
##export VERSION=3.1.3
##export VERSIONDATE=20150213
##export VERSION=3.2.1
##export VERSIONDATE=20150311
##export VERSION=3.2.2
##export VERSIONDATE=20150415
##export VERSION=3.2.3
##export VERSIONDATE=20150602
##export VERSION=3.3.0
##export VERSIONDATE=20150724
##export VERSION=3.3.1
##export VERSIONDATE=20150814
##export VERSION=3.3.2
##export VERSIONDATE=20150918
##export VERSION=3.4.0
##export VERSIONDATE=20151113
##export VERSION=3.4.1
##export VERSIONDATE=20151203
##export VERSION=3.4.2
##export VERSIONDATE=20160120
##export VERSION=3.4.3
##export VERSIONDATE=20160126
##export VERSION=3.5.0
##export VERSIONDATE=20160309
##export VERSION=3.5.1
##export VERSIONDATE=20160325
##export VERSION=3.5.2
##export VERSIONDATE=20160416
##export VERSION=3.6.0
##export VERSIONDATE=20160708
##export VERSION=3.6.1
##export VERSIONDATE=20160725
##export VERSION=3.6.2
##export VERSIONDATE=20160908
##export VERSION=3.6.3
##export VERSIONDATE=20161104
##export VERSION=3.7.0
##export VERSIONDATE=20161112
##export VERSION=3.7.1
##export VERSIONDATE=20161201
##export VERSION=3.7.2
##export VERSIONDATE=20170114
##export VERSION=3.8.0
##export VERSIONDATE=20170411
##export VERSION=3.8.1
##export VERSIONDATE=20170503
##export VERSION=3.8.2
##export VERSIONDATE=20170601
##export VERSION=3.9.0
##export VERSIONDATE=20170719
##export VERSION=3.9.1
##export VERSIONDATE=20170814
##export VERSION=3.9.2
##export VERSIONDATE=20170908
##export VERSION=3.9.3
##export VERSIONDATE=20170921
##export VERSION=3.9.4
##export VERSIONDATE=20171005
##export VERSION=3.9.5
##export VERSIONDATE=20171104
##export VERSION=3.9.6
##export VERSIONDATE=20171111
##export VERSION=3.10.0
##export VERSIONDATE=20171121
##export VERSION=3.10.1
##export VERSIONDATE=20171215
##export VERSION=3.10.2
##export VERSIONDATE=20180119
##export VERSION=3.10.3
##export VERSIONDATE=20180317
##export VERSION=3.11.0
##export VERSIONDATE=20180329
##export VERSION=3.11.1
##export VERSIONDATE=20180418
##export VERSION=3.11.2
##export VERSIONDATE=20180518
##export VERSION=3.11.3
##export VERSIONDATE=20180601
##export VERSION=3.11.4
##export VERSIONDATE=20180615
##export VERSION=3.12.0
##export VERSIONDATE=20180718
##export VERSION=3.12.1
##export VERSIONDATE=20180810
##export VERSION=3.12.2
##export VERSIONDATE=20180908
##export VERSION=3.12.3
##export VERSIONDATE=20181004
##export VERSION=3.12.4
##export VERSIONDATE=20181103
##export VERSION=3.13.0
##export VERSIONDATE=20181121
##export VERSION=3.13.1
##export VERSIONDATE=20181129
##export VERSION=3.13.2
##export VERSIONDATE=20181214
##export VERSION=3.13.3
##export VERSIONDATE=20190115
##export VERSION=3.13.4
##export VERSIONDATE=20190205
##export VERSION=3.13.5
##export VERSIONDATE=20190515
##export VERSION=3.14.0
##export VERSIONDATE=20190315
##export VERSION=3.14.1
##export VERSIONDATE=20190330
##export VERSION=3.14.2
##export VERSIONDATE=20190413
##export VERSION=3.14.3
##export VERSIONDATE=20190423
##export VERSION=3.14.4
##export VERSIONDATE=20190515
##export VERSION=3.14.5
##export VERSIONDATE=20190601
##export VERSION=3.14.6
##export VERSIONDATE=20190601
##export VERSION=3.14.7
##export VERSIONDATE=20191003
##export VERSION=3.15.0
##export VERSIONDATE=20190718
##export VERSION=3.15.2
##export VERSIONDATE=20190808
##export VERSION=3.15.3
##export VERSIONDATE=20190905
##export VERSION=3.15.4
##export VERSIONDATE=20191003
##export DEPENDENCIES=libcurl,expat,zlib,libbz2,libarchive,xz
##export OPTIONALDEPENDENCIES=
##export BUILDDEPENDENCIES=
##export OPTIONALBUILDDEPENDENCIES=
##export VERSION=3.15.5
##export VERSIONDATE=20191031
##export VERSION=3.15.6
##export VERSIONDATE=20191217
##export VERSION=3.15.7
##export VERSIONDATE=20200205
##export VERSION=3.16.0
##export VERSIONDATE=20191127
##export VERSION=3.16.1
##export VERSIONDATE=20191211
##export VERSION=3.16.2
##export VERSIONDATE=20191220
##export VERSION=3.16.3
##export VERSIONDATE=20200122
##export VERSION=3.16.4
##export VERSIONDATE=20200206
##export VERSION=3.16.5
##export VERSIONDATE=20200305
##export VERSION=3.16.6
##export VERSIONDATE=20200411
##export VERSION=3.16.7
##export VERSIONDATE=20200528
##export VERSION=3.16.8
##export VERSIONDATE=20200602
##export VERSION=3.17.0
##export VERSIONDATE=20200321
##export VERSION=3.17.1
##export VERSIONDATE=20200410
##export VERSION=3.17.2
##export VERSIONDATE=20200429
#####Source/cmVSSetupHelper.cxx:332:41: error: 'to_wstring' is not a member of 'std'
##export VERSION=3.17.3
##export VERSIONDATE=20200529
##export VERSION=3.17.4
##export VERSIONDATE=20200731
##export VERSION=3.17.5
##export VERSIONDATE=20200916
##export VERSION=3.18.0
##export VERSIONDATE=20200716
##export VERSION=3.18.1
##export VERSIONDATE=20200731
##export VERSION=3.18.2
##export VERSIONDATE=20200821
##export VERSION=3.18.3
##export VERSIONDATE=20200823
##export VERSION=3.18.4
##export VERSIONDATE=20201007
##export VERSION=3.18.5
##export VERSIONDATE=20201118
##export VERSION=3.18.6
##export VERSIONDATE=20210212
##export VERSION=3.19.0
##export VERSIONDATE=20201118
##export VERSION=3.19.1
##export VERSIONDATE=20201125
##export VERSION=3.19.2
##export VERSIONDATE=20201217
##export VERSION=3.19.3
##export VERSIONDATE=20210114
##export VERSION=3.19.4
##export VERSIONDATE=20210129
##export VERSION=3.19.5
##export VERSIONDATE=20210216
##export VERSION=3.19.6
##export VERSIONDATE=20210225
##export VERSION=3.19.7
##export VERSIONDATE=20210316
#export VERSION=3.19.8
#export VERSIONDATE=20210407
#####The C compiler "D:/Prog/winlibs64-9.2.0/custombuilt/bin/bcc.exe" is not able to compile a simple test program.
#wl-showstatus --package-version
#export DEPENDENCIES=libcurl,libarchive,expat,zlib,libbz2,xz,librhash,libuv,ncurses
##export OPTIONALDEPENDENCIES=jsoncpp
#export OPTIONALDEPENDENCIES=jsoncpp,qt
#export BUILDDEPENDENCIES=ninja,byacc
#export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=Copyright.txt
#export LICENSETYPE=BSD
#export DOWNLOADURL="http://www.cmake.org/cmake/resources/software.html"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL="http://www.cmake.org/files/v`echo $VERSION|sed 's/^\([0-9]*\.[0-9]*\)\..*$/\1/'`/$BASENAME-$VERSION.tar.gz http://www.cmake.org/files/v`echo $VERSION|sed 's/^\([0-9]*\.[0-9]*\)\..*$/\1/'`/cmake-$VERSION-win32-x86.zip"
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#tar xz --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
#cd $BASENAME-$VERSION
### fix invalid conversion from void* to XML_Parser in Source/CPack/WiX/cmWIXPatchParser.cxx (version >= 3.0.0 < 3.8.0)
##mv Source/CPack/WiX/cmWIXPatchParser.cxx Source/CPack/WiX/cmWIXPatchParser.cxx.bak
##sed -e "s/(Parser)/((XML_Parser)Parser)/g" Source/CPack/WiX/cmWIXPatchParser.cxx.bak > Source/CPack/WiX/cmWIXPatchParser.cxx
### fix mode_t not declared in Source/cmGlobalNinjaGenerator.cxx (version >= 3.2.1 < 3.8.0)
##mv Source/cmGlobalNinjaGenerator.cxx Source/cmGlobalNinjaGenerator.cxx.bak
##echo "#include <pthread.h>" > Source/cmGlobalNinjaGenerator.cxx
##cat Source/cmGlobalNinjaGenerator.cxx.bak >> Source/cmGlobalNinjaGenerator.cxx
### fix redefinition of GetCurrentDirectory in Source/cmMakefile.h (version >= 3.1.3 < 3.8.0)
##mv Source/cmMakefile.h Source/cmMakefile.h.bak
##cat > Source/cmMakefile.h << EOF
###include <windows.h>
###undef GetCurrentDirectory
##EOF
##cat Source/cmMakefile.h.bak >> Source/cmMakefile.h
### fix missing FindExecutableW in Source/CTest/cmCTestTestHandler.cxx (version >= 3.2.3 < 3.8.0)
######Source/CTest/cmCTestTestHandler.cxx:1363:10: error: 'FindExecutableW' is not a member of 'cmCTestTestHandler'
##mv Source/CTest/cmCTestTestHandler.cxx Source/CTest/cmCTestTestHandler.cxx.bak
##cat > Source/CTest/cmCTestTestHandler.cxx << EOF
###include <windows.h>
###undef FindExecutable
##EOF
##cat Source/CTest/cmCTestTestHandler.cxx.bak >> Source/CTest/cmCTestTestHandler.cxx
### fix missing FindExecutableW in Source/CTest/cmCTestTestHandler.cxx (version >= 3.2.3 < 3.8.0)
######undefined reference to `cmCTestTestHandler::FindExecutableW
##patch -ulbf Source/CTest/cmCTestTestHandler.h << EOF
##--- Source/CTest/cmCTestTestHandler.h  2015-06-01 17:56:08.000000000 +0200
##+++ Source/CTest/cmCTestTestHandler.h  2015-06-24 22:02:44.444706300 +0200
##@@ -18,2 +18,3 @@
## #include <cmsys/RegularExpression.hxx>
##+#undef FindExecutable
##
##EOF
### fix missing mode_t in Source/cmArchiveWrite.h (version >= 3.4.0 < 3.8.0)
######Source/cmArchiveWrite.h:93:23: error: 'mode_t' has not been declared
##mv Source/cmArchiveWrite.h Source/cmArchiveWrite.h.bak
##echo "#include <sys/stat.h>" > Source/cmArchiveWrite.h
##cat Source/cmArchiveWrite.h.bak >> Source/cmArchiveWrite.h
### fix undefined strcasecmp in Source/kwsys/SystemTools.cxx (version >= 3.6.3 < 3.8.0)
##mv Source/kwsys/SystemTools.cxx Source/kwsys/SystemTools.cxx.bak &&
##sed -e "s/strcasecmp/stricmp/g" Source/kwsys/SystemTools.cxx.bak > Source/kwsys/SystemTools.cxx
## fix missing CLSID in Source/bindexplib.cxx (version >= 3.7.1)
#if ! echo -e "#include<_mingw.h>\nint v=__MINGW64_VERSION_MAJOR;" | ${CC:-gcc} -c -xc - -o /dev/null &> /dev/null; then
# mv Source/bindexplib.cxx Source/bindexplib.cxx.bak &&
# echo "#include <ole2.h>" > Source/bindexplib.cxx &&
# cat Source/bindexplib.cxx.bak >> Source/bindexplib.cxx
#fi
## fix missing _InterlockedOr in Utilities/cmlibuv/src/win/tty.c (version >= 3.7.1)
#if ! echo -e "#include<_mingw.h>\nint v=__MINGW64_VERSION_MAJOR;" | ${CC:-gcc} -c -xc - -o /dev/null &> /dev/null; then
#mv Utilities/cmlibuv/src/win/tty.c Utilities/cmlibuv/src/win/tty.c.bak
#cat > Utilities/cmlibuv/src/win/tty.c << EOF
##include <windows.h>
#LONG _InterlockedOr(LONG volatile *Destination, LONG Value)
#{
#  __asm__ __volatile__("lock ; orl %0,%1" : : "r"(Value),"m"(*Destination) : "memory");
#  return *Destination;
#}
#EOF
#cat Utilities/cmlibuv/src/win/tty.c.bak >> Utilities/cmlibuv/src/win/tty.c
#fi
## fix Source/cmVSSetupHelper.h (version >= 3.8.1)
#if ! echo -e "#include<_mingw.h>\nint v=__MINGW64_VERSION_MAJOR;" | ${CC:-gcc} -c -xc - -o /dev/null &> /dev/null; then
# mv Source/cmVSSetupHelper.h Source/cmVSSetupHelper.h.bak &&
# echo "#include <windows.h>" > Source/cmVSSetupHelper.h &&
# echo "#include <oleauto.h>" >> Source/cmVSSetupHelper.h &&
# echo "#include <oaidl.h>" >> Source/cmVSSetupHelper.h &&
# cat Source/cmVSSetupHelper.h.bak >> Source/cmVSSetupHelper.h
#fi
## fix error: 'to_wstring' is not a member of 'std' in Source/cmVSSetupHelper.cxx (version >= 3.14.0)
#patch -ulbf Source/cmVSSetupHelper.cxx << EOF
#@@ -332 +332,3 @@
#-  std::wstring const wantVersion = std::to_wstring(this->Version) + L'.';
#+  std::string const ver = std::to_string(this->Version) + '.';
#+  std::wstring wantVersion(ver.length(), L' ');
#+  std::copy(ver.begin(), ver.end(), wantVersion.begin());
#EOF
## fix Utilities/cmjsoncpp/src/lib_json/json_writer.cpp (version >= 3.14.3)
#patch -ulbf Utilities/cmjsoncpp/src/lib_json/json_writer.cpp << EOF
#@@ -18,3 +18,3 @@
#
#-#if defined(_MSC_VER) && _MSC_VER >= 1200 && _MSC_VER < 1800 // Between VC++ 6.0 and VC++ 11.0
#+#if (defined(_MSC_VER) && _MSC_VER >= 1200 && _MSC_VER < 1800) || defined(__MINGW32__) // Between VC++ 6.0 and VC++ 11.0
# #include <float.h>
#EOF
### fix Source/LexerParser/cmExprLexer.cxx (version >= 3.14.3)
##patch -ulbf Source/LexerParser/cmExprLexer.cxx << EOF
##@@ -995 +995 @@
##-{ yylvalp->Number = std::stoll(yytext, nullptr, 10); return exp_NUMBER; }
##+{ std::string s(yytext); std::wstring ws(s.length(), L' '); std::copy(s.begin(), s.end(), ws.begin()); yylvalp->Number = std::stoll(ws, nullptr, 10); return exp_NUMBER; }
##@@ -999 +999 @@
##-{  yylvalp->Number = std::stoll(yytext, nullptr, 16); return exp_NUMBER; }
##+{  std::string s(yytext); std::wstring ws(s.length(), L' '); std::copy(s.begin(), s.end(), ws.begin()); yylvalp->Number = std::stoll(ws, nullptr, 16); return exp_NUMBER; }
##EOF
### fix missing std::lround in Source/cmFileCommand.cxx and Source/CTest/cmCTestTestHandler.cxx (version >= 3.14.3)
##sed -i.bak -e "s/std::\(lround\)/\1/g" Source/cmFileCommand.cxx Source/CTest/cmCTestTestHandler.cxx
### fix Source/cmListCommand.cxx (version >= 3.14.4)
##patch -ulbf Source/cmListCommand.cxx << EOF
##@@ -833,4 +833,7 @@
##         try {
##-          value = std::stoi(args[index], &pos);
##-          if (pos != args[index].length()) {
##+          std::string const arg = args[index];
##+          std::wstring warg(arg.length(), L' ');
##+          std::copy(arg.begin(), arg.end(), warg.begin());
##+          value = std::stoi(warg, &pos);
##+          if (pos != warg.length()) {
##             // this is not a number, stop processing
##@@ -871,4 +874,7 @@
##
##-        start = std::stoi(args[index], &pos);
##-        if (pos != args[index].length()) {
##+        std::string const arg = args[index];
##+        std::wstring warg(arg.length(), L' ');
##+        std::copy(arg.begin(), arg.end(), warg.begin());
##+        start = std::stoi(warg, &pos);
##+        if (pos != warg.length()) {
##           // this is not a number
##@@ -876,4 +882,7 @@
##         } else {
##-          stop = std::stoi(args[++index], &pos);
##-          if (pos != args[index].length()) {
##+          std::string const arg = args[++index];
##+          std::wstring warg(arg.length(), L' ');
##+          std::copy(arg.begin(), arg.end(), warg.begin());
##+          stop = std::stoi(warg, &pos);
##+          if (pos != warg.length()) {
##             // this is not a number
##@@ -896,4 +905,7 @@
##
##-          step = std::stoi(args[index], &pos);
##-          if (pos != args[index].length()) {
##+          std::string const arg = args[index];
##+          std::wstring warg(arg.length(), L' ');
##+          std::copy(arg.begin(), arg.end(), warg.begin());
##+          step = std::stoi(warg, &pos);
##+          if (pos != warg.length()) {
##             // this is not a number
##EOF
### fix Source/cmVSSetupHelper.cxx (version >= 3.14.4)
##patch -ulbf Source/cmVSSetupHelper.cxx << EOF
##@@ -304,3 +304,6 @@
##     chosenInstanceInfo.VCToolsetVersion = envVSVersion;
##-    chosenInstanceInfo.ullVersion = std::stoi(envVSVersion);
##+    std::string const ver = envVSVersion;
##+    std::wstring wver(ver.length(), L' ');
##+    std::copy(ver.begin(), ver.end(), wver.begin());
##+    chosenInstanceInfo.ullVersion = std::stoi(wver);
##     chosenInstanceInfo.IsWin10SDKInstalled = true;
##EOF
### fix issue detecting compiler when using Ninja generator in Modules/CMakeDetermineCompiler.cmake (version >= 3.18.0)
###### Solved by removing bcc.exe from package dev86 from the PATH
##patch -ulbf Modules/CMakeDetermineCompiler.cmake << EOF
##@@ -55,3 +55,3 @@
##   endif()
##-  if(CMAKE_HOST_WIN32 AND CMAKE_GENERATOR MATCHES "Ninja")
##+  if(FALSE)
##     # On Windows command-line builds, the Makefile generators each imply
##EOF
### build static version
##for F in $(grep -l "add_library.* SHARED " $(find . -name CMakeLists.txt)); do
## mv $F $F.bak &&
## sed -e "s/\(add_library.* \)SHARED /\1/" $F.bak > $F
##done
## install a pre-built CMake if not available yet
#(( which cmake.exe &> /dev/null && cmake.exe --version &> /dev/null ) || unzip -oq $TARBALLDIR/$BASENAME/cmake-$VERSION-win32-x86.zip -d win32bin ) &&
#mkdir -p build_win &&
# wl-showstatus configure &&
# #PATH=$(pwd)/win32bin/cmake-$VERSION-win32-x86/bin:$PATH cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_QtDialog:BOOL=OFF -DBUILD_TESTING:BOOL=OFF -DCMAKE_USE_SYSTEM_BZIP2:BOOL=ON -DCMAKE_USE_SYSTEM_CURL:BOOL=ON -DCMAKE_USE_SYSTEM_EXPAT:BOOL=ON -DCMAKE_USE_SYSTEM_LIBARCHIVE:BOOL=ON -DCMAKE_USE_SYSTEM_ZLIB:BOOL=ON -S. -Bbuild_win &&
# #PATH=$(pwd)/win32bin/cmake-$VERSION-win32-x86/bin:$PATH cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_QtDialog:BOOL=OFF -DBUILD_TESTING:BOOL=OFF -DCMAKE_USE_SYSTEM_BZIP2:BOOL=ON -DBZIP2_INCLUDE_DIR:PATH=$MINGWPREFIX/include -DCMAKE_USE_SYSTEM_CURL:BOOL=ON -DCURL_INCLUDE_DIR:PATH=$MINGWPREFIX/include -DCURL_LIBRARY:FILEPATH=$MINGWPREFIX/lib/libcurl.dll.a -DCMAKE_USE_SYSTEM_EXPAT:BOOL=ON -DEXPAT_INCLUDE_DIR:PATH=$MINGWPREFIX/include -DCMAKE_USE_SYSTEM_LIBARCHIVE:BOOL=ON -DLibArchive_INCLUDE_DIR:PATH=$MINGWPREFIX/include -DLibArchive_LIBRARY:FILEPATH=$MINGWPREFIX/lib/libarchive.dll.a -DCMAKE_USE_SYSTEM_ZLIB:BOOL=ON -DZLIB_INCLUDE_DIR:PATH=$MINGWPREFIX/include -DZLIB_LIBRARY:FILEPATH=$MINGWPREFIX/lib/libz.dll.a -S. -Bbuild_win &&
# #PATH=$(pwd)/win32bin/cmake-$VERSION-win32-x86/bin:$PATH cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_QtDialog:BOOL=OFF -DBUILD_TESTING:BOOL=OFF -DCMAKE_USE_SYSTEM_BZIP2:BOOL=ON -DBZIP2_INCLUDE_DIR:PATH=$MINGWPREFIX/include -DCMAKE_USE_SYSTEM_CURL:BOOL=ON -DCURL_INCLUDE_DIR:PATH=$MINGWPREFIX/include -DCURL_LIBRARY:FILEPATH=$MINGWPREFIX/lib/libcurl.dll.a -DCMAKE_USE_SYSTEM_EXPAT:BOOL=ON -DEXPAT_INCLUDE_DIR:PATH=$MINGWPREFIX/include -DCMAKE_USE_SYSTEM_LIBARCHIVE:BOOL=ON -DLibArchive_INCLUDE_DIR:PATH=$MINGWPREFIX/include -DLibArchive_LIBRARY:FILEPATH=$MINGWPREFIX/lib/libarchive.dll.a -DCMAKE_USE_SYSTEM_ZLIB:BOOL=ON -DZLIB_INCLUDE_DIR:PATH=$MINGWPREFIX/include -DZLIB_LIBRARY:FILEPATH=$MINGWPREFIX/lib/libz.dll.a -DCMAKE_USE_SYSTEM_LIBLZMA:BOOL=ON -DLIBLZMA_INCLUDE_DIR:PATH=$MINGWPREFIX/include -DLIBLZMA_LIBRARY:FILEPATH=$MINGWPREFIX/lib/liblzma.dll.a -DCMAKE_EXE_LINKER_FLAGS:STRING="-static-libgcc -static-libstdc++" -DCMAKE_MODULE_LINKER_FLAGS:STRING="-static-libgcc -static-libstdc++" -S. -Bbuild_win &&
# #PATH=$(pwd)/win32bin/cmake-$VERSION-win32-x86/bin:$PATH cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_QtDialog:BOOL=OFF -DBUILD_TESTING:BOOL=OFF -DCMAKE_USE_SYSTEM_BZIP2:BOOL=ON -DBZIP2_INCLUDE_DIR:PATH=$MINGWPREFIX/include -DCMAKE_USE_SYSTEM_CURL:BOOL=ON -DCURL_INCLUDE_DIR:PATH=$MINGWPREFIX/include -DCURL_LIBRARY:FILEPATH=$MINGWPREFIX/lib/libcurl.dll.a -DCMAKE_USE_SYSTEM_EXPAT:BOOL=ON -DEXPAT_INCLUDE_DIR:PATH=$MINGWPREFIX/include -DCMAKE_USE_SYSTEM_LIBARCHIVE:BOOL=ON -DLibArchive_INCLUDE_DIR:PATH=$MINGWPREFIX/include -DLibArchive_LIBRARY:FILEPATH=$MINGWPREFIX/lib/libarchive.dll.a -DCMAKE_USE_SYSTEM_ZLIB:BOOL=ON -DZLIB_INCLUDE_DIR:PATH=$MINGWPREFIX/include -DZLIB_LIBRARY:FILEPATH=$MINGWPREFIX/lib/libz.dll.a -DCMAKE_USE_SYSTEM_LIBLZMA:BOOL=ON -DLIBLZMA_INCLUDE_DIR:PATH=$MINGWPREFIX/include -DLIBLZMA_LIBRARY:FILEPATH=$MINGWPREFIX/lib/liblzma.dll.a -S. -Bbuild_win &&
# #PATH=$(pwd)/win32bin/cmake-$VERSION-win32-x86/bin:$PATH cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_QtDialog:BOOL=OFF -DBUILD_TESTING:BOOL=OFF -DCMAKE_USE_SYSTEM_BZIP2:BOOL=ON -DBZIP2_INCLUDE_DIR:PATH=$MINGWPREFIX/include -DCMAKE_USE_SYSTEM_CURL:BOOL=ON -DCURL_INCLUDE_DIR:PATH=$MINGWPREFIX/include -DCURL_LIBRARY:FILEPATH=$MINGWPREFIX/lib/libcurl.dll.a -DCMAKE_USE_SYSTEM_EXPAT:BOOL=ON -DEXPAT_INCLUDE_DIR:PATH=$MINGWPREFIX/include -DCMAKE_USE_SYSTEM_LIBARCHIVE:BOOL=ON -DLibArchive_INCLUDE_DIR:PATH=$MINGWPREFIX/include -DLibArchive_LIBRARY:FILEPATH=$MINGWPREFIX/lib/libarchive.dll.a -DCMAKE_USE_SYSTEM_ZLIB:BOOL=ON -DZLIB_INCLUDE_DIR:PATH=$MINGWPREFIX/include -DZLIB_LIBRARY:FILEPATH=$MINGWPREFIX/lib/libz.dll.a -DCMAKE_USE_SYSTEM_LIBLZMA:BOOL=ON -DLIBLZMA_INCLUDE_DIR:PATH=$MINGWPREFIX/include -DLIBLZMA_LIBRARY:FILEPATH=$MINGWPREFIX/lib/liblzma.dll.a -DBISON_EXECUTABLE=$(which byacc.exe) -S. -Bbuild_win &&
# #PATH=$(pwd)/win32bin/cmake-$VERSION-win32-x86/bin:$PATH cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_QtDialog:BOOL=OFF -DCMAKE_USE_SYSTEM_FORM:BOOL=ON -DBUILD_TESTING:BOOL=OFF -DCMAKE_USE_SYSTEM_CURL:BOOL=ON -DCMAKE_USE_SYSTEM_EXPAT:BOOL=ON -DCMAKE_USE_SYSTEM_LIBARCHIVE:BOOL=ON -DCMAKE_USE_SYSTEM_ZLIB:BOOL=ON -DCMAKE_USE_SYSTEM_BZIP2:BOOL=ON -DCMAKE_USE_SYSTEM_LIBLZMA:BOOL=ON -DCMAKE_USE_SYSTEM_JSONCPP:BOOL=$(if pkg-config --exists jsoncpp; then echo "ON"; else echo "OFF"; fi) -DCMAKE_USE_SYSTEM_FORM:BOOL=ON -DCMAKE_USE_SYSTEM_LIBRHASH:BOOL=ON -DCMAKE_USE_SYSTEM_LIBUV:BOOL=ON -DBUILD_TESTING:BOOL=OFF -S. -Bbuild_win &&
# PATH=$(pwd)/win32bin/cmake-$VERSION-win32-x86/bin:$MINGWPREFIX/qt/bin:$PATH QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_QtDialog:BOOL=$(if [ -f $MINGWPREFIX/qt/lib/libQt5Core.a ]; then echo "ON"; else echo "OFF"; fi) -DCMAKE_USE_SYSTEM_FORM:BOOL=ON -DBUILD_TESTING:BOOL=OFF -DCMAKE_USE_SYSTEM_CURL:BOOL=ON -DCMAKE_USE_SYSTEM_EXPAT:BOOL=ON -DCMAKE_USE_SYSTEM_LIBARCHIVE:BOOL=ON -DCMAKE_USE_SYSTEM_ZLIB:BOOL=ON -DCMAKE_USE_SYSTEM_BZIP2:BOOL=ON -DCMAKE_USE_SYSTEM_LIBLZMA:BOOL=ON -DCMAKE_USE_SYSTEM_JSONCPP:BOOL=$(if pkg-config --exists jsoncpp; then echo "ON"; else echo "OFF"; fi) -DCMAKE_USE_SYSTEM_FORM:BOOL=ON -DCMAKE_USE_SYSTEM_LIBRHASH:BOOL=ON -DCMAKE_USE_SYSTEM_LIBUV:BOOL=ON -DBUILD_TESTING:BOOL=OFF -S. -Bbuild_win &&
# ## fix crash on install
# #sed -i.bak -e "s/^\(\t\)bin\/cmake\.exe/\1\$(CMAKE_COMMAND)/" build_win/Makefile &&
# wl-showstatus build-install &&
# #( make -Cbuild_win install/strip || make -Cbuild_win install ) &&
# ninja -Cbuild_win install/strip &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
##PATH=$MINGWPREFIX/qt/bin:$PATH cmake-gui.exe



export NAME="CMake"
export STATUS=
export URL=http://www.cmake.org/
export BASENAME=cmake
export DESCRIPTION="Welcome to CMake, the cross-platform, open-source build system. CMake is a family of tools designed to build, test and package software. CMake is used to control the software compilation process using simple platform and compiler independent configuration files. CMake generates native makefiles and workspaces that can be used in the compiler environment of your choice."
export CATEGORY=build
export TYPE=application
#export VERSION=3.20.0
#export VERSIONDATE=20210324
#export VERSION=3.20.1
#export VERSIONDATE=20210409
#export VERSION=3.20.2
#export VERSIONDATE=20210430
#export VERSION=3.20.3
#export VERSIONDATE=20210528
#export VERSION=3.20.4
#export VERSIONDATE=20210615
#export VERSION=3.20.5
#export VERSIONDATE=20210622
#export VERSION=3.20.6
#export VERSIONDATE=20210921
#export VERSION=3.21.0
#export VERSIONDATE=20210715
#export VERSION=3.21.1
#export VERSIONDATE=20210728
#export VERSION=3.21.2
#export VERSIONDATE=20210826
#export VERSION=3.21.3
#export VERSIONDATE=20210921
#export VERSION=3.21.4
#export VERSIONDATE=20211028
#export VERSION=3.21.5
#export VERSIONDATE=20220202
#export VERSION=3.21.6
#export VERSIONDATE=20220305
#export VERSION=3.22.0
#export VERSIONDATE=20211119
#export VERSION=3.22.1
#export VERSIONDATE=20211208
#export VERSION=3.22.2
#export VERSIONDATE=20220126
#export VERSION=3.22.3
#export VERSIONDATE=20220305
#export VERSION=3.22.4
#export VERSIONDATE=20220413
#export VERSION=3.22.5
#export VERSIONDATE=20220602
#export VERSION=3.22.6
#export VERSIONDATE=20220729
#export VERSION=3.23.0
#export VERSIONDATE=20220330
#export VERSION=3.23.1
#export VERSIONDATE=20220413
#export VERSION=3.23.2
#export VERSIONDATE=20220526
#export VERSION=3.23.3
#export VERSIONDATE=20220729
#export VERSION=3.23.4
#export VERSIONDATE=20221005
#export VERSION=3.23.5
#export VERSIONDATE=20221102
#export VERSION=3.24.0
#export VERSIONDATE=20220805
#export VERSION=3.24.1
#export VERSIONDATE=20220818
#export VERSION=3.24.2
#export VERSIONDATE=20220914
#export VERSION=3.24.3
#export VERSIONDATE=20221102
#export VERSION=3.24.4
#export VERSIONDATE=20230309
#export VERSION=3.25.0
#export VERSIONDATE=20221117
#export DEPENDENCIES=libcurl,libarchive,expat,zlib,libbz2,xz,librhash,libuv,ncurses
#export OPTIONALDEPENDENCIES=jsoncpp,qt
#export BUILDDEPENDENCIES=ninja,byacc
#export OPTIONALBUILDDEPENDENCIES=
#export VERSION=3.25.1
#export VERSIONDATE=20221201
#export VERSION=3.25.2
#export VERSIONDATE=20221220
#export VERSION=3.25.3
#export VERSIONDATE=20230309
#export VERSION=3.26.0
#export VERSIONDATE=20230315
#export VERSION=3.26.1
#export VERSIONDATE=20230324
#export VERSION=3.26.2
#export VERSIONDATE=20230330
#export VERSION=3.26.3
#export VERSIONDATE=20230405
#export VERSION=3.26.4
#export VERSIONDATE=20230419
#export VERSION=3.26.5
#export VERSIONDATE=20230720
#export VERSION=3.27.0
#export VERSIONDATE=20230719
#export VERSION=3.27.1
#export VERSIONDATE=20230726
export VERSION=3.27.2
export VERSIONDATE=20230811
####Source/kwsys/SystemTools.cxx:3091:13: error: 'SYMBOLIC_LINK_FLAG_DIRECTORY' was not declared in this scope
wl-showstatus --package-version
export DEPENDENCIES=libcurl,libarchive,expat,zlib,libbz2,xz,librhash,libuv,ncurses
export OPTIONALDEPENDENCIES=jsoncpp,qt6
export BUILDDEPENDENCIES=ninja,byacc
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=Copyright.txt
export LICENSETYPE=BSD
export DOWNLOADURL="http://www.cmake.org/cmake/resources/software.html"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL="https://github.com/Kitware/CMake/releases/download/v$VERSION/$BASENAME-$VERSION.tar.gz https://github.com/Kitware/CMake/releases/download/v$VERSION/cmake-$VERSION-windows-$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "x86_64"; else echo "i386"; fi).zip"
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
tar xz --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
cd $BASENAME-$VERSION
## fix Source/kwsys/SystemTools.cxx (version >= 3.21.0 <= 3.22.3)
#patch -ulbf Source/kwsys/SystemTools.cxx << EOF
#@@ -1 +1,6 @@
#+#if !defined(_WIN32_WINNT) || _WIN32_WINNT < 0x0600
#+#undef _WIN32_WINNT
#+#define _WIN32_WINNT 0x0600
#+#endif
#+#include "../../Utilities/cmlibuv/src/win/winapi.h"
# /* Distributed under the OSI-approved BSD 3-Clause License.  See accompanying
#@@ -89,3 +94,3 @@
# // Windows API.
#-#if defined(_WIN32)
#+#if defined(_WIN32) && !defined(__MINGW32__)
# #  include <windows.h>
#EOF
## fix issue with GetAppExecLink() in Source/kwsys/SystemTools.cxx (version >= 3.23.0)
##### Bug reported: https://discourse.cmake.org/t/cmake-3-23-0-build-with-mingw-w64-fails-with-getappexeclink-issue/5330
#patch -ulbf Source/kwsys/SystemTools.cxx << EOF
#@@ -102,5 +102,6 @@
# // Windows API.
#-#if defined(_WIN32) && !defined(__MINGW32__)
#+#if defined(_WIN32) && !defined(__CYGWIN__)
# #  include <windows.h>
# #  include <winioctl.h>
#+# if !defined(__MINGW32__)
# #  ifndef INVALID_FILE_ATTRIBUTES
#@@ -158,2 +159,3 @@
# } REPARSE_DATA_BUFFER, *PREPARSE_DATA_BUFFER;
#+# endif
#
#@@ -162,2 +164,3 @@
# {
#+# if !defined(__MINGW32__)
#   // We only know the layout of version 3.
#@@ -166,2 +169,3 @@
#   }
#+# endif
#
#EOF
## fix error expected unqualified-id in Utilities/cmjsoncpp/src/lib_json/json_value.cpp (version >= 3.22.3)
#patch -ulbf Utilities/cmjsoncpp/src/lib_json/json_value.cpp << EOF
#@@ -815,3 +815,3 @@
#     // According to JavaScript language zero or NaN is regarded as false
#-    const auto value_classification = std::fpclassify(value_.real_);
#+    const auto value_classification = fpclassify(value_.real_);
#     return value_classification != FP_ZERO && value_classification != FP_NAN;
#EOF
# fix issue when building with clang in Utilities/cmjsoncpp/src/lib_json/json_value.cpp (version >= 3.22.1)
####Utilities/cmjsoncpp/src/lib_json/json_value.cpp:816:44: error: expected unqualified-id
if echo $CXX|grep -q clang++; then
patch -ulbf Utilities/cmjsoncpp/src/lib_json/json_value.cpp << EOF
@@ -815,4 +815,3 @@
     // According to JavaScript language zero or NaN is regarded as false
-    const auto value_classification = std::fpclassify(value_.real_);
-    return value_classification != FP_ZERO && value_classification != FP_NAN;
+    return value_.real_ != 0 && !isnan(value_.real_);
   }
EOF
fi
# fix Utilities/cmjsoncpp/src/lib_json/json_value.cpp (version >= 3.25.1)
patch -ulbf Utilities/cmjsoncpp/src/lib_json/json_value.cpp << EOF
@@ -815,3 +815,3 @@
     // According to JavaScript language zero or NaN is regarded as false
-    return value_.real_ != 0 && !isnan(value_.real_);
+    return value_.real_ != 0 && !_isnan(value_.real_);
   }
EOF
# avoid undefined SIGWINCH in Source/CursesDialog/ccmake.cxx (version >= 3.22.1)
patch -ulbf Source/CursesDialog/ccmake.cxx << EOF
@@ -77,3 +77,5 @@
   }
+#ifdef SIGWINCH
   signal(SIGWINCH, onsig);
+#endif
 }
@@ -145,3 +147,5 @@

+#ifdef SIGWINCH
   signal(SIGWINCH, onsig);
+#endif

EOF
## escape backslashes in pkg-config output in Modules/FindPkgConfig.cmake (version >= 3.22.2 <= 3.24.1)
#patch -ulf Modules/FindPkgConfig.cmake << EOF
#@@ -144,4 +144,6 @@
#     endif()
#
#+    string(REGEX REPLACE "\\\\\\\\" "/" _pkgconfig_invoke_result "\${_pkgconfig_invoke_result}")
#+
#     separate_arguments(_pkgconfig_invoke_result)
#EOF
# escape backslashes in pkg-config output in Modules/FindPkgConfig.cmake (version >= 3.24.2)
patch -ulf Modules/FindPkgConfig.cmake << EOF
@@ -145,2 +145,4 @@

+    string(REGEX REPLACE "\\\\\\\\" "/" _pkgconfig_invoke_result "\${_pkgconfig_invoke_result}")
+
     # pkg-config can represent "spaces within an argument" by backslash-escaping the space.
EOF
# allow building ccmake in CMakeLists.txt (version >= 3.22.1)
patch -ulfb CMakeLists.txt << EOF
@@ -667,3 +667,3 @@
   # Use curses?
-  if (UNIX)
+  if (UNIX OR MINGW)
     if(NOT DEFINED BUILD_CursesDialog)
EOF
# install a pre-built CMake if not available yet
(( which cmake.exe &> /dev/null && cmake.exe --version &> /dev/null ) || ( echo Copying prebuilt binary && unzip -oq $TARBALLDIR/$BASENAME/cmake-$VERSION-windows-$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "x86_64"; else echo "i386"; fi).zip -d win32bin )) &&
mkdir -p build_win &&
 wl-showstatus configure &&
 #PATH=$PWD/win32bin/cmake-$VERSION-windows-$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "x86_64"; else echo "i386"; fi)/bin:$PATH cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DCMake_BUILD_LTO:BOOL=OFF -DBUILD_QtDialog:BOOL=OFF -DCMAKE_USE_SYSTEM_FORM:BOOL=ON -DCMAKE_USE_SYSTEM_CURL:BOOL=ON -DCMAKE_USE_SYSTEM_EXPAT:BOOL=ON -DCMAKE_USE_SYSTEM_LIBARCHIVE:BOOL=ON -DCMAKE_USE_SYSTEM_ZLIB:BOOL=ON -DCMAKE_USE_SYSTEM_BZIP2:BOOL=ON -DCMAKE_USE_SYSTEM_LIBLZMA:BOOL=ON -DCMAKE_USE_SYSTEM_JSONCPP:BOOL=$(if pkg-config --exists jsoncpp; then echo "ON"; else echo "OFF"; fi) -DCMAKE_USE_SYSTEM_LIBRHASH:BOOL=ON -DCMAKE_USE_SYSTEM_LIBUV:BOOL=ON -DBUILD_TESTING:BOOL=OFF -S. -Bbuild_win &&
 #PATH=$PWD/win32bin/cmake-$VERSION-windows-$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "x86_64"; else echo "i386"; fi)/bin:$MINGWPREFIX/qt/bin:$PATH QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DCMake_BUILD_LTO:BOOL=OFF -DBUILD_QtDialog:BOOL=$(if [ -f $MINGWPREFIX/qt/lib/libQt5Core.a ]; then echo "ON"; else echo "OFF"; fi) -DCMAKE_USE_SYSTEM_FORM:BOOL=ON -DCMAKE_USE_SYSTEM_CURL:BOOL=ON -DCMAKE_USE_SYSTEM_EXPAT:BOOL=ON -DCMAKE_USE_SYSTEM_LIBARCHIVE:BOOL=ON -DCMAKE_USE_SYSTEM_ZLIB:BOOL=ON -DCMAKE_USE_SYSTEM_BZIP2:BOOL=ON -DCMAKE_USE_SYSTEM_LIBLZMA:BOOL=ON -DCMAKE_USE_SYSTEM_JSONCPP:BOOL=$(if pkg-config --exists jsoncpp; then echo "ON"; else echo "OFF"; fi) -DCMAKE_USE_SYSTEM_LIBRHASH:BOOL=ON -DCMAKE_USE_SYSTEM_LIBUV:BOOL=ON -DBUILD_TESTING:BOOL=OFF -S. -Bbuild_win &&
 #PATH=$PWD/win32bin/cmake-$VERSION-windows-$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "x86_64"; else echo "i386"; fi)/bin:$MINGWPREFIX/qt/bin:$PATH QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DCMake_BUILD_LTO:BOOL=OFF -DBUILD_QtDialog:BOOL=$(if [ -f $MINGWPREFIX/qt/lib/libQt5Core.a ]; then echo "ON"; else echo "OFF"; fi) -DCMAKE_USE_SYSTEM_FORM:BOOL=ON -DCMAKE_USE_SYSTEM_CURL:BOOL=ON -DCMAKE_USE_SYSTEM_EXPAT:BOOL=ON -DCMAKE_USE_SYSTEM_LIBARCHIVE:BOOL=ON -DCMAKE_USE_SYSTEM_ZLIB:BOOL=ON -DCMAKE_USE_SYSTEM_BZIP2:BOOL=ON -DCMAKE_USE_SYSTEM_LIBLZMA:BOOL=ON -DCMAKE_USE_SYSTEM_JSONCPP:BOOL=$(if pkg-config --exists jsoncpp; then echo "ON"; else echo "OFF"; fi) -DCMAKE_USE_SYSTEM_LIBRHASH:BOOL=ON -DCMAKE_USE_SYSTEM_LIBUV:BOOL=ON -DSPHINX_EXECUTABLE:FILEPATH= -DBUILD_TESTING:BOOL=OFF -S. -Bbuild_win &&
 #PATH=$PWD/win32bin/cmake-$VERSION-windows-$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "x86_64"; else echo "i386"; fi)/bin:$MINGWPREFIX/qt/bin:$PATH QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DCMake_BUILD_LTO:BOOL=OFF -DBUILD_QtDialog:BOOL=$(if [ -f $MINGWPREFIX/qt/lib/libQt5Core.a ]; then echo "ON"; else echo "OFF"; fi) -DCMAKE_USE_SYSTEM_FORM:BOOL=ON -DCMAKE_USE_SYSTEM_CURL:BOOL=ON -DCMAKE_USE_SYSTEM_EXPAT:BOOL=ON -DCMAKE_USE_SYSTEM_LIBARCHIVE:BOOL=ON -DCMAKE_USE_SYSTEM_ZLIB:BOOL=ON -DCMAKE_USE_SYSTEM_BZIP2:BOOL=ON -DCMAKE_USE_SYSTEM_LIBLZMA:BOOL=ON -DCMAKE_USE_SYSTEM_JSONCPP:BOOL=$(if pkg-config --exists jsoncpp; then echo "ON"; else echo "OFF"; fi) -DCMAKE_USE_SYSTEM_LIBRHASH:BOOL=ON -DCMAKE_USE_SYSTEM_LIBUV:BOOL=ON -DSPHINX_EXECUTABLE:FILEPATH= -DBUILD_TESTING:BOOL=OFF -DCMAKE_C_FLAGS:STRING="$(if $CXX --version 2> /dev/null | grep -q clang; then echo "-femulated-tls"; fi)" -DCMAKE_CXX_FLAGS:STRING="$(if $CXX --version 2> /dev/null | grep -q clang; then echo "-femulated-tls"; fi)" -S. -Bbuild_win &&
 PATH=$PWD/win32bin/cmake-$VERSION-windows-$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "x86_64"; else echo "i386"; fi)/bin:$MINGWPREFIX/qt6/bin:$PATH QTDIR=$MINGWPREFIX/qt6 QMAKESPEC=$MINGWPREFIX/qt6/mkspecs/win32-g++ cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DCMake_BUILD_LTO:BOOL=OFF -DBUILD_CursesDialog:BOOL=ON -DBUILD_QtDialog:BOOL=$(if [ -f $MINGWPREFIX/qt6/lib/libQt6Core.a ]; then echo "ON"; else echo "OFF"; fi) -DCMAKE_USE_SYSTEM_FORM:BOOL=ON -DCMAKE_USE_SYSTEM_CURL:BOOL=ON -DCMAKE_USE_SYSTEM_EXPAT:BOOL=ON -DCMAKE_USE_SYSTEM_LIBARCHIVE:BOOL=ON -DCMAKE_USE_SYSTEM_ZLIB:BOOL=ON -DCMAKE_USE_SYSTEM_BZIP2:BOOL=ON -DCMAKE_USE_SYSTEM_LIBLZMA:BOOL=ON -DCMAKE_USE_SYSTEM_JSONCPP:BOOL=$(if pkg-config --exists jsoncpp; then echo "ON"; else echo "OFF"; fi) -DCMAKE_USE_SYSTEM_LIBRHASH:BOOL=ON -DCMAKE_USE_SYSTEM_LIBUV:BOOL=ON -DSPHINX_EXECUTABLE:FILEPATH= -DCMake_RUN_IWYU:BOOL=OFF -DBUILD_TESTING:BOOL=OFF -DCMAKE_C_FLAGS:STRING="$(if $CXX --version 2> /dev/null | grep -q clang; then echo "-femulated-tls"; fi)" -DCMAKE_CXX_FLAGS:STRING="$(if $CXX --version 2> /dev/null | grep -q clang; then echo "-femulated-tls"; fi)" -S. -Bbuild_win &&
 ## fix linking against libcurl (version >= 3.21.0 <= 3.22.0)
 #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*-ladvapi32/& -Wl,--as-needed -lcurl/" build_win/build.ninja &&
 ## fix missing libraries (version >= 3.25.2 <= 3.26.3)
 #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*-ladvapi32/& -Wl,--as-needed -liphlpapi -luserenv/" build_win/build.ninja &&
 # fix missing libraries (version >= 3.26.4)
 sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*-ladvapi32/& -Wl,--as-needed -lws2_32 -liphlpapi -luserenv -ldbghelp/" build_win/build.ninja &&
 ## fix clang++ build
 #if $CXX --version 2> /dev/null | grep -q clang; then
 # sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -femulated-tls/" build_win/build.ninja
 #fi &&
 wl-showstatus build-install &&
 ninja -Cbuild_win install/strip &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
#PATH=$MINGWPREFIX/qt/bin:$PATH cmake-gui.exe
#PATH=$MINGWPREFIX/qt6/bin:$PATH cmake-gui.exe




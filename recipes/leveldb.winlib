#export NAME="LevelDB"
#export STATUS=
#export URL=https://github.com/google/leveldb
#export BASENAME=leveldb
#export DESCRIPTION="LevelDB is a fast key-value storage library written at Google that provides an ordered mapping from string keys to string values."
#export CATEGORY=database
#export TYPE=library
##export VERSION=1.18
##export VERSIONDATE=20151208
##export VERSION=1.19
##export VERSIONDATE=20160812
#####port/port_posix.h:38:22: fatal error: endian.h: No such file or directory
#####util/env_posix.cc:13:26: fatal error: sys/resource.h: No such file or directory
#export VERSION=1.20
#export VERSIONDATE=20170320
#####util/crc32c.cc:(.text+0x204): undefined reference to `leveldb::port::AcceleratedCRC32C(unsigned int, char const*, unsigned long long)'
#wl-showstatus --package-version
#export DEPENDANCIES=pthreads,snappy
#export OPTIONALDEPENDANCIES=
#export BUILDDEPENDANCIES=
#export LICENSEFILE=LICENSE
#export LICENSETYPE=
#export DOWNLOADURL="https://github.com/google/leveldb/releases v"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
##export DOWNLOADSOURCEURL=https://github.com/google/leveldb/archive/v$VERSION.tar.gz
#export DOWNLOADSOURCEURL=https://github.com/google/leveldb/archive/$VERSION.tar.gz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
##mv $TARBALLDIR/$BASENAME/v$VERSION.tar.gz $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
#wl-wait4deps
#wl-showstatus extract
##tar xfz $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
##tar xfz $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
#tar xfz $TARBALLDIR/$BASENAME/$VERSION.tar.gz
#cd $BASENAME-$VERSION
## fix missing files
#mkdir -p winfix
#cat > winfix/endian.h << EOF
##define __LITTLE_ENDIAN 1234
##define __BYTE_ORDER __LITTLE_ENDIAN
#EOF
## fix util/env_posix.cc
#####Note: this breaks file locking
#####To do: proper file locking
#patch -ulbf util/env_posix.cc << EOF
#@@ -12,3 +12,5 @@
# #include <sys/mman.h>
#+#ifndef _WIN32
# #include <sys/resource.h>
#+#endif
# #include <sys/stat.h>
#@@ -28,2 +30,19 @@
# #include "util/env_posix_test_helper.h"
#+#ifdef _WIN32
#+#include <sys/types.h>
#+#include <unistd.h>
#+inline ssize_t pread (int fd, void* buf, size_t count, off_t offset)
#+{
#+  ssize_t result;
#+  off_t oldpos = lseek (fd, 0, SEEK_CUR);
#+  lseek(fd, offset, SEEK_SET);
#+  result = read(fd, buf, count);
#+  lseek(fd, oldpos, SEEK_SET);
#+  return result;
#+}
#+#define mkdir(dir,mask) mkdir(dir)
#+#define fsync(fd) _commit(fd)
#+#define fdatasync(fd) _commit(fd)
#+#define geteuid() 0
#+#endif
#
#@@ -291,2 +310,5 @@
# static int LockOrUnlock(int fd, bool lock) {
#+#ifdef _WIN32
#+  return -1;
#+#else
#   errno = 0;
#@@ -299,2 +321,3 @@
#   return fcntl(fd, F_SETLK, &f);
#+#endif
# }
#@@ -588,2 +611,5 @@
#   }
#+#if _WIN32
#+  return 50;
#+#else
#   struct rlimit rlim;
#@@ -599,2 +625,3 @@
#   return open_read_only_file_limit;
#+#endif
# }
#EOF
## fix build_detect_platform
#patch -ulbf build_detect_platform << EOF
#@@ -160,4 +160,13 @@
#         PLATFORM_SHARED_VERSIONED=
#         ;;
#+    MSYS*|MINGW*)
#+        PLATFORM=OS_LINUX
#+        COMMON_FLAGS="\$MEMCMP_FLAG -lpthread -DOS_LINUX -DCYGWIN -I$MINGWPREFIX/include/mman-win32 -I$(pwd)/winfix"
#+        PLATFORM_LDFLAGS="-lpthread"
#+        PORT_FILE=port/port_posix.cc
#+       PLATFORM_SHARED_CFLAGS=
#+        PLATFORM_SHARED_EXT=dll
#+        PLATFORM_SHARED_LDFLAGS="-shared -Wl,-no-undefined"
#+        ;;
#     *)
#         echo "Unknown platform!" >&2
#@@ -226,4 +235,7 @@
#     # Test if gcc SSE 4.2 is supported
#     \$CXX \$CXXFLAGS -x c++ - -o \$CXXOUTPUT -msse4.2 2>/dev/null  <<EOF
#+      #ifndef __SSE4_2__
#+      #error "We need SSE 4.2"
#+      #endif
#       int main() {}
# EOF
#@@ -234,4 +246,5 @@
#     rm -f \$CXXOUTPUT 2>/dev/null
# fi
#+PLATFORM_LIBS="\$PLATFORM_LIBS -Wl,--as-needed -lmman"
#
# # Use the SSE 4.2 CRC32C intrinsics iff runtime checks indicate compiler supports them.
#EOF
#wl-showstatus build &&
# make CC="gcc -msse4.2" &&
# wl-showstatus build-install &&
# make install INSTALL_PATH=$INSTALLPREFIX &&
#    echo OK
## wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION



export NAME="LevelDB"
export STATUS=
export URL=https://github.com/google/leveldb
export BASENAME=leveldb
export DESCRIPTION="LevelDB is a fast key-value storage library written at Google that provides an ordered mapping from string keys to string values."
export CATEGORY=database
export TYPE=library
#export VERSION=1.21
#export VERSIONDATE=20190330
#export VERSION=1.22
#export VERSIONDATE=20190504
export VERSION=1.23
export VERSIONDATE=20210224
wl-showstatus --package-version
export DEPENDANCIES=
export OPTIONALDEPENDANCIES=
#export BUILDDEPENDANCIES=cmake
export BUILDDEPENDANCIES=cmake,ninja
export LICENSEFILE=LICENSE
export LICENSETYPE=
export DOWNLOADURL="https://github.com/google/leveldb/releases v"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/google/leveldb/archive/$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xfz $TARBALLDIR/$BASENAME/$VERSION.tar.gz
cd $BASENAME-$VERSION
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DLEVELDB_BUILD_BENCHMARKS:BOOL=OFF -DLEVELDB_BUILD_TESTS:BOOL=OFF -Bbuild_static -S. &&
# wl-showstatus configure &&
# cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DLEVELDB_BUILD_BENCHMARKS:BOOL=OFF -DLEVELDB_BUILD_TESTS:BOOL=OFF -Bbuild_shared -S. &&
# wl-showstatus build-install &&
# make -Cbuild_static install/strip &&
# wl-showstatus build-install &&
# make -Cbuild_shared install/strip &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
mkdir -p build_static build_shared &&
 wl-showstatus configure &&
 cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DLEVELDB_BUILD_BENCHMARKS:BOOL=OFF -DLEVELDB_BUILD_TESTS:BOOL=OFF -Bbuild_static -S. &&
 wl-showstatus configure &&
 cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DLEVELDB_BUILD_BENCHMARKS:BOOL=OFF -DLEVELDB_BUILD_TESTS:BOOL=OFF -Bbuild_shared -S. &&
 wl-showstatus build-install &&
 ninja -Cbuild_static install/strip &&
 wl-showstatus build-install &&
 ninja -Cbuild_shared install/strip &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




#export NAME="GD library"
#export STATUS=
#export URL=http://www.libgd.org/
#export BASENAME=libgd
#export DESCRIPTION="gd is a graphics library. It allows your code to quickly draw images complete with lines, arcs, text, multiple colors, cut and paste from other images, and flood fills, and write out the result as a PNG or JPEG file. This is particularly useful in World Wide Web applications, where PNG and JPEG are two of the formats accepted for inline images by most browsers."
#export CATEGORY=graphics
#export TYPE=library
#export VERSION=2.0.34
##export VERSION=2.0.35
####Warning: This system can not link to static lib archive /mingw/lib//libjpeg.la
##export VERSION=2.0.36RC1
#export VERSIONDATE=
#wl-showstatus --package-version
#export DEPENDANCIES=
#export OPTIONALDEPENDANCIES=
#export BUILDDEPENDANCIES=
#export LICENSEFILE=COPYING
#export LICENSETYPE=
#export DOWNLOADURL="http://www.libgd.org/Downloads gd-"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://www.libgd.org/releases/gd-$VERSION.tar.bz2 || wl-download -v -d $TARBALLDIR/$BASENAME http://www.libgd.org/releases/oldreleases/gd-$VERSION.tar.bz2
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#tar xfj $TARBALLDIR/$BASENAME/gd-$VERSION.tar.bz2
#cd gd-$VERSION
# fix invalid parameter /NODEFAULTLIB:msvcrt.lib
##patch -ulbf CMakeLists.txt << EOF
##--- CMakeLists.txt  2007-06-14 21:51:42 +0200
##+++ CMakeLists.txt  2010-09-09 14:49:18 +0200
##@@ -148 +148 @@
##-               SET_TARGET_PROPERTIES(\${GD_LIB} PROPERTIES LINK_FLAGS "/NODEFAULTLIB:msvcrt.lib")
##+               #SET_TARGET_PROPERTIES(\${GD_LIB} PROPERTIES LINK_FLAGS "/NODEFAULTLIB:msvcrt.lib")
##EOF
##wl-showstatus configure &&
##cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX=$INSTALLPREFIX . &&
##  make &&
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --disable-shared --enable-static --disable-rpath CFLAGS="-I$MINGWPREFIX/include/freetype2" && make install
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-shared --disable-static --disable-rpath CFLAGS="-I$MINGWPREFIX/include/freetype2" && make install
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --disable-rpath CFLAGS="-I$MINGWPREFIX/include/freetype2" && make install
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --disable-shared --enable-static --disable-rpath && make install
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-shared --disable-static --disable-rpath CFLAGS="-DBGDWIN32 -DHAVE_BOOLEAN -DXMD_H" && make install
#./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --disable-static CFLAGS="-DBGDWIN32 -DHAVE_BOOLEAN -DXMD_H" && make install
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM CFLAGS="-DBGDWIN32 -DHAVE_BOOLEAN -DXMD_H" && make install
##### gd.c:138: internal compiler error: in rest_of_handle_final, at toplev.c:2067
##### gd.c:245: error: failure in redeclaration of 'gdImageColorClosestAlpha': dllimport'd symbol lacks external linkage.
#echo 'CPPFLAGS="$CPPFLAGS -DNONDLL=1"' >> configure.ac
#autoconf
#aclocal
#automake
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --disable-shared --disable-rpath CFLAGS="-I$MINGWPREFIX/include/freetype2" && make install
#./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM && make install
##../makeDevPak.sh
#cd ..



#export NAME="GD library"
#export STATUS=
#export URL=http://www.libgd.org/
#export BASENAME=libgd
#export DESCRIPTION="gd is a graphics library. It allows your code to quickly draw images complete with lines, arcs, text, multiple colors, cut and paste from other images, and flood fills, and write out the result as a PNG or JPEG file. This is particularly useful in World Wide Web applications, where PNG and JPEG are two of the formats accepted for inline images by most browsers."
#export CATEGORY=graphics
#export TYPE=library
#export VERSION=2.0.34
##export VERSION=2.0.35
#export VERSIONDATE=
#wl-showstatus --package-version
#export DEPENDANCIES=
#export OPTIONALDEPENDANCIES=
#export BUILDDEPENDANCIES=pexports
#export LICENSEFILE=COPYING.TXT
#export LICENSETYPE=
#export DOWNLOADURL="http://www.libgd.org/releases/oldreleases/ gd- -win32.zip"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://www.libgd.org/releases/oldreleases/gd-$VERSION-win32.zip
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#mkdir -p $INSTALLPREFIX/include $INSTALLPREFIX/lib $INSTALLPREFIX/bin
#unzip -oq -d $INSTALLPREFIX -j $TARBALLDIR/$BASENAME/gd-$VERSION-win32.zip COPYING.TXT
#unzip -oq -d $INSTALLPREFIX/include -j $TARBALLDIR/$BASENAME/gd-$VERSION-win32.zip include/*
#unzip -oq -d $INSTALLPREFIX/lib -j $TARBALLDIR/$BASENAME/gd-$VERSION-win32.zip lib/bgd*
#unzip -oq -d $INSTALLPREFIX/bin -j $TARBALLDIR/$BASENAME/gd-$VERSION-win32.zip bin/bgd*
#mv $INSTALLPREFIX/lib/bgd_a.lib $INSTALLPREFIX/lib/libgd.a
##reimp $INSTALLPREFIX/lib/bgd.lib -d
###sed -e "s/^_/_imp__/; s/^gd/_imp__gd/" bgd.def > $INSTALLPREFIX/lib/libgd.def
###rm bgd.def
###$RUNPLATFORM-dlltool -k -d $INSTALLPREFIX/lib/libgd.def -l $INSTALLPREFIX/lib/libgd.a
###$RUNPLATFORM-dlltool -k -D $INSTALLPREFIX/bin/bgd.dll -d $INSTALLPREFIX/lib/libgd.def -l $INSTALLPREFIX/lib/libgd.dll.a
##mv bgd.def $INSTALLPREFIX/lib/libgd.def
#pexports $INSTALLPREFIX/bin/bgd.dll | sed -e "s/^_/_imp__/" > $INSTALLPREFIX/lib/libgd.def
#pexports $INSTALLPREFIX/bin/bgd.dll | grep DATA$ | sed -e "s/^\([^ ]*\).*/_imp__\1=?\1/" >> $INSTALLPREFIX/lib/libgd.def
##$RUNPLATFORM-dlltool -C -D $INSTALLPREFIX/bin/bgd.dll -d $INSTALLPREFIX/lib/libgd.def -l $INSTALLPREFIX/lib/libgd.dll.a
#dlltool -C -D $INSTALLPREFIX/bin/bgd.dll -d $INSTALLPREFIX/lib/libgd.def -l $INSTALLPREFIX/lib/libgd.dll.a
#rm $INSTALLPREFIX/lib/bgd.lib 
#wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION



#export NAME="GD library"
#export STATUS=
#export URL=http://www.libgd.org/
##export URL=http://libgd.bitbucket.org/
#export BASENAME=libgd
#export DESCRIPTION="gd is a graphics library. It allows your code to quickly draw images complete with lines, arcs, text, multiple colors, cut and paste from other images, and flood fills, and write out the result as a PNG or JPEG file. This is particularly useful in World Wide Web applications, where PNG and JPEG are two of the formats accepted for inline images by most browsers."
#export CATEGORY=graphics
#export TYPE=library
#export VERSION=2.0.35
#export VERSIONDATE=
#wl-showstatus --package-version
#export DEPENDANCIES=libpng,libjpeg,freetype2,fontconfig,pthreads,libiconv
#export OPTIONALDEPENDANCIES=libxpm
#export BUILDDEPENDANCIES=cmake,pexports
#export LICENSEFILE=COPYING
#export LICENSETYPE=
##export DOWNLOADURL="http://www.libgd.org/Downloads gd-"
#export DOWNLOADURL="https://bitbucket.org/libgd/gd-libgd/downloads gd-"
##export DOWNLOADURL="http://libgd.bitbucket.org/pages/downloads.html gd-"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://www.libgd.org/releases/gd-$VERSION.tar.bz2 || wl-download -v -d $TARBALLDIR/$BASENAME http://www.libgd.org/releases/oldreleases/gd-$VERSION.tar.bz2
##export DOWNLOADSOURCEURL=https://bitbucket.org/libgd/gd-libgd/downloads/gd-$VERSION.tar.xz
##export DOWNLOADSOURCEURL=http://cdn.bitbucket.org/libgd/gd-libgd/downloads/gd-$VERSION.tar.xz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#tar xfj $TARBALLDIR/$BASENAME/gd-$VERSION.tar.bz2
##tar xfJ $TARBALLDIR/$BASENAME/gd-$VERSION.tar.xz
##tar xfJ $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.xz
#cd gd-$VERSION
## fix CMakeLists.txt
#mv CMakeLists.txt CMakeLists.txt.bak
#sed -e "s?/NODEFAULTLIB:msvcrt.lib??" CMakeLists.txt.bak > CMakeLists.txt
### fix wrong jpeg.dll from wrong location (from PATH environment variable) being linked
##mv CMakeFiles/bgd.dir/build.make CMakeFiles/bgd.dir/build.make.bak
##sed -e "s?\"[^\"]*jpeg.dll\"?-ljpeg?" CMakeFiles/bgd.dir/build.make.bak > CMakeFiles/bgd.dir/build.make
##wl-showstatus configure &&
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-static --enable-shared CFLAGS="-DBGDWIN32 -DHAVE_BOOLEAN -DXMD_H" LDFLAGS="-Wl,-no-undefined" && 
## make install-strip &&  &&
## cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX=$INSTALLPREFIX -DCMAKE_BUILD_TYPE=release . &&
## echo "#define HAVE_BOOLEAN" >> config.h && 
## make && 
## cp libbgd.dll $INSTALLPREFIX/bin/ &&
## cp libbgd.dll.a $INSTALLPREFIX/lib/ &&
## sed -e "s?dlname=''?dlname='../bin/libbgd.dll'?; s?library_names=''?library_names='libbgd.dll.a'?" libgd.la > $INSTALLPREFIX/lib/libgd.la &&
## wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && rm -rf gd-$VERSION &&
#wl-showstatus configure &&
##cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX=$INSTALLPREFIX -DCMAKE_BUILD_TYPE=release . &&
##cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX=$INSTALLPREFIX -DCMAKE_BUILD_TYPE=release -DFONTCONFIG_INCLUDE_DIR:PATH=$MINGWPREFIX/include/freetype2 . &&
#cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX=$INSTALLPREFIX -DCMAKE_BUILD_TYPE=release -DFONTCONFIG_INCLUDE_DIR:PATH=$MINGWPREFIX/include/freetype2 -DZLIB_INCLUDE_DIR:PATH=$MINGWPREFIX/include -DPNG_PNG_INCLUDE_DIR:PATH=$MINGWPREFIX/include -DPNG_LIBRARY:FILEPATH=-lpng . &&
# wl-showstatus build &&
# make &&
# wl-showstatus configure &&
# #autoreconf -f -i -I $MINGWPREFIX/share/aclocal &&
# #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-static --enable-shared CFLAGS="-DBGDWIN32 -DHAVE_BOOLEAN -DXMD_H" LDFLAGS="-Wl,-no-undefined" &&
# ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-static --enable-shared CFLAGS="-DBGDWIN32 -DHAVE_BOOLEAN -DXMD_H -I$MINGWPREFIX/include/freetype2" LDFLAGS="-Wl,-no-undefined" &&
# ## fix building DLLs
# #mv libtool libtool.bak &&
# #sed -e "s/\(allow_undefined=\)yes/\1no/" libtool.bak > libtool &&
# ##cp -f $(which libtool) . &&
# wl-showstatus build-install &&
# make install-strip echo=echo && 
# cp -f libbgd.dll $INSTALLPREFIX/bin/ &&
# ( cp -f libbgd.dll.a $INSTALLPREFIX/lib/ &> /dev/null || ( pexports libbgd.dll > libbgd.def && dlltool -D libbgd.dll -d libbgd.def -l $INSTALLPREFIX/lib/libbgd.dll.a )) &&
# sed -e "s?dlname=''?dlname='../bin/libbgd.dll'?; s?library_names=''?library_names='libbgd.dll.a'?" libgd.la > $INSTALLPREFIX/lib/libgd.la &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf gd-$VERSION



#export NAME="GD library"
#export STATUS=
#export URL=http://www.libgd.org/
##export URL=http://libgd.bitbucket.org/
#export BASENAME=libgd
#export DESCRIPTION="gd is a graphics library. It allows your code to quickly draw images complete with lines, arcs, text, multiple colors, cut and paste from other images, and flood fills, and write out the result as a PNG or JPEG file. This is particularly useful in World Wide Web applications, where PNG and JPEG are two of the formats accepted for inline images by most browsers."
#export CATEGORY=graphics
#export TYPE=library
#export VERSION=2.1.1
#export VERSIONDATE=20150114
#wl-showstatus --package-version
#export DEPENDANCIES=libpng,libjpeg,freetype2,fontconfig,pthreads,libiconv,pngquant,libtiff,libwebp,libvpx
#export OPTIONALDEPENDANCIES=libxpm
#export BUILDDEPENDANCIES=cmake,pexports
#export LICENSEFILE=COPYING
#export LICENSETYPE=
#export DOWNLOADURL="https://bitbucket.org/libgd/gd-libgd/downloads"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://bitbucket.org/libgd/gd-libgd/downloads/$BASENAME-$VERSION.tar.xz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#tar xfJ $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.xz
#cd $BASENAME-$VERSION
##wl-showstatus configure &&
##cmake.exe -G"MSYS Makefiles" -Wno-dev -DCMAKE_INSTALL_PREFIX=$INSTALLPREFIX -DCMAKE_BUILD_TYPE=release -DFONTCONFIG_INCLUDE_DIR:PATH=$MINGWPREFIX/include/freetype2 -DZLIB_INCLUDE_DIR:PATH=$MINGWPREFIX/include -DPNG_PNG_INCLUDE_DIR:PATH=$MINGWPREFIX/include -DPNG_LIBRARY:FILEPATH=-lpng -DFREETYPE_INCLUDE_DIRS:PATH=$MINGWPREFIX/include/freetype2 -DENABLE_FONTCONFIG:BOOL=ON -DENABLE_FREETYPE:BOOL=ON -DENABLE_ICONV:BOOL=ON -DENABLE_JPEG:BOOL=ON -DENABLE_LIQ:BOOL=ON -DENABLE_PNG:BOOL=ON -DENABLE_TIFF:BOOL=ON -DENABLE_WEBP:BOOL=ON -DENABLE_XPM:BOOL=ON . &&
## wl-showstatus build &&
## make &&
## wl-showstatus install &&
## cp -f Bin/liblibgd.dll $INSTALLPREFIX/bin/libgd.dll &&
## pexports $INSTALLPREFIX/bin/libgd.dll > libbgd.def &&
## dlltool -D $INSTALLPREFIX/bin/libgd.dll -d libbgd.def -l $INSTALLPREFIX/lib/libgd.dll.a &&
#wl-showstatus configure &&
##autoreconf -f -i -I $MINGWPREFIX/share/aclocal &&
#./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-static --enable-shared CFLAGS="-DBGDWIN32 -DHAVE_BOOLEAN -DXMD_H -I$MINGWPREFIX/include/freetype2" LDFLAGS="-Wl,-no-undefined" &&
# wl-showstatus build-install &&
# make install-strip && 
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION



#export NAME="GD library"
#export STATUS=
#export URL=http://www.libgd.org/
#export BASENAME=libgd
#export DESCRIPTION="gd is a graphics library. It allows your code to quickly draw images complete with lines, arcs, text, multiple colors, cut and paste from other images, and flood fills, and write out the result as a PNG or JPEG file. This is particularly useful in World Wide Web applications, where PNG and JPEG are two of the formats accepted for inline images by most browsers."
#export CATEGORY=graphics
#export TYPE=library
##export VERSION=2.2.3
##export VERSIONDATE=20161020
##export VERSION=2.2.4
##export VERSIONDATE=20170118
##export VERSION=2.2.5
##export VERSIONDATE=20170830
##export VERSION=2.3.0
##export VERSIONDATE=20200323
##export VERSION=2.3.1
##export VERSIONDATE=20210130
#export VERSION=2.3.2
#export VERSIONDATE=20210307
#wl-showstatus --package-version
#export DEPENDANCIES=libpng,libjpeg,freetype2,fontconfig,pthreads,libiconv,pngquant,libtiff,libwebp,libvpx,libraqm
#export OPTIONALDEPENDANCIES=libxpm
##export BUILDDEPENDANCIES=cmake,pexports
#export BUILDDEPENDANCIES=cmake
#export LICENSEFILE=COPYING
#export LICENSETYPE=
#export DOWNLOADURL="https://github.com/libgd/libgd/releases"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
##export DOWNLOADSOURCEURL=https://bitbucket.org/libgd/gd-libgd/downloads/$BASENAME-$VERSION.tar.xz
#export DOWNLOADSOURCEURL=https://github.com/libgd/libgd/releases/download/gd-$VERSION/$BASENAME-$VERSION.tar.xz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#tar xfJ $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.xz
#cd $BASENAME-$VERSION
### fix src/gd_topal.c (version >= 2.2.3 <= 2.2.5)
##patch -ulbf src/gd_topal.c << EOF
##--- src/gd_topal.c  2016-07-21 10:06:42.000000000 +0200
##+++ src/gd_topal.c  2016-10-20 21:13:47.269463900 +0200
##@@ -1547,3 +1547,3 @@
##                oim->paletteQuantizationMethod == GD_QUANT_LIQ) {
##-               liq_attr *attr = liq_attr_create_with_allocator(gdMalloc, gdFree);
##+               liq_attr *attr = liq_attr_create_with_allocator(gdMalloc, (void*)gdFree);
##                liq_image *image;
##EOF
### fix src/gd_webp.c (version >= 2.2.3 <= 2.2.5)
##patch -ulbf src/gd_webp.c << EOF
##--- src/gd_webp.c  2016-07-21 10:06:42.000000000 +0200
##+++ src/gd_webp.c  2016-10-20 21:15:26.589776900 +0200
##@@ -18,3 +18,3 @@
##
##-gdImagePtr gdImageCreateFromWebp (FILE * inFile)
##+BGD_DECLARE(gdImagePtr) gdImageCreateFromWebp (FILE * inFile)
## {
##@@ -32,3 +32,3 @@
##
##-gdImagePtr gdImageCreateFromWebpPtr (int size, void *data)
##+BGD_DECLARE(gdImagePtr) gdImageCreateFromWebpPtr (int size, void *data)
## {
##@@ -43,3 +43,3 @@
##
##-gdImagePtr gdImageCreateFromWebpCtx (gdIOCtx * infile)
##+BGD_DECLARE(gdImagePtr) gdImageCreateFromWebpCtx (gdIOCtx * infile)
## {
##@@ -107,3 +107,3 @@
##
##-void gdImageWebpCtx (gdImagePtr im, gdIOCtx * outfile, int quantization)
##+BGD_DECLARE(void) gdImageWebpCtx (gdImagePtr im, gdIOCtx * outfile, int quantization)
## {
##EOF
### fix missing strcasecmp in src/gd_filename.c (version >= 2.2.3 <= 2.2.5)
##mv src/gd_filename.c src/gd_filename.c.bak &&
##sed -e "s/strcasecmp/stricmp/g" src/gd_filename.c.bak > src/gd_filename.c
### fix missing strcasecmp in src/gd_xbm.c (version >= 2.2.3 <= 2.2.5)
##mv src/gd_xbm.c src/gd_xbm.c.bak &&
##sed -e "s/strcasecmp/stricmp/g" src/gd_xbm.c.bak > src/gd_xbm.c
## fix missing posix_memalign in src/gd_topal.c (version >= 2.3.0)
#patch -ulbf src/gd_topal.c << EOF
#@@ -1529,4 +1529,8 @@
# {
#+#ifdef _WIN32
#+       return _aligned_malloc(size, 16);
#+#else
#        void *p;
#        return posix_memalign(&p, 16, size) == 0 ? p : NULL;
#+#endif
# }
#EOF
## fix missing getline in src/annotate.c (version >= 2.3.0)
#mv src/annotate.c src/annotate.c.bak
#cat > src/annotate.c << EOF
##ifdef _WIN32
##include <stdio.h>
##include <stdlib.h>
##define GETLINE_BUFLEN 128
#size_t getline(char** lineptr, size_t* n, FILE* stream)
#{
#  char* bufptr;
#  char* p;
#  size_t size;
#  int c;
#  if (!lineptr || !n || !stream)
#    return -1;
#  bufptr = *lineptr;
#  size = *n;
#  c = fgetc(stream);
#  if (c == EOF)
#    return -1;
#  if (!bufptr) {
#    if ((bufptr = (char*)malloc(GETLINE_BUFLEN)) == NULL)
#      return -1;
#    size = GETLINE_BUFLEN;
#  }
#  p = bufptr;
#  while (c != EOF) {
#    if ((p - bufptr) > (size - 1)) {
#      size = size + GETLINE_BUFLEN;
#      if ((bufptr = (char*)realloc(bufptr, size)) == NULL)
#        return -1;
#    }
#    *p++ = c;
#    if (c == '\n') {
#      break;
#    }
#    c = fgetc(stream);
#  }
#  *p++ = 0;
#  *lineptr = bufptr;
#  *n = size;
#  return p - bufptr - 1;
#}
##endif
#EOF
#cat src/annotate.c.bak >> src/annotate.c
##wl-showstatus configure &&
##cmake.exe -G"MSYS Makefiles" -Wno-dev -DCMAKE_INSTALL_PREFIX=$INSTALLPREFIX -DCMAKE_BUILD_TYPE=release -DFONTCONFIG_INCLUDE_DIR:PATH=$MINGWPREFIX/include/freetype2 -DZLIB_INCLUDE_DIR:PATH=$MINGWPREFIX/include -DPNG_PNG_INCLUDE_DIR:PATH=$MINGWPREFIX/include -DPNG_LIBRARY:FILEPATH=-lpng -DFREETYPE_INCLUDE_DIRS:PATH=$MINGWPREFIX/include/freetype2 -DENABLE_FONTCONFIG:BOOL=ON -DENABLE_FREETYPE:BOOL=ON -DENABLE_ICONV:BOOL=ON -DENABLE_JPEG:BOOL=ON -DENABLE_LIQ:BOOL=ON -DENABLE_PNG:BOOL=ON -DENABLE_TIFF:BOOL=ON -DENABLE_WEBP:BOOL=ON -DENABLE_XPM:BOOL=ON . &&
## wl-showstatus build &&
## make &&
## wl-showstatus install &&
## cp -f Bin/liblibgd.dll $INSTALLPREFIX/bin/libgd.dll &&
## pexports $INSTALLPREFIX/bin/libgd.dll > libbgd.def &&
## dlltool -D $INSTALLPREFIX/bin/libgd.dll -d libbgd.def -l $INSTALLPREFIX/lib/libgd.dll.a &&
## don't abort on warnings
#sed -i.bak -e "s/-Wall//" configure
#wl-showstatus configure &&
# ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-static --enable-shared CFLAGS="-DXMD_H -I$MINGWPREFIX/include/freetype2" LDFLAGS="-Wl,-no-undefined" &&
# wl-showstatus build-install &&
# #make install-strip && 
# make install-strip libgd_la_LIBADD="-Wl,--as-needed -liconv -Wl,--add-stdcall-alias -Wl,--output-def,libgd.def" &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION



export NAME="GD library"
export STATUS=
export URL=http://www.libgd.org/
export BASENAME=libgd
export DESCRIPTION="gd is a graphics library. It allows your code to quickly draw images complete with lines, arcs, text, multiple colors, cut and paste from other images, and flood fills, and write out the result as a PNG or JPEG file. This is particularly useful in World Wide Web applications, where PNG and JPEG are two of the formats accepted for inline images by most browsers."
export CATEGORY=graphics
export TYPE=library
#export VERSION=2.3.2
#export VERSIONDATE=20210307
export VERSION=2.3.3
export VERSIONDATE=20210913
wl-showstatus --package-version
export DEPENDANCIES=zlib,libpng,libjpeg,freetype2,fontconfig,pthreads,libiconv,pngquant,libtiff,libwebp,libheif,libxpm,libvpx,libraqm,libavif
export OPTIONALDEPENDANCIES=libxpm
export BUILDDEPENDANCIES=cmake,ninja
export BUILDDEPENDANCIES=cmake
export LICENSEFILE=COPYING
export LICENSETYPE=
export DOWNLOADURL="https://github.com/libgd/libgd/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://bitbucket.org/libgd/gd-libgd/downloads/$BASENAME-$VERSION.tar.xz
export DOWNLOADSOURCEURL=https://github.com/libgd/libgd/releases/download/gd-$VERSION/$BASENAME-$VERSION.tar.xz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
tar xfJ $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.xz
cd $BASENAME-$VERSION
# fix missing posix_memalign in src/gd_topal.c (version >= 2.3.2)
patch -ulbf src/gd_topal.c << EOF
@@ -1529,4 +1529,20 @@
 {
+#if defined(_MSC_VER) || defined(__MINGW64_VERSION_MAJOR)
+       return _aligned_malloc(size, 16);
+#elif defined(__MINGW32__)
+       return __mingw_aligned_malloc(size, 16);
+#else
        void *p;
        return posix_memalign(&p, 16, size) == 0 ? p : NULL;
+#endif
+}
+static void malloc16_free(void *p)
+{
+#if defined(_MSC_VER) || defined(__MINGW64_VERSION_MAJOR)
+       _aligned_free(p);
+#elif defined(__MINGW32__)
+       __mingw_aligned_free(p);
+#else
+       free(p);
+#endif
 }
@@ -1612,3 +1628,3 @@
                oim->paletteQuantizationMethod == GD_QUANT_LIQ) {
-               liq_attr *attr = liq_attr_create_with_allocator(malloc16, free);
+               liq_attr *attr = liq_attr_create_with_allocator(malloc16, malloc16_free);
                liq_image *image;
EOF
# fix missing getline in src/annotate.c (version >= 2.3.0)
mv src/annotate.c src/annotate.c.bak
cat > src/annotate.c << EOF
#ifdef _WIN32
#include <stdio.h>
#include <stdlib.h>
#define GETLINE_BUFLEN 128
size_t getline(char** lineptr, size_t* n, FILE* stream)
{
  char* bufptr;
  char* p;
  size_t size;
  int c;
  if (!lineptr || !n || !stream)
    return -1;
  bufptr = *lineptr;
  size = *n;
  c = fgetc(stream);
  if (c == EOF)
    return -1;
  if (!bufptr) {
    if ((bufptr = (char*)malloc(GETLINE_BUFLEN)) == NULL)
      return -1;
    size = GETLINE_BUFLEN;
  }
  p = bufptr;
  while (c != EOF) {
    if ((p - bufptr) > (size - 1)) {
      size = size + GETLINE_BUFLEN;
      if ((bufptr = (char*)realloc(bufptr, size)) == NULL)
        return -1;
    }
    *p++ = c;
    if (c == '\n') {
      break;
    }
    c = fgetc(stream);
  }
  *p++ = 0;
  *lineptr = bufptr;
  *n = size;
  return p - bufptr - 1;
}
#endif
EOF
cat src/annotate.c.bak >> src/annotate.c
# fix library name in CMakeLists.txt (version >= 2.3.2)
patch -ulbf ./CMakeLists.txt << EOF
@@ -256,3 +256,7 @@
        if (WIN32)
-               SET(GD_LIB libgd)
+               if (MINGW)
+                       SET(GD_LIB gd)
+               else (MINGW)
+                       SET(GD_LIB libgd)
+               endif (MINGW)
                ADD_DEFINITIONS( -DWIN32 -D_WIN32 -DMSWIN32 -DBGDWIN32 -DWINVER=0x0500  -D_WIN32_WINNT=0x0500 -D_WIN32_IE=0x0600)
EOF
# fix detection of dependancies (version >= 2.3.2)
sed -i.bak -e "s?/usr/local\(/[^ ]*\)?$(cygpath -m $MINGWPREFIX)\1 &?g; s?/usr/lib64 /usr/lib ??" cmake/modules/FindWEBP.cmake cmake/modules/FindHEIF.cmake cmake/modules/FindXPM.cmake
mkdir -p build_win &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DBUILD_STATIC_LIBS:BOOL=ON -DENABLE_AVIF:BOOL=ON -DENABLE_FONTCONFIG:BOOL=ON -DENABLE_FREETYPE:BOOL=ON -DENABLE_GD_FORMATS:BOOL=ON -DENABLE_HEIF:BOOL=ON -DENABLE_ICONV:BOOL=ON -DENABLE_JPEG:BOOL=ON -DENABLE_LIQ:BOOL=ON -DENABLE_PNG:BOOL=ON -DENABLE_RAQM:BOOL=ON -DENABLE_TIFF:BOOL=ON -DENABLE_WEBP:BOOL=ON -DENABLE_XPM:BOOL=ON -DBUILD_TEST:BOOL=OFF -S. -Bbuild_win &&
 wl-showstatus build-install &&
 ninja -Cbuild_win install/strip &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




#export NAME="Qt 4"
#export STATUS=
#export URL=https://www.qt.io/
#export BASENAME=qt4
#export DESCRIPTION="Qt - A cross-platform application and UI framework"
#export CATEGORY=gui,framework
#export TYPE=library,application
#export VERSION=4.8.5
#export VERSIONDATE=20200525
#wl-showstatus --package-version
#export DEPENDENCIES=sqlite3,mariadb-client,postgresql,freetds,firebird,zlib,libpng,libjpeg,openssl,pcre,glib2,icu,dbus
#export OPTIONALDEPENDENCIES=xcb
#export BUILDDEPENDENCIES=
#export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=LICENSE.LGPL
#export LICENSETYPE="GPL/LGPL"
#export DOWNLOADURL="https://download.qt.io/official_releases/qt/ qt-everywhere-opensource-src-"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://download.qt.io/archive/qt/$(echo $VERSION|sed -e "s/^\([0-9]*\.[0-9]*\)\..*$/\1/")/$VERSION/qt-everywhere-opensource-src-$VERSION.tar.gz
#wl-download -v -d $TARBALLDIR $DOWNLOADSOURCEURL
#wl-wait4deps
#tar xz --force-local -f $TARBALLDIR/qt-everywhere-opensource-src-$VERSION.tar.gz
#cd qt-everywhere-opensource-src-$VERSION
## fix Unicode issue in qmake/project.cpp (version >= 4.8.5)
#sed -i.bak -e "s/GetComputerName/&W/" qmake/project.cpp
#wl-showstatus configure &&
# echo yes|CPLUS_INCLUDE_PATH=$(pwd)/tools/shared:$(pwd)/include/QtCore:$(pwd)/include${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} ./configure -platform win32-g++ -prefix $INSTALLPREFIX/qt4 -opensource -release -shared -fast -no-pch -no-rpath -optimized-qmake -no-openssl -iconv -system-zlib -system-libjpeg -system-libpng -system-libtiff -system-libmng -system-sqlite -plugin-sql-sqlite -plugin-sql-odbc -no-webkit -phonon -phonon-backend -no-nis -no-cups -dbus -I $MINGWPREFIX/include/dbus-1.0 -I $MINGWPREFIX/lib/dbus-1.0/include &&
# ( mingw32-make -j 1 MAKEOPTS="-j1" || mingw32-make -j 1 MAKEOPTS="-j1" CXX="${CXX:-g++} -Wno-shift-overflow -Wno-deprecated-declarations -fpermissive" ) &&
# #mingw32-make CXX="${CXX:-g++} -std=gnu++98" &&
# mingw32-make -j 1 install MAKEOPTS="-j1" COPY="cp -f" COPY_DIR="cp -rf" MKDIR="mkdir -p" &&
# #make -j1 all install MAKEOPTS="-j1" COPY="cp -f" COPY_DIR="cp -rf" MKDIR="mkdir -p" &&
# echo "[Paths]" > $INSTALLPREFIX/qt4/bin/qt.conf &&
# echo "Prefix=../../qt4" >> $INSTALLPREFIX/qt4/bin/qt.conf &&
#    echo OK
# #wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && rm -rf qt-everywhere-opensource-src-$VERSION



#export NAME="Qt 4"
#export STATUS=
#export URL=https://www.qt.io/
#export BASENAME=qt4
#export DESCRIPTION="Qt - A cross-platform application and UI framework"
#export CATEGORY=gui,framework
#export TYPE=library,application
#export VERSION=4.8.6
#export VERSIONDATE=20170904
#wl-showstatus --package-version
#export DEPENDENCIES=sqlite3,mariadb-client,postgresql,freetds,firebird,zlib,libpng,libjpeg,openssl,pcre,glib2,icu,dbus
#export OPTIONALDEPENDENCIES=xcb
#export BUILDDEPENDENCIES=
#export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=LICENSE.LGPL
#export LICENSETYPE="GPL/LGPL"
#export DOWNLOADURL="https://download.qt.io/official_releases/qt/ qt-everywhere-opensource-src-"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
##export DOWNLOADSOURCEURL=https://download.qt.io/official_releases/qt/$(echo $VERSION|sed -e "s/^\([0-9]*\.[0-9]*\)\..*$/\1/")/$VERSION/qt-everywhere-opensource-src-$VERSION.tar.gz
##export DOWNLOADSOURCEURL=https://download.qt.io/official_releases/qt/$(echo $VERSION|sed -e "s/^\([0-9]*\.[0-9]*\)\..*$/\1/")/$VERSION/qt-everywhere-opensource-src-$VERSION.zip
#export DOWNLOADSOURCEURL=https://download.qt.io/archive/qt/$(echo $VERSION|sed -e "s/^\([0-9]*\.[0-9]*\)\..*$/\1/")/$VERSION/qt-everywhere-opensource-src-$VERSION.tar.gz
#wl-download -v -d $TARBALLDIR $DOWNLOADSOURCEURL
#wl-wait4deps
#tar xz --force-local -f $TARBALLDIR/qt-everywhere-opensource-src-$VERSION.tar.gz
##unzip -oq $TARBALLDIR/qt-everywhere-opensource-src-$VERSION.zip
#cd qt-everywhere-opensource-src-$VERSION
## fix missing DirectX (needed for phonon)
#export DOWNLOADSOURCEURL=http://trent.gamblin.ca/dx/dx9mgw.zip
#wl-download -v -d $TARBALLDIR $DOWNLOADSOURCEURL
#unzip -oq $TARBALLDIR/dx9mgw.zip
#mv -f dx9mgw/* . || cp -rf dx9mgw/* .
### avoid std=c++0x
##mv qtbase/mkspecs/common/g++-base.conf qtbase/mkspecs/common/g++-base.conf.bak
##grep -v "std=c++0x" qtbase/mkspecs/common/g++-base.conf.bak > qtbase/mkspecs/common/g++-base.conf
##mv qtbase/mkspecs/win32-g++/qmake.conf qtbase/mkspecs/win32-g++/qmake.conf.bak
##grep -v "std=c++0x"  qtbase/mkspecs/win32-g++/qmake.conf.bak > qtbase/mkspecs/win32-g++/qmake.conf
##mv qtbase/mkspecs/linux-icc/qmake.conf qtbase/mkspecs/linux-icc/qmake.conf.bak
##grep -v "std=c++0x"  qtbase/mkspecs/linux-icc/qmake.conf.bak > qtbase/mkspecs/linux-icc/qmake.conf
#wl-showstatus configure &&
##./configure.exe -platform win32-g++ -release -shared -plugin-sql-odbc < answers.tmp &&
##echo yes|sh configure -platform win32-g++ -prefix $INSTALLPREFIX/qt4 -opensource -release -shared -silent -optimized-qmake -plugin-sql-odbc -fast &&
##echo y|./configure.exe -platform win32-g++ -prefix $INSTALLPREFIX/qt4 -opensource -release -shared -plugin-sql-odbc -plugin-sql-sqlite -plugin-sql-mysql -plugin-sql-psql -plugin-sql-tds &&
##echo y|./configure.exe -platform win32-g++ -prefix $INSTALLPREFIX/qt4 -I $MINGWPREFIX/include/mysql -opensource -release -shared -plugin-sql-odbc -plugin-sql-sqlite -plugin-sql-mysql -plugin-sql-psql -plugin-sql-tds &&
##echo y|./configure.exe -platform win32-g++ -prefix $INSTALLPREFIX/qt4 -opensource -release -shared -plugin-sql-odbc &&
##echo y|./configure.exe -platform win32-g++ -prefix $INSTALLPREFIX/qt4 -opensource -release -shared -plugin-sql-odbc -openssl -phonon -phonon-backend -dbus &&
##echo y|./configure.exe -platform win32-g++ -prefix $INSTALLPREFIX/qt4 -opensource -release -shared -fast -no-exceptions -no-dsp -no-vcproj -plugin-sql-odbc -openssl -phonon -phonon-backend &&
## mkdir -p $INSTALLPREFIX/qt4 &&
## cp -rf mkspecs $INSTALLPREFIX/qt4/ &&
## mingw32-make -j 1 &&
##echo yes|./configure -platform win32-g++ -prefix $INSTALLPREFIX/qt4 -opensource -release -shared -plugin-sql-odbc -openssl &&
##echo yes|./configure -platform win32-g++ -prefix $INSTALLPREFIX/qt4 -opensource -release -shared -strip -fully-process -optimized-qmake -plugin-sql-odbc -openssl -opengl -system-zlib -system-libpng -system-pcre -no-linuxfb &&
##echo y|./configure.exe -platform win32-g++ -prefix $INSTALLPREFIX/qt4 -opensource -release -shared -plugin-sql-odbc -openssl -phonon -phonon-backend &&
##echo y|./configure.exe -platform win32-g++ -prefix $INSTALLPREFIX/qt4 -opensource -release -shared -plugin-sql-odbc -openssl -phonon -phonon-backend -dbus -I $MINGWPREFIX/include/dbus-1.0 -I $MINGWPREFIX/lib/dbus-1.0/include &&
#echo y|./configure.exe -platform win32-g++ -prefix $INSTALLPREFIX/qt4 -opensource -release -shared -plugin-sql-odbc -no-openssl -phonon -phonon-backend -dbus -I $MINGWPREFIX/include/dbus-1.0 -I $MINGWPREFIX/lib/dbus-1.0/include &&
# wl-showstatus build &&
# ( mingw32-make -j 1 MAKEOPTS="-j1" || mingw32-make -j 1 MAKEOPTS="-j1" CXX="${CXX:-g++} -Wno-shift-overflow -Wno-deprecated-declarations -fpermissive" ) &&
# #mingw32-make CXX="${CXX:-g++} -std=gnu++98" &&
# wl-showstatus install &&
# mingw32-make -j 1 install MAKEOPTS="-j1" COPY="cp -f" COPY_DIR="cp -rf" MKDIR="mkdir -p" &&
# #make -j1 all install MAKEOPTS="-j1" COPY="cp -f" COPY_DIR="cp -rf" MKDIR="mkdir -p" &&
# echo "[Paths]" > $INSTALLPREFIX/qt4/bin/qt.conf &&
# echo "Prefix=../../qt4" >> $INSTALLPREFIX/qt4/bin/qt.conf &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && rm -rf qt-everywhere-opensource-src-$VERSION



export NAME="Qt 4"
export STATUS=
export URL=https://www.qt.io/
export BASENAME=qt4
export DESCRIPTION="Qt - A cross-platform application and UI framework"
export CATEGORY=gui,framework
export TYPE=library,application
export VERSION=4.8.7
export VERSIONDATE=20171122
####./configure: line 52: cygpath: command not found
####src/guidialogs/qfiledialog.cpp:431:33: error: 'class Ui_QFileDialog' has no member named 'treeView'
wl-showstatus --package-version
export DEPENDENCIES=sqlite3,mariadb-client,postgresql,freetds,firebird,zlib,libpng,libjpeg,libtiff,openssl,pcre,glib2,icu,dbus,jasper,libwebp,libmng
export OPTIONALDEPENDENCIES=xcb
export BUILDDEPENDENCIES=
export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=LICENSE.LGPL
export LICENSEFILE=LICENSE.LGPLv3
export LICENSETYPE="GPL/LGPL"
#export DOWNLOADURL="https://download.qt.io/official_releases/qt/ qt-everywhere-opensource-src-"
export DOWNLOADURL="https://download.qt.io/archive/qt/ qt-everywhere-opensource-src-"
#export DOWNLOADURL="https://github.com/qt/qt/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://download.qt.io/official_releases/qt/$(echo $VERSION|sed -e "s/^\([0-9]*\.[0-9]*\)\..*$/\1/")/$VERSION/qt-everywhere-opensource-src-$VERSION.tar.gz
#export DOWNLOADSOURCEURL=https://download.qt.io/official_releases/qt/$(echo $VERSION|sed -e "s/^\([0-9]*\.[0-9]*\)\..*$/\1/")/$VERSION/qt-everywhere-opensource-src-$VERSION.zip
export DOWNLOADSOURCEURL=https://download.qt.io/archive/qt/$(echo $VERSION|sed -e "s/^\([0-9]*\.[0-9]*\)\..*$/\1/")/$VERSION/qt-everywhere-opensource-src-$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
mkdir -p qt-$VERSION
tar xz --force-local -f $TARBALLDIR/$BASENAME/qt-everywhere-opensource-src-$VERSION.tar.gz --strip-components=1 -Cqt-$VERSION
#unzip -oq $TARBALLDIR/$BASENAME/qt-everywhere-opensource-src-$VERSION.zip
cd qt-$VERSION
#cd qt-everywhere-opensource-src-$VERSION
# avoid gestures (version >= 4.8.7)
mv src/gui/kernel/qapplication_win.cpp src/gui/kernel/qapplication_win.cpp.bak &&
echo "#define QT_NO_GESTURES" > src/gui/kernel/qapplication_win.cpp &&
cat src/gui/kernel/qapplication_win.cpp.bak >> src/gui/kernel/qapplication_win.cpp
mv src/gui/kernel/qwidget_win.cpp src/gui/kernel/qwidget_win.cpp.bak &&
echo "#define QT_NO_GESTURES" > src/gui/kernel/qwidget_win.cpp &&
cat src/gui/kernel/qwidget_win.cpp.bak >> src/gui/kernel/qwidget_win.cpp
# fix tools/linguist/linguist/messagemodel.cpp (version >= 4.8.7)
patch -ulbf tools/linguist/linguist/messagemodel.cpp << EOF
@@ -185,3 +185,3 @@
                 MessageItem *m = oc->messageItem(j);
-                if (c->findMessage(m->text(), m->comment()) >= 0)
+                if ((intptr_t)c->findMessage(m->text(), m->comment()) >= 0)
                     ++inBoth;
EOF
# fix type issue in qmake/project.cpp (version >= 4.8.7)
sed -i.bak -e "s/GetComputerName/&W/" qmake/project.cpp
# fix error including ui_qaxselect.h (version >= 4.8.7)
sed -i.bak -e "s?ui_qaxselect\.h?.uic/release-shared/&?" src/activeqt/container/qaxselect.h
# fix paths reported by qmake.exe (4.8.7)
patch -ulbf src/corelib/global/qlibraryinfo.cpp << EOF
@@ -69,2 +69,3 @@
 #include "qconfig.cpp"
+#include <windows.h>

@@ -308,4 +309,21 @@

-        if (path)
-            ret = QString::fromLocal8Bit(path);
+        if (path) {
+            int pos;
+            QString pathsuffix = QString::fromLocal8Bit(path + strlen(qt_configure_prefix_path_str + 12));
+            char runningfile[MAX_PATH];
+            DWORD runningfilelen;
+            const char* envval;
+            if ((envval = getenv("BASENAME")) != NULL && strcmp(envval, "$BASENAME") == 0 && (envval = getenv("INSTALLPREFIX")) != NULL) {
+              //ret = QString::fromLocal8Bit(envval) + pathsuffix + "/qt4";
+              ret = QString::fromLocal8Bit(path);
+            } else
+            if ((runningfilelen = GetModuleFileNameA(NULL, runningfile, MAX_PATH)) > 0) {
+              ret = QString::fromLocal8Bit(runningfile).replace(QString("\\\\"), QString("/"));
+              if ((pos = ret.lastIndexOf("/")) > 0)
+                if ((pos = ret.lastIndexOf("/", pos - 1)) >= 0)
+                 ret.remove(pos, runningfilelen);
+             ret.append(pathsuffix);
+            } else
+              ret = QString::fromLocal8Bit(path);
+        }
     } else {
EOF
# fix for openssl >= 1.1.0 (see also: https://lists.debian.org/debian-qt-kde/2016/06/msg01270.html)
patch -ulbf src/network/ssl/qsslcertificate.cpp << EOF
@@ -259,10 +259,10 @@
 QByteArray QSslCertificate::version() const
 {
     QMutexLocker lock(QMutexPool::globalInstanceGet(d.data()));
-    if (d->versionString.isEmpty() && d->x509)
+    if (d->versionString.isEmpty() && d->x509) {
         d->versionString =
-            QByteArray::number(qlonglong(q_ASN1_INTEGER_get(d->x509->cert_info->version)) + 1);
-
+            QByteArray::number(qlonglong(q_X509_get_version(d->x509)) + 1);
+    }
     return d->versionString;
 }
 
@@ -276,7 +276,7 @@
 {
     QMutexLocker lock(QMutexPool::globalInstanceGet(d.data()));
     if (d->serialNumberString.isEmpty() && d->x509) {
-        ASN1_INTEGER *serialNumber = d->x509->cert_info->serialNumber;
+        ASN1_INTEGER *serialNumber = q_X509_get_serialNumber(d->x509);
         // if we cannot convert to a long, just output the hexadecimal number
         if (serialNumber->length > 4) {
             QByteArray hexString;
@@ -489,24 +489,33 @@
     QSslKey key;
 
     key.d->type = QSsl::PublicKey;
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
     X509_PUBKEY *xkey = d->x509->cert_info->key;
+#else
+    X509_PUBKEY *xkey = q_X509_get_X509_PUBKEY(d->x509);
+#endif
     EVP_PKEY *pkey = q_X509_PUBKEY_get(xkey);
     Q_ASSERT(pkey);
 
-    if (q_EVP_PKEY_type(pkey->type) == EVP_PKEY_RSA) {
+    int key_id;
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
+    key_id = q_EVP_PKEY_type(pkey->type);
+#else
+    key_id = q_EVP_PKEY_base_id(pkey);
+#endif
+    if (key_id == EVP_PKEY_RSA) {
         key.d->rsa = q_EVP_PKEY_get1_RSA(pkey);
         key.d->algorithm = QSsl::Rsa;
         key.d->isNull = false;
-    } else if (q_EVP_PKEY_type(pkey->type) == EVP_PKEY_DSA) {
+    } else if (key_id == EVP_PKEY_DSA) {
         key.d->dsa = q_EVP_PKEY_get1_DSA(pkey);
         key.d->algorithm = QSsl::Dsa;
         key.d->isNull = false;
-    } else if (q_EVP_PKEY_type(pkey->type) == EVP_PKEY_DH) {
+    } else if (key_id == EVP_PKEY_DH) {
         // DH unsupported
     } else {
         // error?
     }
-
     q_EVP_PKEY_free(pkey);
     return key;
 }
EOF
patch -ulbf src/network/ssl/qsslkey.cpp << EOF
@@ -321,8 +321,19 @@
 {
     if (d->isNull)
         return -1;
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
     return (d->algorithm == QSsl::Rsa)
            ? q_BN_num_bits(d->rsa->n) : q_BN_num_bits(d->dsa->p);
+#else
+    if (d->algorithm == QSsl::Rsa) {
+        return q_RSA_bits(d->rsa);
+    }else{
+        BIGNUM *p = NULL;
+        q_DSA_get0_pqg(d->dsa, &p, NULL, NULL);
+        return q_BN_num_bits(p);
+    }
+#endif
+
 }
 
 /*!
EOF
patch -ulbf src/network/ssl/qsslsocket_openssl.cpp << EOF
@@ -93,6 +93,7 @@
 bool QSslSocketPrivate::s_loadedCiphersAndCerts = false;
 bool QSslSocketPrivate::s_loadRootCertsOnDemand = false;
 
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 /* \\internal
 
     From OpenSSL's thread(3) manual page:
@@ -174,6 +175,8 @@
 }
 } // extern "C"
 
+#endif //OPENSSL_VERSION_NUMBER >= 0x10100000L
+
 QSslSocketBackendPrivate::QSslSocketBackendPrivate()
     : ssl(0),
       ctx(0),
@@ -222,9 +225,12 @@
             ciph.d->encryptionMethod = descriptionList.at(4).mid(4);
         ciph.d->exportable = (descriptionList.size() > 6 && descriptionList.at(6) == QLatin1String("export"));
 
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
         ciph.d->bits = cipher->strength_bits;
         ciph.d->supportedBits = cipher->alg_bits;
-
+#else
+        ciph.d->bits = q_SSL_CIPHER_get_bits(cipher, &ciph.d->supportedBits);
+#endif
     }
     return ciph;
 }
@@ -363,7 +369,7 @@
         //
         // See also: QSslContext::fromConfiguration()
         if (caCertificate.expiryDate() >= QDateTime::currentDateTime()) {
-            q_X509_STORE_add_cert(ctx->cert_store, (X509 *)caCertificate.handle());
+            q_X509_STORE_add_cert(q_SSL_CTX_get_cert_store(ctx), (X509 *)caCertificate.handle());
         }
     }
 
@@ -500,8 +506,10 @@
 */
 void QSslSocketPrivate::deinitialize()
 {
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
     q_CRYPTO_set_id_callback(0);
     q_CRYPTO_set_locking_callback(0);
+#endif
 }
 
 /*!
@@ -522,13 +530,17 @@
         return false;
 
     // Check if the library itself needs to be initialized.
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
     QMutexLocker locker(openssl_locks()->initLock());
+#endif
     if (!s_libraryLoaded) {
         s_libraryLoaded = true;
 
         // Initialize OpenSSL.
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
         q_CRYPTO_set_id_callback(id_function);
         q_CRYPTO_set_locking_callback(locking_function);
+#endif
         if (q_SSL_library_init() != 1)
             return false;
         q_SSL_load_error_strings();
@@ -567,7 +579,9 @@
 
 void QSslSocketPrivate::ensureCiphersAndCertsLoaded()
 {
-    QMutexLocker locker(openssl_locks()->initLock());
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
+  QMutexLocker locker(openssl_locks()->initLock());
+#endif
     if (s_loadedCiphersAndCerts)
         return;
     s_loadedCiphersAndCerts = true;
@@ -659,13 +673,18 @@
     STACK_OF(SSL_CIPHER) *supportedCiphers = q_SSL_get_ciphers(mySsl);
     for (int i = 0; i < q_sk_SSL_CIPHER_num(supportedCiphers); ++i) {
         if (SSL_CIPHER *cipher = q_sk_SSL_CIPHER_value(supportedCiphers, i)) {
+
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
             if (cipher->valid) {
+#endif
                 QSslCipher ciph = QSslSocketBackendPrivate::QSslCipher_from_SSL_CIPHER(cipher);
                 if (!ciph.isNull()) {
                     if (!ciph.name().toLower().startsWith(QLatin1String("adh")))
                         ciphers << ciph;
                 }
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
             }
+#endif
         }
     }
 
EOF
patch -ulbf src/network/ssl/qsslsocket_openssl_symbols_p.h << EOF
@@ -399,7 +399,25 @@
                PEM_ASN1_write_bio((int (*)(void*, unsigned char**))q_i2d_DSAPrivateKey,PEM_STRING_DSA,\\
                        bp,(char *)x,enc,kstr,klen,cb,u)
 #endif
+
+X509_STORE * q_SSL_CTX_get_cert_store(const SSL_CTX *ctx);
+ASN1_INTEGER * q_X509_get_serialNumber(X509 *x);
+
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 #define q_SSL_CTX_set_options(ctx,op) q_SSL_CTX_ctrl((ctx),SSL_CTRL_OPTIONS,(op),NULL)
+#define q_X509_get_version(x) X509_get_version(x)
+#else
+int q_EVP_PKEY_id(const EVP_PKEY *pkey);
+int q_EVP_PKEY_base_id(const EVP_PKEY *pkey);
+int q_SSL_CIPHER_get_bits(const SSL_CIPHER *cipher, int *alg_bits);
+long q_SSL_CTX_set_options(SSL_CTX *ctx, long options);
+long q_X509_get_version(X509 *x);
+X509_PUBKEY * q_X509_get_X509_PUBKEY(X509 *x);
+int q_RSA_bits(const RSA *rsa);
+int q_DSA_security_bits(const DSA *dsa);
+void q_DSA_get0_pqg(const DSA *d, BIGNUM **p, BIGNUM **q, BIGNUM **g);
+#endif
+
 #define q_SKM_sk_num(type, st) ((int (*)(const STACK_OF(type) *))q_sk_num)(st)
 #define q_SKM_sk_value(type, st,i) ((type * (*)(const STACK_OF(type) *, int))q_sk_value)(st, i)
 #define q_sk_GENERAL_NAME_num(st) q_SKM_sk_num(GENERAL_NAME, (st))
@@ -410,8 +428,15 @@
 #define q_sk_SSL_CIPHER_value(st, i) q_SKM_sk_value(SSL_CIPHER, (st), (i))
 #define q_SSL_CTX_add_extra_chain_cert(ctx,x509) \\
         q_SSL_CTX_ctrl(ctx,SSL_CTRL_EXTRA_CHAIN_CERT,0,(char *)x509)
+
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 #define q_X509_get_notAfter(x) X509_get_notAfter(x)
 #define q_X509_get_notBefore(x) X509_get_notBefore(x)
+#else
+ASN1_TIME *q_X509_get_notAfter(X509 *x);
+ASN1_TIME *q_X509_get_notBefore(X509 *x);
+#endif
+
 #define q_EVP_PKEY_assign_RSA(pkey,rsa) q_EVP_PKEY_assign((pkey),EVP_PKEY_RSA,\\
                                        (char *)(rsa))
 #define q_EVP_PKEY_assign_DSA(pkey,dsa) q_EVP_PKEY_assign((pkey),EVP_PKEY_DSA,\\
EOF
patch -ulbf src/network/ssl/qsslsocket_openssl_symbols.cpp << EOF
@@ -111,16 +111,17 @@
 DEFINEFUNC2(int, ASN1_STRING_to_UTF8, unsigned char **a, a, ASN1_STRING *b, b, return 0, return);
 DEFINEFUNC4(long, BIO_ctrl, BIO *a, a, int b, b, long c, c, void *d, d, return -1, return)
 DEFINEFUNC(int, BIO_free, BIO *a, a, return 0, return)
-DEFINEFUNC(BIO *, BIO_new, BIO_METHOD *a, a, return 0, return)
+DEFINEFUNC(BIO *, BIO_new, const BIO_METHOD *a, a, return 0, return)
 DEFINEFUNC2(BIO *, BIO_new_mem_buf, void *a, a, int b, b, return 0, return)
 DEFINEFUNC3(int, BIO_read, BIO *a, a, void *b, b, int c, c, return -1, return)
-DEFINEFUNC(BIO_METHOD *, BIO_s_mem, void, DUMMYARG, return 0, return)
+DEFINEFUNC(const BIO_METHOD *, BIO_s_mem, void, DUMMYARG, return 0, return)
 DEFINEFUNC3(int, BIO_write, BIO *a, a, const void *b, b, int c, c, return -1, return)
 DEFINEFUNC(int, BN_num_bits, const BIGNUM *a, a, return 0, return)
 DEFINEFUNC(int, CRYPTO_num_locks, DUMMYARG, DUMMYARG, return 0, return)
 DEFINEFUNC(void, CRYPTO_set_locking_callback, void (*a)(int, int, const char *, int), a, return, DUMMYARG)
 DEFINEFUNC(void, CRYPTO_set_id_callback, unsigned long (*a)(), a, return, DUMMYARG)
 DEFINEFUNC(void, CRYPTO_free, void *a, a, return, DUMMYARG)
+DEFINEFUNC(void, OPENSSL_free, void *a, a, return, DUMMYARG)
 DEFINEFUNC(void, DSA_free, DSA *a, a, return, DUMMYARG)
 #if  OPENSSL_VERSION_NUMBER < 0x00908000L
 DEFINEFUNC3(X509 *, d2i_X509, X509 **a, a, unsigned char **b, b, long c, c, return 0, return)
@@ -286,6 +287,22 @@
 DEFINEFUNC(void, OPENSSL_add_all_algorithms_conf, void, DUMMYARG, return, DUMMYARG)
 DEFINEFUNC3(int, SSL_CTX_load_verify_locations, SSL_CTX *ctx, ctx, const char *CAfile, CAfile, const char *CApath, CApath, return 0, return)
 DEFINEFUNC(long, SSLeay, void, DUMMYARG, return 0, return)
+DEFINEFUNC(X509_STORE *, SSL_CTX_get_cert_store, const SSL_CTX *ctx, ctx, return 0, return)
+
+DEFINEFUNC(ASN1_INTEGER *, X509_get_serialNumber, X509 *x, x, return 0, return)
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+DEFINEFUNC(int, EVP_PKEY_id, const EVP_PKEY *pkey, pkey, return 0, return)
+DEFINEFUNC(int, EVP_PKEY_base_id, const EVP_PKEY *pkey, pkey, return 0, return)
+DEFINEFUNC2(int, SSL_CIPHER_get_bits, const SSL_CIPHER *cipher, cipher, int *alg_bits, alg_bits, return 0, return)
+DEFINEFUNC2(long, SSL_CTX_set_options, SSL_CTX *ctx, ctx, long options, options, return 0, return)
+DEFINEFUNC(long, X509_get_version, X509 *x, x, return 0, return)
+DEFINEFUNC(X509_PUBKEY *, X509_get_X509_PUBKEY, X509 *x, x, return 0, return)
+DEFINEFUNC(int, RSA_bits,  const RSA *rsa, rsa, return 0, return)
+DEFINEFUNC(int, DSA_security_bits, const DSA *dsa, dsa, return 0, return)
+DEFINEFUNC(ASN1_TIME *, X509_get_notAfter, X509 *x, x, return 0, return)
+DEFINEFUNC(ASN1_TIME *, X509_get_notBefore, X509 *x, x, return 0, return)
+DEFINEFUNC4(void, DSA_get0_pqg, const DSA *d, d, const BIGNUM **p, p, const BIGNUM **q, q, const BIGNUM **g, g, return, return)
+#endif

 #ifdef Q_OS_SYMBIAN
 #define RESOLVEFUNC(func, ordinal, lib) \\
@@ -797,6 +814,7 @@
     RESOLVEFUNC(SSL_CTX_use_PrivateKey)
     RESOLVEFUNC(SSL_CTX_use_RSAPrivateKey)
     RESOLVEFUNC(SSL_CTX_use_PrivateKey_file)
+    RESOLVEFUNC(SSL_CTX_get_cert_store)
     RESOLVEFUNC(SSL_accept)
     RESOLVEFUNC(SSL_clear)
     RESOLVEFUNC(SSL_connect)
@@ -819,6 +837,23 @@
     RESOLVEFUNC(SSL_set_connect_state)
     RESOLVEFUNC(SSL_shutdown)
     RESOLVEFUNC(SSL_write)
+
+    RESOLVEFUNC(X509_get_serialNumber)
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+    RESOLVEFUNC(SSL_CTX_ctrl)
+    RESOLVEFUNC(EVP_PKEY_id)
+    RESOLVEFUNC(EVP_PKEY_base_id)
+    RESOLVEFUNC(SSL_CIPHER_get_bits)
+    RESOLVEFUNC(SSL_CTX_set_options)
+    RESOLVEFUNC(X509_get_version)
+    RESOLVEFUNC(X509_get_X509_PUBKEY)
+    RESOLVEFUNC(RSA_bits)
+    RESOLVEFUNC(DSA_security_bits)
+    RESOLVEFUNC(DSA_get0_pqg)
+    RESOLVEFUNC(X509_get_notAfter)
+    RESOLVEFUNC(X509_get_notBefore)
+#endif
+
 #ifndef OPENSSL_NO_SSL2
     RESOLVEFUNC(SSLv2_client_method)
 #endif
EOF
patch -ulbf src/network/ssl/qsslkey.cpp << EOF
@@ -328,7 +328,7 @@ int QSslKey::length() const
     if (d->algorithm == QSsl::Rsa) {
         return q_RSA_bits(d->rsa);
     }else{
-        BIGNUM *p = NULL;
+        const BIGNUM *p = NULL;
         q_DSA_get0_pqg(d->dsa, &p, NULL, NULL);
         return q_BN_num_bits(p);
     }
EOF
patch -ulbf src/network/ssl/qsslsocket_openssl_symbols_p.h << EOF
@@ -59,6 +59,9 @@
 QT_BEGIN_NAMESPACE
 
 #define DUMMYARG
+#ifndef OPENSSL_NO_SSL2
+#define OPENSSL_NO_SSL2 1
+#endif
 
 #if !defined QT_LINKED_OPENSSL
 // **************** Shared declarations ******************
@@ -207,16 +210,16 @@ int q_ASN1_STRING_length(ASN1_STRING *a)
 int q_ASN1_STRING_to_UTF8(unsigned char **a, ASN1_STRING *b);
 long q_BIO_ctrl(BIO *a, int b, long c, void *d);
 int q_BIO_free(BIO *a);
-BIO *q_BIO_new(BIO_METHOD *a);
+BIO *q_BIO_new(const BIO_METHOD *a);
 BIO *q_BIO_new_mem_buf(void *a, int b);
 int q_BIO_read(BIO *a, void *b, int c);
-BIO_METHOD *q_BIO_s_mem();
+const BIO_METHOD *q_BIO_s_mem();
 int q_BIO_write(BIO *a, const void *b, int c);
 int q_BN_num_bits(const BIGNUM *a);
 int q_CRYPTO_num_locks();
 void q_CRYPTO_set_locking_callback(void (*a)(int, int, const char *, int));
 void q_CRYPTO_set_id_callback(unsigned long (*a)());
-void q_CRYPTO_free(void *a);
+void q_OPENSSL_free(void *a);
 void q_DSA_free(DSA *a);
 #if OPENSSL_VERSION_NUMBER >= 0x00908000L
 // 0.9.8 broke SC and BC by changing this function's signature.
@@ -326,7 +329,6 @@ void q_SSL_set_accept_state(SSL *a);
 void q_SSL_set_connect_state(SSL *a);
 int q_SSL_shutdown(SSL *a);
 #if OPENSSL_VERSION_NUMBER >= 0x10000000L
-const SSL_METHOD *q_SSLv2_client_method();
 const SSL_METHOD *q_SSLv3_client_method();
 const SSL_METHOD *q_SSLv23_client_method();
 const SSL_METHOD *q_TLSv1_client_method();
@@ -335,7 +337,6 @@ const SSL_METHOD *q_SSLv3_server_method(
 const SSL_METHOD *q_SSLv23_server_method();
 const SSL_METHOD *q_TLSv1_server_method();
 #else
-SSL_METHOD *q_SSLv2_client_method();
 SSL_METHOD *q_SSLv3_client_method();
 SSL_METHOD *q_SSLv23_client_method();
 SSL_METHOD *q_TLSv1_client_method();
@@ -415,7 +416,7 @@ long q_X509_get_version(X509 *x);
 X509_PUBKEY * q_X509_get_X509_PUBKEY(X509 *x);
 int q_RSA_bits(const RSA *rsa);
 int q_DSA_security_bits(const DSA *dsa);
-void q_DSA_get0_pqg(const DSA *d, BIGNUM **p, BIGNUM **q, BIGNUM **g);
+void q_DSA_get0_pqg(const DSA *d, const BIGNUM **p, const BIGNUM **q, const BIGNUM **g);
 #endif
 
 #define q_SKM_sk_num(type, st) ((int (*)(const STACK_OF(type) *))q_sk_num)(st)
EOF
patch -ulbf src/network/ssl/qsslcertificate.cpp << EOF
@@ -696,7 +696,7 @@
         unsigned char *data = 0;
         int size = q_ASN1_STRING_to_UTF8(&data, q_X509_NAME_ENTRY_get_data(e));
         info[QString::fromUtf8(obj)] = QString::fromUtf8((char*)data, size);
-        q_CRYPTO_free(data);
+        q_OPENSSL_free(data);
     }
     return info;
 }
EOF
# fix missing _MCW_EM in src/corelib/tools/qlocale_tools.cpp (version >= 4.8.7)
mv src/corelib/tools/qlocale_tools.cpp src/corelib/tools/qlocale_tools.cpp.bak &&
echo "#undef __STRICT_ANSI__" > src/corelib/tools/qlocale_tools.cpp &&
cat src/corelib/tools/qlocale_tools.cpp.bak >> src/corelib/tools/qlocale_tools.cpp
# fix src/corelib/global/qglobal.h (version >= 4.8.7)
####See also: https://github.com/qt/qtbase/commit/c35a3f519007af44c3b364b9af86f6a336f6411b
####See also: http://git.yoctoproject.org/cgit/cgit.cgi/meta-qt4/tree/recipes-qt4/qt4/qt4-4.8.7/0038-prevent-gcc-9.2-miscompiling-Q_FOREACH.patch
patch -ulbf src/corelib/global/qglobal.h << EOF
@@ -2367,22 +2367,31 @@ typedef uint Flags;
 
 #endif /* Q_NO_TYPESAFE_FLAGS */
 
-#if defined(Q_CC_GNU) && !defined(Q_CC_INTEL) && !defined(Q_CC_RVCT)
+#if defined(Q_CC_GNU) && !defined(Q_CC_RVCT)
 /* make use of typeof-extension */
 template <typename T>
 class QForeachContainer {
 public:
-    inline QForeachContainer(const T& t) : c(t), brk(0), i(c.begin()), e(c.end()) { }
+    inline QForeachContainer(const T& t) : c(t), i(c.begin()), e(c.end()), control(1) { }
     const T c;
-    int brk;
     typename T::const_iterator i, e;
+    int control;
 };
 
+// Explanation of the control word:
+//  - it's initialized to 1
+//  - that means both the inner and outer loops start
+//  - if there were no breaks, at the end of the inner loop, it's set to 0, which
+//    causes it to exit (the inner loop is run exactly once)
+//  - at the end of the outer loop, it's inverted, so it becomes 1 again, allowing
+//    the outer loop to continue executing
+//  - if there was a break inside the inner loop, it will exit with control still
+//    set to 1; in that case, the outer loop will invert it to 0 and will exit too
 #define Q_FOREACH(variable, container)                                \\
 for (QForeachContainer<__typeof__(container)> _container_(container); \\
-     !_container_.brk && _container_.i != _container_.e;              \\
-     __extension__  ({ ++_container_.brk; ++_container_.i; }))                       \\
-    for (variable = *_container_.i;; __extension__ ({--_container_.brk; break;}))
+    _container_.control && _container_.i != _container_.e;            \\
+    ++_container_.i, _container_.control ^= 1)                        \\
+    for (variable = *_container_.i; _container_.control; _container_.control = 0)
 
 #else

EOF
# patch configure (version >= 4.8.7)
#### See also: https://github.com/Alexpux/MINGW-packages/blob/master/mingw-w64-qt4/qt-4.8.7-mingw-configure.patch
patch -ulbf configure << EOF
@@ -48,9 +48,19 @@
 relconf=\`basename \$0\`
 # the directory of this script is the "source tree"
 relpath=\`dirname \$0\`
-relpath=\`(cd "\$relpath"; /bin/pwd)\`
+if [ -n "\$MSYSTEM" ]; then
+  relpath=\$(cygpath -ma "\$relpath")
+  relpath=\${relpath%/}
+else
+  relpath=\`(cd "\$relpath"; /bin/pwd)\`
+fi
 # the current directory is the "build tree" or "object tree"
-outpath=\`/bin/pwd\`
+if [ -n "\$MSYSTEM" ]; then
+  outpath=\$(cygpath -ma \$(/bin/pwd))
+  outpath=\${outpath%/}
+else
+  outpath=\`/bin/pwd\`
+fi
 
 #license file location
 LICENSE_FILE="\$QT_LICENSE_FILE"
@@ -753,6 +763,7 @@
 CFG_ZLIB=auto
 CFG_SYMBIAN_DEFFILES=auto
 CFG_S60=auto
+CFG_NATIVE_GESTURES=auto
 CFG_SQLITE=qt
 CFG_GIF=auto
 CFG_TIFF=auto
@@ -1144,7 +1155,7 @@
         VAL=no
         ;;
     #Qt style yes options
-    -incremental|-qvfb|-profile|-shared|-static|-sm|-xinerama|-xshape|-xsync|-xinput|-egl|-reduce-exports|-pch|-separate-debug-info|-stl|-freetype|-xcursor|-xfixes|-xrandr|-xrender|-mitshm|-fontconfig|-xkb|-nis|-qdbus|-dbus|-dbus-linked|-glib|-gstreamer|-gtkstyle|-cups|-iconv|-largefile|-h|-help|-v|-verbose|-debug|-release|-fast|-accessibility|-confirm-license|-gnumake|-framework|-qt3support|-debug-and-release|-exceptions|-cocoa|-carbon|-universal|-harfbuzz|-prefix-install|-silent|-armfpa|-optimized-qmake|-dwarf2|-reduce-relocations|-sse|-openssl|-openssl-linked|-ptmalloc|-xmlpatterns|-phonon|-phonon-backend|-multimedia|-audio-backend|-svg|-declarative|-declarative-debug|-javascript-jit|-script|-scripttools|-rpath|-force-pkg-config|-s60|-usedeffiles|-icu)
+    -incremental|-qvfb|-profile|-shared|-static|-sm|-xinerama|-xshape|-xsync|-xinput|-egl|-reduce-exports|-pch|-separate-debug-info|-stl|-freetype|-xcursor|-xfixes|-xrandr|-xrender|-mitshm|-fontconfig|-xkb|-nis|-qdbus|-dbus|-dbus-linked|-glib|-gstreamer|-gtkstyle|-cups|-iconv|-largefile|-h|-help|-v|-verbose|-debug|-release|-fast|-accessibility|-confirm-license|-gnumake|-framework|-qt3support|-debug-and-release|-exceptions|-cocoa|-carbon|-universal|-harfbuzz|-prefix-install|-silent|-armfpa|-optimized-qmake|-dwarf2|-reduce-relocations|-sse|-openssl|-openssl-linked|-ptmalloc|-xmlpatterns|-phonon|-phonon-backend|-multimedia|-audio-backend|-svg|-declarative|-declarative-debug|-javascript-jit|-script|-scripttools|-rpath|-force-pkg-config|-s60|-native-gestures|-usedeffiles|-icu)
         VAR=\`echo \$1 | sed "s,^-\\(.*\\),\\1,"\`
         VAL=yes
         ;;
@@ -1376,7 +1387,11 @@
         CFG_PSQL_CONFIG="\$VAL"
         ;;
     prefix)
-        QT_INSTALL_PREFIX="\$VAL"
+        if [ -n "\$MSYSTEM" ]; then
+          QT_INSTALL_PREFIX=\$(cygpath -ma "\$VAL")
+        else
+          QT_INSTALL_PREFIX="\$VAL"
+        fi
         ;;
     hostprefix)
         QT_HOST_PREFIX="\$VAL"
@@ -1988,6 +2003,13 @@
             UNKNOWN_OPT=yes
         fi
         ;;
+    native-gestures)
+        if [ "\$VAL" = "yes" ] || [ "\$VAL" = "no" ]; then
+            CFG_NATIVE_GESTURES="\$VAL"
+        else
+            UNKNOWN_OPT=yes
+        fi
+        ;;
     usedeffiles)
         if [ "\$VAL" = "yes" ] || [ "\$VAL" = "no" ]; then
             CFG_SYMBIAN_DEFFILES="\$VAL"
@@ -2966,6 +2988,12 @@
             - Also available for Reliant UNIX: reliant-cds-64
         "
         ;;
+     MSYS*:* | MINGW*:*)
+        PLATFORM=win32-g++
+        if [ -z "\$XPLATFORM" ]; then
+            XPLATFORM="win32-g++"
+        fi
+        ;;
      CYGWIN*:*)
         PLATFORM=cygwin-g++
         ;;
@@ -3139,6 +3167,13 @@
 
 if [ -z "\${CFG_HOST_ARCH}" ]; then
     case "\$UNAME_SYSTEM:\$UNAME_RELEASE:\$UNAME_MACHINE" in
+    MINGW*:*:*)
+        MACHINE_GCC=\`(gcc -dumpmachine) 2>/dev/null\`
+        CFG_HOST_ARCH=\${MACHINE_GCC%%-*}
+        if [ "\$OPT_VERBOSE" = "yes" ]; then
+            echo "    MINGW/MSYS (\$CFG_HOST_ARCH)"
+        fi
+        ;;
     GNU:*:*)
         CFG_HOST_ARCH=\`echo \${UNAME_MACHINE} | sed -e 's,[-/].*\$,,'\`
         case "\$CFG_HOST_ARCH" in
@@ -3754,6 +3794,8 @@
     if [ -z "\$QT_INSTALL_SETTINGS" ]; then #default
         if [ "\$PLATFORM_MAC" = "yes" ]; then
            QT_INSTALL_SETTINGS=/Library/Preferences/Qt
+        elif [ "\$XPLATFORM_MINGW" = "yes" ]; then
+           QT_INSTALL_SETTINGS="\$QT_INSTALL_PREFIX/etc"
         else
            QT_INSTALL_SETTINGS=/etc/xdg
         fi
@@ -4545,6 +4587,15 @@
 EOF
 fi
 
+if [ "\$XPLATFORM_MINGW" = "yes" ]; then
+    cat << EOF
+
+Qt for Windows only:
+    -no-native-gestures ............ Do not use native gestures on Windows 7.
+ +  -native-gestures ............... Use native gestures on Windows 7.
+EOF
+fi
+
 if [ "\$XPLATFORM_SYMBIAN" = "yes" ]; then
     cat << EOF
 
@@ -4943,7 +4994,15 @@
 
     #mkspecs/default is used as a (gasp!) default mkspec so QMAKESPEC needn't be set once configured
     rm -rf mkspecs/default
-    ln -s \`echo \$XQMAKESPEC | sed "s,^\${relpath}/mkspecs/,,"\` mkspecs/default
+    if [ "\$XPLATFORM_MINGW" = "yes" ]; then
+      mkdir -p mkspecs/default
+      _spec=\$(echo \$XQMAKESPEC | sed "s,^\${relpath}/mkspecs/,,")
+      echo "QMAKESPEC_ORIGINAL=\$XQMAKESPEC" > mkspecs/default/qmake.conf
+      echo "include(../\${_spec}/qmake.conf)" >> mkspecs/default/qmake.conf
+      echo "#include \\"../\${_spec}/qplatformdefs.conf\\"" > mkspecs/default/qplatformdefs.h
+    else
+      ln -s \`echo \$XQMAKESPEC | sed "s,^\${relpath}/mkspecs/,,"\` mkspecs/default
+    fi
     # fix makefiles
     for mkfile in GNUmakefile Makefile; do
         EXTRA_LFLAGS=
@@ -4953,7 +5012,11 @@
 #           if which qmake >/dev/null 2>&1 && [ -f qmake/qmake.pro ]; then
 #               (cd qmake && qmake) >/dev/null 2>&1 && continue
 #           fi
-            in_mkfile="\${mkfile}.unix"
+            if [ "\$PLATFORM" = "win32-g++" ]; then
+              in_mkfile="\${mkfile}.win32-g++-sh"
+            else
+              in_mkfile="\${mkfile}.unix"
+            fi
         fi
         in_mkfile="\$relpath/qmake/\$in_mkfile"
         mkfile="\$outpath/qmake/\$mkfile"
@@ -5362,7 +5425,7 @@
 fi
 
 # check IPC support
-if [ "\$XPLATFORM_SYMBIAN_SBSV2" = "no" ]; then
+if [ "\$XPLATFORM_SYMBIAN_SBSV2" = "no" ] && [ "\$XPLATFORM_MINGW" = "no" ]; then
     # Raptor does not support configure tests.
     if ! compileTest unix/ipc_sysv "ipc_sysv" ; then
         # SYSV IPC is not supported - check POSIX IPC
@@ -5415,6 +5478,13 @@
     CFG_LARGEFILE=yes
 fi
 
+if [ "\$CFG_NATIVE_GESTURES" = auto ]; then
+    if [ "\$XPLATFORM_MINGW" = "yes" ]; then
+        CFG_NATIVE_GESTURES=yes
+    else
+        CFG_NATIVE_GESTURES=no
+    fi
+fi
 
 if [ "\$CFG_S60" = "auto" ]; then
     if [ "\$XPLATFORM_SYMBIAN" = "yes" ]; then
@@ -5579,7 +5649,7 @@
             if [ "\$CFG_SQL_psql" != "no" ]; then
                 [ -z "\$CFG_PSQL_CONFIG" ] && CFG_PSQL_CONFIG=\`"\$WHICH" pg_config\`
                 # Be careful not to use native pg_config when cross building.
-                if [ "\$XPLATFORM_MINGW" != "yes" ] && [ -x "\$CFG_PSQL_CONFIG" ]; then
+                if [ -x "\$CFG_PSQL_CONFIG" ] && [ "\$QT_CROSS_COMPILE" = "no" ]; then
                     QT_CFLAGS_PSQL=\`\$CFG_PSQL_CONFIG --includedir 2>/dev/null\`
                     QT_LFLAGS_PSQL=\`\$CFG_PSQL_CONFIG --libdir 2>/dev/null\`
                 fi
@@ -6699,6 +6769,24 @@
 
 fi # QWS
 
+if [ "\$XPLATFORM_MINGW" = "yes" ] && [ "\$QT_CROSS_COMPILE" = "no" ]; then
+    # auto-detect FontConfig support
+    if [ "\$CFG_FONTCONFIG" != "no" ]; then
+        if [ -n "\$PKG_CONFIG" ] && \$PKG_CONFIG --exists fontconfig --exists freetype2 2>/dev/null; then
+            QT_CFLAGS_FONTCONFIG=\`\$PKG_CONFIG --cflags fontconfig --cflags freetype2 2>/dev/null\`
+            QT_LIBS_FONTCONFIG=\`\$PKG_CONFIG --libs fontconfig --libs freetype2 2>/dev/null\`
+        else
+            QT_CFLAGS_FONTCONFIG=
+            QT_LIBS_FONTCONFIG="-lfreetype -lfontconfig"
+        fi
+        if compileTest x11/fontconfig "FontConfig" \$QT_CFLAGS_FONTCONFIG \$QT_LIBS_FONTCONFIG; then
+                QT_CONFIG="\$QT_CONFIG fontconfig"
+                QMakeVar set QMAKE_CFLAGS_FONTCONFIG "\$QT_CFLAGS_FONTCONFIG"
+                QMakeVar set QMAKE_LIBS_FONTCONFIG "\$QT_LIBS_FONTCONFIG"
+        fi
+    fi
+fi # MINGW
+
 EGL_VARIANT=none
 # EGL Support
 if [ "\$PLATFORM_X11" = "yes" -o "\$PLATFORM_QWS" = "yes" ]; then
@@ -7398,7 +7486,7 @@
     QMakeVar set RCC_DIR ".rcc/\$QMAKE_OUTDIR"
     QMakeVar set UI_DIR ".uic/\$QMAKE_OUTDIR"
 fi
-if [ "\$CFG_LARGEFILE" = "yes" ] && [ "\$XPLATFORM_MINGW" != "yes" ]; then
+if [ "\$CFG_LARGEFILE" = "yes" ]; then
     QMAKE_CONFIG="\$QMAKE_CONFIG largefile"
 fi
 if [ "\$CFG_STL" = "no" ]; then
@@ -7669,6 +7757,10 @@
     # Follow default behavior of configure.exe by overriding with "rtti"
     # (also on Symbian).
     QTCONFIG_CONFIG="\$QTCONFIG_CONFIG rtti"
+    
+    if [ "\$CFG_NATIVE_GESTURES" = "yes" ]; then
+        QTCONFIG_CONFIG="\$QTCONFIG_CONFIG native-gestures"
+    fi
 fi
 
 if [ "\$CFG_ALSA" = "yes" ]; then
@@ -8263,6 +8355,15 @@
     ;;
 esac
 
+if [ "\$XPLATFORM_MINGW" = "yes" ] && [ "\$CFG_SHARED" = "yes" ]; then
+    cat >>"\$outpath/src/corelib/global/qconfig.h.new" <<EOF
+
+#ifndef QT_DLL
+#define QT_DLL
+#endif
+EOF
+fi
+
 cat >>"\$outpath/src/corelib/global/qconfig.h.new" <<EOF
 
 /* Qt Edition */
@@ -8367,7 +8468,7 @@
 echo '/* Compile time features */' >>"\$outpath/src/corelib/global/qconfig.h.new"
 [ '!' -z "\$LicenseKeyExt" ] && echo "#define QT_PRODUCT_LICENSEKEY \\"\$LicenseKeyExt\\"" >>"\$outpath/src/corelib/global/qconfig.h.new"
 
-if [ "\$CFG_LARGEFILE" = "yes" ] && [ "\$XPLATFORM_MINGW" != "yes" ]; then
+if [ "\$CFG_LARGEFILE" = "yes" ]; then
     echo "#define QT_LARGEFILE_SUPPORT 64" >>"\$outpath/src/corelib/global/qconfig.h.new"
 fi
 
@@ -8508,7 +8609,7 @@
 [ "\$CFG_ICONV" = "no" ]      && QCONFIG_FLAGS="\$QCONFIG_FLAGS QT_NO_ICONV"
 [ "\$CFG_GLIB" != "yes" ]     && QCONFIG_FLAGS="\$QCONFIG_FLAGS QT_NO_GLIB"
 [ "\$CFG_QGTKSTYLE" != "yes" ] && QCONFIG_FLAGS="\$QCONFIG_FLAGS QT_NO_STYLE_GTK"
-if [ "\$XPLATFORM_SYMBIAN" = "no" ]; then
+if [ "\$XPLATFORM_SYMBIAN" = "no" ] && [ "\$XPLATFORM_MINGW" = "no" ]; then
     # Do not apply following negative X11/Unix/Mac only flags on Symbian, so that
     # configuration matches with the one generated by configure executable tool
     [ "\$CFG_CUPS" = "no" ]       && QCONFIG_FLAGS="\$QCONFIG_FLAGS QT_NO_CUPS"
@@ -9010,6 +9111,7 @@
 fi
 echo "Support for S60 ........ \$CFG_S60"
 echo "Symbian DEF files ...... \$CFG_SYMBIAN_DEFFILES"
+echo "Use native gestures .... \$CFG_NATIVE_GESTURES"
 echo "STL support ............ \$CFG_STL"
 echo "PCH support ............ \$CFG_PRECOMPILE"
 echo "MMX/3DNOW/SSE/SSE2/SSE3. \${CFG_MMX}/\${CFG_3DNOW}/\${CFG_SSE}/\${CFG_SSE2}/\${CFG_SSE3}"
@@ -9058,6 +9160,10 @@
 fi
 echo "zlib support ........... \$CFG_ZLIB"
 echo "Session management ..... \$CFG_SM"
+if [ "\$XPLATFORM_MINGW" = "yes" ]; then
+    echo "Freetype2 support ...... \$CFG_LIBFREETYPE"
+    echo "FontConfig support ..... \$CFG_FONTCONFIG"
+fi
 if [ "\$PLATFORM_QWS" = "yes" ]; then
     echo "Embedded support ....... \$CFG_EMBEDDED"
     if [ "\$CFG_QWS_FREETYPE" = "auto" ]; then
EOF
## determine installation path needed
#mkdir -p $INSTALLPREFIX &&
#pushd $INSTALLPREFIX > /dev/null &&
#INSTALLPREFIXWIN=$(pwd -W) &&
##INSTALLPREFIXWIN=$(pwd) &&
#popd > /dev/null
#./configure -platform win32-g++ -help
## make sure precompiled headers are not used
#sed -i.bak -e "s/^\(\s*CFG_PRECOMPILE=\).*$/\1no/" configure
wl-showstatus configure &&
 #CPLUS_INCLUDE_PATH=$(pwd)/include/QtCore:$(pwd)/src/corelib/tools:$(pwd)/tools/shared:$(pwd)/include${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} ./configure -platform win32-g++ -host-little-endian -prefix $INSTALLPREFIX/qt4 -opensource -confirm-license -release -shared -no-rpath -optimized-qmake -nomake "examples demos" -plugin-sql-odbc -plugin-sql-sqlite -opengl desktop -fontconfig -no-libmng -no-glib -system-zlib -icu -no-dbus -system-libpng -system-libjpeg -qt-freetype -openssl &&
 #CPLUS_INCLUDE_PATH=$(pwd)/include/QtCore:$(pwd)/src/corelib/tools:$(pwd)/tools/shared:$(pwd)/include:$MINGWPREFIX/include/mariadb${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} ./configure -platform win32-g++ -host-little-endian -prefix $INSTALLPREFIX/qt4 -opensource -confirm-license -release -shared -no-rpath -optimized-qmake -nomake "examples demos" -plugin-sql-odbc -plugin-sql-sqlite -opengl desktop -fontconfig -no-libmng -no-glib -icu -no-dbus -system-zlib -system-libpng -system-libjpeg -system-sqlite -qt-freetype -openssl -openssl-linked -system-proxies -native-gestures -I $MINGWPREFIX/include/freetype2 -I $MINGWPREFIX/include/mariadb &&
 #CPLUS_INCLUDE_PATH=$(pwd)/include/QtCore:$(pwd)/src/corelib/tools:$(pwd)/tools/shared:$(pwd)/include:$MINGWPREFIX/include/mariadb${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} ./configure -platform win32-g++ -host-little-endian -prefix $INSTALLPREFIX/qt4 -opensource -confirm-license -release -shared -no-rpath -optimized-qmake -nomake "examples demos" -plugin-sql-odbc -plugin-sql-sqlite -plugin-sql-tds -plugin-sql-mysql -plugin-sql-psql -opengl desktop -fontconfig -no-glib -icu -no-dbus -system-zlib -system-libpng -system-libjpeg -system-sqlite -qt-freetype -openssl -openssl-linked -system-proxies -native-gestures -I $MINGWPREFIX/include/freetype2 -I $MINGWPREFIX/include/mariadb &&
 #CPLUS_INCLUDE_PATH=$(pwd)/include/QtCore:$(pwd)/src/corelib/tools:$(pwd)/tools/shared:$(pwd)/include:$MINGWPREFIX/include/mariadb${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} ./configure -platform win32-g++ -host-little-endian -prefix $INSTALLPREFIX/qt4 -opensource -confirm-license -release -shared -no-rpath -optimized-qmake -fast -nomake "examples demos" -plugin-sql-odbc -plugin-sql-sqlite -plugin-sql-tds -plugin-sql-mysql -plugin-sql-psql -opengl desktop -fontconfig -no-glib -icu -no-dbus -no-libmng -system-zlib -system-libpng -system-libjpeg -system-sqlite -qt-freetype -openssl -openssl-linked -system-proxies -native-gestures -I $MINGWPREFIX/include/freetype2 -I $MINGWPREFIX/include/mariadb &&
 #CPLUS_INCLUDE_PATH=$(pwd)/include/QtCore:$(pwd)/src/corelib/tools:$(pwd)/tools/shared:$(pwd)/include:$MINGWPREFIX/include/mariadb${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} ./configure -platform win32-g++ -host-little-endian -prefix $INSTALLPREFIX/qt4 -opensource -confirm-license -release -shared -no-rpath -optimized-qmake -fast -nomake "examples demos" -plugin-sql-odbc -plugin-sql-sqlite -plugin-sql-tds -plugin-sql-mysql -plugin-sql-psql -opengl desktop -fontconfig -no-glib -icu -no-dbus -system-libmng -system-zlib -system-libpng -system-libjpeg -system-sqlite -qt-freetype -openssl -openssl-linked -system-proxies -native-gestures -I $MINGWPREFIX/include/freetype2 -I $MINGWPREFIX/include/mariadb &&
 #CPLUS_INCLUDE_PATH=$(pwd)/include/QtCore:$(pwd)/src/corelib/tools:$(pwd)/tools/shared:$(pwd)/include:$MINGWPREFIX/include/mariadb${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} ./configure -platform win32-g++ -host-little-endian -prefix $INSTALLPREFIX/qt4 -opensource -confirm-license -release -shared -no-rpath -optimized-qmake -fast -nomake "examples demos" -no-pch -plugin-sql-odbc -plugin-sql-sqlite -plugin-sql-tds -plugin-sql-mysql -plugin-sql-psql -opengl desktop -fontconfig -no-glib -icu -no-dbus -system-libmng -system-zlib -system-libpng -system-libjpeg -system-sqlite -qt-freetype -no-openssl -system-proxies -native-gestures -I $MINGWPREFIX/include/freetype2 -I $MINGWPREFIX/include/mariadb &&
 #CPLUS_INCLUDE_PATH=$(pwd)/include/QtCore:$(pwd)/src/corelib/tools:$(pwd)/tools/shared:$(pwd)/include:$MINGWPREFIX/include/mariadb${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} ./configure -platform win32-g++ -host-little-endian -prefix $INSTALLPREFIX/qt4 -opensource -confirm-license -release -shared -no-rpath -optimized-qmake -fast -nomake "examples demos" -no-pch -plugin-sql-odbc -plugin-sql-sqlite -plugin-sql-tds -plugin-sql-mysql -plugin-sql-psql -opengl desktop -fontconfig -no-glib -icu -no-dbus -system-libmng -system-zlib -system-libpng -system-libjpeg -system-sqlite -qt-freetype -openssl -openssl-linked -system-proxies -native-gestures -I $MINGWPREFIX/include/freetype2 -I $MINGWPREFIX/include/mariadb &&
 #CPLUS_INCLUDE_PATH=$(pwd)/include/QtCore:$(pwd)/src/corelib/tools:$(pwd)/tools/shared:$(pwd)/include:$MINGWPREFIX/include/mariadb${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} ./configure -platform win32-g++ -host-little-endian -prefix $(cygpath -m $INSTALLPREFIX/qt4) -opensource -confirm-license -release -shared -no-rpath -optimized-qmake -fast -nomake "examples demos" -no-pch -plugin-sql-odbc -plugin-sql-sqlite -plugin-sql-tds -plugin-sql-mysql -plugin-sql-psql -opengl desktop -fontconfig -no-glib -icu -no-dbus -system-libmng -system-zlib -system-libpng -system-libjpeg -system-sqlite -qt-freetype -openssl -openssl-linked -system-proxies -native-gestures -I $MINGWPREFIX/include/freetype2 -I $MINGWPREFIX/include/mariadb &&
 #CPLUS_INCLUDE_PATH=$(pwd)/include/QtCore:$(pwd)/src/corelib/tools:$(pwd)/tools/shared:$(pwd)/include:$MINGWPREFIX/include/mariadb${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} ./configure -platform win32-g++ -host-little-endian -prefix $(cygpath -m $INSTALLPREFIX/qt4) -opensource -confirm-license -release -shared -no-rpath -optimized-qmake -fast -nomake "examples demos" -no-pch -no-multimedia -no-webkit -no-script -no-phonon -no-accessibility -plugin-sql-odbc -plugin-sql-sqlite -plugin-sql-tds -plugin-sql-mysql -plugin-sql-psql -opengl desktop -fontconfig -no-glib -icu -no-dbus -system-libmng -system-zlib -system-libpng -system-libjpeg -system-sqlite -qt-freetype -openssl -openssl-linked -system-proxies -no-native-gestures -I $MINGWPREFIX/include/freetype2 -I $MINGWPREFIX/include/mariadb &&
 CPLUS_INCLUDE_PATH=$(pwd)/include/QtCore:$(pwd)/src/corelib/tools:$(pwd)/tools/shared:$(pwd)/include:$MINGWPREFIX/include/mariadb${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} ./configure -platform win32-g++ -host-little-endian -prefix $(cygpath -m $INSTALLPREFIX/qt4) -opensource -confirm-license -release -shared -no-rpath -optimized-qmake -fast -nomake "examples demos" -no-pch -no-multimedia -no-webkit -no-script -no-phonon -no-accessibility -plugin-sql-odbc -plugin-sql-sqlite -plugin-sql-tds -plugin-sql-mysql -plugin-sql-psql -opengl desktop -fontconfig -no-glib -icu -no-dbus -system-libmng -system-zlib -system-libpng -system-libjpeg -system-sqlite -qt-freetype -openssl -openssl-linked -system-proxies -native-gestures -I $MINGWPREFIX/include/freetype2 -I $MINGWPREFIX/include/mariadb &&
 #CPLUS_INCLUDE_PATH=$(pwd)/include/QtCore:$(pwd)/src/corelib/tools:$(pwd)/tools/shared:$(pwd)/include:$MINGWPREFIX/include/mariadb${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} ./configure -platform win32-g++ -host-little-endian -prefix $(cygpath -w $INSTALLPREFIX/qt4) -opensource -confirm-license -release -shared -no-rpath -optimized-qmake -fast -nomake "examples demos" -no-pch -no-multimedia -no-webkit -no-script -no-phonon -no-accessibility -plugin-sql-odbc -plugin-sql-sqlite -plugin-sql-tds -plugin-sql-mysql -plugin-sql-psql -opengl desktop -fontconfig -no-glib -icu -no-dbus -system-libmng -system-zlib -system-libpng -system-libjpeg -system-sqlite -qt-freetype -openssl -openssl-linked -system-proxies -native-gestures -I $MINGWPREFIX/include/freetype2 -I $MINGWPREFIX/include/mariadb &&
 #CPLUS_INCLUDE_PATH=$(pwd)/include/QtCore:$(pwd)/src/corelib/tools:$(pwd)/tools/shared:$(pwd)/include:$MINGWPREFIX/include/mariadb${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} ./configure -platform win32-g++ -host-little-endian -prefix $(cygpath -m $INSTALLPREFIX/qt4) -opensource -confirm-license -release -shared -no-rpath -optimized-qmake -fast -nomake "examples demos" -no-pch -qt3support -system-freetype -fontconfig -plugin-sql-odbc -plugin-sql-sqlite -plugin-sql-tds -plugin-sql-mysql -plugin-sql-psql -opengl desktop -fontconfig -no-glib -iconv -dbus-linked -system-libmng -system-zlib -system-libpng -system-libjpeg -system-sqlite -qt-freetype -openssl-linked -xmlpatterns -system-proxies -native-gestures -I $MINGWPREFIX/include/freetype2 -I $MINGWPREFIX/include/mariadb &&
 #-fast -iconv -system-libmng
 ### clean up stray files (needed if Ctrl-C was pressed during a previous build)
 ##( rm -rf $INSTALLPREFIX $(find -name *.o -size 0) || true ) &&
 #wl-showstatus build-install &&
 #(
 # CPLUS_INCLUDE_PATH=$MINGWPREFIX/include/mariadb${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} make install ||
 # (
 #  # fix using MariaDB instead of MySQL
 #  CPLUS_INCLUDE_PATH=$MINGWPREFIX/include/mariadb${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} make -C src/plugins/sqldrivers/mysql
 #  sed -i.bak -e "s/-llibmysql/-lmariadb/" src/plugins/sqldrivers/mysql/Makefile.Release &&
 #  CPLUS_INCLUDE_PATH=$MINGWPREFIX/include/mariadb${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} make -C src/plugins/sqldrivers/mysql
 #  # try to build src/script with an older C++ standard
 #  make -Csrc/script CXX="${CXX:-g++} -std=c++98"
 #  # try to build src/plugins/accessible/widgets with an older C++ standard
 #  make -Csrc/plugins/accessible/widgets CXX="${CXX:-g++} -std=c++98"
 #  make install
 # ) ||
 #  make install CXX="${CXX:-g++} -std=c++98" || (
 #  cp -f src/corelib/global/qt_pch.h src/network/.obj/release-shared/ &&
 #  #cp -f src/gui/kernel/qt_gui_pch.h src/gui/.obj/release-shared/ &&
 #  make install
 # #) || (
 # # make -i clean &&
 # # CPLUS_INCLUDE_PATH=$MINGWPREFIX/include/mariadb${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} make install CXX="${CXX:-g++} -std=gnu++98 -Winvalid-pch"
 # )
 #) &&
 #wl-showstatus build-install &&
 #(
 # CPLUS_INCLUDE_PATH=$MINGWPREFIX/include/mariadb${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} make CXX="${CXX:-g++} -Winvalid-pch -D__STRICT_ANSI__ -std=c++11" install ||
 # #-Wno-register
 # (
 #  #sed -i.bak -e "s/-llibmysql/-lmariadb/" src/plugins/sqldrivers/mysql/Makefile.Release &&
 #  sed -i.bak -e "s/-llibmysql/-lmariadb/" src/plugins/sqldrivers/mysql/Makefile* &&
 #  #sed -i.bak -e "s?-llibmysql?$MINGWPREFIX/bin/libmariadb.dll?" src/plugins/sqldrivers/mysql/Makefile.Release &&
 #  CPLUS_INCLUDE_PATH=$MINGWPREFIX/include/mariadb${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} make CXX="${CXX:-g++} -Winvalid-pch -D__STRICT_ANSI__ -std=c++11" install
 #)) &&
 wl-showstatus build-install &&
 # fix invalid -llibmysql
 ( CPLUS_INCLUDE_PATH=$MINGWPREFIX/include/mariadb${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} mingw32-make install || (
  sed -i.bak -e "s?-llibmysql?-lmariadb?" src/plugins/sqldrivers/mysql/Makefile* &&
  CPLUS_INCLUDE_PATH=$MINGWPREFIX/include/mariadb${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} mingw32-make install
 )) &&
 #wl-showstatus build-install &&
 #(
 # CPLUS_INCLUDE_PATH=$MINGWPREFIX/include/mariadb${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} make CXX="${CXX:-g++} -Winvalid-pch -D__STRICT_ANSI__ -std=gnu++11" install ||
 # (
 #  sed -i.bak -e "s/-llibmysql/-lmariadb/" src/plugins/sqldrivers/mysql/Makefile.Release &&
 #  #sed -i.bak -e "s?-llibmysql?$MINGWPREFIX/bin/libmariadb.dll?" src/plugins/sqldrivers/mysql/Makefile.Release &&
 #  CPLUS_INCLUDE_PATH=$MINGWPREFIX/include/mariadb${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} make CXX="${CXX:-g++} -Winvalid-pch -D__STRICT_ANSI__ -std=gnu++11" install
 #)) &&
 # fix wrong installation path by moving files
 rm -rf $INSTALLPREFIX &&
 mkdir -p $INSTALLPREFIX &&
 #mv -f ./$(echo $INSTALLPREFIX|sed "s?^/\([A-Z]\)/?\1\\:/?")/qt4 $INSTALLPREFIX/ &&
 ##mv -f ./$INSTALLPREFIXWIN/qt4 $INSTALLPREFIX/ &&
 mv -f ./$(cygpath -m $INSTALLPREFIX)/qt4 $INSTALLPREFIX/ &&
 #mv -f $(find ./[A-Z]\: -name qt4) $INSTALLPREFIX/ &&
 #rm -rf [A-Z]/*\: &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf qt-$VERSION
 #wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf qt-everywhere-opensource-src-$VERSION
####rm -rf $(find -name '*.gch')
####g++ -std=c++11 src/corelib/global/qt_pch.h --output-pch=src/corelib/.obj/release-shared/qt_pch.h -Iinclude -Isrc/corelib/global -Isrc/corelib/kernel -Isrc/corelib/tools -Isrc/corelib/codecs
####TO DO: fix wrong static path in QtCore4.dll (may not really be a problem)




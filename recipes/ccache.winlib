#export NAME="ccache"
#export STATUS=
#export URL=http://ccache.samba.org/
#export BASENAME=ccache
#export DESCRIPTION="ccache is a compiler cache. It speeds up recompilation by caching previous compilations and detecting when the same compilation is being done again. Supported languages are C, C++, Objective-C and Objective-C++."
#export CATEGORY=
#export TYPE=library
##export VERSION=3.1.8
##export VERSIONDATE=20130103
##export VERSION=3.1.9
##export VERSIONDATE=20130107
#####ccache.c:411: undefined reference to `_x_realpath'
##export VERSION=3.1.10
##export VERSIONDATE=20141020
##export VERSION=3.1.11
##export VERSIONDATE=20150308
##export VERSION=3.1.12
##export VERSIONDATE=20160715
##export VERSION=3.2
##export VERSIONDATE=20141118
##export VERSION=3.2.1
##export VERSIONDATE=20141211
#####ccache.c:2315:9: error: 'SIGHUP' undeclared (first use in this function) signal(SIGHUP, signal_handler);
##export VERSION=3.2.2
##export VERSIONDATE=20150510
##export VERSION=3.2.3
##export VERSIONDATE=20150816
#####make: *** No rule to make target '-lz', needed by 'ccache.exe'.  Stop.
##export VERSION=3.2.4
##export VERSIONDATE=20151009
##export VERSION=3.2.5
##export VERSIONDATE=20160418
##export VERSION=3.2.6
##export VERSIONDATE=20160715
##export VERSION=3.2.7
##export VERSIONDATE=20160722
##export VERSION=3.2.8
##export VERSIONDATE=20160909
#####ccache.c:242:8: error: unknown type name 'sigset_t'
##export VERSION=3.3
##export VERSIONDATE=20160828
##export VERSION=3.3.1
##export VERSIONDATE=20160909
##export VERSION=3.3.3
##export VERSIONDATE=20161027
##export VERSION=3.3.4
##export VERSIONDATE=20170219
##export VERSION=3.3.5
##export VERSIONDATE=20180114
##export VERSION=3.3.6
##export VERSIONDATE=20180129
##export VERSION=3.4.1
##export VERSIONDATE=20180212
##export VERSION=3.4.2
##export VERSIONDATE=20180326
##export VERSION=3.4.3
##export VERSIONDATE=20180902
##export VERSION=3.5
##export VERSIONDATE=20181016
##export VERSION=3.5.1
##export VERSIONDATE=20190103
##export VERSION=3.5.1a
##export VERSIONDATE=20190104
##export VERSION=3.6
##export VERSIONDATE=20190115
##export VERSION=3.7
##export VERSIONDATE=20190424
##export VERSION=3.7.1
##export VERSIONDATE=20190502
##export VERSION=3.7.2
##export VERSIONDATE=20190720
##export VERSION=3.7.3
##export VERSIONDATE=20190818
##export VERSION=3.7.4
##export VERSIONDATE=20190913
##export VERSION=3.7.5
##export VERSIONDATE=20191023
##export VERSION=3.7.6
##export VERSIONDATE=20191118
##export VERSION=3.7.7
##export VERSIONDATE=20200106
##export VERSION=3.7.8
##export VERSIONDATE=20200317
##export VERSION=3.7.9
##export VERSIONDATE=20200330
##export VERSION=3.7.10
##export VERSIONDATE=20200623
##export VERSION=3.7.11
##export VERSIONDATE=20200722
#export VERSION=3.7.12
#export VERSIONDATE=20201002
#####make: *** No rule to make target '@getopt_long_c@', needed by 'ccache.exe'.  Stop.
#wl-showstatus --package-version
#export DEPENDANCIES=zlib
#export OPTIONALDEPENDANCIES=
#export BUILDDEPENDANCIES=
##export LICENSEFILE=LICENSE.txt
#export LICENSEFILE=GPL-3.0.txt
#export LICENSETYPE=GPLv3
##export DOWNLOADURL="http://ccache.samba.org/download.html"
#export DOWNLOADURL="https://github.com/ccache/ccache/releases/"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
##export DOWNLOADSOURCEURL=http://samba.org/ftp/ccache/$BASENAME-$VERSION.tar.xz
#export DOWNLOADSOURCEURL=https://github.com/ccache/ccache/releases/download/v$VERSION/$BASENAME-$VERSION.tar.xz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#tar xfJ $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.xz
#cd $BASENAME-$(echo $VERSION|sed -e "s/[a-z]*$//")
### fix util.c
##patch -ulbf util.c << EOF
##--- util.c  2013-01-06 17:58:00 +0100
##+++ util.c  2013-12-16 16:22:54 +0100
##@@ -51,2 +51,3 @@
##                int fd = fileno(logfile);
##+#ifndef __MINGW32__
##                int flags = fcntl(fd, F_GETFD, 0);
##@@ -55,2 +56,5 @@
##                }
##+#else
##+               SetHandleInformation(_get_osfhandle(fd), HANDLE_FLAG_INHERIT, 0);
##+#endif
##                return true;
##@@ -70,7 +74,3 @@
##        gettimeofday(&tv, NULL);
##-#ifdef __MINGW64_VERSION_MAJOR
##-       tm = _localtime32(&tv.tv_sec);
##-#else
##        tm = localtime(&tv.tv_sec);
##-#endif
##        strftime(timestamp, sizeof(timestamp), "%Y-%m-%dT%H:%M:%S", tm);
##@@ -862,2 +862,41 @@
## }
##+#else /* !_WIN32 */
##+static char* slashify (char* str)
##+{
##+  char *p = str;
##+  while (*p) {
##+    if (*p == '\\\\\\\\')
##+      *p = '/';
##+    p++;
##+  }
##+  return str;
##+}
##+
##+static char* strlower (char* str)
##+{
##+  char *p = str;
##+  while (*p) {
##+    *p = (char)tolower(*p);
##+    p++;
##+  }
##+  return str;
##+}
##+
##+char* x_realpath (const char* name)
##+{
##+  char *rpath = NULL;
##+  if (name == NULL || name[0] == '\\\\0')
##+    return NULL;
##+  rpath = malloc(MAX_PATH + 1);
##+  if (rpath == NULL)
##+    return NULL;
##+  GetFullPathName(name, MAX_PATH, rpath, NULL);
##+  strlower(slashify (rpath));
##+  struct stat st;
##+  if (stat (rpath, &st) < 0) {
##+    free (rpath);
##+    return NULL;
##+  }
##+  return rpath;
##+}
## #endif /* !_WIN32 */
##EOF
### fix missing strtok_r/pipe/signal in ccache.c
##mv ccache.c ccache.c.bak
##cat > ccache.c << EOF
###define strtok_r(_s,_sep,_lasts) (*(_lasts) = strtok((_s), (_sep)))
###include <fcntl.h>
###define pipe(fds) _pipe(fds, 4096, _O_BINARY)
###define signal(s,h)
##EOF
##cat ccache.c.bak >> ccache.c
### fix missing strtok_r in execute.c
##mv execute.c execute.c.bak
##echo "#define strtok_r(_s,_sep,_lasts) (*(_lasts) = strtok((_s), (_sep)))" > execute.c
##cat execute.c.bak >> execute.c
### fix missing strtok_r/pipe in hashutil.c
##mv hashutil.c hashutil.c.bak
##cat > hashutil.c << EOF
###define strtok_r(_s,_sep,_lasts) (*(_lasts) = strtok((_s), (_sep)))
###include <fcntl.h>
###define pipe(fds) _pipe(fds, 4096, _O_BINARY)
###define fork() -1
###define waitpid(pid,status,options) -1
###define WEXITSTATUS(status) (((status)  & 0xFF00) >> 8)
###define WIFEXITED(status) (WTERMSIG(status) == 0)
###define WTERMSIG(status) ((status) & 0x7F)
##EOF
##cat hashutil.c.bak >> hashutil.c
### fix missing strtok_r in args.c
##mv args.c args.c.bak
##echo "#define strtok_r(_s,_sep,_lasts) (*(_lasts) = strtok((_s), (_sep)))" > args.c
##cat args.c.bak >> args.c
## fix missing @getopt_long_c@ (version >= 3.5.1)
#sed -i.bak -e "s?@getopt_long_c@?src/getopt_long.c?" Makefile.in
#wl-showstatus configure &&
# #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM &&
# ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --without-bundled-zlib --enable-man &&
# wl-showstatus build &&
# ( make || make LDFLAGS="-lz" extra_libs= ) &&
# wl-showstatus build-install &&
# ( make install || make install LDFLAGS="-lz" extra_libs= ) &&
# strip $INSTALLPREFIX/bin/*.exe &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$(echo $VERSION|sed -e "s/[a-z]*$//")
#######See also: http://code.google.com/p/ccache-win32/
#######Doesn't seem to cache anything



export NAME="ccache"
export STATUS=
export URL=http://ccache.samba.org/
export BASENAME=ccache
export DESCRIPTION="ccache is a compiler cache. It speeds up recompilation by caching previous compilations and detecting when the same compilation is being done again. Supported languages are C, C++, Objective-C and Objective-C++."
export CATEGORY=
export TYPE=library
#export VERSION=4.0
#export VERSIONDATE=20201019
#export VERSION=4.1
#export VERSIONDATE=20201123
#export VERSION=4.2
#export VERSIONDATE=20210202
#export VERSION=4.2.1
#export VERSIONDATE=20210328
#export VERSION=4.3
#export VERSIONDATE=20210509
#export VERSION=4.4
#export VERSIONDATE=20210820
#export VERSION=4.4.1
#export VERSIONDATE=20210911
#export VERSION=4.4.2
#export VERSIONDATE=20210929
#export VERSION=4.5
#export VERSIONDATE=20211113
#export VERSION=4.5.1
#export VERSIONDATE=20211118
#export VERSION=4.6
#export VERSIONDATE=20220228
#export VERSION=4.6.1
#export VERSIONDATE=20220516
#export VERSION=4.6.2
#export VERSIONDATE=20220823
#export VERSION=4.6.3
#export VERSIONDATE=20220828
#export VERSION=4.7
#export VERSIONDATE=20221018
#export VERSION=4.7.1
#export VERSIONDATE=20221023
export VERSION=4.7.2
export VERSIONDATE=20221030
####broken on Windows 32-bit, issue logged: https://github.com/ccache/ccache/issues/831
wl-showstatus --package-version
#export DEPENDANCIES=zlib,zstd
export DEPENDANCIES=zlib,zstd,hiredis,mman-win32
#export DEPENDANCIES=zlib,zstd,hiredis,xxhash,blake3
export OPTIONALDEPENDANCIES=
#export OPTIONALDEPENDANCIES=minitrace
export BUILDDEPENDANCIES=cmake,ninja
#export LICENSEFILE=LICENSE.adoc
export LICENSEFILE=GPL-3.0.txt
export LICENSETYPE=GPLv3
#export DOWNLOADURL="http://ccache.samba.org/download.html"
export DOWNLOADURL="https://github.com/ccache/ccache/releases/"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://samba.org/ftp/ccache/$BASENAME-$VERSION.tar.xz
export DOWNLOADSOURCEURL=https://github.com/ccache/ccache/releases/download/v$VERSION/$BASENAME-$VERSION.tar.xz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
tar xfJ $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.xz
cd $BASENAME-$VERSION
# fix src/InodeCache.cpp (version >= 4.2.1)
patch -ulbf src/InodeCache.cpp << EOF
@@ -305,3 +305,7 @@
   // race.
+#ifdef _WIN32
+  if (CreateHardLinkA(filename.c_str(), tmp_file.path.c_str(), NULL) != 0) {
+#else
   if (link(tmp_file.path.c_str(), filename.c_str()) != 0) {
+#endif
     LOG("Failed to link new inode cache: {}", strerror(errno));
EOF
# skip building doc
sed -i.bak -e "s/add_subdirectory(doc)/#&/" CMakeLists.txt
mkdir -p build_win &&
 wl-showstatus configure &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DENABLE_IPO:BOOL=ON -DZSTD_FROM_INTERNET:BOOL=OFF -DENABLE_TESTING:BOOL=OFF -DCMAKE_C_FLAGS:STRING="-fno-asynchronous-unwind-tables" -S. -Bbuild_win &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DSTATIC_LINK:BOOL=OFF -DUSE_FASTER_LINKER:BOOL=OFF -DENABLE_IPO:BOOL=OFF -DUSE_CCACHE:BOOL=OFF -DZSTD_FROM_INTERNET:BOOL=OFF -DENABLE_TRACING:BOOL=ON -DENABLE_TESTING:BOOL=OFF -DCMAKE_C_FLAGS:STRING="-fno-asynchronous-unwind-tables" -DCXXMAKE_CXX_FLAGS:STRING="-fno-asynchronous-unwind-tables" -S. -Bbuild_win &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DSTATIC_LINK:BOOL=OFF -DUSE_FASTER_LINKER:BOOL=OFF -DENABLE_IPO:BOOL=OFF -DUSE_CCACHE:BOOL=OFF -DZSTD_FROM_INTERNET:BOOL=OFF -DENABLE_TRACING:BOOL=ON -DENABLE_TESTING:BOOL=OFF -DCMAKE_C_FLAGS:STRING="-I$MINGWPREFIX/include/mman-win32 -fno-asynchronous-unwind-tables" -DCMAKE_CXX_FLAGS:STRING="-I$MINGWPREFIX/include/mman-win32" -S. -Bbuild_win &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DSTATIC_LINK:BOOL=OFF -DUSE_FASTER_LINKER:BOOL=OFF -DENABLE_IPO:BOOL=OFF -DUSE_CCACHE:BOOL=OFF -DREDIS_STORAGE_BACKEND:BOOL=OFF -DHIREDIS_FROM_INTERNET:BOOL=OFF -DZSTD_FROM_INTERNET:BOOL=OFF -DENABLE_TRACING:BOOL=ON -DENABLE_TESTING:BOOL=OFF -DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) -DCMAKE_C_FLAGS:STRING="-I$MINGWPREFIX/include/mman-win32 -fno-asynchronous-unwind-tables" -DCMAKE_CXX_FLAGS:STRING="-I$MINGWPREFIX/include/mman-win32" -S. -Bbuild_win &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DSTATIC_LINK:BOOL=OFF -DUSE_FASTER_LINKER:BOOL=OFF -DENABLE_IPO:BOOL=ON -DUSE_CCACHE:BOOL=OFF -DREDIS_STORAGE_BACKEND:BOOL=ON -DHIREDIS_FROM_INTERNET:BOOL=OFF -DZSTD_FROM_INTERNET:BOOL=OFF -DENABLE_TRACING:BOOL=OFF -DENABLE_TESTING:BOOL=OFF -DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) -DCMAKE_C_FLAGS:STRING="-I$MINGWPREFIX/include/mman-win32 -fno-asynchronous-unwind-tables" -DCMAKE_CXX_FLAGS:STRING="-I$MINGWPREFIX/include/mman-win32" -S. -Bbuild_win &&
 #echo "#define HAVE_SYS_MMAN_H 1" >> build_win/config.h &&
 ## fix execution of asciidoc (version >= 4.1) &&
 #sed -i.bak -e "s?\(COMMAND\)\( *= *\| *=.*\&\& *\)\(\"\{0,1\}[^ ]*\)\(asciidoc\)\(\"\{0,1\} \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_win/build.ninja &&
 ## fix error undefined reference to LC20 when building with 32-bit GCC 11
 #sed -i.bak2 -e "s/^\s*LINK_LIBRARIES\s*=.*-ladvapi32/& -Wl,--as-needed -lgmp -lgcc/" build_win/build.ninja &&
 ## replace -O3 with -O0 in case of errors like: undefined reference to LC1
 #sed -i.bak3 -e "s/ -O3 / -O0 /" build_win/build.ninja &&
 ## fix mman support
 sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*-ladvapi32/& -Wl,--as-needed -Wl,--as-needed -lmman/" build_win/build.ninja &&
 #sed -i.bak -e "s/c++\.exe/g++.exe/" build_win/CMakeFiles/rules.ninja &&
 wl-showstatus build-install &&
 ninja -Cbuild_win install/strip &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
#####Test by building: jsoncpp
#####TO DO: version >= 4.0 <= 4.1 without -DENABLE_IPO:BOOL=ON doesn't work properly, e.g. building solidity (0.8.9), gstreamer (1.18.1), p11-kit (0.23.22), mesalib (20.3.3), zstd (1.4.9)



####version 4 issues reported: https://github.com/ccache/ccache/issues/831

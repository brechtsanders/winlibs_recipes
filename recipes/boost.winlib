#export NAME="boost"
#export STATUS=
#export URL=http://www.boost.org/
##export URL=https://svn.boost.org/trac/boost/wiki/CMake
#export BASENAME=boost
#export DESCRIPTION="Boost provides free peer-reviewed portable C++ source libraries."
#export CATEGORY=portability
#export TYPE=library
##export VERSION=1.40.0
##export VERSION=1.41.0
##export VERSIONDATE=20091119
##export VERSION=1.42.0
##export VERSIONDATE=20100323
##export VERSION=1.43.0
##export VERSIONDATE=20100517
##export VERSION=1.44.0
##export VERSIONDATE=20100825
##export VERSION=1.45.0
##export VERSIONDATE=20110215
##export VERSION=1.46.0
##export VERSIONDATE=20110221
##export VERSION=1.46.1
##export VERSIONDATE=20110312
##export VERSION=1.47.0
##export VERSIONDATE=20110713
##export VERSION=1.48.0
##export VERSIONDATE=20111115
##export VERSION=1.49.0
##export VERSIONDATE=20120223
#export VERSION=1.50.0
#export VERSIONDATE=20120628
##export VERSION=1.51.0
##export VERSIONDATE=20120824
##export VERSION=1.52.0
##export VERSIONDATE=20121105
##export VERSION=1.53.0
##export VERSIONDATE=20130205
#####'ml' is not recognized as an internal or external command
#wl-showstatus --package-version
#export DEPENDENCIES=libbz2,icu,expat,libiconv
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=
#export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=LICENSE_1_0.txt
#export LICENSETYPE=
#export DOWNLOADURL="http://sodium.resophonic.com/boost-cmake/"
#export DOWNLOADURL="http://sourceforge.net/projects/boost/files/boost/"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
##export DOWNLOADSOURCEURL=http://sodium.resophonic.com/boost-cmake/$VERSION.cmake0/boost-$VERSION.cmake0.tar.gz
##wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
##tar xz --force-local -f $TARBALLDIR/$BASENAME/boost-$VERSION.cmake0.tar.gz
##mv boost-$VERSION.cmake0 $BASENAME-$VERSION
##cd $BASENAME-$VERSION
###$COMSPEC /c bootstrap.bat
###./bootstrap.sh --prefix=$INSTALLPREFIX --exec-prefix=$INSTALLPREFIX/bin --libdir=$INSTALLPREFIX/lib --includedir=$INSTALLPREFIX/include && bjam install --prefix=$INSTALLPREFIX --exec-prefix=$INSTALLPREFIX/bin --libdir=$INSTALLPREFIX/lib --includedir=$INSTALLPREFIX/include --toolset=gcc --link=shared runtime-link=shared --threading=multi --variant=release &&
### make install
###mv build/$INSTALLPREFIX/* $INSTALLPREFIX/
#### avoid error in accumulators example (version 1.39.0)
###echo "" > libs/accumulators/example/CMakeLists.txt
######tools/inspect/inspect.cpp:24:32: error: boost/shared_ptr.hpp
##wl-showstatus configure &&
###cmake.exe -G"MSYS Makefiles" -DBUILD_INSPECT=OFF -DCMAKE_INSTALL_PREFIX=$INSTALLPREFIX -DCMAKE_BUILD_TYPE=release -DCMAKE_IS_EXPERIMENTAL=YES_I_KNOW . && make all install &&
##cmake.exe -G"MSYS Makefiles" -DBUILD_INSPECT=OFF -DCMAKE_INSTALL_PREFIX=$INSTALLPREFIX -DCMAKE_BUILD_TYPE=release . &&
## make all install/strip &&
## mkdir -p $INSTALLPREFIX/bin &&
## mv $INSTALLPREFIX/lib/*.dll $INSTALLPREFIX/bin/ &&
## wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && rm -rf $BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://downloads.sourceforge.net/project/boost/boost/$VERSION/boost_`echo $VERSION|sed -e "s/\./_/g"`.tar.bz2
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
##tar xj --force-local -f $TARBALLDIR/$BASENAME/boost_`echo $VERSION|sed -e "s/\./_/g"`.tar.bz2 &> /dev/null
#mkdir -p $BASENAME-$VERSION
#tar xj --force-local -f $TARBALLDIR/$BASENAME/boost_`echo $VERSION|sed -e "s/\./_/g"`.tar.bz2 -C$BASENAME-$VERSION &> /dev/null
#cd $BASENAME-$VERSION/boost*
## fix detection of ICU
#patch -ulbf libs/locale/build/Jamfile.v2 << EOF
#--- libs/locale/build/Jamfile.v2  2012-05-23 19:39:26 +0200
#+++ libs/locale/build/Jamfile.v2  2013-04-24 10:25:00 +0200
#@@ -84,7 +84,7 @@
#
#     searched-lib icudt : :  <search>\$(ICU_PATH)/lib
#                             <name>icudt
#-                            <toolset>msvc
#+                            <target-os>windows
#                             <link>shared
#                             <runtime-link>shared ;
#
#@@ -95,20 +95,13 @@
#                             <link>shared
#                             <runtime-link>shared ;
#
#-    searched-lib icuin : :  <toolset>msvc
#-                            <variant>debug
#-                            <name>icuind
#-                            <search>\$(ICU_PATH)/lib
#-                            <link>shared
#-                            <runtime-link>shared ;
#-
#-    searched-lib icuin : :  <toolset>msvc
#-                            <variant>release
#+    searched-lib icuin : :  <target-os>windows
#                             <name>icuin
#                             <search>\$(ICU_PATH)/lib
#                             <link>shared
#                             <runtime-link>shared ;
#
#+
#     searched-lib icuin : :  <name>this_is_an_invalid_library_name ;
#
#     explicit icuuc icudt icuin ;
#EOF
#wl-showstatus configure &&
#( (
#  # build (version <= 1.46.1)
#  cd tools/build/v2/engine/src &&
#  ./build.sh mingw &&
#  wl-showstatus build-install &&
#  cd ../../../../.. &&
#  #BOOST_ROOT=`pwd` MINGW=/ tools/build/v2/engine/src/bin.ntx86/bjam.exe --prefix=$INSTALLPREFIX --build-type=complete --without-mpi --without-python toolset=gcc stage &&
#  #BOOST_ROOT=`pwd` MINGW=/ tools/build/v2/engine/src/bin.ntx86/bjam.exe --prefix=$INSTALLPREFIX --build-type=complete --without-mpi --without-python toolset=gcc install &&
#  BOOST_ROOT=`pwd` MINGW=/ tools/build/v2/engine/src/bin.ntx86/bjam.exe --prefix=$INSTALLPREFIX --build-type=complete --layout=tagged --without-mpi --without-python toolset=gcc install
# ) || (
#  # build (version >= 1.47.0)
#  cd tools/build/v2/engine &&
#  ./build.sh mingw &&
#  wl-showstatus build-install &&
#  cd ../../../.. &&
#  ( BOOST_ROOT=`pwd` MINGW=/ tools/build/v2/engine/bin.ntx86/b2.exe --prefix=$INSTALLPREFIX --build-type=complete --layout=tagged --without-mpi --enable-icu --without-python toolset=gcc install ||
#  #( BOOST_ROOT=`pwd` MINGW=/ tools/build/v2/engine/bin.ntx86/b2.exe --prefix=$INSTALLPREFIX --build-type=complete --layout=tagged --without-mpi --without-python toolset=gcc variant=release link=shared threading=multi runtime-link=static install ||
#   (
#    if ( echo $RUNPLATFORM | grep -q x86_64 ); then
#     mv tools/build/v2/engine/bin.ntx86_64 tools/build/v2/engine/bin.ntx86
#    fi &&
#    BOOST_ROOT=`pwd` MINGW=/ tools/build/v2/engine/bin.ntx86/b2.exe --prefix=$INSTALLPREFIX --build-type=complete --layout=tagged --without-mpi --enable-icu --without-python toolset=gcc install
#    #BOOST_ROOT=`pwd` MINGW=/ tools/build/v2/engine/bin.ntx86/b2.exe --prefix=$INSTALLPREFIX --build-type=complete --layout=tagged --without-mpi --without-python toolset=gcc variant=release link=shared threading=multi runtime-link=static install
#   )
#  )
# ) ) &&
# mkdir -p $INSTALLPREFIX/bin &&
# mv $INSTALLPREFIX/lib/*.dll $INSTALLPREFIX/bin/ &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd ../.. && rm -rf $BASENAME-$VERSION



#export NAME="boost"
#export STATUS=
#export URL=http://www.boost.org/
#export BASENAME=boost
#export DESCRIPTION="Boost provides free peer-reviewed portable C++ source libraries."
#export CATEGORY=portability
#export TYPE=library
#export VERSION=1.53.0
#export VERSIONDATE=20130513
##export VERSION=1.54.0
##export VERSIONDATE=20130702
##export VERSION=1.55.0
##export VERSIONDATE=20131112
#####failed to write command file!
#wl-showstatus --package-version
#export DEPENDENCIES=libbz2,icu,expat,libbz2,libiconv
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=
#export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=LICENSE_1_0.txt
#export LICENSETYPE=
#export DOWNLOADURL="http://sourceforge.net/projects/boost/files/boost/"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://downloads.sourceforge.net/project/boost/boost/$VERSION/boost_`echo $VERSION|sed -e "s/\./_/g"`.tar.bz2
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#mkdir -p $BASENAME-$VERSION
#tar xj --force-local -f $TARBALLDIR/$BASENAME/boost_`echo $VERSION|sed -e "s/\./_/g"`.tar.bz2 -C$BASENAME-$VERSION &> /dev/null
#cd $BASENAME-$VERSION/boost*
## fix detection of ICU
#patch -ulbf libs/locale/build/Jamfile.v2 << EOF
#--- libs/locale/build/Jamfile.v2  2012-05-23 19:39:26 +0200
#+++ libs/locale/build/Jamfile.v2  2013-04-24 10:25:00 +0200
#@@ -84,7 +84,7 @@
#
#     searched-lib icudt : :  <search>\$(ICU_PATH)/lib
#                             <name>icudt
#-                            <toolset>msvc
#+                            <target-os>windows
#                             <link>shared
#                             <runtime-link>shared ;
#
#@@ -95,20 +95,13 @@
#                             <link>shared
#                             <runtime-link>shared ;
#
#-    searched-lib icuin : :  <toolset>msvc
#-                            <variant>debug
#-                            <name>icuind
#-                            <search>\$(ICU_PATH)/lib
#-                            <link>shared
#-                            <runtime-link>shared ;
#-
#-    searched-lib icuin : :  <toolset>msvc
#-                            <variant>release
#+    searched-lib icuin : :  <target-os>windows
#                             <name>icuin
#                             <search>\$(ICU_PATH)/lib
#                             <link>shared
#                             <runtime-link>shared ;
#
#+
#     searched-lib icuin : :  <name>this_is_an_invalid_library_name ;
#
#     explicit icuuc icudt icuin ;
#EOF
#wl-showstatus configure &&
#cd tools/build/v2/engine &&
# sh build.sh mingw &&
# wl-showstatus build-install &&
# cd ../../../.. &&
# BOOST_ROOT=`pwd` MINGW=/ tools/build/v2/engine/bin.ntx86`if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo _64; fi`/bjam.exe --prefix=$INSTALLPREFIX --build-type=complete --layout=tagged --without-mpi --enable-icu --without-python --disable-filesystem2 --without-context toolset=gcc address-model=`if ( echo $RUNPLATFORM | grep -q "^i.86" ); then echo 32; else echo 64; fi` variant=release link=shared threading=multi pch=off install &&
# #BOOST_ROOT=`pwd` MINGW=/ tools/build/v2/engine/bin.ntx86`if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo _64; fi`/b2.exe --prefix=$INSTALLPREFIX --build-type=complete --layout=tagged --without-mpi --enable-icu --without-python --disable-filesystem2 --without-context toolset=gcc address-model=`if ( echo $RUNPLATFORM | grep -q "^i.86" ); then echo 32; else echo 64; fi` variant=release link=shared threading=single install &&
# #BOOST_ROOT=`pwd` MINGW=/ tools/build/v2/engine/bin.ntx86`if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo _64; fi`/bjam.exe --prefix=$INSTALLPREFIX --build-type=complete --layout=tagged --without-mpi --enable-icu --without-python --disable-filesystem2 --without-context toolset=gcc address-model=`if ( echo $RUNPLATFORM | grep -q "^i.86" ); then echo 32; else echo 64; fi` variant=release threading=multi install &&
# mkdir -p $INSTALLPREFIX/bin &&
# mv -f $INSTALLPREFIX/lib/*.dll $INSTALLPREFIX/bin/ &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd ../.. && rm -rf $BASENAME-$VERSION



#export NAME="boost"
#export STATUS=
#export URL=http://www.boost.org/
##export URL=https://github.com/boostorg/boost
#export BASENAME=boost
#export DESCRIPTION="Boost provides free peer-reviewed portable C++ source libraries."
#export CATEGORY=portability
#export TYPE=library
##export VERSION=1.54.0
##export VERSIONDATE=20130702
##export VERSION=1.55.0
##export VERSIONDATE=20131112
##export VERSION=1.56.0
##export VERSIONDATE=20140808
#####...failed updating 6 targets...
#####...skipped 20 targets...
#####'ml' is not recognized as an internal or external command, operable program or batch file.
##export VERSION=1.57.0
##export VERSIONDATE=20141104
##export VERSION=1.58.0
##export VERSIONDATE=20150416
##export VERSION=1.59.0
##export VERSIONDATE=20150814
##export VERSION=1.60.0
##export VERSIONDATE=20151219
#####bin.v2\libs\coroutine\build\gcc-mingw-4.8.1\release\detail\coroutine_context.o:coroutine_context.cpp:(.text+0x4a): undefined reference to `_imp__make_fcontext'
#####bin.v2\libs\coroutine\build\gcc-mingw-4.8.1\release\detail\coroutine_context.o:coroutine_context.cpp:(.text+0xc7): undefined reference to `_imp__jump_fcontext'
##export VERSION=1.61.0
##export VERSIONDATE=20160514
##export VERSION=1.62.0
##export VERSIONDATE=20160929
##export VERSION=1.63.0
##export VERSIONDATE=20161226
##export VERSION=1.64.0
##export VERSIONDATE=20170420
#####Unknown toolset: mingw
##export VERSION=1.65.0
##export VERSIONDATE=20170822
##export VERSION=1.65.1
##export VERSIONDATE=20170908
##export VERSION=1.66.0
##export VERSIONDATE=20171219
##export VERSION=1.67.0
##export VERSIONDATE=20180416
#####undefined reference to `vtable for boost::archive::codecvt_null<wchar_t>'
##export VERSION=1.68.0
##export VERSIONDATE=20180810
##export VERSION=1.69.0
##export VERSIONDATE=20181213
##export DEPENDENCIES=pthreads,zlib,libbz2,icu,expat,libiconv
##export OPTIONALDEPENDENCIES=
##export BUILDDEPENDENCIES=jwasm
##export OPTIONALBUILDDEPENDENCIES=
##export VERSION=1.70.0
##export VERSIONDATE=20190413
#####See also: https://github.com/Alexpux/MINGW-packages/issues/4773
##export VERSION=1.72.0
##export VERSIONDATE=20191212
##export VERSION=1.73.0
##export VERSIONDATE=20200429
##export VERSION=1.74.0
##export VERSIONDATE=20200815
##export VERSION=1.75.0
##export VERSIONDATE=20201211
##export VERSION=1.76.0
##export VERSIONDATE=20210417
##export VERSION=1.77.0
##export VERSIONDATE=20210812
##export VERSION=1.78.0
##export VERSIONDATE=20211208
#export VERSION=1.79.0
#export VERSIONDATE=20220412
##export VERSION=1.80.0
##export VERSIONDATE=20220811
#####ld.exe: build_win\boost\bin.v2\libs\coroutine\build\gcc-9.3.0\release\context-impl-winfib\threadapi-win32\visibility-hidden\detail\coroutine_context.o:coroutine_context.cpp:(.text+0x4f): undefined reference to `__imp_make_fcontext'
#####ld.exe: build_win\boost\bin.v2\libs\coroutine\build\gcc-9.3.0\release\context-impl-winfib\threadapi-win32\visibility-hidden\detail\coroutine_context.o:coroutine_context.cpp:(.text+0xd8): undefined reference to `__imp_jump_fcontext'
#####warning: skipping optional Message Passing Interface (MPI) library.
#####note: to enable MPI support, add "using mpi ;" to user-config.jam.
#####note: to suppress this message, pass "--without-mpi" to bjam.
#####note: otherwise, you can safely ignore this message.
##export VERSION=1.81.0
##export VERSIONDATE=20221215
#wl-showstatus --package-version
##export DEPENDENCIES=zlib,libbz2,icu,expat,libiconv,pcre
#export DEPENDENCIES=zlib,libbz2,xz,zstd,icu,expat,libiconv,pcre
#export OPTIONALDEPENDENCIES=libbacktrace
#export BUILDDEPENDENCIES=jwasm
#export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=LICENSE_1_0.txt
#export LICENSETYPE=
#export DOWNLOADURL="http://sourceforge.net/projects/boost/files/boost/"
##export DOWNLOADURL="https://github.com/boostorg/boost/releases"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
##export DOWNLOADSOURCEURL=http://downloads.sourceforge.net/project/boost/boost/$VERSION/boost_`echo $VERSION|sed -e "s/\./_/g"`.tar.bz2
#export DOWNLOADSOURCEURL=https://downloads.sourceforge.net/project/boost/boost/$VERSION/boost_$(echo $VERSION|sed -e "s/\./_/g").tar.bz2
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
##mkdir -p $BASENAME-$VERSION
##tar xj --force-local -f $TARBALLDIR/$BASENAME/boost_`echo $VERSION|sed -e "s/\./_/g"`.tar.bz2 -C$BASENAME-$VERSION &> /dev/null
##cd $BASENAME-$VERSION/boost*
#tar xj --force-local -f $TARBALLDIR/$BASENAME/boost_$(echo $VERSION|sed -e "s/\./_/g").tar.bz2
#cd boost_$(echo $VERSION|sed -e "s/\./_/g")
### avoid using syslog in libs/log/src/syslog_backend.cpp (version >= 1.65.1)
##mv libs/log/src/syslog_backend.cpp libs/log/src/syslog_backend.cpp.bak &&
##echo "#undef BOOST_LOG_USE_NATIVE_SYSLOG" > libs/log/src/syslog_backend.cpp &&
##cat libs/log/src/syslog_backend.cpp.bak >> libs/log/src/syslog_backend.cpp
## fix detection of ICU
#patch -ulbf libs/locale/build/Jamfile.v2 << EOF
#--- libs/locale/build/Jamfile.v2  2012-05-23 19:39:26 +0200
#+++ libs/locale/build/Jamfile.v2  2013-04-24 10:25:00 +0200
#@@ -84,7 +84,7 @@
#
#     searched-lib icudt : :  <search>\$(ICU_PATH)/lib
#                             <name>icudt
#-                            <toolset>msvc
#+                            <target-os>windows
#                             <link>shared
#                             <runtime-link>shared ;
#
#@@ -95,20 +95,13 @@
#                             <link>shared
#                             <runtime-link>shared ;
#
#-    searched-lib icuin : :  <toolset>msvc
#-                            <variant>debug
#-                            <name>icuind
#-                            <search>\$(ICU_PATH)/lib
#-                            <link>shared
#-                            <runtime-link>shared ;
#-
#-    searched-lib icuin : :  <toolset>msvc
#-                            <variant>release
#+    searched-lib icuin : :  <target-os>windows
#                             <name>icuin
#                             <search>\$(ICU_PATH)/lib
#                             <link>shared
#                             <runtime-link>shared ;
#
#+
#     searched-lib icuin : :  <name>this_is_an_invalid_library_name ;
#
#     explicit icuuc icudt icuin ;
#EOF
### fix to use JWasm instead of MASM (version <= 1.68.0)
##sed -i.bak -e "s?ml64 /c?jwasm -win64 -c?; s?ml /c?jwasm -coff -c?" libs/context/build/Jamfile.v2
### fix assembler issues on 32-bit
##sed -i.bak -e "s/^.386/.686/; s/\(PROC\) EXPORT/\1/; s/stmxcsr/STMXCSR/; s/ldmxcsr/LDMXCSR/" libs/context/src/asm/jump_i386_ms_pe_masm.asm libs/context/src/asm/make_i386_ms_pe_masm.asm
## fix missing symbols (_jump_fcontext/_make_fcontext/_ontop_fcontext) in 32-bit assembler
#sed -i.bak2 -e 's/^\(\.ascii " -export:\\"\)_/\1/' libs/context/src/asm/jump_i386_ms_pe_gas.asm libs/context/src/asm/make_i386_ms_pe_gas.asm libs/context/src/asm/ontop_i386_ms_pe_gas.asm
### fix zlib support (version = 1.79.0)
##sed -i.bak "s/gzio\.c//" tools/build/src/tools/zlib.jam
## fix extensions used when building with clang (version >= 1.79.0)
#sed -i.bak -e "s/^\(.*<toolset>\)gcc\(.*\)$/&\n\1clang\2/" tools/build/src/tools/types/lib.jam tools/build/src/tools/types/lib.py
#wl-showstatus configure &&
# ## enable MPI support (does not seem to work)
# #echo "using mpi ;" >> libs/beast/tools/user-config.jam &&
# #echo "using mpi ;" >> tools/build/example/user-config.jam &&
# #cd tools/build/v2/engine &&
# #cd tools/build/*/engine &&
# ##( sh build.sh mingw || sh build.sh gcc || ( cd .. && $COMSPEC /C "bootstrap.bat mingw" && cd engine )) &&
# #( sh build.sh mingw || sh build.sh gcc || ( cd .. && echo "bootstrap.bat mingw" | $COMSPEC && cd engine )) &&
# #cd ../../../.. &&
# #$COMSPEC //C "CD tools\\build & bootstrap.bat mingw" &&
# $COMSPEC //C "CD tools\\build & bootstrap.bat $(if ${CXX:-g++} --version | grep clang -q; then echo "clang"; else echo "gcc"; fi)" &&
# wl-showstatus build-install &&
# #tools/build/v2/engine/bin.ntx86$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo _64; fi)/bjam.exe --show-libraries
# #PATH=tools/build/v2/engine/bin.ntx86$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo _64; fi):$PATH &&
# #BOOST_ROOT=$(pwd) MINGW=/ bjam.exe --prefix=$INSTALLPREFIX --build-type=complete --layout=tagged --without-mpi --enable-icu --without-python --disable-filesystem2 --without-context toolset=gcc variant=release link=shared threading=multi pch=off address-model=$(if ( echo $RUNPLATFORM | grep -q "^i.86" ); then echo 32; else echo 64; fi) install &&
# #BOOST_ROOT=$(pwd) MINGW=/ bjam.exe --prefix=$INSTALLPREFIX --build-type=complete --layout=tagged --without-mpi --enable-icu --without-python --disable-filesystem2 --without-context toolset=gcc variant=release threading=single address-model=$(if ( echo $RUNPLATFORM | grep -q "^i.86" ); then echo 32; else echo 64; fi) install &&
# #BOOST_ROOT=$(pwd) MINGW=/ bjam.exe --prefix=$INSTALLPREFIX --build-type=complete --layout=tagged --with-mpi --enable-icu --without-python --disable-filesystem2 --with-context toolset=gcc variant=release threading=single address-model=$(if ( echo $RUNPLATFORM | grep -q "^i.86" ); then echo 32; else echo 64; fi) install &&
# #BOOST_ROOT=$(pwd) MINGW=/ PYTHON_ROOT=$PYDIR PYTHON_VERSION=$(ls -1 $PYDIR/libs/libpython[0-9][0-9].a|sed -e "s/^.*python\([0-9]\)\([0-9]*\).*$/\1.\2/") PYTHON_INCLUDES=$PYDIR/include PYTHON_LIB_PATH=$PYDIR/libs tools/build/v2/engine/bin.ntx86$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo _64; fi)/bjam.exe --prefix=$INSTALLPREFIX --build-type=complete --layout=tagged --with-mpi --enable-icu --with-python --disable-filesystem2 --with-context toolset=gcc variant=release threading=single address-model=$(if ( echo $RUNPLATFORM | grep -q "^i.86" ); then echo 32; else echo 64; fi) clean stage &&
# #BOOST_ROOT=$(pwd) MINGW=/ PYTHON_ROOT=$PYDIR PYTHON_VERSION=$(ls -1 $PYDIR/libs/libpython[0-9][0-9].a|sed -e "s/^.*python\([0-9]\)\([0-9]*\).*$/\1.\2/") PYTHON_INCLUDES=$PYDIR/include PYTHON_LIB_PATH=$PYDIR/libs tools/build/v2/engine/bin.ntx86$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo _64; fi)/bjam.exe --prefix=$INSTALLPREFIX --build-type=complete --layout=tagged --with-mpi --enable-icu --with-python --disable-filesystem2 --with-context toolset=gcc variant=release threading=single address-model=$(if ( echo $RUNPLATFORM | grep -q "^i.86" ); then echo 32; else echo 64; fi) install &&
# #BOOST_ROOT=$(pwd) MINGW=/ PYTHON_ROOT=$PYDIR PYTHON_VERSION=$(ls -1 $PYDIR/libs/libpython[0-9][0-9].a|sed -e "s/^.*python\([0-9]\)\([0-9]*\).*$/\1.\2/") PYTHON_INCLUDES=$PYDIR/include PYTHON_LIB_PATH=$PYDIR/libs tools/build/v2/engine/bin.ntx86$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo _64; fi)/bjam.exe --prefix=$INSTALLPREFIX --build-type=complete --layout=tagged --with-mpi --enable-icu --with-python --disable-filesystem2 --with-context toolset=gcc variant=release threading=single address-model=$(if ( echo $RUNPLATFORM | grep -q "^i.86" ); then echo 32; else echo 64; fi) --show-libraries &&
# #BOOST_ROOT=$(pwd) MINGW=/ tools/build/v2/engine/bin.ntx86$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo _64; fi)/bjam.exe --prefix=$INSTALLPREFIX --build-type=complete --layout=tagged --enable-icu --disable-filesystem2 toolset=gcc variant=release threading=single address-model=$(if ( echo $RUNPLATFORM | grep -q "^i.86" ); then echo 32; else echo 64; fi) --show-libraries &&
# #BOOST_ROOT=$(pwd) MINGW=/ tools/build/v2/engine/bin.ntx86$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo _64; fi)/bjam.exe --prefix=$INSTALLPREFIX --build-type=complete --layout=tagged --enable-icu --disable-filesystem2 toolset=gcc variant=release threading=single address-model=$(if ( echo $RUNPLATFORM | grep -q "^i.86" ); then echo 32; else echo 64; fi) -sPYTHON_ROOT=$PYDIR -sPYTHON_VERSION=$(ls -1 $PYDIR/libs/libpython[0-9][0-9].a|sed -e "s/^.*python\([0-9]\)\([0-9]*\).*$/\1.\2/") -sPYTHON_INCLUDES=$PYDIR/include -sPYTHON_LIB_PATH=$PYDIR/libs stage install &&
# #BOOST_ROOT=$(pwd) MINGW=/ tools/build/*/engine/bin.ntx86$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo _64; fi)/bjam.exe --prefix=$INSTALLPREFIX --build-type=complete --layout=tagged --enable-icu --disable-filesystem2 toolset=gcc variant=release threading=single address-model=$(if ( echo $RUNPLATFORM | grep -q "^i.86" ); then echo 32; else echo 64; fi) -sPYTHON_ROOT=$PYDIR -sPYTHON_VERSION=$(ls -1 $PYDIR/libs/libpython[0-9][0-9].a|sed -e "s/^.*python\([0-9]\)\([0-9]*\).*$/\1.\2/") -sPYTHON_INCLUDES=$PYDIR/include -sPYTHON_LIB_PATH=$PYDIR/libs stage install cxxflags="-fpermissive" &&
# #BOOST_ROOT=$(pwd) MINGW=/ tools/build/*/engine/bin.ntx86$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo _64; fi)/bjam.exe --prefix=$INSTALLPREFIX --build-type=complete --layout=tagged --enable-icu --disable-filesystem2 toolset=gcc variant=release threading=single address-model=$(if ( echo $RUNPLATFORM | grep -q "^i.86" ); then echo 32; else echo 64; fi) --without-python --without-mpi stage install cxxflags="-fpermissive -DBOOST_LOG_WITHOUT_SYSLOG" &&
# #BOOST_ROOT=$(pwd) MINGW=/ tools/build/src/engine/bjam.exe --prefix=$INSTALLPREFIX --build-type=complete --layout=tagged --enable-icu --disable-filesystem2 toolset=gcc variant=release threading=single address-model=$(if ( echo $RUNPLATFORM | grep -q "^i.86" ); then echo 32; else echo 64; fi) --without-python --without-mpi stage install cxxflags="-fpermissive -DBOOST_LOG_WITHOUT_SYSLOG" &&
# #BOOST_ROOT=$(pwd) MINGW=/ tools/build/*/engine/bin.ntx86$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo _64; fi)/bjam.exe --prefix=$INSTALLPREFIX --build-dir=build_static --build-type=complete --layout=tagged --enable-icu --disable-filesystem2 toolset=gcc link=static variant=release threading=multi address-model=$(if ( echo $RUNPLATFORM | grep -q "^i.86" ); then echo 32; else echo 64; fi) --without-python --without-mpi stage install cxxflags="-fpermissive -DBOOST_LOG_WITHOUT_SYSLOG" &&
# #BOOST_ROOT=$(pwd) MINGW=/ tools/build/*/engine/bin.ntx86$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo _64; fi)/bjam.exe --prefix=$INSTALLPREFIX --build-dir=build_shared --build-type=complete --layout=tagged --enable-icu --disable-filesystem2 toolset=gcc link=shared variant=release threading=multi address-model=$(if ( echo $RUNPLATFORM | grep -q "^i.86" ); then echo 32; else echo 64; fi) --without-python --without-mpi stage install cxxflags="-fpermissive -DBOOST_LOG_WITHOUT_SYSLOG" &&
# #for L in static shared; do
# # for T in single multi; do
# #  wl-showstatus build-install &&
# #  #BOOST_ROOT=$(pwd) MINGW=/ tools/build/*/engine/bin.ntx86$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo _64; fi)/bjam.exe --prefix=$INSTALLPREFIX --build-dir=build_$L\_$T --build-type=complete --layout=tagged --enable-icu --disable-filesystem2 toolset=gcc link=$L variant=release threading=$T address-model=$(if ( echo $RUNPLATFORM | grep -q "^i.86" ); then echo 32; else echo 64; fi) --without-python --without-mpi stage install cxxflags="-fpermissive -DBOOST_LOG_WITHOUT_SYSLOG" || break 2
# #  #( BOOST_ROOT=$(pwd) MINGW=/ tools/build/src/engine/bjam.exe --prefix=$INSTALLPREFIX --build-dir=build_$L\_$T --build-type=complete --layout=tagged --enable-icu --disable-filesystem2 toolset=gcc link=$L runtime-link=$L variant=release threading=$T address-model=$(if ( echo $RUNPLATFORM | grep -q "^i.86" ); then echo 32; else echo 64; fi) --without-python --without-mpi stage install cxxflags="-fpermissive -DBOOST_LOG_WITHOUT_SYSLOG" && touch SUCCESS_$L\_$T ) || break 2
# #  ( BOOST_ROOT=$(pwd) MINGW=/ tools/build/src/engine/bjam.exe -q --prefix=$INSTALLPREFIX --build-dir=build_$L\_$T --build-type=complete --layout=tagged --enable-icu --disable-filesystem2 toolset=gcc link=$L runtime-link=$L variant=release threading=$T $(if [ "$T" == "multi" ];then echo "threadapi=win32"; fi) address-model=$(if ( echo $RUNPLATFORM | grep -q "^i.86" ); then echo 32; else echo 64; fi) --without-python --without-mpi stage install cxxflags="-fpermissive -DBOOST_LOG_WITHOUT_SYSLOG" && touch SUCCESS_$L\_$T ) || break 2
# #  #( BOOST_ROOT=$(pwd) MINGW=/ tools/build/src/engine/bjam.exe --prefix=$INSTALLPREFIX --build-dir=build_$L\_$T --build-type=complete --layout=tagged --enable-icu --disable-filesystem2 toolset=gcc link=$L runtime-link=$L variant=release threading=$T $(if [ "$T" == "multi" ];then echo "threadapi=win32"; fi) address-model=$(if ( echo $RUNPLATFORM | grep -q "^i.86" ); then echo 32; else echo 64; fi) --without-python --without-mpi stage install cxxflags="-fpermissive -Wa,-mbig-obj -g0 -DBOOST_LOG_WITHOUT_SYSLOG" linkflags=" " asmflags="-Wa,-as" && touch SUCCESS_$L\_$T ) || break 2
# # done
# #done &&
# #if [ $(ls -1 SUCCESS_*|wc -l) -lt 4 ]; then
# # ( ls -1 SUCCESS_* 2> /dev/null && echo Some builds failed ) || echo All builds failed
# # false
# #fi &&
# ## copy bjam.exe and b2.exe to tools/build/src/engine (version <= 1.69.0)
# #( cp -u tools/build/src/engine/bin.ntx86/b*.exe tools/build/src/engine/ || true ) &&
# #BOOST_ROOT=$(pwd) MINGW=/ tools/build/src/engine/bjam.exe -q --prefix=$INSTALLPREFIX --build-dir=build_win --build-type=complete --layout=tagged --enable-icu --disable-filesystem2 toolset=gcc target-os=windows abi=ms link=static,shared runtime-link=static,shared variant=release threading=single,multi threadapi=win32 context-impl=fcontext address-model=$(if ( echo $RUNPLATFORM | grep -q "^i.86" ); then echo 32; else echo 64; fi) --without-python --without-mpi release stage install cxxflags="-fpermissive -DBOOST_LOG_WITHOUT_SYSLOG" &&
# #BOOST_ROOT=$(pwd) MINGW=/ tools/build/src/engine/bjam.exe -q --prefix=$INSTALLPREFIX --build-dir=build_win --build-type=complete --layout=tagged --enable-icu --disable-filesystem2 toolset=$(if ${CXX:-g++} --version | grep clang -q; then echo "clang"; else echo "gcc"; fi) target-os=windows abi=ms link=static,shared runtime-link=static,shared variant=release threading=single,multi threadapi=win32 context-impl=fcontext address-model=$(if ( echo $RUNPLATFORM | grep -q "^i.86" ); then echo 32; else echo 64; fi) --without-python --without-mpi release stage install cxxflags="-fpermissive -DBOOST_LOG_WITHOUT_SYSLOG -fpermissive $(if ${CC:-gcc} --version|grep -q clang; then echo "-femulated-tls"; fi)" linkflags="-lpthread" &&
# #BOOST_ROOT=$(pwd) MINGW=/ tools/build/src/engine/b2.exe -q --prefix=$INSTALLPREFIX --build-dir=build_win --build-type=complete --layout=tagged --enable-icu --disable-filesystem2 toolset=$(if ${CXX:-g++} --version | grep clang -q; then echo "clang"; else echo "gcc"; fi) target-os=windows abi=ms link=static,shared runtime-link=static,shared variant=release threading=single,multi threadapi=win32 context-impl=fcontext address-model=$(if ( echo $RUNPLATFORM | grep -q "^i.86" ); then echo 32; else echo 64; fi) --without-python --without-mpi release stage install cxxflags="-fpermissive -DBOOST_LOG_WITHOUT_SYSLOG -fpermissive $(if ${CC:-gcc} --version|grep -q clang; then echo "-femulated-tls"; fi)" linkflags="-lpthread" &&
# #BOOST_ROOT=$(pwd) MINGW=/ tools/build/src/engine/b2.exe -q --prefix=$INSTALLPREFIX --build-dir=build_win --build-type=complete --layout=tagged --enable-icu --disable-filesystem2 toolset=$(if ${CXX:-g++} --version | grep clang -q; then echo "clang"; else echo "gcc"; fi) target-os=windows abi=ms link=static,shared runtime-link=static,shared variant=release threading=single,multi threadapi=win32 $(if ( echo $RUNPLATFORM | grep -q "^aarch64" ); then echo "--without-coroutine --without-context"; else echo "context-impl=fcontext"; fi) address-model=$(if ( echo $RUNPLATFORM | grep -q "^i.86" ); then echo 32; else echo 64; fi) --without-python --without-mpi release stage install cxxflags="-fpermissive -DBOOST_LOG_WITHOUT_SYSLOG -fpermissive $(if ${CC:-gcc} --version|grep -q clang; then echo "-femulated-tls"; fi)" linkflags="-lpthread" &&
# PATH=$PYDIR:$PATH BOOST_ROOT=$(pwd) MINGW=/ tools/build/src/engine/b2.exe -q --prefix=$INSTALLPREFIX --build-dir=build_win --build-type=complete --layout=tagged --enable-icu --disable-filesystem2 toolset=$(if ${CXX:-g++} --version | grep clang -q; then echo "clang"; else echo "gcc"; fi) target-os=windows abi=ms link=static,shared runtime-link=static,shared variant=release threading=single,multi threadapi=win32 $(if ( echo $RUNPLATFORM | grep -q "^aarch64" ); then echo "--without-coroutine --without-context"; else echo "context-impl=fcontext"; fi) address-model=$(if ( echo $RUNPLATFORM | grep -q "^i.86" ); then echo 32; else echo 64; fi) --without-mpi release stage install cxxflags="-fpermissive -DBOOST_LOG_WITHOUT_SYSLOG -fpermissive $(if ${CC:-gcc} --version|grep -q clang; then echo "-femulated-tls"; fi)" linkflags="-pthread" &&
# #PATH=$PYDIR:$PATH BOOST_ROOT=$(pwd) MINGW=/ tools/build/src/engine/b2.exe -q --prefix=$INSTALLPREFIX --build-dir=build_win --build-type=complete --layout=tagged --enable-icu --disable-filesystem2 toolset=$(if ${CXX:-g++} --version | grep clang -q; then echo "clang"; else echo "gcc"; fi) target-os=windows abi=ms link=static,shared runtime-link=static,shared variant=release threading=single,multi threadapi=pthread $(if ( echo $RUNPLATFORM | grep -q "^aarch64" ); then echo "--without-coroutine --without-context"; else echo "context-impl=fcontext"; fi) address-model=$(if ( echo $RUNPLATFORM | grep -q "^i.86" ); then echo 32; else echo 64; fi) --without-mpi release stage install cxxflags="-fpermissive -DBOOST_LOG_WITHOUT_SYSLOG -fpermissive $(if ${CC:-gcc} --version|grep -q clang; then echo "-femulated-tls"; fi)" linkflags="-pthread" &&
# #PATH=$PYDIR:$PATH BOOST_ROOT=$(pwd) MINGW=/ tools/build/src/engine/b2.exe -q --prefix=$INSTALLPREFIX --build-dir=build_win --build-type=complete --layout=tagged --enable-icu --disable-filesystem2 toolset=$(if ${CXX:-g++} --version | grep clang -q; then echo "clang"; else echo "gcc"; fi) target-os=windows abi=ms link=static,shared runtime-link=static,shared variant=release threading=single,multi threadapi=win32 $(if ( echo $RUNPLATFORM | grep -q "^aarch64" ); then echo "--without-coroutine --without-context"; else echo "context-impl=winfib"; fi) address-model=$(if ( echo $RUNPLATFORM | grep -q "^i.86" ); then echo 32; else echo 64; fi) --without-mpi release stage install cxxflags="-fpermissive -DBOOST_LOG_WITHOUT_SYSLOG -fpermissive $(if ${CC:-gcc} --version|grep -q clang; then echo "-femulated-tls"; fi)" linkflags="-pthread" &&
# #BOOST_ROOT=$(pwd) MINGW=/ tools/build/src/engine/b2.exe -q --prefix=$INSTALLPREFIX --build-dir=build_win --build-type=complete --layout=tagged --enable-icu --disable-filesystem2 toolset=$(if ${CXX:-g++} --version | grep clang -q; then echo "clang"; else echo "gcc"; fi) target-os=windows abi=ms link=static,shared runtime-link=static,shared variant=release threading=single,multi threadapi=win32 context-impl=fcontext address-model=$(if ( echo $RUNPLATFORM | grep -q "^i.86" ); then echo 32; else echo 64; fi) --without-python --without-mpi release stage install cxxflags="-fpermissive -DBOOST_LOG_WITHOUT_SYSLOG" &&
# #BOOST_ROOT=$(pwd) MINGW=/ tools/build/src/engine/bjam.exe -q --prefix=$INSTALLPREFIX --build-dir=build_win --build-type=complete --layout=tagged --enable-icu --disable-filesystem2 toolset=$(if ${CXX:-g++} --version | grep clang -q; then echo "clang"; else echo "gcc"; fi) target-os=windows abi=ms link=static,shared runtime-link=static,shared variant=release threading=single,multi threadapi=win32 context-impl=fcontext address-model=$(if ( echo $RUNPLATFORM | grep -q "^i.86" ); then echo 32; else echo 64; fi) --without-python --without-mpi release stage install cxxflags="-fpermissive -DBOOST_LOG_WITHOUT_SYSLOG -O2" linkflags="-Wl,--as-needed -lgcc" &&
# #BOOST_ROOT=$(pwd) MINGW=/ tools/build/src/engine/bjam.exe -q --prefix=$INSTALLPREFIX --build-dir=build_win --build-type=complete --layout=tagged --enable-icu --disable-filesystem2 toolset=$(if ${CXX:-g++} --version | grep clang -q; then echo "clang"; else echo "gcc"; fi) target-os=windows abi=ms link=static,shared runtime-link=static,shared variant=release threading=single,multi threadapi=win32 context-impl=winfib address-model=$(if ( echo $RUNPLATFORM | grep -q "^i.86" ); then echo 32; else echo 64; fi) --without-python --without-mpi release stage install cxxflags="-fpermissive -DBOOST_LOG_WITHOUT_SYSLOG" linkflags="-Wl,--compat-implib -Wl,--enable-auto-import -Wl,--enable-stdcall-fixup" &&
# #$(if ( echo $RUNPLATFORM | grep -q "^aarch64" ); then echo "architecture=arm"; fi) 
# #alternative options: threadapi=pthread context-impl=winfib context-impl=WinFiber
# #context-impl=ucontext
# #architecture=x86
# #architecture=arm
# mkdir -p $INSTALLPREFIX/bin &&
# mv -f $INSTALLPREFIX/lib/*.dll $INSTALLPREFIX/bin/ &&
# # fix missing .dll.a files when building with LLVM/CLang
# if ${CC:-gcc} --version|grep -q clang && ! ls -1 $INSTALLPREFIX/lib/*-[xa][36][24].dll.a &> /dev/null; then
#  for F in $INSTALLPREFIX/bin/*.dll; do
#   dlltool -D $F -l $INSTALLPREFIX/lib/$(basename $F|sed -e "s/\.dll$/&.a/")
#   #${DLLTOOL:-dlltool} -D $F -l $INSTALLPREFIX/lib/$(basename $F|sed -e "s/\.dll$/&.a/")
#  done
# fi &&
# # remove architecture suffix from library names (version >= 1.69.0)
# for F in $INSTALLPREFIX/lib/*-[xa][36][24].a $INSTALLPREFIX/lib/*-[xa][36][24].dll.a; do
#  cp -f $F $(echo $F | sed -e "s/-[xa][36][24]\(\.a\|\.dll\.a\)$/\1/")
# done &&
# # also install bjam and b2 (version >= 1.72.0)
# cp -f tools/build/src/engine/b*.exe $INSTALLPREFIX/bin/ &&
# # fix absolute link in .cmake file(s)
# touch dummy &&
# #sed -i -e "s?$(echo $INSTALLPREFIX|sed -e "s?^/\([a-zA-Z]\)/?\1:/?")?\${CMAKE_CURRENT_LIST_FILE}/../../../..?g" $(grep -l "$(echo $INSTALLPREFIX|sed -e "s?^/\([a-zA-Z]\)/?\1:/?")" $INSTALLPREFIX/lib/cmake/*/*.cmake) dummy &&
# sed -i -e "s?$(cygpath -m $INSTALLPREFIX)?\${CMAKE_CURRENT_LIST_FILE}/../../../..?g" $(grep -l "$(cygpath -m $INSTALLPREFIX)" $INSTALLPREFIX/lib/cmake/*/*.cmake) dummy &&
# #wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd ../.. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf boost_$(echo $VERSION|sed -e "s/\./_/g")
##./build.sh gcc
#
#
#
### fix missing symbols in 32-bit assembler
######See also: https://github.com/boostorg/context/commit/70fab42aa4f5d2138d8c47a231d929c3768d61c9
##sed -i.bak2 -e "s/^jump_fcontext/_&/" libs/context/src/asm/jump_i386_ms_pe_gas.asm
##sed -i.bak2 -e "s/^make_fcontext/_&/" libs/context/src/asm/make_i386_ms_pe_gas.asm
##sed -i.bak2 -e "s/^ontop_fcontext/_&/" libs/context/src/asm/ontop_i386_ms_pe_gas.asm
##sed -i.bak2 -e "s/^\.section \.drectve$//; s/^\.ascii.*-export.*$//" libs/context/src/asm/jump_i386_ms_pe_gas.asm libs/context/src/asm/make_i386_ms_pe_gas.asm libs/context/src/asm/ontop_i386_ms_pe_gas.asm
##./b2 --user-config=user-config.jam \
##     --with-thread \
##     --with-system \
##     -sNO_BZIP2=1 \
##     -sNO_ZLIB=1 \
##     release stage
##-Wa,--32
##-Wl,--enable-stdcall-fixup
#
#
#
##for A in jump make ontop; do
##done
###sed -i.bak -e "s/^.386/.686/; s/stmxcsr/STMXCSR/; s/ldmxcsr/LDMXCSR/; s/jump_fcontext/_&/" libs/context/src/asm/jump_i386_ms_pe_masm.asm
##jwasm -Zf -zcw -zze $(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "-win64"; else echo "-coff"; fi) -Fobuild_win/boost/bin.v2/libs/context/build/gcc-10.1.0/release/link-static/threading-multi/visibility-hidden/asm/jump_i386_ms_pe_gas.o libs/context/src/asm/jump_i386_ms_pe_masm.asm
#
#as -march=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "generic64 --64"; else echo "i686+687+sse --32"; fi) libs/context/src/asm/jump_i386_ms_pe_gas.asm -o build_win/boost/bin.v2/libs/context/build/gcc-10.1.0/release/link-static/threading-multi/visibility-hidden/asm/jump_i386_ms_pe_gas.o
#
#g++ -x assembler-with-cpp -m32 -mthreads -O3 -finline-functions -Wno-inline -Wall -fvisibility=hidden -march=i686  -DBOOST_ALL_NO_LIB=1 -DBOOST_CONTEXT_SOURCE -DBOOST_DISABLE_ASSERTS -DNDEBUG -D_WIN32_WINNT=0x0601 -I"." -c -o "build_win/boost/bin.v2/libs/context/build/gcc-10.1.0/release/link-static/threading-multi/visibility-hidden/asm/jump_i386_ms_pe_gas.o" "libs/context/src/asm/jump_i386_ms_pe_gas.asm"
#g++ -x assembler-with-cpp -m32 -mthreads -O3 -finline-functions -Wno-inline -Wall -fno-leading-underscore -march=i686  -DBOOST_ALL_NO_LIB=1 -DBOOST_CONTEXT_SOURCE -DBOOST_DISABLE_ASSERTS -DNDEBUG -D_WIN32_WINNT=0x0601 -I"." -c -o "build_win/boost/bin.v2/libs/context/build/gcc-10.1.0/release/link-static/threading-multi/visibility-hidden/asm/jump_i386_ms_pe_gas.o" "libs/context/src/asm/jump_i386_ms_pe_gas.asm"
#
##https://stackoverflow.com/questions/1034852/adding-leading-underscores-to-assembly-symbols-with-gcc-on-win32
#
#
#
## fix missing symbols in 32-bit assembler
#sed -i.bak2 -e 's/^\(\.ascii " -export:\\"\)_/\1/' libs/context/src/asm/jump_i386_ms_pe_gas.asm libs/context/src/asm/make_i386_ms_pe_gas.asm libs/context/src/asm/ontop_i386_ms_pe_gas.asm



export NAME="boost"
export STATUS=
export URL=http://www.boost.org/
#export URL=https://github.com/boostorg/boost
export BASENAME=boost
export DESCRIPTION="Boost provides free peer-reviewed portable C++ source libraries."
export CATEGORY=portability
export TYPE=library
export VERSION=1.81.0
export VERSIONDATE=20221215
wl-showstatus --package-version
export DEPENDENCIES=zlib,libbz2,xz,zstd,icu,expat,libiconv,pcre
export OPTIONALDEPENDENCIES=libbacktrace
export BUILDDEPENDENCIES=b2,jwasm
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE_1_0.txt
export LICENSETYPE=BSL
#export DOWNLOADURL="https://sourceforge.net/projects/boost/files/boost/"
export DOWNLOADURL="https://github.com/boostorg/boost/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://downloads.sourceforge.net/project/boost/boost/$VERSION/boost_$(echo $VERSION|sed -e "s/\./_/g").tar.bz2
export DOWNLOADSOURCEURL=https://github.com/boostorg/boost/releases/download/boost-$VERSION/boost-$VERSION.tar.xz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
#tar xj --force-local -f $TARBALLDIR/$BASENAME/boost_$(echo $VERSION|sed -e "s/\./_/g").tar.bz2
#cd boost_$(echo $VERSION|sed -e "s/\./_/g")
tar xJ --force-local -f $TARBALLDIR/$BASENAME/boost-$VERSION.tar.xz
cd boost-$VERSION
## fix boost/stacktrace/detail/frame_msvc.ipp (version >= 1.81.0)
#patch -ulbf boost/stacktrace/detail/frame_msvc.ipp << EOF
#@@ -29,2 +29,3 @@
#
#+#if 0
# #ifdef __CRT_UUID_DECL // for __MINGW32__
#@@ -38,2 +39,3 @@
# #endif
#+#endif
#
#EOF
#wl-showstatus preconfigure &&
# $COMSPEC //C "CD tools\\build & bootstrap.bat $(if ${CXX:-g++} --version | grep clang -q; then echo "clang"; else echo "gcc"; fi)" &&
wl-showstatus build-install &&
 PATH=$PYDIR:$PATH BOOST_ROOT=$PWD MINGW=/ \
 $MINGWPREFIX/share/b2/bin/b2.exe -q --prefix=$INSTALLPREFIX --build-dir=build_win \
  --build-type=complete \
  --layout=tagged \
  --disable-filesystem2 \
  --without-mpi \
  --without-graph_parallel \
  toolset=$(if ${CXX:-g++} --version | grep clang -q; then echo "clang"; else echo "gcc"; fi) \
  target-os=windows \
  abi=ms \
  link=static,shared \
  runtime-link=static,shared \
  variant=release \
  threading=single,multi \
  threadapi=win32 $(if ( echo $RUNPLATFORM | grep -q "^aarch64" ); then echo "--without-coroutine --without-context"; else echo "context-impl=fcontext"; fi) \
  architecture=$(if ( echo $RUNPLATFORM | grep -q "^\(arm\|aarch64\)" ); then echo "arm"; else echo "x86"; fi) \
  address-model=$(if ( echo $RUNPLATFORM | grep -q "^i.86" ); then echo 32; else echo 64; fi) \
  cxxflags="-fpermissive -DBOOST_LOG_WITHOUT_SYSLOG -fpermissive $(if ${CC:-gcc} --version|grep -q clang; then echo "-femulated-tls"; fi)" \
  linkflags="-pthread" \
  stage install &&
 # linkflags="-pthread -Wl,--as-needed -licuuc -licudata -licui18n -licuin" \
 mkdir -p $INSTALLPREFIX/bin &&
 mv -f $INSTALLPREFIX/lib/*.dll $INSTALLPREFIX/bin/ &&
 # fix missing .dll.a files when building with LLVM/CLang
 if ${CC:-gcc} --version|grep -q clang && ! ls -1 $INSTALLPREFIX/lib/*-[xa][36][24].dll.a &> /dev/null; then
  for F in $INSTALLPREFIX/bin/*.dll; do
   dlltool -D $F -l $INSTALLPREFIX/lib/$(basename $F|sed -e "s/\.dll$/&.a/")
   #${DLLTOOL:-dlltool} -D $F -l $INSTALLPREFIX/lib/$(basename $F|sed -e "s/\.dll$/&.a/")
  done
 fi &&
 # remove architecture suffix from library names (version >= 1.69.0)
 for F in $INSTALLPREFIX/lib/*-[xa][36][24].a $INSTALLPREFIX/lib/*-[xa][36][24].dll.a; do
  cp -f $F $(echo $F | sed -e "s/-[xa][36][24]\(\.a\|\.dll\.a\)$/\1/")
 done &&
 ## also install bjam and b2 (version >= 1.72.0)
 #cp -f tools/build/src/engine/b*.exe $INSTALLPREFIX/bin/ &&
 # fix absolute link in .cmake file(s)
 touch dummy &&
 #sed -i -e "s?$(echo $INSTALLPREFIX|sed -e "s?^/\([a-zA-Z]\)/?\1:/?")?\${CMAKE_CURRENT_LIST_FILE}/../../../..?g" $(grep -l "$(echo $INSTALLPREFIX|sed -e "s?^/\([a-zA-Z]\)/?\1:/?")" $INSTALLPREFIX/lib/cmake/*/*.cmake) dummy &&
 sed -i -e "s?$(cygpath -m $INSTALLPREFIX)?\${CMAKE_CURRENT_LIST_FILE}/../../../..?g" $(grep -l "$(cygpath -m $INSTALLPREFIX)" $INSTALLPREFIX/lib/cmake/*/*.cmake) dummy &&
 #wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf boost_$(echo $VERSION|sed -e "s/\./_/g")
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf boost-$VERSION




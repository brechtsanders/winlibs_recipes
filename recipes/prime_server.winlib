export NAME="prime_server"
export STATUS=
export URL=https://github.com/kevinkreiser/prime_server
export BASENAME=prime_server
export DESCRIPTION="non-blocking (web)server API for distributed computing and SOA based on zeromq"
export CATEGORY=communication
export TYPE=application
#export VERSION=0.6.3
#export VERSIONDATE=20190105
#export VERSION=0.6.4
#export VERSIONDATE=20190225
#export VERSION=0.6.5
#export VERSIONDATE=20191016
#export VERSION=0.6.6
#export VERSIONDATE=20200616
#export VERSION=0.6.7
#export VERSIONDATE=20200805
####src/prime_proxyd.cpp:4:10: fatal error: logging.hpp: No such file or directory
export VERSION=0.7.0
export VERSIONDATE=20210302
wl-showstatus --package-version
export DEPENDENCIES=zeromq,czmq,libcurl,libsodium
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=COPYING
export LICENSETYPE=BSD
export DOWNLOADURL="https://github.com/kevinkreiser/prime_server/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://github.com/kevinkreiser/prime_server/archive/$VERSION.tar.gz
export DOWNLOADSOURCEURL="https://github.com/kevinkreiser/prime_server/archive/$VERSION.tar.gz https://gist.githubusercontent.com/kevinkreiser/39f2e39273c625d96790/raw/c5b9b40d1e47cd190d78582993fd07e4478540af/logging.hpp"
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xfz $TARBALLDIR/$BASENAME/$VERSION.tar.gz
cd $BASENAME-$VERSION
# fix missing file
touch README
# fix missing prime_server/logging.hpp
#cp $TARBALLDIR/$BASENAME/logging.hpp prime_server/
cp $TARBALLDIR/$BASENAME/logging.hpp src/logging
# fix src/zmq_helpers.cpp (version >= 0.7.0)
patch -ulbf src/zmq_helpers.cpp << EOF
@@ -1,3 +1,7 @@
 #include "zmq_helpers.hpp"
+#ifdef _WIN32
+#include <winsock2.h>
+#else
 #include <arpa/inet.h>
+#endif
 #include <ctime>
EOF
# fix src/prime_server.cpp (version >= 0.7.0)
patch -ulbf src/prime_server.cpp << EOF
@@ -35,2 +35,3 @@
     // first we block SIGTERM in the main thread (its children will inherit this)
+#ifndef _WIN32
     sigset_t set;
@@ -57,2 +58,3 @@
     }).detach();
+#endif
   }
EOF
# fix src/http_util.cpp (version >= 0.7.0)
patch -ulbf src/http_util.cpp << EOF
@@ -73,4 +73,15 @@
     std::map<std::string, unsigned char> entries;
-    while ((entry = readdir(dir)) != nullptr)
+    while ((entry = readdir(dir)) != nullptr) {
+#ifdef _WIN32
+      struct stat statinfo;
+      auto fullpath = canonical + '/' + path;
+      if (stat(fullpath.c_str(), &statinfo))
+       statinfo.st_mode = 0;
+      entries.emplace(entry->d_name, statinfo.st_mode);
+#define DT_REG         S_IFREG
+#define DT_DIR         S_IFDIR
+#else
       entries.emplace(entry->d_name, entry->d_type);
+#endif
+    }
     closedir(dir);
EOF
wl-showstatus configure &&
 autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal &&
 #./autogen.sh &&
 #    echo OK
 ## fix building DLLs on 64-bit
 #if ( echo $RUNPLATFORM | grep -q x86_64 ); then
 # echo "AM_GNU_GETTEXT_VERSION([$(gettext --version|head -n1|sed -e "s/^.* \([0-9\.]*\) *$/\1/")])" >> configure.ac &&
 # autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal
 #fi
 #INTLTOOL_PERL="$PERLDIR/bin/perl.exe" 
 #PERL="$PERLDIR/bin/perl.exe -I$PERLDIR/lib" 
 #PYTHON=$PYDIR/python.exe 
 #PYTHON=$PYDIR/python.exe C_INCLUDE_PATH=$PYDIR/include${C_INCLUDE_PATH:+:$C_INCLUDE_PATH} 
 #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM LDFLAGS="-Wl,--as-needed -Wl,-no-undefined" &&
 #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM LDFLAGS="-Wl,--as-needed" &&
 ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM CXXFLAGS="-fpermissive -D_POSIX_THREAD_SAFE_FUNCTIONS" &&
 # fix building DLLs
 sed -i.bak -e "s/\(allow_undefined=\)yes/\1no/" libtool &&
 #wl-showstatus build &&
 #make &&
 wl-showstatus build-install &&
 make install-strip &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION



#export BUILDDEPENDENCIES=cmake,ninja
#export OPTIONALBUILDDEPENDENCIES=
#sed -i.bak -e "s/\(add_library([^ ]*\) SHARED/\1/" CMakeLists.txt
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) -S. -Bbuild_static &&
# #-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) -S. -Bbuild_shared &&
# ## fix execution of Python scripts
# #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|glib-genmarshal\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
# ## fix missing link libraries
# #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lws2_32/" build_win/build.ninja &&
# #wl-showstatus build &&
# #ninja -Cbuild_static &&
# #wl-showstatus build &&
# #ninja -Cbuild_shared &&
# wl-showstatus build-install &&
# ninja -Cbuild_static install/strip &&
# wl-showstatus build-install &&
# ninja -Cbuild_shared install/strip &&
#    echo OK
# #wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




#export NAME="wxWidgets"
#export STATUS=
#export URL=http://www.wxwidgets.org/
#export BASENAME=wxwidgets
#export DESCRIPTION="wxWidgets is a C++ library that lets developers create applications for Windows, OS X, Linux and UNIX on 32-bit and 64-bit architectures as well as several mobile platforms including Windows Mobile, iPhone SDK and embedded GTK+."
#export CATEGORY=gui,portability
#export TYPE=library
##export VERSION=2.8.7
##export VERSION=2.8.9
##export VERSION=2.8.10
##export VERSION=2.8.11
##export VERSIONDATE=20100423
##export VERSION=2.8.12
##export VERSIONDATE=20110328
##export VERSION=2.9.2
##export VERSIONDATE=20110713
##export VERSION=2.9.3
##export VERSIONDATE=20111215
##export VERSION=2.9.4
##export VERSIONDATE=20120713
##export VERSION=2.9.5
##export VERSIONDATE=20130717
##export VERSION=3.0.0
##export VERSIONDATE=20131112
##export VERSION=3.0.2
##export VERSIONDATE=20150424
##export VERSION=3.0.3
##export VERSIONDATE=20170503
##export VERSION=3.0.3.1
##export VERSIONDATE=20171208
#export VERSION=3.0.4
#export VERSIONDATE=20180307
##export VERSION=3.0.5
##export VERSIONDATE=20200422
##export VERSION=3.0.5.1
##export VERSIONDATE=20200502
##export VERSION=3.1.0
##export VERSIONDATE=20160306
##export VERSION=3.1.1
##export VERSIONDATE=20180220
##export VERSION=3.1.2
##export VERSIONDATE=20181210
#wl-showstatus --package-version
#export DEPENDANCIES=expat,zlib,cairo
#export OPTIONALDEPENDANCIES=
#export BUILDDEPENDANCIES=
##export VERSION=3.1.3
##export VERSIONDATE=20191028
##wl-showstatus --package-version
##export DEPENDANCIES=expat,zlib,cairo
##export OPTIONALDEPENDANCIES=
##export BUILDDEPENDANCIES=cmake
#export LICENSEFILE=docs/licence.txt
#export LICENSETYPE=LGPL
##export DOWNLOADURL="http://sourceforge.net/projects/wxwindows/files/ wxMSW- .zip"
##export DOWNLOADURL="http://www.wxwidgets.org/downloads/ wxMSW- .zip"
##export DOWNLOADURL="http://www.wxwidgets.org/downloads/ wxWidgets-"
##export DOWNLOADURL="https://github.com/wxWidgets/wxWidgets/releases wxWidgets-"
#export DOWNLOADURL="https://github.com/wxWidgets/wxWidgets/releases v"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
##export DOWNLOADSOURCEURL=http://downloads.sourceforge.net/wxwindows/wxMSW-$VERSION.zip
##export DOWNLOADSOURCEURL=http://downloads.sourceforge.net/project/wxwindows/$VERSION/wxWidgets-$VERSION.tar.bz2
##export DOWNLOADSOURCEURL=https://github.com/wxWidgets/wxWidgets/releases/download/v$VERSION/wxWidgets-$VERSION.zip
##export DOWNLOADSOURCEURL=https://github.com/wxWidgets/wxWidgets/releases/download/v$VERSION/wxWidgets-$VERSION.tar.bz2
#export DOWNLOADSOURCEURL=https://github.com/wxWidgets/wxWidgets/archive/v$VERSION.tar.gz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
###wl-download -v -d $TARBALLDIR/$BASENAME http://downloads.sourceforge.net/wxwindows/wxWidgets-$VERSION-CHM.zip
##wl-download -v -d $TARBALLDIR/$BASENAME http://downloads.sourceforge.net/project/wxwindows/$VERSION/wxWidgets-$VERSION-chm.zip
#wl-wait4deps
##unzip -oq $TARBALLDIR/$BASENAME/wxMSW-$VERSION.zip
##cd wxMSW-$VERSION 
##tar xfj $TARBALLDIR/$BASENAME/wxWidgets-$VERSION.tar.bz2
#tar xfz $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
##unzip -oq $TARBALLDIR/$BASENAME/wxWidgets-$VERSION.zip
#cd wxWidgets-$VERSION
#
##cd build &&
## ../configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-static --enable-shared --disable-debug --enable-unicode --disable-monolithic --with-odbc --without-libmspack &&
## make install &&
## cd .. && 
#
##export WXWIN=`pwd`
### fix for -lexpat which is in the wrong place
##mv utils/wxrc/Makefile.in utils/wxrc/Makefile.in.bak
##sed -e "s/\(\$(EXTRALIBS_XML)\) *\(\$(__WXLIB_BASE_p) *\$(__WXLIB_MONO_p)\)/\2 \1/" utils/wxrc/Makefile.in.bak > utils/wxrc/Makefile.in
### optimize for smaller size
##mv configure configure.bak
##sed -e "s/-O2/-Os/g" configure.bak > configure
##wl-showstatus configure &&
###./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-static --disable-shared --enable-unicode --enable-monolithic --enable-debug --disable-threads --with-odbc --enable-stl --enable-optimise && make install
###./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --disable-static --enable-shared --enable-unicode --enable-monolithic --disable-debug --disable-threads --with-odbc --enable-stl --enable-optimise && make clean install
###./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-static --enable-shared --enable-unicode --enable-monolithic --disable-debug --disable-threads --with-odbc --enable-stl --enable-optimise && make clean install
###./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-static --disable-shared --enable-unicode --enable-monolithic --disable-debug --disable-threads --with-odbc --enable-stl --enable-optimise && make install
######monodll_helpctrl.o:helpctrl.cpp:(.text+0x4238): undefined reference to `_wx_link_dummy_func_wxhtml_chm_support()'
###./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-static --enable-shared --enable-unicode --disable-monolithic --disable-debug --enable-gui --enable-plugins --enable-optimise --enable-threads --with-odbc --disable-stl --enable-mshtmlhelp --with-msw --without-x11 --without-x --with-libjpeg -with-libpng --with-libtiff --enable-icocur --with-zlib --with-regex --with-expat --with-libmspack --without-sdl --with-opengl --disable-universal --enable-mediactrl --enable-graphics_ctx --enable-dataviewctrl --enable-accessibility --enable-permissive --enable-no_exceptions &&
######could not read symbols: Memory exhausted
######see also: http://gcc.gnu.org/bugzilla/show_bug.cgi?id=43601
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-static --enable-shared --enable-unicode --disable-monolithic --disable-debug --enable-gui --enable-plugins --enable-optimise --enable-threads --with-odbc --disable-stl --enable-mshtmlhelp --with-msw --without-x11 --without-x --with-libjpeg -with-libpng --with-libtiff --enable-icocur --with-zlib --with-regex --with-expat --with-libmspack --without-sdl --with-opengl --disable-universal --enable-mediactrl --enable-graphics_ctx --enable-dataviewctrl --enable-accessibility --enable-permissive --enable-no_exceptions CXXFLAGS="-Os -fno-keep-inline-dllexport" &&
## make -j1 all install-strip &&
## mv Makefile Makefile.bak
## sed -e "s/-shared -o/-shared -Wl,-fmo-keep-inline-dllexport -o/" Makefile.bak > Makefile
## make -j1 all install-strip ./Makefile:SHARED_LD_CXX="${CXX:-g++} -shared -Wl,-fmo-keep-inline-dllexport -o" SHARED_LD_MODULE_CXX="${CXX:-g++} -shared -Wl,-fmo-keep-inline-dllexport -o" &&
##    echo OK
#
### fix for 64-bit (version <= 3.0.0)
##if ( echo $RUNPLATFORM | grep -q x86_64 ); then
##  mv build/msw/config.gcc build/msw/config.gcc.bak
##  sed -e "s/^\(CXX *= *g++\)/\1 -fpermissive/" build/msw/config.gcc.bak > build/msw/config.gcc
##patch -ulbf include/wx/filefn.h << EOF
##--- include/wx/filefn.h  2011-07-04 23:26:12 +0200
##+++ include/wx/filefn.h  2011-08-04 13:28:04 +0200
##@@ -370,3 +370,3 @@
##     #ifdef wxHAS_HUGE_FILES
##-        #define   wxCRT_StatA       wxPOSIX_IDENT(stati64)
##+        #define   wxCRT_StatA       wxPOSIX_IDENT(_stati64)
##     #else
##EOF
##fi
### fix missing _mkdir/_rmdir in include/wx/filefn.h on 32-bit MinGW-W64 (version = 3.0.0)
##if echo -e "#include<_mingw.h>\nint v=__MINGW64_VERSION_MAJOR;" | ${CC:-gcc} -c -xc - -o /dev/null &> /dev/null; then
##patch -ulbf include/wx/filefn.h << EOF
##--- include/wx/filefn.h  2013-11-11 14:10:39.000000000 +0100
##+++ include/wx/filefn.h  2014-11-18 11:37:44.731196900 +0100
##@@ -334,4 +334,9 @@
##     #define   wxCRT_ChmodA      wxPOSIX_IDENT(chmod)
##-    #define   wxCRT_MkDirA      wxPOSIX_IDENT(mkdir)
##-    #define   wxCRT_RmDirA      wxPOSIX_IDENT(rmdir)
##+    #if defined(__MINGW32__) && !defined(__MINGW64__)
##+        #define   wxCRT_MkDirA      mkdir
##+        #define   wxCRT_RmDirA      rmdir
##+    #else
##+        #define   wxCRT_MkDirA      wxPOSIX_IDENT(mkdir)
##+        #define   wxCRT_RmDirA      wxPOSIX_IDENT(rmdir)
##+    #endif
##     #ifdef wxHAS_HUGE_FILES
##EOF
##fi
#### fix Windows API version detection issues in include/wx/msw/gccpriv.h
###mv include/wx/msw/gccpriv.h include/wx/msw/gccpriv.h.bak
###echo "#include <w32api.h>" > include/wx/msw/gccpriv.h
###cat include/wx/msw/gccpriv.h.bak >> include/wx/msw/gccpriv.h
#### fix missing _mkdir/_rmdir in src/common/filefn.cpp
###mv src/common/filefn.cpp src/common/filefn.cpp.bak
###cat > src/common/filefn.cpp << EOF
####define _mkdir mkdir
####define _rmdir rmdir
###EOF
###cat src/common/filefn.cpp.bak >> src/common/filefn.cpp
### fix include/wx/msw/gccpriv.h for newer MinGW versions (version <= 3.0.0)
##patch -ulbf include/wx/msw/gccpriv.h << EOF
##--- include/wx/msw/gccpriv.h  2013-11-11 14:10:40 +0100
##+++ include/wx/msw/gccpriv.h  2013-12-04 10:44:26 +0100
##@@ -30,6 +30,9 @@
##         #define HAVE_W32API_H
##     #endif
## #endif
##+#if __MINGW32_MAJOR_VERSION > 3 || (__MINGW32_MAJOR_VERSION == 3 && __MINGW32_MINOR_VERSION >= 20)
##+    #undef HAVE_W32API_H
##+#endif
##
## #if wxCHECK_WATCOM_VERSION(1,0)
##     #define HAVE_W32API_H
##EOF
### fix missing AttachConsole in src/msw/app.cpp.bak (version >= 3.1.0)
##mv src/msw/app.cpp src/msw/app.cpp.bak &&
##echo "#define _WIN32_WINNT 0x0501" > src/msw/app.cpp &&
##cat src/msw/app.cpp.bak >> src/msw/app.cpp
## fix missing strcasecmp/strncasecmp in include/wx/wxcrtbase.h (version >= 3.0.3)
#if ! echo -e "#include<_mingw.h>\nint v=__MINGW64_VERSION_MAJOR;" | ${CC:-gcc} -c -xc - -o /dev/null &> /dev/null; then
#mv include/wx/wxcrtbase.h include/wx/wxcrtbase.h.bak &&
#sed -e "s/\b\(strn*\)case\(cmp\)\b/\1i\2/" include/wx/wxcrtbase.h.bak > include/wx/wxcrtbase.h
#fi
### disable gdiplus if missing (e.g. on 64-bit)
##if ( echo ""|${CXX:-g++} -xc++ - -lgdiplus -mdll -ocheckgdiplus.dll ); then
## USE_GDIPLUS=1
##else
## USE_GDIPLUS=0
##fi
##WXCXXFLAGS=
#
### fix src/msw/graphics.cpp (version >= 3.1.1)
##patch -ulbf src/msw/graphics.cpp << EOF
##@@ -1007,3 +1007,3 @@
##             int rc = gs_pFontFamily[j].GetFamilyName(familyName);
##-            if ( rc == 0 && name == familyName )
##+            if ( rc == 0 && name == wxString(familyName) )
##             {
##EOF
#
## fix narrowing conversion error in src/msw/mediactrl_am.cpp (version >= 3.0.4)
#patch -ulbf src/msw/mediactrl_am.cpp << EOF
#@@ -2234 +2234 @@
#-    case 0xfffffd9f: // readystatechange in IActiveMovie2 and IMediaPlayer
#+    case (long)0xfffffd9f: // readystatechange in IActiveMovie2 and IMediaPlayer
#EOF
#
### create Makefile to allow parallel builds
##cat > Makefile.parallel << EOF
##WXCXXFLAGS=
##USE_GDIPLUS:=\$(shell if ( echo ""|${CXX:-g++} -xc++ - -lgdiplus -mdll -ocheckgdiplus.dll ); then echo 1; else 0; fi)
##CMD:=\$(subst \\,/,\$(COMSPEC))
##
##all: build_release_shared_unicode build_release_shared build_release_unicode build_release build_debug_shared_unicode build_debug_shared build_debug_unicode build_debug
##
##build_release_shared_unicode:
##`printf "\\t"`\$(CMD) /c "mingw32-make -C build/msw -f makefile.gcc -j1 all BUILD=release MONOLITHIC=0 SHARED=1 UNICODE=1 USE_GUI=1 USE_OPENGL=1 USE_ODBC=1 USE_EXCEPTIONS=1 USE_CAIRO=1 USE_GDIPLUS=\$(USE_GDIPLUS) CXX=\\"${CXX:-g++} \$(WXCXXFLAGS)\\""
##build_release_shared:
##`printf "\\t"`\$(CMD) /c "mingw32-make -C build/msw -f makefile.gcc -j1 all BUILD=release MONOLITHIC=0 SHARED=1 UNICODE=0 USE_GUI=1 USE_OPENGL=1 USE_ODBC=1 USE_EXCEPTIONS=1 USE_CAIRO=1 USE_GDIPLUS=\$(USE_GDIPLUS) CXX=\\"${CXX:-g++} \$(WXCXXFLAGS)\\""
##build_release_unicode:
##`printf "\\t"`\$(CMD) /c "mingw32-make -C build/msw -f makefile.gcc -j1 all BUILD=release MONOLITHIC=0 SHARED=0 UNICODE=1 USE_GUI=1 USE_OPENGL=1 USE_ODBC=1 USE_EXCEPTIONS=1 USE_CAIRO=1 USE_GDIPLUS=\$(USE_GDIPLUS) CXX=\\"${CXX:-g++} \$(WXCXXFLAGS)\\""
##build_release:
##`printf "\\t"`\$(CMD) /c "mingw32-make -C build/msw -f makefile.gcc -j1 all BUILD=release MONOLITHIC=0 SHARED=0 UNICODE=0 USE_GUI=1 USE_OPENGL=1 USE_ODBC=1 USE_EXCEPTIONS=1 USE_CAIRO=1 USE_GDIPLUS=\$(USE_GDIPLUS) CXX=\\"${CXX:-g++} \$(WXCXXFLAGS)\\""
##build_debug_shared_unicode:
##`printf "\\t"`\$(CMD) /c "mingw32-make -C build/msw -f makefile.gcc -j1 all BUILD=debug MONOLITHIC=0 SHARED=1 UNICODE=1 USE_GUI=1 USE_OPENGL=1 USE_ODBC=1 USE_EXCEPTIONS=1 USE_CAIRO=1 USE_GDIPLUS=\$(USE_GDIPLUS) CXX=\\"${CXX:-g++} \$(WXCXXFLAGS)\\""
##build_debug_shared:
##`printf "\\t"`\$(CMD) /c "mingw32-make -C build/msw -f makefile.gcc -j1 all BUILD=debug MONOLITHIC=0 SHARED=1 UNICODE=0 USE_GUI=1 USE_OPENGL=1 USE_ODBC=1 USE_EXCEPTIONS=1 USE_CAIRO=1 USE_GDIPLUS=\$(USE_GDIPLUS) CXX=\\"${CXX:-g++} \$(WXCXXFLAGS)\\""
##build_debug_unicode:
##`printf "\\t"`\$(CMD) /c "mingw32-make -C build/msw -f makefile.gcc -j1 all BUILD=debug MONOLITHIC=0 SHARED=0 UNICODE=1 USE_GUI=1 USE_OPENGL=1 USE_ODBC=1 USE_EXCEPTIONS=1 USE_CAIRO=1 USE_GDIPLUS=\$(USE_GDIPLUS) CXX=\\"${CXX:-g++} \$(WXCXXFLAGS)\\""
##build_debug:
##`printf "\\t"`\$(CMD) /c "mingw32-make -C build/msw -f makefile.gcc -j1 all BUILD=debug MONOLITHIC=0 SHARED=0 UNICODE=0 USE_GUI=1 USE_OPENGL=1 USE_ODBC=1 USE_EXCEPTIONS=1 USE_CAIRO=1 USE_GDIPLUS=\$(USE_GDIPLUS) CXX=\\"${CXX:-g++} \$(WXCXXFLAGS)\\""
##build_monolithic_release_shared_unicode:
##`printf "\\t"`\$(CMD) /c "mingw32-make -C build/msw -f makefile.gcc -j1 all BUILD=release MONOLITHIC=1 SHARED=1 UNICODE=1 USE_GUI=1 USE_OPENGL=1 USE_ODBC=1 USE_EXCEPTIONS=1 USE_CAIRO=1 USE_GDIPLUS=\$(USE_GDIPLUS) CXX=\\"${CXX:-g++} \$(WXCXXFLAGS)\\""
##build_monolithic_release_shared:
##`printf "\\t"`\$(CMD) /c "mingw32-make -C build/msw -f makefile.gcc -j1 all BUILD=release MONOLITHIC=1 SHARED=1 UNICODE=0 USE_GUI=1 USE_OPENGL=1 USE_ODBC=1 USE_EXCEPTIONS=1 USE_CAIRO=1 USE_GDIPLUS=\$(USE_GDIPLUS) CXX=\\"${CXX:-g++} \$(WXCXXFLAGS)\\""
##build_monolithic_release_unicode:
##`printf "\\t"`\$(CMD) /c "mingw32-make -C build/msw -f makefile.gcc -j1 all BUILD=release MONOLITHIC=1 SHARED=0 UNICODE=1 USE_GUI=1 USE_OPENGL=1 USE_ODBC=1 USE_EXCEPTIONS=1 USE_CAIRO=1 USE_GDIPLUS=\$(USE_GDIPLUS) CXX=\\"${CXX:-g++} \$(WXCXXFLAGS)\\""
##build_monolithic_release:
##`printf "\\t"`\$(CMD) /c "mingw32-make -C build/msw -f makefile.gcc -j1 all BUILD=release MONOLITHIC=1 SHARED=0 UNICODE=0 USE_GUI=1 USE_OPENGL=1 USE_ODBC=1 USE_EXCEPTIONS=1 USE_CAIRO=1 USE_GDIPLUS=\$(USE_GDIPLUS) CXX=\\"${CXX:-g++} \$(WXCXXFLAGS)\\""
##build_monolithic_debug_shared_unicode:
##`printf "\\t"`\$(CMD) /c "mingw32-make -C build/msw -f makefile.gcc -j1 all BUILD=debug MONOLITHIC=1 SHARED=1 UNICODE=1 USE_GUI=1 USE_OPENGL=1 USE_ODBC=1 USE_EXCEPTIONS=1 USE_CAIRO=1 USE_GDIPLUS=\$(USE_GDIPLUS) CXX=\\"${CXX:-g++} \$(WXCXXFLAGS)\\""
##build_monolithic_debug_shared:
##`printf "\\t"`\$(CMD) /c "mingw32-make -C build/msw -f makefile.gcc -j1 all BUILD=debug MONOLITHIC=1 SHARED=1 UNICODE=0 USE_GUI=1 USE_OPENGL=1 USE_ODBC=1 USE_EXCEPTIONS=1 USE_CAIRO=1 USE_GDIPLUS=\$(USE_GDIPLUS) CXX=\\"${CXX:-g++} \$(WXCXXFLAGS)\\""
##build_monolithic_debug_unicode:
##`printf "\\t"`\$(CMD) /c "mingw32-make -C build/msw -f makefile.gcc -j1 all BUILD=debug MONOLITHIC=1 SHARED=0 UNICODE=1 USE_GUI=1 USE_OPENGL=1 USE_ODBC=1 USE_EXCEPTIONS=1 USE_CAIRO=1 USE_GDIPLUS=\$(USE_GDIPLUS) CXX=\\"${CXX:-g++} \$(WXCXXFLAGS)\\""
##build_monolithic_debug:
##`printf "\\t"`\$(CMD) /c "mingw32-make -C build/msw -f makefile.gcc -j1 all BUILD=debug MONOLITHIC=1 SHARED=0 UNICODE=0 USE_GUI=1 USE_OPENGL=1 USE_ODBC=1 USE_EXCEPTIONS=1 USE_CAIRO=1 USE_GDIPLUS=\$(USE_GDIPLUS) CXX=\\"${CXX:-g++} \$(WXCXXFLAGS)\\""
##EOF
#
## create Makefile to allow parallel builds
#cat > Makefile.parallel << EOF
#WXCXXFLAGS=
#USE_GDIPLUS:=\$(shell if ( echo ""|${CXX:-g++} -xc++ - -lgdiplus -mdll -ocheckgdiplus.dll ); then echo 1; else 0; fi)
#
#all: build_release_shared_unicode build_release_shared build_release_unicode build_release build_debug_shared_unicode build_debug_shared build_debug_unicode build_debug
#
#build_release_shared_unicode:
#`printf "\\t"`mingw32-make -C build/msw -f makefile.gcc -j1 all BUILD=release MONOLITHIC=0 SHARED=1 UNICODE=1 USE_GUI=1 USE_OPENGL=1 USE_ODBC=1 USE_EXCEPTIONS=1 USE_CAIRO=1 USE_GDIPLUS=\$(USE_GDIPLUS) CXX="${CXX:-g++} \$(WXCXXFLAGS)"
#build_release_shared:
#`printf "\\t"`mingw32-make -C build/msw -f makefile.gcc -j1 all BUILD=release MONOLITHIC=0 SHARED=1 UNICODE=0 USE_GUI=1 USE_OPENGL=1 USE_ODBC=1 USE_EXCEPTIONS=1 USE_CAIRO=1 USE_GDIPLUS=\$(USE_GDIPLUS) CXX="${CXX:-g++} \$(WXCXXFLAGS)"
#build_release_unicode:
#`printf "\\t"`mingw32-make -C build/msw -f makefile.gcc -j1 all BUILD=release MONOLITHIC=0 SHARED=0 UNICODE=1 USE_GUI=1 USE_OPENGL=1 USE_ODBC=1 USE_EXCEPTIONS=1 USE_CAIRO=1 USE_GDIPLUS=\$(USE_GDIPLUS) CXX="${CXX:-g++} \$(WXCXXFLAGS)"
#build_release:
#`printf "\\t"`mingw32-make -C build/msw -f makefile.gcc -j1 all BUILD=release MONOLITHIC=0 SHARED=0 UNICODE=0 USE_GUI=1 USE_OPENGL=1 USE_ODBC=1 USE_EXCEPTIONS=1 USE_CAIRO=1 USE_GDIPLUS=\$(USE_GDIPLUS) CXX="${CXX:-g++} \$(WXCXXFLAGS)"
#build_debug_shared_unicode:
#`printf "\\t"`mingw32-make -C build/msw -f makefile.gcc -j1 all BUILD=debug MONOLITHIC=0 SHARED=1 UNICODE=1 USE_GUI=1 USE_OPENGL=1 USE_ODBC=1 USE_EXCEPTIONS=1 USE_CAIRO=1 USE_GDIPLUS=\$(USE_GDIPLUS) CXX="${CXX:-g++} \$(WXCXXFLAGS)"
#build_debug_shared:
#`printf "\\t"`mingw32-make -C build/msw -f makefile.gcc -j1 all BUILD=debug MONOLITHIC=0 SHARED=1 UNICODE=0 USE_GUI=1 USE_OPENGL=1 USE_ODBC=1 USE_EXCEPTIONS=1 USE_CAIRO=1 USE_GDIPLUS=\$(USE_GDIPLUS) CXX="${CXX:-g++} \$(WXCXXFLAGS)"
#build_debug_unicode:
#`printf "\\t"`mingw32-make -C build/msw -f makefile.gcc -j1 all BUILD=debug MONOLITHIC=0 SHARED=0 UNICODE=1 USE_GUI=1 USE_OPENGL=1 USE_ODBC=1 USE_EXCEPTIONS=1 USE_CAIRO=1 USE_GDIPLUS=\$(USE_GDIPLUS) CXX="${CXX:-g++} \$(WXCXXFLAGS)"
#build_debug:
#`printf "\\t"`mingw32-make -C build/msw -f makefile.gcc -j1 all BUILD=debug MONOLITHIC=0 SHARED=0 UNICODE=0 USE_GUI=1 USE_OPENGL=1 USE_ODBC=1 USE_EXCEPTIONS=1 USE_CAIRO=1 USE_GDIPLUS=\$(USE_GDIPLUS) CXX="${CXX:-g++} \$(WXCXXFLAGS)"
#build_monolithic_release_shared_unicode:
#`printf "\\t"`mingw32-make -C build/msw -f makefile.gcc -j1 all BUILD=release MONOLITHIC=1 SHARED=1 UNICODE=1 USE_GUI=1 USE_OPENGL=1 USE_ODBC=1 USE_EXCEPTIONS=1 USE_CAIRO=1 USE_GDIPLUS=\$(USE_GDIPLUS) CXX="${CXX:-g++} \$(WXCXXFLAGS)"
#build_monolithic_release_shared:
#`printf "\\t"`mingw32-make -C build/msw -f makefile.gcc -j1 all BUILD=release MONOLITHIC=1 SHARED=1 UNICODE=0 USE_GUI=1 USE_OPENGL=1 USE_ODBC=1 USE_EXCEPTIONS=1 USE_CAIRO=1 USE_GDIPLUS=\$(USE_GDIPLUS) CXX="${CXX:-g++} \$(WXCXXFLAGS)"
#build_monolithic_release_unicode:
#`printf "\\t"`mingw32-make -C build/msw -f makefile.gcc -j1 all BUILD=release MONOLITHIC=1 SHARED=0 UNICODE=1 USE_GUI=1 USE_OPENGL=1 USE_ODBC=1 USE_EXCEPTIONS=1 USE_CAIRO=1 USE_GDIPLUS=\$(USE_GDIPLUS) CXX="${CXX:-g++} \$(WXCXXFLAGS)"
#build_monolithic_release:
#`printf "\\t"`mingw32-make -C build/msw -f makefile.gcc -j1 all BUILD=release MONOLITHIC=1 SHARED=0 UNICODE=0 USE_GUI=1 USE_OPENGL=1 USE_ODBC=1 USE_EXCEPTIONS=1 USE_CAIRO=1 USE_GDIPLUS=\$(USE_GDIPLUS) CXX="${CXX:-g++} \$(WXCXXFLAGS)"
#build_monolithic_debug_shared_unicode:
#`printf "\\t"`mingw32-make -C build/msw -f makefile.gcc -j1 all BUILD=debug MONOLITHIC=1 SHARED=1 UNICODE=1 USE_GUI=1 USE_OPENGL=1 USE_ODBC=1 USE_EXCEPTIONS=1 USE_CAIRO=1 USE_GDIPLUS=\$(USE_GDIPLUS) CXX="${CXX:-g++} \$(WXCXXFLAGS)"
#build_monolithic_debug_shared:
#`printf "\\t"`mingw32-make -C build/msw -f makefile.gcc -j1 all BUILD=debug MONOLITHIC=1 SHARED=1 UNICODE=0 USE_GUI=1 USE_OPENGL=1 USE_ODBC=1 USE_EXCEPTIONS=1 USE_CAIRO=1 USE_GDIPLUS=\$(USE_GDIPLUS) CXX="${CXX:-g++} \$(WXCXXFLAGS)"
#build_monolithic_debug_unicode:
#`printf "\\t"`mingw32-make -C build/msw -f makefile.gcc -j1 all BUILD=debug MONOLITHIC=1 SHARED=0 UNICODE=1 USE_GUI=1 USE_OPENGL=1 USE_ODBC=1 USE_EXCEPTIONS=1 USE_CAIRO=1 USE_GDIPLUS=\$(USE_GDIPLUS) CXX="${CXX:-g++} \$(WXCXXFLAGS)"
#build_monolithic_debug:
#`printf "\\t"`mingw32-make -C build/msw -f makefile.gcc -j1 all BUILD=debug MONOLITHIC=1 SHARED=0 UNICODE=0 USE_GUI=1 USE_OPENGL=1 USE_ODBC=1 USE_EXCEPTIONS=1 USE_CAIRO=1 USE_GDIPLUS=\$(USE_GDIPLUS) CXX="${CXX:-g++} \$(WXCXXFLAGS)"
#EOF
#
### fix for 64-bit
##WXCXXFLAGS="$WXCXXFLAGS -fpermissive"
## use correct C++ version
#####error: 'is_enum' in namespace 'std' does not name a template type
#WXCXXFLAGS="$WXCXXFLAGS -std=gnu++11"
#rm -f checkgdiplus.dll
#
###To do: fix build/msw/config.gcc for win64: CXX = ${CXX:-g++} -fpermissive
## $COMSPEC /c "mingw32-make -C build/msw -f makefile.gcc -j1 all BUILD=release MONOLITHIC=0 SHARED=1 UNICODE=1 USE_GUI=1 USE_OPENGL=1 USE_ODBC=1 USE_EXCEPTIONS=1 USE_CAIRO=1 USE_GDIPLUS=$USE_GDIPLUS CXX=\"${CXX:-g++} $WXCXXFLAGS\"" &&
## $COMSPEC /c "mingw32-make -C build/msw -f makefile.gcc -j1 all BUILD=release MONOLITHIC=0 SHARED=1 UNICODE=0 USE_GUI=1 USE_OPENGL=1 USE_ODBC=1 USE_EXCEPTIONS=1 USE_CAIRO=1 USE_GDIPLUS=$USE_GDIPLUS CXX=\"${CXX:-g++} $WXCXXFLAGS\"" &&
## $COMSPEC /c "mingw32-make -C build/msw -f makefile.gcc -j1 all BUILD=release MONOLITHIC=0 SHARED=0 UNICODE=1 USE_GUI=1 USE_OPENGL=1 USE_ODBC=1 USE_EXCEPTIONS=1 USE_CAIRO=1 USE_GDIPLUS=$USE_GDIPLUS CXX=\"${CXX:-g++} $WXCXXFLAGS\"" &&
## $COMSPEC /c "mingw32-make -C build/msw -f makefile.gcc -j1 all BUILD=release MONOLITHIC=0 SHARED=0 UNICODE=0 USE_GUI=1 USE_OPENGL=1 USE_ODBC=1 USE_EXCEPTIONS=1 USE_CAIRO=1 USE_GDIPLUS=$USE_GDIPLUS CXX=\"${CXX:-g++} $WXCXXFLAGS\"" &&
## $COMSPEC /c "mingw32-make -C build/msw -f makefile.gcc -j1 all BUILD=debug MONOLITHIC=0 SHARED=1 UNICODE=1 USE_GUI=1 USE_OPENGL=1 USE_ODBC=1 USE_EXCEPTIONS=1 USE_CAIRO=1 USE_GDIPLUS=$USE_GDIPLUS CXX=\"${CXX:-g++} $WXCXXFLAGS\"" &&
## $COMSPEC /c "mingw32-make -C build/msw -f makefile.gcc -j1 all BUILD=debug MONOLITHIC=0 SHARED=1 UNICODE=0 USE_GUI=1 USE_OPENGL=1 USE_ODBC=1 USE_EXCEPTIONS=1 USE_CAIRO=1 USE_GDIPLUS=$USE_GDIPLUS CXX=\"${CXX:-g++} $WXCXXFLAGS\"" &&
## $COMSPEC /c "mingw32-make -C build/msw -f makefile.gcc -j1 all BUILD=debug MONOLITHIC=0 SHARED=0 UNICODE=1 USE_GUI=1 USE_OPENGL=1 USE_ODBC=1 USE_EXCEPTIONS=1 USE_CAIRO=1 USE_GDIPLUS=$USE_GDIPLUS CXX=\"${CXX:-g++} $WXCXXFLAGS\"" &&
## $COMSPEC /c "mingw32-make -C build/msw -f makefile.gcc -j1 all BUILD=debug MONOLITHIC=0 SHARED=0 UNICODE=0 USE_GUI=1 USE_OPENGL=1 USE_ODBC=1 USE_EXCEPTIONS=1 USE_CAIRO=1 USE_GDIPLUS=$USE_GDIPLUS CXX=\"${CXX:-g++} $WXCXXFLAGS\"" &&
## #$COMSPEC /c "mingw32-make -C build/msw -f makefile.gcc -j1 all BUILD=release MONOLITHIC=1 SHARED=1 UNICODE=1 USE_GUI=1 USE_OPENGL=1 USE_ODBC=1 USE_EXCEPTIONS=1 USE_CAIRO=1 USE_GDIPLUS=$USE_GDIPLUS CXX=\"${CXX:-g++} $WXCXXFLAGS\"" &&
## #$COMSPEC /c "mingw32-make -C build/msw -f makefile.gcc -j1 all BUILD=release MONOLITHIC=1 SHARED=1 UNICODE=0 USE_GUI=1 USE_OPENGL=1 USE_ODBC=1 USE_EXCEPTIONS=1 USE_CAIRO=1 USE_GDIPLUS=$USE_GDIPLUS CXX=\"${CXX:-g++} $WXCXXFLAGS\"" &&
## #$COMSPEC /c "mingw32-make -C build/msw -f makefile.gcc -j1 all BUILD=release MONOLITHIC=1 SHARED=0 UNICODE=1 USE_GUI=1 USE_OPENGL=1 USE_ODBC=1 USE_EXCEPTIONS=1 USE_CAIRO=1 USE_GDIPLUS=$USE_GDIPLUS CXX=\"${CXX:-g++} $WXCXXFLAGS\"" &&
## #$COMSPEC /c "mingw32-make -C build/msw -f makefile.gcc -j1 all BUILD=release MONOLITHIC=1 SHARED=0 UNICODE=0 USE_GUI=1 USE_OPENGL=1 USE_ODBC=1 USE_EXCEPTIONS=1 USE_CAIRO=1 USE_GDIPLUS=$USE_GDIPLUS CXX=\"${CXX:-g++} $WXCXXFLAGS\"" &&
## #$COMSPEC /c "mingw32-make -C build/msw -f makefile.gcc -j1 all BUILD=debug MONOLITHIC=1 SHARED=1 UNICODE=1 USE_GUI=1 USE_OPENGL=1 USE_ODBC=1 USE_EXCEPTIONS=1 USE_CAIRO=1 USE_GDIPLUS=$USE_GDIPLUS CXX=\"${CXX:-g++} $WXCXXFLAGS\"" &&
## #$COMSPEC /c "mingw32-make -C build/msw -f makefile.gcc -j1 all BUILD=debug MONOLITHIC=1 SHARED=1 UNICODE=0 USE_GUI=1 USE_OPENGL=1 USE_ODBC=1 USE_EXCEPTIONS=1 USE_CAIRO=1 USE_GDIPLUS=$USE_GDIPLUS CXX=\"${CXX:-g++} $WXCXXFLAGS\"" &&
## #$COMSPEC /c "mingw32-make -C build/msw -f makefile.gcc -j1 all BUILD=debug MONOLITHIC=1 SHARED=0 UNICODE=1 USE_GUI=1 USE_OPENGL=1 USE_ODBC=1 USE_EXCEPTIONS=1 USE_CAIRO=1 USE_GDIPLUS=$USE_GDIPLUS CXX=\"${CXX:-g++} $WXCXXFLAGS\"" &&
## #$COMSPEC /c "mingw32-make -C build/msw -f makefile.gcc -j1 all BUILD=debug MONOLITHIC=1 SHARED=0 UNICODE=0 USE_GUI=1 USE_OPENGL=1 USE_ODBC=1 USE_EXCEPTIONS=1 USE_CAIRO=1 USE_GDIPLUS=$USE_GDIPLUS CXX=\"${CXX:-g++} $WXCXXFLAGS\"" &&
#wl-showstatus build &&
#( make -fMakefile.parallel || make -fMakefile.parallel -j1 ) &&
# strip -s $(ls -1 lib/gcc_dll/wx*.dll|grep -v "^lib/gcc_dll/wx[^_]*d_.*\.dll$") &&
# # build utils/hhp2cached
# #$COMSPEC /c "mingw32-make -C utils/hhp2cached -f makefile.gcc -j1 all BUILD=release MONOLITHIC=0 SHARED=0 UNICODE=0 CXX=\"${CXX:-g++} $WXCXXFLAGS\"" &&
# mingw32-make -C utils/hhp2cached -f makefile.gcc -j1 all BUILD=release MONOLITHIC=0 SHARED=0 UNICODE=0 CXX="${CXX:-g++} $WXCXXFLAGS" &&
# #strip -s utils/hhp2cached/gcc_msw/*.exe &&
# strip -s utils/*/gcc_msw/*.exe &&
# # build utils/wxrc
# #$COMSPEC /c "mingw32-make -C utils/wxrc -f makefile.gcc -j1 all BUILD=release MONOLITHIC=0 SHARED=0 UNICODE=0 CXX=\"${CXX:-g++} $WXCXXFLAGS\"" &&
# #mkdir -p $INSTALLPREFIX/wx/bin/gcc_msw &&
# # build utils
# #$COMSPEC /c "mingw32-make -C utils -f makefile.gcc -j1 all BUILD=release MONOLITHIC=0 SHARED=0 UNICODE=0 CXX=\"${CXX:-g++} $WXCXXFLAGS\"" &&
# mingw32-make -C utils -f makefile.gcc -j1 all BUILD=release MONOLITHIC=0 SHARED=0 UNICODE=0 CXX="${CXX:-g++} $WXCXXFLAGS" &&
# # fix DEBUG=1 in build.cfg for non-debug builds
# for F in $(grep -l "^DEBUG_FLAG=1" lib/gcc_*/{msw,mswu}/build.cfg); do 
#   mv -f $F $F.bak &&
#   sed -e "s/^\(DEBUG_FLAG=\)1/\10/" $F.bak > $F &&
#   rm -f $F.bak
# done &&
# wl-showstatus install &&
# mkdir -p $INSTALLPREFIX/wx &&
# cp -rfp lib include $INSTALLPREFIX/wx/ &&
# mkdir -p $INSTALLPREFIX/wx/build/msw &&
# cp -f build/msw/config.gcc $INSTALLPREFIX/wx/build/msw/ &&
# ## also copy .a files for shared libraries as .dll.a files
# #for F in lib/gcc_dll/*.a; do
# # cp -f $F $INSTALLPREFIX/wx/lib/gcc_dll/$(basename $F | sed -e "s/\.a$/.dll&/")
# #done
# mkdir -p $INSTALLPREFIX/wx/bin/gcc_msw &&
# #cp -f utils/wxrc/gcc_msw/*.exe $INSTALLPREFIX/wx/bin/gcc_msw/ &&
# cp -f utils/*/gcc_msw/*.exe $INSTALLPREFIX/wx/bin/gcc_msw/ &&
# # install utils/hhp2cached
# mkdir -p $INSTALLPREFIX/wx/bin/gcc_msw &&
# cp -f utils/hhp2cached/gcc_msw/*.exe $INSTALLPREFIX/wx/bin/gcc_msw/ &&
# # install m4 file
# mkdir -p $INSTALLPREFIX/share/aclocal &&
# cp -f wxwin.m4 $INSTALLPREFIX/share/aclocal/ &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && ( rm -rf wxWidgets-$VERSION || rm -rf wxMSW-$VERSION )
#
## to compile a sample:
## ${CXX:-g++} -o demo.exe -I../../lib/gcc_dll/mswu -I../../include -L../../lib/gcc_dll *.cpp -lwxbase28 -lwxmsw28_core -Wl,--enable-auto-import && PATH=$PATH:../../lib/gcc_dll ./demo.exe



#export NAME="wxWidgets"
#export STATUS=
#export URL=http://www.wxwidgets.org/
#export BASENAME=wxwidgets
#export DESCRIPTION="wxWidgets is a C++ library that lets developers create applications for Windows, OS X, Linux and UNIX on 32-bit and 64-bit architectures as well as several mobile platforms including Windows Mobile, iPhone SDK and embedded GTK+."
#export CATEGORY=gui,portability
#export TYPE=library
#export VERSION=3.1.3
#export VERSIONDATE=20191028
#wl-showstatus --package-version
#export DEPENDANCIES=expat,zlib,cairo,pcre,libjpeg,libpng,libtiff,xz
#export OPTIONALDEPENDANCIES=
#export BUILDDEPENDANCIES=cmake,ninja
#export LICENSEFILE=docs/licence.txt
#export LICENSETYPE=LGPL
##export DOWNLOADURL="http://www.wxwidgets.org/downloads/ wxWidgets-"
##export DOWNLOADURL="https://github.com/wxWidgets/wxWidgets/releases wxWidgets-"
#export DOWNLOADURL="https://github.com/wxWidgets/wxWidgets/releases v"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
##export DOWNLOADSOURCEURL=https://github.com/wxWidgets/wxWidgets/releases/download/v$VERSION/wxWidgets-$VERSION.tar.bz2
#export DOWNLOADSOURCEURL=https://github.com/wxWidgets/wxWidgets/archive/v$VERSION.tar.gz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
##wl-download -v -d $TARBALLDIR/$BASENAME https://github.com/wxWidgets/wxWidgets/releases/download/v$VERSION/wxWidgets-$VERSION-docs-chm.zip
#wl-wait4deps
##tar xfj $TARBALLDIR/$BASENAME/wxWidgets-$VERSION.tar.bz2
#tar xfz $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
#cd wxWidgets-$VERSION
## fix problem with empty wxUSE_WCHAR_T define in include/wx/chartype.h (version = 3.1.3)
#patch -ulbf include/wx/chartype.h << EOF
#@@ -37,2 +37,5 @@
#     #endif
#+#else
#+    #undef wxUSE_WCHAR_T
#+    #define wxUSE_WCHAR_T 1
# #endif /* !defined(wxUSE_WCHAR_T) */
#EOF
## fix pointer conversion issue in src/msw/menuitem.cpp (version >= 3.1.3)
#patch -ulbf src/msw/menuitem.cpp << EOF
#@@ -361 +361 @@
#-        ::GetThemeSysFont(hTheme, TMT_MENUFONT, themeFont.GetPtr());
#+        ::GetThemeSysFont(hTheme, TMT_MENUFONT, (LOGFONT*)themeFont.GetPtr());
#EOF
## fix invalid parameter type to GetThemeSysFont() in src/msw/menuitem.cpp (version >= 3.1.3)
#patch -ulbf src/msw/menuitem.cpp << EOF
#@@ -360,3 +360,3 @@
#         wxUxThemeFont themeFont;
#-        ::GetThemeSysFont(hTheme, TMT_MENUFONT, (LOGFONT*)themeFont.GetPtr());
#+        ::GetThemeSysFont(hTheme, TMT_MENUFONT, (LOGFONTW*)themeFont.GetPtr());
#         // Use NULL window for wxNativeFontInfo, height it is already at the correct ppi
#EOF
### manually copy missing setup.h (version >= 3.1.4)
##cp include/wx/msw/setup.h include/wx/
### avoid symlinks in build/cmake/utils/CMakeLists.txt (version >= 3.1.4)
##patch -ulbf build/cmake/utils/CMakeLists.txt << EOF
##@@ -33,3 +33,3 @@
##
##-    if(NOT MSVC)
##+    if(NOT WIN32)
##         install(CODE "execute_process( \\
##EOF
### avoid symlinks build/cmake/install.cmake (version >= 3.1.4)
##patch -ulbf build/cmake/install.cmake << EOF
##@@ -45,2 +45,3 @@
##
##+  if(NOT WIN32)
##     install(DIRECTORY DESTINATION "bin")
##@@ -52,2 +53,3 @@
##     )
##+  endif()
## endif()
##EOF
## configure all targets
#for AS_SINGLE in ON OFF; do
# for AS_UNICODE in OFF ON; do
#  for AS_SHARED in OFF ON; do
#   wl-showstatus configure &&
#   mkdir -p build_sh$AS_SHARED\_un$AS_UNICODE\_si$AS_SINGLE &&
#   #(( cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/wx -DCMAKE_BUILD_TYPE:STRING=Release -DCMAKE_MODULE_PATH:PATH=$MINGWPREFIX/cmake -DwxBUILD_SHARED:BOOL=$AS_SHARED -DwxUSE_UNICODE:BOOL=$AS_UNICODE -DwxBUILD_MONOLITHIC:BOOL=$AS_SINGLE -DwxBUILD_TOOLKIT:STRING=msw -DwxBUILD_PRECOMP:BOOL=OFF -DwxBUILD_USE_STATIC_RUNTIME:BOOL=OFF -DwxBUILD_STRIPPED_RELEASE:BOOL=ON -DwxBUILD_OPTIMISE:BOOL=ON -DwxUSE_REGEX:STRING=builtin -DwxUSE_ZLIB:STRING=builtin -DwxUSE_EXPAT:STRING=builtin -DwxUSE_LIBJPEG:STRING=builtin -DwxUSE_LIBPNG:STRING=builtin -DwxUSE_LIBTIFF:STRING=builtin -DwxUSE_LIBLZMA:BOOL=ON -DwxUSE_WINSOCK2:BOOL=ON -DwxBUILD_DEMOS:BOOL=OFF -DwxBUILD_SAMPLES:STRING=OFF -DwxBUILD_TESTS:STRING=OFF -S. -Bbuild_sh$AS_SHARED\_un$AS_UNICODE\_si$AS_SINGLE && touch build_sh$AS_SHARED._un$AS_UNICODE._si$AS_SINGLE.CONFIGURED ) || break 3 ) &&
#   (( cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/wx -DCMAKE_BUILD_TYPE:STRING=Release -DCMAKE_MODULE_PATH:PATH=$MINGWPREFIX/cmake -DwxBUILD_SHARED:BOOL=$AS_SHARED -DwxUSE_UNICODE:BOOL=$AS_UNICODE -DwxBUILD_MONOLITHIC:BOOL=$AS_SINGLE -DwxBUILD_TOOLKIT:STRING=msw -DwxBUILD_PRECOMP:BOOL=OFF -DwxBUILD_USE_STATIC_RUNTIME:BOOL=OFF -DwxBUILD_STRIPPED_RELEASE:BOOL=ON -DwxBUILD_OPTIMISE:BOOL=ON -DwxUSE_REGEX:STRING=sys -DwxUSE_ZLIB:STRING=sys -DwxUSE_EXPAT:STRING=sys -DwxUSE_LIBJPEG:STRING=sys -DwxUSE_LIBPNG:STRING=sys -DwxUSE_LIBTIFF:STRING=sys -DwxUSE_LIBLZMA:BOOL=ON -DwxUSE_WINSOCK2:BOOL=ON -DwxBUILD_DEMOS:BOOL=OFF -DwxBUILD_SAMPLES:STRING=OFF -DwxBUILD_TESTS:STRING=OFF -S. -Bbuild_sh$AS_SHARED\_un$AS_UNICODE\_si$AS_SINGLE && touch build_sh$AS_SHARED._un$AS_UNICODE._si$AS_SINGLE.CONFIGURED ) || break 3 ) &&
#   if [ "$AS_SINGLE" == "ON" ]; then
#    echo "-Wl,--as-needed -Wl,--allow-multiple-definition" >> build_sh$AS_SHARED\_un$AS_UNICODE\_si$AS_SINGLE/libs/CMakeFiles/mono.dir/linklibs.rsp
#   fi
#  done
# done
#done &&
#expr $(ls -1d *.CONFIGURED|wc -l) = 8 &&
## build and install all targets
#for AS_SINGLE in ON OFF; do
# for AS_UNICODE in OFF ON; do
#  for AS_SHARED in OFF ON; do
#   wl-showstatus build-install &&
#   mkdir -p $INSTALLPREFIX/wx/lib/gcc_$(if [ "$AS_SHARED" == "ON" ]; then echo "dll"; else echo "lib"; fi)/msw$(if [ "$AS_UNICODE" == "ON" ]; then echo "u"; fi)/wx &&
#   mkdir -p $INSTALLPREFIX/wx/lib/gcc_$(if [ "$AS_SHARED" == "ON" ]; then echo "dll"; else echo "lib"; fi)/msw$(if [ "$AS_UNICODE" == "ON" ]; then echo "u"; fi)d/wx &&
#   # manually copy missing setup.h (version = 3.1.3)
#   cp -f build_sh$AS_SHARED\_un$AS_UNICODE\_si$AS_SINGLE/lib/gcc$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "_x64"; fi)_$(if [ "$AS_SHARED" == "ON" ]; then echo "dll"; else echo "lib"; fi)/msw$(if [ "$AS_UNICODE" == "ON" ]; then echo "u"; fi)/wx/setup.h $INSTALLPREFIX/wx/lib/gcc_$(if [ "$AS_SHARED" == "ON" ]; then echo "dll"; else echo "lib"; fi)/msw$(if [ "$AS_UNICODE" == "ON" ]; then echo "u"; fi)/wx/ &&
#   cp -f build_sh$AS_SHARED\_un$AS_UNICODE\_si$AS_SINGLE/lib/gcc$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "_x64"; fi)_$(if [ "$AS_SHARED" == "ON" ]; then echo "dll"; else echo "lib"; fi)/msw$(if [ "$AS_UNICODE" == "ON" ]; then echo "u"; fi)d/wx/setup.h $INSTALLPREFIX/wx/lib/gcc_$(if [ "$AS_SHARED" == "ON" ]; then echo "dll"; else echo "lib"; fi)/msw$(if [ "$AS_UNICODE" == "ON" ]; then echo "u"; fi)d/wx/ &&
#   ( ninja -Cbuild_sh$AS_SHARED\_un$AS_UNICODE\_si$AS_SINGLE install/strip && touch build_sh$AS_SHARED._un$AS_UNICODE._si$AS_SINGLE.BUILT ) || break 3
#   rm -rf build_sh$AS_SHARED\_un$AS_UNICODE\_si$AS_SINGLE &&
#cat > $INSTALLPREFIX/wx/lib/gcc_$(if [ "$AS_SHARED" == "ON" ]; then echo "dll"; else echo "lib"; fi)/msw$(if [ "$AS_UNICODE" == "ON" ]; then echo "u"; fi)/build.cfg << EOF
#WXVER_MAJOR=$(echo $VERSION|sed -e "s/^\([^.]*\)\.\([^.]*\)\.\([^.]*\)$/\1/")
#WXVER_MINOR=$(echo $VERSION|sed -e "s/^\([^.]*\)\.\([^.]*\)\.\([^.]*\)$/\2/")
#WXVER_RELEASE=$(echo $VERSION|sed -e "s/^\([^.]*\)\.\([^.]*\)\.\([^.]*\)$/\3/")
#BUILD=release
#MONOLITHIC=$(if [ "$AS_SINGLE" == "ON" ]; then echo "1"; else echo "0"; fi)
#SHARED=$(if [ "$AS_SHARED" == "ON" ]; then echo "1"; else echo "0"; fi)
#UNICODE=$(if [ "$AS_UNICODE" == "ON" ]; then echo "1"; else echo "0"; fi)
#TOOLKIT=MSW
#TOOLKIT_VERSION=
#WXUNIV=0
#CFG=
#VENDOR=custom
#OFFICIAL_BUILD=0
#DEBUG_FLAG=0
#DEBUG_INFO=default
#RUNTIME_LIBS=dynamic
#MSLU=0
#USE_EXCEPTIONS=1
#USE_RTTI=1
#USE_THREADS=1
#USE_AUI=1
#USE_GUI=1
#USE_SYSTEM_ZLIB=1
#USE_SYSTEM_REGEX=1
#USE_SYSTEM_EXPAT=1
#USE_SYSTEM_LIBJPEG=1
#USE_SYSTEM_LIBPNG=1
#USE_SYSTEM_LIBTIFF=1
#USE_HTML=1
#USE_MEDIA=1
#USE_OPENGL=1
#USE_QA=0
#USE_PROPGRID=1
#USE_RIBBON=1
#USE_RICHTEXT=1
#USE_STC=1
#USE_WEBVIEW=1
#USE_XRC=1
#COMPILER=${CC:-gcc}
#COMPILER_VERSION=
#CC=${CC:-gcc}
#CXX=${CXX:-g++}
#CFLAGS=
#CPPFLAGS=
#CXXFLAGS=
#LDFLAGS=
#EOF
#  done
# done
#done &&
# ## fix missing wx/setup.h (version >= 3.1.4)
# #( ls -1 include/wx/setup.h &> /dev/null || cp -u $INSTALLPREFIX/wx/lib/wx/include/msw-ansi-[0-9]*/wx/setup.h include/wx/setup.h ) &&
# expr $(ls -1d *.BUILT|wc -l) = 8 &&
# # build and install missing hhp2cached.exe
# sed -e "s/-l\(wxzlib\|wxregex\|wxexpat\|wxjpeg\|wxpng\|wxtiff\)\(\$(WXUNICODEFLAG)\)*\(\$(WXDEBUGFLAG)\)*//g" utils/hhp2cached/makefile.gcc > utils/hhp2cached/makefile.mingw &&
# $COMSPEC //C "mingw32-make.exe -Cutils/hhp2cached -fmakefile.mingw -j1 all BUILD=release MONOLITHIC=0 SHARED=1 UNICODE=0 USE_GUI=1 CXXFLAGS=-I$(echo $INSTALLPREFIX/wx/lib/gcc$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "_x64"; fi)_dll/msw|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\?; s?/?\\\\?g") LDFLAGS=-L$(echo $INSTALLPREFIX/wx/lib/gcc$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "_x64"; fi)_dll|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\?; s?/?\\\\?g")" &&
# cp -u utils/hhp2cached/gcc_mswdll/hhp2cached.exe $INSTALLPREFIX/wx/bin/ &&
# #sed -e "s/-l\(wxzlib\|wxregex\|wxexpat\|wxjpeg\|wxpng\|wxtiff\)\(\$(WXUNICODEFLAG)\)*\(\$(WXDEBUGFLAG)\)*//g" utils/hhp2cached/makefile.gcc > utils/hhp2cached/makefile.mingw &&
# #$COMSPEC //C "mingw32-make.exe -Cutils/hhp2cached -fmakefile.mingw -j1 all BUILD=release MONOLITHIC=0 SHARED=1 UNICODE=0 USE_GUI=1 CXXFLAGS=-I$(cygpath -w $INSTALLPREFIX/wx/lib/) LDFLAGS=-L$(cygpath -w $INSTALLPREFIX/wx/lib/gcc_dll/msw)" &&
# #cp -u utils/hhp2cached/gcc_mswdll/hhp2cached.exe $INSTALLPREFIX/wx/bin/ &&
# # build and install missing execmon.exe
# sed -e "s/-l\(wxzlib\|wxregex\|wxexpat\)\(\$(WXUNICODEFLAG)\)*\(\$(WXDEBUGFLAG)\)*//g" utils/execmon/makefile.gcc > utils/execmon/makefile.mingw &&
# $COMSPEC //C "mingw32-make.exe -Cutils/execmon -fmakefile.mingw -j1 all BUILD=release MONOLITHIC=0 SHARED=1 UNICODE=0 USE_GUI=1 CXXFLAGS=-I$(echo $INSTALLPREFIX/wx/lib/gcc$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "_x64"; fi)_dll/msw|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\?; s?/?\\\\?g") LDFLAGS=-L$(echo $INSTALLPREFIX/wx/lib/gcc$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "_x64"; fi)_dll|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\?; s?/?\\\\?g")" &&
# cp -u utils/execmon/gcc_mswdll/execmon.exe $INSTALLPREFIX/wx/bin/ &&
# # build and install missing helpview.exe
# sed -e "s/-l\(wxzlib\|wxregex\|wxexpat\|wxjpeg\|wxpng\|wxtiff\)\(\$(WXUNICODEFLAG)\)*\(\$(WXDEBUGFLAG)\)*//g" utils/helpview/src/makefile.gcc > utils/helpview/src/makefile.mingw &&
# $COMSPEC //C "mingw32-make.exe -Cutils/helpview/src -fmakefile.mingw -j1 all BUILD=release MONOLITHIC=0 SHARED=1 UNICODE=0 USE_GUI=1 CXXFLAGS=-I$(echo $INSTALLPREFIX/wx/lib/gcc$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "_x64"; fi)_dll/msw|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\?; s?/?\\\\?g") LDFLAGS=-L$(echo $INSTALLPREFIX/wx/lib/gcc$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "_x64"; fi)_dll|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\?; s?/?\\\\?g")" &&
# cp -u utils/helpview/src/gcc_mswdll/helpview.exe $INSTALLPREFIX/wx/bin/ &&
# ## build and install missing emulator.exe
# #sed -e "s/-l\(wxzlib\|wxregex\|wxexpat\|wxjpeg\|wxpng\|wxtiff\)\(\$(WXUNICODEFLAG)\)*\(\$(WXDEBUGFLAG)\)*//g" utils/emulator/src/makefile.gcc > utils/emulator/src/makefile.mingw &&
# #$COMSPEC //C "mingw32-make.exe -Cutils/emulator/src -fmakefile.mingw -j1 all BUILD=release MONOLITHIC=0 SHARED=1 UNICODE=0 USE_GUI=1 CXXFLAGS=-I$(echo $INSTALLPREFIX/wx/lib/gcc$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "_x64"; fi)_dll/msw|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\?; s?/?\\\\?g") LDFLAGS=-L$(echo $INSTALLPREFIX/wx/lib/gcc$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "_x64"; fi)_dll|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\?; s?/?\\\\?g")" &&
# #cp -u utils/emulator/src/gcc_mswdll/wxemulator.exe $INSTALLPREFIX/wx/bin/ &&
# ## build and install missing screenshotgen.exe
# #sed -e "s/-l\(wxzlib\|wxregex\|wxexpat\|wxjpeg\|wxpng\|wxtiff\)\(\$(WXUNICODEFLAG)\)*\(\$(WXDEBUGFLAG)\)*//g" utils/screenshotgen/src/makefile.gcc > utils/screenshotgen/src/makefile.mingw &&
# #$COMSPEC //C "mingw32-make.exe -Cutils/screenshotgen/src -fmakefile.mingw -j1 all BUILD=release MONOLITHIC=0 SHARED=1 UNICODE=0 USE_GUI=1 CXXFLAGS=-I$(echo $INSTALLPREFIX/wx/lib/gcc$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "_x64"; fi)_dll/msw|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\?; s?/?\\\\?g") LDFLAGS=-L$(echo $INSTALLPREFIX/wx/lib/gcc$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "_x64"; fi)_dll|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\?; s?/?\\\\?g")" &&
# #cp -u utils/screenshotgen/src/gcc_mswdll/screenshotgen.exe $INSTALLPREFIX/wx/bin/ &&
# # fix missing lib prefix in static libraries
# for F in $INSTALLPREFIX/wx/lib/gcc$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "_x64"; fi)_lib/wx*.a; do
#  mv $F $(echo $F|sed -e "s?wx[^/]*.a?lib&?")
# done &&
# # remove _x64 from folder names gcc_x64_lib and gcc_x64_dll
# if ( echo $RUNPLATFORM | grep -q x86_64 ); then
#  cp -rf $INSTALLPREFIX/wx/lib/gcc$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "_x64"; fi)_lib/* $INSTALLPREFIX/wx/lib/gcc_lib/ &&
#  cp -rf $INSTALLPREFIX/wx/lib/gcc$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "_x64"; fi)_dll/* $INSTALLPREFIX/wx/lib/gcc_dll/ &&
#  rm -rf $INSTALLPREFIX/wx/lib/gcc$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "_x64"; fi)_lib $INSTALLPREFIX/wx/lib/gcc$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "_x64"; fi)_dll
# fi &&
# # copy config.gcc
# mkdir -p $INSTALLPREFIX/wx/build/msw &&
# cp -f build/msw/config.gcc $INSTALLPREFIX/wx/build/msw/ &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && rm -rf wxWidgets-$VERSION
##-DREGEX_LIBRARIES:STRING=pcre -DREGEX_INCLUDE_DIRS:PATH=$MINGWPREFIX/include
#####TO DO: check options in build/cmake/options.cmake
##-DwxUSE_DBGHELP:BOOL=ON -DwxUSE_INICONF:BOOL=ON -DwxUSE_WINSOCK2:BOOL=ON -DwxUSE_REGKEY:BOOL=ON
#####TO DO: build utils and hhp2cached
#####TO DO: static libraries should have lib suffix
## Not installed but still depending on?
##wxbase313_gcc_x64_custom.dll
##wxmsw313_core_gcc_x64_custom.dll
##wxmsw313_html_gcc_x64_custom.dll
##wxmsw313u_gcc_x64_custom.dll



export NAME="wxWidgets"
export STATUS=
export URL=http://www.wxwidgets.org/
export BASENAME=wxwidgets
export DESCRIPTION="wxWidgets is a C++ library that lets developers create applications for Windows, OS X, Linux and UNIX on 32-bit and 64-bit architectures as well as several mobile platforms including Windows Mobile, iPhone SDK and embedded GTK+."
export CATEGORY=gui,portability
export TYPE=library
#export VERSION=3.1.5
#export VERSIONDATE=20210413
export DEPENDANCIES=expat,zlib,cairo,pcre,libjpeg,libpng,libtiff,xz
export OPTIONALDEPENDANCIES=
export BUILDDEPENDANCIES=cmake,ninja
#export VERSION=3.1.6
#export VERSIONDATE=20220404
export VERSION=3.1.7
export VERSIONDATE=20220607
wl-showstatus --package-version
#export DEPENDANCIES=expat,zlib,cairo,pcre,libjpeg,libpng,libtiff,xz,nanosvg
#export OPTIONALDEPENDANCIES=
#export BUILDDEPENDANCIES=cmake,ninja
export LICENSEFILE=docs/licence.txt
export LICENSETYPE=LGPL
#export DOWNLOADURL="http://www.wxwidgets.org/downloads/ wxWidgets-"
#export DOWNLOADURL="https://github.com/wxWidgets/wxWidgets/releases wxWidgets-"
export DOWNLOADURL="https://github.com/wxWidgets/wxWidgets/releases v"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://github.com/wxWidgets/wxWidgets/releases/download/v$VERSION/wxWidgets-$VERSION.tar.bz2
export DOWNLOADSOURCEURL=https://github.com/wxWidgets/wxWidgets/archive/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-download -v -d $TARBALLDIR/$BASENAME https://github.com/wxWidgets/wxWidgets/releases/download/v$VERSION/wxWidgets-$VERSION-docs-chm.zip
wl-wait4deps
#tar xfj $TARBALLDIR/$BASENAME/wxWidgets-$VERSION.tar.bz2
tar xfz $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd wxWidgets-$VERSION
# fix pointer conversion issue in src/msw/menuitem.cpp (version >= 3.1.3)
patch -ulbf src/msw/menuitem.cpp << EOF
@@ -361 +361 @@
-        ::GetThemeSysFont(hTheme, TMT_MENUFONT, themeFont.GetPtr());
+        ::GetThemeSysFont(hTheme, TMT_MENUFONT, (LOGFONT*)themeFont.GetPtr());
EOF
# fix invalid parameter type to GetThemeSysFont() in src/msw/menuitem.cpp (version >= 3.1.3)
patch -ulbf src/msw/menuitem.cpp << EOF
@@ -360,3 +360,3 @@
         wxUxThemeFont themeFont;
-        ::GetThemeSysFont(hTheme, TMT_MENUFONT, (LOGFONT*)themeFont.GetPtr());
+        ::GetThemeSysFont(hTheme, TMT_MENUFONT, (LOGFONTW*)themeFont.GetPtr());
         // Use NULL window for wxNativeFontInfo, height it is already at the correct ppi
EOF
## fix src/msw/uilocale.cpp (version >= 3.1.6)
#patch -ulbf src/msw/uilocale.cpp << EOF
#@@ -359,3 +359,3 @@
#     {
#-        wchar_t buf[256];
#+        TCHAR buf[256];
#         if (!::GetLocaleInfo(m_lcid, lctype, buf, WXSIZEOF(buf)))
#EOF
## fix missing nanosvg (version >= 3.1.6)
#mkdir -p 3rdparty/nanosvg/src &&
#cp $MINGWPREFIX/include/nanosvg*.h 3rdparty/nanosvg/src/
## don't use additional library folder suffix (version >= 3.1.6)
#sed -i.bak -e "s/set(wxARCH_SUFFIX /#&/" build/cmake/init.cmake
# manually copy missing setup.h (version >= 3.1.4)
cp include/wx/msw/setup.h include/wx/
# avoid symlinks in build/cmake/utils/CMakeLists.txt (version >= 3.1.4)
patch -ulbf build/cmake/utils/CMakeLists.txt << EOF
@@ -33,3 +33,3 @@

-    if(NOT MSVC)
+    if(NOT WIN32)
         install(CODE "execute_process( \\
EOF
# avoid symlinks build/cmake/install.cmake (version >= 3.1.4)
patch -ulbf build/cmake/install.cmake << EOF
@@ -45,2 +45,3 @@

+  if(NOT WIN32)
     install(DIRECTORY DESTINATION "bin")
@@ -52,2 +53,3 @@
     )
+  endif()
 endif()
EOF
# don't use different suffix for 64-bot (version >= 3.1.6)
sed -i.bak -e "s/_x64//" build/cmake/init.cmake
# configure all targets
for AS_SINGLE in ON OFF; do
 for AS_UNICODE in OFF ON; do
  for AS_SHARED in OFF ON; do
   wl-showstatus configure &&
   mkdir -p build_sh$AS_SHARED\_un$AS_UNICODE\_si$AS_SINGLE &&
   #(( cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/wx -DCMAKE_BUILD_TYPE:STRING=Release -DCMAKE_MODULE_PATH:PATH=$MINGWPREFIX/cmake -DwxBUILD_SHARED:BOOL=$AS_SHARED -DwxUSE_UNICODE:BOOL=$AS_UNICODE -DwxBUILD_MONOLITHIC:BOOL=$AS_SINGLE -DwxBUILD_TOOLKIT:STRING=msw -DwxBUILD_PRECOMP:BOOL=OFF -DwxBUILD_USE_STATIC_RUNTIME:BOOL=OFF -DwxBUILD_STRIPPED_RELEASE:BOOL=ON -DwxBUILD_OPTIMISE:BOOL=ON -DwxUSE_REGEX:STRING=builtin -DwxUSE_ZLIB:STRING=builtin -DwxUSE_EXPAT:STRING=builtin -DwxUSE_LIBJPEG:STRING=builtin -DwxUSE_LIBPNG:STRING=builtin -DwxUSE_LIBTIFF:STRING=builtin -DwxUSE_LIBLZMA:BOOL=ON -DwxUSE_WINSOCK2:BOOL=ON -DwxBUILD_DEMOS:BOOL=OFF -DwxBUILD_SAMPLES:STRING=OFF -DwxBUILD_TESTS:STRING=OFF -S. -Bbuild_sh$AS_SHARED\_un$AS_UNICODE\_si$AS_SINGLE && touch build_sh$AS_SHARED._un$AS_UNICODE._si$AS_SINGLE.CONFIGURED ) || break 3 ) &&
   #(( cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/wx -DCMAKE_BUILD_TYPE:STRING=Release -DCMAKE_MODULE_PATH:PATH=$MINGWPREFIX/cmake -DwxBUILD_SHARED:BOOL=$AS_SHARED -DwxUSE_UNICODE:BOOL=$AS_UNICODE -DwxBUILD_MONOLITHIC:BOOL=$AS_SINGLE -DwxBUILD_TOOLKIT:STRING=msw -DwxBUILD_PRECOMP:BOOL=OFF -DwxBUILD_USE_STATIC_RUNTIME:BOOL=OFF -DwxBUILD_STRIPPED_RELEASE:BOOL=ON -DwxBUILD_OPTIMISE:BOOL=ON -DwxUSE_REGEX:STRING=sys -DwxUSE_ZLIB:STRING=sys -DwxUSE_EXPAT:STRING=sys -DwxUSE_LIBJPEG:STRING=sys -DwxUSE_LIBPNG:STRING=sys -DwxUSE_LIBTIFF:STRING=sys -DwxUSE_LIBLZMA:BOOL=ON -DwxUSE_WINSOCK2:BOOL=ON -DwxBUILD_DEMOS:BOOL=OFF -DwxBUILD_SAMPLES:STRING=OFF -DwxBUILD_TESTS:STRING=OFF -S. -Bbuild_sh$AS_SHARED\_un$AS_UNICODE\_si$AS_SINGLE && touch build_sh$AS_SHARED._un$AS_UNICODE._si$AS_SINGLE.CONFIGURED ) || break 3 ) &&
   (( cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/wx -DCMAKE_BUILD_TYPE:STRING=Release -DCMAKE_MODULE_PATH:PATH=$MINGWPREFIX/cmake -DwxBUILD_SHARED:BOOL=$AS_SHARED -DwxUSE_UNICODE:BOOL=$AS_UNICODE -DwxBUILD_MONOLITHIC:BOOL=$AS_SINGLE -DwxBUILD_TOOLKIT:STRING=msw -DwxBUILD_PRECOMP:BOOL=OFF -DwxBUILD_USE_STATIC_RUNTIME:BOOL=OFF -DwxBUILD_STRIPPED_RELEASE:BOOL=ON -DwxBUILD_OPTIMISE:BOOL=ON -DwxUSE_GRAPHICS_CONTEXT:BOOL=ON -DwxUSE_GRAPHICS_DIRECT2D:BOOL=ON -DwxUSE_REGEX:STRING=sys -DwxUSE_ZLIB:STRING=sys -DwxUSE_EXPAT:STRING=sys -DwxUSE_LIBJPEG:STRING=sys -DwxUSE_LIBPNG:STRING=sys -DwxUSE_LIBTIFF:STRING=sys -DwxUSE_NANOSVG:STRING=sys -DwxUSE_LIBLZMA:BOOL=ON -DwxUSE_WINSOCK2:BOOL=ON -DwxBUILD_DEMOS:BOOL=OFF -DwxBUILD_SAMPLES:STRING=OFF -DwxBUILD_TESTS:STRING=OFF -S. -Bbuild_sh$AS_SHARED\_un$AS_UNICODE\_si$AS_SINGLE && touch build_sh$AS_SHARED._un$AS_UNICODE._si$AS_SINGLE.CONFIGURED ) || break 3 ) &&
   if [ "$AS_SINGLE" == "ON" ]; then
    echo "-Wl,--as-needed -Wl,--allow-multiple-definition" >> build_sh$AS_SHARED\_un$AS_UNICODE\_si$AS_SINGLE/libs/CMakeFiles/mono.dir/linklibs.rsp
   fi
  done
 done
done &&
expr $(ls -1d *.CONFIGURED|wc -l) = 8 &&
# build and install all targets
for AS_SINGLE in ON OFF; do
 for AS_UNICODE in OFF ON; do
  for AS_SHARED in OFF ON; do
   wl-showstatus build-install &&
   mkdir -p $INSTALLPREFIX/wx/lib/gcc_$(if [ "$AS_SHARED" == "ON" ]; then echo "dll"; else echo "lib"; fi)/msw$(if [ "$AS_UNICODE" == "ON" ]; then echo "u"; fi)/wx &&
   mkdir -p $INSTALLPREFIX/wx/lib/gcc_$(if [ "$AS_SHARED" == "ON" ]; then echo "dll"; else echo "lib"; fi)/msw$(if [ "$AS_UNICODE" == "ON" ]; then echo "u"; fi)d/wx &&
   ( ninja -Cbuild_sh$AS_SHARED\_un$AS_UNICODE\_si$AS_SINGLE install/strip && touch build_sh$AS_SHARED._un$AS_UNICODE._si$AS_SINGLE.BUILT ) || break 3
   # copy missing setup.h
   cp -u include/wx/msw/setup.h $INSTALLPREFIX/wx/lib/gcc_$(if [ "$AS_SHARED" == "ON" ]; then echo "dll"; else echo "lib"; fi)/msw$(if [ "$AS_UNICODE" == "ON" ]; then echo "u"; fi)/wx/ &&
   # clean up build directory
   rm -rf build_sh$AS_SHARED\_un$AS_UNICODE\_si$AS_SINGLE &&
cat > $INSTALLPREFIX/wx/lib/gcc_$(if [ "$AS_SHARED" == "ON" ]; then echo "dll"; else echo "lib"; fi)/msw$(if [ "$AS_UNICODE" == "ON" ]; then echo "u"; fi)/build.cfg << EOF
WXVER_MAJOR=$(echo $VERSION|sed -e "s/^\([^.]*\)\.\([^.]*\)\.\([^.]*\)$/\1/")
WXVER_MINOR=$(echo $VERSION|sed -e "s/^\([^.]*\)\.\([^.]*\)\.\([^.]*\)$/\2/")
WXVER_RELEASE=$(echo $VERSION|sed -e "s/^\([^.]*\)\.\([^.]*\)\.\([^.]*\)$/\3/")
BUILD=release
MONOLITHIC=$(if [ "$AS_SINGLE" == "ON" ]; then echo "1"; else echo "0"; fi)
SHARED=$(if [ "$AS_SHARED" == "ON" ]; then echo "1"; else echo "0"; fi)
UNICODE=$(if [ "$AS_UNICODE" == "ON" ]; then echo "1"; else echo "0"; fi)
TOOLKIT=MSW
TOOLKIT_VERSION=
WXUNIV=0
CFG=
VENDOR=custom
OFFICIAL_BUILD=0
DEBUG_FLAG=0
DEBUG_INFO=default
RUNTIME_LIBS=dynamic
MSLU=0
USE_EXCEPTIONS=1
USE_RTTI=1
USE_THREADS=1
USE_AUI=1
USE_GUI=1
USE_SYSTEM_ZLIB=1
USE_SYSTEM_REGEX=1
USE_SYSTEM_EXPAT=1
USE_SYSTEM_LIBJPEG=1
USE_SYSTEM_LIBPNG=1
USE_SYSTEM_LIBTIFF=1
USE_HTML=1
USE_MEDIA=1
USE_OPENGL=1
USE_QA=0
USE_PROPGRID=1
USE_RIBBON=1
USE_RICHTEXT=1
USE_STC=1
USE_WEBVIEW=1
USE_XRC=1
COMPILER=${CC:-gcc}
COMPILER_VERSION=
CC=${CC:-gcc}
CXX=${CXX:-g++}
CFLAGS=
CPPFLAGS=
CXXFLAGS=
LDFLAGS=
EOF
  done
 done
done &&
 expr $(ls -1d *.BUILT|wc -l) = 8 > /dev/null &&
 ## fix missing wx/setup.h (version >= 3.1.4)
 #( ls -1 include/wx/setup.h &> /dev/null || cp -u $INSTALLPREFIX/wx/lib/wx/include/msw-ansi-[0-9]*/wx/setup.h include/wx/setup.h ) &&
 # move library files (version >= 3.1.6)
 ( cp -rf $INSTALLPREFIX/wx/lib/gcc_x64_lib/* $INSTALLPREFIX/wx/lib/gcc_lib/ || true ) &&
 ( cp -rf $INSTALLPREFIX/wx/lib/gcc_x64_dll/* $INSTALLPREFIX/wx/lib/gcc_dll/ || true ) &&
 ## build and install missing hhp2cached.exe (version >= 3.1.4 <= 3.1.5)
 #sed -e "s/-l\(wxzlib\|wxregex\|wxexpat\|wxjpeg\|wxpng\|wxtiff\)\(\$(WXUNICODEFLAG)\)*\(\$(WXDEBUGFLAG)\)*//g" utils/hhp2cached/makefile.gcc > utils/hhp2cached/makefile.mingw &&
 #sed -i.bak -e "s/\(-lwx\)\(\$(PORTNAME)\$(WXUNIVNAME)\)\$(WX_RELEASE_NODOT)\(\$(WXUNICODEFLAG)\$(WXDEBUGFLAG)\$(WX_LIB_FLAVOUR)_[^ ]*\)/\1_\2\3-3.1/g; s/\(-lwx\)\(base\)\$(WX_RELEASE_NODOT)\(\$(WXUNICODEFLAG)\$(WXDEBUGFLAG)\$(WX_LIB_FLAVOUR)[^ ]*\)/\1_\2\3-3.1/g" utils/hhp2cached/makefile.mingw &&
 #mingw32-make -Cutils/hhp2cached -fmakefile.mingw -j1 all BUILD=release MONOLITHIC=0 SHARED=1 UNICODE=0 USE_GUI=1 CXXFLAGS="-I$INSTALLPREFIX/wx/lib" LDFLAGS="-L$INSTALLPREFIX/wx/lib" &&
 #cp -u utils/hhp2cached/gcc_mswdll/hhp2cached.exe $INSTALLPREFIX/wx/bin/ &&
 # build and install missing hhp2cached.exe (version >= 3.1.6)
 sed -e "s/-l\(wxzlib\|wxregex\|wxexpat\|wxjpeg\|wxpng\|wxtiff\)\(\$(WXUNICODEFLAG)\)*\(\$(WXDEBUGFLAG)\)*//g" utils/hhp2cached/makefile.gcc > utils/hhp2cached/makefile.mingw &&
 mingw32-make -Cutils/hhp2cached -fmakefile.mingw -j1 all BUILD=release MONOLITHIC=0 SHARED=1 UNICODE=0 USE_GUI=1 __DEBUGINFO="-L$INSTALLPREFIX/wx/lib/gcc_dll" &&
 cp -u utils/hhp2cached/gcc_mswdll/hhp2cached.exe $INSTALLPREFIX/wx/bin/ &&
 ## build and install missing execmon.exe (version >= 3.1.4 <= 3.1.5)
 #sed -e "s/-l\(wxzlib\|wxregex\|wxexpat\)\(\$(WXUNICODEFLAG)\)*\(\$(WXDEBUGFLAG)\)*//g" utils/execmon/makefile.gcc > utils/execmon/makefile.mingw &&
 #sed -i.bak -e "s/\(-lwx\)\(\$(PORTNAME)\$(WXUNIVNAME)\)\$(WX_RELEASE_NODOT)\(\$(WXUNICODEFLAG)\$(WXDEBUGFLAG)\$(WX_LIB_FLAVOUR)_[^ ]*\)/\1_\2\3-3.1/g; s/\(-lwx\)\(base\)\$(WX_RELEASE_NODOT)\(\$(WXUNICODEFLAG)\$(WXDEBUGFLAG)\$(WX_LIB_FLAVOUR)[^ ]*\)/\1_\2\3-3.1/g" utils/execmon/makefile.mingw &&
 #mingw32-make -Cutils/execmon -fmakefile.mingw -j1 all BUILD=release MONOLITHIC=0 SHARED=1 UNICODE=0 USE_GUI=1 CXXFLAGS="-I$INSTALLPREFIX/wx/lib" LDFLAGS="-L$INSTALLPREFIX/wx/lib" &&
 #cp -u utils/execmon/gcc_mswdll/execmon.exe $INSTALLPREFIX/wx/bin/ &&
 # build and install missing execmon.exe (version >= 3.1.6)
 sed -e "s/-l\(wxzlib\|wxregex\|wxexpat\)\(\$(WXUNICODEFLAG)\)*\(\$(WXDEBUGFLAG)\)*//g" utils/execmon/makefile.gcc > utils/execmon/makefile.mingw &&
 mingw32-make -Cutils/execmon -fmakefile.mingw -j1 all BUILD=release MONOLITHIC=0 SHARED=1 UNICODE=0 USE_GUI=1 __DEBUGINFO="-L$INSTALLPREFIX/wx/lib/gcc_dll" &&
 cp -u utils/execmon/gcc_mswdll/execmon.exe $INSTALLPREFIX/wx/bin/ &&
 ## build and install missing helpview.exe (version >= 3.1.4 <= 3.1.5)
 #sed -e "s/-l\(wxzlib\|wxregex\|wxexpat\|wxjpeg\|wxpng\|wxtiff\)\(\$(WXUNICODEFLAG)\)*\(\$(WXDEBUGFLAG)\)*//g" utils/helpview/src/makefile.gcc > utils/helpview/src/makefile.mingw &&
 #sed -i.bak -e "s/\(-lwx\)\(\$(PORTNAME)\$(WXUNIVNAME)\)\$(WX_RELEASE_NODOT)\(\$(WXUNICODEFLAG)\$(WXDEBUGFLAG)\$(WX_LIB_FLAVOUR)_[^ ]*\)/\1_\2\3-3.1/g; s/\(-lwx\)\(base\)\$(WX_RELEASE_NODOT)\(\$(WXUNICODEFLAG)\$(WXDEBUGFLAG)\$(WX_LIB_FLAVOUR)[^ ]*\)/\1_\2\3-3.1/g" utils/helpview/src/makefile.mingw &&
 #mingw32-make -Cutils/helpview/src -fmakefile.mingw -j1 all BUILD=release MONOLITHIC=0 SHARED=1 UNICODE=0 USE_GUI=1 CXXFLAGS="-I$INSTALLPREFIX/wx/lib" LDFLAGS="-L$INSTALLPREFIX/wx/lib" &&
 #cp -u utils/helpview/src/gcc_mswdll/helpview.exe $INSTALLPREFIX/wx/bin/ &&
 # build and install missing helpview.exe (version >= 3.1.6)
 sed -e "s/-l\(wxzlib\|wxregex\|wxexpat\|wxjpeg\|wxpng\|wxtiff\)\(\$(WXUNICODEFLAG)\)*\(\$(WXDEBUGFLAG)\)*//g" utils/helpview/src/makefile.gcc > utils/helpview/src/makefile.mingw &&
 mingw32-make -Cutils/helpview/src -fmakefile.mingw -j1 all BUILD=release MONOLITHIC=0 SHARED=1 UNICODE=0 USE_GUI=1 __DEBUGINFO="-L$INSTALLPREFIX/wx/lib/gcc_dll" &&
 cp -u utils/helpview/src/gcc_mswdll/helpview.exe $INSTALLPREFIX/wx/bin/ &&
 ## build and install missing emulator.exe (version >= 3.1.4 <= 3.1.5)
 #sed -e "s/-l\(wxzlib\|wxregex\|wxexpat\|wxjpeg\|wxpng\|wxtiff\)\(\$(WXUNICODEFLAG)\)*\(\$(WXDEBUGFLAG)\)*//g" utils/emulator/src/makefile.gcc > utils/emulator/src/makefile.mingw &&
 #sed -i.bak -e "s/\(-lwx\)\(\$(PORTNAME)\$(WXUNIVNAME)\)\$(WX_RELEASE_NODOT)\(\$(WXUNICODEFLAG)\$(WXDEBUGFLAG)\$(WX_LIB_FLAVOUR)_[^ ]*\)/\1_\2\3-3.1/g; s/\(-lwx\)\(base\)\$(WX_RELEASE_NODOT)\(\$(WXUNICODEFLAG)\$(WXDEBUGFLAG)\$(WX_LIB_FLAVOUR)[^ ]*\)/\1_\2\3-3.1/g" utils/emulator/src/makefile.mingw &&
 #mingw32-make -Cutils/emulator/src -fmakefile.mingw -j1 all BUILD=release MONOLITHIC=0 SHARED=1 UNICODE=0 USE_GUI=1 CXXFLAGS="-I$INSTALLPREFIX/wx/lib" LDFLAGS="-L$INSTALLPREFIX/wx/lib" &&
 #cp -u utils/emulator/src/gcc_mswdll/wxemulator.exe $INSTALLPREFIX/wx/bin/ &&
 ## build and install missing screenshotgen.exe (version >= 3.1.4 <= 3.1.5)
 #sed -e "s/-l\(wxzlib\|wxregex\|wxexpat\|wxjpeg\|wxpng\|wxtiff\)\(\$(WXUNICODEFLAG)\)*\(\$(WXDEBUGFLAG)\)*//g" utils/screenshotgen/src/makefile.gcc > utils/screenshotgen/src/makefile.mingw &&
 #sed -i.bak -e "s/\(-lwx\)\(\$(PORTNAME)\$(WXUNIVNAME)\)\$(WX_RELEASE_NODOT)\(\$(WXUNICODEFLAG)\$(WXDEBUGFLAG)\$(WX_LIB_FLAVOUR)_[^ ]*\)/\1_\2\3-3.1/g; s/\(-lwx\)\(base\)\$(WX_RELEASE_NODOT)\(\$(WXUNICODEFLAG)\$(WXDEBUGFLAG)\$(WX_LIB_FLAVOUR)[^ ]*\)/\1_\2\3-3.1/g" utils/screenshotgen/src/makefile.mingw &&
 #mingw32-make -Cutils/screenshotgen/src -fmakefile.mingw -j1 all BUILD=release MONOLITHIC=0 SHARED=1 UNICODE=0 USE_GUI=1 CXXFLAGS="-I$INSTALLPREFIX/wx/lib" LDFLAGS="-L$INSTALLPREFIX/wx/lib" &&
 #cp -u utils/screenshotgen/src/gcc_mswdll/screenshotgen.exe $INSTALLPREFIX/wx/bin/ &&
 ## copy include/wx-3.1/wx to include/wx (version <= 3.1.5)
 #mkdir -p $INSTALLPREFIX/wx/include/wx &&
 #cp -ru $INSTALLPREFIX/wx/include/wx-3.1/wx/* $INSTALLPREFIX/wx/include/wx/ &&
 # copy config.gcc
 mkdir -p $INSTALLPREFIX/wx/build/msw &&
 cp -f build/msw/config.gcc $INSTALLPREFIX/wx/build/msw/ &&
 # copy wxwin.m4
 mkdir -p $INSTALLPREFIX/share/aclocal &&
 cp -u wxwin.m4 $INSTALLPREFIX/share/aclocal/ &&
 # copy wx/wxprec.h
 cp -u include/wx/wxprec.h $INSTALLPREFIX/wx/include/wx &&
 ## manually copy libraries with old naming style for compatibility (version >= 3.1.4 <= 3.1.5)
 #for F in $INSTALLPREFIX/wx/lib/libwx*.a; do
 # cp $F $INSTALLPREFIX/wx/lib/gcc_$(if echo $F | grep -q "\.dll\.a$"; then echo -n "dll"; else echo -n "lib"; fi)/$(basename $F | sed -e "s/\(libwx\)_\(base\|msw\)\([ud]*\)\([^ ]*\)-\([0-9]*\)\.\([0-9]*\)\(\.a\|\.dll.a\)/\1\2\5\6\3\4\7/")
 #done &&
 # create dummy libraries for backwards compatibility (version >= 3.1.6)
 for F in wxzlib wxjpeg wxpng wxtiff wxregex wxregexu wxexpat; do
  ar cr lib$F.a &&
  cp -u lib$F.a $INSTALLPREFIX/wx/lib/gcc_lib/lib$F.a &&
  cp -u lib$F.a $INSTALLPREFIX/wx/lib/gcc_dll/lib$F.a
 done &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && rm -rf wxWidgets-$VERSION



for AS_SINGLE in ON OFF; do
 for AS_UNICODE in OFF ON; do
  for AS_SHARED in OFF ON; do
cat > $INSTALLPREFIX/wx/lib/gcc_$(if [ "$AS_SHARED" == "ON" ]; then echo "dll"; else echo "lib"; fi)/msw$(if [ "$AS_UNICODE" == "ON" ]; then echo "u"; fi)/build.cfg << EOF
$(echo $VERSION|sed -e "s/^\([^.]*\)\.\([^.]*\)\.\([^.]*\)$/WXVER_MAJOR=\1\nWXVER_MINOR=\2\nWXVER_RELEASE=\3/")
BUILD=release
MONOLITHIC=$(if [ "$AS_SINGLE" == "ON" ]; then echo "1"; else echo "0"; fi)
SHARED=$(if [ "$AS_SHARED" == "ON" ]; then echo "1"; else echo "0"; fi)
UNICODE=$(if [ "$AS_UNICODE" == "ON" ]; then echo "1"; else echo "0"; fi)
TOOLKIT=MSW
TOOLKIT_VERSION=
WXUNIV=0
CFG=
VENDOR=custom
OFFICIAL_BUILD=0
DEBUG_FLAG=0
DEBUG_INFO=default
RUNTIME_LIBS=dynamic
MSLU=0
USE_EXCEPTIONS=1
USE_RTTI=1
USE_THREADS=1
USE_AUI=1
USE_GUI=1
USE_HTML=1
USE_MEDIA=1
USE_OPENGL=1
USE_QA=0
USE_PROPGRID=1
USE_RIBBON=1
USE_RICHTEXT=1
USE_STC=1
USE_WEBVIEW=1
USE_XRC=1
COMPILER=${CC:-gcc}
COMPILER_VERSION=
CC=${CC:-gcc}
CXX=${CXX:-g++}
CFLAGS=
CPPFLAGS=
CXXFLAGS=
LDFLAGS=
EOF
  done
 done
done

####for options see: build/cmake/options.cmake

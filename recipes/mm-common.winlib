export NAME="mm-common"
export STATUS=
export URL=http://www.gnome.org/projects/mm-common
export BASENAME=mm-common
export DESCRIPTION="Common build files of the C++ bindings"
export CATEGORY=
export TYPE=library
#export VERSION=0.9.3
#export VERSIONDATE=20110315
#export VERSION=0.9.4
#export VERSIONDATE=20110321
#export VERSION=0.9.5
#export VERSIONDATE=20110330
#export VERSION=0.9.6
#export VERSIONDATE=20121007
#export VERSION=0.9.7
#export VERSIONDATE=20140915
#export VERSION=0.9.8
#export VERSIONDATE=20150715
#export VERSION=0.9.9
#export VERSIONDATE=20151128
#export VERSION=0.9.10
#export VERSIONDATE=20160405
#export VERSION=0.9.11
#export VERSIONDATE=20170827
#export VERSION=0.9.12
#export VERSIONDATE=20180408
#export VERSION=1.0.0
#export VERSIONDATE=20191030
#export VERSION=1.0.1
#export VERSIONDATE=20200605
#export VERSION=1.0.2
#export VERSIONDATE=20200925
#export VERSION=1.0.3
#export VERSIONDATE=20210520
export VERSION=1.0.4
export VERSIONDATE=20220212
wl-showstatus --package-version
export DEPENDANCIES=
export OPTIONALDEPENDANCIES=
export BUILDDEPENDANCIES=
export LICENSEFILE=COPYING
export LICENSETYPE=GPL
export DOWNLOADURL="http://ftp.gnome.org/pub/GNOME/sources/mm-common/"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://ftp.gnome.org/pub/gnome/sources/$BASENAME/`echo $VERSION|sed 's/^\([0-9]*\.[0-9]*\)\..*$/\1/'`/$BASENAME-$VERSION.tar.bz2
export DOWNLOADSOURCEURL=http://ftp.gnome.org/pub/gnome/sources/$BASENAME/`echo $VERSION|sed 's/^\([0-9]*\.[0-9]*\)\..*$/\1/'`/$BASENAME-$VERSION.tar.xz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
#tar xfj $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.bz2
tar xfJ $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.xz
cd $BASENAME-$VERSION
## fix missing skeletonmm/tools/dist-cmd.py (version >= 1.0.1)
#touch skeletonmm/tools/dist-cmd.py
wl-showstatus configure &&
 NOCONFIGURE=1 ./autogen.sh &&
 #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM LDFLAGS="-no-undefined -Wl,-no-undefined" &&
 ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM LDFLAGS="-Wl,-no-undefined" &&
 wl-showstatus build-install &&
 #make install-strip &&
 ( make install-strip || ( touch skeletonmm/tools/dist-cmd.py && make install-strip )) &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
####make -i; make install-strip



#export BUILDDEPENDANCIES=meson,ninja
#-Dc_args=$CFLAGS -Dcpp_args=$CXXFLAGS -Dc_link_args=$LDFLAGS
## fix missing gio-unix
##sed -i.bak -e "s/gio-unix-/gio-/" meson.build
#sed -i.bak -e "s/gio-unix-/gio-windows-/" meson.build
#mkdir -p build_both &&
# wl-showstatus configure &&
# PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib PATH=$PYDIR:$PATH $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Duse-network=false . build_both &&
# ## fix slash/backslash path issue when calling Python from Ninja
# #sed -i.bak -e "s/join_paths/os.path.join/g; /COMMAND =.*python\.exe/ s?\"/\([a-zA-Z]\)/?\"\1:/?; /COMMAND =.*python\.exe/ s?/?\\\\?g" build_*/build.ninja &&
# ## fix Python path issues in meson_exe
# #sed -i.bak -e "s?$PYDIR?$(echo $PYDIR|sed -e "s?^/\([a-zA-Z]\)/?\1:/?")?" build_both/meson-private/meson_exe_python.exe_*.dat &&
# ## fix execution of Python scripts
# #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *= *\| *=.*\&\& *\)\(\"\{0,1\}[^ ]*\)\(\.py\|glib-mkenums\|g-ir-scanner\)\(\"\{0,1\} \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_both/build.ninja &&
# ## fix executing shell scripts
# #sed -i.bak -e "s?^\(\s*COMMAND\s*=\s*\)\(\"[^\"]*\.sh\"\)?\1\"$(cygpath -m $(which sh.exe))\" \2?" build_both/build.ninja &&
# sed -i.bak -e "s?$(pwd -W)/util/meson_aux/?$(cygpath -w $(pwd -W)/util/meson_aux/|sed -e 's?\\?\\\\?g')?g" build_both/meson-private/install.dat &&
# wl-showstatus build-install &&
# PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib ninja -C build_both install &&
#    echo OK && find . -name '*.a'

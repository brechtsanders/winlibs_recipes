#export NAME="Intel(R) Math Kernel Library (Intel(R) MKL)"
#export STATUS=
#export URL=https://software.intel.com/en-us/mkl
#export BASENAME=mkl
#export DESCRIPTION="Intel(R) Math Kernel Library (Intel(R) MKL) optimizes code with minimal effort for future generations of Intel(R) processors. It is compatible with your choice of compilers, languages, operating systems, and linking and threading models."
#export CATEGORY=math
#export TYPE=library
#export VERSION=
#export VERSIONDATE=20170717
#wl-showstatus --package-version
#export DEPENDENCIES=
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=
#export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=COPYING
#export LICENSETYPE=
#export DOWNLOADURL=""
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=???
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#wl-showstatus extract
#tar xz --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
#cd $BASENAME-$VERSION



#export NAME="Intel(R) Math Kernel Library for Deep Neural Networks (Intel(R) MKL-DNN)"
#export STATUS=
#export URL=https://01.org/mkl-dnn
##export URL=https://github.com/01org/mkl-dnn
##export URL=https://github.com/oneapi-src/oneDNN
#export BASENAME=mkl-dnn
#export DESCRIPTION="Intel(R) Math Kernel Library for Deep Neural Networks (Intel(R) MKL-DNN) is an open source performance library for Deep Learning (DL) applications intended for acceleration of DL frameworks on Intel(R) architecture. Intel(R) MKL-DNN includes highly vectorized and threaded building blocks to implement convolutional neural networks (CNN) with C and C++ interfaces."
#export CATEGORY=dataprocessing
#export TYPE=library
##export VERSION=0.11
##export VERSIONDATE=20171210
##export VERSION=0.12
##export VERSIONDATE=20171230
##export VERSION=0.13
##export VERSIONDATE=20180306
#####src/common/utils.hpp:40:29: error: '__FUNCSIG__' was not declared in this scope
##export VERSION=0.14
##export VERSIONDATE=20180427
##export VERSION=0.15
##export VERSIONDATE=20180711
##export VERSION=0.16
##export VERSIONDATE=20180815
##export VERSION=0.17
##export VERSIONDATE=20181120
##export VERSION=0.17.1
##export VERSIONDATE=20181129
##export VERSION=0.17.2
##export VERSIONDATE=20181220
##export VERSION=0.17.3
##export VERSIONDATE=20190201
##export VERSION=0.17.4
##export VERSIONDATE=20190213
##export VERSION=0.18
##export VERSIONDATE=20190302
##export VERSION=0.18.1
##export VERSIONDATE=20190316
##export VERSION=0.19
##export VERSIONDATE=20190515
##export VERSION=0.20
##export VERSIONDATE=20190629
##export VERSION=0.20.1
##export VERSIONDATE=20190710
##export VERSION=0.20.2
##export VERSIONDATE=20190817
##export VERSION=0.20.3
##export VERSIONDATE=20190822
##export VERSION=0.20.4
##export VERSIONDATE=20190827
##export VERSION=0.20.5
##export VERSIONDATE=20190906
##export VERSION=0.20.6
##export VERSIONDATE=20191010
##export VERSION=0.21
##export VERSIONDATE=20190917
##export VERSION=0.21.1
##export VERSIONDATE=20190928
##export VERSION=0.21.2
##export VERSIONDATE=20191009
##export VERSION=0.21.3
##export VERSIONDATE=20200118
##export VERSION=0.21.4
##export VERSIONDATE=20200305
##export VERSION=0.21.5
##export VERSIONDATE=20200424
##export VERSION=1.0
##export VERSIONDATE=20190713
##export VERSION=1.0.1
##export VERSIONDATE=20190730
##export VERSION=1.0.2
##export VERSIONDATE=20190817
##export VERSION=1.0.3
##export VERSIONDATE=20191023
##export VERSION=1.0.4
##export VERSIONDATE=20191025
#####src/cpu/xbyak/xbyak.h:1395:57: warning: left shift count >= width of type [-Wshift-count-overflow]
##export VERSION=1.1
##export VERSIONDATE=20191004
#####Error copying file "R:/x86_64-7.2.0-release-posix-seh-rt_v6-rev0/mkl-dnn-1.1/build_static/src/dnnl.lib" to "R:/x86_64-7.2.0-release-posix-seh-rt_v6-rev0/mkl-dnn-1.1/build_static/src/mkldnn.lib".
##export VERSION=1.1.1
##export VERSIONDATE=20191023
##export VERSION=1.1.2
##export VERSIONDATE=20191225
##export VERSION=1.1.3
##export VERSIONDATE=20200118
##export VERSION=1.2
##export VERSIONDATE=20200201
##export VERSION=1.2.1
##export VERSIONDATE=20200226
##export VERSION=1.2.2
##export VERSIONDATE=20200319
##export VERSION=1.3
##export VERSIONDATE=20200403
##export VERSION=1.4
##export VERSIONDATE=20200418
##export VERSION=1.5
##export VERSIONDATE=20200618
##export VERSION=1.5.1
##export VERSIONDATE=20200708
##export VERSION=1.6
##export VERSIONDATE=20200801
##export VERSION=1.6.1
##export VERSIONDATE=20200808
##export VERSION=1.6.2
##export VERSIONDATE=20200905
##export VERSION=1.6.3
##export VERSIONDATE=20200912
##export VERSION=1.6.4
##export VERSIONDATE=20201002
##export VERSION=1.6.5
##export VERSIONDATE=20201028
#export VERSION=1.7
#export VERSIONDATE=20201104
#wl-showstatus --package-version
#export DEPENDENCIES=
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=cmake,ninja
#export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=LICENSE
#export LICENSETYPE=Apache
##export DOWNLOADURL="https://github.com/01org/mkl-dnn/releases"
#export DOWNLOADURL="https://github.com/oneapi-src/oneDNN/releases"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
##export DOWNLOADSOURCEURL=https://github.com/01org/mkl-dnn/archive/v$VERSION.tar.gz
#export DOWNLOADSOURCEURL=https://github.com/oneapi-src/oneDNN/archive/v$VERSION.tar.gz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
##mv $TARBALLDIR/$BASENAME/v$VERSION.tar.gz $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
#wl-wait4deps
#wl-showstatus extract
##tar xz --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
#tar xz --force-local -f $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
##cd $BASENAME-$VERSION
#cd oneDNN-$VERSION
## fix 32-bit issue in src/common/math_utils.hpp
#(
#cat << EOF
##define _POSIX_THREAD_SAFE_FUNCTIONS
##include <stdlib.h>
##include <stdio.h>
#int main () {
# printf("%i", sizeof(size_t));
# return 0;
#}
#EOF
#) | ${CC:-gcc} -o size_t.exe -xc -
#patch -ulbf src/common/math_utils.hpp << EOF
#@@ -83,3 +83,6 @@
# #   define CP(pw) do { if (v >= (1ull << pw)) { v >>= pw; p += pw; } } while(0)
#-    CP(32); CP(16); CP(8); CP(4); CP(2); CP(1);
#+#   if $(./size_t.exe) > 4
#+    CP(32);
#+#   endif
#+    CP(16); CP(8); CP(4); CP(2); CP(1);
# #   undef CP
#EOF
## fix missing InitializeSRWLock() in src/common/rw_mutex.cpp (version >= 1.5.1)
#mv src/common/rw_mutex.cpp src/common/rw_mutex.cpp.bak
#cat > src/common/rw_mutex.cpp << EOF
##if !defined(_WIN32_WINNT) || _WIN32_WINNT < 0x0600
##undef _WIN32_WINNT
##define _WIN32_WINNT 0x0600
##endif
#EOF
#cat src/common/rw_mutex.cpp.bak >> src/common/rw_mutex.cpp
## remove invalid Microsoft flags
#sed -i.bak -e "s?\s\(/MP\|/wd[0-9]*\)??g" cmake/platform.cmake tests/CMakeLists.txt
### also build static library (version <= 0.16)
##mv src/CMakeLists.txt src/CMakeLists.txt.bak &&
##cat src/CMakeLists.txt.bak > src/CMakeLists.txt &&
##sed -n -e "s/\(add_library *([^ ]*\) *SHARED/\1_static STATIC/p" src/CMakeLists.txt.bak >> src/CMakeLists.txt &&
##sed -n -e "s/^.*add_library *(\([^ ]*\) *SHARED.*$/set_target_properties(\1_static PROPERTIES OUTPUT_NAME \1)/p" src/CMakeLists.txt.bak >> src/CMakeLists.txt
##sed -n -e "s/^.*add_library *(\([^ ]*\) *SHARED.*$/install(TARGETS \1_static DESTINATION lib\1)/p" src/CMakeLists.txt.bak >> src/CMakeLists.txt
## fix missing mkldnn.lib (version >= 1.1)
#patch -ulbf src/CMakeLists.txt << EOF
#@@ -135,8 +135,19 @@
# if (WIN32)
#+    if (MSVC)
#+        set(myprefix "")
#+        set(mysuffix ".lib")
#+    else ()
#+        set(myprefix "lib")
#+        if(DNNL_LIBRARY_TYPE STREQUAL "SHARED")
#+            set(mysuffix ".dll.a")
#+        else()
#+            set(mysuffix ".a")
#+        endif()
#+    endif ()
#     add_custom_target(compat_libs ALL
#         \${CMAKE_COMMAND} -E copy
#-        \$<TARGET_FILE_DIR:\${LIB_NAME}>/dnnl.lib
#-        \$<TARGET_FILE_DIR:\${LIB_NAME}>/mkldnn.lib
#+        \$<TARGET_FILE_DIR:\${LIB_NAME}>/\${myprefix}dnnl\${mysuffix}
#+        \$<TARGET_FILE_DIR:\${LIB_NAME}>/\${myprefix}mkldnn\${mysuffix}
#         DEPENDS \${LIB_NAME})
#-    install(FILES \$<TARGET_FILE_DIR:\${LIB_NAME}>/mkldnn.lib
#+    install(FILES \$<TARGET_FILE_DIR:\${LIB_NAME}>/\${myprefix}mkldnn\${mysuffix}
#         DESTINATION \${CMAKE_INSTALL_PREFIX}/\${CMAKE_INSTALL_LIBDIR})
#EOF
##wl-showstatus configure &&
##cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DWITH_EXAMPLE:BOOL=OFF -DWITH_TEST:BOOL=OFF . &&
## ## remove invalid Microsoft flags
## #sed -i.bak -e "s?/wd[0-9]*??g" $(grep -l "/wd[0-9]*" $(find -name '*.make')) &&
## wl-showstatus build-install &&
## make install/strip &&
## #mkdir -p $INSTALLPREFIX/bin &&
## #mv -f $INSTALLPREFIX/lib/libmkldnn.dll $INSTALLPREFIX/bin/ &&
## mv -f src/libmkldnn.a $INSTALLPREFIX/lib/ &&
## wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
##mkdir -p build_static build_shared &&
## wl-showstatus configure &&
## cd build_static &&
## #cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DMKLDNN_LIBRARY_TYPE:STRING=STATIC -DWITH_EXAMPLE:BOOL=OFF -DWITH_TEST:BOOL=OFF .. &&
## cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DMKLDNN_LIBRARY_TYPE:STRING=STATIC -DWITH_EXAMPLE:BOOL=OFF -DDNNL_BUILD_EXAMPLES:BOOL=OFF -DWITH_TEST:BOOL=OFF -DDNNL_BUILD_TESTS:BOOL=OFF .. &&
## cd .. &&
## wl-showstatus configure &&
## cd build_shared &&
## #cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DMKLDNN_LIBRARY_TYPE:STRING=SHARED -DWITH_EXAMPLE:BOOL=OFF -DWITH_TEST:BOOL=OFF .. &&
## cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DMKLDNN_LIBRARY_TYPE:STRING=SHARED -DWITH_EXAMPLE:BOOL=OFF -DDNNL_BUILD_EXAMPLES:BOOL=OFF -DWITH_TEST:BOOL=OFF -DDNNL_BUILD_TESTS:BOOL=OFF .. &&
## cd .. &&
## wl-showstatus build-install &&
## make -Cbuild_static install/strip &&
## wl-showstatus build-install &&
## make -Cbuild_shared install/strip &&
## wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DMKLDNN_LIBRARY_TYPE:STRING=STATIC -DDNNL_BUILD_EXAMPLES:BOOL=OFF -DDNNL_BUILD_TESTS:BOOL=OFF -S. -Bbuild_static &&
# wl-showstatus configure &&
# cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DMKLDNN_LIBRARY_TYPE:STRING=SHARED -DDNNL_BUILD_EXAMPLES:BOOL=OFF -DDNNL_BUILD_TESTS:BOOL=OFF -S. -Bbuild_shared &&
# wl-showstatus build-install &&
# ninja -Cbuild_static install/strip &&
# wl-showstatus build-install &&
# ninja -Cbuild_shared install/strip &&
# #wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf oneDNN-$VERSION
#####Note: not supported on 32-bit



export NAME="oneDNN"
export STATUS=
export URL=https://01.org/oneDNN
#export URL=https://github.com/oneapi-src/oneDNN
export BASENAME=onednn
export DESCRIPTION="oneAPI Deep Neural Network Library (oneDNN) is an open-source performance library for deep learning applications."
export CATEGORY=math,dataprocessing
export TYPE=library
#export VERSION=1.7
#export VERSIONDATE=20201205
#export VERSION=1.8
#export VERSIONDATE=20210106
#export VERSION=1.8.1
#export VERSIONDATE=20210114
#export VERSION=2.0
#export VERSIONDATE=20201209
#export VERSION=2.1
#export VERSIONDATE=20210217
#export VERSION=2.1.1
#export VERSIONDATE=20210226
#export VERSION=2.1.2
#export VERSIONDATE=20210313
#export VERSION=2.1.3
#export VERSIONDATE=20210401
####oneDNN supports 64 bit platforms only
#export VERSION=2.2
#export VERSIONDATE=20210401
#export VERSION=2.2.1
#export VERSIONDATE=20210410
####src/common/ittnotify/ittnotify.h:1841:1: error: multiple storage classes in declaration specifiers
#export VERSION=2.2.2
#export VERSIONDATE=20210429
#export VERSION=2.2.3
#export VERSIONDATE=20210529
#export VERSION=2.2.4
#export VERSIONDATE=20210615
#export VERSION=2.3
#export VERSIONDATE=20210701
#export VERSION=2.3.1
#export VERSIONDATE=20210805
#export VERSION=2.3.2
#export VERSIONDATE=20210807
#export VERSION=2.3.3
#export VERSIONDATE=20211014
#export VERSION=2.4
#export VERSIONDATE=20211008
#export VERSION=2.4.1
#export VERSIONDATE=20211013
#export VERSION=2.4.2
#export VERSIONDATE=20211021
#export VERSION=2.4.3
#export VERSIONDATE=20211106
#export VERSION=2.4.4
#export VERSIONDATE=20211116
#export VERSION=2.5
#export VERSIONDATE=20211209
#export VERSION=2.5.1
#export VERSIONDATE=20211221
#export VERSION=2.5.2
#export VERSIONDATE=20220114
#export VERSION=2.5.3
#export VERSIONDATE=20220305
#export VERSION=2.5.4
#export VERSIONDATE=20220324
#export VERSION=2.6
#export VERSIONDATE=20220330
#export VERSION=2.6.1
#export VERSIONDATE=20220713
#export VERSION=2.6.3
#export VERSIONDATE=20221022
#export VERSION=2.7
#export VERSIONDATE=20220829
#export VERSION=2.7.1
#export VERSIONDATE=20221022
#export VERSION=2.7.2
#export VERSIONDATE=20221119
#export VERSION=2.7.3
#export VERSIONDATE=20230113
#export VERSION=2.7.4
#export VERSIONDATE=20230427
#export VERSION=2.7.5
#export VERSIONDATE=20230812
#export VERSION=3.0
#export VERSIONDATE=20221220
#export VERSION=3.0.1
#export VERSIONDATE=20230224
#export VERSION=3.1
#export VERSIONDATE=20230401
#export VERSION=3.1.1
#export VERSIONDATE=20230609
#export VERSION=3.2
#export VERSIONDATE=20230624
#export VERSION=3.2.1
#export VERSIONDATE=20230804
#export VERSION=3.3
#export VERSIONDATE=20231007
#export VERSION=3.3.1
#export VERSIONDATE=20231118
#export VERSION=3.3.2
#export VERSIONDATE=20231201
#export VERSION=3.3.3
#export VERSIONDATE=20231215
#export VERSION=3.3.4
#export VERSIONDATE=20240109
#export VERSION=3.3.5
#export VERSIONDATE=20240229
#export VERSION=3.3.6
#export VERSIONDATE=20240319
#export VERSION=3.4
#export VERSIONDATE=20240301
#export VERSION=3.4.1
#export VERSIONDATE=20240330
#export VERSION=3.4.2
#export VERSIONDATE=20240511
#export VERSION=3.4.3
#export VERSIONDATE=20240529
#export VERSION=3.4.4
#export VERSIONDATE=20240723
#export VERSION=3.5
#export VERSIONDATE=20240612
export VERSION=3.5.1
export VERSIONDATE=20240717
wl-showstatus --package-version
export DEPENDENCIES=
#export DEPENDENCIES=xmlrpc-c
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
#export BUILDDEPENDENCIES=cmake,ninja,yasm
#export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=Apache
export DOWNLOADURL="https://github.com/oneapi-src/oneDNN/releases/"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/oneapi-src/oneDNN/archive/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd $BASENAME-$VERSION
# fix missing InitializeSRWLock in src/common/rw_mutex.cpp (version >= 1.7)
####src/common/rw_mutex.cpp:45:5: error: 'InitializeSRWLock' was not declared in this scope
mv src/common/rw_mutex.cpp src/common/rw_mutex.cpp.bak
cat > src/common/rw_mutex.cpp << EOF
#if !defined(_WIN32_WINNT) || _WIN32_WINNT < 0x0600
#undef _WIN32_WINNT
#define _WIN32_WINNT 0x0600
#endif
EOF
cat src/common/rw_mutex.cpp.bak >> src/common/rw_mutex.cpp
# fix error: multiple storage classes in declaration specifiers (version >= 2.2.2)
sed -i.bak -e "s/^\(#define ITT_INLINE\s*\)static \(__forceinline\)/\1\2/" src/common/ittnotify/ittnotify_config.h src/common/ittnotify/ittnotify.h src/common/ittnotify/ittnotify_static.c src/common/ittnotify/legacy/ittnotify.h
## fix src/common/CMakeLists.txt (version = 2.6)
##### Bug reported: https://github.com/oneapi-src/oneDNN/issues/1332
#patch -ulbf src/common/CMakeLists.txt << EOF
#@@ -33,3 +33,3 @@
#             set(CMAKE_C_FLAGS "\${CMAKE_C_FLAGS} -DITT_API_IPT_SUPPORT")
#-            if(NOT WIN32)
#+            if(NOT MSVC)
#                 enable_language(ASM)
#EOF
mkdir -p build_static build_shared &&
 wl-showstatus configure &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DDNNL_LIBRARY_TYPE:STRING=STATIC -DDNNL_BUILD_EXAMPLES:BOOL=OFF -DDNNL_BUILD_TESTS:BOOL=OFF -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe -S. -Bbuild_static &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DDNNL_LIBRARY_TYPE:STRING=STATIC -DDNNL_BUILD_EXAMPLES:BOOL=OFF -DDNNL_BUILD_TESTS:BOOL=OFF -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe -DCMAKE_CXX_FLAGS:STRING="-Wa,-mbig-obj -ftrack-macro-expansion=0" -S. -Bbuild_static &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DDNNL_LIBRARY_TYPE:STRING=STATIC -DDNNL_BUILD_EXAMPLES:BOOL=OFF -DDNNL_BUILD_TESTS:BOOL=OFF -DCMAKE_ASM_MASM_COMPILER:STRING="jwasm.exe" -DCMAKE_ASM_MASM_FLAGS:STRING="$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "-win64"; else echo "-coff"; fi)" -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe -S. -Bbuild_static &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DDNNL_LIBRARY_TYPE:STRING=STATIC -DDNNL_BUILD_EXAMPLES:BOOL=OFF -DDNNL_BUILD_TESTS:BOOL=OFF -DCMAKE_ASM_MASM_COMPILER:STRING=${CC:-gcc} -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe -S. -Bbuild_static &&
 wl-showstatus configure &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DDNNL_LIBRARY_TYPE:STRING=SHARED -DDNNL_BUILD_EXAMPLES:BOOL=OFF -DDNNL_BUILD_TESTS:BOOL=OFF -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe -S. -Bbuild_shared &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DDNNL_LIBRARY_TYPE:STRING=SHARED -DDNNL_BUILD_EXAMPLES:BOOL=OFF -DDNNL_BUILD_TESTS:BOOL=OFF -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe -DCMAKE_CXX_FLAGS:STRING="-Wa,-mbig-obj -ftrack-macro-expansion=0" -S. -Bbuild_shared &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DDNNL_LIBRARY_TYPE:STRING=SHARED -DDNNL_BUILD_EXAMPLES:BOOL=OFF -DDNNL_BUILD_TESTS:BOOL=OFF -DCMAKE_ASM_MASM_COMPILER:STRING="jwasm.exe" -DCMAKE_ASM_MASM_FLAGS:STRING="$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "-win64"; else echo "-coff"; fi)" -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe -S. -Bbuild_shared &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DDNNL_LIBRARY_TYPE:STRING=SHARED -DDNNL_BUILD_EXAMPLES:BOOL=OFF -DDNNL_BUILD_TESTS:BOOL=OFF -DCMAKE_ASM_MASM_COMPILER:STRING=${CC:-gcc} -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe -S. -Bbuild_shared &&
 wl-showstatus build &&
 ( ninja -Cbuild_static || ninja -j1 -Cbuild_static ) &&
 wl-showstatus build &&
 ( ninja -Cbuild_shared || ninja -j1 -Cbuild_shared ) &&
 wl-showstatus build-install &&
 ninja -Cbuild_static install/strip &&
 wl-showstatus build-install &&
 ninja -Cbuild_shared install/strip &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
#####Note: not supported on 32-bit




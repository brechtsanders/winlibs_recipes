#export NAME="GNU Binutils (targeting Windows on ARM)"
#export STATUS=
#export URL=http://www.gnu.org/software/binutils/
#export BASENAME=arm64win-binutils
#export DESCRIPTION="The GNU Binutils are a collection of binary tools. This build target is the Windows on ARM 64-bit platform."
#export CATEGORY=development
#export TYPE=application
##export VERSION=2.35.1
##export VERSIONDATE=20201123
##export VERSION=2.35.2
##export VERSIONDATE=20210130
##export VERSION=2.36
##export VERSIONDATE=20210124
##export VERSION=2.36.1
##export VERSIONDATE=20210206
##export VERSION=2.37
##export VERSIONDATE=20210719
##export VERSION=2.38
##export VERSIONDATE=20220209
#export VERSION=2.39
#export VERSIONDATE=20220805
#wl-showstatus --package-version
#export DEPENDENCIES=zlib,mpc,mpfr,gmp,cloog,isl
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=texinfo
#export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=COPYING
#export LICENSETYPE="GPL/LGPL"
#export DOWNLOADURL="http://ftp.gnu.org/gnu/binutils/ binutils-"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://ftp.gnu.org/gnu/binutils/binutils-$VERSION.tar.gz
#wl-showstatus download
##wl-download -v -d $TARBALLDIR/binutils $DOWNLOADSOURCEURL
#wl-wait4deps
#mkdir -p $BASENAME-$VERSION
#tar xz --force-local -f $TARBALLDIR/binutils/binutils-$VERSION.tar.gz -C$BASENAME-$VERSION
#cd $BASENAME-$VERSION/binutils-$VERSION
#### fix aarch64 support in bfd/config.bfd (version >= 2.37)
###patch -ulbf bfd/config.bfd << EOF
###@@ -368,2 +368,8 @@
###     ;;
###+  arm64-*-pe* | aarch64-*-pe*)
###+    targ_defvec=aarch64_pe_le_vec
###+    targ_selvecs="aarch64_pe_le_vec aarch64_pe_be_vec aarch64_pei_le_vec aarch64_pei_be_vec"
###+    targ_underscore=no
###+    want64=true
###+    ;;
###   arm-*-pe*)
###EOF
###sed -e "s/arm\([_\-]\)/aarch64\1/" bfd/pe-arm.c > bfd/pe-arm64.c
###sed -e "s/arm\([_\-]\)/aarch64\1/" bfd/pei-arm.c > bfd/pei-arm64.c
### fix aarch64 support in bfd/config.bfd (version >= 2.37)
##patch -ulbf bfd/config.bfd << EOF
##@@ -232,2 +232,8 @@
##     ;;
##+  aarch64-*-pe* | aarch64-*-mingw*)
##+    targ_defvec=aarch64_pe_le_vec
##+    targ_selvecs="aarch64_pe_le_vec aarch64_pe_be_vec aarch64_pei_le_vec aarch64_pei_be_vec"
##+    targ_underscore=no
##+    want64=true
##+    ;;
##   aarch64-*-elf | aarch64-*-rtems* | aarch64-*-genode*)
##EOF
##sed -e "s/arm\([_\-]\)/aarch64\1/" bfd/pe-arm.c > bfd/pe-arm64.c
##sed -e "s/arm\([_\-]\)/aarch64\1/" bfd/pei-arm.c > bfd/pei-arm64.c
### fix aarch64 PE support in bfd/targets.c (version >= 2.37)
##patch -ulbf bfd/targets.c << EOF
##@@ -701,2 +701,4 @@
## extern const bfd_target arm_pe_le_vec;
##+extern const bfd_target aarch64_pe_be_vec;
##+extern const bfd_target aarch64_pe_le_vec;
## extern const bfd_target arm_pe_wince_be_vec;
##@@ -705,2 +707,4 @@
## extern const bfd_target arm_pei_le_vec;
##+extern const bfd_target aarch64_pei_be_vec;
##+extern const bfd_target aarch64_pei_le_vec;
## extern const bfd_target arm_pei_wince_be_vec;
##EOF
### fix aarch64 PE support in bfd/configure (version >= 2.37)
##patch -ulbf bfd/configure << EOF
##@@ -13280,2 +13280,4 @@
##     arm_pe_le_vec)              tb="\$tb pe-arm.lo peigen.lo \$coff" ;;
##+    aarch64_pe_le_vec)          tb="\$tb pe-arm64.lo peigen.lo \$coff" ;;
##+    aarch64_pe_be_vec)          tb="\$tb pe-arm64.lo peigen.lo \$coff" ;;
##     arm_pe_wince_be_vec)        tb="\$tb pe-arm-wince.lo pe-arm.lo peigen.lo \$coff" ;;
##@@ -13284,2 +13286,4 @@
##     arm_pei_le_vec)             tb="\$tb pei-arm.lo peigen.lo \$coff" ;;
##+    aarch64_pei_be_vec)         tb="\$tb pei-arm64.lo peigen.lo \$coff" ;;
##+    aarch64_pei_le_vec)         tb="\$tb pei-arm64.lo peigen.lo \$coff" ;;
##     arm_pei_wince_be_vec)       tb="\$tb pei-arm-wince.lo pei-arm.lo peigen.lo \$coff" ;;
##EOF
### fix aarch64 PE gas/configure.tgt (version >= 2.37)
##patch -ulbf gas/configure.tgt << EOF
##@@ -126,2 +126,3 @@
##   aarch64*-*-elf*)                     fmt=elf;;
##+  aarch64*-*-pe | aarch64*-*-mingw*)   fmt=coff em=pep;;
##   aarch64*-*-fuchsia*)                 fmt=elf;;
##EOF
### fix ld/configure.tgt (version >= 2.37)
##patch -ulbf ld/configure.tgt << EOF
##@@ -45,2 +45,6 @@
## case "\${targ}" in
##+aarch64-*-pe | aarch64-*-mingw*)
##+                       targ_emul=aarch64-pe
##+                       targ_extra_ofiles="deffilep.o pe-dll.o"
##+                       ;;
## aarch64_be-*-elf)      targ_emul=aarch64elfb
##EOF
### fix gas/output-file.c (version >= 2.37)
##patch -ulbf gas/output-file.c << EOF
##@@ -23,2 +23,5 @@
##
##+#ifndef TARGET_FORMAT
##+#define TARGET_FORMAT "pe-coff"
##+#endif
## #ifndef TARGET_MACH
##EOF
### fix missing ld/emulparams/aarch64pe.sh (version >= 2.37)
##sed -e "s/arm/aarch64/" ld/emulparams/armpe.sh > ld/emulparams/aarch64pe.sh
## fix missing uint in libiberty/rust-demangle.c (version >= 2.37)
#mv libiberty/rust-demangle.c libiberty/rust-demangle.c.bak &&
#echo "#define uint unsigned int" > libiberty/rust-demangle.c &&
#cat libiberty/rust-demangle.c.bak >> libiberty/rust-demangle.c
## add support for aarch64-pe in LD and GAS and add non image vectors in BFD (version >= 2.39)
##### see also: https://sourceware.org/pipermail/binutils/2021-December/118998.html
##### Bug reported: https://sourceware.org/bugzilla/show_bug.cgi?id=29964
## fix bfd/Makefile.in (version >= 2.39)
#patch -ulbf bfd/Makefile.in << EOF
#@@ -477,2 +477,3 @@
# psdir = @psdir@
#+runstatedir = @runstatedir@
# sbindir = @sbindir@
#@@ -1083,2 +1084,3 @@
#        pei-aarch64.c \\
#+        pe-aarch64.c \\
#        pei-ia64.c \\
#@@ -1689,2 +1691,3 @@
# @AMDEP_TRUE@@am__include@ @am__quote@./\$(DEPDIR)/pdp11.Plo@am__quote@
#+@AMDEP_TRUE@@am__include@ @am__quote@./\$(DEPDIR)/pe-aarch64.Plo@am__quote@
# @AMDEP_TRUE@@am__include@ @am__quote@./\$(DEPDIR)/pe-aarch64igen.Plo@am__quote@
#EOF
#patch -ulbf bfd/bfd.c << EOF
#@@ -1740,3 +1740,3 @@
#       || strcmp (name, "pei-x86-64") == 0
#-      || strcmp (name, "pei-aarch64-little") == 0
#+      || strcmp (name, "pei-aarch64") == 0
#       || strcmp (name, "pe-arm-wince-little") == 0
#EOF
#patch -ulbf bfd/coff-aarch64.c << EOF
#@@ -97,3 +97,3 @@
# #else
#- "pei-aarch64-little",                 /* Name.  */
#+ "pei-aarch64",                        /* Name.  */
# #endif
#EOF
#patch -ulbf bfd/config.bfd << EOF
#@@ -256,2 +256,10 @@
#     ;;
#+  aarch64-*-pe | aarch64-*-mingw*)
#+    # Not currently complete (and probably not stable), warn user
#+    #echo "*** WARNING BFD aarch64-pe support not complete nor stable"
#+    #echo "*** Do not rely on this for production purposes"
#+    targ_defvec=aarch64_pei_vec
#+    targ_selvecs="aarch64_pe_vec aarch64_elf64_le_vec arm_pe_le_vec arm_pei_le_vec"
#+    want64=true
#+    ;;
#   aarch64-*-freebsd*)
#EOF
#patch -ulbf bfd/configure << EOF
#@@ -794,2 +794,3 @@
# localstatedir
#+runstatedir
# sharedstatedir
#@@ -890,2 +891,3 @@
# localstatedir='\${prefix}/var'
#+runstatedir='\${localstatedir}/run'
# includedir='\${prefix}/include'
#@@ -1142,2 +1144,11 @@
# 
#+  -runstatedir | --runstatedir | --runstatedi | --runstated \\
#+  | --runstate | --runstat | --runsta | --runst | --runs \\
#+  | --run | --ru | --r)
#+    ac_prev=runstatedir ;;
#+  -runstatedir=* | --runstatedir=* | --runstatedi=* | --runstated=* \\
#+  | --runstate=* | --runstat=* | --runsta=* | --runst=* | --runs=* \\
#+  | --run=* | --ru=* | --r=*)
#+    runstatedir=\$ac_optarg ;;
#+
#   -sbindir | --sbindir | --sbindi | --sbind | --sbin | --sbi | --sb)
#@@ -1279,3 +1290,3 @@
#                oldincludedir docdir infodir htmldir dvidir pdfdir psdir \\
#-               libdir localedir mandir
#+               libdir localedir mandir runstatedir
# do
#@@ -1432,2 +1443,3 @@
#   --localstatedir=DIR     modifiable single-machine data [PREFIX/var]
#+  --runstatedir=DIR       modifiable per-process data [LOCALSTATEDIR/run]
#   --libdir=DIR            object code libraries [EPREFIX/lib]
#@@ -11625,3 +11637,3 @@
#     incorrectly reject 9223372036854775807.  */
#-#define LARGE_OFF_T (((off_t) 1 << 62) - 1 + ((off_t) 1 << 62))
#+#define LARGE_OFF_T ((((off_t) 1 << 31) << 31) - 1 + (((off_t) 1 << 31) << 31))
#   int off_t_is_large[(LARGE_OFF_T % 2147483629 == 721
#@@ -11671,3 +11683,3 @@
#     incorrectly reject 9223372036854775807.  */
#-#define LARGE_OFF_T (((off_t) 1 << 62) - 1 + ((off_t) 1 << 62))
#+#define LARGE_OFF_T ((((off_t) 1 << 31) << 31) - 1 + (((off_t) 1 << 31) << 31))
#   int off_t_is_large[(LARGE_OFF_T % 2147483629 == 721
#@@ -11695,3 +11707,3 @@
#     incorrectly reject 9223372036854775807.  */
#-#define LARGE_OFF_T (((off_t) 1 << 62) - 1 + ((off_t) 1 << 62))
#+#define LARGE_OFF_T ((((off_t) 1 << 31) << 31) - 1 + (((off_t) 1 << 31) << 31))
#   int off_t_is_large[(LARGE_OFF_T % 2147483629 == 721
#@@ -11740,3 +11752,3 @@
#     incorrectly reject 9223372036854775807.  */
#-#define LARGE_OFF_T (((off_t) 1 << 62) - 1 + ((off_t) 1 << 62))
#+#define LARGE_OFF_T ((((off_t) 1 << 31) << 31) - 1 + (((off_t) 1 << 31) << 31))
#   int off_t_is_large[(LARGE_OFF_T % 2147483629 == 721
#@@ -11764,3 +11776,3 @@
#     incorrectly reject 9223372036854775807.  */
#-#define LARGE_OFF_T (((off_t) 1 << 62) - 1 + ((off_t) 1 << 62))
#+#define LARGE_OFF_T ((((off_t) 1 << 31) << 31) - 1 + (((off_t) 1 << 31) << 31))
#   int off_t_is_large[(LARGE_OFF_T % 2147483629 == 721
#@@ -13361,2 +13373,3 @@
#     aarch64_pei_vec)            tb="\$tb pei-aarch64.lo pe-aarch64igen.lo \$coff"; target_size=64 ;;
#+    aarch64_pe_vec)             tb="\$tb pe-aarch64.lo pe-aarch64igen.lo \$coff"; target_size=64 ;;
#     alpha_ecoff_le_vec)         tb="\$tb coff-alpha.lo ecoff.lo \$ecoff"; target_size=64 ;;
#@@ -15047,2 +15060,4 @@
#   close (fd);
#+  free (data);
#+  free (data3);
#   return 0;
#EOF
#patch -ulbf bfd/configure.ac << EOF
#@@ -418,2 +418,3 @@
#     aarch64_pei_vec)            tb="\$tb pei-aarch64.lo pe-aarch64igen.lo \$coff"; target_size=64 ;;
#+    aarch64_pe_vec)             tb="\$tb pe-aarch64.lo pe-aarch64igen.lo \$coff"; target_size=64 ;;
#     alpha_ecoff_le_vec)         tb="\$tb coff-alpha.lo ecoff.lo \$ecoff"; target_size=64 ;;
#EOF
#patch -ulbf bfd/libpei.h << EOF
#@@ -242,37 +242,2 @@
# 
#-#elif defined COFF_WITH_pep
#-
#-#define GET_OPTHDR_IMAGE_BASE H_GET_64
#-#define PUT_OPTHDR_IMAGE_BASE H_PUT_64
#-#define GET_OPTHDR_SIZE_OF_STACK_RESERVE H_GET_64
#-#define PUT_OPTHDR_SIZE_OF_STACK_RESERVE H_PUT_64
#-#define GET_OPTHDR_SIZE_OF_STACK_COMMIT H_GET_64
#-#define PUT_OPTHDR_SIZE_OF_STACK_COMMIT H_PUT_64
#-#define GET_OPTHDR_SIZE_OF_HEAP_RESERVE H_GET_64
#-#define PUT_OPTHDR_SIZE_OF_HEAP_RESERVE H_PUT_64
#-#define GET_OPTHDR_SIZE_OF_HEAP_COMMIT H_GET_64
#-#define PUT_OPTHDR_SIZE_OF_HEAP_COMMIT H_PUT_64
#-#define GET_PDATA_ENTRY bfd_get_64
#-
#-#define _bfd_XX_bfd_copy_private_bfd_data_common       _bfd_pep_bfd_copy_private_bfd_data_common
#-#define _bfd_XX_bfd_copy_private_section_data          _bfd_pep_bfd_copy_private_section_data
#-#define _bfd_XX_get_symbol_info                        _bfd_pep_get_symbol_info
#-#define _bfd_XX_only_swap_filehdr_out                  _bfd_pep_only_swap_filehdr_out
#-#define _bfd_XX_print_private_bfd_data_common          _bfd_pep_print_private_bfd_data_common
#-#define _bfd_XXi_final_link_postscript                 _bfd_pepi_final_link_postscript
#-#define _bfd_XXi_only_swap_filehdr_out                 _bfd_pepi_only_swap_filehdr_out
#-#define _bfd_XXi_swap_aouthdr_in                       _bfd_pepi_swap_aouthdr_in
#-#define _bfd_XXi_swap_aouthdr_out                      _bfd_pepi_swap_aouthdr_out
#-#define _bfd_XXi_swap_aux_in                           _bfd_pepi_swap_aux_in
#-#define _bfd_XXi_swap_aux_out                          _bfd_pepi_swap_aux_out
#-#define _bfd_XXi_swap_lineno_in                        _bfd_pepi_swap_lineno_in
#-#define _bfd_XXi_swap_lineno_out                       _bfd_pepi_swap_lineno_out
#-#define _bfd_XXi_swap_scnhdr_out                       _bfd_pepi_swap_scnhdr_out
#-#define _bfd_XXi_swap_sym_in                           _bfd_pepi_swap_sym_in
#-#define _bfd_XXi_swap_sym_out                          _bfd_pepi_swap_sym_out
#-#define _bfd_XXi_swap_debugdir_in                      _bfd_pepi_swap_debugdir_in
#-#define _bfd_XXi_swap_debugdir_out                     _bfd_pepi_swap_debugdir_out
#-#define _bfd_XXi_write_codeview_record                 _bfd_pepi_write_codeview_record
#-#define _bfd_XXi_slurp_codeview_record                 _bfd_pepi_slurp_codeview_record
#-
# #elif defined COFF_WITH_peAArch64
#@@ -312,2 +277,37 @@
# 
#+#elif defined COFF_WITH_pep
#+
#+#define GET_OPTHDR_IMAGE_BASE H_GET_64
#+#define PUT_OPTHDR_IMAGE_BASE H_PUT_64
#+#define GET_OPTHDR_SIZE_OF_STACK_RESERVE H_GET_64
#+#define PUT_OPTHDR_SIZE_OF_STACK_RESERVE H_PUT_64
#+#define GET_OPTHDR_SIZE_OF_STACK_COMMIT H_GET_64
#+#define PUT_OPTHDR_SIZE_OF_STACK_COMMIT H_PUT_64
#+#define GET_OPTHDR_SIZE_OF_HEAP_RESERVE H_GET_64
#+#define PUT_OPTHDR_SIZE_OF_HEAP_RESERVE H_PUT_64
#+#define GET_OPTHDR_SIZE_OF_HEAP_COMMIT H_GET_64
#+#define PUT_OPTHDR_SIZE_OF_HEAP_COMMIT H_PUT_64
#+#define GET_PDATA_ENTRY bfd_get_64
#+
#+#define _bfd_XX_bfd_copy_private_bfd_data_common       _bfd_pep_bfd_copy_private_bfd_data_common
#+#define _bfd_XX_bfd_copy_private_section_data          _bfd_pep_bfd_copy_private_section_data
#+#define _bfd_XX_get_symbol_info                        _bfd_pep_get_symbol_info
#+#define _bfd_XX_only_swap_filehdr_out                  _bfd_pep_only_swap_filehdr_out
#+#define _bfd_XX_print_private_bfd_data_common          _bfd_pep_print_private_bfd_data_common
#+#define _bfd_XXi_final_link_postscript                 _bfd_pepi_final_link_postscript
#+#define _bfd_XXi_only_swap_filehdr_out                 _bfd_pepi_only_swap_filehdr_out
#+#define _bfd_XXi_swap_aouthdr_in                       _bfd_pepi_swap_aouthdr_in
#+#define _bfd_XXi_swap_aouthdr_out                      _bfd_pepi_swap_aouthdr_out
#+#define _bfd_XXi_swap_aux_in                           _bfd_pepi_swap_aux_in
#+#define _bfd_XXi_swap_aux_out                          _bfd_pepi_swap_aux_out
#+#define _bfd_XXi_swap_lineno_in                        _bfd_pepi_swap_lineno_in
#+#define _bfd_XXi_swap_lineno_out                       _bfd_pepi_swap_lineno_out
#+#define _bfd_XXi_swap_scnhdr_out                       _bfd_pepi_swap_scnhdr_out
#+#define _bfd_XXi_swap_sym_in                           _bfd_pepi_swap_sym_in
#+#define _bfd_XXi_swap_sym_out                          _bfd_pepi_swap_sym_out
#+#define _bfd_XXi_swap_debugdir_in                      _bfd_pepi_swap_debugdir_in
#+#define _bfd_XXi_swap_debugdir_out                     _bfd_pepi_swap_debugdir_out
#+#define _bfd_XXi_write_codeview_record                 _bfd_pepi_write_codeview_record
#+#define _bfd_XXi_slurp_codeview_record                 _bfd_pepi_slurp_codeview_record
#+
# #else /* !COFF_WITH_pep */
#EOF
##cat > bfd/pe-aarch64.c << EOF
##/* BFD back-end for AArch64 PE IMAGE COFF files.
##   Copyright (C) 2021 Free Software Foundation, Inc.
##
##   This file is part of BFD, the Binary File Descriptor library.
##
##   This program is free software; you can redistribute it and/or modify
##   it under the terms of the GNU General Public License as published by
##   the Free Software Foundation; either version 3 of the License, or
##   (at your option) any later version.
##
##   This program is distributed in the hope that it will be useful,
##   but WITHOUT ANY WARRANTY; without even the implied warranty of
##   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##   GNU General Public License for more details.
##
##   You should have received a copy of the GNU General Public License
##   along with this program; if not, write to the Free Software
##   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
##   MA 02110-1301, USA.  */
##
###include "sysdep.h"
###include "bfd.h"
##
###define TARGET_SYM              aarch64_pe_vec
###define TARGET_NAME             "pe-aarch64"
###define TARGET_ARCHITECTURE     bfd_arch_aarch64
###define TARGET_PAGESIZE         4096
###define TARGET_BIG_ENDIAN       0
###define TARGET_ARCHIVE          0
###define TARGET_PRIORITY         0
##
##/* Rename the above into.. */
###define COFF_WITH_peAArch64
###define COFF_WITH_PE
###define PCRELOFFSET        true
##
##/* Long section names not allowed in executable images, only object files.  */
###define COFF_LONG_SECTION_NAMES 0
##
###define COFF_SECTION_ALIGNMENT_ENTRIES \\
##{ COFF_SECTION_NAME_EXACT_MATCH (".bss"), \\
##  COFF_ALIGNMENT_FIELD_EMPTY, COFF_ALIGNMENT_FIELD_EMPTY, 2 }, \\
##{ COFF_SECTION_NAME_EXACT_MATCH (".data"), \\
##  COFF_ALIGNMENT_FIELD_EMPTY, COFF_ALIGNMENT_FIELD_EMPTY, 2 }, \\
##{ COFF_SECTION_NAME_EXACT_MATCH (".rdata"), \\
##  COFF_ALIGNMENT_FIELD_EMPTY, COFF_ALIGNMENT_FIELD_EMPTY, 2 }, \\
##{ COFF_SECTION_NAME_EXACT_MATCH (".text"), \\
##  COFF_ALIGNMENT_FIELD_EMPTY, COFF_ALIGNMENT_FIELD_EMPTY, 2 }, \\
##{ COFF_SECTION_NAME_PARTIAL_MATCH (".idata"), \\
##  COFF_ALIGNMENT_FIELD_EMPTY, COFF_ALIGNMENT_FIELD_EMPTY, 2 }, \\
##{ COFF_SECTION_NAME_EXACT_MATCH (".pdata"), \\
##  COFF_ALIGNMENT_FIELD_EMPTY, COFF_ALIGNMENT_FIELD_EMPTY, 2 }, \\
##{ COFF_SECTION_NAME_PARTIAL_MATCH (".debug"), \\
##  COFF_ALIGNMENT_FIELD_EMPTY, COFF_ALIGNMENT_FIELD_EMPTY, 0 }, \\
##{ COFF_SECTION_NAME_PARTIAL_MATCH (".gnu.linkonce.wi."), \\
##  COFF_ALIGNMENT_FIELD_EMPTY, COFF_ALIGNMENT_FIELD_EMPTY, 0 }
##
###define PEI_HEADERS
###include "sysdep.h"
###include "bfd.h"
###include "libbfd.h"
###include "coff/aarch64.h"
###include "coff/internal.h"
###include "coff/pe.h"
###include "libcoff.h"
###include "libpei.h"
###include "libiberty.h"
##
##/* Make sure we're setting a 64-bit format.  */
###undef AOUTSZ
###define AOUTSZ          PEPAOUTSZ
###define PEAOUTHDR       PEPAOUTHDR
##
###include "coff-aarch64.c"
##EOF
#cat > bfd/pe-aarch64.c << EOF
#/* BFD back-end for AArch64 PE IMAGE COFF files.
#   Copyright (C) 2021 Free Software Foundation, Inc.
#
#   This file is part of BFD, the Binary File Descriptor library.
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
#   MA 02110-1301, USA.  */
#
##include "sysdep.h"
##include "bfd.h"
#
##define TARGET_SYM              aarch64_pe_vec
##define TARGET_NAME             "pe-aarch64"
##define TARGET_SYM_BIG          aarch64_pe_big_vec
##define TARGET_NAME_BIG         "pe-bigobj-aarch64"
##define TARGET_ARCHITECTURE     bfd_arch_aarch64
##define TARGET_PAGESIZE         4096
##define TARGET_BIG_ENDIAN       0
##define TARGET_ARCHIVE          0
##define TARGET_PRIORITY         0
#
#/* Rename the above into.. */
##define COFF_WITH_peAArch64
##define COFF_WITH_PE
##define COFF_WITH_PE_BIGOBJ
##define PCRELOFFSET        true
#
#/* Long section names not allowed in executable images, only object files.  */
##define COFF_LONG_SECTION_NAMES 0
#
##define COFF_SECTION_ALIGNMENT_ENTRIES \\
#{ COFF_SECTION_NAME_EXACT_MATCH (".bss"), \\
#  COFF_ALIGNMENT_FIELD_EMPTY, COFF_ALIGNMENT_FIELD_EMPTY, 2 }, \\
#{ COFF_SECTION_NAME_EXACT_MATCH (".data"), \\
#  COFF_ALIGNMENT_FIELD_EMPTY, COFF_ALIGNMENT_FIELD_EMPTY, 2 }, \\
#{ COFF_SECTION_NAME_EXACT_MATCH (".rdata"), \\
#  COFF_ALIGNMENT_FIELD_EMPTY, COFF_ALIGNMENT_FIELD_EMPTY, 2 }, \\
#{ COFF_SECTION_NAME_EXACT_MATCH (".text"), \\
#  COFF_ALIGNMENT_FIELD_EMPTY, COFF_ALIGNMENT_FIELD_EMPTY, 2 }, \\
#{ COFF_SECTION_NAME_PARTIAL_MATCH (".idata"), \\
#  COFF_ALIGNMENT_FIELD_EMPTY, COFF_ALIGNMENT_FIELD_EMPTY, 2 }, \\
#{ COFF_SECTION_NAME_EXACT_MATCH (".pdata"), \\
#  COFF_ALIGNMENT_FIELD_EMPTY, COFF_ALIGNMENT_FIELD_EMPTY, 2 }, \\
#{ COFF_SECTION_NAME_PARTIAL_MATCH (".debug"), \\
#  COFF_ALIGNMENT_FIELD_EMPTY, COFF_ALIGNMENT_FIELD_EMPTY, 0 }, \\
#{ COFF_SECTION_NAME_PARTIAL_MATCH (".gnu.linkonce.wi."), \\
#  COFF_ALIGNMENT_FIELD_EMPTY, COFF_ALIGNMENT_FIELD_EMPTY, 0 }
#
##define PEI_HEADERS
##include "sysdep.h"
##include "bfd.h"
##include "libbfd.h"
##include "coff/aarch64.h"
##include "coff/internal.h"
##include "coff/pe.h"
##include "libcoff.h"
##include "libpei.h"
##include "libiberty.h"
#
#/* Make sure we're setting a 64-bit format.  */
##undef AOUTSZ
##define AOUTSZ          PEPAOUTSZ
##define PEAOUTHDR       PEPAOUTHDR
#
##include "coff-aarch64.c"
#EOF
#patch -ulbf bfd/pei-aarch64.c << EOF
#@@ -24,3 +24,3 @@
# #define TARGET_SYM             aarch64_pei_vec
#-#define TARGET_NAME            "pei-aarch64-little"
#+#define TARGET_NAME            "pei-aarch64"
# #define TARGET_ARCHITECTURE    bfd_arch_aarch64
#EOF
#patch -ulbf bfd/peicode.h << EOF
#@@ -193,2 +193,4 @@
# # define coff_swap_filehdr_out _bfd_XXi_only_swap_filehdr_out
#+#elif defined COFF_WITH_peAArch64
#+# define coff_swap_filehdr_out _bfd_XX_only_swap_filehdr_out
# #elif defined COFF_WITH_pex64
#EOF
#patch -ulbf bfd/targets.c << EOF
#@@ -682,2 +682,3 @@
# extern const bfd_target aarch64_pei_vec;
#+extern const bfd_target aarch64_pe_vec;
# extern const bfd_target alpha_ecoff_le_vec;
#@@ -993,2 +994,3 @@
#        &aarch64_pei_vec,
#+       &aarch64_pe_vec,
# #endif
#EOF
#patch -ulbf gas/config/obj-coff.h << EOF
#@@ -42,2 +42,9 @@
# 
#+#ifdef TC_AARCH64
#+#include "coff/aarch64.h"
#+#ifndef TARGET_FORMAT
#+#define TARGET_FORMAT "pe-aarch64"
#+#endif
#+#endif
#+
# #ifdef TC_PPC
#EOF
#patch -ulbf gas/config/tc-aarch64.c << EOF
#@@ -1477,3 +1477,3 @@
#
#-#ifdef OBJ_ELF
#+#if defined (OBJ_ELF) || defined (OBJ_COFF)
# /* This code is to handle mapping symbols as defined in the ARM AArch64 ELF
#@@ -2035,2 +2035,3 @@
#
#+#ifdef OBJ_ELF
# static void
#@@ -2043,3 +2044,2 @@
#
#-#ifdef OBJ_ELF
# /* Emit BFD_RELOC_AARCH64_TLSDESC_ADD on the next ADD instruction.  */
#@@ -2117,4 +2117,4 @@
#   {"inst", s_aarch64_inst, 0},
#-  {"cfi_b_key_frame", s_aarch64_cfi_b_key_frame, 0},
# #ifdef OBJ_ELF
#+  {"cfi_b_key_frame", s_aarch64_cfi_b_key_frame, 0},
#   {"tlsdescadd", s_tlsdescadd, 0},
#@@ -8323,3 +8323,3 @@
#     {
#-#ifdef OBJ_ELF
#+#if defined(OBJ_ELF) || defined(OBJ_COFF)
#       insert_data_mapping_symbol (MAP_INSN, fragP->fr_fix, fragP, fix);
#@@ -9065,2 +9065,3 @@
#     case BFD_RELOC_AARCH64_TLSIE_LD_GOTTPREL_LO12_NC:
#+#if defined (OBJ_ELF) || defined (OBJ_MAYBE_ELF)
#       fixP->fx_r_type = (ilp32_p
#@@ -9068,2 +9069,5 @@
#                         : BFD_RELOC_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC);
#+#else
#+      fixP->fx_r_type = BFD_RELOC_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC;
#+#endif
#       S_SET_THREAD_LOCAL (fixP->fx_addsy);
#@@ -9076,2 +9080,3 @@
#     case BFD_RELOC_AARCH64_TLSDESC_LD_LO12_NC:
#+#if defined (OBJ_ELF) || defined (OBJ_MAYBE_ELF)
#       fixP->fx_r_type = (ilp32_p
#@@ -9079,2 +9084,5 @@
#                         : BFD_RELOC_AARCH64_TLSDESC_LD64_LO12);
#+#else
#+      fixP->fx_r_type = BFD_RELOC_AARCH64_TLSDESC_LD64_LO12;
#+#endif
#       S_SET_THREAD_LOCAL (fixP->fx_addsy);
#@@ -9148,2 +9156,3 @@
#         aarch64_force_relocation().  */
#+#if defined (OBJ_ELF) || defined (OBJ_MAYBE_ELF)
#       fixP->fx_r_type = (ilp32_p
#@@ -9151,2 +9160,5 @@
#                         : BFD_RELOC_AARCH64_LD64_GOT_LO12_NC);
#+#else
#+      fixP->fx_r_type = BFD_RELOC_AARCH64_LD64_GOT_LO12_NC;
#+#endif
#       gas_assert (!fixP->fx_done);
#@@ -9648,3 +9660,7 @@
#   /* Record the CPU type.  */
#+#if defined(OBJ_ELF) || defined(OBJ_MAYBE_ELF)
#   mach = ilp32_p ? bfd_mach_aarch64_ilp32 : bfd_mach_aarch64;
#+#else
#+  mach = bfd_mach_aarch64;
#+#endif
#
#@@ -10209,2 +10225,3 @@
# /* ABIs.  */
#+#if defined (OBJ_ELF) || defined (OBJ_MAYBE_ELF)
# struct aarch64_option_abi_value_table
#@@ -10241,2 +10258,3 @@
# }
#+#endif
#
#EOF
#patch -ulbf gas/config/tc-aarch64.h << EOF
#@@ -171,3 +171,3 @@
#   int recorded;
#-#ifdef OBJ_ELF
#+#if defined (OBJ_ELF) || defined (OBJ_COFF)
#   /* If there is a mapping symbol at offset 0 in this frag,
#@@ -244,2 +244,30 @@
# 
#+#elif defined(TE_PEP)
#+# define GLOBAL_OFFSET_TABLE_NAME "__GLOBAL_OFFSET_TABLE_"
#+# define TC_SEGMENT_INFO_TYPE          struct aarch64_segment_info_type
#+
#+/* This is not really an alignment operation, but it's something we
#+   need to do at the same time: whenever we are figuring out the
#+   alignment for data, we should check whether a \$d symbol is
#+   necessary.  */
#+# define md_cons_align(nbytes)         mapping_state (MAP_DATA)
#+
#+enum mstate
#+{
#+  MAP_UNDEFINED = 0, /* Must be zero, for seginfo in new sections.  */
#+  MAP_DATA,
#+  MAP_INSN,
#+};
#+
#+void mapping_state (enum mstate);
#+
#+struct aarch64_segment_info_type
#+{
#+  const char *last_file;
#+  unsigned last_line;
#+  enum mstate mapstate;
#+  unsigned int marked_pr_dependency;
#+  aarch64_instr_sequence insn_sequence;
#+};
#+
# #else /* Not OBJ_ELF.  */
#@@ -276,3 +304,3 @@
# 
#-#ifdef TE_PE
#+#if 0 /* #ifdef TE_PE */
# 
#EOF
#patch -ulbf gas/configure.tgt << EOF
#@@ -136,2 +136,3 @@
#   aarch64*-*-netbsd*)                  fmt=elf em=nbsd;;
#+  aarch64*-*-pe* | aarch64*-*-mingw*)  fmt=coff em=pep ;;
# 
#EOF
#patch -ulbf ld/Makefile.am << EOF
#@@ -390,2 +390,3 @@
#        eaarch64linuxb.c \\
#+       eaarch64pe.c \\
#        eelf32_x86_64.c \\
#EOF
#patch -ulbf ld/Makefile.in << EOF
#@@ -531,2 +531,3 @@
# psdir = @psdir@
#+runstatedir = @runstatedir@
# sbindir = @sbindir@
#@@ -886,2 +887,3 @@
#        eaarch64linuxb.c \\
#+       eaarch64pe.c \\
#        eelf32_x86_64.c \\
#@@ -1257,2 +1259,3 @@
# @AMDEP_TRUE@@am__include@ @am__quote@./\$(DEPDIR)/eaarch64linuxb.Po@am__quote@
#+@AMDEP_TRUE@@am__include@ @am__quote@./\$(DEPDIR)/eaarch64pe.Po@am__quote@
# @AMDEP_TRUE@@am__include@ @am__quote@./\$(DEPDIR)/eaix5ppc.Po@am__quote@
#EOF
#patch -ulbf ld/configure.tgt << EOF
#@@ -89,2 +89,6 @@
#                        ;;
#+aarch64-*-pe | aarch64-*-mingw*)
#+                       targ_emul=aarch64pe
#+                       targ_extra_ofiles="deffilep.o pep-dll-aarch64.o"
#+                       ;;
# aarch64-*-cloudabi*)   targ_emul=aarch64cloudabi
#@@ -1044,3 +1048,3 @@
#                        targ_extra_emuls=i386pe ;
#-                       targ_extra_ofiles="deffilep.o pep-dll.o pe-dll.o"
#+                       targ_extra_ofiles="deffilep.o pep-dll-x86_64.o pe-dll.o"
#                        ;;
#EOF
#cat > ld/emulparams/aarch64pe.sh << EOF
#ARCH="aarch64"
#SCRIPT_NAME=pep
#OUTPUT_FORMAT="pei-aarch64"
#RELOCATEABLE_OUTPUT_FORMAT="pe-aarch64"
#TEMPLATE_NAME=pep
#SUBSYSTEM=PE_DEF_SUBSYSTEM
#INITIAL_SYMBOL_CHAR=\\"_\\"
#TARGET_PAGE_SIZE=0x1000
#GENERATE_AUTO_IMPORT_SCRIPT=1
#EOF
#patch -ulbf ld/emultempl/pep.em << EOF
#@@ -3,5 +3,5 @@
# if [ -z "\$MACHINE" ]; then
#-  OUTPUT_ARCH=\${ARCH}
#+ OUTPUT_ARCH=\${ARCH}
# else
#-  OUTPUT_ARCH=\${ARCH}:\${MACHINE}
#+ OUTPUT_ARCH=\${ARCH}:\${MACHINE}
# fi
#@@ -9,10 +9,10 @@
# case \${target} in
#-  *-*-cygwin*)
#-    move_default_addr_high=1
#-    cygwin_behavior=1
#-    ;;
#-  *)
#-    move_default_addr_high=0;
#-    cygwin_behavior=0;
#-    ;;
#+ *-*-cygwin*)
#+ move_default_addr_high=1
#+ cygwin_behavior=1
#+ ;;
#+ *)
#+ move_default_addr_high=0;
#+ cygwin_behavior=0;
#+ ;;
# esac
#@@ -23,20 +23,20 @@
# /* Copyright (C) 2006-2022 Free Software Foundation, Inc.
#-   Written by Kai Tietz, OneVision Software GmbH&CoKg.
#+ Written by Kai Tietz, OneVision Software GmbH&CoKg.
# 
#-   This file is part of the GNU Binutils.
#+ This file is part of the GNU Binutils.
# 
#-   This program is free software; you can redistribute it and/or modify
#-   it under the terms of the GNU General Public License as published by
#-   the Free Software Foundation; either version 3 of the License, or
#-   (at your option) any later version.
#-
#-   This program is distributed in the hope that it will be useful,
#-   but WITHOUT ANY WARRANTY; without even the implied warranty of
#-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#-   GNU General Public License for more details.
#-
#-   You should have received a copy of the GNU General Public License
#-   along with this program; if not, write to the Free Software
#-   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
#-   MA 02110-1301, USA.  */
#+ This program is free software; you can redistribute it and/or modify
#+ it under the terms of the GNU General Public License as published by
#+ the Free Software Foundation; either version 3 of the License, or
#+ (at your option) any later version.
#+
#+ This program is distributed in the hope that it will be useful,
#+ but WITHOUT ANY WARRANTY; without even the implied warranty of
#+ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#+ GNU General Public License for more details.
#+
#+ You should have received a copy of the GNU General Public License
#+ along with this program; if not, write to the Free Software
#+ Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
#+ MA 02110-1301, USA.  */
# 
#@@ -50,3 +50,7 @@
# #define COFF_WITH_PE
#+#ifdef TARGET_IS_aarch64pe
#+#define COFF_WITH_peAArch64
#+#elif defined TARGET_IS_i386pep
# #define COFF_WITH_pex64
#+#endif
# 
#@@ -73,4 +77,8 @@
# /* FIXME: See bfd/peXXigen.c for why we include an architecture specific
#-   header in generic PE code.  */
#+ header in generic PE code.  */
#+#ifdef COFF_WITH_pex64
# #include "coff/x86_64.h"
#+#elif defined COFF_WITH_peAArch64
#+#include "coff/aarch64.h"
#+#endif
# #include "coff/pe.h"
#@@ -78,3 +86,3 @@
# /* FIXME: These are BFD internal header files, and we should not be
#-   using it here.  */
#+ using it here.  */
# #include "../bfd/libcoff.h"
#@@ -91,5 +99,5 @@
# /* Permit the emulation parameters to override the default section
#-   alignment by setting OVERRIDE_SECTION_ALIGNMENT.  FIXME: This makes
#-   it seem that include/coff/internal.h should not define
#-   PE_DEF_SECTION_ALIGNMENT.  */
#+ alignment by setting OVERRIDE_SECTION_ALIGNMENT.  FIXME: This makes
#+ it seem that include/coff/internal.h should not define
#+ PE_DEF_SECTION_ALIGNMENT.  */
# #if PE_DEF_SECTION_ALIGNMENT != \${OVERRIDE_SECTION_ALIGNMENT:-PE_DEF_SECTION_ALIGNMENT}
#@@ -104,5 +112,5 @@
# #define DEFAULT_DLL_CHARACTERISTICS    (\${cygwin_behavior} ? 0 : \\
#-                                          IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE \\
#-                                        | IMAGE_DLL_CHARACTERISTICS_HIGH_ENTROPY_VA \\
#-                                        | IMAGE_DLL_CHARACTERISTICS_NX_COMPAT)
#+       IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE \\
#+       | IMAGE_DLL_CHARACTERISTICS_HIGH_ENTROPY_VA \\
#+ | IMAGE_DLL_CHARACTERISTICS_NX_COMPAT)
# 
#@@ -112,16 +120,16 @@
# #define NT_EXE_IMAGE_BASE \\
#-  ((bfd_vma) (\${move_default_addr_high} ? 0x100400000LL \\
#-                                       : 0x140000000LL))
#+ ((bfd_vma) (\${move_default_addr_high} ? 0x100400000LL \\
#+       : 0x140000000LL))
# #undef NT_DLL_IMAGE_BASE
# #define NT_DLL_IMAGE_BASE \\
#-  ((bfd_vma) (\${move_default_addr_high} ? 0x400000000LL \\
#-                                       : 0x180000000LL))
#+ ((bfd_vma) (\${move_default_addr_high} ? 0x400000000LL \\
#+       : 0x180000000LL))
# #undef NT_DLL_AUTO_IMAGE_BASE
# #define NT_DLL_AUTO_IMAGE_BASE \\
#-  ((bfd_vma) (\${move_default_addr_high} ? 0x400000000LL \\
#-                                       : 0x1C0000000LL))
#+ ((bfd_vma) (\${move_default_addr_high} ? 0x400000000LL \\
#+       : 0x1C0000000LL))
# #undef NT_DLL_AUTO_IMAGE_MASK
# #define NT_DLL_AUTO_IMAGE_MASK \\
#-  ((bfd_vma) (\${move_default_addr_high} ? 0x1ffff0000LL \\
#-                                       : 0x1ffff0000LL))
#+ ((bfd_vma) (\${move_default_addr_high} ? 0x1ffff0000LL \\
#+       : 0x1ffff0000LL))
# #else
#@@ -129,16 +137,16 @@
# #define NT_EXE_IMAGE_BASE \\
#-  ((bfd_vma) (\${move_default_addr_high} ? 0x100010000LL \\
#-                                       : 0x10000LL))
#+ ((bfd_vma) (\${move_default_addr_high} ? 0x100010000LL \\
#+       : 0x10000LL))
# #undef NT_DLL_IMAGE_BASE
# #define NT_DLL_IMAGE_BASE \\
#-  ((bfd_vma) (\${move_default_addr_high} ? 0x110000000LL \\
#-                                       : 0x10000000LL))
#+ ((bfd_vma) (\${move_default_addr_high} ? 0x110000000LL \\
#+       : 0x10000000LL))
# #undef NT_DLL_AUTO_IMAGE_BASE
# #define NT_DLL_AUTO_IMAGE_BASE \\
#-  ((bfd_vma) (\${move_default_addr_high} ? 0x120000000LL \\
#-                                       : 0x61300000LL))
#+ ((bfd_vma) (\${move_default_addr_high} ? 0x120000000LL \\
#+       : 0x61300000LL))
# #undef NT_DLL_AUTO_IMAGE_MASK
# #define NT_DLL_AUTO_IMAGE_MASK \\
#-  ((bfd_vma) (\${move_default_addr_high} ? 0x0ffff0000LL \\
#-                                       : 0x0ffc0000LL))
#+ ((bfd_vma) (\${move_default_addr_high} ? 0x0ffff0000LL \\
#+       : 0x0ffc0000LL))
# #undef  PE_DEF_SECTION_ALIGNMENT
#@@ -171,12 +179,12 @@
# {
#-  int u = 0;
#-  if (pep_leading_underscore != -1)
#-    return pep_leading_underscore;
#-  if (!bfd_get_target_info ("\${OUTPUT_FORMAT}", NULL, NULL, &u, NULL))
#-    bfd_get_target_info ("\${RELOCATEABLE_OUTPUT_FORMAT}", NULL, NULL, &u, NULL);
#-
#-  if (u == -1)
#-    abort ();
#-  pep_leading_underscore = (u != 0 ? 1 : 0);
#-  return pep_leading_underscore;
#+ int u = 0;
#+ if (pep_leading_underscore != -1)
#+ return pep_leading_underscore;
#+ if (!bfd_get_target_info ("\${OUTPUT_FORMAT}", NULL, NULL, &u, NULL))
#+ bfd_get_target_info ("\${RELOCATEABLE_OUTPUT_FORMAT}", NULL, NULL, &u, NULL);
#+
#+ if (u == -1)
#+ abort ();
#+ pep_leading_underscore = (u != 0 ? 1 : 0);
#+ return pep_leading_underscore;
# }
#@@ -187,10 +195,10 @@
# {
#-  is_underscoring ();
#-  ldfile_set_output_arch ("\${OUTPUT_ARCH}", bfd_arch_\`echo \${ARCH} | sed -e 's/:.*//'\`);
#-  output_filename = "\${EXECUTABLE_NAME:-a.exe}";
#+ is_underscoring ();
#+ ldfile_set_output_arch ("\${OUTPUT_ARCH}", bfd_arch_\`echo \${ARCH} | sed -e 's/:.*//'\`);
#+ output_filename = "\${EXECUTABLE_NAME:-a.exe}";
# #ifdef DLL_SUPPORT
#-  input_flags.dynamic = true;
#-  config.has_shared = 1;
#-  link_info.pei386_auto_import = 1;
#-  link_info.pei386_runtime_pseudo_reloc = 2; /* Use by default version 2.  */
#+ input_flags.dynamic = true;
#+ config.has_shared = 1;
#+ link_info.pei386_auto_import = 1;
#+ link_info.pei386_runtime_pseudo_reloc = 2; /* Use by default version 2.  */
# #endif
#@@ -203,67 +211,67 @@
# {
#-  OPTION_BASE_FILE = 300 + 1,
#-  OPTION_DLL,
#-  OPTION_FILE_ALIGNMENT,
#-  OPTION_IMAGE_BASE,
#-  OPTION_MAJOR_IMAGE_VERSION,
#-  OPTION_MAJOR_OS_VERSION,
#-  OPTION_MAJOR_SUBSYSTEM_VERSION,
#-  OPTION_MINOR_IMAGE_VERSION,
#-  OPTION_MINOR_OS_VERSION,
#-  OPTION_MINOR_SUBSYSTEM_VERSION,
#-  OPTION_SECTION_ALIGNMENT,
#-  OPTION_STACK,
#-  OPTION_SUBSYSTEM,
#-  OPTION_HEAP,
#-  OPTION_SUPPORT_OLD_CODE,
#-  OPTION_OUT_DEF,
#-  OPTION_EXPORT_ALL,
#-  OPTION_EXCLUDE_SYMBOLS,
#-  OPTION_EXCLUDE_ALL_SYMBOLS,
#-  OPTION_KILL_ATS,
#-  OPTION_STDCALL_ALIASES,
#-  OPTION_ENABLE_STDCALL_FIXUP,
#-  OPTION_DISABLE_STDCALL_FIXUP,
#-  OPTION_WARN_DUPLICATE_EXPORTS,
#-  OPTION_IMP_COMPAT,
#-  OPTION_ENABLE_AUTO_IMAGE_BASE,
#-  OPTION_DISABLE_AUTO_IMAGE_BASE,
#-  OPTION_DLL_SEARCH_PREFIX,
#-  OPTION_NO_DEFAULT_EXCLUDES,
#-  OPTION_DLL_ENABLE_AUTO_IMPORT,
#-  OPTION_DLL_DISABLE_AUTO_IMPORT,
#-  OPTION_ENABLE_EXTRA_PE_DEBUG,
#-  OPTION_EXCLUDE_LIBS,
#-  OPTION_DLL_ENABLE_RUNTIME_PSEUDO_RELOC,
#-  OPTION_DLL_DISABLE_RUNTIME_PSEUDO_RELOC,
#-  OPTION_DLL_ENABLE_RUNTIME_PSEUDO_RELOC_V2,
#-  OPTION_EXCLUDE_MODULES_FOR_IMPLIB,
#-  OPTION_USE_NUL_PREFIXED_IMPORT_TABLES,
#-  OPTION_NO_LEADING_UNDERSCORE,
#-  OPTION_LEADING_UNDERSCORE,
#-  OPTION_ENABLE_LONG_SECTION_NAMES,
#-  OPTION_DISABLE_LONG_SECTION_NAMES,
#-  OPTION_HIGH_ENTROPY_VA,
#-  OPTION_DYNAMIC_BASE,
#-  OPTION_FORCE_INTEGRITY,
#-  OPTION_NX_COMPAT,
#-  OPTION_NO_ISOLATION,
#-  OPTION_NO_SEH,
#-  OPTION_NO_BIND,
#-  OPTION_WDM_DRIVER,
#-  OPTION_INSERT_TIMESTAMP,
#-  OPTION_NO_INSERT_TIMESTAMP,
#-  OPTION_TERMINAL_SERVER_AWARE,
#-  OPTION_BUILD_ID,
#-  OPTION_ENABLE_RELOC_SECTION,
#-  OPTION_DISABLE_RELOC_SECTION,
#-  OPTION_DISABLE_HIGH_ENTROPY_VA,
#-  OPTION_DISABLE_DYNAMIC_BASE,
#-  OPTION_DISABLE_FORCE_INTEGRITY,
#-  OPTION_DISABLE_NX_COMPAT,
#-  OPTION_DISABLE_NO_ISOLATION,
#-  OPTION_DISABLE_NO_SEH,
#-  OPTION_DISABLE_NO_BIND,
#-  OPTION_DISABLE_WDM_DRIVER,
#-  OPTION_DISABLE_TERMINAL_SERVER_AWARE
#+ OPTION_BASE_FILE = 300 + 1,
#+ OPTION_DLL,
#+ OPTION_FILE_ALIGNMENT,
#+ OPTION_IMAGE_BASE,
#+ OPTION_MAJOR_IMAGE_VERSION,
#+ OPTION_MAJOR_OS_VERSION,
#+ OPTION_MAJOR_SUBSYSTEM_VERSION,
#+ OPTION_MINOR_IMAGE_VERSION,
#+ OPTION_MINOR_OS_VERSION,
#+ OPTION_MINOR_SUBSYSTEM_VERSION,
#+ OPTION_SECTION_ALIGNMENT,
#+ OPTION_STACK,
#+ OPTION_SUBSYSTEM,
#+ OPTION_HEAP,
#+ OPTION_SUPPORT_OLD_CODE,
#+ OPTION_OUT_DEF,
#+ OPTION_EXPORT_ALL,
#+ OPTION_EXCLUDE_SYMBOLS,
#+ OPTION_EXCLUDE_ALL_SYMBOLS,
#+ OPTION_KILL_ATS,
#+ OPTION_STDCALL_ALIASES,
#+ OPTION_ENABLE_STDCALL_FIXUP,
#+ OPTION_DISABLE_STDCALL_FIXUP,
#+ OPTION_WARN_DUPLICATE_EXPORTS,
#+ OPTION_IMP_COMPAT,
#+ OPTION_ENABLE_AUTO_IMAGE_BASE,
#+ OPTION_DISABLE_AUTO_IMAGE_BASE,
#+ OPTION_DLL_SEARCH_PREFIX,
#+ OPTION_NO_DEFAULT_EXCLUDES,
#+ OPTION_DLL_ENABLE_AUTO_IMPORT,
#+ OPTION_DLL_DISABLE_AUTO_IMPORT,
#+ OPTION_ENABLE_EXTRA_PE_DEBUG,
#+ OPTION_EXCLUDE_LIBS,
#+ OPTION_DLL_ENABLE_RUNTIME_PSEUDO_RELOC,
#+ OPTION_DLL_DISABLE_RUNTIME_PSEUDO_RELOC,
#+ OPTION_DLL_ENABLE_RUNTIME_PSEUDO_RELOC_V2,
#+ OPTION_EXCLUDE_MODULES_FOR_IMPLIB,
#+ OPTION_USE_NUL_PREFIXED_IMPORT_TABLES,
#+ OPTION_NO_LEADING_UNDERSCORE,
#+ OPTION_LEADING_UNDERSCORE,
#+ OPTION_ENABLE_LONG_SECTION_NAMES,
#+ OPTION_DISABLE_LONG_SECTION_NAMES,
#+ OPTION_HIGH_ENTROPY_VA,
#+ OPTION_DYNAMIC_BASE,
#+ OPTION_FORCE_INTEGRITY,
#+ OPTION_NX_COMPAT,
#+ OPTION_NO_ISOLATION,
#+ OPTION_NO_SEH,
#+ OPTION_NO_BIND,
#+ OPTION_WDM_DRIVER,
#+ OPTION_INSERT_TIMESTAMP,
#+ OPTION_NO_INSERT_TIMESTAMP,
#+ OPTION_TERMINAL_SERVER_AWARE,
#+ OPTION_BUILD_ID,
#+ OPTION_ENABLE_RELOC_SECTION,
#+ OPTION_DISABLE_RELOC_SECTION,
#+ OPTION_DISABLE_HIGH_ENTROPY_VA,
#+ OPTION_DISABLE_DYNAMIC_BASE,
#+ OPTION_DISABLE_FORCE_INTEGRITY,
#+ OPTION_DISABLE_NX_COMPAT,
#+ OPTION_DISABLE_NO_ISOLATION,
#+ OPTION_DISABLE_NO_SEH,
#+ OPTION_DISABLE_NO_BIND,
#+ OPTION_DISABLE_WDM_DRIVER,
#+ OPTION_DISABLE_TERMINAL_SERVER_AWARE
# };
#@@ -272,92 +280,92 @@
# gld\${EMULATION_NAME}_add_options
#-  (int ns ATTRIBUTE_UNUSED,
#-   char **shortopts ATTRIBUTE_UNUSED,
#-   int nl,
#-   struct option **longopts,
#-   int nrl ATTRIBUTE_UNUSED,
#-   struct option **really_longopts ATTRIBUTE_UNUSED)
#-{
#-  static const struct option xtra_long[] =
#-  {
#-    /* PE options */
#-    {"base-file", required_argument, NULL, OPTION_BASE_FILE},
#-    {"dll", no_argument, NULL, OPTION_DLL},
#-    {"file-alignment", required_argument, NULL, OPTION_FILE_ALIGNMENT},
#-    {"heap", required_argument, NULL, OPTION_HEAP},
#-    {"image-base", required_argument, NULL, OPTION_IMAGE_BASE},
#-    {"major-image-version", required_argument, NULL, OPTION_MAJOR_IMAGE_VERSION},
#-    {"major-os-version", required_argument, NULL, OPTION_MAJOR_OS_VERSION},
#-    {"major-subsystem-version", required_argument, NULL, OPTION_MAJOR_SUBSYSTEM_VERSION},
#-    {"minor-image-version", required_argument, NULL, OPTION_MINOR_IMAGE_VERSION},
#-    {"minor-os-version", required_argument, NULL, OPTION_MINOR_OS_VERSION},
#-    {"minor-subsystem-version", required_argument, NULL, OPTION_MINOR_SUBSYSTEM_VERSION},
#-    {"section-alignment", required_argument, NULL, OPTION_SECTION_ALIGNMENT},
#-    {"stack", required_argument, NULL, OPTION_STACK},
#-    {"subsystem", required_argument, NULL, OPTION_SUBSYSTEM},
#-    {"support-old-code", no_argument, NULL, OPTION_SUPPORT_OLD_CODE},
#-    {"use-nul-prefixed-import-tables", no_argument, NULL,
#-     OPTION_USE_NUL_PREFIXED_IMPORT_TABLES},
#-    {"no-leading-underscore", no_argument, NULL, OPTION_NO_LEADING_UNDERSCORE},
#-    {"leading-underscore", no_argument, NULL, OPTION_LEADING_UNDERSCORE},
#+ (int ns ATTRIBUTE_UNUSED,
#+ char **shortopts ATTRIBUTE_UNUSED,
#+ int nl,
#+ struct option **longopts,
#+ int nrl ATTRIBUTE_UNUSED,
#+ struct option **really_longopts ATTRIBUTE_UNUSED)
#+{
#+ static const struct option xtra_long[] =
#+ {
#+ /* PE options */
#+ {"base-file", required_argument, NULL, OPTION_BASE_FILE},
#+ {"dll", no_argument, NULL, OPTION_DLL},
#+ {"file-alignment", required_argument, NULL, OPTION_FILE_ALIGNMENT},
#+ {"heap", required_argument, NULL, OPTION_HEAP},
#+ {"image-base", required_argument, NULL, OPTION_IMAGE_BASE},
#+ {"major-image-version", required_argument, NULL, OPTION_MAJOR_IMAGE_VERSION},
#+ {"major-os-version", required_argument, NULL, OPTION_MAJOR_OS_VERSION},
#+ {"major-subsystem-version", required_argument, NULL, OPTION_MAJOR_SUBSYSTEM_VERSION},
#+ {"minor-image-version", required_argument, NULL, OPTION_MINOR_IMAGE_VERSION},
#+ {"minor-os-version", required_argument, NULL, OPTION_MINOR_OS_VERSION},
#+ {"minor-subsystem-version", required_argument, NULL, OPTION_MINOR_SUBSYSTEM_VERSION},
#+ {"section-alignment", required_argument, NULL, OPTION_SECTION_ALIGNMENT},
#+ {"stack", required_argument, NULL, OPTION_STACK},
#+ {"subsystem", required_argument, NULL, OPTION_SUBSYSTEM},
#+ {"support-old-code", no_argument, NULL, OPTION_SUPPORT_OLD_CODE},
#+ {"use-nul-prefixed-import-tables", no_argument, NULL,
#+ OPTION_USE_NUL_PREFIXED_IMPORT_TABLES},
#+ {"no-leading-underscore", no_argument, NULL, OPTION_NO_LEADING_UNDERSCORE},
#+ {"leading-underscore", no_argument, NULL, OPTION_LEADING_UNDERSCORE},
# #ifdef DLL_SUPPORT
#-    /* getopt allows abbreviations, so we do this to stop it
#-       from treating -o as an abbreviation for this option.  */
#-    {"output-def", required_argument, NULL, OPTION_OUT_DEF},
#-    {"output-def", required_argument, NULL, OPTION_OUT_DEF},
#-    {"export-all-symbols", no_argument, NULL, OPTION_EXPORT_ALL},
#-    {"exclude-symbols", required_argument, NULL, OPTION_EXCLUDE_SYMBOLS},
#-    {"exclude-all-symbols", no_argument, NULL, OPTION_EXCLUDE_ALL_SYMBOLS},
#-    {"exclude-libs", required_argument, NULL, OPTION_EXCLUDE_LIBS},
#-    {"exclude-modules-for-implib", required_argument, NULL, OPTION_EXCLUDE_MODULES_FOR_IMPLIB},
#-    {"kill-at", no_argument, NULL, OPTION_KILL_ATS},
#-    {"add-stdcall-alias", no_argument, NULL, OPTION_STDCALL_ALIASES},
#-    {"enable-stdcall-fixup", no_argument, NULL, OPTION_ENABLE_STDCALL_FIXUP},
#-    {"disable-stdcall-fixup", no_argument, NULL, OPTION_DISABLE_STDCALL_FIXUP},
#-    {"warn-duplicate-exports", no_argument, NULL, OPTION_WARN_DUPLICATE_EXPORTS},
#-    /* getopt() allows abbreviations, so we do this to stop it from
#-       treating -c as an abbreviation for these --compat-implib.  */
#-    {"compat-implib", no_argument, NULL, OPTION_IMP_COMPAT},
#-    {"compat-implib", no_argument, NULL, OPTION_IMP_COMPAT},
#-    {"enable-auto-image-base", no_argument, NULL, OPTION_ENABLE_AUTO_IMAGE_BASE},
#-    {"disable-auto-image-base", no_argument, NULL, OPTION_DISABLE_AUTO_IMAGE_BASE},
#-    {"dll-search-prefix", required_argument, NULL, OPTION_DLL_SEARCH_PREFIX},
#-    {"no-default-excludes", no_argument, NULL, OPTION_NO_DEFAULT_EXCLUDES},
#-    {"enable-auto-import", no_argument, NULL, OPTION_DLL_ENABLE_AUTO_IMPORT},
#-    {"disable-auto-import", no_argument, NULL, OPTION_DLL_DISABLE_AUTO_IMPORT},
#-    {"enable-extra-pep-debug", no_argument, NULL, OPTION_ENABLE_EXTRA_PE_DEBUG},
#-    {"enable-runtime-pseudo-reloc", no_argument, NULL, OPTION_DLL_ENABLE_RUNTIME_PSEUDO_RELOC},
#-    {"disable-runtime-pseudo-reloc", no_argument, NULL, OPTION_DLL_DISABLE_RUNTIME_PSEUDO_RELOC},
#-    {"enable-runtime-pseudo-reloc-v2", no_argument, NULL, OPTION_DLL_ENABLE_RUNTIME_PSEUDO_RELOC_V2},
#-#endif
#-    {"enable-long-section-names", no_argument, NULL, OPTION_ENABLE_LONG_SECTION_NAMES},
#-    {"disable-long-section-names", no_argument, NULL, OPTION_DISABLE_LONG_SECTION_NAMES},
#-    {"high-entropy-va", no_argument, NULL, OPTION_HIGH_ENTROPY_VA},
#-    {"dynamicbase",no_argument, NULL, OPTION_DYNAMIC_BASE},
#-    {"forceinteg", no_argument, NULL, OPTION_FORCE_INTEGRITY},
#-    {"nxcompat", no_argument, NULL, OPTION_NX_COMPAT},
#-    {"no-isolation", no_argument, NULL, OPTION_NO_ISOLATION},
#-    {"no-seh", no_argument, NULL, OPTION_NO_SEH},
#-    {"no-bind", no_argument, NULL, OPTION_NO_BIND},
#-    {"wdmdriver", no_argument, NULL, OPTION_WDM_DRIVER},
#-    {"tsaware", no_argument, NULL, OPTION_TERMINAL_SERVER_AWARE},
#-    {"insert-timestamp", no_argument, NULL, OPTION_INSERT_TIMESTAMP},
#-    {"no-insert-timestamp", no_argument, NULL, OPTION_NO_INSERT_TIMESTAMP},
#-    {"build-id", optional_argument, NULL, OPTION_BUILD_ID},
#-    {"enable-reloc-section", no_argument, NULL, OPTION_ENABLE_RELOC_SECTION},
#-    {"disable-reloc-section", no_argument, NULL, OPTION_DISABLE_RELOC_SECTION},
#-    {"disable-high-entropy-va", no_argument, NULL, OPTION_DISABLE_HIGH_ENTROPY_VA},
#-    {"disable-dynamicbase",no_argument, NULL, OPTION_DISABLE_DYNAMIC_BASE},
#-    {"disable-forceinteg", no_argument, NULL, OPTION_DISABLE_FORCE_INTEGRITY},
#-    {"disable-nxcompat", no_argument, NULL, OPTION_DISABLE_NX_COMPAT},
#-    {"disable-no-isolation", no_argument, NULL, OPTION_DISABLE_NO_ISOLATION},
#-    {"disable-no-seh", no_argument, NULL, OPTION_DISABLE_NO_SEH},
#-    {"disable-no-bind", no_argument, NULL, OPTION_DISABLE_NO_BIND},
#-    {"disable-wdmdriver", no_argument, NULL, OPTION_DISABLE_WDM_DRIVER},
#-    {"disable-tsaware", no_argument, NULL, OPTION_DISABLE_TERMINAL_SERVER_AWARE},
#-    {NULL, no_argument, NULL, 0}
#-  };
#-
#-  *longopts
#-    = xrealloc (*longopts, nl * sizeof (struct option) + sizeof (xtra_long));
#-  memcpy (*longopts + nl, &xtra_long, sizeof (xtra_long));
#+ /* getopt allows abbreviations, so we do this to stop it
#+ from treating -o as an abbreviation for this option.  */
#+ {"output-def", required_argument, NULL, OPTION_OUT_DEF},
#+ {"output-def", required_argument, NULL, OPTION_OUT_DEF},
#+ {"export-all-symbols", no_argument, NULL, OPTION_EXPORT_ALL},
#+ {"exclude-symbols", required_argument, NULL, OPTION_EXCLUDE_SYMBOLS},
#+ {"exclude-all-symbols", no_argument, NULL, OPTION_EXCLUDE_ALL_SYMBOLS},
#+ {"exclude-libs", required_argument, NULL, OPTION_EXCLUDE_LIBS},
#+ {"exclude-modules-for-implib", required_argument, NULL, OPTION_EXCLUDE_MODULES_FOR_IMPLIB},
#+ {"kill-at", no_argument, NULL, OPTION_KILL_ATS},
#+ {"add-stdcall-alias", no_argument, NULL, OPTION_STDCALL_ALIASES},
#+ {"enable-stdcall-fixup", no_argument, NULL, OPTION_ENABLE_STDCALL_FIXUP},
#+ {"disable-stdcall-fixup", no_argument, NULL, OPTION_DISABLE_STDCALL_FIXUP},
#+ {"warn-duplicate-exports", no_argument, NULL, OPTION_WARN_DUPLICATE_EXPORTS},
#+ /* getopt() allows abbreviations, so we do this to stop it from
#+ treating -c as an abbreviation for these --compat-implib.  */
#+ {"compat-implib", no_argument, NULL, OPTION_IMP_COMPAT},
#+ {"compat-implib", no_argument, NULL, OPTION_IMP_COMPAT},
#+ {"enable-auto-image-base", no_argument, NULL, OPTION_ENABLE_AUTO_IMAGE_BASE},
#+ {"disable-auto-image-base", no_argument, NULL, OPTION_DISABLE_AUTO_IMAGE_BASE},
#+ {"dll-search-prefix", required_argument, NULL, OPTION_DLL_SEARCH_PREFIX},
#+ {"no-default-excludes", no_argument, NULL, OPTION_NO_DEFAULT_EXCLUDES},
#+ {"enable-auto-import", no_argument, NULL, OPTION_DLL_ENABLE_AUTO_IMPORT},
#+ {"disable-auto-import", no_argument, NULL, OPTION_DLL_DISABLE_AUTO_IMPORT},
#+ {"enable-extra-pep-debug", no_argument, NULL, OPTION_ENABLE_EXTRA_PE_DEBUG},
#+ {"enable-runtime-pseudo-reloc", no_argument, NULL, OPTION_DLL_ENABLE_RUNTIME_PSEUDO_RELOC},
#+ {"disable-runtime-pseudo-reloc", no_argument, NULL, OPTION_DLL_DISABLE_RUNTIME_PSEUDO_RELOC},
#+ {"enable-runtime-pseudo-reloc-v2", no_argument, NULL, OPTION_DLL_ENABLE_RUNTIME_PSEUDO_RELOC_V2},
#+#endif
#+ {"enable-long-section-names", no_argument, NULL, OPTION_ENABLE_LONG_SECTION_NAMES},
#+ {"disable-long-section-names", no_argument, NULL, OPTION_DISABLE_LONG_SECTION_NAMES},
#+ {"high-entropy-va", no_argument, NULL, OPTION_HIGH_ENTROPY_VA},
#+ {"dynamicbase",no_argument, NULL, OPTION_DYNAMIC_BASE},
#+ {"forceinteg", no_argument, NULL, OPTION_FORCE_INTEGRITY},
#+ {"nxcompat", no_argument, NULL, OPTION_NX_COMPAT},
#+ {"no-isolation", no_argument, NULL, OPTION_NO_ISOLATION},
#+ {"no-seh", no_argument, NULL, OPTION_NO_SEH},
#+ {"no-bind", no_argument, NULL, OPTION_NO_BIND},
#+ {"wdmdriver", no_argument, NULL, OPTION_WDM_DRIVER},
#+ {"tsaware", no_argument, NULL, OPTION_TERMINAL_SERVER_AWARE},
#+ {"insert-timestamp", no_argument, NULL, OPTION_INSERT_TIMESTAMP},
#+ {"no-insert-timestamp", no_argument, NULL, OPTION_NO_INSERT_TIMESTAMP},
#+ {"build-id", optional_argument, NULL, OPTION_BUILD_ID},
#+ {"enable-reloc-section", no_argument, NULL, OPTION_ENABLE_RELOC_SECTION},
#+ {"disable-reloc-section", no_argument, NULL, OPTION_DISABLE_RELOC_SECTION},
#+ {"disable-high-entropy-va", no_argument, NULL, OPTION_DISABLE_HIGH_ENTROPY_VA},
#+ {"disable-dynamicbase",no_argument, NULL, OPTION_DISABLE_DYNAMIC_BASE},
#+ {"disable-forceinteg", no_argument, NULL, OPTION_DISABLE_FORCE_INTEGRITY},
#+ {"disable-nxcompat", no_argument, NULL, OPTION_DISABLE_NX_COMPAT},
#+ {"disable-no-isolation", no_argument, NULL, OPTION_DISABLE_NO_ISOLATION},
#+ {"disable-no-seh", no_argument, NULL, OPTION_DISABLE_NO_SEH},
#+ {"disable-no-bind", no_argument, NULL, OPTION_DISABLE_NO_BIND},
#+ {"disable-wdmdriver", no_argument, NULL, OPTION_DISABLE_WDM_DRIVER},
#+ {"disable-tsaware", no_argument, NULL, OPTION_DISABLE_TERMINAL_SERVER_AWARE},
#+ {NULL, no_argument, NULL, 0}
#+ };
#+
#+ *longopts
#+ = xrealloc (*longopts, nl * sizeof (struct option) + sizeof (xtra_long));
#+ memcpy (*longopts + nl, &xtra_long, sizeof (xtra_long));
# }
#@@ -365,3 +373,3 @@
# /* PE/WIN32; added routines to get the subsystem type, heap and/or stack
#-   parameters which may be input from the command line.  */
#+ parameters which may be input from the command line.  */
# 
#@@ -369,11 +377,11 @@
# {
#-  void *ptr;
#-  int size;
#-  bfd_vma value;
#-  char *symbol;
#-  int inited;
#-  /* FALSE for an assembly level symbol and TRUE for a C visible symbol.
#-     C visible symbols can be prefixed by underscore dependent on target's
#-     settings.  */
#-  bool is_c_symbol;
#+ void *ptr;
#+ int size;
#+ bfd_vma value;
#+ char *symbol;
#+ int inited;
#+ /* FALSE for an assembly level symbol and TRUE for a C visible symbol.
#+ C visible symbols can be prefixed by underscore dependent on target's
#+ settings.  */
#+ bool is_c_symbol;
# } definfo;
#@@ -381,4 +389,4 @@
# #define GET_INIT_SYMBOL_NAME(IDX) \\
#-  (init[(IDX)].symbol \\
#-   + ((!init[(IDX)].is_c_symbol || is_underscoring () == 1) ? 0 : 1))
#+ (init[(IDX)].symbol \\
#+ + ((!init[(IDX)].is_c_symbol || is_underscoring () == 1) ? 0 : 1))
# 
#@@ -386,3 +394,3 @@
# #define U(CSTR) \\
#-  ((is_underscoring () == 0) ? CSTR : "_" CSTR)
#+ ((is_underscoring () == 0) ? CSTR : "_" CSTR)
# 
#@@ -392,25 +400,25 @@
# {
#-  /* imagebase must be first */
#+ /* imagebase must be first */
# #define IMAGEBASEOFF 0
#-  D(ImageBase,"__image_base__", NT_EXE_IMAGE_BASE, false),
#+ D(ImageBase,"__image_base__", NT_EXE_IMAGE_BASE, false),
# #define DLLOFF 1
#-  {&dll, sizeof(dll), 0, "__dll__", 0, false},
#+ {&dll, sizeof(dll), 0, "__dll__", 0, false},
# #define MSIMAGEBASEOFF 2
#-  D(ImageBase, "___ImageBase", NT_EXE_IMAGE_BASE, true),
#-  D(SectionAlignment,"__section_alignment__", PE_DEF_SECTION_ALIGNMENT, false),
#-  D(FileAlignment,"__file_alignment__", PE_DEF_FILE_ALIGNMENT, false),
#-  D(MajorOperatingSystemVersion,"__major_os_version__", 4, false),
#-  D(MinorOperatingSystemVersion,"__minor_os_version__", 0, false),
#-  D(MajorImageVersion,"__major_image_version__", 0, false),
#-  D(MinorImageVersion,"__minor_image_version__", 0, false),
#-  D(MajorSubsystemVersion,"__major_subsystem_version__", 5, false),
#-  D(MinorSubsystemVersion,"__minor_subsystem_version__", 2, false),
#-  D(Subsystem,"__subsystem__", \${SUBSYSTEM}, false),
#-  D(SizeOfStackReserve,"__size_of_stack_reserve__", 0x200000, false),
#-  D(SizeOfStackCommit,"__size_of_stack_commit__", 0x1000, false),
#-  D(SizeOfHeapReserve,"__size_of_heap_reserve__", 0x100000, false),
#-  D(SizeOfHeapCommit,"__size_of_heap_commit__", 0x1000, false),
#-  D(LoaderFlags,"__loader_flags__", 0x0, false),
#-  D(DllCharacteristics, "__dll_characteristics__", DEFAULT_DLL_CHARACTERISTICS, false),
#-  { NULL, 0, 0, NULL, 0, false}
#+ D(ImageBase, "___ImageBase", NT_EXE_IMAGE_BASE, true),
#+ D(SectionAlignment,"__section_alignment__", PE_DEF_SECTION_ALIGNMENT, false),
#+ D(FileAlignment,"__file_alignment__", PE_DEF_FILE_ALIGNMENT, false),
#+ D(MajorOperatingSystemVersion,"__major_os_version__", 4, false),
#+ D(MinorOperatingSystemVersion,"__minor_os_version__", 0, false),
#+ D(MajorImageVersion,"__major_image_version__", 0, false),
#+ D(MinorImageVersion,"__minor_image_version__", 0, false),
#+ D(MajorSubsystemVersion,"__major_subsystem_version__", 5, false),
#+ D(MinorSubsystemVersion,"__minor_subsystem_version__", 2, false),
#+ D(Subsystem,"__subsystem__", \${SUBSYSTEM}, false),
#+ D(SizeOfStackReserve,"__size_of_stack_reserve__", 0x200000, false),
#+ D(SizeOfStackCommit,"__size_of_stack_commit__", 0x1000, false),
#+ D(SizeOfHeapReserve,"__size_of_heap_reserve__", 0x100000, false),
#+ D(SizeOfHeapCommit,"__size_of_heap_commit__", 0x1000, false),
#+ D(LoaderFlags,"__loader_flags__", 0x0, false),
#+ D(DllCharacteristics, "__dll_characteristics__", DEFAULT_DLL_CHARACTERISTICS, false),
#+ { NULL, 0, 0, NULL, 0, false}
# };
#@@ -421,73 +429,73 @@
# {
#-  fprintf (file, _("  --base_file <basefile>             Generate a base file for relocatable DLLs\\n"));
#-  fprintf (file, _("  --dll                              Set image base to the default for DLLs\\n"));
#-  fprintf (file, _("  --file-alignment <size>            Set file alignment\\n"));
#-  fprintf (file, _("  --heap <size>                      Set initial size of the heap\\n"));
#-  fprintf (file, _("  --image-base <address>             Set start address of the executable\\n"));
#-  fprintf (file, _("  --major-image-version <number>     Set version number of the executable\\n"));
#-  fprintf (file, _("  --major-os-version <number>        Set minimum required OS version\\n"));
#-  fprintf (file, _("  --major-subsystem-version <number> Set minimum required OS subsystem version\\n"));
#-  fprintf (file, _("  --minor-image-version <number>     Set revision number of the executable\\n"));
#-  fprintf (file, _("  --minor-os-version <number>        Set minimum required OS revision\\n"));
#-  fprintf (file, _("  --minor-subsystem-version <number> Set minimum required OS subsystem revision\\n"));
#-  fprintf (file, _("  --section-alignment <size>         Set section alignment\\n"));
#-  fprintf (file, _("  --stack <size>                     Set size of the initial stack\\n"));
#-  fprintf (file, _("  --subsystem <name>[:<version>]     Set required OS subsystem [& version]\\n"));
#-  fprintf (file, _("  --support-old-code                 Support interworking with old code\\n"));
#-  fprintf (file, _("  --[no-]leading-underscore          Set explicit symbol underscore prefix mode\\n"));
#-  fprintf (file, _("  --[no-]insert-timestamp            Use a real timestamp rather than zero (default)\\n"));
#-  fprintf (file, _("                                     This makes binaries non-deterministic\\n"));
#+ fprintf (file, _("  --base_file <basefile>             Generate a base file for relocatable DLLs\\n"));
#+ fprintf (file, _("  --dll                              Set image base to the default for DLLs\\n"));
#+ fprintf (file, _("  --file-alignment <size>            Set file alignment\\n"));
#+ fprintf (file, _("  --heap <size>                      Set initial size of the heap\\n"));
#+ fprintf (file, _("  --image-base <address>             Set start address of the executable\\n"));
#+ fprintf (file, _("  --major-image-version <number>     Set version number of the executable\\n"));
#+ fprintf (file, _("  --major-os-version <number>        Set minimum required OS version\\n"));
#+ fprintf (file, _("  --major-subsystem-version <number> Set minimum required OS subsystem version\\n"));
#+ fprintf (file, _("  --minor-image-version <number>     Set revision number of the executable\\n"));
#+ fprintf (file, _("  --minor-os-version <number>        Set minimum required OS revision\\n"));
#+ fprintf (file, _("  --minor-subsystem-version <number> Set minimum required OS subsystem revision\\n"));
#+ fprintf (file, _("  --section-alignment <size>         Set section alignment\\n"));
#+ fprintf (file, _("  --stack <size>                     Set size of the initial stack\\n"));
#+ fprintf (file, _("  --subsystem <name>[:<version>]     Set required OS subsystem [& version]\\n"));
#+ fprintf (file, _("  --support-old-code                 Support interworking with old code\\n"));
#+ fprintf (file, _("  --[no-]leading-underscore          Set explicit symbol underscore prefix mode\\n"));
#+ fprintf (file, _("  --[no-]insert-timestamp            Use a real timestamp rather than zero (default)\\n"));
#+ fprintf (file, _("                                     This makes binaries non-deterministic\\n"));
# #ifdef DLL_SUPPORT
#-  fprintf (file, _("  --add-stdcall-alias                Export symbols with and without @nn\\n"));
#-  fprintf (file, _("  --disable-stdcall-fixup            Don't link _sym to _sym@nn\\n"));
#-  fprintf (file, _("  --enable-stdcall-fixup             Link _sym to _sym@nn without warnings\\n"));
#-  fprintf (file, _("  --exclude-symbols sym,sym,...      Exclude symbols from automatic export\\n"));
#-  fprintf (file, _("  --exclude-all-symbols              Exclude all symbols from automatic export\\n"));
#-  fprintf (file, _("  --exclude-libs lib,lib,...         Exclude libraries from automatic export\\n"));
#-  fprintf (file, _("  --exclude-modules-for-implib mod,mod,...\\n"));
#-  fprintf (file, _("                                     Exclude objects, archive members from auto\\n"));
#-  fprintf (file, _("                                     export, place into import library instead\\n"));
#-  fprintf (file, _("  --export-all-symbols               Automatically export all globals to DLL\\n"));
#-  fprintf (file, _("  --kill-at                          Remove @nn from exported symbols\\n"));
#-  fprintf (file, _("  --output-def <file>                Generate a .DEF file for the built DLL\\n"));
#-  fprintf (file, _("  --warn-duplicate-exports           Warn about duplicate exports\\n"));
#-  fprintf (file, _("  --compat-implib                    Create backward compatible import libs;\\n\\
#-                                       create __imp_<SYMBOL> as well\\n"));
#-  fprintf (file, _("  --enable-auto-image-base           Automatically choose image base for DLLs\\n\\
#-                                       unless user specifies one\\n"));
#-  fprintf (file, _("  --disable-auto-image-base          Do not auto-choose image base (default)\\n"));
#-  fprintf (file, _("  --dll-search-prefix=<string>       When linking dynamically to a dll without\\n\\
#-                                       an importlib, use <string><basename>.dll\\n\\
#-                                       in preference to lib<basename>.dll \\n"));
#-  fprintf (file, _("  --enable-auto-import               Do sophisticated linking of _sym to\\n\\
#-                                       __imp_sym for DATA references\\n"));
#-  fprintf (file, _("  --disable-auto-import              Do not auto-import DATA items from DLLs\\n"));
#-  fprintf (file, _("  --enable-runtime-pseudo-reloc      Work around auto-import limitations by\\n\\
#-                                       adding pseudo-relocations resolved at\\n\\
#-                                       runtime\\n"));
#-  fprintf (file, _("  --disable-runtime-pseudo-reloc     Do not add runtime pseudo-relocations for\\n\\
#-                                       auto-imported DATA\\n"));
#-  fprintf (file, _("  --enable-extra-pep-debug            Enable verbose debug output when building\\n\\
#-                                       or linking to DLLs (esp. auto-import)\\n"));
#-  fprintf (file, _("  --enable-long-section-names        Use long COFF section names even in\\n\\
#-                                       executable image files\\n"));
#-  fprintf (file, _("  --disable-long-section-names       Never use long COFF section names, even\\n\\
#-                                       in object files\\n"));
#-  fprintf (file, _("  --[disable-]high-entropy-va        Image is compatible with 64-bit address space\\n\\
#-                                       layout randomization (ASLR)\\n"));
#-  fprintf (file, _("  --[disable-]dynamicbase            Image base address may be relocated using\\n\\
#-                                       address space layout randomization (ASLR)\\n"));
#-  fprintf (file, _("  --enable-reloc-section             Create the base relocation table\\n"));
#-  fprintf (file, _("  --disable-reloc-section            Do not create the base relocation table\\n"));
#-  fprintf (file, _("  --[disable-]forceinteg             Code integrity checks are enforced\\n"));
#-  fprintf (file, _("  --[disable-]nxcompat               Image is compatible with data execution\\n\\
#-                                       prevention\\n"));
#-  fprintf (file, _("  --[disable-]no-isolation           Image understands isolation but do not\\n\\
#-                                       isolate the image\\n"));
#-  fprintf (file, _("  --[disable-]no-seh                 Image does not use SEH; no SE handler may\\n\\
#-                                       be called in this image\\n"));
#-  fprintf (file, _("  --[disable-]no-bind                Do not bind this image\\n"));
#-  fprintf (file, _("  --[disable-]wdmdriver              Driver uses the WDM model\\n"));
#-  fprintf (file, _("  --[disable-]tsaware                Image is Terminal Server aware\\n"));
#-  fprintf (file, _("  --build-id[=STYLE]                 Generate build ID\\n"));
#+ fprintf (file, _("  --add-stdcall-alias                Export symbols with and without @nn\\n"));
#+ fprintf (file, _("  --disable-stdcall-fixup            Don't link _sym to _sym@nn\\n"));
#+ fprintf (file, _("  --enable-stdcall-fixup             Link _sym to _sym@nn without warnings\\n"));
#+ fprintf (file, _("  --exclude-symbols sym,sym,...      Exclude symbols from automatic export\\n"));
#+ fprintf (file, _("  --exclude-all-symbols              Exclude all symbols from automatic export\\n"));
#+ fprintf (file, _("  --exclude-libs lib,lib,...         Exclude libraries from automatic export\\n"));
#+ fprintf (file, _("  --exclude-modules-for-implib mod,mod,...\\n"));
#+ fprintf (file, _("                                     Exclude objects, archive members from auto\\n"));
#+ fprintf (file, _("                                     export, place into import library instead\\n"));
#+ fprintf (file, _("  --export-all-symbols               Automatically export all globals to DLL\\n"));
#+ fprintf (file, _("  --kill-at                          Remove @nn from exported symbols\\n"));
#+ fprintf (file, _("  --output-def <file>                Generate a .DEF file for the built DLL\\n"));
#+ fprintf (file, _("  --warn-duplicate-exports           Warn about duplicate exports\\n"));
#+ fprintf (file, _("  --compat-implib                    Create backward compatible import libs;\\n\\
#+ create __imp_<SYMBOL> as well\\n"));
#+ fprintf (file, _("  --enable-auto-image-base           Automatically choose image base for DLLs\\n\\
#+ unless user specifies one\\n"));
#+ fprintf (file, _("  --disable-auto-image-base          Do not auto-choose image base (default)\\n"));
#+ fprintf (file, _("  --dll-search-prefix=<string>       When linking dynamically to a dll without\\n\\
#+ an importlib, use <string><basename>.dll\\n\\
#+ in preference to lib<basename>.dll \\n"));
#+ fprintf (file, _("  --enable-auto-import               Do sophisticated linking of _sym to\\n\\
#+ __imp_sym for DATA references\\n"));
#+ fprintf (file, _("  --disable-auto-import              Do not auto-import DATA items from DLLs\\n"));
#+ fprintf (file, _("  --enable-runtime-pseudo-reloc      Work around auto-import limitations by\\n\\
#+ adding pseudo-relocations resolved at\\n\\
#+ runtime\\n"));
#+ fprintf (file, _("  --disable-runtime-pseudo-reloc     Do not add runtime pseudo-relocations for\\n\\
#+ auto-imported DATA\\n"));
#+ fprintf (file, _("  --enable-extra-pep-debug            Enable verbose debug output when building\\n\\
#+ or linking to DLLs (esp. auto-import)\\n"));
#+ fprintf (file, _("  --enable-long-section-names        Use long COFF section names even in\\n\\
#+ executable image files\\n"));
#+ fprintf (file, _("  --disable-long-section-names       Never use long COFF section names, even\\n\\
#+ in object files\\n"));
#+ fprintf (file, _("  --[disable-]high-entropy-va        Image is compatible with 64-bit address space\\n\\
#+ layout randomization (ASLR)\\n"));
#+ fprintf (file, _("  --[disable-]dynamicbase            Image base address may be relocated using\\n\\
#+ address space layout randomization (ASLR)\\n"));
#+ fprintf (file, _("  --enable-reloc-section             Create the base relocation table\\n"));
#+ fprintf (file, _("  --disable-reloc-section            Do not create the base relocation table\\n"));
#+ fprintf (file, _("  --[disable-]forceinteg             Code integrity checks are enforced\\n"));
#+ fprintf (file, _("  --[disable-]nxcompat               Image is compatible with data execution\\n\\
#+ prevention\\n"));
#+ fprintf (file, _("  --[disable-]no-isolation           Image understands isolation but do not\\n\\
#+ isolate the image\\n"));
#+ fprintf (file, _("  --[disable-]no-seh                 Image does not use SEH; no SE handler may\\n\\
#+ be called in this image\\n"));
#+ fprintf (file, _("  --[disable-]no-bind                Do not bind this image\\n"));
#+ fprintf (file, _("  --[disable-]wdmdriver              Driver uses the WDM model\\n"));
#+ fprintf (file, _("  --[disable-]tsaware                Image is Terminal Server aware\\n"));
#+ fprintf (file, _("  --build-id[=STYLE]                 Generate build ID\\n"));
# #endif
#@@ -499,17 +507,17 @@
# {
#-  int i;
#-  is_underscoring ();
#-  /* Find the name and set it.  */
#-  for (i = 0; init[i].ptr; i++)
#-    {
#-      if (strcmp (name, GET_INIT_SYMBOL_NAME (i)) == 0)
#-       {
#-         init[i].value = val;
#-         init[i].inited = 1;
#-         if (strcmp (name,"__image_base__") == 0)
#-           set_pep_name (U ("__ImageBase"), val);
#-         return;
#+ int i;
#+ is_underscoring ();
#+ /* Find the name and set it.  */
#+ for (i = 0; init[i].ptr; i++)
#+ {
#+ if (strcmp (name, GET_INIT_SYMBOL_NAME (i)) == 0)
#+       {
#+       init[i].value = val;
#+       init[i].inited = 1;
#+       if (strcmp (name,"__image_base__") == 0)
#+       set_pep_name (U ("__ImageBase"), val);
#+       return;
#        }
#-    }
#-  abort ();
#+ }
#+ abort ();
# }
#@@ -519,60 +527,60 @@
# {
#-  const char *entry;
#-  const char *initial_symbol_char;
#-  int i;
#-
#-  static const struct
#-  {
#-    const int value;
#-    const char *entry;
#-  }
#-  v[] =
#-    {
#-      { 1, "NtProcessStartup"  },
#-      { 2, "WinMainCRTStartup" },
#-      { 3, "mainCRTStartup"    },
#-      { 7, "__PosixProcessStartup" },
#-      { 9, "WinMainCRTStartup" },
#-      {14, "mainCRTStartup"    },
#-      { 0, NULL          }
#-    };
#-
#-  /* Entry point name for arbitrary subsystem numbers.  */
#-  static const char default_entry[] = "mainCRTStartup";
#-
#-  if (bfd_link_dll (&link_info) || dll)
#-    {
#-      entry = "DllMainCRTStartup";
#-    }
#-  else
#-    {
#-      for (i = 0; v[i].entry; i++)
#+ const char *entry;
#+ const char *initial_symbol_char;
#+ int i;
#+
#+ static const struct
#+ {
#+ const int value;
#+ const char *entry;
#+ }
#+ v[] =
#+ {
#+ { 1, "NtProcessStartup"  },
#+ { 2, "WinMainCRTStartup" },
#+ { 3, "mainCRTStartup"    },
#+ { 7, "__PosixProcessStartup" },
#+ { 9, "WinMainCRTStartup" },
#+ {14, "mainCRTStartup"    },
#+ { 0, NULL          }
#+ };
#+
#+ /* Entry point name for arbitrary subsystem numbers.  */
#+ static const char default_entry[] = "mainCRTStartup";
#+
#+ if (bfd_link_dll (&link_info) || dll)
#+ {
#+ entry = "DllMainCRTStartup";
#+ }
#+ else
#+ {
#+ for (i = 0; v[i].entry; i++)
#        if (v[i].value == pep_subsystem)
#-         break;
#+       break;
# 
#-      /* If no match, use the default.  */
#-      if (v[i].entry != NULL)
#+ /* If no match, use the default.  */
#+ if (v[i].entry != NULL)
#        entry = v[i].entry;
#-      else
#+ else
#        entry = default_entry;
#-    }
#+ }
# 
#-  /* Now we check target's default for getting proper symbol_char.  */
#-  initial_symbol_char = (is_underscoring () != 0 ? "_" : "");
#+ /* Now we check target's default for getting proper symbol_char.  */
#+ initial_symbol_char = (is_underscoring () != 0 ? "_" : "");
# 
#-  if (*initial_symbol_char != '\\0')
#-    {
#-      char *alc_entry;
#-
#-      /* lang_default_entry expects its argument to be permanently
#-        allocated, so we don't free this string.  */
#-      alc_entry = xmalloc (strlen (initial_symbol_char)
#-                         + strlen (entry)
#-                         + 1);
#-      strcpy (alc_entry, initial_symbol_char);
#-      strcat (alc_entry, entry);
#-      entry = alc_entry;
#-    }
#+ if (*initial_symbol_char != '\\0')
#+ {
#+ char *alc_entry;
#+
#+ /* lang_default_entry expects its argument to be permanently
#+       allocated, so we don't free this string.  */
#+ alc_entry = xmalloc (strlen (initial_symbol_char)
#+       + strlen (entry)
#+       + 1);
#+ strcpy (alc_entry, initial_symbol_char);
#+ strcat (alc_entry, entry);
#+ entry = alc_entry;
#+ }
# 
#-  lang_default_entry (entry);
#+ lang_default_entry (entry);
# }
#@@ -582,71 +590,71 @@
# {
#-  const char *sver;
#-  char *end;
#-  int len;
#-  int i;
#-  unsigned long temp_subsystem;
#-  static const struct
#-    {
#-      const char *name;
#-      const int value;
#-    }
#-  v[] =
#-    {
#-      { "native",  1 },
#-      { "windows", 2 },
#-      { "console", 3 },
#-      { "posix",   7 },
#-      { "wince",   9 },
#-      { "xbox",   14 },
#-      { NULL, 0 }
#-    };
#-
#-  /* Check for the presence of a version number.  */
#-  sver = strchr (optarg, ':');
#-  if (sver == NULL)
#-    len = strlen (optarg);
#-  else
#-    {
#-      len = sver - optarg;
#-      set_pep_name ("__major_subsystem_version__",
#-                 strtoul (sver + 1, &end, 0));
#-      if (*end == '.')
#+ const char *sver;
#+ char *end;
#+ int len;
#+ int i;
#+ unsigned long temp_subsystem;
#+ static const struct
#+ {
#+ const char *name;
#+ const int value;
#+ }
#+ v[] =
#+ {
#+ { "native",  1 },
#+ { "windows", 2 },
#+ { "console", 3 },
#+ { "posix",   7 },
#+ { "wince",   9 },
#+ { "xbox",   14 },
#+ { NULL, 0 }
#+ };
#+
#+ /* Check for the presence of a version number.  */
#+ sver = strchr (optarg, ':');
#+ if (sver == NULL)
#+ len = strlen (optarg);
#+ else
#+ {
#+ len = sver - optarg;
#+ set_pep_name ("__major_subsystem_version__",
#+        strtoul (sver + 1, &end, 0));
#+ if (*end == '.')
#         set_pep_name ("__minor_subsystem_version__",
#-                      strtoul (end + 1, &end, 0));
#-      if (*end != '\\0')
#+        strtoul (end + 1, &end, 0));
#+ if (*end != '\\0')
#         einfo (_("%P: warning: bad version number in -subsystem option\\n"));
#-    }
#+ }
# 
#-  /* Check for numeric subsystem.  */
#-  temp_subsystem = strtoul (optarg, & end, 0);
#-  if ((*end == ':' || *end == '\\0') && (temp_subsystem < 65536))
#-    {
#-      /* Search list for a numeric match to use its entry point.  */
#-      for (i = 0; v[i].name; i++)
#+ /* Check for numeric subsystem.  */
#+ temp_subsystem = strtoul (optarg, & end, 0);
#+ if ((*end == ':' || *end == '\\0') && (temp_subsystem < 65536))
#+ {
#+ /* Search list for a numeric match to use its entry point.  */
#+ for (i = 0; v[i].name; i++)
#         if (v[i].value == (int) temp_subsystem)
#-          break;
#+        break;
# 
#-      /* Use this subsystem.  */
#-      pep_subsystem = (int) temp_subsystem;
#-    }
#-  else
#-    {
#-      /* Search for subsystem by name.  */
#-      for (i = 0; v[i].name; i++)
#+ /* Use this subsystem.  */
#+ pep_subsystem = (int) temp_subsystem;
#+ }
#+ else
#+ {
#+ /* Search for subsystem by name.  */
#+ for (i = 0; v[i].name; i++)
#         if (strncmp (optarg, v[i].name, len) == 0
#-            && v[i].name[len] == '\\0')
#-          break;
#+        && v[i].name[len] == '\\0')
#+        break;
# 
#-      if (v[i].name == NULL)
#+ if (v[i].name == NULL)
#         {
#-          einfo (_("%F%P: invalid subsystem type %s\\n"), optarg);
#-          return;
#+        einfo (_("%F%P: invalid subsystem type %s\\n"), optarg);
#+        return;
#         }
# 
#-      pep_subsystem = v[i].value;
#-    }
#+ pep_subsystem = v[i].value;
#+ }
# 
#-  set_pep_name ("__subsystem__", pep_subsystem);
#+ set_pep_name ("__subsystem__", pep_subsystem);
# 
#-  return;
#+ return;
# }
#@@ -657,10 +665,10 @@
# {
#-  char *end;
#+ char *end;
# 
#-  set_pep_name (name,  (bfd_vma) strtoull (optarg, &end, 0));
#+ set_pep_name (name,  (bfd_vma) strtoull (optarg, &end, 0));
# 
#-  if (end == optarg)
#-    einfo (_("%F%P: invalid hex number for PE parameter '%s'\\n"), optarg);
#+ if (end == optarg)
#+ einfo (_("%F%P: invalid hex number for PE parameter '%s'\\n"), optarg);
# 
#-  optarg = end;
#+ optarg = end;
# }
#@@ -671,11 +679,11 @@
# {
#-  set_pep_value (resname);
#+ set_pep_value (resname);
# 
#-  if (*optarg == ',')
#-    {
#-      optarg++;
#-      set_pep_value (comname);
#-    }
#-  else if (*optarg)
#-    einfo (_("%F%P: strange hex info for PE parameter '%s'\\n"), optarg);
#+ if (*optarg == ',')
#+ {
#+ optarg++;
#+ set_pep_value (comname);
#+ }
#+ else if (*optarg)
#+ einfo (_("%F%P: strange hex info for PE parameter '%s'\\n"), optarg);
# }
#@@ -687,221 +695,221 @@
# {
#-  is_underscoring ();
#-  switch (optc)
#-    {
#-    default:
#-      return false;
#-
#-    case OPTION_BASE_FILE:
#-      link_info.base_file = fopen (optarg, FOPEN_WB);
#-      if (link_info.base_file == NULL)
#+ is_underscoring ();
#+ switch (optc)
#+ {
#+ default:
#+ return false;
#+
#+ case OPTION_BASE_FILE:
#+ link_info.base_file = fopen (optarg, FOPEN_WB);
#+ if (link_info.base_file == NULL)
#         einfo (_("%F%P: cannot open base file %s\\n"), optarg);
#-      break;
#+ break;
# 
#-      /* PE options.  */
#-    case OPTION_HEAP:
#-      set_pep_stack_heap ("__size_of_heap_reserve__", "__size_of_heap_commit__");
#-      break;
#-    case OPTION_STACK:
#-      set_pep_stack_heap ("__size_of_stack_reserve__", "__size_of_stack_commit__");
#-      break;
#-    case OPTION_SUBSYSTEM:
#-      set_pep_subsystem ();
#-      break;
#-    case OPTION_MAJOR_OS_VERSION:
#-      set_pep_value ("__major_os_version__");
#-      break;
#-    case OPTION_MINOR_OS_VERSION:
#-      set_pep_value ("__minor_os_version__");
#-      break;
#-    case OPTION_MAJOR_SUBSYSTEM_VERSION:
#-      set_pep_value ("__major_subsystem_version__");
#-      break;
#-    case OPTION_MINOR_SUBSYSTEM_VERSION:
#-      set_pep_value ("__minor_subsystem_version__");
#-      break;
#-    case OPTION_MAJOR_IMAGE_VERSION:
#-      set_pep_value ("__major_image_version__");
#-      break;
#-    case OPTION_MINOR_IMAGE_VERSION:
#-      set_pep_value ("__minor_image_version__");
#-      break;
#-    case OPTION_FILE_ALIGNMENT:
#-      set_pep_value ("__file_alignment__");
#-      break;
#-    case OPTION_SECTION_ALIGNMENT:
#-      set_pep_value ("__section_alignment__");
#-      break;
#-    case OPTION_DLL:
#-      set_pep_name ("__dll__", 1);
#-      break;
#-    case OPTION_IMAGE_BASE:
#-      set_pep_value ("__image_base__");
#-      break;
#-    case OPTION_SUPPORT_OLD_CODE:
#-      support_old_code = 1;
#-      break;
#-    case OPTION_USE_NUL_PREFIXED_IMPORT_TABLES:
#-      pep_use_nul_prefixed_import_tables = true;
#-      break;
#-    case OPTION_NO_LEADING_UNDERSCORE:
#-      pep_leading_underscore = 0;
#-      break;
#-    case OPTION_LEADING_UNDERSCORE:
#-      pep_leading_underscore = 1;
#-      break;
#-    case OPTION_INSERT_TIMESTAMP:
#-      insert_timestamp = true;
#-      break;
#-    case OPTION_NO_INSERT_TIMESTAMP:
#-      insert_timestamp = false;
#-      break;
#+ /* PE options.  */
#+ case OPTION_HEAP:
#+ set_pep_stack_heap ("__size_of_heap_reserve__", "__size_of_heap_commit__");
#+ break;
#+ case OPTION_STACK:
#+ set_pep_stack_heap ("__size_of_stack_reserve__", "__size_of_stack_commit__");
#+ break;
#+ case OPTION_SUBSYSTEM:
#+ set_pep_subsystem ();
#+ break;
#+ case OPTION_MAJOR_OS_VERSION:
#+ set_pep_value ("__major_os_version__");
#+ break;
#+ case OPTION_MINOR_OS_VERSION:
#+ set_pep_value ("__minor_os_version__");
#+ break;
#+ case OPTION_MAJOR_SUBSYSTEM_VERSION:
#+ set_pep_value ("__major_subsystem_version__");
#+ break;
#+ case OPTION_MINOR_SUBSYSTEM_VERSION:
#+ set_pep_value ("__minor_subsystem_version__");
#+ break;
#+ case OPTION_MAJOR_IMAGE_VERSION:
#+ set_pep_value ("__major_image_version__");
#+ break;
#+ case OPTION_MINOR_IMAGE_VERSION:
#+ set_pep_value ("__minor_image_version__");
#+ break;
#+ case OPTION_FILE_ALIGNMENT:
#+ set_pep_value ("__file_alignment__");
#+ break;
#+ case OPTION_SECTION_ALIGNMENT:
#+ set_pep_value ("__section_alignment__");
#+ break;
#+ case OPTION_DLL:
#+ set_pep_name ("__dll__", 1);
#+ break;
#+ case OPTION_IMAGE_BASE:
#+ set_pep_value ("__image_base__");
#+ break;
#+ case OPTION_SUPPORT_OLD_CODE:
#+ support_old_code = 1;
#+ break;
#+ case OPTION_USE_NUL_PREFIXED_IMPORT_TABLES:
#+ pep_use_nul_prefixed_import_tables = true;
#+ break;
#+ case OPTION_NO_LEADING_UNDERSCORE:
#+ pep_leading_underscore = 0;
#+ break;
#+ case OPTION_LEADING_UNDERSCORE:
#+ pep_leading_underscore = 1;
#+ break;
#+ case OPTION_INSERT_TIMESTAMP:
#+ insert_timestamp = true;
#+ break;
#+ case OPTION_NO_INSERT_TIMESTAMP:
#+ insert_timestamp = false;
#+ break;
# #ifdef DLL_SUPPORT
#-    case OPTION_OUT_DEF:
#-      pep_out_def_filename = xstrdup (optarg);
#-      break;
#-    case OPTION_EXPORT_ALL:
#-      pep_dll_export_everything = 1;
#-      break;
#-    case OPTION_EXCLUDE_SYMBOLS:
#-      pep_dll_add_excludes (optarg, EXCLUDESYMS);
#-      break;
#-    case OPTION_EXCLUDE_ALL_SYMBOLS:
#-      pep_dll_exclude_all_symbols = 1;
#-      break;
#-    case OPTION_EXCLUDE_LIBS:
#-      pep_dll_add_excludes (optarg, EXCLUDELIBS);
#-      break;
#-    case OPTION_EXCLUDE_MODULES_FOR_IMPLIB:
#-      pep_dll_add_excludes (optarg, EXCLUDEFORIMPLIB);
#-      break;
#-    case OPTION_KILL_ATS:
#-      pep_dll_kill_ats = 1;
#-      break;
#-    case OPTION_STDCALL_ALIASES:
#-      pep_dll_stdcall_aliases = 1;
#-      break;
#-    case OPTION_ENABLE_STDCALL_FIXUP:
#-      pep_enable_stdcall_fixup = 1;
#-      break;
#-    case OPTION_DISABLE_STDCALL_FIXUP:
#-      pep_enable_stdcall_fixup = 0;
#-      break;
#-    case OPTION_WARN_DUPLICATE_EXPORTS:
#-      pep_dll_warn_dup_exports = 1;
#-      break;
#-    case OPTION_IMP_COMPAT:
#-      pep_dll_compat_implib = 1;
#-      break;
#-    case OPTION_ENABLE_AUTO_IMAGE_BASE:
#-      pep_enable_auto_image_base = 1;
#-      break;
#-    case OPTION_DISABLE_AUTO_IMAGE_BASE:
#-      pep_enable_auto_image_base = 0;
#-      break;
#-    case OPTION_DLL_SEARCH_PREFIX:
#-      pep_dll_search_prefix = xstrdup (optarg);
#-      break;
#-    case OPTION_NO_DEFAULT_EXCLUDES:
#-      pep_dll_do_default_excludes = 0;
#-      break;
#-    case OPTION_DLL_ENABLE_AUTO_IMPORT:
#-      link_info.pei386_auto_import = 1;
#-      break;
#-    case OPTION_DLL_DISABLE_AUTO_IMPORT:
#-      link_info.pei386_auto_import = 0;
#-      break;
#-    case OPTION_DLL_ENABLE_RUNTIME_PSEUDO_RELOC:
#-      link_info.pei386_runtime_pseudo_reloc = 2;
#-      break;
#-    case OPTION_DLL_DISABLE_RUNTIME_PSEUDO_RELOC:
#-      link_info.pei386_runtime_pseudo_reloc = 0;
#-      break;
#-    case OPTION_DLL_ENABLE_RUNTIME_PSEUDO_RELOC_V2:
#-      link_info.pei386_runtime_pseudo_reloc = 2;
#-      break;
#-    case OPTION_ENABLE_EXTRA_PE_DEBUG:
#-      pep_dll_extra_pe_debug = 1;
#-      break;
#-#endif
#-    case OPTION_ENABLE_LONG_SECTION_NAMES:
#-      pep_use_coff_long_section_names = 1;
#-      break;
#-    case OPTION_DISABLE_LONG_SECTION_NAMES:
#-      pep_use_coff_long_section_names = 0;
#-      break;
#-    /*  Get DLLCharacteristics bits  */
#-    case OPTION_HIGH_ENTROPY_VA:
#-      pe_dll_characteristics |= IMAGE_DLL_CHARACTERISTICS_HIGH_ENTROPY_VA;
#-      /* fall through */
#-    case OPTION_DYNAMIC_BASE:
#-      pe_dll_characteristics |= IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE;
#-      /* fall through */
#-    case OPTION_ENABLE_RELOC_SECTION:
#-      pep_dll_enable_reloc_section = 1;
#-      break;
#-    case OPTION_DISABLE_RELOC_SECTION:
#-      pep_dll_enable_reloc_section = 0;
#-      /* fall through */
#-    case OPTION_DISABLE_DYNAMIC_BASE:
#-      pe_dll_characteristics &= ~ IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE;
#-      /* fall through */
#-    case OPTION_DISABLE_HIGH_ENTROPY_VA:
#-      pe_dll_characteristics &= ~ IMAGE_DLL_CHARACTERISTICS_HIGH_ENTROPY_VA;
#-      break;
#-    case OPTION_FORCE_INTEGRITY:
#-      pe_dll_characteristics |= IMAGE_DLL_CHARACTERISTICS_FORCE_INTEGRITY;
#-      break;
#-    case OPTION_DISABLE_FORCE_INTEGRITY:
#-      pe_dll_characteristics &= ~ IMAGE_DLL_CHARACTERISTICS_FORCE_INTEGRITY;
#-      break;
#-    case OPTION_NX_COMPAT:
#-      pe_dll_characteristics |= IMAGE_DLL_CHARACTERISTICS_NX_COMPAT;
#-      break;
#-    case OPTION_DISABLE_NX_COMPAT:
#-      pe_dll_characteristics &= ~ IMAGE_DLL_CHARACTERISTICS_NX_COMPAT;
#-      break;
#-    case OPTION_NO_ISOLATION:
#-      pe_dll_characteristics |= IMAGE_DLLCHARACTERISTICS_NO_ISOLATION;
#-      break;
#-    case OPTION_DISABLE_NO_ISOLATION:
#-      pe_dll_characteristics &= ~ IMAGE_DLLCHARACTERISTICS_NO_ISOLATION;
#-      break;
#-    case OPTION_NO_SEH:
#-      pe_dll_characteristics |= IMAGE_DLLCHARACTERISTICS_NO_SEH;
#-      break;
#-    case OPTION_DISABLE_NO_SEH:
#-      pe_dll_characteristics &= ~ IMAGE_DLLCHARACTERISTICS_NO_SEH;
#-      break;
#-    case OPTION_NO_BIND:
#-      pe_dll_characteristics |= IMAGE_DLLCHARACTERISTICS_NO_BIND;
#-      break;
#-    case OPTION_DISABLE_NO_BIND:
#-      pe_dll_characteristics &= ~ IMAGE_DLLCHARACTERISTICS_NO_BIND;
#-      break;
#-    case OPTION_WDM_DRIVER:
#-      pe_dll_characteristics |= IMAGE_DLLCHARACTERISTICS_WDM_DRIVER;
#-      break;
#-    case OPTION_DISABLE_WDM_DRIVER:
#-      pe_dll_characteristics &= ~ IMAGE_DLLCHARACTERISTICS_WDM_DRIVER;
#-      break;
#-    case OPTION_TERMINAL_SERVER_AWARE:
#-      pe_dll_characteristics |= IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE;
#-      break;
#-    case OPTION_DISABLE_TERMINAL_SERVER_AWARE:
#-      pe_dll_characteristics &= ~ IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE;
#-      break;
#-    case OPTION_BUILD_ID:
#-      free ((char *) emit_build_id);
#-      emit_build_id = NULL;
#-      if (optarg == NULL)
#+ case OPTION_OUT_DEF:
#+ pep_out_def_filename = xstrdup (optarg);
#+ break;
#+ case OPTION_EXPORT_ALL:
#+ pep_dll_export_everything = 1;
#+ break;
#+ case OPTION_EXCLUDE_SYMBOLS:
#+ pep_dll_add_excludes (optarg, EXCLUDESYMS);
#+ break;
#+ case OPTION_EXCLUDE_ALL_SYMBOLS:
#+ pep_dll_exclude_all_symbols = 1;
#+ break;
#+ case OPTION_EXCLUDE_LIBS:
#+ pep_dll_add_excludes (optarg, EXCLUDELIBS);
#+ break;
#+ case OPTION_EXCLUDE_MODULES_FOR_IMPLIB:
#+ pep_dll_add_excludes (optarg, EXCLUDEFORIMPLIB);
#+ break;
#+ case OPTION_KILL_ATS:
#+ pep_dll_kill_ats = 1;
#+ break;
#+ case OPTION_STDCALL_ALIASES:
#+ pep_dll_stdcall_aliases = 1;
#+ break;
#+ case OPTION_ENABLE_STDCALL_FIXUP:
#+ pep_enable_stdcall_fixup = 1;
#+ break;
#+ case OPTION_DISABLE_STDCALL_FIXUP:
#+ pep_enable_stdcall_fixup = 0;
#+ break;
#+ case OPTION_WARN_DUPLICATE_EXPORTS:
#+ pep_dll_warn_dup_exports = 1;
#+ break;
#+ case OPTION_IMP_COMPAT:
#+ pep_dll_compat_implib = 1;
#+ break;
#+ case OPTION_ENABLE_AUTO_IMAGE_BASE:
#+ pep_enable_auto_image_base = 1;
#+ break;
#+ case OPTION_DISABLE_AUTO_IMAGE_BASE:
#+ pep_enable_auto_image_base = 0;
#+ break;
#+ case OPTION_DLL_SEARCH_PREFIX:
#+ pep_dll_search_prefix = xstrdup (optarg);
#+ break;
#+ case OPTION_NO_DEFAULT_EXCLUDES:
#+ pep_dll_do_default_excludes = 0;
#+ break;
#+ case OPTION_DLL_ENABLE_AUTO_IMPORT:
#+ link_info.pei386_auto_import = 1;
#+ break;
#+ case OPTION_DLL_DISABLE_AUTO_IMPORT:
#+ link_info.pei386_auto_import = 0;
#+ break;
#+ case OPTION_DLL_ENABLE_RUNTIME_PSEUDO_RELOC:
#+ link_info.pei386_runtime_pseudo_reloc = 2;
#+ break;
#+ case OPTION_DLL_DISABLE_RUNTIME_PSEUDO_RELOC:
#+ link_info.pei386_runtime_pseudo_reloc = 0;
#+ break;
#+ case OPTION_DLL_ENABLE_RUNTIME_PSEUDO_RELOC_V2:
#+ link_info.pei386_runtime_pseudo_reloc = 2;
#+ break;
#+ case OPTION_ENABLE_EXTRA_PE_DEBUG:
#+ pep_dll_extra_pe_debug = 1;
#+ break;
#+#endif
#+ case OPTION_ENABLE_LONG_SECTION_NAMES:
#+ pep_use_coff_long_section_names = 1;
#+ break;
#+ case OPTION_DISABLE_LONG_SECTION_NAMES:
#+ pep_use_coff_long_section_names = 0;
#+ break;
#+ /*  Get DLLCharacteristics bits  */
#+ case OPTION_HIGH_ENTROPY_VA:
#+ pe_dll_characteristics |= IMAGE_DLL_CHARACTERISTICS_HIGH_ENTROPY_VA;
#+ /* fall through */
#+ case OPTION_DYNAMIC_BASE:
#+ pe_dll_characteristics |= IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE;
#+ /* fall through */
#+ case OPTION_ENABLE_RELOC_SECTION:
#+ pep_dll_enable_reloc_section = 1;
#+ break;
#+ case OPTION_DISABLE_RELOC_SECTION:
#+ pep_dll_enable_reloc_section = 0;
#+ /* fall through */
#+ case OPTION_DISABLE_DYNAMIC_BASE:
#+ pe_dll_characteristics &= ~ IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE;
#+ /* fall through */
#+ case OPTION_DISABLE_HIGH_ENTROPY_VA:
#+ pe_dll_characteristics &= ~ IMAGE_DLL_CHARACTERISTICS_HIGH_ENTROPY_VA;
#+ break;
#+ case OPTION_FORCE_INTEGRITY:
#+ pe_dll_characteristics |= IMAGE_DLL_CHARACTERISTICS_FORCE_INTEGRITY;
#+ break;
#+ case OPTION_DISABLE_FORCE_INTEGRITY:
#+ pe_dll_characteristics &= ~ IMAGE_DLL_CHARACTERISTICS_FORCE_INTEGRITY;
#+ break;
#+ case OPTION_NX_COMPAT:
#+ pe_dll_characteristics |= IMAGE_DLL_CHARACTERISTICS_NX_COMPAT;
#+ break;
#+ case OPTION_DISABLE_NX_COMPAT:
#+ pe_dll_characteristics &= ~ IMAGE_DLL_CHARACTERISTICS_NX_COMPAT;
#+ break;
#+ case OPTION_NO_ISOLATION:
#+ pe_dll_characteristics |= IMAGE_DLLCHARACTERISTICS_NO_ISOLATION;
#+ break;
#+ case OPTION_DISABLE_NO_ISOLATION:
#+ pe_dll_characteristics &= ~ IMAGE_DLLCHARACTERISTICS_NO_ISOLATION;
#+ break;
#+ case OPTION_NO_SEH:
#+ pe_dll_characteristics |= IMAGE_DLLCHARACTERISTICS_NO_SEH;
#+ break;
#+ case OPTION_DISABLE_NO_SEH:
#+ pe_dll_characteristics &= ~ IMAGE_DLLCHARACTERISTICS_NO_SEH;
#+ break;
#+ case OPTION_NO_BIND:
#+ pe_dll_characteristics |= IMAGE_DLLCHARACTERISTICS_NO_BIND;
#+ break;
#+ case OPTION_DISABLE_NO_BIND:
#+ pe_dll_characteristics &= ~ IMAGE_DLLCHARACTERISTICS_NO_BIND;
#+ break;
#+ case OPTION_WDM_DRIVER:
#+ pe_dll_characteristics |= IMAGE_DLLCHARACTERISTICS_WDM_DRIVER;
#+ break;
#+ case OPTION_DISABLE_WDM_DRIVER:
#+ pe_dll_characteristics &= ~ IMAGE_DLLCHARACTERISTICS_WDM_DRIVER;
#+ break;
#+ case OPTION_TERMINAL_SERVER_AWARE:
#+ pe_dll_characteristics |= IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE;
#+ break;
#+ case OPTION_DISABLE_TERMINAL_SERVER_AWARE:
#+ pe_dll_characteristics &= ~ IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE;
#+ break;
#+ case OPTION_BUILD_ID:
#+ free ((char *) emit_build_id);
#+ emit_build_id = NULL;
#+ if (optarg == NULL)
#         optarg = DEFAULT_BUILD_ID_STYLE;
#-      if (strcmp (optarg, "none"))
#+ if (strcmp (optarg, "none"))
#         emit_build_id = xstrdup (optarg);
#-      break;
#-    }
#+ break;
#+ }
# 
#-  /*  Set DLLCharacteristics bits  */
#-  set_pep_name ("__dll_characteristics__", pe_dll_characteristics);
#+ /*  Set DLLCharacteristics bits  */
#+ set_pep_name ("__dll_characteristics__", pe_dll_characteristics);
# 
#-  return true;
#+ return true;
# }
#@@ -913,20 +921,20 @@
# {
#-  const unsigned char *s;
#-  unsigned long hash;
#-  unsigned int c;
#-  unsigned int len;
#-
#-  hash = 0;
#-  len = 0;
#-  s = (const unsigned char *) str;
#-  while ((c = *s++) != '\\0')
#-    {
#-      hash += c + (c << 17);
#-      hash ^= hash >> 2;
#-      ++len;
#-    }
#-  hash += len + (len << 17);
#-  hash ^= hash >> 2;
#+ const unsigned char *s;
#+ unsigned long hash;
#+ unsigned int c;
#+ unsigned int len;
#+
#+ hash = 0;
#+ len = 0;
#+ s = (const unsigned char *) str;
#+ while ((c = *s++) != '\\0')
#+ {
#+ hash += c + (c << 17);
#+ hash ^= hash >> 2;
#+ ++len;
#+ }
#+ hash += len + (len << 17);
#+ hash ^= hash >> 2;
# 
#-  return hash;
#+ return hash;
# }
#@@ -938,4 +946,4 @@
# {
#-  bfd_vma hash = (bfd_vma) strhash (ofile);
#-  return NT_DLL_AUTO_IMAGE_BASE + ((hash << 16) & NT_DLL_AUTO_IMAGE_MASK);
#+ bfd_vma hash = (bfd_vma) strhash (ofile);
#+ return NT_DLL_AUTO_IMAGE_BASE + ((hash << 16) & NT_DLL_AUTO_IMAGE_MASK);
# }
#@@ -944,3 +952,3 @@
# /* Assign values to the special symbols before the linker script is
#-   read.  */
#+ read.  */
# 
#@@ -949,61 +957,61 @@
# {
#-  /* Run through and invent symbols for all the
#-     names and insert the defaults.  */
#-  int j;
#-
#-  is_underscoring ();
#-
#-  if (!init[IMAGEBASEOFF].inited)
#-    {
#-      if (bfd_link_relocatable (&link_info))
#+ /* Run through and invent symbols for all the
#+ names and insert the defaults.  */
#+ int j;
#+
#+ is_underscoring ();
#+
#+ if (!init[IMAGEBASEOFF].inited)
#+ {
#+ if (bfd_link_relocatable (&link_info))
#         init[IMAGEBASEOFF].value = 0;
#-      else if (init[DLLOFF].value || bfd_link_dll (&link_info))
#+ else if (init[DLLOFF].value || bfd_link_dll (&link_info))
#         {
# #ifdef DLL_SUPPORT
#-          init[IMAGEBASEOFF].value = (pep_enable_auto_image_base
#-                                      ? compute_dll_image_base (output_filename)
#-                                      : NT_DLL_IMAGE_BASE);
#+        init[IMAGEBASEOFF].value = (pep_enable_auto_image_base
#+        ? compute_dll_image_base (output_filename)
#+        : NT_DLL_IMAGE_BASE);
# #else
#-          init[IMAGEBASEOFF].value = NT_DLL_IMAGE_BASE;
#+        init[IMAGEBASEOFF].value = NT_DLL_IMAGE_BASE;
# #endif
#         }
#-      else
#+ else
#         init[IMAGEBASEOFF].value = NT_EXE_IMAGE_BASE;
#-      init[MSIMAGEBASEOFF].value = init[IMAGEBASEOFF].value;
#-    }
#+ init[MSIMAGEBASEOFF].value = init[IMAGEBASEOFF].value;
#+ }
# 
#-  /* Don't do any symbol assignments if this is a relocatable link.  */
#-  if (bfd_link_relocatable (&link_info))
#-    return;
#-
#-  /* Glue the assignments into the abs section.  */
#-  push_stat_ptr (&abs_output_section->children);
#-
#-  for (j = 0; init[j].ptr; j++)
#-    {
#-      bfd_vma val = init[j].value;
#-      lang_assignment_statement_type *rv;
#-
#-      rv = lang_add_assignment (exp_assign (GET_INIT_SYMBOL_NAME (j),
#-                                            exp_intop (val), false));
#-      if (init[j].size == sizeof (short))
#+ /* Don't do any symbol assignments if this is a relocatable link.  */
#+ if (bfd_link_relocatable (&link_info))
#+ return;
#+
#+ /* Glue the assignments into the abs section.  */
#+ push_stat_ptr (&abs_output_section->children);
#+
#+ for (j = 0; init[j].ptr; j++)
#+ {
#+ bfd_vma val = init[j].value;
#+ lang_assignment_statement_type *rv;
#+
#+ rv = lang_add_assignment (exp_assign (GET_INIT_SYMBOL_NAME (j),
#+        exp_intop (val), false));
#+ if (init[j].size == sizeof (short))
#         *(short *) init[j].ptr = (short) val;
#-      else if (init[j].size == sizeof (int))
#+ else if (init[j].size == sizeof (int))
#         *(int *) init[j].ptr = (int) val;
#-      else if (init[j].size == sizeof (long))
#+ else if (init[j].size == sizeof (long))
#         *(long *) init[j].ptr = (long) val;
#-      /* This might be a long long or other special type.  */
#-      else if (init[j].size == sizeof (bfd_vma))
#+ /* This might be a long long or other special type.  */
#+ else if (init[j].size == sizeof (bfd_vma))
#         *(bfd_vma *) init[j].ptr = val;
#-      else        abort ();
#-      if (j == IMAGEBASEOFF)
#+ else        abort ();
#+ if (j == IMAGEBASEOFF)
#         image_base_statement = rv;
#-    }
#-  /* Restore the pointer.  */
#-  pop_stat_ptr ();
#-
#-  if (pep.FileAlignment > pep.SectionAlignment)
#-    {
#-      einfo (_("%P: warning, file alignment > section alignment\\n"));
#-    }
#+ }
#+ /* Restore the pointer.  */
#+ pop_stat_ptr ();
#+
#+ if (pep.FileAlignment > pep.SectionAlignment)
#+ {
#+ einfo (_("%P: warning, file alignment > section alignment\\n"));
#+ }
# }
#@@ -1011,3 +1019,3 @@
# /* This is called after the linker script and the command line options
#-   have been read.  */
#+ have been read.  */
# 
#@@ -1016,11 +1024,11 @@
# {
#-  /* PR ld/6744:  Warn the user if they have used an ELF-only
#-     option hoping it will work on PE+.  */
#-  if (link_info.export_dynamic)
#-    einfo (_("%P: warning: --export-dynamic is not supported for PE+ "
#-      "targets, did you mean --export-all-symbols?\\n"));
#+ /* PR ld/6744:  Warn the user if they have used an ELF-only
#+ option hoping it will work on PE+.  */
#+ if (link_info.export_dynamic)
#+ einfo (_("%P: warning: --export-dynamic is not supported for PE+ "
#+ "targets, did you mean --export-all-symbols?\\n"));
# 
#-  set_entry_point ();
#+ set_entry_point ();
# 
#-  after_parse_default ();
#+ after_parse_default ();
# }
#@@ -1033,17 +1041,17 @@
# {
#-  int sl;
#-  char *string = inf;
#-  const char *hs = h->root.string;
#-
#-  sl = strlen (string);
#-  if (h->type == bfd_link_hash_defined
#-      && ((*hs == '@' && *string == '_'
#-                   && strncmp (hs + 1, string + 1, sl - 1) == 0)
#-                  || strncmp (hs, string, sl) == 0)
#-      && h->root.string[sl] == '@')
#-    {
#-      pep_undef_found_sym = h;
#-      return false;
#-    }
#-  return true;
#+ int sl;
#+ char *string = inf;
#+ const char *hs = h->root.string;
#+
#+ sl = strlen (string);
#+ if (h->type == bfd_link_hash_defined
#+ && ((*hs == '@' && *string == '_'
#+        && strncmp (hs + 1, string + 1, sl - 1) == 0)
#+        || strncmp (hs, string, sl) == 0)
#+ && h->root.string[sl] == '@')
#+ {
#+ pep_undef_found_sym = h;
#+ return false;
#+ }
#+ return true;
# }
#@@ -1053,11 +1061,11 @@
# {
#-  static int gave_warning_message = 0;
#-  struct bfd_link_hash_entry *undef, *sym;
#+ static int gave_warning_message = 0;
#+ struct bfd_link_hash_entry *undef, *sym;
# 
#-  if (pep_dll_extra_pe_debug)
#-    printf ("%s\\n", __FUNCTION__);
#+ if (pep_dll_extra_pe_debug)
#+ printf ("%s\\n", __FUNCTION__);
# 
#-  for (undef = link_info.hash->undefs; undef; undef=undef->u.undef.next)
#-    if (undef->type == bfd_link_hash_undefined)
#-      {
#+ for (undef = link_info.hash->undefs; undef; undef=undef->u.undef.next)
#+ if (undef->type == bfd_link_hash_undefined)
#+ {
#         char* at = strchr (undef->root.string, '@');
#@@ -1065,63 +1073,63 @@
#         if (lead_at)
#-          at = strchr (undef->root.string + 1, '@');
#+        at = strchr (undef->root.string + 1, '@');
#         if (at || lead_at)
#-          {
#-            /* The symbol is a stdcall symbol, so let's look for a
#-               cdecl symbol with the same name and resolve to that.  */
#-            char *cname = xstrdup (undef->root.string);
#-
#-            if (lead_at)
#-              *cname = '_';
#-            at = strchr (cname, '@');
#-            if (at)
#-              *at = 0;
#-            sym = bfd_link_hash_lookup (link_info.hash, cname, 0, 0, 1);
#-
#-            if (sym && sym->type == bfd_link_hash_defined)
#-              {
#-                undef->type = bfd_link_hash_defined;
#-                undef->u.def.value = sym->u.def.value;
#-                undef->u.def.section = sym->u.def.section;
#-
#-                if (pep_enable_stdcall_fixup == -1)
#-                  {
#-                    einfo (_("warning: resolving %s by linking to %s\\n"),
#-                           undef->root.string, cname);
#-                    if (! gave_warning_message)
#-                      {
#-                        gave_warning_message = 1;
#-                        einfo (_("Use --enable-stdcall-fixup to disable these warnings\\n"));
#-                        einfo (_("Use --disable-stdcall-fixup to disable these fixups\\n"));
#-                      }
#-                  }
#-              }
#-          }
#+        {
#+        /* The symbol is a stdcall symbol, so let's look for a
#+        cdecl symbol with the same name and resolve to that.  */
#+        char *cname = xstrdup (undef->root.string);
#+
#+        if (lead_at)
#+        *cname = '_';
#+        at = strchr (cname, '@');
#+        if (at)
#+        *at = 0;
#+        sym = bfd_link_hash_lookup (link_info.hash, cname, 0, 0, 1);
#+
#+        if (sym && sym->type == bfd_link_hash_defined)
#+        {
#+        undef->type = bfd_link_hash_defined;
#+        undef->u.def.value = sym->u.def.value;
#+        undef->u.def.section = sym->u.def.section;
#+
#+        if (pep_enable_stdcall_fixup == -1)
#+        {
#+        einfo (_("warning: resolving %s by linking to %s\\n"),
#+        undef->root.string, cname);
#+        if (! gave_warning_message)
#+        {
#+        gave_warning_message = 1;
#+        einfo (_("Use --enable-stdcall-fixup to disable these warnings\\n"));
#+        einfo (_("Use --disable-stdcall-fixup to disable these fixups\\n"));
#+        }
#+        }
#+        }
#+        }
#         else
#-          {
#-            /* The symbol is a cdecl symbol, so we look for stdcall
#-               symbols - which means scanning the whole symbol table.  */
#-            pep_undef_found_sym = 0;
#-            bfd_link_hash_traverse (link_info.hash, pep_undef_cdecl_match,
#-                                    (char *) undef->root.string);
#-            sym = pep_undef_found_sym;
#-            if (sym)
#-              {
#-                undef->type = bfd_link_hash_defined;
#-                undef->u.def.value = sym->u.def.value;
#-                undef->u.def.section = sym->u.def.section;
#-
#-                if (pep_enable_stdcall_fixup == -1)
#-                  {
#-                    einfo (_("warning: resolving %s by linking to %s\\n"),
#-                           undef->root.string, sym->root.string);
#-                    if (! gave_warning_message)
#-                      {
#-                        gave_warning_message = 1;
#-                        einfo (_("Use --enable-stdcall-fixup to disable these warnings\\n"));
#-                        einfo (_("Use --disable-stdcall-fixup to disable these fixups\\n"));
#-                      }
#-                  }
#-              }
#-          }
#-      }
#+        {
#+        /* The symbol is a cdecl symbol, so we look for stdcall
#+        symbols - which means scanning the whole symbol table.  */
#+        pep_undef_found_sym = 0;
#+        bfd_link_hash_traverse (link_info.hash, pep_undef_cdecl_match,
#+        (char *) undef->root.string);
#+        sym = pep_undef_found_sym;
#+        if (sym)
#+        {
#+        undef->type = bfd_link_hash_defined;
#+        undef->u.def.value = sym->u.def.value;
#+        undef->u.def.section = sym->u.def.section;
#+
#+        if (pep_enable_stdcall_fixup == -1)
#+        {
#+        einfo (_("warning: resolving %s by linking to %s\\n"),
#+        undef->root.string, sym->root.string);
#+        if (! gave_warning_message)
#+        {
#+        gave_warning_message = 1;
#+        einfo (_("Use --enable-stdcall-fixup to disable these warnings\\n"));
#+        einfo (_("Use --disable-stdcall-fixup to disable these fixups\\n"));
#+        }
#+        }
#+        }
#+        }
#+ }
# }
#@@ -1131,55 +1139,55 @@
# {
#-  struct bfd_symbol *sym = *rel->sym_ptr_ptr;
#-  char addend[8];
#-  bfd_vma _addend = 0;
#-  int suc = 0;
#-
#-  if (pep_dll_extra_pe_debug)
#-    printf ("arelent: %s@%#lx: add=%li\\n", sym->name,
#-            (unsigned long) rel->address, (long) rel->addend);
#-
#-  memset (addend, 0, sizeof (addend));
#-  switch ((rel->howto->bitsize))
#-    {
#-    case 8:
#-      suc = bfd_get_section_contents (s->owner, s, addend, rel->address, 1);
#-      if (suc && rel->howto->pc_relative)
#+ struct bfd_symbol *sym = *rel->sym_ptr_ptr;
#+ char addend[8];
#+ bfd_vma _addend = 0;
#+ int suc = 0;
#+
#+ if (pep_dll_extra_pe_debug)
#+ printf ("arelent: %s@%#lx: add=%li\\n", sym->name,
#+        (unsigned long) rel->address, (long) rel->addend);
#+
#+ memset (addend, 0, sizeof (addend));
#+ switch ((rel->howto->bitsize))
#+ {
#+ case 8:
#+ suc = bfd_get_section_contents (s->owner, s, addend, rel->address, 1);
#+ if (suc && rel->howto->pc_relative)
#         _addend = bfd_get_signed_8 (s->owner, addend);
#-      else if (suc)
#+ else if (suc)
#         _addend = bfd_get_8 (s->owner, addend);
#-      break;
#-    case 16:
#-      suc = bfd_get_section_contents (s->owner, s, addend, rel->address, 2);
#-      if (suc && rel->howto->pc_relative)
#+ break;
#+ case 16:
#+ suc = bfd_get_section_contents (s->owner, s, addend, rel->address, 2);
#+ if (suc && rel->howto->pc_relative)
#         _addend = bfd_get_signed_16 (s->owner, addend);
#-      else if (suc)
#+ else if (suc)
#         _addend = bfd_get_16 (s->owner, addend);
#-      break;
#-    case 32:
#-      suc = bfd_get_section_contents (s->owner, s, addend, rel->address, 4);
#-      if (suc && rel->howto->pc_relative)
#+ break;
#+ case 32:
#+ suc = bfd_get_section_contents (s->owner, s, addend, rel->address, 4);
#+ if (suc && rel->howto->pc_relative)
#         _addend = bfd_get_signed_32 (s->owner, addend);
#-      else if (suc)
#+ else if (suc)
#         _addend = bfd_get_32 (s->owner, addend);
#-      break;
#-    case 64:
#-      suc = bfd_get_section_contents (s->owner, s, addend, rel->address, 8);
#-      if (suc)
#+ break;
#+ case 64:
#+ suc = bfd_get_section_contents (s->owner, s, addend, rel->address, 8);
#+ if (suc)
#         _addend = bfd_get_64 (s->owner, addend);
#-      break;
#-    }
#-  if (! suc)
#-    einfo (_("%P: %C: cannot get section contents - auto-import exception\\n"),
#-           s->owner, s, rel->address);
#-
#-  if (pep_dll_extra_pe_debug)
#-    {
#-      printf ("import of 0x%lx(0x%lx) sec_addr=0x%lx",
#-              (long) _addend, (long) rel->addend, (long) rel->address);
#-      if (rel->howto->pc_relative)
#+ break;
#+ }
#+ if (! suc)
#+ einfo (_("%P: %C: cannot get section contents - auto-import exception\\n"),
#+        s->owner, s, rel->address);
#+
#+ if (pep_dll_extra_pe_debug)
#+ {
#+ printf ("import of 0x%lx(0x%lx) sec_addr=0x%lx",
#+        (long) _addend, (long) rel->addend, (long) rel->address);
#+ if (rel->howto->pc_relative)
#         printf (" pcrel");
#-      printf (" %d bit rel.\\n", (int) rel->howto->bitsize);
#-    }
#+ printf (" %d bit rel.\\n", (int) rel->howto->bitsize);
#+ }
# 
#-  pep_create_import_fixup (rel, s, _addend, name, symname);
#+ pep_create_import_fixup (rel, s, _addend, name, symname);
# }
#@@ -1189,5 +1197,5 @@
# {
#-  printf ("+%s\\n", h->string);
#+ printf ("+%s\\n", h->string);
# 
#-  return true;
#+ return true;
# }
#@@ -1198,6 +1206,6 @@
# {
#-  int *found = (int *) obj;
#+ int *found = (int *) obj;
# 
#-  if (strncmp (".debug_", sect->name, sizeof (".debug_") - 1) == 0)
#-    *found = 1;
#+ if (strncmp (".debug_", sect->name, sizeof (".debug_") - 1) == 0)
#+ *found = 1;
# }
#@@ -1206,26 +1214,26 @@
# pecoff_checksum_contents (bfd *abfd,
#-                          void (*process) (const void *, size_t, void *),
#-                          void *arg)
#+        void (*process) (const void *, size_t, void *),
#+        void *arg)
# {
#-  file_ptr filepos = (file_ptr) 0;
#+ file_ptr filepos = (file_ptr) 0;
# 
#-  while (1)
#-    {
#-      unsigned char b;
#-      int status;
#+ while (1)
#+ {
#+ unsigned char b;
#+ int status;
# 
#-      if (bfd_seek (abfd, filepos, SEEK_SET) != 0)
#+ if (bfd_seek (abfd, filepos, SEEK_SET) != 0)
#         return 0;
# 
#-      status = bfd_bread (&b, (bfd_size_type) 1, abfd);
#-      if (status < 1)
#+ status = bfd_bread (&b, (bfd_size_type) 1, abfd);
#+ if (status < 1)
#         {
#-          break;
#+        break;
#         }
# 
#-      (*process) (&b, 1, arg);
#-      filepos += 1;
#-    }
#+ (*process) (&b, 1, arg);
#+ filepos += 1;
#+ }
# 
#-  return true;
#+ return true;
# }
#@@ -1235,94 +1243,94 @@
# {
#-  struct pe_tdata *t = pe_data (abfd);
#-  asection *asec;
#-  struct bfd_link_order *link_order = NULL;
#-  unsigned char *contents;
#-  bfd_size_type size;
#-  bfd_size_type build_id_size;
#-  unsigned char *build_id;
#-
#-  /* Find the section the .buildid output section has been merged info.  */
#-  for (asec = abfd->sections; asec != NULL; asec = asec->next)
#-    {
#-      struct bfd_link_order *l = NULL;
#-      for (l = asec->map_head.link_order; l != NULL; l = l->next)
#-        {
#-          if (l->type == bfd_indirect_link_order)
#-            {
#-              if (l->u.indirect.section == t->build_id.sec)
#-                {
#-                  link_order = l;
#-                  break;
#-                }
#-            }
#+ struct pe_tdata *t = pe_data (abfd);
#+ asection *asec;
#+ struct bfd_link_order *link_order = NULL;
#+ unsigned char *contents;
#+ bfd_size_type size;
#+ bfd_size_type build_id_size;
#+ unsigned char *build_id;
#+
#+ /* Find the section the .buildid output section has been merged info.  */
#+ for (asec = abfd->sections; asec != NULL; asec = asec->next)
#+ {
#+ struct bfd_link_order *l = NULL;
#+ for (l = asec->map_head.link_order; l != NULL; l = l->next)
#+        {
#+        if (l->type == bfd_indirect_link_order)
#+        {
#+        if (l->u.indirect.section == t->build_id.sec)
#+        {
#+        link_order = l;
#+        break;
#+        }
#+        }
#         }
# 
#-      if (link_order)
#+ if (link_order)
#         break;
#-    }
#+ }
# 
#-  if (!link_order)
#-    {
#-      einfo (_("%P: warning: .buildid section discarded,"
#-               " --build-id ignored\\n"));
#-      return true;
#-    }
#-
#-  if (t->build_id.sec->contents == NULL)
#-    t->build_id.sec->contents = (unsigned char *) xmalloc (t->build_id.sec->size);
#-  contents = t->build_id.sec->contents;
#-  size = t->build_id.sec->size;
#-
#-  build_id_size = compute_build_id_size (t->build_id.style);
#-  build_id = xmalloc (build_id_size);
#-  generate_build_id (abfd, t->build_id.style, pecoff_checksum_contents, build_id, build_id_size);
#-
#-  bfd_vma ib = pe_data (link_info.output_bfd)->pe_opthdr.ImageBase;
#-
#-  /* Construct a debug directory entry which points to an immediately following CodeView record.  */
#-  struct internal_IMAGE_DEBUG_DIRECTORY idd;
#-  idd.Characteristics = 0;
#-  idd.TimeDateStamp = 0;
#-  idd.MajorVersion = 0;
#-  idd.MinorVersion = 0;
#-  idd.Type = PE_IMAGE_DEBUG_TYPE_CODEVIEW;
#-  idd.SizeOfData = sizeof (CV_INFO_PDB70) + 1;
#-  idd.AddressOfRawData = asec->vma - ib + link_order->offset
#-    + sizeof (struct external_IMAGE_DEBUG_DIRECTORY);
#-  idd.PointerToRawData = asec->filepos + link_order->offset
#-    + sizeof (struct external_IMAGE_DEBUG_DIRECTORY);
#-
#-  struct external_IMAGE_DEBUG_DIRECTORY *ext = (struct external_IMAGE_DEBUG_DIRECTORY *)contents;
#-  _bfd_XXi_swap_debugdir_out (abfd, &idd, ext);
#-
#-  /* Write the debug directory enttry */
#-  if (bfd_seek (abfd, asec->filepos + link_order->offset, SEEK_SET) != 0)
#-    return 0;
#-
#-  if (bfd_bwrite (contents, size, abfd) != size)
#-    return 0;
#-
#-  /* Construct the CodeView record.  */
#-  CODEVIEW_INFO cvinfo;
#-  cvinfo.CVSignature = CVINFO_PDB70_CVSIGNATURE;
#-  cvinfo.Age = 1;
#-
#-  /* Zero pad or truncate the generated build_id to fit in the CodeView record.  */
#-  memset (&(cvinfo.Signature), 0, CV_INFO_SIGNATURE_LENGTH);
#-  memcpy (&(cvinfo.Signature), build_id, (build_id_size > CV_INFO_SIGNATURE_LENGTH)
#-          ? CV_INFO_SIGNATURE_LENGTH :  build_id_size);
#-
#-  free (build_id);
#-
#-  /* Write the codeview record.  */
#-  if (_bfd_XXi_write_codeview_record (abfd, idd.PointerToRawData, &cvinfo) == 0)
#-    return 0;
#-
#-  /* Record the location of the debug directory in the data directory.  */
#-  pe_data (link_info.output_bfd)->pe_opthdr.DataDirectory[PE_DEBUG_DATA].VirtualAddress
#-    = asec->vma  - ib + link_order->offset;
#-  pe_data (link_info.output_bfd)->pe_opthdr.DataDirectory[PE_DEBUG_DATA].Size
#-    = sizeof (struct external_IMAGE_DEBUG_DIRECTORY);
#+ if (!link_order)
#+ {
#+ einfo (_("%P: warning: .buildid section discarded,"
#+        " --build-id ignored\\n"));
#+ return true;
#+ }
#+
#+ if (t->build_id.sec->contents == NULL)
#+ t->build_id.sec->contents = (unsigned char *) xmalloc (t->build_id.sec->size);
#+ contents = t->build_id.sec->contents;
#+ size = t->build_id.sec->size;
#+
#+ build_id_size = compute_build_id_size (t->build_id.style);
#+ build_id = xmalloc (build_id_size);
#+ generate_build_id (abfd, t->build_id.style, pecoff_checksum_contents, build_id, build_id_size);
#+
#+ bfd_vma ib = pe_data (link_info.output_bfd)->pe_opthdr.ImageBase;
#+
#+ /* Construct a debug directory entry which points to an immediately following CodeView record.  */
#+ struct internal_IMAGE_DEBUG_DIRECTORY idd;
#+ idd.Characteristics = 0;
#+ idd.TimeDateStamp = 0;
#+ idd.MajorVersion = 0;
#+ idd.MinorVersion = 0;
#+ idd.Type = PE_IMAGE_DEBUG_TYPE_CODEVIEW;
#+ idd.SizeOfData = sizeof (CV_INFO_PDB70) + 1;
#+ idd.AddressOfRawData = asec->vma - ib + link_order->offset
#+ + sizeof (struct external_IMAGE_DEBUG_DIRECTORY);
#+ idd.PointerToRawData = asec->filepos + link_order->offset
#+ + sizeof (struct external_IMAGE_DEBUG_DIRECTORY);
#+
#+ struct external_IMAGE_DEBUG_DIRECTORY *ext = (struct external_IMAGE_DEBUG_DIRECTORY *)contents;
#+ _bfd_XXi_swap_debugdir_out (abfd, &idd, ext);
#+
#+ /* Write the debug directory enttry */
#+ if (bfd_seek (abfd, asec->filepos + link_order->offset, SEEK_SET) != 0)
#+ return 0;
#+
#+ if (bfd_bwrite (contents, size, abfd) != size)
#+ return 0;
#+
#+ /* Construct the CodeView record.  */
#+ CODEVIEW_INFO cvinfo;
#+ cvinfo.CVSignature = CVINFO_PDB70_CVSIGNATURE;
#+ cvinfo.Age = 1;
#+
#+ /* Zero pad or truncate the generated build_id to fit in the CodeView record.  */
#+ memset (&(cvinfo.Signature), 0, CV_INFO_SIGNATURE_LENGTH);
#+ memcpy (&(cvinfo.Signature), build_id, (build_id_size > CV_INFO_SIGNATURE_LENGTH)
#+        ? CV_INFO_SIGNATURE_LENGTH :  build_id_size);
#+
#+ free (build_id);
#+
#+ /* Write the codeview record.  */
#+ if (_bfd_XXi_write_codeview_record (abfd, idd.PointerToRawData, &cvinfo) == 0)
#+ return 0;
#+
#+ /* Record the location of the debug directory in the data directory.  */
#+ pe_data (link_info.output_bfd)->pe_opthdr.DataDirectory[PE_DEBUG_DATA].VirtualAddress
#+ = asec->vma  - ib + link_order->offset;
#+ pe_data (link_info.output_bfd)->pe_opthdr.DataDirectory[PE_DEBUG_DATA].Size
#+ = sizeof (struct external_IMAGE_DEBUG_DIRECTORY);
# 
#-  return true;
#+ return true;
# }
#@@ -1333,34 +1341,34 @@
# {
#-  asection *s;
#-  flagword flags;
#+ asection *s;
#+ flagword flags;
# 
#-  if (!validate_build_id_style (emit_build_id))
#-    {
#-      einfo (_("%P: warning: unrecognized --build-id style ignored\\n"));
#-      return false;
#-    }
#-
#-  flags = (SEC_HAS_CONTENTS | SEC_ALLOC | SEC_LOAD | SEC_IN_MEMORY
#-           | SEC_LINKER_CREATED | SEC_READONLY | SEC_DATA);
#-  s = bfd_make_section_anyway_with_flags (ibfd, ".buildid", flags);
#-  if (s != NULL)
#-    {
#-      struct pe_tdata *t = pe_data (link_info.output_bfd);
#-      t->build_id.after_write_object_contents = &write_build_id;
#-      t->build_id.style = emit_build_id;
#-      t->build_id.sec = s;
#-
#-      /* Section is a fixed size:
#-         One IMAGE_DEBUG_DIRECTORY entry, of type IMAGE_DEBUG_TYPE_CODEVIEW,
#-         pointing at a CV_INFO_PDB70 record containing the build-id, with a
#-         null byte for PdbFileName.  */
#-      s->size = sizeof (struct external_IMAGE_DEBUG_DIRECTORY)
#+ if (!validate_build_id_style (emit_build_id))
#+ {
#+ einfo (_("%P: warning: unrecognized --build-id style ignored\\n"));
#+ return false;
#+ }
#+
#+ flags = (SEC_HAS_CONTENTS | SEC_ALLOC | SEC_LOAD | SEC_IN_MEMORY
#+        | SEC_LINKER_CREATED | SEC_READONLY | SEC_DATA);
#+ s = bfd_make_section_anyway_with_flags (ibfd, ".buildid", flags);
#+ if (s != NULL)
#+ {
#+ struct pe_tdata *t = pe_data (link_info.output_bfd);
#+ t->build_id.after_write_object_contents = &write_build_id;
#+ t->build_id.style = emit_build_id;
#+ t->build_id.sec = s;
#+
#+ /* Section is a fixed size:
#+        One IMAGE_DEBUG_DIRECTORY entry, of type IMAGE_DEBUG_TYPE_CODEVIEW,
#+        pointing at a CV_INFO_PDB70 record containing the build-id, with a
#+        null byte for PdbFileName.  */
#+ s->size = sizeof (struct external_IMAGE_DEBUG_DIRECTORY)
#         + sizeof (CV_INFO_PDB70) + 1;
# 
#-      return true;
#-    }
#+ return true;
#+ }
# 
#-  einfo (_("%P: warning: cannot create .buildid section,"
#-           " --build-id ignored\\n"));
#-  return false;
#+ einfo (_("%P: warning: cannot create .buildid section,"
#+        " --build-id ignored\\n"));
#+ return false;
# }
#@@ -1370,112 +1378,112 @@
# {
#-  after_open_default ();
#+ after_open_default ();
# 
#-  is_underscoring ();
#+ is_underscoring ();
# #ifdef DLL_SUPPORT
#-  if (pep_dll_extra_pe_debug)
#-    {
#-      bfd *a;
#-      struct bfd_link_hash_entry *sym;
#+ if (pep_dll_extra_pe_debug)
#+ {
#+ bfd *a;
#+ struct bfd_link_hash_entry *sym;
# 
#-      printf ("%s()\\n", __FUNCTION__);
#+ printf ("%s()\\n", __FUNCTION__);
# 
#-      for (sym = link_info.hash->undefs; sym; sym=sym->u.undef.next)
#+ for (sym = link_info.hash->undefs; sym; sym=sym->u.undef.next)
#         printf ("-%s\\n", sym->root.string);
#-      bfd_hash_traverse (&link_info.hash->table, pr_sym, NULL);
#+ bfd_hash_traverse (&link_info.hash->table, pr_sym, NULL);
# 
#-      for (a = link_info.input_bfds; a; a = a->link.next)
#+ for (a = link_info.input_bfds; a; a = a->link.next)
#         printf ("*%s\\n", bfd_get_filename (a));
#-    }
#+ }
# #endif
# 
#-  if (emit_build_id != NULL)
#-    {
#-      bfd *abfd;
#-
#-      /* Find a COFF input.  */
#-      for (abfd = link_info.input_bfds;
#-           abfd != (bfd *) NULL; abfd = abfd->link.next)
#+ if (emit_build_id != NULL)
#+ {
#+ bfd *abfd;
#+
#+ /* Find a COFF input.  */
#+ for (abfd = link_info.input_bfds;
#+        abfd != (bfd *) NULL; abfd = abfd->link.next)
#         if (bfd_get_flavour (abfd) == bfd_target_coff_flavour)
#-          break;
#+        break;
# 
#-      /* If there are no COFF input files do not try to
#-         add a build-id section.  */
#-      if (abfd == NULL
#-          || !setup_build_id (abfd))
#-        {
#-          free ((char *) emit_build_id);
#-          emit_build_id = NULL;
#-        }
#-    }
#-
#-  /* Pass the wacky PE command line options into the output bfd.
#-     FIXME: This should be done via a function, rather than by
#-     including an internal BFD header.  */
#-
#-  if (bfd_get_flavour (link_info.output_bfd) != bfd_target_coff_flavour
#-      || coff_data (link_info.output_bfd) == NULL
#-      || coff_data (link_info.output_bfd)->pe == 0)
#-    einfo (_("%F%P: cannot perform PE operations on non PE output file '%pB'\\n"),
#-           link_info.output_bfd);
#-
#-  pe_data (link_info.output_bfd)->pe_opthdr = pep;
#-  pe_data (link_info.output_bfd)->dll = init[DLLOFF].value;
#-  pe_data (link_info.output_bfd)->real_flags |= real_flags;
#-  if (insert_timestamp)
#-    pe_data (link_info.output_bfd)->timestamp = -1;
#-  else
#-    pe_data (link_info.output_bfd)->timestamp = 0;
#-
#-  /* At this point we must decide whether to use long section names
#-     in the output or not.  If the user hasn't explicitly specified
#-     on the command line, we leave it to the default for the format
#-     (object files yes, image files no), except if there is debug
#-     information present; GDB relies on the long section names to
#-     find it, so enable it in that case.  */
#-  if (pep_use_coff_long_section_names < 0 && link_info.strip == strip_none)
#-    {
#-      if (bfd_link_relocatable (&link_info))
#+ /* If there are no COFF input files do not try to
#+        add a build-id section.  */
#+ if (abfd == NULL
#+        || !setup_build_id (abfd))
#+        {
#+        free ((char *) emit_build_id);
#+        emit_build_id = NULL;
#+        }
#+ }
#+
#+ /* Pass the wacky PE command line options into the output bfd.
#+ FIXME: This should be done via a function, rather than by
#+ including an internal BFD header.  */
#+
#+ if (bfd_get_flavour (link_info.output_bfd) != bfd_target_coff_flavour
#+ || coff_data (link_info.output_bfd) == NULL
#+ || coff_data (link_info.output_bfd)->pe == 0)
#+ einfo (_("%F%P: cannot perform PE operations on non PE output file '%pB'\\n"),
#+        link_info.output_bfd);
#+
#+ pe_data (link_info.output_bfd)->pe_opthdr = pep;
#+ pe_data (link_info.output_bfd)->dll = init[DLLOFF].value;
#+ pe_data (link_info.output_bfd)->real_flags |= real_flags;
#+ if (insert_timestamp)
#+ pe_data (link_info.output_bfd)->timestamp = -1;
#+ else
#+ pe_data (link_info.output_bfd)->timestamp = 0;
#+
#+ /* At this point we must decide whether to use long section names
#+ in the output or not.  If the user hasn't explicitly specified
#+ on the command line, we leave it to the default for the format
#+ (object files yes, image files no), except if there is debug
#+ information present; GDB relies on the long section names to
#+ find it, so enable it in that case.  */
#+ if (pep_use_coff_long_section_names < 0 && link_info.strip == strip_none)
#+ {
#+ if (bfd_link_relocatable (&link_info))
#         pep_use_coff_long_section_names = 1;
#-      else
#+ else
#+        {
#+        /* Iterate over all sections of all input BFDs, checking
#+        for any that begin 'debug_' and are long names.  */
#+        LANG_FOR_EACH_INPUT_STATEMENT (is)
#         {
#-          /* Iterate over all sections of all input BFDs, checking
#-             for any that begin 'debug_' and are long names.  */
#-          LANG_FOR_EACH_INPUT_STATEMENT (is)
#-          {
#-            int found_debug = 0;
#-
#-            bfd_map_over_sections (is->the_bfd, debug_section_p, &found_debug);
#-            if (found_debug)
#-              {
#-                pep_use_coff_long_section_names = 1;
#-                break;
#-              }
#-          }
#+        int found_debug = 0;
#+
#+        bfd_map_over_sections (is->the_bfd, debug_section_p, &found_debug);
#+        if (found_debug)
#+        {
#+        pep_use_coff_long_section_names = 1;
#+        break;
#+        }
#         }
#-    }
#+        }
#+ }
# 
#-  pep_output_file_set_long_section_names (link_info.output_bfd);
#+ pep_output_file_set_long_section_names (link_info.output_bfd);
# 
# #ifdef DLL_SUPPORT
#-  pep_process_import_defs (link_info.output_bfd, &link_info);
#+ pep_process_import_defs (link_info.output_bfd, &link_info);
# 
#-  if (link_info.pei386_auto_import) /* -1=warn or 1=enable */
#-    pep_find_data_imports (U ("_head_"), make_import_fixup);
#+ if (link_info.pei386_auto_import) /* -1=warn or 1=enable */
#+ pep_find_data_imports (U ("_head_"), make_import_fixup);
# 
#-  /* The implementation of the feature is rather dumb and would cause the
#-     compilation time to go through the roof if there are many undefined
#-     symbols in the link, so it needs to be run after auto-import.  */
#-  if (pep_enable_stdcall_fixup) /* -1=warn or 1=enable */
#-    pep_fixup_stdcalls ();
#+ /* The implementation of the feature is rather dumb and would cause the
#+ compilation time to go through the roof if there are many undefined
#+ symbols in the link, so it needs to be run after auto-import.  */
#+ if (pep_enable_stdcall_fixup) /* -1=warn or 1=enable */
#+ pep_fixup_stdcalls ();
# 
# #ifndef TARGET_IS_i386pep
#-  if (bfd_link_pic (&link_info))
#+ if (bfd_link_pic (&link_info))
# #else
#-  if (!bfd_link_relocatable (&link_info))
#+ if (!bfd_link_relocatable (&link_info))
# #endif
#-    pep_dll_build_sections (link_info.output_bfd, &link_info);
#+ pep_dll_build_sections (link_info.output_bfd, &link_info);
# 
# #ifndef TARGET_IS_i386pep
#-  else
#-    pep_exe_build_sections (link_info.output_bfd, &link_info);
#+ else
#+ pep_exe_build_sections (link_info.output_bfd, &link_info);
# #endif
#@@ -1483,212 +1491,212 @@
# 
#-  {
#-    /* This next chunk of code tries to detect the case where you have
#-       two import libraries for the same DLL (specifically,
#-       symbolically linking libm.a and libc.a in cygwin to
#-       libcygwin.a).  In those cases, it's possible for function
#-       thunks from the second implib to be used but without the
#-       head/tail objects, causing an improper import table.  We detect
#-       those cases and rename the "other" import libraries to match
#-       the one the head/tail come from, so that the linker will sort
#-       things nicely and produce a valid import table.  */
#+ {
#+ /* This next chunk of code tries to detect the case where you have
#+ two import libraries for the same DLL (specifically,
#+ symbolically linking libm.a and libc.a in cygwin to
#+ libcygwin.a).  In those cases, it's possible for function
#+ thunks from the second implib to be used but without the
#+ head/tail objects, causing an improper import table.  We detect
#+ those cases and rename the "other" import libraries to match
#+ the one the head/tail come from, so that the linker will sort
#+ things nicely and produce a valid import table.  */
# 
#-    LANG_FOR_EACH_INPUT_STATEMENT (is)
#-      {
#+ LANG_FOR_EACH_INPUT_STATEMENT (is)
#+ {
#         if (is->the_bfd->my_archive)
#-          {
#-            int idata2 = 0, reloc_count=0, is_imp = 0;
#-            asection *sec;
#-
#-            /* See if this is an import library thunk.  */
#-            for (sec = is->the_bfd->sections; sec; sec = sec->next)
#-              {
#-                if (strcmp (sec->name, ".idata\\\$2") == 0)
#-                  idata2 = 1;
#-                if (startswith (sec->name, ".idata\\\$"))
#-                  is_imp = 1;
#-                reloc_count += sec->reloc_count;
#-              }
#-
#-            if (is_imp && !idata2 && reloc_count)
#-              {
#-                /* It is, look for the reference to head and see if it's
#-                   from our own library.  */
#-                for (sec = is->the_bfd->sections; sec; sec = sec->next)
#-                  {
#-                    int i;
#-                    long relsize;
#-                    asymbol **symbols;
#-                    arelent **relocs;
#-                    int nrelocs;
#-
#-                    relsize = bfd_get_reloc_upper_bound (is->the_bfd, sec);
#-                    if (relsize < 1)
#-                      break;
#-
#-                    if (!bfd_generic_link_read_symbols (is->the_bfd))
#-                      {
#-                        einfo (_("%F%P: %pB: could not read symbols: %E\\n"),
#-                               is->the_bfd);
#-                        return;
#-                      }
#-                    symbols = bfd_get_outsymbols (is->the_bfd);
#-
#-                    relocs = xmalloc ((size_t) relsize);
#-                    nrelocs = bfd_canonicalize_reloc (is->the_bfd, sec,
#-                                                      relocs, symbols);
#-                    if (nrelocs < 0)
#-                      {
#-                        free (relocs);
#-                        einfo (_("%X%P: unable to process relocs: %E\\n"));
#-                        return;
#-                      }
#-
#-                    for (i = 0; i < nrelocs; i++)
#-                      {
#-                        struct bfd_symbol *s;
#-                        struct bfd_link_hash_entry * blhe;
#-                        const char *other_bfd_filename;
#-
#-                        s = (relocs[i]->sym_ptr_ptr)[0];
#-
#-                        if (s->flags & BSF_LOCAL)
#-                          continue;
#-
#-                        /* Thunk section with reloc to another bfd.  */
#-                        blhe = bfd_link_hash_lookup (link_info.hash,
#-                                                     s->name,
#-                                                     false, false, true);
#-
#-                        if (blhe == NULL
#-                            || blhe->type != bfd_link_hash_defined)
#-                          continue;
#-
#-                        other_bfd_filename
#-                          = blhe->u.def.section->owner->my_archive
#-                            ? bfd_get_filename (blhe->u.def.section->owner->my_archive)
#-                            : bfd_get_filename (blhe->u.def.section->owner);
#-
#-                        if (filename_cmp (bfd_get_filename
#-                                            (is->the_bfd->my_archive),
#-                                          other_bfd_filename) == 0)
#-                          continue;
#-
#-                        /* Rename this implib to match the other one.  */
#-                        if (!bfd_set_filename (is->the_bfd->my_archive,
#-                                               other_bfd_filename))
#-                          einfo ("%F%P: %pB: %E\\n", is->the_bfd);
#-                      }
#-
#-                    free (relocs);
#-                    /* Note - we do not free the symbols,
#-                       they are now cached in the BFD.  */
#-                  }
#-              }
#-          }
#-      }
#-  }
#-
#-  {
#-    int is_ms_arch = 0;
#-    bfd *cur_arch = 0;
#-    lang_input_statement_type *is2;
#-    lang_input_statement_type *is3;
#-
#-    /* Careful - this is a shell script.  Watch those dollar signs! */
#-    /* Microsoft import libraries have every member named the same,
#-       and not in the right order for us to link them correctly.  We
#-       must detect these and rename the members so that they'll link
#-       correctly.  There are three types of objects: the head, the
#-       thunks, and the sentinel(s).  The head is easy; it's the one
#-       with idata2.  We assume that the sentinels won't have relocs,
#-       and the thunks will.  It's easier than checking the symbol
#-       table for external references.  */
#-    LANG_FOR_EACH_INPUT_STATEMENT (is)
#-      {
#+        {
#+        int idata2 = 0, reloc_count=0, is_imp = 0;
#+        asection *sec;
#+
#+        /* See if this is an import library thunk.  */
#+        for (sec = is->the_bfd->sections; sec; sec = sec->next)
#+        {
#+        if (strcmp (sec->name, ".idata\\\$2") == 0)
#+        idata2 = 1;
#+        if (startswith (sec->name, ".idata\\\$"))
#+        is_imp = 1;
#+        reloc_count += sec->reloc_count;
#+        }
#+
#+        if (is_imp && !idata2 && reloc_count)
#+        {
#+        /* It is, look for the reference to head and see if it's
#+        from our own library.  */
#+        for (sec = is->the_bfd->sections; sec; sec = sec->next)
#+        {
#+        int i;
#+        long relsize;
#+        asymbol **symbols;
#+        arelent **relocs;
#+        int nrelocs;
#+
#+        relsize = bfd_get_reloc_upper_bound (is->the_bfd, sec);
#+        if (relsize < 1)
#+        break;
#+
#+        if (!bfd_generic_link_read_symbols (is->the_bfd))
#+        {
#+        einfo (_("%F%P: %pB: could not read symbols: %E\\n"),
#+        is->the_bfd);
#+        return;
#+        }
#+        symbols = bfd_get_outsymbols (is->the_bfd);
#+
#+        relocs = xmalloc ((size_t) relsize);
#+        nrelocs = bfd_canonicalize_reloc (is->the_bfd, sec,
#+        relocs, symbols);
#+        if (nrelocs < 0)
#+        {
#+        free (relocs);
#+        einfo (_("%X%P: unable to process relocs: %E\\n"));
#+        return;
#+        }
#+
#+        for (i = 0; i < nrelocs; i++)
#+        {
#+        struct bfd_symbol *s;
#+        struct bfd_link_hash_entry * blhe;
#+        const char *other_bfd_filename;
#+
#+        s = (relocs[i]->sym_ptr_ptr)[0];
#+
#+        if (s->flags & BSF_LOCAL)
#+        continue;
#+
#+        /* Thunk section with reloc to another bfd.  */
#+        blhe = bfd_link_hash_lookup (link_info.hash,
#+        s->name,
#+        false, false, true);
#+
#+        if (blhe == NULL
#+        || blhe->type != bfd_link_hash_defined)
#+        continue;
#+
#+        other_bfd_filename
#+        = blhe->u.def.section->owner->my_archive
#+        ? bfd_get_filename (blhe->u.def.section->owner->my_archive)
#+        : bfd_get_filename (blhe->u.def.section->owner);
#+
#+        if (filename_cmp (bfd_get_filename
#+        (is->the_bfd->my_archive),
#+        other_bfd_filename) == 0)
#+        continue;
#+
#+        /* Rename this implib to match the other one.  */
#+        if (!bfd_set_filename (is->the_bfd->my_archive,
#+        other_bfd_filename))
#+        einfo ("%F%P: %pB: %E\\n", is->the_bfd);
#+        }
#+
#+        free (relocs);
#+        /* Note - we do not free the symbols,
#+        they are now cached in the BFD.  */
#+        }
#+        }
#+        }
#+ }
#+ }
#+
#+ {
#+ int is_ms_arch = 0;
#+ bfd *cur_arch = 0;
#+ lang_input_statement_type *is2;
#+ lang_input_statement_type *is3;
#+
#+ /* Careful - this is a shell script.  Watch those dollar signs! */
#+ /* Microsoft import libraries have every member named the same,
#+ and not in the right order for us to link them correctly.  We
#+ must detect these and rename the members so that they'll link
#+ correctly.  There are three types of objects: the head, the
#+ thunks, and the sentinel(s).  The head is easy; it's the one
#+ with idata2.  We assume that the sentinels won't have relocs,
#+ and the thunks will.  It's easier than checking the symbol
#+ table for external references.  */
#+ LANG_FOR_EACH_INPUT_STATEMENT (is)
#+ {
#         if (is->the_bfd->my_archive)
#-          {
#-            char *pnt;
#-            bfd *arch = is->the_bfd->my_archive;
#-
#-            if (cur_arch != arch)
#-              {
#-                cur_arch = arch;
#-                is_ms_arch = 1;
#-
#-                for (is3 = is;
#-                     is3 && is3->the_bfd->my_archive == arch;
#-                     is3 = (lang_input_statement_type *) is3->next)
#-                  {
#-                    /* A MS dynamic import library can also contain static
#-                       members, so look for the first element with a .dll
#-                       extension, and use that for the remainder of the
#-                       comparisons.  */
#-                    pnt = strrchr (bfd_get_filename (is3->the_bfd), '.');
#-                    if (pnt != NULL && filename_cmp (pnt, ".dll") == 0)
#-                      break;
#-                  }
#-
#-                if (is3 == NULL)
#-                  is_ms_arch = 0;
#-                else
#-                  {
#-                    /* OK, found one.  Now look to see if the remaining
#-                       (dynamic import) members use the same name.  */
#-                    for (is2 = is;
#-                         is2 && is2->the_bfd->my_archive == arch;
#-                         is2 = (lang_input_statement_type *) is2->next)
#-                      {
#-                        /* Skip static members, ie anything with a .obj
#-                           extension.  */
#-                        pnt = strrchr (bfd_get_filename (is2->the_bfd), '.');
#-                        if (pnt != NULL && filename_cmp (pnt, ".obj") == 0)
#-                          continue;
#-
#-                        if (filename_cmp (bfd_get_filename (is3->the_bfd),
#-                                          bfd_get_filename (is2->the_bfd)))
#-                          {
#-                            is_ms_arch = 0;
#-                            break;
#-                          }
#-                      }
#-                  }
#-              }
#-
#-            /* This fragment might have come from an .obj file in a Microsoft
#-               import, and not an actual import record. If this is the case,
#-               then leave the filename alone.  */
#-            pnt = strrchr (bfd_get_filename (is->the_bfd), '.');
#-
#-            if (is_ms_arch && (filename_cmp (pnt, ".dll") == 0))
#-              {
#-                int idata2 = 0, reloc_count=0;
#-                asection *sec;
#-                char *new_name, seq;
#-
#-                for (sec = is->the_bfd->sections; sec; sec = sec->next)
#-                  {
#-                    if (strcmp (sec->name, ".idata\\\$2") == 0)
#-                      idata2 = 1;
#-                    reloc_count += sec->reloc_count;
#-                  }
#-
#-                if (idata2) /* .idata2 is the TOC */
#-                  seq = 'a';
#-                else if (reloc_count > 0) /* thunks */
#-                  seq = 'b';
#-                else /* sentinel */
#-                  seq = 'c';
#-
#-                new_name
#-                  = xmalloc (strlen (bfd_get_filename (is->the_bfd)) + 3);
#-                sprintf (new_name, "%s.%c",
#-                         bfd_get_filename (is->the_bfd), seq);
#-                is->filename = bfd_set_filename (is->the_bfd, new_name);
#-                free (new_name);
#-                if (!is->filename)
#-                  einfo ("%F%P: %pB: %E\\n", is->the_bfd);
#-              }
#-          }
#-      }
#-  }
#+        {
#+        char *pnt;
#+        bfd *arch = is->the_bfd->my_archive;
#+
#+        if (cur_arch != arch)
#+        {
#+        cur_arch = arch;
#+        is_ms_arch = 1;
#+
#+        for (is3 = is;
#+        is3 && is3->the_bfd->my_archive == arch;
#+        is3 = (lang_input_statement_type *) is3->next)
#+        {
#+        /* A MS dynamic import library can also contain static
#+        members, so look for the first element with a .dll
#+        extension, and use that for the remainder of the
#+        comparisons.  */
#+        pnt = strrchr (bfd_get_filename (is3->the_bfd), '.');
#+        if (pnt != NULL && filename_cmp (pnt, ".dll") == 0)
#+        break;
#+        }
#+
#+        if (is3 == NULL)
#+        is_ms_arch = 0;
#+        else
#+        {
#+        /* OK, found one.  Now look to see if the remaining
#+        (dynamic import) members use the same name.  */
#+        for (is2 = is;
#+        is2 && is2->the_bfd->my_archive == arch;
#+        is2 = (lang_input_statement_type *) is2->next)
#+        {
#+        /* Skip static members, ie anything with a .obj
#+        extension.  */
#+        pnt = strrchr (bfd_get_filename (is2->the_bfd), '.');
#+        if (pnt != NULL && filename_cmp (pnt, ".obj") == 0)
#+        continue;
#+
#+        if (filename_cmp (bfd_get_filename (is3->the_bfd),
#+        bfd_get_filename (is2->the_bfd)))
#+        {
#+        is_ms_arch = 0;
#+        break;
#+        }
#+        }
#+        }
#+        }
#+
#+        /* This fragment might have come from an .obj file in a Microsoft
#+        import, and not an actual import record. If this is the case,
#+        then leave the filename alone.  */
#+        pnt = strrchr (bfd_get_filename (is->the_bfd), '.');
#+
#+        if (is_ms_arch && (filename_cmp (pnt, ".dll") == 0))
#+        {
#+        int idata2 = 0, reloc_count=0;
#+        asection *sec;
#+        char *new_name, seq;
#+
#+        for (sec = is->the_bfd->sections; sec; sec = sec->next)
#+        {
#+        if (strcmp (sec->name, ".idata\\\$2") == 0)
#+        idata2 = 1;
#+        reloc_count += sec->reloc_count;
#+        }
#+
#+        if (idata2) /* .idata2 is the TOC */
#+        seq = 'a';
#+        else if (reloc_count > 0) /* thunks */
#+        seq = 'b';
#+        else /* sentinel */
#+        seq = 'c';
#+
#+        new_name
#+        = xmalloc (strlen (bfd_get_filename (is->the_bfd)) + 3);
#+        sprintf (new_name, "%s.%c",
#+        bfd_get_filename (is->the_bfd), seq);
#+        is->filename = bfd_set_filename (is->the_bfd, new_name);
#+        free (new_name);
#+        if (!is->filename)
#+        einfo ("%F%P: %pB: %E\\n", is->the_bfd);
#+        }
#+        }
#+ }
#+ }
# }
#@@ -1698,4 +1706,4 @@
# {
#-  is_underscoring ();
#-  before_allocation_default ();
#+ is_underscoring ();
#+ before_allocation_default ();
# }
#@@ -1704,3 +1712,3 @@
# /* This is called when an input file isn't recognized as a BFD.  We
#-   check here for .DEF files and pull them in automatically.  */
#+ check here for .DEF files and pull them in automatically.  */
# 
#@@ -1709,10 +1717,10 @@
# {
#-  int i;
#+ int i;
# 
#-  is_underscoring ();
#+ is_underscoring ();
# 
#-  for (i = 0; init[i].ptr; i++)
#-    if (strcmp (GET_INIT_SYMBOL_NAME (i), option) == 0)
#-      return init[i].inited;
#-  return 0;
#+ for (i = 0; init[i].ptr; i++)
#+ if (strcmp (GET_INIT_SYMBOL_NAME (i), option) == 0)
#+ return init[i].inited;
#+ return 0;
# }
#@@ -1724,77 +1732,77 @@
# #ifdef DLL_SUPPORT
#-  const char *ext = entry->filename + strlen (entry->filename) - 4;
#+ const char *ext = entry->filename + strlen (entry->filename) - 4;
#+
#+ if (filename_cmp (ext, ".def") == 0 || filename_cmp (ext, ".DEF") == 0)
#+ {
#+ pep_def_file = def_file_parse (entry->filename, pep_def_file);
#+
#+ if (pep_def_file)
#+        {
#+        int i, buflen=0, len;
#+        char *buf;
# 
#-  if (filename_cmp (ext, ".def") == 0 || filename_cmp (ext, ".DEF") == 0)
#-    {
#-      pep_def_file = def_file_parse (entry->filename, pep_def_file);
#-
#-      if (pep_def_file)
#-        {
#-          int i, buflen=0, len;
#-          char *buf;
#-
#-          for (i = 0; i < pep_def_file->num_exports; i++)
#-            {
#-              len = strlen (pep_def_file->exports[i].internal_name);
#-              if (buflen < len + 2)
#-                buflen = len + 2;
#-            }
#-
#-          buf = xmalloc (buflen);
#-
#-          for (i = 0; i < pep_def_file->num_exports; i++)
#-            {
#-              struct bfd_link_hash_entry *h;
#-
#-              sprintf (buf, "%s%s", U (""),
#-                       pep_def_file->exports[i].internal_name);
#-
#-              h = bfd_link_hash_lookup (link_info.hash, buf, true, true, true);
#-              if (h == (struct bfd_link_hash_entry *) NULL)
#-                einfo (_("%F%P: bfd_link_hash_lookup failed: %E\\n"));
#-              if (h->type == bfd_link_hash_new)
#-                {
#-                  h->type = bfd_link_hash_undefined;
#-                  h->u.undef.abfd = NULL;
#-                  bfd_link_add_undef (link_info.hash, h);
#-                }
#-            }
#-          free (buf);
#-
#-          /* def_file_print (stdout, pep_def_file); */
#-          if (pep_def_file->is_dll == 1)
#-            link_info.type = type_dll;
#-
#-          if (pep_def_file->base_address != (bfd_vma)(-1))
#-            {
#-              pep.ImageBase
#-                = pe_data (link_info.output_bfd)->pe_opthdr.ImageBase
#-                = init[IMAGEBASEOFF].value
#-                = pep_def_file->base_address;
#-              init[IMAGEBASEOFF].inited = 1;
#-              if (image_base_statement)
#-                image_base_statement->exp
#-                  = exp_assign ("__image_base__", exp_intop (pep.ImageBase),
#-                                false);
#-            }
#-
#-          if (pep_def_file->stack_reserve != -1
#-              && ! saw_option ("__size_of_stack_reserve__"))
#-            {
#-              pep.SizeOfStackReserve = pep_def_file->stack_reserve;
#-              if (pep_def_file->stack_commit != -1)
#-                pep.SizeOfStackCommit = pep_def_file->stack_commit;
#-            }
#-          if (pep_def_file->heap_reserve != -1
#-              && ! saw_option ("__size_of_heap_reserve__"))
#-            {
#-              pep.SizeOfHeapReserve = pep_def_file->heap_reserve;
#-              if (pep_def_file->heap_commit != -1)
#-                pep.SizeOfHeapCommit = pep_def_file->heap_commit;
#-            }
#-          return true;
#+        for (i = 0; i < pep_def_file->num_exports; i++)
#+        {
#+        len = strlen (pep_def_file->exports[i].internal_name);
#+        if (buflen < len + 2)
#+        buflen = len + 2;
#+        }
#+
#+        buf = xmalloc (buflen);
#+
#+        for (i = 0; i < pep_def_file->num_exports; i++)
#+        {
#+        struct bfd_link_hash_entry *h;
#+
#+        sprintf (buf, "%s%s", U (""),
#+        pep_def_file->exports[i].internal_name);
#+
#+        h = bfd_link_hash_lookup (link_info.hash, buf, true, true, true);
#+        if (h == (struct bfd_link_hash_entry *) NULL)
#+        einfo (_("%F%P: bfd_link_hash_lookup failed: %E\\n"));
#+        if (h->type == bfd_link_hash_new)
#+        {
#+        h->type = bfd_link_hash_undefined;
#+        h->u.undef.abfd = NULL;
#+        bfd_link_add_undef (link_info.hash, h);
#+        }
#+        }
#+        free (buf);
#+
#+        /* def_file_print (stdout, pep_def_file); */
#+        if (pep_def_file->is_dll == 1)
#+        link_info.type = type_dll;
#+
#+        if (pep_def_file->base_address != (bfd_vma)(-1))
#+        {
#+        pep.ImageBase
#+        = pe_data (link_info.output_bfd)->pe_opthdr.ImageBase
#+        = init[IMAGEBASEOFF].value
#+        = pep_def_file->base_address;
#+        init[IMAGEBASEOFF].inited = 1;
#+        if (image_base_statement)
#+        image_base_statement->exp
#+        = exp_assign ("__image_base__", exp_intop (pep.ImageBase),
#+        false);
#+        }
#+
#+        if (pep_def_file->stack_reserve != -1
#+        && ! saw_option ("__size_of_stack_reserve__"))
#+        {
#+        pep.SizeOfStackReserve = pep_def_file->stack_reserve;
#+        if (pep_def_file->stack_commit != -1)
#+        pep.SizeOfStackCommit = pep_def_file->stack_commit;
#+        }
#+        if (pep_def_file->heap_reserve != -1
#+        && ! saw_option ("__size_of_heap_reserve__"))
#+        {
#+        pep.SizeOfHeapReserve = pep_def_file->heap_reserve;
#+        if (pep_def_file->heap_commit != -1)
#+        pep.SizeOfHeapCommit = pep_def_file->heap_commit;
#         }
#-    }
#+        return true;
#+        }
#+ }
# #endif
#-  return false;
#+ return false;
# }
#@@ -1804,11 +1812,11 @@
# {
#-  is_underscoring ();
#+ is_underscoring ();
# #ifdef DLL_SUPPORT
# #ifdef TARGET_IS_i386pep
#-  pep_dll_id_target ("pei-x86-64");
#+ pep_dll_id_target ("pei-x86-64");
# #endif
#-  if (pep_bfd_is_dll (entry->the_bfd))
#-    return pep_implied_import_dll (entry->filename);
#+ if (pep_bfd_is_dll (entry->the_bfd))
#+ return pep_implied_import_dll (entry->filename);
# #endif
#-  return false;
#+ return false;
# }
#@@ -1818,33 +1826,33 @@
# {
#-  is_underscoring ();
#-  finish_default ();
#+ is_underscoring ();
#+ finish_default ();
# 
# #ifdef DLL_SUPPORT
#-  if (bfd_link_pic (&link_info)
#-      || pep_dll_enable_reloc_section
#-      || (!bfd_link_relocatable (&link_info)
#-          && pep_def_file->num_exports != 0))
#-    {
#-      pep_dll_fill_sections (link_info.output_bfd, &link_info);
#-      if (command_line.out_implib_filename
#-          && (pep_def_file->num_exports != 0
#-              || bfd_link_pic (&link_info)))
#+ if (bfd_link_pic (&link_info)
#+ || pep_dll_enable_reloc_section
#+ || (!bfd_link_relocatable (&link_info)
#+        && pep_def_file->num_exports != 0))
#+ {
#+ pep_dll_fill_sections (link_info.output_bfd, &link_info);
#+ if (command_line.out_implib_filename
#+ && (pep_def_file->num_exports != 0
#+ || bfd_link_pic (&link_info)))
#         pep_dll_generate_implib (pep_def_file,
#-                                 command_line.out_implib_filename, &link_info);
#-    }
#+        command_line.out_implib_filename, &link_info);
#+ }
# 
#-  if (pep_out_def_filename)
#-    pep_dll_generate_def_file (pep_out_def_filename);
#+ if (pep_out_def_filename)
#+ pep_dll_generate_def_file (pep_out_def_filename);
# #endif /* DLL_SUPPORT */
# 
#-  /* I don't know where .idata gets set as code, but it shouldn't be.  */
#-  {
#-    asection *asec = bfd_get_section_by_name (link_info.output_bfd, ".idata");
#+ /* I don't know where .idata gets set as code, but it shouldn't be.  */
#+ {
#+ asection *asec = bfd_get_section_by_name (link_info.output_bfd, ".idata");
# 
#-    if (asec)
#-      {
#+ if (asec)
#+ {
#         asec->flags &= ~SEC_CODE;
#         asec->flags |= SEC_DATA;
#-      }
#-  }
#+ }
#+ }
# }
#@@ -1854,12 +1862,12 @@
# 
#-   We use this to put sections in a reasonable place in the file, and
#-   to ensure that they are aligned as required.
#+ We use this to put sections in a reasonable place in the file, and
#+ to ensure that they are aligned as required.
# 
#-   We handle grouped sections here as well.  A section named .foo\\\$nn
#-   goes into the output section .foo.  All grouped sections are sorted
#-   by name.
#-
#-   Grouped sections for the default sections are handled by the
#-   default linker script using wildcards, and are sorted by
#-   sort_sections.  */
#+ We handle grouped sections here as well.  A section named .foo\\\$nn
#+ goes into the output section .foo.  All grouped sections are sorted
#+ by name.
#+
#+ Grouped sections for the default sections are handled by the
#+ default linker script using wildcards, and are sorted by
#+ sort_sections.  */
# 
#@@ -1867,33 +1875,33 @@
# gld\${EMULATION_NAME}_place_orphan (asection *s,
#-                                    const char *secname,
#-                                    int constraint)
#+        const char *secname,
#+        int constraint)
# {
#-  const char *orig_secname = secname;
#-  char *dollar = NULL;
#-  lang_output_section_statement_type *os;
#-  lang_statement_list_type add_child;
#-  lang_output_section_statement_type *match_by_name = NULL;
#-  lang_statement_union_type **pl;
#-
#-  /* Look through the script to see where to place this section.  */
#-  if (!bfd_link_relocatable (&link_info)
#-      && (dollar = strchr (secname, '\\\$')) != NULL)
#-    {
#-      size_t len = dollar - secname;
#-      char *newname = xmalloc (len + 1);
#-      memcpy (newname, secname, len);
#-      newname[len] = '\\0';
#-      secname = newname;
#-    }
#-
#-  lang_list_init (&add_child);
#-
#-  os = NULL;
#-  if (constraint == 0)
#-    for (os = lang_output_section_find (secname);
#-         os != NULL;
#-         os = next_matching_output_section_statement (os, 0))
#-      {
#+ const char *orig_secname = secname;
#+ char *dollar = NULL;
#+ lang_output_section_statement_type *os;
#+ lang_statement_list_type add_child;
#+ lang_output_section_statement_type *match_by_name = NULL;
#+ lang_statement_union_type **pl;
#+
#+ /* Look through the script to see where to place this section.  */
#+ if (!bfd_link_relocatable (&link_info)
#+ && (dollar = strchr (secname, '\\\$')) != NULL)
#+ {
#+ size_t len = dollar - secname;
#+ char *newname = xmalloc (len + 1);
#+ memcpy (newname, secname, len);
#+ newname[len] = '\\0';
#+ secname = newname;
#+ }
#+
#+ lang_list_init (&add_child);
#+
#+ os = NULL;
#+ if (constraint == 0)
#+ for (os = lang_output_section_find (secname);
#+        os != NULL;
#+        os = next_matching_output_section_statement (os, 0))
#+ {
#         /* If we don't match an existing output section, tell
#-           lang_insert_orphan to create a new output section.  */
#+        lang_insert_orphan to create a new output section.  */
#         constraint = SPECIAL;
#@@ -1901,163 +1909,163 @@
#         if (os->bfd_section != NULL
#-            && (os->bfd_section->flags == 0
#-                || ((s->flags ^ os->bfd_section->flags)
#-                    & (SEC_LOAD | SEC_ALLOC)) == 0))
#-          {
#-            /* We already have an output section statement with this
#-               name, and its bfd section has compatible flags.
#-               If the section already exists but does not have any flags set,
#-               then it has been created by the linker, probably as a result of
#-               a --section-start command line switch.  */
#-            lang_add_section (&add_child, s, NULL, NULL, os);
#-            break;
#-          }
#+        && (os->bfd_section->flags == 0
#+        || ((s->flags ^ os->bfd_section->flags)
#+        & (SEC_LOAD | SEC_ALLOC)) == 0))
#+        {
#+        /* We already have an output section statement with this
#+        name, and its bfd section has compatible flags.
#+        If the section already exists but does not have any flags set,
#+        then it has been created by the linker, probably as a result of
#+        a --section-start command line switch.  */
#+        lang_add_section (&add_child, s, NULL, NULL, os);
#+        break;
#+        }
# 
#         /* Save unused output sections in case we can match them
#-           against orphans later.  */
#+        against orphans later.  */
#         if (os->bfd_section == NULL)
#-          match_by_name = os;
#-      }
#+        match_by_name = os;
#+ }
# 
#-  /* If we didn't match an active output section, see if we matched an
#-     unused one and use that.  */
#-  if (os == NULL && match_by_name)
#-    {
#-      lang_add_section (&match_by_name->children, s, NULL, NULL, match_by_name);
#-      return match_by_name;
#-    }
#-
#-  if (os == NULL)
#-    {
#-      static struct orphan_save hold[] =
#-        {
#-          { ".text",
#-            SEC_HAS_CONTENTS | SEC_ALLOC | SEC_LOAD | SEC_READONLY | SEC_CODE,
#-            0, 0, 0, 0 },
#-          { ".idata",
#-            SEC_HAS_CONTENTS | SEC_ALLOC | SEC_LOAD | SEC_READONLY | SEC_DATA,
#-            0, 0, 0, 0 },
#-          { ".rdata",
#-            SEC_HAS_CONTENTS | SEC_ALLOC | SEC_LOAD | SEC_READONLY | SEC_DATA,
#-            0, 0, 0, 0 },
#-          { ".data",
#-            SEC_HAS_CONTENTS | SEC_ALLOC | SEC_LOAD | SEC_DATA,
#-            0, 0, 0, 0 },
#-          { ".bss",
#-            SEC_ALLOC,
#-            0, 0, 0, 0 }
#+ /* If we didn't match an active output section, see if we matched an
#+ unused one and use that.  */
#+ if (os == NULL && match_by_name)
#+ {
#+ lang_add_section (&match_by_name->children, s, NULL, NULL, match_by_name);
#+ return match_by_name;
#+ }
#+
#+ if (os == NULL)
#+ {
#+ static struct orphan_save hold[] =
#+        {
#+        { ".text",
#+        SEC_HAS_CONTENTS | SEC_ALLOC | SEC_LOAD | SEC_READONLY | SEC_CODE,
#+        0, 0, 0, 0 },
#+        { ".idata",
#+        SEC_HAS_CONTENTS | SEC_ALLOC | SEC_LOAD | SEC_READONLY | SEC_DATA,
#+        0, 0, 0, 0 },
#+        { ".rdata",
#+        SEC_HAS_CONTENTS | SEC_ALLOC | SEC_LOAD | SEC_READONLY | SEC_DATA,
#+        0, 0, 0, 0 },
#+        { ".data",
#+        SEC_HAS_CONTENTS | SEC_ALLOC | SEC_LOAD | SEC_DATA,
#+        0, 0, 0, 0 },
#+        { ".bss",
#+        SEC_ALLOC,
#+        0, 0, 0, 0 }
#         };
#-      enum orphan_save_index
#+ enum orphan_save_index
#         {
#-          orphan_text = 0,
#-          orphan_idata,
#-          orphan_rodata,
#-          orphan_data,
#-          orphan_bss
#+        orphan_text = 0,
#+        orphan_idata,
#+        orphan_rodata,
#+        orphan_data,
#+        orphan_bss
#         };
#-      static int orphan_init_done = 0;
#-      struct orphan_save *place;
#-      lang_output_section_statement_type *after;
#-      etree_type *address;
#-      flagword flags;
#-      asection *nexts;
#-
#-      if (!orphan_init_done)
#-        {
#-          struct orphan_save *ho;
#-          for (ho = hold; ho < hold + sizeof (hold) / sizeof (hold[0]); ++ho)
#-            if (ho->name != NULL)
#-              {
#-                ho->os = lang_output_section_find (ho->name);
#-                if (ho->os != NULL && ho->os->flags == 0)
#-                  ho->os->flags = ho->flags;
#-              }
#-          orphan_init_done = 1;
#-        }
#-
#-      flags = s->flags;
#-      if (!bfd_link_relocatable (&link_info))
#-        {
#-          nexts = s;
#-          while ((nexts = bfd_get_next_section_by_name (nexts->owner,
#-                                                        nexts)))
#-            if (nexts->output_section == NULL
#-                && (nexts->flags & SEC_EXCLUDE) == 0
#-                && ((nexts->flags ^ flags) & (SEC_LOAD | SEC_ALLOC)) == 0
#-                && (nexts->owner->flags & DYNAMIC) == 0
#-                && !bfd_input_just_syms (nexts->owner))
#-              flags = (((flags ^ SEC_READONLY)
#-                        | (nexts->flags ^ SEC_READONLY))
#-                       ^ SEC_READONLY);
#+ static int orphan_init_done = 0;
#+ struct orphan_save *place;
#+ lang_output_section_statement_type *after;
#+ etree_type *address;
#+ flagword flags;
#+ asection *nexts;
#+
#+ if (!orphan_init_done)
#+        {
#+        struct orphan_save *ho;
#+        for (ho = hold; ho < hold + sizeof (hold) / sizeof (hold[0]); ++ho)
#+        if (ho->name != NULL)
#+        {
#+        ho->os = lang_output_section_find (ho->name);
#+        if (ho->os != NULL && ho->os->flags == 0)
#+        ho->os->flags = ho->flags;
#+        }
#+        orphan_init_done = 1;
#         }
# 
#-      /* Try to put the new output section in a reasonable place based
#-         on the section name and section flags.  */
#+ flags = s->flags;
#+ if (!bfd_link_relocatable (&link_info))
#+        {
#+        nexts = s;
#+        while ((nexts = bfd_get_next_section_by_name (nexts->owner,
#+        nexts)))
#+        if (nexts->output_section == NULL
#+        && (nexts->flags & SEC_EXCLUDE) == 0
#+        && ((nexts->flags ^ flags) & (SEC_LOAD | SEC_ALLOC)) == 0
#+        && (nexts->owner->flags & DYNAMIC) == 0
#+        && !bfd_input_just_syms (nexts->owner))
#+        flags = (((flags ^ SEC_READONLY)
#+        | (nexts->flags ^ SEC_READONLY))
#+        ^ SEC_READONLY);
#+        }
#+
#+ /* Try to put the new output section in a reasonable place based
#+        on the section name and section flags.  */
# 
#-      place = NULL;
#-      if ((flags & SEC_ALLOC) == 0)
#+ place = NULL;
#+ if ((flags & SEC_ALLOC) == 0)
#         ;
#-      else if ((flags & (SEC_LOAD | SEC_HAS_CONTENTS)) == 0)
#+ else if ((flags & (SEC_LOAD | SEC_HAS_CONTENTS)) == 0)
#         place = &hold[orphan_bss];
#-      else if ((flags & SEC_READONLY) == 0)
#+ else if ((flags & SEC_READONLY) == 0)
#         place = &hold[orphan_data];
#-      else if ((flags & SEC_CODE) == 0)
#+ else if ((flags & SEC_CODE) == 0)
#         {
#-          place = (!strncmp (secname, ".idata\\\$", 7) ? &hold[orphan_idata]
#-                                                     : &hold[orphan_rodata]);
#+        place = (!strncmp (secname, ".idata\\\$", 7) ? &hold[orphan_idata]
#+        : &hold[orphan_rodata]);
#         }
#-      else
#+ else
#         place = &hold[orphan_text];
# 
#-      after = NULL;
#-      if (place != NULL)
#+ after = NULL;
#+ if (place != NULL)
#         {
#-          if (place->os == NULL)
#-            place->os = lang_output_section_find (place->name);
#-          after = place->os;
#-          if (after == NULL)
#-            after = lang_output_section_find_by_flags (s, flags, &place->os,
#-                                                       NULL);
#-          if (after == NULL)
#-            /* *ABS* is always the first output section statement.  */
#-            after = (void *) lang_os_list.head;
#-        }
#-
#-      /* All sections in an executable must be aligned to a page boundary.
#-         In a relocatable link, just preserve the incoming alignment; the
#-         address is discarded by lang_insert_orphan in that case, anyway.  */
#-      address = exp_unop (ALIGN_K, exp_nameop (NAME, "__section_alignment__"));
#-      os = lang_insert_orphan (s, secname, constraint, after, place, address,
#-                               &add_child);
#-      if (bfd_link_relocatable (&link_info))
#-        {
#-          os->section_alignment = exp_intop (1U << s->alignment_power);
#-          os->bfd_section->alignment_power = s->alignment_power;
#-        }
#-    }
#-
#-  /* If the section name has a '\\\$', sort it with the other '\\\$'
#-     sections.  */
#-  for (pl = &os->children.head; *pl != NULL; pl = &(*pl)->header.next)
#-    {
#-      lang_input_section_type *ls;
#-      const char *lname;
#+        if (place->os == NULL)
#+        place->os = lang_output_section_find (place->name);
#+        after = place->os;
#+        if (after == NULL)
#+        after = lang_output_section_find_by_flags (s, flags, &place->os,
#+        NULL);
#+        if (after == NULL)
#+        /* *ABS* is always the first output section statement.  */
#+        after = (void *) lang_os_list.head;
#+        }
# 
#-      if ((*pl)->header.type != lang_input_section_enum)
#+ /* All sections in an executable must be aligned to a page boundary.
#+        In a relocatable link, just preserve the incoming alignment; the
#+        address is discarded by lang_insert_orphan in that case, anyway.  */
#+ address = exp_unop (ALIGN_K, exp_nameop (NAME, "__section_alignment__"));
#+ os = lang_insert_orphan (s, secname, constraint, after, place, address,
#+        &add_child);
#+ if (bfd_link_relocatable (&link_info))
#+        {
#+        os->section_alignment = exp_intop (1U << s->alignment_power);
#+        os->bfd_section->alignment_power = s->alignment_power;
#+        }
#+ }
#+
#+ /* If the section name has a '\\\$', sort it with the other '\\\$'
#+ sections.  */
#+ for (pl = &os->children.head; *pl != NULL; pl = &(*pl)->header.next)
#+ {
#+ lang_input_section_type *ls;
#+ const char *lname;
#+
#+ if ((*pl)->header.type != lang_input_section_enum)
#         continue;
# 
#-      ls = &(*pl)->input_section;
#+ ls = &(*pl)->input_section;
# 
#-      lname = bfd_section_name (ls->section);
#-      if (strchr (lname, '\\\$') != NULL
#-          && (dollar == NULL || strcmp (orig_secname, lname) < 0))
#+ lname = bfd_section_name (ls->section);
#+ if (strchr (lname, '\\\$') != NULL
#+        && (dollar == NULL || strcmp (orig_secname, lname) < 0))
#         break;
#-    }
#+ }
# 
#-  if (add_child.head != NULL)
#-    {
#-      *add_child.tail = *pl;
#-      *pl = add_child.head;
#-    }
#+ if (add_child.head != NULL)
#+ {
#+ *add_child.tail = *pl;
#+ *pl = add_child.head;
#+ }
# 
#-  return os;
#+ return os;
# }
#@@ -2066,88 +2074,88 @@
# gld\${EMULATION_NAME}_open_dynamic_archive
#-  (const char *arch ATTRIBUTE_UNUSED,
#-   search_dirs_type *search,
#-   lang_input_statement_type *entry)
#-{
#-  static const struct
#-    {
#-      const char * format;
#-      bool use_prefix;
#-    }
#-  libname_fmt [] =
#-    {
#-      /* Preferred explicit import library for dll's.  */
#-      { "lib%s.dll.a", false },
#-      /* Alternate explicit import library for dll's.  */
#-      { "%s.dll.a", false },
#-      /* "libfoo.a" could be either an import lib or a static lib.
#-         For backwards compatibility, libfoo.a needs to precede
#-         libfoo.dll and foo.dll in the search.  */
#-      { "lib%s.a", false },
#-      /* The 'native' spelling of an import lib name is "foo.lib".  */
#-      { "%s.lib", false },
#-      /* PR 22948 - Check for an import library.  */
#-      { "lib%s.lib", false },
#+ (const char *arch ATTRIBUTE_UNUSED,
#+ search_dirs_type *search,
#+ lang_input_statement_type *entry)
#+{
#+ static const struct
#+ {
#+ const char * format;
#+ bool use_prefix;
#+ }
#+ libname_fmt [] =
#+ {
#+ /* Preferred explicit import library for dll's.  */
#+ { "lib%s.dll.a", false },
#+ /* Alternate explicit import library for dll's.  */
#+ { "%s.dll.a", false },
#+ /* "libfoo.a" could be either an import lib or a static lib.
#+        For backwards compatibility, libfoo.a needs to precede
#+        libfoo.dll and foo.dll in the search.  */
#+ { "lib%s.a", false },
#+ /* The 'native' spelling of an import lib name is "foo.lib".  */
#+ { "%s.lib", false },
#+ /* PR 22948 - Check for an import library.  */
#+ { "lib%s.lib", false },
# #ifdef DLL_SUPPORT
#-      /* Try "<prefix>foo.dll" (preferred dll name, if specified).  */
#-      {        "%s%s.dll", true },
#+ /* Try "<prefix>foo.dll" (preferred dll name, if specified).  */
#+ {        "%s%s.dll", true },
# #endif
#-      /* Try "libfoo.dll" (default preferred dll name).  */
#-      {        "lib%s.dll", false },
#-      /* Finally try 'native' dll name "foo.dll".  */
#-      {  "%s.dll", false },
#-      /* Note: If adding more formats to this table, make sure to check to
#-         see if their length is longer than libname_fmt[0].format, and if
#-         so, update the call to xmalloc() below.  */
#-      { NULL, false }
#-    };
#-  static unsigned int format_max_len = 0;
#-  const char * filename;
#-  char * full_string;
#-  char * base_string;
#-  unsigned int i;
#-
#-
#-  if (! entry->flags.maybe_archive || entry->flags.full_name_provided)
#-    return false;
#-
#-  filename = entry->filename;
#-
#-  if (format_max_len == 0)
#-    /* We need to allow space in the memory that we are going to allocate
#-       for the characters in the format string.  Since the format array is
#-       static we only need to calculate this information once.  In theory
#-       this value could also be computed statically, but this introduces
#-       the possibility for a discrepancy and hence a possible memory
#-       corruption.  The lengths we compute here will be too long because
#-       they will include any formating characters (%s) in the strings, but
#-       this will not matter.  */
#-    for (i = 0; libname_fmt[i].format; i++)
#-      if (format_max_len < strlen (libname_fmt[i].format))
#+ /* Try "libfoo.dll" (default preferred dll name).  */
#+ {        "lib%s.dll", false },
#+ /* Finally try 'native' dll name "foo.dll".  */
#+ {  "%s.dll", false },
#+ /* Note: If adding more formats to this table, make sure to check to
#+        see if their length is longer than libname_fmt[0].format, and if
#+        so, update the call to xmalloc() below.  */
#+ { NULL, false }
#+ };
#+ static unsigned int format_max_len = 0;
#+ const char * filename;
#+ char * full_string;
#+ char * base_string;
#+ unsigned int i;
#+
#+
#+ if (! entry->flags.maybe_archive || entry->flags.full_name_provided)
#+ return false;
#+
#+ filename = entry->filename;
#+
#+ if (format_max_len == 0)
#+ /* We need to allow space in the memory that we are going to allocate
#+ for the characters in the format string.  Since the format array is
#+ static we only need to calculate this information once.  In theory
#+ this value could also be computed statically, but this introduces
#+ the possibility for a discrepancy and hence a possible memory
#+ corruption.  The lengths we compute here will be too long because
#+ they will include any formating characters (%s) in the strings, but
#+ this will not matter.  */
#+ for (i = 0; libname_fmt[i].format; i++)
#+ if (format_max_len < strlen (libname_fmt[i].format))
#         format_max_len = strlen (libname_fmt[i].format);
# 
#-  full_string = xmalloc (strlen (search->name)
#-                         + strlen (filename)
#-                         + format_max_len
#+ full_string = xmalloc (strlen (search->name)
#+        + strlen (filename)
#+        + format_max_len
# #ifdef DLL_SUPPORT
#-                         + (pep_dll_search_prefix
#-                            ? strlen (pep_dll_search_prefix) : 0)
#+        + (pep_dll_search_prefix
#+        ? strlen (pep_dll_search_prefix) : 0)
# #endif
#-                         /* Allow for the terminating NUL and for the path
#-                            separator character that is inserted between
#-                            search->name and the start of the format string.  */
#-                         + 2);
#+        /* Allow for the terminating NUL and for the path
#+        separator character that is inserted between
#+        search->name and the start of the format string.  */
#+        + 2);
# 
#-  sprintf (full_string, "%s/", search->name);
#-  base_string = full_string + strlen (full_string);
#+ sprintf (full_string, "%s/", search->name);
#+ base_string = full_string + strlen (full_string);
# 
#-  for (i = 0; libname_fmt[i].format; i++)
#-    {
#+ for (i = 0; libname_fmt[i].format; i++)
#+ {
# #ifdef DLL_SUPPORT
#-      if (libname_fmt[i].use_prefix)
#+ if (libname_fmt[i].use_prefix)
#         {
#-          if (!pep_dll_search_prefix)
#-            continue;
#-          sprintf (base_string, libname_fmt[i].format, pep_dll_search_prefix, filename);
#+        if (!pep_dll_search_prefix)
#+        continue;
#+        sprintf (base_string, libname_fmt[i].format, pep_dll_search_prefix, filename);
#         }
#-      else
#+ else
# #endif
#@@ -2155,15 +2163,15 @@
# 
#-      if (ldfile_try_open_bfd (full_string, entry))
#+ if (ldfile_try_open_bfd (full_string, entry))
#         break;
#-    }
#+ }
# 
#-  if (!libname_fmt[i].format)
#-    {
#-      free (full_string);
#-      return false;
#-    }
#+ if (!libname_fmt[i].format)
#+ {
#+ free (full_string);
#+ return false;
#+ }
# 
#-  entry->filename = full_string;
#+ entry->filename = full_string;
# 
#-  return true;
#+ return true;
# }
#@@ -2172,5 +2180,5 @@
# gld\${EMULATION_NAME}_find_potential_libraries
#-  (char *name, lang_input_statement_type *entry)
#+ (char *name, lang_input_statement_type *entry)
# {
#-  return ldfile_open_file_search (name, entry, "", ".lib");
#+ return ldfile_open_file_search (name, entry, "", ".lib");
# }
#@@ -2190,6 +2198,6 @@
# {
#-  *isfile = 0;
#+ *isfile = 0;
# 
#-  if (bfd_link_relocatable (&link_info) && config.build_constructors)
#-    return
#+ if (bfd_link_relocatable (&link_info) && config.build_constructors)
#+ return
# EOF
#@@ -2215,12 +2223,12 @@
# {
#-  *isfile = 1;
#+ *isfile = 1;
# 
#-  if (bfd_link_relocatable (&link_info) && config.build_constructors)
#-    return "ldscripts/\${EMULATION_NAME}.xu";
#-  else if (bfd_link_relocatable (&link_info))
#-    return "ldscripts/\${EMULATION_NAME}.xr";
#-  else if (!config.text_read_only)
#-    return "ldscripts/\${EMULATION_NAME}.xbn";
#-  else if (!config.magic_demand_paged)
#-    return "ldscripts/\${EMULATION_NAME}.xn";
#+ if (bfd_link_relocatable (&link_info) && config.build_constructors)
#+ return "ldscripts/\${EMULATION_NAME}.xu";
#+ else if (bfd_link_relocatable (&link_info))
#+ return "ldscripts/\${EMULATION_NAME}.xr";
#+ else if (!config.text_read_only)
#+ return "ldscripts/\${EMULATION_NAME}.xbn";
#+ else if (!config.magic_demand_paged)
#+ return "ldscripts/\${EMULATION_NAME}.xn";
# EOF
#@@ -2228,5 +2236,5 @@
# fragment <<EOF
#-  else if (link_info.pei386_auto_import == 1
#-           && link_info.pei386_runtime_pseudo_reloc != 2)
#-    return "ldscripts/\${EMULATION_NAME}.xa";
#+ else if (link_info.pei386_auto_import == 1
#+        && link_info.pei386_runtime_pseudo_reloc != 2)
#+ return "ldscripts/\${EMULATION_NAME}.xa";
# EOF
#@@ -2234,4 +2242,4 @@
# fragment <<EOF
#-  else
#-    return "ldscripts/\${EMULATION_NAME}.x";
#+ else
#+ return "ldscripts/\${EMULATION_NAME}.x";
# }
#EOF
##patch -ulbf ld/pe-dll.c << EOF
##@@ -44,3 +44,3 @@
## 
##-#ifdef pe_use_x86_64
##+#ifdef pe_use_plus
## 
##@@ -211,3 +211,3 @@
##   { STRING_COMMA_LEN ("cygwin_crt0") },
##-#ifdef pe_use_x86_64
##+#ifdef pe_use_plus
##   { STRING_COMMA_LEN ("DllMain") },
##@@ -248,2 +248,3 @@
## #define PE_ARCH_arm_wince 5
##+#define PE_ARCH_aarch64   6
## 
##@@ -254,3 +255,3 @@
##   {
##-#ifdef pe_use_x86_64
##+#ifdef pe_use_plus
##     "pei-x86-64",
##@@ -265,3 +266,3 @@
##     bfd_arch_i386,
##-#ifdef pe_use_x86_64
##+#ifdef pe_use_plus
##     false,
##@@ -272,3 +273,3 @@
##   },
##-#ifdef pe_use_x86_64
##+#ifdef pe_use_plus
##   {
##@@ -329,2 +330,11 @@
##   },
##+  {
##+    "pei-aarch64",
##+    "pe-aarch64",
##+    2,  /* ARM64_RVA32 */
##+    PE_ARCH_aarch64,
##+    bfd_arch_aarch64,
##+    false,
##+    autofilter_symbollist_generic
##+  },
##   { NULL, NULL, 0, 0, 0, false, NULL }
##@@ -1632,3 +1642,3 @@
##                     {
##-#ifdef pe_use_x86_64
##+#ifdef pe_use_plus
##                     case BITS_AND_SHIFT (64, 0):
##@@ -2277,2 +2287,11 @@
## 
##+/* _function:
##+  b <__imp_function>
##+  nop */
##+static const unsigned char jmp_aarch64_bytes[] =
##+{
##+  0x00, 0x00, 0x00, 0x14,
##+  0x1f, 0x20, 0x03, 0xD5
##+};
##+
## 
##@@ -2316,2 +2335,6 @@
##           break;
##+        case PE_ARCH_aarch64:
##+          jmp_bytes = jmp_aarch64_bytes;
##+          jmp_byte_count = sizeof (jmp_aarch64_bytes);
##+          break;
##         default:
##@@ -2385,3 +2408,3 @@
##         case PE_ARCH_i386:
##-#ifdef pe_use_x86_64
##+#ifdef pe_use_plus
##           quick_reloc (abfd, 2, BFD_RELOC_32_PCREL, 2);
##@@ -2406,2 +2429,5 @@
##           break;
##+        case PE_ARCH_aarch64:
##+          quick_reloc (abfd, 0, BFD_RELOC_32_PCREL, 2);
##+          break;
##         default:
##@@ -3405,3 +3431,3 @@
##   opthdr_ofs = pe_header_offset + 4 + 20;
##-#ifdef pe_use_x86_64
##+#ifdef pe_use_plus
##   num_entries = pe_get32 (dll, opthdr_ofs + 92 + 4 * 4); /*  & NumberOfRvaAndSizes.  */
##@@ -3415,3 +3441,3 @@
## 
##-#ifdef pe_use_x86_64
##+#ifdef pe_use_plus
##   export_rva  = pe_get32 (dll, opthdr_ofs + 96 + 4 * 4);
##EOF
#patch -ulbf ld/pe-dll.c << EOF
#@@ -44,3 +44,3 @@
#
#-#ifdef pe_use_x86_64
#+#ifdef pe_use_plus
#
#@@ -211,3 +211,3 @@
#   { STRING_COMMA_LEN ("cygwin_crt0") },
#-#ifdef pe_use_x86_64
#+#ifdef pe_use_plus
#   { STRING_COMMA_LEN ("DllMain") },
#@@ -248,2 +248,3 @@
# #define PE_ARCH_arm_wince 5
#+#define PE_ARCH_aarch64   6
#
#@@ -254,3 +255,3 @@
#   {
#-#ifdef pe_use_x86_64
#+#ifdef pe_use_plus
#     "pei-x86-64",
#@@ -265,3 +266,3 @@
#     bfd_arch_i386,
#-#ifdef pe_use_x86_64
#+#ifdef pe_use_plus
#     false,
#@@ -272,3 +273,3 @@
#   },
#-#ifdef pe_use_x86_64
#+#ifdef pe_use_plus
#   {
#@@ -329,2 +330,20 @@
#   },
#+  {
#+    "pei-aarch64",
#+    "pe-aarch64",
#+    2,  /* ARM64_RVA32 */
#+    PE_ARCH_aarch64,
#+    bfd_arch_aarch64,
#+    false,
#+    autofilter_symbollist_generic
#+  },
#+  {
#+    "pei-aarch64",
#+    "pe-bigobj-aarch64",
#+    3 /* R_IMAGEBASE */,
#+    PE_ARCH_aarch64,
#+    bfd_arch_aarch64,
#+    false,
#+    autofilter_symbollist_generic
#+  },
#   { NULL, NULL, 0, 0, 0, false, NULL }
#@@ -1632,3 +1651,3 @@
#                    {
#-#ifdef pe_use_x86_64
#+#ifdef pe_use_plus
#                    case BITS_AND_SHIFT (64, 0):
#@@ -2277,2 +2296,11 @@
#
#+/* _function:
#+  b <__imp_function>
#+  nop */
#+static const unsigned char jmp_aarch64_bytes[] =
#+{
#+  0x00, 0x00, 0x00, 0x14,
#+  0x1f, 0x20, 0x03, 0xD5
#+};
#+
#
#@@ -2316,2 +2344,6 @@
#          break;
#+        case PE_ARCH_aarch64:
#+          jmp_bytes = jmp_aarch64_bytes;
#+          jmp_byte_count = sizeof (jmp_aarch64_bytes);
#+          break;
#        default:
#@@ -2385,3 +2417,3 @@
#        case PE_ARCH_i386:
#-#ifdef pe_use_x86_64
#+#ifdef pe_use_plus
#          quick_reloc (abfd, 2, BFD_RELOC_32_PCREL, 2);
#@@ -2406,2 +2438,5 @@
#          break;
#+        case PE_ARCH_aarch64:
#+          quick_reloc (abfd, 0, BFD_RELOC_32_PCREL, 2);
#+          break;
#        default:
#@@ -3405,3 +3440,3 @@
#   opthdr_ofs = pe_header_offset + 4 + 20;
#-#ifdef pe_use_x86_64
#+#ifdef pe_use_plus
#   num_entries = pe_get32 (dll, opthdr_ofs + 92 + 4 * 4); /*  & NumberOfRvaAndSizes.  */
#@@ -3415,3 +3450,3 @@
#
#-#ifdef pe_use_x86_64
#+#ifdef pe_use_plus
#   export_rva  = pe_get32 (dll, opthdr_ofs + 96 + 4 * 4);
#EOF
#cat > ld/pep-dll-aarch64.c << EOF
#/* Tiny wrapper over pep-dll.c
#   Copyright (C) 2006-2021 Free Software Foundation, Inc.
#   Written by Kai Tietz, OneVision Software GmbH&CoKg.
#
#   This file is part of the GNU Binutils.
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
#   MA 02110-1301, USA.  */
#
##define COFF_WITH_peAArch64
#
##include "pep-dll.c"
#EOF
#cat > ld/pep-dll-x86_64.c << EOF
#/* Tiny wrapper over pep-dll.c
#   Copyright (C) 2006-2021 Free Software Foundation, Inc.
#   Written by Kai Tietz, OneVision Software GmbH&CoKg.
#
#   This file is part of the GNU Binutils.
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
#   MA 02110-1301, USA.  */
#
##define COFF_WITH_pex64
#
##include "pep-dll.c"
#EOF
#patch -ulbf ld/pep-dll.c << EOF
#@@ -23,3 +23,2 @@
# #define COFF_WITH_PE
#-#define COFF_WITH_pex64
# 
#@@ -60,4 +59,4 @@
# 
#-/* Uses x86_64 PE+.  */
#-#define pe_use_x86_64
#+/* Use PE+.  */
#+#define pe_use_plus
# 
#EOF
## fix error when --with-pkgversion value contains a comma
#sed -i.bak -e 's/\(-e "s\),\([^,]*\),\([^,]*\),/\1?\2?\3?/' bfd/Makefile.in
#mkdir -p build_winarm64 &&
# wl-showstatus configure &&
# cd build_winarm64 &&
# #../configure --prefix=$INSTALLPREFIX/share/arm64win-binutils --build=$BUILDPLATFORM --host=$RUNPLATFORM --target=arm-w64-pe --disable-lib32 --disable-lib64 --enable-libarm32 --program-prefix=aarch64- --with-pkgversion="Binutils targeting Windows on ARM, built by Brecht Sanders" --enable-shared --enable-host-shared --disable-bootstrap --enable-serial-configure --enable-{libada,libssp,gold,plugins} --disable-lto --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX --disable-{multilib,rpath} --with-system-zlib --disable-nls --enable-install-libiberty --enable-install-libbfd --with-mmap CFLAGS="-I$MINGWPREFIX/include/mman-win32" LDFLAGS="-Wl,--as-needed -lmman" &&
# #../configure --prefix=$INSTALLPREFIX/share/arm64win-binutils --build=$BUILDPLATFORM --host=$RUNPLATFORM --target=arm-w64-pe --program-prefix=aarch64- --with-pkgversion="Binutils targeting Windows on ARM, built by Brecht Sanders" --enable-shared --enable-host-shared --disable-bootstrap --enable-serial-configure --enable-{libada,libssp,gold,plugins} --disable-lto --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX --disable-{multilib,rpath} --with-system-zlib --disable-nls --enable-install-libiberty --enable-install-libbfd --with-mmap CFLAGS="-I$MINGWPREFIX/include/mman-win32" LDFLAGS="-Wl,--as-needed -lmman" &&
# #../configure --prefix=$INSTALLPREFIX/share/arm64win-binutils --build=$BUILDPLATFORM --host=$RUNPLATFORM --target=aarch64-w64-pe --program-prefix=aarch64- --with-pkgversion="Binutils targeting Windows on ARM, built by Brecht Sanders" --enable-shared --enable-host-shared --disable-bootstrap --enable-serial-configure --enable-{libada,libssp,gold,plugins} --disable-lto --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX --disable-{multilib,rpath} --with-system-zlib --disable-nls --enable-install-libiberty --enable-install-libbfd --with-mmap CFLAGS="-I$MINGWPREFIX/include/mman-win32" LDFLAGS="-Wl,--as-needed -lmman" &&
# #../configure --prefix=$INSTALLPREFIX/share/arm64win-binutils --build=$BUILDPLATFORM --host=$RUNPLATFORM --target=aarch64-pc-windows --program-prefix=aarch64- --with-pkgversion="Binutils targeting Windows on ARM, built by Brecht Sanders" --enable-shared --enable-host-shared --disable-bootstrap --enable-serial-configure --enable-{libada,libssp,gold,plugins} --disable-lto --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX --disable-{multilib,rpath} --with-system-zlib --disable-nls --enable-install-libiberty --enable-install-libbfd --with-mmap CFLAGS="-I$MINGWPREFIX/include/mman-win32" LDFLAGS="-Wl,--as-needed -lmman" &&
# #../configure --prefix=$INSTALLPREFIX/share/arm64win-binutils --build=$BUILDPLATFORM --host=$RUNPLATFORM --target=arm64-w64-pe --program-prefix=aarch64- --with-pkgversion="Binutils targeting Windows on ARM, built by Brecht Sanders" --enable-shared --enable-host-shared --disable-bootstrap --enable-serial-configure --enable-{libada,libssp,gold,plugins} --disable-lto --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX --disable-{multilib,rpath} --with-system-zlib --disable-nls --enable-install-libiberty --enable-install-libbfd --with-mmap CFLAGS="-I$MINGWPREFIX/include/mman-win32" LDFLAGS="-Wl,--as-needed -lmman" &&
# #../configure --prefix=$INSTALLPREFIX/share/arm64win-binutils --build=$BUILDPLATFORM --host=$RUNPLATFORM --target=aarch64-w64-mingw32 --program-prefix=aarch64- --with-pkgversion="Binutils targeting Windows on ARM, built by Brecht Sanders" --enable-shared --enable-host-shared --disable-bootstrap --enable-serial-configure --enable-{libada,libssp,gold,plugins} --disable-lto --enable-64-bit-bfd --enable-64-bit-archive --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX --disable-{multilib,rpath} --with-system-zlib --disable-nls --enable-install-libiberty --enable-install-libbfd --with-mmap CFLAGS="-I$MINGWPREFIX/include/mman-win32" LDFLAGS="-Wl,--as-needed -lmman" &&
# #../configure --prefix=$INSTALLPREFIX/share/arm64win-binutils --build=$BUILDPLATFORM --host=$RUNPLATFORM --target=aarch64-w64-mingw32 --program-prefix=aarch64-w64-mingw32- --with-pkgversion="Binutils for MinGW-W64 aarch64, built by Brecht Sanders" --enable-shared --enable-host-shared --enable-serial-configure --disable-bootstrap --enable-{libada,libssp,lto,gold,plugins,vtable-verify,64-bit-bfd,install-libbfd} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX --disable-{multilib,rpath} --enable-install-libiberty --with-system-zlib --with-mmap CFLAGS="-I$MINGWPREFIX/include/mman-win32" LDFLAGS="-Wl,--as-needed -lmman" &&
# #../configure --prefix=$INSTALLPREFIX/share/arm64win-binutils --build=$BUILDPLATFORM --host=$RUNPLATFORM --target=aarch64-w64-pe --program-prefix=aarch64-w64-mingw32- --with-pkgversion="Binutils for MinGW-W64 aarch64, built by Brecht Sanders" --enable-shared --enable-host-shared --enable-serial-configure --disable-bootstrap --enable-{libada,libssp,gold,plugins,vtable-verify,64-bit-bfd,install-libbfd} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX --disable-{multilib,rpath,lto} --enable-install-libiberty --with-system-zlib --with-mmap CFLAGS="-I$MINGWPREFIX/include/mman-win32" LDFLAGS="-Wl,--as-needed -lmman" AR=ar &&
# ../configure --prefix=$INSTALLPREFIX/share/arm64win-binutils --build=$BUILDPLATFORM --host=$RUNPLATFORM --target=aarch64-w64-mingw32 --program-prefix=aarch64-w64-mingw32- --with-pkgversion="Binutils for MinGW-W64 aarch64, built by Brecht Sanders" --enable-shared --enable-host-shared --enable-serial-configure --disable-bootstrap --enable-{libada,libssp,lto,gold,plugins,vtable-verify} --enable-{64-bit-bfd,install-libbfd} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX --disable-{multilib,rpath} --enable-install-libiberty --with-system-zlib --with-mmap CFLAGS="-I$MINGWPREFIX/include/mman-win32" LDFLAGS="-Wl,--as-needed -lmman" AR=ar &&
# cd .. &&
# wl-showstatus build &&
# #make -Cbuild_winarm64 &&
# # fix missing uint (version >= 2.37)
# ( make -Cbuild_winarm64 || ( echo "#define uint unsigned int" >> build_winarm64/libiberty/config.h && make -Cbuild_winarm64 )) &&
# wl-showstatus build-install &&
# make -Cbuild_winarm64 install-strip &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd ../.. && rm -rf $BASENAME-$VERSION



export NAME="GNU Binutils (targeting Windows on ARM)"
export STATUS=
export URL=http://www.gnu.org/software/binutils/
export BASENAME=arm64win-binutils
export DESCRIPTION="The GNU Binutils are a collection of binary tools. This build target is the Windows on ARM 64-bit platform."
export CATEGORY=development
export TYPE=application
#export VERSION=2.40
#export VERSIONDATE=20230115
#export VERSION=2.41
#export VERSIONDATE=20230731
#export VERSION=2.42
#export VERSIONDATE=20240130
#export VERSION=2.43
#export VERSIONDATE=20240805
export VERSION=2.43.1
export VERSIONDATE=20240818
wl-showstatus --package-version
export DEPENDENCIES=zlib,mpc,mpfr,gmp,cloog,isl
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=texinfo
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=COPYING
export LICENSETYPE="GPL/LGPL"
export DOWNLOADURL="https://ftp.gnu.org/gnu/binutils/ binutils-"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://ftp.gnu.org/gnu/binutils/$BASENAME-$VERSION.tar.bz2
wl-showstatus download
wl-download -v -d $TARBALLDIR/binutils $DOWNLOADSOURCEURL
wl-wait4deps
mkdir -p $BASENAME-$VERSION
tar xj --force-local -f $TARBALLDIR/binutils/binutils-$VERSION.tar.bz2 -C$BASENAME-$VERSION
cd $BASENAME-$VERSION/binutils-$VERSION
# fix libiberty/putenv.c (version >= 2.43.1)
patch -ulbf libiberty/putenv.c << EOF
@@ -71,2 +71,5 @@
 {
+#ifdef _WIN32
+  return _putenv(string);
+#else
   const char *const name_end = strchr (string, '=');
@@ -83,2 +86,3 @@
   return 0;
+#endif
 }
EOF
## add Windows on ARM64 support (version >= 2.40 <= 2.41)
#patch -ulbf bfd/config.bfd << EOF
#@@ -251,3 +251,3 @@
#     ;;
#-  aarch64-*-pe*)
#+  aarch64-*-pe* | aarch64-*-mingw*)
#     targ_defvec=aarch64_pe_le_vec
#EOF
#patch -ulbf ld/configure.tgt << EOF
#@@ -120,3 +120,3 @@
#                        ;;
#-aarch64-*-pe*)
#+aarch64-*-pe* | aarch64-*-mingw*)
#                        targ_emul=aarch64pe
#EOF
#patch -ulbf gas/configure.tgt << EOF
#@@ -137,3 +137,3 @@
#   aarch64*-*-openbsd*)                 fmt=elf;;
#-  aarch64*-*-pe*)                      fmt=coff em=pepaarch64 ;;
#+  aarch64*-*-pe* | aarch64*-*-mingw*)  fmt=coff em=pepaarch64 ;;
#   alpha-*-*vms*)                       fmt=evax ;;
#EOF
# fix error when --with-pkgversion value contains a comma
sed -i.bak -e 's/\(-e "s\),\([^,]*\),\([^,]*\),/\1?\2?\3?/' bfd/Makefile.in
mkdir -p build_winarm64 &&
 wl-showstatus configure &&
 cd build_winarm64 &&
 ../configure --prefix=$INSTALLPREFIX/share/arm64win-binutils --build=$BUILDPLATFORM --host=$RUNPLATFORM --target=aarch64-w64-mingw32 --program-prefix=aarch64-w64-mingw32- --with-pkgversion="Binutils for MinGW-W64 aarch64, built by Brecht Sanders" --enable-shared --enable-host-shared --enable-serial-configure --disable-bootstrap --enable-{libada,libssp,lto,gold,plugins,vtable-verify} --enable-{64-bit-bfd,install-libbfd} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX --disable-{multilib,rpath} --enable-install-libiberty --with-system-zlib --with-mmap CFLAGS="-I$MINGWPREFIX/include/mman-win32" LDFLAGS="-Wl,--as-needed -lmman" AR=ar &&
 cd .. &&
 wl-showstatus build &&
 # fix missing uint (version >= 2.37)
 #( make -Cbuild_winarm64 || ( echo "#define uint unsigned int" >> build_winarm64/libiberty/config.h && make -Cbuild_winarm64 )) &&
 make -Cbuild_winarm64 &&
 wl-showstatus build-install &&
 make -Cbuild_winarm64 install-strip &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd ../.. && rm -rf $BASENAME-$VERSION




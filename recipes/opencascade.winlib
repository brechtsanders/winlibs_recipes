export NAME="Open CASCADE"
export STATUS=
export URL=https://www.opencascade.com/
export BASENAME=opencascade
export DESCRIPTION="Open CASCADE Technology is a software development kit (SDK) intended for development of applications dealing with 3D CAD data, freely available in open source. It includes a set of C++ class libraries providing services for 3D surface and solid modeling, visualization, data exchange and rapid application development."
export CATEGORY=graphics
export TYPE=library
#export VERSION=6.9.1
#export VERSIONDATE=20151208
#export VERSION=7.0.0
#export VERSIONDATE=20160406
#export VERSION=7.1.0
#export VERSIONDATE=20161126
#export VERSION=7.2.0
#export VERSIONDATE=20170901
#export VERSION=7.3.0
#export VERSIONDATE=20180529
#export VERSION=7.4.0
#export VERSIONDATE=20191001
#export VERSION=7.5.0
#export VERSIONDATE=20201105
#export VERSION=7.6.0
#export VERSIONDATE=20211103
#export VERSION=7.7.0
#export VERSIONDATE=20211107
#export VERSION=7.8.0
#export VERSIONDATE=20240220
export VERSION=7.8.1
export VERSIONDATE=20240401
wl-showstatus --package-version
export DEPENDENCIES=zlib,libbz2,freetype2,harfbuzz,libpng,brotli,tcl,tk,rapidjson,ffmpeg4
#export DEPENDENCIES=zlib,libbz2,freetype2,harfbuzz,libpng,brotli,tcl,tk,rapidjson,ffmpeg4,vtk
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja,doxygen
export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=COPYING
export LICENSEFILE=LICENSE_LGPL_21.txt
export LICENSETYPE=LGPL
#export DOWNLOADURL="http://www.opencascade.com/content/latest-release"
#export DOWNLOADURL="https://git.dev.opencascade.org/gitweb/?p=occt.git V"
#export DOWNLOADURL="https://github.com/tpaviot/oce/releases"
export DOWNLOADURL="https://github.com/Open-Cascade-SAS/OCCT/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://www.opencascade.com/sites/default/files/private/occt/OCC_$VERSION\_release/opencascade-$VERSION.tgz
#export DOWNLOADSOURCEURL=https://www.opencascade.com/sites/default/files/private/occt/OCC_$VERSION\_release/opencascade-$VERSION.tgz
#export DOWNLOADSOURCEURL=https://github.com/tpaviot/oce/releases/download/official-upstream-packages/$BASENAME-$VERSION.tgz
#export DOWNLOADSOURCEURL=https://old.opencascade.com/sites/default/files/private/occt/OCC_$VERSION_release/$BASENAME-$VERSION.tgz
#export DOWNLOADSOURCEURL=https://git.dev.opencascade.org/gitweb/?p=occt.git;a=snapshot;h=628c0211d53c7fe1036a85e7a7b2b067c9c50f7a;sf=tgz
#export DOWNLOADSOURCEURL=https://dev.opencascade.org/system/files/occt/OCC_$VERSION\_release/$BASENAME-$VERSION.tgz
export DOWNLOADSOURCEURL=https://github.com/Open-Cascade-SAS/OCCT/archive/refs/tags/V$(echo $VERSION|tr . _).tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
#tar xz --force-local -f $TARBALLDIR/$BASENAME/opencascade-$VERSION.tgz
#tar xz --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tgz
#cd $BASENAME-$VERSION
tar xz --force-local -f $TARBALLDIR/$BASENAME/V$(echo $VERSION|tr . _).tar.gz
cd OCCT-$(echo $VERSION|tr . _)
mkdir -p build_static build_shared &&
 wl-showstatus configure &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/opencascade -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DUSE_VTK:BOOL=OFF -D3RDPARTY_DIR:PATH=$MINGWPREFIX -D3RDPARTY_FREETYPE_DLL_DIR=$MINGWPREFIX/bin -S. -Bbuild_static &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/opencascade -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DBUILD_LIBRARY_TYPE:STRING=Static -DUSE_VTK:BOOL=OFF -DUSE_RAPIDJSON:BOOL=ON -DUSE_FREEIMAGE:BOOL=OFF -DUSE_FFMPEG:BOOL=OFF -DUSE_D3D:BOOL=OFF -DBUILD_RELEASE_DISABLE_EXCEPTIONS:BOOL=ON -DBUILD_USE_PCH:BOOL=OFF -DBUILD_SAMPLES_QT:BOOL=OFF -S. -Bbuild_static &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/opencascade -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DBUILD_LIBRARY_TYPE:STRING=Static -DUSE_VTK:BOOL=OFF -DUSE_RAPIDJSON:BOOL=ON -DUSE_FREEIMAGE:BOOL=OFF -DUSE_FFMPEG:BOOL=OFF -DUSE_D3D:BOOL=OFF -DBUILD_RELEASE_DISABLE_EXCEPTIONS:BOOL=ON -DBUILD_USE_PCH:BOOL=OFF -DBUILD_SAMPLES_QT:BOOL=OFF -DBUILD_MODULE_Draw:BOOL=OFF -DBUILD_MODULE_DETools:BOOL=OFF -DBUILD_DOC_Overview:BOOL=OFF -S. -Bbuild_static &&
 #C_INCLUDE_PATH=$MINGWPREFIX/ffmpeg4/include${C_INCLUDE_PATH:+:$C_INCLUDE_PATH} CPLUS_INCLUDE_PATH=$MINGWPREFIX/ffmpeg4/include${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} LIBRARY_PATH=$MINGWPREFIX/ffmpeg4/lib${LIBRARY_PATH:+:$LIBRARY_PATH} LD_RUN_PATH=$MINGWPREFIX/ffmpeg4/lib${LD_RUN_PATH:+:$LD_RUN_PATH} PKG_CONFIG_PATH=$MINGWPREFIX/ffmpeg4/lib/pkgconfig${PKG_CONFIG_PATH:+:$PKG_CONFIG_PATH} PATH=$MINGWPREFIX/ffmpeg4/bin:$PATH PKG_CONFIG= cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/opencascade -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DBUILD_LIBRARY_TYPE:STRING=Static -DUSE_VTK:BOOL=OFF -DUSE_RAPIDJSON:BOOL=ON -DUSE_FREEIMAGE:BOOL=ON -DUSE_FFMPEG:BOOL=ON -DUSE_D3D:BOOL=ON -DBUILD_RELEASE_DISABLE_EXCEPTIONS:BOOL=ON -DBUILD_USE_PCH:BOOL=OFF -DBUILD_SAMPLES_QT:BOOL=OFF -S. -Bbuild_static &&
 #C_INCLUDE_PATH=$MINGWPREFIX/ffmpeg4/include${C_INCLUDE_PATH:+:$C_INCLUDE_PATH} CPLUS_INCLUDE_PATH=$MINGWPREFIX/ffmpeg4/include${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} LIBRARY_PATH=$MINGWPREFIX/ffmpeg4/lib${LIBRARY_PATH:+:$LIBRARY_PATH} LD_RUN_PATH=$MINGWPREFIX/ffmpeg4/lib${LD_RUN_PATH:+:$LD_RUN_PATH} PKG_CONFIG_PATH=$MINGWPREFIX/ffmpeg4/lib/pkgconfig${PKG_CONFIG_PATH:+:$PKG_CONFIG_PATH} PATH=$MINGWPREFIX/ffmpeg4/bin:$PATH PKG_CONFIG= cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/opencascade -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DBUILD_LIBRARY_TYPE:STRING=Static -DUSE_VTK:BOOL=ON -D3RDPARTY_VTK_INCLUDE_DIR:PATH=$(ls -1d $MINGWPREFIX/include/vtk-*|sort -V|tail -n1) -DUSE_RAPIDJSON:BOOL=ON -DUSE_FREEIMAGE:BOOL=ON -DUSE_FFMPEG:BOOL=ON -DUSE_D3D:BOOL=ON -DBUILD_RELEASE_DISABLE_EXCEPTIONS:BOOL=ON -DBUILD_USE_PCH:BOOL=OFF -DBUILD_SAMPLES_QT:BOOL=OFF -S. -Bbuild_static &&
 #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*-ladvapi32/& -Wl,--as-needed -lz -lbz2 -lharfbuzz/" build_static/build.ninja &&
 wl-showstatus configure &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/opencascade -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DUSE_VTK:BOOL=OFF -D3RDPARTY_DIR:PATH=$MINGWPREFIX -D3RDPARTY_FREETYPE_DLL_DIR=$MINGWPREFIX/bin -S. -Bbuild_shared &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/opencascade -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DBUILD_LIBRARY_TYPE:STRING=Shared -DUSE_VTK:BOOL=OFF -DUSE_RAPIDJSON:BOOL=ON -DUSE_FREEIMAGE:BOOL=OFF -DUSE_FFMPEG:BOOL=OFF -DUSE_D3D:BOOL=OFF -DBUILD_RELEASE_DISABLE_EXCEPTIONS:BOOL=ON -DBUILD_USE_PCH:BOOL=OFF -DBUILD_SAMPLES_QT:BOOL=OFF -S. -Bbuild_shared &&
 #C_INCLUDE_PATH=$MINGWPREFIX/ffmpeg4/include${C_INCLUDE_PATH:+:$C_INCLUDE_PATH} CPLUS_INCLUDE_PATH=$MINGWPREFIX/ffmpeg4/include${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} LIBRARY_PATH=$MINGWPREFIX/ffmpeg4/lib${LIBRARY_PATH:+:$LIBRARY_PATH} LD_RUN_PATH=$MINGWPREFIX/ffmpeg4/lib${LD_RUN_PATH:+:$LD_RUN_PATH} PKG_CONFIG_PATH=$MINGWPREFIX/ffmpeg4/lib/pkgconfig${PKG_CONFIG_PATH:+:$PKG_CONFIG_PATH} PATH=$MINGWPREFIX/ffmpeg4/bin:$PATH PKG_CONFIG= cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/opencascade -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DBUILD_LIBRARY_TYPE:STRING=Shared -DUSE_VTK:BOOL=OFF -DUSE_RAPIDJSON:BOOL=ON -DUSE_FREEIMAGE:BOOL=ON -DUSE_FFMPEG:BOOL=ON -DUSE_D3D:BOOL=ON -DBUILD_RELEASE_DISABLE_EXCEPTIONS:BOOL=ON -DBUILD_USE_PCH:BOOL=OFF -DBUILD_SAMPLES_QT:BOOL=OFF -S. -Bbuild_shared &&
 #C_INCLUDE_PATH=$MINGWPREFIX/ffmpeg4/include${C_INCLUDE_PATH:+:$C_INCLUDE_PATH} CPLUS_INCLUDE_PATH=$MINGWPREFIX/ffmpeg4/include${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} LIBRARY_PATH=$MINGWPREFIX/ffmpeg4/lib${LIBRARY_PATH:+:$LIBRARY_PATH} LD_RUN_PATH=$MINGWPREFIX/ffmpeg4/lib${LD_RUN_PATH:+:$LD_RUN_PATH} PKG_CONFIG_PATH=$MINGWPREFIX/ffmpeg4/lib/pkgconfig${PKG_CONFIG_PATH:+:$PKG_CONFIG_PATH} PATH=$MINGWPREFIX/ffmpeg4/bin:$PATH PKG_CONFIG= cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/opencascade -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DBUILD_LIBRARY_TYPE:STRING=Shared -DUSE_VTK:BOOL=ON -D3RDPARTY_VTK_INCLUDE_DIR:PATH=$(ls -1d $MINGWPREFIX/include/vtk-*|sort -V|tail -n1) -DUSE_RAPIDJSON:BOOL=ON -DUSE_FREEIMAGE:BOOL=ON -DUSE_FFMPEG:BOOL=ON -DUSE_D3D:BOOL=ON -DBUILD_RELEASE_DISABLE_EXCEPTIONS:BOOL=ON -DBUILD_USE_PCH:BOOL=OFF -DBUILD_SAMPLES_QT:BOOL=OFF -S. -Bbuild_shared &&
 sed -i.bak -e "s/LINK_LIBRARIES *= *[^ ]*libTKTopAlgo\.dll\.a.*-lfreetype.*libTKernel\.dll\.a.*$/& -Wl,--as-needed -lz -lbz2 -lharfbuzz -lpng -lbrotlidec/" build_shared/build.ninja &&
 sed -i.bak2 -e "s/^\s*LINK_LIBRARIES\s*=.*-ladvapi32/& -Wl,--as-needed -lz -lbz2 -lharfbuzz -lpng -lbrotlidec/" build_shared/build.ninja &&
 wl-showstatus build-install &&
 ninja -Cbuild_static install/strip &&
 #CPLUS_INCLUDE_PATH=$MINGWPREFIX/ffmpeg4/include${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} LIBRARY_PATH=$MINGWPREFIX/ffmpeg4/lib${LIBRARY_PATH:+:$LIBRARY_PATH} ninja -j4 -Cbuild_static install/strip &&
 wl-showstatus build-install &&
 ninja -Cbuild_shared install/strip &&
 #CPLUS_INCLUDE_PATH=$MINGWPREFIX/ffmpeg4/include${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} LIBRARY_PATH=$MINGWPREFIX/ffmpeg4/lib${LIBRARY_PATH:+:$LIBRARY_PATH} ninja -j4 -Cbuild_shared install/strip &&
 #wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf OCCT-$(echo $VERSION|tr . _)
####$MINGWPREFIX/share/opencascade/win64/gcc/bin/DRAWEXE.exe




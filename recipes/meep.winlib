export NAME="Meep"
export STATUS=
export URL=https://github.com/NanoComp/meep
export BASENAME=meep
export DESCRIPTION="Meep is a free and open-source software package for electromagnetics simulation via the finite-difference time-domain (FDTD) method spanning a broad range of applications."
export CATEGORY=science
export TYPE=library
export VERSION=1.29.0
export VERSIONDATE=20241031
wl-showstatus --package-version
export DEPENDENCIES=libctl,fftw,gsl,hdf5,openblas
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=GPL
export DOWNLOADURL="https://github.com/NanoComp/meep/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/NanoComp/meep/releases/download/v$VERSION/$BASENAME-$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
cd $BASENAME-$VERSION
# fix undefined vasprintf in src/mympi.cpp
sed -i.bak -e "1i #define _GNU_SOURCE\n#include <stdio.h>" src/mympi.cpp
sed -i.bak -e "1i #define _GNU_SOURCE\n#include <stdio.h>" src/output_directory.cpp
# fix missing mkdtemp() (version >= 0.99.18)
cat > mkdtemp.c << EOF
#include <time.h>
#include <math.h>
#include <errno.h>
#include <sys/stat.h>
#include <string.h>
#include <windows.h>
#include <accctrl.h>
#include <aclapi.h>

static PSECURITY_DESCRIPTOR create_sd (int permissions)
{
  PSECURITY_DESCRIPTOR pSD = NULL;
  int i;
  int j;
  EXPLICIT_ACCESS ea[3];
  PSID sids[3] = { NULL, NULL, NULL };
  WELL_KNOWN_SID_TYPE sidtypes[3] = { WinCreatorOwnerSid, WinCreatorGroupSid, WinWorldSid };
  int ea_len = 0;
  DWORD dwRes, dwDisposition;
  PACL pACL = NULL;

  /* Initialize a security descriptor. */
  pSD = (PSECURITY_DESCRIPTOR)LocalAlloc(LPTR, SECURITY_DESCRIPTOR_MIN_LENGTH);
  if (NULL == pSD) {
    errno = ENOMEM;
    return NULL;
  }

  if (!InitializeSecurityDescriptor(pSD, SECURITY_DESCRIPTOR_REVISION)) {
    LocalFree(pSD);
    errno = EIO;
    return NULL;
  }

  for (i = 0; i < 3; i++) {
    BOOL b;
    DWORD bytes;
    int imasked = permissions & (0x07 << (2 - i));
    if (!imasked)
      continue;

    bytes = SECURITY_MAX_SID_SIZE;
    sids[ea_len] = (PSID)LocalAlloc(LMEM_FIXED, bytes);
    if (NULL == sids[ea_len]) {
      errno = ENOMEM;
      LocalFree(pSD);
      for (j = 0; j < ea_len; j++) {
        if (sids[j] != NULL) {
          LocalFree(sids[j]);
          sids[j] = NULL;
        }
      }
      return NULL;
    }

    b = CreateWellKnownSid(sidtypes[i], NULL, sids[ea_len], &bytes);
    if (!b) {
      errno = EINVAL;
      LocalFree(pSD);
      for (j = 0; j < ea_len; j++) {
        if (sids[j] != NULL) {
          LocalFree(sids[j]);
          sids[j] = NULL;
        }
      }
      return NULL;
    }

    /* Initialize an EXPLICIT_ACCESS structure for an ACE. */
    ZeroMemory(&ea[ea_len], sizeof(EXPLICIT_ACCESS));
    bytes = 0;
    if (01 & imasked)
      bytes = bytes | GENERIC_READ;
    if (02 & imasked)
      bytes = bytes | GENERIC_WRITE;
    if (04 & imasked)
      bytes = bytes | GENERIC_EXECUTE;
    ea[ea_len].grfAccessPermissions = bytes;
    ea[ea_len].grfAccessMode = SET_ACCESS;
    ea[ea_len].grfInheritance= NO_INHERITANCE;
    ea[ea_len].Trustee.TrusteeForm = TRUSTEE_IS_SID;
    ea[ea_len].Trustee.TrusteeType = TRUSTEE_IS_WELL_KNOWN_GROUP;
    ea[ea_len].Trustee.ptstrName  = (LPTSTR)sids[ea_len];
    ea_len = ea_len + 1;
  }

  /* Create a new ACL that contains the new ACEs. */
  dwRes = SetEntriesInAcl(ea_len, ea, NULL, &pACL);
  if (ERROR_SUCCESS != dwRes) {
    errno = EIO;
    LocalFree(pSD);
    for (j = 0; j < ea_len; j++) {
      if (sids[j] != NULL) {
        LocalFree(sids[j]);
        sids[j] = NULL;
      }
    }
    return NULL;
  }

  for (j = 0; j < ea_len; j++) {
    if (sids[j] != NULL) {
      LocalFree(sids[j]);
      sids[j] = NULL;
    }
  }

  /* Add the ACL to the security descriptor. */
  if (!SetSecurityDescriptorDacl(pSD, TRUE, pACL, FALSE)) {
    errno = EIO;
    LocalFree(pSD);
    LocalFree(pACL);
    return NULL;
  } 

  return pSD;
}

static void free_sd (PSECURITY_DESCRIPTOR sd)
{
  BOOL b, present, defaulted;
  PACL pACL = NULL;
  present = FALSE;
  b = GetSecurityDescriptorDacl(sd, &present, &pACL, &defaulted);
  if (b && present && !defaulted && pACL)
    LocalFree(pACL);
  LocalFree(sd);
}

static void randtemplate (char* templ, size_t l)
{
  int i;
  for (i = l - 6; i < l; i++) {
    int r = rand ();
    if ((r / (RAND_MAX + 1)) > ((RAND_MAX + 1) / 2))
      templ[i] = 'A' + (double)rand() / (RAND_MAX + 1) * ('Z' - 'A');
    else
      templ[i] = 'a' + (double)rand() / (RAND_MAX + 1) * ('z' - 'a');
  }
}

static char* mkdtemp (char* templ)
{
  int i;
  size_t l;
  BOOL b;
  SECURITY_ATTRIBUTES sa;
  
  if (templ == NULL) {
    errno = EINVAL;
    return NULL;
  }
  l = strlen (templ);
  if (l < 6 || strcmp(&templ[l - 6], "XXXXXX") != 0) {
    errno = EINVAL;
    return NULL;
  }
  srand(time(NULL));
  sa.nLength = sizeof(sa);
  sa.lpSecurityDescriptor = create_sd(0700);
  sa.bInheritHandle = FALSE;
  do {
    randtemplate(templ, l);
    SetLastError(0);
    b = CreateDirectoryA(templ, &sa);
  } while (!b && GetLastError() == ERROR_ALREADY_EXISTS);
  free_sd(sa.lpSecurityDescriptor);
  if (!b) {
    errno = EIO;
    return NULL;
  } else {
    errno = 0;
    return templ;
  }
}
EOF
# fix src/output_directory.cpp (version >= 1.29.0)
patch -ulbf src/output_directory.cpp << EOF
@@ -26,2 +26,5 @@
 #include <ftw.h>
+#ifdef _WIN32
+#include "../mkdtemp.c"
+#endif

@@ -70,3 +73,7 @@
     else
+#ifdef _WIN32
+      mkdir(dirname);
+#else
       mkdir(dirname, 00777);
+#endif
   }
@@ -158,3 +165,7 @@
 void trash_output_directory(const char *dirname) {
+#ifdef _WIN32
+  if (am_master()) mkdir(dirname);
+#else
   if (am_master()) mkdir(dirname, 00777);
+#endif
 }
EOF
wl-showstatus configure &&
 ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-hdf5 --without-scheme --with-python PYTHON=$PYDIR/python.exe CFLAGS="-D_GNU_SOURCE" &&
 # fix building DLLs
 sed -i.bak -e "s/\(allow_undefined=\)yes/\1no/" libtool &&
 ## fix detection of shared libraries
 #sed -i.bak2 -e "s/\(deplibs_check_method=\"\)[^\"]*/\1pass_all/" libtool &&
 wl-showstatus build-install &&
 make install-strip &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




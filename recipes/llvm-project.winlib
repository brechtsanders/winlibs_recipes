#export NAME="The LLVM Compiler Infrastructure"
#export STATUS=
#export URL=https://llvm.org/
#export BASENAME=llvm-project
#export DESCRIPTION="The LLVM Compiler Infrastructure - a toolkit for the construction of highly optimized compilers, optimizers, and run-time environments."
#export CATEGORY=development
#export TYPE=application
##export VERSION=12.0.0
##export VERSIONDATE=20210419
##export VERSION=12.0.1
##export VERSIONDATE=20210721
#export VERSION=13.0.0
#export VERSIONDATE=20211001
#wl-showstatus --package-version
##export DEPENDENCIES=pthreads,zlib,xz,libxml2,libffi,isl,z3,swig,lua,ncurses
##export DEPENDENCIES=pthreads,zlib,xz,libxml2,libffi,isl,z3,swig,lua,ncurses,protobuf,wineditline
#export DEPENDENCIES=pthreads,zlib,xz,libxml2,libffi,isl,z3,swig,lua,ncurses,protobuf,wineditline,cpython-mingw
#export OPTIONALDEPENDENCIES=udis86,graphviz,hwloc,libpfm4
##export BUILDDEPENDENCIES=cmake,ninja
##export OPTIONALBUILDDEPENDENCIES=
#export BUILDDEPENDENCIES=cmake,ninja,jwasm
#export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=llvm/LICENSE.TXT
#export LICENSETYPE="Apache with exceptions"
##export DOWNLOADURL="https://releases.llvm.org/ llvmorg-"
##export DOWNLOADURL="https://github.com/llvm/llvm-project/releases/ llvm-project- .src.tar.xz"
#export DOWNLOADURL="https://github.com/llvm/llvm-project/releases/ llvmorg-"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://github.com/llvm/llvm-project/releases/download/llvmorg-$VERSION/llvm-project-$VERSION.src.tar.xz
##export DOWNLOADSOURCEURL=https://github.com/llvm/llvm-project/releases/download/llvmorg-$(echo $VERSION|sed -e "s/\([0-9]\)\(rc\)/\1-\2/")/llvm-project-$VERSION.src.tar.xz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#wl-showstatus extract
#tar xJ --force-local -f $TARBALLDIR/$BASENAME/llvm-project-$VERSION.src.tar.xz
#cd llvm-project-$VERSION.src
## fix lldb/source/Host/common/MainLoop.cpp (version >= 12.0.0)
#patch -ulbf lldb/source/Host/common/MainLoop.cpp << EOF
#@@ -29,2 +29,6 @@
# #elif defined(_WIN32)
#+#if _WIN32_WINNT < 0x0600
#+#undef _WIN32_WINNT
#+#define _WIN32_WINNT 0x0600
#+#endif
# #include <winsock2.h>
#EOF
## fix llvm/tools/llvm-config/llvm-config.cpp (version >= 12.0.0)
#patch -ulbf llvm/tools/llvm-config/llvm-config.cpp << EOF
#@@ -382,2 +382,25 @@
#     SharedVersionedExt = LLVM_DYLIB_VERSION ".dll";
#+#ifdef __MINGW32__
#+    if (1) {
#+      SharedPrefix = "lib";
#+      StaticExt = "a";
#+      StaticPrefix = "lib";
#+      if (getenv("MSYSTEM")) {
#+        std::replace(ActiveObjRoot.begin(), ActiveObjRoot.end(), '\\\\', '/');
#+        std::replace(ActivePrefix.begin(), ActivePrefix.end(), '\\\\', '/');
#+        std::replace(ActiveBinDir.begin(), ActiveBinDir.end(), '\\\\', '/');
#+        std::replace(ActiveLibDir.begin(), ActiveLibDir.end(), '\\\\', '/');
#+        std::replace(ActiveCMakeDir.begin(), ActiveCMakeDir.end(), '\\\\', '/');
#+        std::replace(ActiveIncludeOption.begin(), ActiveIncludeOption.end(), '\\\\', '/');
#+      } else {
#+        DirSep = "\\\\";
#+        std::replace(ActiveObjRoot.begin(), ActiveObjRoot.end(), '/', '\\\\');
#+        std::replace(ActivePrefix.begin(), ActivePrefix.end(), '/', '\\\\');
#+        std::replace(ActiveBinDir.begin(), ActiveBinDir.end(), '/', '\\\\');
#+        std::replace(ActiveLibDir.begin(), ActiveLibDir.end(), '/', '\\\\');
#+        std::replace(ActiveCMakeDir.begin(), ActiveCMakeDir.end(), '/', '\\\\');
#+        std::replace(ActiveIncludeOption.begin(), ActiveIncludeOption.end(), '/', '\\\\');
#+      }
#+    } else
#+#endif
#     if (HostTriple.isOSCygMing()) {
#EOF
## fix missing AcquireSRWLockShared in libunwind/src/libunwind.cpp and libunwind/src/Unwind-seh.cpp
#for F in libunwind/src/libunwind.cpp libunwind/src/Unwind-seh.cpp; do
#mv $F $F.bak
#cat > $F << EOF
##if !defined(_WIN32_WINNT) || _WIN32_WINNT < 0x0600
##undef _WIN32_WINNT
##define _WIN32_WINNT 0x0600
##endif
##include <synchapi.h>
#EOF
#cat $F.bak >> $F
#done
## fix clang/tools/clang-fuzzer/ExampleClangLoopProtoFuzzer.cpp (version >= 10.0.0)
#patch -ulbf clang/tools/clang-fuzzer/ExampleClangLoopProtoFuzzer.cpp << EOF
#@@ -27,3 +27,3 @@
#   auto S = LoopFunctionToString(input);
#-  HandleCXX(S, GetCLArgs());
#+  HandleCXX(S, "./test.cc", GetCLArgs());
# }
#EOF
## fix clang/examples/Attribute/CMakeLists.txt (version >= 11.0.0)
#patch -ulbf clang/examples/Attribute/CMakeLists.txt << EOF
#@@ -2,3 +2,3 @@
#
#-if(LLVM_ENABLE_PLUGINS AND (WIN32 OR CYGWIN))
#+if(LLVM_ENABLE_PLUGINS AND (MSVC OR CYGWIN))
#   target_link_libraries(Attribute PRIVATE
#EOF
## don't link lldb with -lgpm
#sed -i.bak "s/list(APPEND [^ ]*_LIBS gpm)/#&/" lldb/source/Core/CMakeLists.txt lldb/source/Host/CMakeLists.txt
##mkdir -p build_win &&
## wl-showstatus configure &&
## #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DLLVM_BUILD_STATIC:BOOL=ON -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DCLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" -DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;compiler-rt;lld;lldb" -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=ON -DCLANG_BUILD_TOOLS:BOOL=ON -DCLANG_DEFAULT_RTLIB:STRING=libgcc -DCLANG_DEFAULT_UNWINDLIB:STRING=libgcc -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON -DLLDB_ENABLE_CURSES:STRING=OFF -DLLDB_ENABLE_LIBEDIT:STRING=OFF -DLLDB_ENABLE_LIBXML2:STRING=ON -DLLDB_ENABLE_LUA:STRING=ON -DLLDB_ENABLE_LZMA:STRING=ON -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_MODULES:BOOL=OFF -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON -DLLVM_ENABLE_LIBXML2:STRING=ON -DLLVM_ENABLE_THREADS:BOOL=ON -DLLVM_ENABLE_UNWIND_TABLES:BOOL=ON -DLLVM_ENABLE_Z3_SOLVER:BOOL=ON -DLLVM_INCLUDE_TOOLS:BOOL=ON -DLLVM_INCLUDE_UTILS:BOOL=ON -DLLVM_INSTALL_UTILS:BOOL=ON -DLLDB_ENABLE_CURSES:BOOL=OFF -DLLDB_ENABLE_LIBXML2:BOOL=ON -DLLDB_ENABLE_LUA:BOOL=ON -DLLDB_ENABLE_LZMA:BOOL=ON -DLLDB_ENABLE_PYTHON:BOOL=OFF -DPython3_EXECUTABLE:PATH=$PYDIR/python.exe -DCLANG_INCLUDE_TESTS:BOOL=OFF -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF -DLLDB_INCLUDE_TESTS:BOOL=OFF -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF  -DLLVM_TOOL_LLVM_C_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_APINOTES_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_ARCMT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_C_ARCMT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_C_INDEX_TEST_BUILD:BOOL=OFF -Sllvm -Bbuild_win &&
## #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DLLVM_BUILD_STATIC:BOOL=ON -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF -DDCLANG_LINK_CLANG_DYLIB:BOOL=OFF -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLLVM_TARGETS_TO_BUILD:STRING=all -DCLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" -DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;compiler-rt;lld;lldb" -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=ON -DLLVM_ENABLE_THREADS:BOOL=ON -DCLANG_BUILD_TOOLS:BOOL=ON -DCLANG_DEFAULT_RTLIB:STRING=libgcc -DCLANG_DEFAULT_CXX_STDLIB:STRING=libstdc++ -DCLANG_DEFAULT_OPENMP_RUNTIME:STRING=libgomp -DCLANG_DEFAULT_UNWINDLIB:STRING=libgcc -DCLANG_ENABLE_PROTO_FUZZER:BOOL=ON -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON -DLLDB_ENABLE_LIBXML2:STRING=ON -DLLDB_ENABLE_LUA:STRING=ON -DLLDB_ENABLE_LZMA:STRING=ON -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_MODULES:BOOL=OFF -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON -DLLVM_ENABLE_LIBXML2:STRING=ON -DLLVM_ENABLE_THREADS:BOOL=ON -DLLVM_ENABLE_UNWIND_TABLES:BOOL=ON -DLLVM_ENABLE_Z3_SOLVER:BOOL=ON -DLLVM_INCLUDE_TOOLS:BOOL=ON -DLLVM_INCLUDE_UTILS:BOOL=ON -DLLVM_INSTALL_UTILS:BOOL=ON -DLLVM_ENABLE_LIBEDIT:BOOL=OFF -DLLDB_ENABLE_LIBEDIT:STRING=OFF -DLLDB_ENABLE_CURSES:BOOL=OFF -DLLDB_ENABLE_LIBXML2:BOOL=ON -DLLDB_ENABLE_LUA:BOOL=ON -DLLDB_ENABLE_LZMA:BOOL=ON -DLLDB_ENABLE_PYTHON:BOOL=OFF -DPython3_EXECUTABLE:PATH=$PYDIR/python.exe -DLLVM_INCLUDE_DOCS:BOOL=OFF -DCLANG_INCLUDE_TESTS:BOOL=OFF -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF -DLLDB_INCLUDE_TESTS:BOOL=OFF -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF -DLLVM_TOOL_LLVM_C_TEST_BUILD:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_BUILD_BENCHMARKS:BOOL=OFF -DLLVM_BUILD_TESTS:BOOL=OFF -DBUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF -DCLANG_PLUGIN_SUPPORT:BOOL=ON -DCLANG_ENABLE_CLANGD:BOOL=ON -DCLANG_TOOL_APINOTES_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_ARCMT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_C_ARCMT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_C_INDEX_TEST_BUILD:BOOL=OFF -DCLANG_INCLUDE_DOCS:BOOL=OFF -DCLANG_BUILD_EXAMPLES:BOOL=OFF -DLLD_BUILD_TOOLS:BOOL=ON -DLLDB_TOOL_LLDB_SERVER_BUILD:BOOL=OFF -DLLDB_TOOL_LLDB_VSCODE_BUILD:BOOL=OFF -DLLDB_DISABLE_PYTHON:BOOL=ON  -Sllvm -Bbuild_win &&
## cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DLLVM_BUILD_STATIC:BOOL=OFF -DLLVM_ENABLE_SHARED_LIBS:BOOL=ON -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF -DDCLANG_LINK_CLANG_DYLIB:BOOL=OFF -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLLVM_TARGETS_TO_BUILD:STRING=all -DCLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" -DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;compiler-rt;lld;lldb" -DLLVM_ENABLE_THREADS:BOOL=ON -DCLANG_BUILD_TOOLS:BOOL=ON -DCLANG_DEFAULT_RTLIB:STRING=libgcc -DCLANG_DEFAULT_CXX_STDLIB:STRING=libstdc++ -DCLANG_DEFAULT_OPENMP_RUNTIME:STRING=libgomp -DCLANG_DEFAULT_UNWINDLIB:STRING=libgcc -DCLANG_ENABLE_PROTO_FUZZER:BOOL=ON -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON -DLLDB_ENABLE_LIBXML2:STRING=ON -DLLDB_ENABLE_LUA:STRING=ON -DLLDB_ENABLE_LZMA:STRING=ON -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_MODULES:BOOL=OFF -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON -DLLVM_ENABLE_LIBXML2:STRING=ON -DLLVM_ENABLE_THREADS:BOOL=ON -DLLVM_ENABLE_UNWIND_TABLES:BOOL=ON -DLLVM_ENABLE_Z3_SOLVER:BOOL=ON -DLLVM_INCLUDE_TOOLS:BOOL=ON -DLLVM_INCLUDE_UTILS:BOOL=ON -DLLVM_INSTALL_UTILS:BOOL=ON -DLLVM_ENABLE_LIBEDIT:BOOL=OFF -DLLDB_ENABLE_LIBEDIT:STRING=OFF -DLLDB_ENABLE_CURSES:BOOL=OFF -DLLDB_ENABLE_LIBXML2:BOOL=ON -DLLDB_ENABLE_LUA:BOOL=ON -DLLDB_ENABLE_LZMA:BOOL=ON -DLLDB_ENABLE_PYTHON:BOOL=OFF -DPython3_EXECUTABLE:PATH=$PYDIR/python.exe -DLLVM_INCLUDE_DOCS:BOOL=OFF -DCLANG_INCLUDE_TESTS:BOOL=OFF -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF -DLLDB_INCLUDE_TESTS:BOOL=OFF -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF -DLLVM_TOOL_LLVM_C_TEST_BUILD:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_BUILD_BENCHMARKS:BOOL=OFF -DLLVM_BUILD_TESTS:BOOL=OFF -DBUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF -DCLANG_PLUGIN_SUPPORT:BOOL=ON -DCLANG_ENABLE_CLANGD:BOOL=ON -DCLANG_TOOL_APINOTES_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_ARCMT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_C_ARCMT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_C_INDEX_TEST_BUILD:BOOL=OFF -DCLANG_INCLUDE_DOCS:BOOL=OFF -DCLANG_BUILD_EXAMPLES:BOOL=OFF -DLLD_BUILD_TOOLS:BOOL=ON -DLLDB_TOOL_LLDB_SERVER_BUILD:BOOL=OFF -DLLDB_TOOL_LLDB_VSCODE_BUILD:BOOL=OFF -DLLDB_DISABLE_PYTHON:BOOL=ON  -Sllvm -Bbuild_win &&
## #-DCMAKE_EXE_LINKER_FLAGS:STRING="-Wl,--as-needed -lncurses -liconv" 
## # -DLLVM_TOOL_CLANG_BUILD:BOOL=ON -DLLVM_TOOL_COMPILER_RT_BUILD:BOOL=ON -DLLVM_TOOL_DRAGONEGG_BUILD:BOOL=ON -DLLVM_TOOL_LIBCXXABI_BUILD:BOOL=OFF -DLLVM_TOOL_LIBCXX_BUILD:BOOL=OFF -DLLVM_TOOL_LIBC_BUILD:BOOL=OFF -DLLVM_TOOL_LIBUNWIND_BUILD:BOOL=OFF -DLLVM_TOOL_LLDB_BUILD:BOOL=ON -DLLVM_TOOL_LLD_BUILD:BOOL=ON -DLLVM_TOOL_LLGO_BUILD:BOOL=OFF -DLLVM_TOOL_MLIR_BUILD:BOOL=OFF -DLLVM_TOOL_OPENMP_BUILD:BOOL=OFF -DLLVM_TOOL_PARALLEL_LIBS_BUILD:BOOL=OFF -DLLVM_TOOL_POLLY_BUILD:BOOL=OFF -DLLVM_TOOL_PSTL_BUILD:BOOL=OFF
## # -DLLVM_POLLY_BUILD:BOOL=OFF -DLLVM_POLLY_LINK_INTO_TOOLS:BOOL=OFF -DLLVM_BUILD_DOCS:BOOL=OFF -DLLVM_INCLUDE_DOCS:BOOL=OFF -DCLANG_INCLUDE_DOCS:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_BUILD_BENCHMARKS:BOOL=OFF -DLLVM_INCLUDE_BENCHMARKS:BOOL=OFF -DLLVM_BUILD_TESTS:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF -DLLVM_EXTERNAL_CLANG_SOURCE_DIR:PATH=$(pwd)/clang -DLLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR:PATH=$(pwd)/compiler-rt -DLLVM_EXTERNAL_LIBCXXABI_SOURCE_DIR:PATH=$(pwd)/libcxxabi -DLLVM_EXTERNAL_LIBCXX_SOURCE_DIR:PATH=$(pwd)/libcxx -DLLVM_EXTERNAL_LIBC_SOURCE_DIR:PATH=$(pwd)/libc -DLLVM_EXTERNAL_LIBUNWIND_SOURCE_DIR:PATH=$(pwd)/libunwind -DLLVM_EXTERNAL_LLDB_SOURCE_DIR:PATH=$(pwd)/lldb -DLLVM_EXTERNAL_LLD_SOURCE_DIR:PATH=$(pwd)/lld -DLLVM_EXTERNAL_LLGO_SOURCE_DIR:PATH=$(pwd)/llgo -DLLVM_EXTERNAL_MLIR_SOURCE_DIR:PATH=$(pwd)/mlir -DLLVM_EXTERNAL_OPENMP_SOURCE_DIR:PATH=$(pwd)/openmp -DLLVM_EXTERNAL_PARALLEL_LIBS_SOURCE_DIR:PATH=$(pwd)/parallel-libs -DLLVM_EXTERNAL_POLLY_SOURCE_DIR:PATH=$(pwd)/polly -DLLVM_EXTERNAL_PSTL_SOURCE_DIR:PATH=$(pwd)/pstl -DCMAKE_EXE_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition"
## #-DBENCHMARK_BUILD_32_BITS:BOOL=OFF
## #-DLIBUNWIND_BUILD_32_BITS:BOOL=OFF
## #-DCLANG_DEFAULT_OPENMP_RUNTIME:STRING=libomp
## #-DLLVM_ENABLE_LIBPFM:BOOL=OFF
## #-DLLVM_ENABLE_LTO:STRING=Full
## #-DLLVM_ENABLE_MODULES:BOOL=ON
## #-DLLVM_ENABLE_PLUGINS:BOOL=ON
## #-DLLVM_ENABLE_RUNTIMES:STRING="compiler-rt;libcxx;libcxxabi;libunwind;openmp"
## #-DLLDB_ENABLE_LIBEDIT:STRING=ON
## 
## #-DLLVM_POLLY_BUILD:BOOL=OFF -DLLVM_POLLY_LINK_INTO_TOOLS:BOOL=OFF -DCMAKE_EXE_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition" 
## #-DCLANG_ENABLE_BOOTSTRAP:BOOL=OFF
## #-DLLVM_INSTALL_TOOLCHAIN_ONLY:BOOL=ON -DLLVM_TARGETS_CONFIGURED:BOOL=ON 
## #-DLLDB_BUILT_STANDALONE:BOOL=ON -DSKIP_LLDB_SERVER_BUILD:BOOL=ON -DLLDB_DISABLE_CURSES:BOOL=OFF -DCURSES_NCURSES_LIBRARY:STRING=-lncurses -DCURSES_INCLUDE_PATH:PATH=$MINGWPREFIX/include/ncurses -DCURSES_CURSES_LIBRARY:STRING=-lncurses -DCURSES_FORM_LIBRARY:STRING=-lform
##
## #-DBUILD_SHARED_LIBS:BOOL=ON -DLLVM_BUILD_STATIC:BOOL=OFF -DLLVM_ENABLE_SHARED_LIBS:BOOL=ON
##
## #echo " -Wl,--as-needed -lncurses" >> build_win/CMakeFiles/liblldb.rsp &&
## #echo " -Wl,--as-needed -lncurses" >> build_win/CMakeFiles/lldb-server.rsp &&
## #echo " -Wl,--as-needed -lncurses -liconv" >> build_win/CMakeFiles/liblldb.rsp &&
## #echo " -Wl,--as-needed -lncurses -liconv" >> build_win/CMakeFiles/lldb-server.rsp &&
## #sed -i.bak -e "s?LINK_LIBRARIES = lib/liblldbBase\.a?& -Wl,--as-needed -liconv?" build_win/build.ninja &&
## # link with -fPIC to fix relocation truncated to fit errors
## sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*-ladvapi32/& -Wl,--as-needed -liconv/" build_win/build.ninja &&
## #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*-ladvapi32/& -Wl,--as-needed -liconv -fPIC -mcmodel=large/" build_win/build.ninja &&
## #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*-ladvapi32/& -Wl,--as-needed -liconv -fPIC -mcmodel=medium/" build_win/build.ninja &&
## #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*-ladvapi32/& -Wl,--as-needed -liconv -Bdynamic/" build_win/build.ninja &&
## #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*-ladvapi32/& -Wl,--as-needed -liconv -fPIC -Bdynamic/" build_win/build.ninja &&
## #sed -i.bak2 -e "s/FLAGS.*=.*-Wa,-mbig-obj/& -fPIC/" build_win/build.ninja &&
## wl-showstatus build-install &&
## ninja -Cbuild_win install/strip &&
##    echo OK
#
##mkdir -p build_static build_shared &&
## wl-showstatus configure &&
## #cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DLLVM_BUILD_STATIC=ON -DLLVM_LINK_LLVM_DYLIB:BOOL=ON -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLLVM_TARGETS_TO_BUILD:STRING=all -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_MODULES:BOOL=OFF -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe -DLLVM_POLLY_BUILD:BOOL=OFF -DLLVM_POLLY_LINK_INTO_TOOLS:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_BUILD_BENCHMARKS:BOOL=OFF -DLLVM_BUILD_TESTS:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF -DCMAKE_EXE_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition" -Sllvm -Bbuild_static &&
## #cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DLLVM_BUILD_STATIC=ON -DLLVM_LINK_LLVM_DYLIB:BOOL=ON -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLLVM_TOOL_CLANG_BUILD:BOOL=ON -DLLVM_TOOL_COMPILER_RT_BUILD:BOOL=ON -DLLVM_TOOL_DRAGONEGG_BUILD:BOOL=ON -DLLVM_TOOL_LIBCXXABI_BUILD:BOOL=OFF -DLLVM_TOOL_LIBCXX_BUILD:BOOL=OFF -DLLVM_TOOL_LIBC_BUILD:BOOL=OFF -DLLVM_TOOL_LIBUNWIND_BUILD:BOOL=OFF -DLLVM_TOOL_LLDB_BUILD:BOOL=ON -DLLVM_TOOL_LLD_BUILD:BOOL=ON -DLLVM_TOOL_LLGO_BUILD:BOOL=OFF -DLLVM_TOOL_MLIR_BUILD:BOOL=OFF -DLLVM_TOOL_OPENMP_BUILD:BOOL=OFF -DLLVM_TOOL_PARALLEL_LIBS_BUILD:BOOL=OFF -DLLVM_TOOL_POLLY_BUILD:BOOL=OFF -DLLVM_TOOL_PSTL_BUILD:BOOL=OFF -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_MODULES:BOOL=OFF -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe -DLLVM_POLLY_BUILD:BOOL=OFF -DLLVM_POLLY_LINK_INTO_TOOLS:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_BUILD_BENCHMARKS:BOOL=OFF -DLLVM_BUILD_TESTS:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF -DLLVM_EXTERNAL_CLANG_SOURCE_DIR:PATH=$(pwd)/clang -DLLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR:PATH=$(pwd)/compiler-rt -DLLVM_EXTERNAL_LIBCXXABI_SOURCE_DIR:PATH=$(pwd)/libcxxabi -DLLVM_EXTERNAL_LIBCXX_SOURCE_DIR:PATH=$(pwd)/libcxx -DLLVM_EXTERNAL_LIBC_SOURCE_DIR:PATH=$(pwd)/libc -DLLVM_EXTERNAL_LIBUNWIND_SOURCE_DIR:PATH=$(pwd)/libunwind -DLLVM_EXTERNAL_LLDB_SOURCE_DIR:PATH=$(pwd)/lldb -DLLVM_EXTERNAL_LLD_SOURCE_DIR:PATH=$(pwd)/lld -DLLVM_EXTERNAL_LLGO_SOURCE_DIR:PATH=$(pwd)/llgo -DLLVM_EXTERNAL_MLIR_SOURCE_DIR:PATH=$(pwd)/mlir -DLLVM_EXTERNAL_OPENMP_SOURCE_DIR:PATH=$(pwd)/openmp -DLLVM_EXTERNAL_PARALLEL_LIBS_SOURCE_DIR:PATH=$(pwd)/parallel-libs -DLLVM_EXTERNAL_POLLY_SOURCE_DIR:PATH=$(pwd)/polly -DLLVM_EXTERNAL_PSTL_SOURCE_DIR:PATH=$(pwd)/pstl -DCMAKE_EXE_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition" -Sllvm -Bbuild_static &&
## cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DLLVM_BUILD_STATIC=ON -DLLVM_LINK_LLVM_DYLIB:BOOL=ON -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLLVM_TOOL_CLANG_BUILD:BOOL=ON -DLLVM_TOOL_COMPILER_RT_BUILD:BOOL=ON -DLLVM_TOOL_DRAGONEGG_BUILD:BOOL=ON -DLLVM_TOOL_LIBCXXABI_BUILD:BOOL=OFF -DLLVM_TOOL_LIBCXX_BUILD:BOOL=OFF -DLLVM_TOOL_LIBC_BUILD:BOOL=OFF -DLLVM_TOOL_LIBUNWIND_BUILD:BOOL=OFF -DLLVM_TOOL_LLDB_BUILD:BOOL=OFF -DLLVM_TOOL_LLD_BUILD:BOOL=ON -DLLVM_TOOL_LLGO_BUILD:BOOL=OFF -DLLVM_TOOL_MLIR_BUILD:BOOL=OFF -DLLVM_TOOL_OPENMP_BUILD:BOOL=OFF -DLLVM_TOOL_PARALLEL_LIBS_BUILD:BOOL=OFF -DLLVM_TOOL_POLLY_BUILD:BOOL=OFF -DLLVM_TOOL_PSTL_BUILD:BOOL=OFF -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_MODULES:BOOL=OFF -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON -DPython2_EXECUTABLE:PATH=$PY2DIR/python.exe -DPython3_EXECUTABLE:PATH=$PYDIR/python.exe -DEPYDOC_EXECUTABLE:FILEPATH="$PY2DIR/python.exe $MINGWPREFIX/python2/Scripts/epydoc" -DLLVM_POLLY_BUILD:BOOL=OFF -DLLVM_POLLY_LINK_INTO_TOOLS:BOOL=OFF -DLLVM_BUILD_DOCS:BOOL=OFF -DLLVM_INCLUDE_DOCS:BOOL=OFF -DCLANG_INCLUDE_DOCS:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_BUILD_BENCHMARKS:BOOL=OFF -DLLVM_INCLUDE_BENCHMARKS:BOOL=OFF -DLLVM_BUILD_TESTS:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF -DLLVM_EXTERNAL_CLANG_SOURCE_DIR:PATH=$(pwd)/clang -DLLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR:PATH=$(pwd)/compiler-rt -DLLVM_EXTERNAL_LIBCXXABI_SOURCE_DIR:PATH=$(pwd)/libcxxabi -DLLVM_EXTERNAL_LIBCXX_SOURCE_DIR:PATH=$(pwd)/libcxx -DLLVM_EXTERNAL_LIBC_SOURCE_DIR:PATH=$(pwd)/libc -DLLVM_EXTERNAL_LIBUNWIND_SOURCE_DIR:PATH=$(pwd)/libunwind -DLLVM_EXTERNAL_LLDB_SOURCE_DIR:PATH=$(pwd)/lldb -DLLVM_EXTERNAL_LLD_SOURCE_DIR:PATH=$(pwd)/lld -DLLVM_EXTERNAL_LLGO_SOURCE_DIR:PATH=$(pwd)/llgo -DLLVM_EXTERNAL_MLIR_SOURCE_DIR:PATH=$(pwd)/mlir -DLLVM_EXTERNAL_OPENMP_SOURCE_DIR:PATH=$(pwd)/openmp -DLLVM_EXTERNAL_PARALLEL_LIBS_SOURCE_DIR:PATH=$(pwd)/parallel-libs -DLLVM_EXTERNAL_POLLY_SOURCE_DIR:PATH=$(pwd)/polly -DLLVM_EXTERNAL_PSTL_SOURCE_DIR:PATH=$(pwd)/pstl -DCMAKE_EXE_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition" -Sllvm -Bbuild_static &&
## #-DLLVM_TOOL_LLDB_BUILD:BOOL=ON 
## #cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DLLVM_BUILD_STATIC=ON -DLLVM_LINK_LLVM_DYLIB:BOOL=ON -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;compiler-rt;debuginfo-tests;libc;libclc;libcxx;libcxxabi;libunwind;lld;lldb;llgo;mlir;openmp;parallel-libs;pstl" -DLLVM_ENABLE_RUNTIMES:STRING="libcxx;libcxxabi;libunwind;compiler-rt" -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_MODULES:BOOL=OFF -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe -DLLVM_POLLY_BUILD:BOOL=OFF -DLLVM_POLLY_LINK_INTO_TOOLS:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_BUILD_BENCHMARKS:BOOL=OFF -DLLVM_BUILD_TESTS:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF -DCMAKE_EXE_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition" -Sllvm -Bbuild_static &&
## #-DBUILD_SHARED_LIBS:BOOL=ON 
## #-DLLVM_ENABLE_MODULES:BOOL=ON 
## #-DLLVM_ENABLE_PROJECTS:STRING=all 
## #-DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;compiler-rt;debuginfo-tests;libc;libclc;libcxx;libcxxabi;libunwind;lld;lldb;llgo;mlir;openmp;parallel-libs;polly;pstl" 
## #-DLLVM_ENABLE_RUNTIMES:STRING=all
## #-DLLVM_ENABLE_RUNTIMES:STRING="libcxx;libcxxabi;libunwind;compiler-rt"
## #wl-showstatus configure &&
## #cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DLLVM_LINK_LLVM_DYLIB:BOOL=ON -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLLVM_TARGETS_TO_BUILD:STRING=all -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_MODULES:BOOL=OFF -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe -DLLVM_POLLY_BUILD:BOOL=OFF -DLLVM_POLLY_LINK_INTO_TOOLS:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_BUILD_BENCHMARKS:BOOL=OFF -DLLVM_BUILD_TESTS:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF -DCMAKE_EXE_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition" -Sllvm -Bbuild_shared &&
## #wl-showstatus build &&
## #( make -Cbuild_static | make -j1 -Cbuild_static ) &&
## #wl-showstatus build &&
## #( make -Cbuild_shared || make -j1 -Cbuild_shared ) &&
## #wl-showstatus build-install &&
## #( make -Cbuild_static install/strip | make -j1 -Cbuild_static install/strip ) &&
## #wl-showstatus build-install &&
## #( make -Cbuild_shared install/strip || make -j1 -Cbuild_shared install/strip ) &&
## #cp -u build_shared/lib/libLLVM*.dll.a $INSTALLPREFIX/share/llvm/lib/ &&
## wl-showstatus build-install &&
## ninja -Cbuild_static install/strip &&
##    echo OK
#
### fix detection og liblzma in lldb/cmake/modules/LLDBConfig.cmake (version >= 13.0.0)
##patch -ulbf lldb/cmake/modules/LLDBConfig.cmake << EOF
##@@ -47,3 +47,3 @@
##   if(\${find_package})
##-    find_package(\${package} \${ARG_VERSION} \${maybe_required})
##+    find_package(\${package} \${ARG_VERSION})
##     set(\${variable} "\${\${found}}")
##EOF
#mkdir -p build_static build_shared &&
# #wl-showstatus configure &&
# ##cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DLLVM_LINK_LLVM_DYLIB:BOOL=ON -DLLVM_BUILD_STATIC=ON -DLIBCLANG_BUILD_STATIC:BOOL=ON -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLLVM_TARGETS_TO_BUILD:STRING=all -DCLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" -DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;compiler-rt;lld;lldb" -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=OFF -DLLVM_ENABLE_THREADS:BOOL=ON -DCLANG_BUILD_TOOLS:BOOL=ON -DCLANG_DEFAULT_RTLIB:STRING=libgcc -DCLANG_DEFAULT_CXX_STDLIB:STRING=libstdc++ -DCLANG_DEFAULT_OPENMP_RUNTIME:STRING=libgomp -DCLANG_DEFAULT_UNWINDLIB:STRING=libgcc -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON -DLLDB_ENABLE_LIBXML2:STRING=ON -DLLDB_ENABLE_LUA:STRING=ON -DLLDB_ENABLE_LZMA:STRING=ON -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_MODULES:BOOL=OFF -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON -DLLVM_ENABLE_LIBXML2:STRING=ON -DLLVM_ENABLE_THREADS:BOOL=ON -DLLVM_ENABLE_UNWIND_TABLES:BOOL=ON -DLLVM_ENABLE_Z3_SOLVER:BOOL=ON -DLLVM_INCLUDE_TOOLS:BOOL=ON -DLLVM_INCLUDE_UTILS:BOOL=ON -DLLVM_INSTALL_UTILS:BOOL=ON -DLLVM_ENABLE_LIBEDIT:BOOL=OFF -DLLDB_ENABLE_LIBEDIT:STRING=OFF -DLLDB_ENABLE_CURSES:BOOL=OFF -DLLDB_ENABLE_LIBXML2:BOOL=ON -DLLDB_ENABLE_LUA:BOOL=ON -DLLDB_ENABLE_LZMA:BOOL=ON -DLLDB_ENABLE_PYTHON:BOOL=OFF -DPython3_EXECUTABLE:PATH=$PYDIR/python.exe -DLLVM_INCLUDE_DOCS:BOOL=OFF -DCLANG_INCLUDE_TESTS:BOOL=OFF -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF -DLLDB_INCLUDE_TESTS:BOOL=OFF -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF -DLLVM_TOOL_LLVM_C_TEST_BUILD:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_BUILD_BENCHMARKS:BOOL=OFF -DLLVM_BUILD_TESTS:BOOL=OFF -DBUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF -DCLANG_PLUGIN_SUPPORT:BOOL=ON -DCLANG_ENABLE_CLANGD:BOOL=ON -DCLANG_TOOL_APINOTES_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_ARCMT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_C_ARCMT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_C_INDEX_TEST_BUILD:BOOL=OFF -DCLANG_INCLUDE_DOCS:BOOL=OFF -DCLANG_BUILD_EXAMPLES:BOOL=OFF -DLLD_BUILD_TOOLS:BOOL=ON -DLLDB_TOOL_LLDB_SERVER_BUILD:BOOL=OFF -DLLDB_TOOL_LLDB_VSCODE_BUILD:BOOL=OFF -DLLDB_DISABLE_PYTHON:BOOL=ON -Sllvm -Bbuild_static &&
# ##cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DLLVM_LINK_LLVM_DYLIB:BOOL=ON -DLLVM_BUILD_STATIC=ON -DLIBCLANG_BUILD_STATIC:BOOL=ON -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLLVM_TARGETS_TO_BUILD:STRING=all -DCLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" -DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;compiler-rt;lld;lldb" -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=OFF -DLLVM_ENABLE_THREADS:BOOL=ON -DCLANG_BUILD_TOOLS:BOOL=ON -DCLANG_DEFAULT_RTLIB:STRING=libgcc -DCLANG_DEFAULT_CXX_STDLIB:STRING=libstdc++ -DCLANG_DEFAULT_OPENMP_RUNTIME:STRING=libgomp -DCLANG_DEFAULT_UNWINDLIB:STRING=libgcc -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON -DLLDB_ENABLE_LIBXML2:STRING=ON -DLLDB_ENABLE_LUA:STRING=ON -DLLDB_ENABLE_LZMA:STRING=ON -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_MODULES:BOOL=OFF -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON -DLLVM_ENABLE_LIBXML2:STRING=ON -DLLVM_ENABLE_THREADS:BOOL=ON -DLLVM_ENABLE_UNWIND_TABLES:BOOL=ON -DLLVM_ENABLE_Z3_SOLVER:BOOL=ON -DLLVM_INCLUDE_TOOLS:BOOL=ON -DLLVM_INCLUDE_UTILS:BOOL=ON -DLLVM_INSTALL_UTILS:BOOL=ON -DLLVM_ENABLE_LIBEDIT:BOOL=OFF -DLLDB_ENABLE_LIBEDIT:STRING=OFF -DLLDB_ENABLE_CURSES:BOOL=OFF -DLLDB_ENABLE_LIBXML2:BOOL=ON -DLLDB_ENABLE_LUA:BOOL=ON -DLLDB_ENABLE_LZMA:BOOL=ON -DLLDB_ENABLE_PYTHON:BOOL=OFF -DPython3_EXECUTABLE:PATH=$PYDIR/python.exe -DLLVM_INCLUDE_DOCS:BOOL=OFF -DCLANG_INCLUDE_TESTS:BOOL=OFF -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF -DLLDB_INCLUDE_TESTS:BOOL=OFF -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF -DLLVM_TOOL_LLVM_C_TEST_BUILD:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_BUILD_BENCHMARKS:BOOL=OFF -DLLVM_BUILD_TESTS:BOOL=OFF -DBUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF -DCLANG_PLUGIN_SUPPORT:BOOL=ON -DCLANG_ENABLE_CLANGD:BOOL=ON -DCLANG_TOOL_APINOTES_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_ARCMT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_C_ARCMT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_C_INDEX_TEST_BUILD:BOOL=OFF -DCLANG_INCLUDE_DOCS:BOOL=OFF -DCLANG_BUILD_EXAMPLES:BOOL=OFF -DLLD_BUILD_TOOLS:BOOL=ON -DLLDB_TOOL_LLDB_SERVER_BUILD:BOOL=OFF -DLLDB_TOOL_LLDB_VSCODE_BUILD:BOOL=OFF -DLLDB_DISABLE_PYTHON:BOOL=ON -Sllvm -Bbuild_static &&
# ##cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DLLVM_LINK_LLVM_DYLIB:BOOL=ON -DLLVM_BUILD_STATIC=ON -DLIBCLANG_BUILD_STATIC:BOOL=ON -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLLVM_TARGETS_TO_BUILD:STRING=all -DCLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" -DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;compiler-rt;lld;lldb;libclc" -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=OFF -DLLVM_ENABLE_THREADS:BOOL=ON -DCLANG_BUILD_TOOLS:BOOL=ON -DCLANG_DEFAULT_RTLIB:STRING=libgcc -DCLANG_DEFAULT_CXX_STDLIB:STRING=libstdc++ -DCLANG_DEFAULT_OPENMP_RUNTIME:STRING=libgomp -DCLANG_DEFAULT_UNWINDLIB:STRING=libgcc -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON -DLLDB_ENABLE_LIBXML2:STRING=ON -DLLDB_ENABLE_LUA:STRING=ON -DLLDB_ENABLE_LZMA:STRING=ON -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_MODULES:BOOL=OFF -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON -DLLVM_ENABLE_LIBXML2:STRING=ON -DLLVM_ENABLE_THREADS:BOOL=ON -DLLVM_ENABLE_UNWIND_TABLES:BOOL=ON -DLLVM_ENABLE_Z3_SOLVER:BOOL=ON -DLLVM_INCLUDE_TOOLS:BOOL=ON -DLLVM_INCLUDE_UTILS:BOOL=ON -DLLVM_INSTALL_UTILS:BOOL=ON -DLLVM_ENABLE_LIBEDIT:BOOL=OFF -DLLDB_ENABLE_LIBEDIT:STRING=OFF -DLLDB_ENABLE_CURSES:BOOL=OFF -DLLDB_ENABLE_LIBXML2:BOOL=ON -DLLDB_ENABLE_LUA:BOOL=ON -DLLDB_ENABLE_LZMA:BOOL=ON -DLLDB_ENABLE_PYTHON:BOOL=OFF -DPython3_EXECUTABLE:PATH=$PYDIR/python.exe -DLLVM_INCLUDE_DOCS:BOOL=OFF -DCLANG_INCLUDE_TESTS:BOOL=OFF -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF -DLLDB_INCLUDE_TESTS:BOOL=OFF -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF -DLLVM_TOOL_LLVM_C_TEST_BUILD:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_BUILD_BENCHMARKS:BOOL=OFF -DLLVM_BUILD_TESTS:BOOL=OFF -DBUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF -DCLANG_PLUGIN_SUPPORT:BOOL=ON -DCLANG_ENABLE_CLANGD:BOOL=ON -DCLANG_TOOL_APINOTES_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_ARCMT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_C_ARCMT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_C_INDEX_TEST_BUILD:BOOL=OFF -DCLANG_INCLUDE_DOCS:BOOL=OFF -DCLANG_BUILD_EXAMPLES:BOOL=OFF -DLLD_BUILD_TOOLS:BOOL=ON -DLLDB_TOOL_LLDB_SERVER_BUILD:BOOL=OFF -DLLDB_TOOL_LLDB_VSCODE_BUILD:BOOL=OFF -DLLDB_DISABLE_PYTHON:BOOL=ON -Sllvm -Bbuild_static &&
# #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=MinSizeRel -DBUILD_SHARED_LIBS:BOOL=OFF -DLLVM_LINK_LLVM_DYLIB:BOOL=ON -DLLVM_BUILD_STATIC=ON -DLIBCLANG_BUILD_STATIC:BOOL=ON -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLLVM_TARGETS_TO_BUILD:STRING="X86;NVPTX;AMDGPU;ARM;AArch64" -DCLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" -DLLD_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" -DFLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" -DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;compiler-rt;lld;lldb;libclc" -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=OFF -DLLVM_ENABLE_THREADS:BOOL=ON -DCLANG_BUILD_TOOLS:BOOL=ON -DCLANG_DEFAULT_RTLIB:STRING=libgcc -DCLANG_DEFAULT_CXX_STDLIB:STRING=libstdc++ -DCLANG_DEFAULT_OPENMP_RUNTIME:STRING=libgomp -DCLANG_DEFAULT_UNWINDLIB:STRING=libgcc -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON -DLLDB_ENABLE_LIBXML2:STRING=ON -DLLDB_ENABLE_LUA:STRING=ON -DLLDB_ENABLE_LZMA:STRING=ON -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_MODULES:BOOL=OFF -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON -DLLVM_ENABLE_LIBXML2:STRING=ON -DLLVM_ENABLE_THREADS:BOOL=ON -DLLVM_ENABLE_UNWIND_TABLES:BOOL=ON -DLLVM_ENABLE_Z3_SOLVER:BOOL=ON -DLLVM_INCLUDE_TOOLS:BOOL=ON -DLLVM_INCLUDE_UTILS:BOOL=ON -DLLVM_INSTALL_UTILS:BOOL=ON -DLLVM_ENABLE_LIBEDIT:BOOL=OFF -DLLDB_ENABLE_LIBEDIT:STRING=OFF -DLLDB_ENABLE_CURSES:BOOL=OFF -DLLDB_ENABLE_LIBXML2:BOOL=ON -DLLDB_ENABLE_LUA:BOOL=ON -DLLDB_ENABLE_LZMA:BOOL=ON -DLLDB_ENABLE_PYTHON:BOOL=OFF -DPython3_EXECUTABLE:PATH=$PYDIR/python.exe -DLLVM_INCLUDE_DOCS:BOOL=OFF -DCLANG_INCLUDE_TESTS:BOOL=OFF -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF -DLLDB_INCLUDE_TESTS:BOOL=OFF -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF -DLLVM_TOOL_LLVM_C_TEST_BUILD:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_BUILD_BENCHMARKS:BOOL=OFF -DLLVM_BUILD_TESTS:BOOL=OFF -DBUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF -DCLANG_PLUGIN_SUPPORT:BOOL=ON -DCLANG_ENABLE_CLANGD:BOOL=ON -DCLANG_TOOL_APINOTES_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_ARCMT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_C_ARCMT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_C_INDEX_TEST_BUILD:BOOL=OFF -DCLANG_INCLUDE_DOCS:BOOL=OFF -DCLANG_BUILD_EXAMPLES:BOOL=OFF -DLLD_BUILD_TOOLS:BOOL=ON -DLLDB_TOOL_LLDB_SERVER_BUILD:BOOL=OFF -DLLDB_TOOL_LLDB_VSCODE_BUILD:BOOL=OFF -DLLDB_DISABLE_PYTHON:BOOL=ON -Sllvm -Bbuild_static &&
# ##cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=MinSizeRel -DBUILD_SHARED_LIBS:BOOL=OFF -DLLVM_LINK_LLVM_DYLIB:BOOL=ON -DLLVM_BUILD_STATIC=ON -DLIBCLANG_BUILD_STATIC:BOOL=ON -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLLVM_TARGETS_TO_BUILD:STRING="X86;NVPTX;AMDGPU;ARM;AArch64" -DCLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" -DLLD_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" -DFLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" -DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;compiler-rt;lld;lldb;libclc;mlir;flang;openmp;parallel-libs;pstl" -DCMAKE_C_COMPILER:STRING=gcc.exe -DCMAKE_ASM_COMPILER:STRING=yasm.exe -DCMAKE_ASM_MASM_COMPILER:STRING="jwasm.exe $(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "-win64"; else echo "-coff"; fi)" -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=OFF -DLLVM_ENABLE_THREADS:BOOL=ON -DCLANG_BUILD_TOOLS:BOOL=ON -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON -DLLDB_ENABLE_LIBXML2:STRING=ON -DLLDB_ENABLE_LUA:STRING=ON -DLLDB_ENABLE_LZMA:STRING=ON -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_MODULES:BOOL=OFF -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON -DLLVM_ENABLE_LIBXML2:STRING=ON -DLLVM_ENABLE_THREADS:BOOL=ON -DLLVM_ENABLE_UNWIND_TABLES:BOOL=ON -DLLVM_ENABLE_Z3_SOLVER:BOOL=ON -DLLVM_INCLUDE_TOOLS:BOOL=ON -DLLVM_INCLUDE_UTILS:BOOL=ON -DLLVM_INSTALL_UTILS:BOOL=ON -DLLVM_ENABLE_LIBEDIT:BOOL=OFF -DLLDB_ENABLE_LIBEDIT:STRING=OFF -DLLDB_ENABLE_CURSES:BOOL=OFF -DLLDB_ENABLE_LIBXML2:BOOL=ON -DLLDB_ENABLE_LUA:BOOL=ON -DLLDB_ENABLE_LZMA:BOOL=ON -DLLDB_ENABLE_PYTHON:BOOL=OFF -DPython3_EXECUTABLE:PATH=$PYDIR/python.exe -DLLVM_INCLUDE_DOCS:BOOL=OFF -DCLANG_INCLUDE_TESTS:BOOL=OFF -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF -DLLDB_INCLUDE_TESTS:BOOL=OFF -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF -DLLVM_TOOL_LLVM_C_TEST_BUILD:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_BUILD_BENCHMARKS:BOOL=OFF -DLLVM_BUILD_TESTS:BOOL=OFF -DBUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF -DCLANG_PLUGIN_SUPPORT:BOOL=ON -DCLANG_ENABLE_CLANGD:BOOL=ON -DCLANG_TOOL_APINOTES_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_ARCMT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_C_ARCMT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_C_INDEX_TEST_BUILD:BOOL=OFF -DCLANG_INCLUDE_DOCS:BOOL=OFF -DCLANG_BUILD_EXAMPLES:BOOL=OFF -DLLD_BUILD_TOOLS:BOOL=ON -DLLDB_TOOL_LLDB_SERVER_BUILD:BOOL=OFF -DLLDB_TOOL_LLDB_VSCODE_BUILD:BOOL=OFF -DLLDB_DISABLE_PYTHON:BOOL=ON -Sllvm -Bbuild_static &&
# ##-DCMAKE_BUILD_TYPE=MinSizeRel 
# ##-DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;compiler-rt;lld;lldb;libclc;mlir;flang;openmp;parallel-libs;pstl" 
# ##-DCLANG_ENABLE_PROTO_FUZZER:BOOL=ON (requires protobuf)
# ##-DLLVM_ENABLE_LTO:STRING=Full (requires xz)
# ##-DLLVM_ENABLE_LTO:STRING=Thin 
# ##-DLLVM_PARALLEL_COMPILE_JOBS=6 -DLLVM_PARALLEL_LINK_JOBS=6 
# ##-DLLVM_LINK_LLVM_DYLIB:BOOL=ON 
# ##-DLIBCLANG_BUILD_STATIC:BOOL=ON 
# #-DLLDB_TOOL_LLDB_SERVER_BUILD:BOOL=ON 
# #-DLLDB_TOOL_LLDB_VSCODE_BUILD:BOOL=ON 
# #-DLLVM_ENABLE_LIBEDIT:BOOL=ON 
# #-DLLVM_ENABLE_TERMINFO:BOOL=OFF 
# #-DLLVM_TOOL_OPENMP_BUILD:BOOL=ON 
# #-DLLVM_TOOL_PARALLEL_LIBS_BUILD:BOOL=ON 
# ##-DLLVM_TARGETS_TO_BUILD:STRING="X86;NVPTX;AMDGPU;ARM;AArch64" 
# ##sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*-ladvapi32/& -Wl,--as-needed -liconv/" build_static/build.ninja &&
# #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*-ladvapi32/& -Wl,--as-needed -liconv -lxml2/" build_static/build.ninja &&
# wl-showstatus configure &&
# #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DLLVM_BUILD_STATIC=OFF -DLIBCLANG_BUILD_STATIC:BOOL=OFF -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLLVM_TARGETS_TO_BUILD:STRING=all -DCLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" -DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;compiler-rt;lld;lldb" -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=OFF -DLLVM_ENABLE_THREADS:BOOL=ON -DCLANG_BUILD_TOOLS:BOOL=ON -DCLANG_DEFAULT_RTLIB:STRING=libgcc -DCLANG_DEFAULT_CXX_STDLIB:STRING=libstdc++ -DCLANG_DEFAULT_OPENMP_RUNTIME:STRING=libgomp -DCLANG_DEFAULT_UNWINDLIB:STRING=libgcc -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON -DLLDB_ENABLE_LIBXML2:STRING=ON -DLLDB_ENABLE_LUA:STRING=ON -DLLDB_ENABLE_LZMA:STRING=ON -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_MODULES:BOOL=OFF -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON -DLLVM_ENABLE_LIBXML2:STRING=ON -DLLVM_ENABLE_THREADS:BOOL=ON -DLLVM_ENABLE_UNWIND_TABLES:BOOL=ON -DLLVM_ENABLE_Z3_SOLVER:BOOL=ON -DLLVM_INCLUDE_TOOLS:BOOL=ON -DLLVM_INCLUDE_UTILS:BOOL=ON -DLLVM_INSTALL_UTILS:BOOL=ON -DLLVM_ENABLE_LIBEDIT:BOOL=OFF -DLLDB_ENABLE_LIBEDIT:STRING=OFF -DLLDB_ENABLE_CURSES:BOOL=OFF -DLLDB_ENABLE_LIBXML2:BOOL=ON -DLLDB_ENABLE_LUA:BOOL=ON -DLLDB_ENABLE_LZMA:BOOL=ON -DLLDB_ENABLE_PYTHON:BOOL=OFF -DPython3_EXECUTABLE:PATH=$PYDIR/python.exe -DLLVM_INCLUDE_DOCS:BOOL=OFF -DCLANG_INCLUDE_TESTS:BOOL=OFF -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF -DLLDB_INCLUDE_TESTS:BOOL=OFF -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF -DLLVM_TOOL_LLVM_C_TEST_BUILD:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_BUILD_BENCHMARKS:BOOL=OFF -DLLVM_BUILD_TESTS:BOOL=OFF -DBUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF -DCLANG_PLUGIN_SUPPORT:BOOL=ON -DCLANG_ENABLE_CLANGD:BOOL=ON -DCLANG_TOOL_APINOTES_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_ARCMT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_C_ARCMT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_C_INDEX_TEST_BUILD:BOOL=OFF -DCLANG_INCLUDE_DOCS:BOOL=OFF -DCLANG_BUILD_EXAMPLES:BOOL=OFF -DLLD_BUILD_TOOLS:BOOL=ON -DLLDB_TOOL_LLDB_SERVER_BUILD:BOOL=OFF -DLLDB_TOOL_LLDB_VSCODE_BUILD:BOOL=OFF -DLLDB_DISABLE_PYTHON:BOOL=ON -Sllvm -Bbuild_shared &&
# #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DLLVM_BUILD_STATIC=OFF -DLIBCLANG_BUILD_STATIC:BOOL=OFF -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLLVM_TARGETS_TO_BUILD:STRING=all -DCLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" -DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;compiler-rt;lld;lldb" -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=OFF -DLLVM_ENABLE_THREADS:BOOL=ON -DCLANG_BUILD_TOOLS:BOOL=ON -DCLANG_DEFAULT_RTLIB:STRING=libgcc -DCLANG_DEFAULT_CXX_STDLIB:STRING=libstdc++ -DCLANG_DEFAULT_OPENMP_RUNTIME:STRING=libgomp -DCLANG_DEFAULT_UNWINDLIB:STRING=libgcc -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON -DLLDB_ENABLE_LIBXML2:STRING=ON -DLLDB_ENABLE_LUA:STRING=ON -DLLDB_ENABLE_LZMA:STRING=ON -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_MODULES:BOOL=OFF -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON -DLLVM_ENABLE_LIBXML2:STRING=ON -DLLVM_ENABLE_THREADS:BOOL=ON -DLLVM_ENABLE_UNWIND_TABLES:BOOL=ON -DLLVM_ENABLE_Z3_SOLVER:BOOL=ON -DLLVM_INCLUDE_TOOLS:BOOL=ON -DLLVM_INCLUDE_UTILS:BOOL=ON -DLLVM_INSTALL_UTILS:BOOL=ON -DLLVM_ENABLE_LIBEDIT:BOOL=OFF -DLLDB_ENABLE_LIBEDIT:STRING=OFF -DLLDB_ENABLE_CURSES:BOOL=OFF -DLLDB_ENABLE_LIBXML2:BOOL=ON -DLLDB_ENABLE_LUA:BOOL=ON -DLLDB_ENABLE_LZMA:BOOL=ON -DLLDB_ENABLE_PYTHON:BOOL=OFF -DPython3_EXECUTABLE:PATH=$PYDIR/python.exe -DLLVM_INCLUDE_DOCS:BOOL=OFF -DCLANG_INCLUDE_TESTS:BOOL=OFF -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF -DLLDB_INCLUDE_TESTS:BOOL=OFF -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF -DLLVM_TOOL_LLVM_C_TEST_BUILD:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_BUILD_BENCHMARKS:BOOL=OFF -DLLVM_BUILD_TESTS:BOOL=OFF -DBUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF -DCLANG_PLUGIN_SUPPORT:BOOL=ON -DCLANG_ENABLE_CLANGD:BOOL=ON -DCLANG_TOOL_APINOTES_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_ARCMT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_C_ARCMT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_C_INDEX_TEST_BUILD:BOOL=OFF -DCLANG_INCLUDE_DOCS:BOOL=OFF -DCLANG_BUILD_EXAMPLES:BOOL=OFF -DLLD_BUILD_TOOLS:BOOL=ON -DLLDB_TOOL_LLDB_SERVER_BUILD:BOOL=OFF -DLLDB_TOOL_LLDB_VSCODE_BUILD:BOOL=OFF -DLLDB_DISABLE_PYTHON:BOOL=ON -Sllvm -Bbuild_shared &&
# #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DLLVM_BUILD_STATIC=OFF -DLIBCLANG_BUILD_STATIC:BOOL=OFF -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLLVM_TARGETS_TO_BUILD:STRING=all -DCLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" -DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;compiler-rt;lld;lldb;libclc" -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=OFF -DLLVM_ENABLE_THREADS:BOOL=ON -DCLANG_BUILD_TOOLS:BOOL=ON -DCLANG_DEFAULT_RTLIB:STRING=libgcc -DCLANG_DEFAULT_CXX_STDLIB:STRING=libstdc++ -DCLANG_DEFAULT_OPENMP_RUNTIME:STRING=libgomp -DCLANG_DEFAULT_UNWINDLIB:STRING=libgcc -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON -DLLDB_ENABLE_LIBXML2:STRING=ON -DLLDB_ENABLE_LUA:STRING=ON -DLLDB_ENABLE_LZMA:STRING=ON -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_MODULES:BOOL=OFF -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON -DLLVM_ENABLE_LIBXML2:STRING=ON -DLLVM_ENABLE_THREADS:BOOL=ON -DLLVM_ENABLE_UNWIND_TABLES:BOOL=ON -DLLVM_ENABLE_Z3_SOLVER:BOOL=ON -DLLVM_INCLUDE_TOOLS:BOOL=ON -DLLVM_INCLUDE_UTILS:BOOL=ON -DLLVM_INSTALL_UTILS:BOOL=ON -DLLVM_ENABLE_LIBEDIT:BOOL=OFF -DLLDB_ENABLE_LIBEDIT:STRING=OFF -DLLDB_ENABLE_CURSES:BOOL=OFF -DLLDB_ENABLE_LIBXML2:BOOL=ON -DLLDB_ENABLE_LUA:BOOL=ON -DLLDB_ENABLE_LZMA:BOOL=ON -DLLDB_ENABLE_PYTHON:BOOL=OFF -DPython3_EXECUTABLE:PATH=$PYDIR/python.exe -DLLVM_INCLUDE_DOCS:BOOL=OFF -DCLANG_INCLUDE_TESTS:BOOL=OFF -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF -DLLDB_INCLUDE_TESTS:BOOL=OFF -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF -DLLVM_TOOL_LLVM_C_TEST_BUILD:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_BUILD_BENCHMARKS:BOOL=OFF -DLLVM_BUILD_TESTS:BOOL=OFF -DBUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF -DCLANG_PLUGIN_SUPPORT:BOOL=ON -DCLANG_ENABLE_CLANGD:BOOL=ON -DCLANG_TOOL_APINOTES_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_ARCMT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_C_ARCMT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_C_INDEX_TEST_BUILD:BOOL=OFF -DCLANG_INCLUDE_DOCS:BOOL=OFF -DCLANG_BUILD_EXAMPLES:BOOL=OFF -DLLD_BUILD_TOOLS:BOOL=ON -DLLDB_TOOL_LLDB_SERVER_BUILD:BOOL=OFF -DLLDB_TOOL_LLDB_VSCODE_BUILD:BOOL=OFF -DLLDB_DISABLE_PYTHON:BOOL=ON -Sllvm -Bbuild_shared &&
# #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=MinSizeRel -DBUILD_SHARED_LIBS:BOOL=ON -DLLVM_BUILD_STATIC=OFF -DLIBCLANG_BUILD_STATIC:BOOL=OFF -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLLVM_TARGETS_TO_BUILD:STRING="X86;NVPTX;AMDGPU;ARM;AArch64" -DCLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" -DLLD_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" -DFLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" -DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;compiler-rt;lld;lldb;libclc" -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=OFF -DLLVM_ENABLE_THREADS:BOOL=ON -DCLANG_BUILD_TOOLS:BOOL=ON -DCLANG_DEFAULT_RTLIB:STRING=libgcc -DCLANG_DEFAULT_CXX_STDLIB:STRING=libstdc++ -DCLANG_DEFAULT_OPENMP_RUNTIME:STRING=libgomp -DCLANG_DEFAULT_UNWINDLIB:STRING=libgcc -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON -DLLDB_ENABLE_LIBXML2:STRING=ON -DLLDB_ENABLE_LUA:STRING=ON -DLLDB_ENABLE_LZMA:STRING=ON -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_MODULES:BOOL=OFF -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON -DLLVM_ENABLE_LIBXML2:STRING=ON -DLLVM_ENABLE_THREADS:BOOL=ON -DLLVM_ENABLE_UNWIND_TABLES:BOOL=ON -DLLVM_ENABLE_Z3_SOLVER:BOOL=ON -DLLVM_INCLUDE_TOOLS:BOOL=ON -DLLVM_INCLUDE_UTILS:BOOL=ON -DLLVM_INSTALL_UTILS:BOOL=ON -DLLVM_ENABLE_LIBEDIT:BOOL=OFF -DLLDB_ENABLE_LIBEDIT:STRING=OFF -DLLDB_ENABLE_CURSES:BOOL=OFF -DLLDB_ENABLE_LIBXML2:BOOL=ON -DLLDB_ENABLE_LUA:BOOL=ON -DLLDB_ENABLE_LZMA:BOOL=ON -DLLDB_ENABLE_PYTHON:BOOL=OFF -DPython3_EXECUTABLE:PATH=$PYDIR/python.exe -DLLVM_INCLUDE_DOCS:BOOL=OFF -DCLANG_INCLUDE_TESTS:BOOL=OFF -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF -DLLDB_INCLUDE_TESTS:BOOL=OFF -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF -DLLVM_TOOL_LLVM_C_TEST_BUILD:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_BUILD_BENCHMARKS:BOOL=OFF -DLLVM_BUILD_TESTS:BOOL=OFF -DBUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF -DCLANG_PLUGIN_SUPPORT:BOOL=ON -DCLANG_ENABLE_CLANGD:BOOL=ON -DCLANG_TOOL_APINOTES_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_ARCMT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_C_ARCMT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_C_INDEX_TEST_BUILD:BOOL=OFF -DCLANG_INCLUDE_DOCS:BOOL=OFF -DCLANG_BUILD_EXAMPLES:BOOL=OFF -DLLD_BUILD_TOOLS:BOOL=ON -DLLDB_TOOL_LLDB_SERVER_BUILD:BOOL=OFF -DLLDB_TOOL_LLDB_VSCODE_BUILD:BOOL=OFF -DLLDB_DISABLE_PYTHON:BOOL=ON -Sllvm -Bbuild_shared &&
# #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=MinSizeRel -DBUILD_SHARED_LIBS:BOOL=ON -DLLVM_BUILD_STATIC=OFF -DLIBCLANG_BUILD_STATIC:BOOL=OFF -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLLVM_TARGETS_TO_BUILD:STRING="X86;NVPTX;AMDGPU;ARM;AArch64" -DCLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" -DLLD_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" -DFLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" -DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;compiler-rt;lld;lldb;libclc" -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=OFF -DLLVM_ENABLE_THREADS:BOOL=ON -DCLANG_BUILD_TOOLS:BOOL=ON -DCLANG_DEFAULT_RTLIB:STRING=libgcc -DCLANG_DEFAULT_CXX_STDLIB:STRING=libstdc++ -DCLANG_DEFAULT_OPENMP_RUNTIME:STRING=libgomp -DCLANG_DEFAULT_UNWINDLIB:STRING=libgcc -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON -DLLDB_ENABLE_LIBXML2:STRING=ON -DLLDB_ENABLE_LUA:STRING=ON -DLLDB_ENABLE_LZMA:STRING=ON -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_MODULES:BOOL=OFF -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON -DLLVM_ENABLE_LIBXML2:STRING=ON -DLLVM_ENABLE_THREADS:BOOL=ON -DLLVM_ENABLE_UNWIND_TABLES:BOOL=ON -DLLVM_ENABLE_Z3_SOLVER:BOOL=ON -DLLVM_INCLUDE_TOOLS:BOOL=ON -DLLVM_INCLUDE_UTILS:BOOL=ON -DLLVM_INSTALL_UTILS:BOOL=ON -DLLVM_ENABLE_TERMINFO:BOOL=OFF -DLLVM_ENABLE_LIBEDIT:BOOL=ON -DLLDB_ENABLE_LIBEDIT:BOOL=ON -DLLDB_ENABLE_CURSES:BOOL=ON -DLLDB_ENABLE_LIBXML2:BOOL=ON -DLLDB_ENABLE_LUA:BOOL=ON -DLLDB_ENABLE_LZMA:BOOL=ON -DLLDB_ENABLE_PYTHON:BOOL=OFF -DPython3_EXECUTABLE:PATH=$PYDIR/python.exe -DLLVM_INCLUDE_DOCS:BOOL=OFF -DCLANG_INCLUDE_TESTS:BOOL=OFF -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF -DLLDB_INCLUDE_TESTS:BOOL=OFF -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF -DLLVM_TOOL_LLVM_C_TEST_BUILD:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_BUILD_BENCHMARKS:BOOL=OFF -DLLVM_BUILD_TESTS:BOOL=OFF -DBUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF -DCLANG_PLUGIN_SUPPORT:BOOL=ON -DCLANG_ENABLE_CLANGD:BOOL=ON -DCLANG_TOOL_APINOTES_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_ARCMT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_C_ARCMT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_C_INDEX_TEST_BUILD:BOOL=OFF -DCLANG_INCLUDE_DOCS:BOOL=OFF -DCLANG_BUILD_EXAMPLES:BOOL=OFF -DLLD_BUILD_TOOLS:BOOL=ON -DLLDB_TOOL_LLDB_SERVER_BUILD:BOOL=ON -DLLDB_TOOL_LLDB_VSCODE_BUILD:BOOL=ON -DLLVM_TOOL_OPENMP_BUILD:BOOL=ON -DLLVM_TOOL_PARALLEL_LIBS_BUILD:BOOL=ON -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF -DLLDB_DISABLE_PYTHON:BOOL=ON -Sllvm -Bbuild_shared &&
# #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=MinSizeRel -DBUILD_SHARED_LIBS:BOOL=ON -DLLVM_BUILD_STATIC=OFF -DLIBCLANG_BUILD_STATIC:BOOL=OFF -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLLVM_TARGETS_TO_BUILD:STRING="X86;ARM;AArch64" -DCLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" -DLLD_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" -DFLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" -DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;compiler-rt;lld;lldb;libclc" -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=OFF -DLLVM_ENABLE_THREADS:BOOL=ON -DCLANG_BUILD_TOOLS:BOOL=ON -DCLANG_DEFAULT_RTLIB:STRING=libgcc -DCLANG_DEFAULT_CXX_STDLIB:STRING=libstdc++ -DCLANG_DEFAULT_OPENMP_RUNTIME:STRING=libgomp -DCLANG_DEFAULT_UNWINDLIB:STRING=libgcc -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON -DLLDB_ENABLE_LIBXML2:STRING=ON -DLLDB_ENABLE_LUA:STRING=ON -DLLDB_ENABLE_LZMA:STRING=ON -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_MODULES:BOOL=OFF -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON -DLLVM_ENABLE_LIBXML2:STRING=ON -DLLVM_ENABLE_THREADS:BOOL=ON -DLLVM_ENABLE_UNWIND_TABLES:BOOL=ON -DLLVM_ENABLE_Z3_SOLVER:BOOL=ON -DLLVM_INCLUDE_TOOLS:BOOL=ON -DLLVM_INCLUDE_UTILS:BOOL=ON -DLLVM_INSTALL_UTILS:BOOL=ON -DLLVM_ENABLE_TERMINFO:BOOL=OFF -DLLVM_ENABLE_LIBEDIT:BOOL=ON -DLLDB_ENABLE_LIBEDIT:STRING=ON -DLLDB_ENABLE_CURSES:BOOL=ON -DLLDB_ENABLE_LIBXML2:BOOL=ON -DLLDB_ENABLE_LUA:BOOL=ON -DLLDB_ENABLE_LZMA:BOOL=ON -DLLDB_ENABLE_PYTHON:BOOL=OFF -DPython3_EXECUTABLE:PATH=$PYDIR/python.exe -DLLVM_INCLUDE_DOCS:BOOL=OFF -DCLANG_INCLUDE_TESTS:BOOL=OFF -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF -DLLDB_INCLUDE_TESTS:BOOL=OFF -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF -DLLVM_TOOL_LLVM_C_TEST_BUILD:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_BUILD_BENCHMARKS:BOOL=OFF -DLLVM_BUILD_TESTS:BOOL=OFF -DBUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF -DCLANG_PLUGIN_SUPPORT:BOOL=ON -DCLANG_ENABLE_CLANGD:BOOL=ON -DCLANG_TOOL_APINOTES_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_ARCMT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_C_ARCMT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_C_INDEX_TEST_BUILD:BOOL=OFF -DCLANG_INCLUDE_DOCS:BOOL=OFF -DCLANG_BUILD_EXAMPLES:BOOL=OFF -DLLD_BUILD_TOOLS:BOOL=ON -DLLDB_TOOL_LLDB_SERVER_BUILD:BOOL=ON -DLLDB_TOOL_LLDB_VSCODE_BUILD:BOOL=ON -DLLVM_TOOL_OPENMP_BUILD:BOOL=ON -DLLVM_TOOL_PARALLEL_LIBS_BUILD:BOOL=ON -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF -DLLDB_DISABLE_PYTHON:BOOL=ON -DLibEdit_INCLUDE_DIRS:PATH=$MINGWPREFIX/include -Sllvm -Bbuild_shared &&
# #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=MinSizeRel -DBUILD_SHARED_LIBS:BOOL=ON -DLLVM_BUILD_STATIC=OFF -DLIBCLANG_BUILD_STATIC:BOOL=OFF -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLLVM_TARGETS_TO_BUILD:STRING="X86;ARM;AArch64" -DCLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" -DLLD_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" -DFLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" -DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;compiler-rt;lld;lldb;libclc;pstl" -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=OFF -DLLVM_ENABLE_THREADS:BOOL=ON -DCLANG_BUILD_TOOLS:BOOL=ON -DCLANG_DEFAULT_RTLIB:STRING=libgcc -DCLANG_DEFAULT_CXX_STDLIB:STRING=libstdc++ -DCLANG_DEFAULT_OPENMP_RUNTIME:STRING=libgomp -DCLANG_DEFAULT_UNWINDLIB:STRING=libgcc -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON -DLLDB_ENABLE_LIBXML2:BOOL=ON -DLLDB_ENABLE_LUA:BOOL=ON -DLLDB_ENABLE_LZMA:BOOL=ON -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_MODULES:BOOL=OFF -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON -DLLVM_ENABLE_LIBXML2:BOOL=ON -DLLVM_ENABLE_THREADS:BOOL=ON -DLLVM_ENABLE_UNWIND_TABLES:BOOL=ON -DLLVM_ENABLE_Z3_SOLVER:BOOL=ON -DLLVM_INCLUDE_TOOLS:BOOL=ON -DLLVM_INCLUDE_UTILS:BOOL=ON -DLLVM_INSTALL_UTILS:BOOL=ON -DLLVM_ENABLE_TERMINFO:BOOL=OFF -DLLVM_ENABLE_LIBEDIT:BOOL=OFF -DLLDB_ENABLE_LIBEDIT:BOOL=OFF -DLLDB_ENABLE_CURSES:BOOL=ON -DLLDB_ENABLE_LIBXML2:BOOL=ON -DLLDB_ENABLE_LZMA:BOOL=ON -DLLDB_ENABLE_PYTHON:BOOL=OFF -DPython3_EXECUTABLE:PATH=$PYDIR/python.exe -DLLVM_INCLUDE_DOCS:BOOL=OFF -DCLANG_INCLUDE_TESTS:BOOL=OFF -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF -DLLDB_INCLUDE_TESTS:BOOL=OFF -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF -DLLVM_TOOL_LLVM_C_TEST_BUILD:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_BUILD_BENCHMARKS:BOOL=OFF -DLLVM_BUILD_TESTS:BOOL=OFF -DBUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF -DCLANG_PLUGIN_SUPPORT:BOOL=ON -DCLANG_ENABLE_CLANGD:BOOL=ON -DCLANG_TOOL_APINOTES_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_ARCMT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_C_ARCMT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_C_INDEX_TEST_BUILD:BOOL=OFF -DCLANG_INCLUDE_DOCS:BOOL=OFF -DCLANG_BUILD_EXAMPLES:BOOL=OFF -DLLD_BUILD_TOOLS:BOOL=ON -DLLDB_TOOL_LLDB_SERVER_BUILD:BOOL=ON -DLLDB_TOOL_LLDB_VSCODE_BUILD:BOOL=ON -DLLVM_TOOL_OPENMP_BUILD:BOOL=ON -DLLVM_TOOL_PARALLEL_LIBS_BUILD:BOOL=ON -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF -DLLDB_DISABLE_PYTHON:BOOL=ON -Sllvm -Bbuild_shared &&
# #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=MinSizeRel -DBUILD_SHARED_LIBS:BOOL=ON -DLLVM_BUILD_STATIC=OFF -DLIBCLANG_BUILD_STATIC:BOOL=OFF -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLLVM_TARGETS_TO_BUILD:STRING="X86;ARM;AArch64" -DCLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" -DLLD_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" -DFLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" -DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;compiler-rt;lld;lldb;libclc;pstl" -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=OFF -DLLVM_ENABLE_THREADS:BOOL=ON -DCLANG_BUILD_TOOLS:BOOL=ON -DCLANG_DEFAULT_RTLIB:STRING=libgcc -DCLANG_DEFAULT_CXX_STDLIB:STRING=libstdc++ -DCLANG_DEFAULT_OPENMP_RUNTIME:STRING=libgomp -DCLANG_DEFAULT_UNWINDLIB:STRING=libgcc -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON -DLLVM_ENABLE_LIBEDIT:BOOL=ON -DLLDB_ENABLE_LIBEDIT:BOOL=ON -DLibEdit_INCLUDE_DIRS:PATH=$MINGWPREFIX/include -DLLDB_ENABLE_CURSES:BOOL=ON -DLLDB_ENABLE_LIBXML2:BOOL=ON -DLLDB_ENABLE_LUA:BOOL=ON -DLLDB_ENABLE_LZMA:BOOL=ON -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_MODULES:BOOL=OFF -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON -DLLVM_ENABLE_LIBXML2:BOOL=ON -DLLVM_ENABLE_THREADS:BOOL=ON -DLLVM_ENABLE_UNWIND_TABLES:BOOL=ON -DLLVM_ENABLE_Z3_SOLVER:BOOL=ON -DLLVM_INCLUDE_TOOLS:BOOL=ON -DLLVM_INCLUDE_UTILS:BOOL=ON -DLLVM_INSTALL_UTILS:BOOL=ON -DLLVM_ENABLE_TERMINFO:BOOL=OFF -DLLVM_ENABLE_LIBEDIT:BOOL=OFF -DLLDB_ENABLE_LIBEDIT:BOOL=OFF -DLLDB_ENABLE_CURSES:BOOL=ON -DLLDB_ENABLE_LIBXML2:BOOL=ON -DLLDB_ENABLE_LZMA:BOOL=ON -DLLDB_ENABLE_PYTHON:BOOL=OFF -DPython3_FIND_REGISTRY:BOOL=NEVER -DPython3_EXECUTABLE:PATH=$PYDIR/python.exe -DLLVM_ENABLE_SPHINX=OFF -DLLVM_INCLUDE_DOCS:BOOL=OFF -DCLANG_INCLUDE_TESTS:BOOL=OFF -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF -DLLDB_INCLUDE_TESTS:BOOL=OFF -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF -DLLVM_TOOL_LLVM_C_TEST_BUILD:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_BUILD_BENCHMARKS:BOOL=OFF -DLLVM_BUILD_TESTS:BOOL=OFF -DBUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF -DCLANG_PLUGIN_SUPPORT:BOOL=ON -DCLANG_ENABLE_CLANGD:BOOL=ON -DCLANG_TOOL_APINOTES_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_ARCMT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_C_ARCMT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_C_INDEX_TEST_BUILD:BOOL=OFF -DCLANG_INCLUDE_DOCS:BOOL=OFF -DCLANG_BUILD_EXAMPLES:BOOL=OFF -DLLD_BUILD_TOOLS:BOOL=ON -DLLDB_TOOL_LLDB_SERVER_BUILD:BOOL=ON -DLLDB_TOOL_LLDB_VSCODE_BUILD:BOOL=ON -DLLVM_TOOL_OPENMP_BUILD:BOOL=ON -DLLVM_TOOL_PARALLEL_LIBS_BUILD:BOOL=ON -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF -DLLDB_DISABLE_PYTHON:BOOL=ON -Sllvm -Bbuild_shared &&
# #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=MinSizeRel -DBUILD_SHARED_LIBS:BOOL=ON -DLLVM_BUILD_STATIC=OFF -DLIBCLANG_BUILD_STATIC:BOOL=OFF -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLLVM_TARGETS_TO_BUILD:STRING="X86;NVPTX;AMDGPU;ARM;AArch64" -DCLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" -DLLD_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" -DFLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" -DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;compiler-rt;lld;lldb;libclc;pstl" -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=OFF -DLLVM_ENABLE_THREADS:BOOL=ON -DCLANG_BUILD_TOOLS:BOOL=ON -DCLANG_DEFAULT_RTLIB:STRING=libgcc -DCLANG_DEFAULT_CXX_STDLIB:STRING=libstdc++ -DCLANG_DEFAULT_OPENMP_RUNTIME:STRING=libgomp -DCLANG_DEFAULT_UNWINDLIB:STRING=libgcc -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON -DLLVM_ENABLE_LIBEDIT:BOOL=ON -DLLDB_ENABLE_LIBEDIT:BOOL=ON -DLibEdit_INCLUDE_DIRS:PATH=$MINGWPREFIX/include -DLLDB_ENABLE_CURSES:BOOL=ON -DLLDB_ENABLE_LIBXML2:BOOL=ON -DLLDB_ENABLE_LUA:BOOL=ON -DLLDB_ENABLE_LZMA:BOOL=ON -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_MODULES:BOOL=OFF -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON -DLLVM_ENABLE_LIBXML2:BOOL=ON -DLLVM_ENABLE_THREADS:BOOL=ON -DLLVM_ENABLE_UNWIND_TABLES:BOOL=ON -DLLVM_ENABLE_Z3_SOLVER:BOOL=ON -DLLVM_INCLUDE_TOOLS:BOOL=ON -DLLVM_INCLUDE_UTILS:BOOL=ON -DLLVM_INSTALL_UTILS:BOOL=ON -DLLVM_ENABLE_TERMINFO:BOOL=OFF -DLLVM_ENABLE_LIBEDIT:BOOL=OFF -DLLDB_ENABLE_LIBEDIT:BOOL=OFF -DLLDB_ENABLE_CURSES:BOOL=ON -DLLDB_ENABLE_LIBXML2:BOOL=ON -DLLDB_ENABLE_LZMA:BOOL=ON -DLLDB_ENABLE_PYTHON:BOOL=OFF -DPython3_FIND_REGISTRY:BOOL=NEVER -DPython3_EXECUTABLE:PATH=$PYDIR/python.exe -DLLVM_ENABLE_SPHINX=OFF -DLLVM_INCLUDE_DOCS:BOOL=OFF -DCLANG_INCLUDE_TESTS:BOOL=OFF -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF -DLLDB_INCLUDE_TESTS:BOOL=OFF -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF -DLLVM_TOOL_LLVM_C_TEST_BUILD:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_BUILD_BENCHMARKS:BOOL=OFF -DLLVM_BUILD_TESTS:BOOL=OFF -DBUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF -DCLANG_PLUGIN_SUPPORT:BOOL=ON -DCLANG_ENABLE_CLANGD:BOOL=ON -DCLANG_TOOL_APINOTES_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_ARCMT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_C_ARCMT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_C_INDEX_TEST_BUILD:BOOL=OFF -DCLANG_INCLUDE_DOCS:BOOL=OFF -DCLANG_BUILD_EXAMPLES:BOOL=OFF -DLLD_BUILD_TOOLS:BOOL=ON -DLLDB_TOOL_LLDB_SERVER_BUILD:BOOL=ON -DLLDB_TOOL_LLDB_VSCODE_BUILD:BOOL=ON -DLLVM_TOOL_OPENMP_BUILD:BOOL=ON -DLLVM_TOOL_PARALLEL_LIBS_BUILD:BOOL=ON -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF -DLLDB_DISABLE_PYTHON:BOOL=ON -Sllvm -Bbuild_shared &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=MinSizeRel -DBUILD_SHARED_LIBS:BOOL=ON -DLLVM_BUILD_STATIC=OFF -DLIBCLANG_BUILD_STATIC:BOOL=OFF -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLLVM_TARGETS_TO_BUILD:STRING="X86;NVPTX;AMDGPU;ARM;AArch64" -DCLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" -DLLD_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" -DFLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" -DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;compiler-rt;lld;lldb;libclc;pstl" -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=OFF -DLLVM_ENABLE_THREADS:BOOL=ON -DCLANG_BUILD_TOOLS:BOOL=ON -DCLANG_DEFAULT_RTLIB:STRING=libgcc -DCLANG_DEFAULT_CXX_STDLIB:STRING=libstdc++ -DCLANG_DEFAULT_OPENMP_RUNTIME:STRING=libgomp -DCLANG_DEFAULT_UNWINDLIB:STRING=libgcc -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON -DLLVM_ENABLE_LIBEDIT:BOOL=ON -DLLDB_ENABLE_LIBEDIT:BOOL=ON -DLibEdit_INCLUDE_DIRS:PATH=$MINGWPREFIX/include -DLLDB_ENABLE_CURSES:BOOL=ON -DLLDB_ENABLE_LIBXML2:BOOL=ON -DLLDB_ENABLE_LUA:BOOL=ON -DLLDB_ENABLE_LZMA:BOOL=ON -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_MODULES:BOOL=OFF -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON -DLLVM_ENABLE_LIBXML2:BOOL=ON -DLLVM_ENABLE_THREADS:BOOL=ON -DLLVM_ENABLE_UNWIND_TABLES:BOOL=ON -DLLVM_ENABLE_Z3_SOLVER:BOOL=ON -DLLVM_INCLUDE_TOOLS:BOOL=ON -DLLVM_INCLUDE_UTILS:BOOL=ON -DLLVM_INSTALL_UTILS:BOOL=ON -DLLVM_ENABLE_TERMINFO:BOOL=OFF -DLLVM_ENABLE_LIBEDIT:BOOL=OFF -DLLDB_ENABLE_LIBEDIT:BOOL=OFF -DLLDB_ENABLE_CURSES:BOOL=ON -DLLDB_ENABLE_LIBXML2:BOOL=ON -DLLDB_ENABLE_LZMA:BOOL=ON -DLLDB_ENABLE_PYTHON:BOOL=ON -DPython3_FIND_REGISTRY:BOOL=NEVER -DPython3_EXECUTABLE:PATH=$MINGWPREFIX/share/python/bin/python3.exe -DLLVM_ENABLE_SPHINX=OFF -DLLVM_INCLUDE_DOCS:BOOL=OFF -DCLANG_INCLUDE_TESTS:BOOL=OFF -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF -DLLDB_INCLUDE_TESTS:BOOL=OFF -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF -DLLVM_TOOL_LLVM_C_TEST_BUILD:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_BUILD_BENCHMARKS:BOOL=OFF -DLLVM_BUILD_TESTS:BOOL=OFF -DBUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF -DCLANG_PLUGIN_SUPPORT:BOOL=ON -DCLANG_ENABLE_CLANGD:BOOL=ON -DCLANG_TOOL_APINOTES_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_ARCMT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_C_ARCMT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_C_INDEX_TEST_BUILD:BOOL=OFF -DCLANG_INCLUDE_DOCS:BOOL=OFF -DCLANG_BUILD_EXAMPLES:BOOL=OFF -DLLD_BUILD_TOOLS:BOOL=ON -DLLDB_TOOL_LLDB_SERVER_BUILD:BOOL=ON -DLLDB_TOOL_LLDB_VSCODE_BUILD:BOOL=ON -DLLVM_TOOL_OPENMP_BUILD:BOOL=ON -DLLVM_TOOL_PARALLEL_LIBS_BUILD:BOOL=ON -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF -DLLDB_DISABLE_PYTHON:BOOL=ON -Sllvm -Bbuild_shared &&
#
# #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=MinSizeRel -DBUILD_SHARED_LIBS:BOOL=ON -DLLVM_BUILD_STATIC=OFF -DLIBCLANG_BUILD_STATIC:BOOL=OFF -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLLVM_TARGETS_TO_BUILD:STRING="X86;NVPTX;AMDGPU;ARM;AArch64" -DCLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" -DLLD_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" -DFLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" -DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;lld;lldb;libc;libclc;libcxx;libcxxabi;openmp;mlir;pstl;parallel-libs" -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=OFF -DLLVM_ENABLE_THREADS:BOOL=ON -DLLVM_ENABLE_RUNTIMES:STRING=all -DCLANG_BUILD_TOOLS:BOOL=ON -DLLVM_BUILD_EXTERNAL_COMPILER_RT:BOOL=ON -DCOMPILER_RT_USE_BUILTINS_LIBRARY=ON -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON -DLLVM_ENABLE_LIBEDIT:BOOL=ON -DLLDB_ENABLE_LIBEDIT:BOOL=ON -DLibEdit_INCLUDE_DIRS:PATH=$MINGWPREFIX/include -DLLDB_ENABLE_CURSES:BOOL=ON -DLLDB_ENABLE_LIBXML2:BOOL=ON -DLLDB_ENABLE_LUA:BOOL=ON -DLLDB_ENABLE_LZMA:BOOL=ON -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_MODULES:BOOL=OFF -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON -DLLVM_ENABLE_LIBXML2:BOOL=ON -DLLVM_ENABLE_THREADS:BOOL=ON -DLLVM_ENABLE_UNWIND_TABLES:BOOL=ON -DLLVM_ENABLE_Z3_SOLVER:BOOL=ON -DLLVM_INCLUDE_TOOLS:BOOL=ON -DLLVM_INCLUDE_UTILS:BOOL=ON -DLLVM_INSTALL_UTILS:BOOL=ON -DLLVM_ENABLE_TERMINFO:BOOL=OFF -DLLVM_ENABLE_LIBEDIT:BOOL=OFF -DLLDB_ENABLE_LIBEDIT:BOOL=OFF -DLLDB_ENABLE_CURSES:BOOL=ON -DLLDB_ENABLE_LIBXML2:BOOL=ON -DLLDB_ENABLE_LZMA:BOOL=ON -DLLDB_ENABLE_PYTHON:BOOL=ON -DPython3_FIND_REGISTRY:BOOL=NEVER -DPython3_EXECUTABLE:PATH=$MINGWPREFIX/share/python/bin/python3.exe -DLLVM_ENABLE_SPHINX=OFF -DLLVM_INCLUDE_DOCS:BOOL=OFF -DCLANG_INCLUDE_TESTS:BOOL=OFF -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF -DLLDB_INCLUDE_TESTS:BOOL=OFF -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF -DLLVM_TOOL_LLVM_C_TEST_BUILD:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_BUILD_BENCHMARKS:BOOL=OFF -DLLVM_BUILD_TESTS:BOOL=OFF -DBUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF -DCLANG_PLUGIN_SUPPORT:BOOL=ON -DCLANG_ENABLE_CLANGD:BOOL=ON -DCLANG_TOOL_APINOTES_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_ARCMT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_C_ARCMT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_C_INDEX_TEST_BUILD:BOOL=OFF -DCLANG_INCLUDE_DOCS:BOOL=OFF -DCLANG_BUILD_EXAMPLES:BOOL=OFF -DLLD_BUILD_TOOLS:BOOL=ON -DLLDB_TOOL_LLDB_SERVER_BUILD:BOOL=ON -DLLDB_TOOL_LLDB_VSCODE_BUILD:BOOL=ON -DLLVM_TOOL_OPENMP_BUILD:BOOL=ON -DLLVM_TOOL_PARALLEL_LIBS_BUILD:BOOL=ON -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF -DLLDB_DISABLE_PYTHON:BOOL=ON -Sllvm -Bbuild_shared &&
# #-DLLVM_ENABLE_PROJECTS:STRING="libunwind;polly;flang"
# #-DCLANG_DEFAULT_RTLIB:STRING=compiler-rt -DCLANG_DEFAULT_CXX_STDLIB:STRING=libc++ -DCLANG_DEFAULT_OPENMP_RUNTIME:STRING=libgomp -DCLANG_DEFAULT_UNWINDLIB:STRING=libunwind 
#
# #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=MinSizeRel -DLLVM_HOST_TRIPLE:STRING=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "x86_64"; else echo "i686"; fi)-w64-windows-gnu -DBUILD_SHARED_LIBS:BOOL=OFF -DLLVM_BUILD_STATIC:BOOL=OFF -DLIBCLANG_BUILD_STATIC:BOOL=ON -DLLVM_DYLIB_COMPONENTS:STRING=all -DLLVM_LINK_LLVM_DYLIB:BOOL=ON -DCLANG_LINK_CLANG_DYLIB:BOOL=ON -DLLD_DEFAULT_LD_LLD_IS_MINGW:BOOL=ON -DLLVM_TARGETS_TO_BUILD:STRING="X86;ARM;AArch64" -DCLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" -DLLD_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" -DFLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" -DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;compiler-rt;lld;lldb;libclc;pstl" -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=OFF -DLLVM_ENABLE_THREADS:BOOL=ON -DCLANG_BUILD_TOOLS:BOOL=ON -DCLANG_DEFAULT_RTLIB:STRING=libgcc -DCLANG_DEFAULT_CXX_STDLIB:STRING=libstdc++ -DCLANG_DEFAULT_OPENMP_RUNTIME:STRING=libgomp -DCLANG_DEFAULT_UNWINDLIB:STRING=libgcc -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON -DLLDB_ENABLE_LIBXML2:BOOL=ON -DLLDB_ENABLE_LUA:BOOL=ON -DLLDB_ENABLE_LZMA:BOOL=ON -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_MODULES:BOOL=OFF -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON -DLLVM_ENABLE_LIBXML2:BOOL=ON -DLLVM_ENABLE_THREADS:BOOL=ON -DLLVM_ENABLE_UNWIND_TABLES:BOOL=ON -DLLVM_ENABLE_Z3_SOLVER:BOOL=ON -DLLVM_INCLUDE_TOOLS:BOOL=ON -DLLVM_INCLUDE_UTILS:BOOL=ON -DLLVM_INSTALL_UTILS:BOOL=ON -DLLVM_ENABLE_TERMINFO:BOOL=OFF -DLLVM_ENABLE_LIBEDIT:BOOL=ON -DLLDB_ENABLE_LIBEDIT:BOOL=ON -DLibEdit_INCLUDE_DIRS:PATH=$MINGWPREFIX/include -DLLDB_ENABLE_CURSES:BOOL=ON -DLLDB_ENABLE_LIBXML2:BOOL=ON -DLLDB_ENABLE_LZMA:BOOL=ON -DLLDB_ENABLE_PYTHON:BOOL=OFF -DPython3_FIND_REGISTRY:BOOL=NEVER -DPython3_EXECUTABLE:PATH=$PYDIR/python.exe -DLLVM_ENABLE_SPHINX=OFF -DLLVM_INCLUDE_DOCS:BOOL=OFF -DCLANG_INCLUDE_TESTS:BOOL=OFF -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF -DLLDB_INCLUDE_TESTS:BOOL=OFF -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF -DLLVM_TOOL_LLVM_C_TEST_BUILD:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_BUILD_BENCHMARKS:BOOL=OFF -DLLVM_BUILD_TESTS:BOOL=OFF -DBUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF -DCLANG_PLUGIN_SUPPORT:BOOL=ON -DCLANG_ENABLE_CLANGD:BOOL=ON -DCLANG_TOOL_APINOTES_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_ARCMT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_C_ARCMT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_C_INDEX_TEST_BUILD:BOOL=OFF -DCLANG_INCLUDE_DOCS:BOOL=OFF -DCLANG_BUILD_EXAMPLES:BOOL=OFF -DLLD_BUILD_TOOLS:BOOL=ON -DLLDB_TOOL_LLDB_SERVER_BUILD:BOOL=ON -DLLDB_TOOL_LLDB_VSCODE_BUILD:BOOL=ON -DLLVM_TOOL_OPENMP_BUILD:BOOL=ON -DLLVM_TOOL_PARALLEL_LIBS_BUILD:BOOL=ON -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF -DLLDB_DISABLE_PYTHON:BOOL=ON -Sllvm -Bbuild_shared &&
# #-DLLVM_BUILD_LLVM_DYLIB:BOOL=ON -DLLVM_BUILD_LLVM_C_DYLIB:BOOL=OFF 
# #-DLLVM_TARGETS_TO_BUILD="AArch64;AMDGPU;ARM;AVR;BPF;MSP430;NVPTX;RISCV;WebAssembly;X86" 
# #-DCLANG_DEFAULT_LINKER=lld -DCLANG_DEFAULT_RTLIB=compiler-rt -DCLANG_DEFAULT_UNWINDLIB=libunwind -DCLANG_DEFAULT_CXX_STDLIB=libc++ 
# #-DLLVM_ENABLE_LLD=ON -DCOMPILER_RT_BUILD_SANITIZERS=OFF 
# #-DCOMPILER_RT_USE_BUILTINS_LIBRARY=ON -DLLVM_ENABLE_LIBCXX=ON 
# #CLang: -DCOMPILER_RT_BUILD_SANITIZERS=ON 
# #ARM: -DCOMPILER_RT_BUILD_MEMPROF=OFF -DCOMPILER_RT_BUILD_SANITIZERS=OFF -DCOMPILER_RT_BUILD_XRAY=OFF
# #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=MinSizeRel -DBUILD_SHARED_LIBS:BOOL=ON -DLLVM_BUILD_STATIC=OFF -DLIBCLANG_BUILD_STATIC:BOOL=OFF -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLLVM_TARGETS_TO_BUILD:STRING="X86;NVPTX;AMDGPU;ARM;AArch64" -DCLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" -DLLD_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" -DFLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" -DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;compiler-rt;lld;lldb;libclc;mlir;flang;parallel-libs;pstl" -DCMAKE_C_COMPILER:STRING=gcc.exe -DCMAKE_ASM_COMPILER:STRING=gcc.exe -DCMAKE_ASM_MASM_COMPILER:STRING=jwasm.exe -DCMAKE_ASM_MASM_FLAGS:STRING="$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "-win64"; else echo "-coff"; fi)" -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=OFF -DLLVM_ENABLE_THREADS:BOOL=ON -DCLANG_BUILD_TOOLS:BOOL=ON -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON -DLLDB_ENABLE_LIBXML2:BOOL=ON -DLLDB_ENABLE_LUA:BOOL=ON -DLLDB_ENABLE_LZMA:BOOL=ON -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_MODULES:BOOL=OFF -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON -DLLVM_ENABLE_LIBXML2:BOOL=ON -DLLVM_ENABLE_THREADS:BOOL=ON -DLLVM_ENABLE_UNWIND_TABLES:BOOL=ON -DLLVM_ENABLE_Z3_SOLVER:BOOL=ON -DLLVM_INCLUDE_TOOLS:BOOL=ON -DLLVM_INCLUDE_UTILS:BOOL=ON -DLLVM_INSTALL_UTILS:BOOL=ON -DLLVM_ENABLE_LIBEDIT:BOOL=OFF -DLLDB_ENABLE_LIBEDIT:BOOL=OFF -DLLDB_ENABLE_CURSES:BOOL=OFF -DLLDB_ENABLE_LIBXML2:BOOL=ON -DLLDB_ENABLE_LUA:BOOL=ON -DLLDB_ENABLE_LZMA:BOOL=ON -DLLDB_ENABLE_PYTHON:BOOL=OFF -DPython3_EXECUTABLE:PATH=$PYDIR/python.exe -DLLVM_INCLUDE_DOCS:BOOL=OFF -DCLANG_INCLUDE_TESTS:BOOL=OFF -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF -DLLDB_INCLUDE_TESTS:BOOL=OFF -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF -DLLVM_TOOL_LLVM_C_TEST_BUILD:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_BUILD_BENCHMARKS:BOOL=OFF -DLLVM_BUILD_TESTS:BOOL=OFF -DBUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF -DCLANG_PLUGIN_SUPPORT:BOOL=ON -DCLANG_ENABLE_CLANGD:BOOL=ON -DCLANG_TOOL_APINOTES_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_ARCMT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_C_ARCMT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_C_INDEX_TEST_BUILD:BOOL=OFF -DCLANG_INCLUDE_DOCS:BOOL=OFF -DCLANG_BUILD_EXAMPLES:BOOL=OFF -DLLD_BUILD_TOOLS:BOOL=ON -DLLDB_TOOL_LLDB_SERVER_BUILD:BOOL=OFF -DLLDB_TOOL_LLDB_VSCODE_BUILD:BOOL=OFF -DLLDB_DISABLE_PYTHON:BOOL=ON -DLibEdit_INCLUDE_DIRS:PATH=$MINGWPREFIX/include -Sllvm -Bbuild_shared &&
# #-DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON -DLLDB_ENABLE_LIBXML2:BOOL=ON -DLLDB_ENABLE_LUA:BOOL=ON -DLLDB_ENABLE_LZMA:BOOL=ON -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_MODULES:BOOL=OFF -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON -DLLVM_ENABLE_LIBXML2:BOOL=ON -DLLVM_ENABLE_THREADS:BOOL=ON -DLLVM_ENABLE_UNWIND_TABLES:BOOL=ON -DLLVM_ENABLE_Z3_SOLVER:BOOL=ON -DLLVM_INCLUDE_TOOLS:BOOL=ON -DLLVM_INCLUDE_UTILS:BOOL=ON -DLLVM_INSTALL_UTILS:BOOL=ON -DLLVM_ENABLE_LIBEDIT:BOOL=OFF -DLLDB_ENABLE_LIBEDIT:BOOL=OFF -DLLDB_ENABLE_CURSES:BOOL=OFF -DLLDB_ENABLE_LIBXML2:BOOL=ON -DLLDB_ENABLE_LUA:BOOL=ON -DLLDB_ENABLE_LZMA:BOOL=ON -DLLDB_ENABLE_PYTHON:BOOL=OFF -DPython3_EXECUTABLE:PATH=$PYDIR/python.exe -DLLVM_INCLUDE_DOCS:BOOL=OFF -DCLANG_INCLUDE_TESTS:BOOL=OFF -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF -DLLDB_INCLUDE_TESTS:BOOL=OFF -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF -DLLVM_TOOL_LLVM_C_TEST_BUILD:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_BUILD_BENCHMARKS:BOOL=OFF -DLLVM_BUILD_TESTS:BOOL=OFF -DBUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF -DCLANG_PLUGIN_SUPPORT:BOOL=ON -DCLANG_ENABLE_CLANGD:BOOL=ON -DCLANG_TOOL_APINOTES_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_ARCMT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_C_ARCMT_TEST_BUILD:BOOL=OFF -DCLANG_TOOL_C_INDEX_TEST_BUILD:BOOL=OFF -DCLANG_INCLUDE_DOCS:BOOL=OFF -DCLANG_BUILD_EXAMPLES:BOOL=OFF -DLLD_BUILD_TOOLS:BOOL=ON -DLLDB_TOOL_LLDB_SERVER_BUILD:BOOL=OFF -DLLDB_TOOL_LLDB_VSCODE_BUILD:BOOL=OFF -DLLDB_DISABLE_PYTHON:BOOL=ON -Sllvm -Bbuild_shared &&
# #-DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;compiler-rt;lld;lldb;libclc;mlir;flang;openmp;parallel-libs;pstl" 
# #-DCMAKE_C_COMPILER:STRING=gcc.exe -DCMAKE_ASM_COMPILER:STRING=yasm.exe -DCMAKE_ASM_MASM_COMPILER:STRING=jwasm.exe -DCMAKE_ASM_MASM_FLAGS:STRING="$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "-win64"; else echo "-coff"; fi)" 
# #-DCMAKE_C_COMPILER:STRING=clang.exe -DCMAKE_CXX_COMPILER:STRING=clang++.exe -DCMAKE_ASM_COMPILER:STRING=llvm-as.exe -DCMAKE_ASM_MASM_COMPILER:STRING=jwasm.exe -DCMAKE_ASM_MASM_FLAGS:STRING="$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "-win64"; else echo "-coff"; fi)" 
# #PATH=$MINGWPREFIX/share/llvm/bin:$PATH echo . -DCMAKE_C_COMPILER:STRING=$(which clang.exe) -DCMAKE_CXX_COMPILER:FILEPATH=$(which clang++.exe) -DCMAKE_ASM_COMPILER:STRING=$(which llvm-as.exe)
# ## fix undefined reference to `std::__once_callable'
# #-DCMAKE_C_FLAGS:STRING="-femulated-tls" -DCMAKE_CXX_FLAGS:STRING="-femulated-tls" 
# #-DCOMPILER_RT_DEFAULT_TARGET_ONLY:BOOL=ON -DCOMPILER_RT_USE_BUILTINS_LIBRARY:BOOL=ON 
# #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*-ladvapi32/& -Wl,--as-needed -lpthread/" build_shared/build.ninja &&
# ## fix --defsym assembler parameter
# #####Fatal error: bad defsym; format is --defsym name=value
# #sed -i.bak -e "s/\(--defsym [^ =]*\) /\1=1 /g" build_shared/build.ninja build_shared/compile_commands.json &&
# #sed -i.bak2 -e "s/FLAGS.*=.*-Wa,-mbig-obj/& -g0 -fPIC -s/" build_shared/build.ninja &&
# #wl-showstatus build-install &&
# #( ninja -Cbuild_static install/strip || ninja -j1 -Cbuild_static install/strip ) &&
# ##ninja -Cbuild_static install-distribution &&
# wl-showstatus build-install &&
# ( ninja -Cbuild_shared install/strip || ninja -j1 -Cbuild_shared install/strip ) &&
# #ninja -Cbuild_shared install-distribution &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf llvm-project-$VERSION.src
####TO DO: also build static libraries
####See also: https://github.com/mstorsjo/llvm-mingw
####See also: https://github.com/syoyo/llvm-project-mingw-build
####See also: https://searchfox.org/mozilla-central/source/taskcluster/scripts/misc/build-clang-mingw.sh
####See also: https://here-be-braces.com/llvm-clang-on-windows-mingw-revisited/
####RAM drive "Function not implemented" issue: reported bug: https://github.com/mstorsjo/llvm-mingw/issues/248 -> https://bugs.llvm.org/show_bug.cgi?id=52080
####Feature request to accept dummy -fPIC and -Wl,--as-needed flags reported: https://github.com/llvm/llvm-project/issues/52947
####echo "" | gcc -c -xc - -o gcc_eh_dummy.o && ar cr libgcc_eh.a gcc_eh_dummy.o && export LIBRARY_PATH=$(pwd)${LIBRARY_PATH:+:$LIBRARY_PATH}



####echo -e "#include <stdio.h>\nint main() {\nprintf(\"Hello\\\\n\");\nreturn 0;\n}" | clang -x c - -o test.exe && file test.exe
####echo -e "#include <stdio.h>\nint main() {\nprintf(\"Hello\\\\n\");\nreturn 0;\n}" | clang -target i686-pc-windows-gnu -x c - -o test32.exe && file test32.exe
####echo -e "#include <stdio.h>\nint main() {\nprintf(\"Hello\\\\n\");\nreturn 0;\n}" | clang -target x86_64-pc-windows-gnu -x c - -o test64.exe && file test64.exe



####To list supported targets:
####$MINGWPREFIX/share/llvm/bin/llc --version
####To list target-specific attributes:
####$MINGWPREFIX/share/llvm/bin/llc -mattr=help -march=arm64














#export NAME="The LLVM Compiler Infrastructure"
#export STATUS=
#export URL=https://llvm.org/
#export BASENAME=llvm-project
#export DESCRIPTION="The LLVM Compiler Infrastructure - a toolkit for the construction of highly optimized compilers, optimizers, and run-time environments."
#export CATEGORY=development
#export TYPE=application
##export VERSION=13.0.0
##export VERSIONDATE=20211212
#export VERSION=13.0.1
#export VERSIONDATE=20220209
#wl-showstatus --package-version
##export DEPENDENCIES=pthreads,zlib,xz,libxml2,libffi,isl,z3,swig,lua,ncurses,protobuf,wineditline
#export DEPENDENCIES=pthreads,zlib,xz,libxml2,libffi,isl,z3,swig,lua,ncurses,protobuf,wineditline,cpython-mingw,tbb
#export OPTIONALDEPENDENCIES=udis86,graphviz,hwloc,libpfm4
#export BUILDDEPENDENCIES=cmake,ninja,jwasm
#export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=llvm/LICENSE.TXT
#export LICENSETYPE="Apache with exceptions"
##export DOWNLOADURL="https://releases.llvm.org/ llvmorg-"
##export DOWNLOADURL="https://github.com/llvm/llvm-project/releases/ llvm-project- .src.tar.xz"
##export DOWNLOADURL="https://github.com/llvm/llvm-project/releases/ llvmorg-"
#export DOWNLOADURL="https://github.com/llvm/llvm-project/tags/ llvmorg-"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
##export DOWNLOADSOURCEURL=https://github.com/llvm/llvm-project/releases/download/llvmorg-$VERSION/llvm-project-$VERSION.src.tar.xz
#export DOWNLOADSOURCEURL=https://github.com/llvm/llvm-project/releases/download/llvmorg-$(echo $VERSION|sed -e "s/\([0-9]\)\(rc\)/\1-\2/")/llvm-project-$VERSION.src.tar.xz
##export DOWNLOADSOURCEURL=https://github.com/llvm/llvm-project/archive/refs/tags/llvmorg-$VERSION.tar.gz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#wl-showstatus extract
#tar xJ --force-local -f $TARBALLDIR/$BASENAME/llvm-project-$VERSION.src.tar.xz
#cd llvm-project-$VERSION.src
##tar xz --force-local -f $TARBALLDIR/$BASENAME/llvmorg-$VERSION.tar.gz
##cd llvm-project-llvmorg-$VERSION
#patch -ulbf llvm/tools/llvm-config/llvm-config.cpp << EOF
#@@ -382,2 +382,25 @@
#     SharedVersionedExt = LLVM_DYLIB_VERSION ".dll";
#+#ifdef __MINGW32__
#+    if (1) {
#+      SharedPrefix = "lib";
#+      StaticExt = "a";
#+      StaticPrefix = "lib";
#+      if (getenv("MSYSTEM")) {
#+        std::replace(ActiveObjRoot.begin(), ActiveObjRoot.end(), '\\\\', '/');
#+        std::replace(ActivePrefix.begin(), ActivePrefix.end(), '\\\\', '/');
#+        std::replace(ActiveBinDir.begin(), ActiveBinDir.end(), '\\\\', '/');
#+        std::replace(ActiveLibDir.begin(), ActiveLibDir.end(), '\\\\', '/');
#+        std::replace(ActiveCMakeDir.begin(), ActiveCMakeDir.end(), '\\\\', '/');
#+        std::replace(ActiveIncludeOption.begin(), ActiveIncludeOption.end(), '\\\\', '/');
#+      } else {
#+        DirSep = "\\\\";
#+        std::replace(ActiveObjRoot.begin(), ActiveObjRoot.end(), '/', '\\\\');
#+        std::replace(ActivePrefix.begin(), ActivePrefix.end(), '/', '\\\\');
#+        std::replace(ActiveBinDir.begin(), ActiveBinDir.end(), '/', '\\\\');
#+        std::replace(ActiveLibDir.begin(), ActiveLibDir.end(), '/', '\\\\');
#+        std::replace(ActiveCMakeDir.begin(), ActiveCMakeDir.end(), '/', '\\\\');
#+        std::replace(ActiveIncludeOption.begin(), ActiveIncludeOption.end(), '/', '\\\\');
#+      }
#+    } else
#+#endif
#     if (HostTriple.isOSCygMing()) {
#EOF
## ignore -fPIC flag for Windows targets (version <= 13.0.0)
#####bug reported here: https://github.com/llvm/llvm-project/issues/52947
#patch -ulbf clang/lib/Driver/ToolChains/CommonArgs.cpp << EOF
#@@ -1188,6 +1188,4 @@
#                                     options::OPT_fpie, options::OPT_fno_pie);
#-  if (Triple.isOSWindows() && LastPICArg &&
#-      LastPICArg ==
#-          Args.getLastArg(options::OPT_fPIC, options::OPT_fpic,
#-                          options::OPT_fPIE, options::OPT_fpie)) {
#+  if (Triple.isOSWindows() && !Triple.isOSCygMing() && LastPICArg &&
#+      LastPICArg == Args.getLastArg(options::OPT_fPIC, options::OPT_fpic, options::OPT_fPIE, options::OPT_fpie)) {
#     ToolChain.getDriver().Diag(diag::err_drv_unsupported_opt_for_target)
#EOF
#patch -ulbf clang/lib/Driver/ToolChains/MinGW.cpp << EOF
#@@ -481,5 +481,3 @@
#
#-bool toolchains::MinGW::isPICDefaultForced() const {
#-  return getArch() == llvm::Triple::x86_64;
#-}
#+bool toolchains::MinGW::isPICDefaultForced() const { return true; }
#
#EOF
## ignore --as-needed linker flag for Windows targets (version <= 13.0.0)
#####bug reported here: https://github.com/llvm/llvm-project/issues/52947
#patch -ulbf lld/MinGW/Options.td << EOF
#@@ -148,2 +148,3 @@
# def: Joined<["-"], "O">;
#+def: F<"as-needed">;
# def: F<"build-id">;
#@@ -155,2 +156,3 @@
# defm: EqNoHelp<"minor-image-version">;
#+def: F<"no-as-needed">;
# def: F<"no-undefined">;
#EOF
## fix errors when working on a (ImDisk) RAM-drive (version <= 13.0.0)
#####bug reported here: https://bugs.llvm.org/show_bug.cgi?id=52080
#patch -ulbf llvm/include/llvm/Support/FileSystem.h << EOF
#@@ -866,2 +866,6 @@
#   int FD = -1;
#+#ifdef _WIN32
#+  // Whether we need to manually remove the file on close.
#+  bool RemoveOnClose = false;
#+#endif
#
#EOF
#patch -ulbf llvm/lib/Support/Path.cpp << EOF
#@@ -1192,2 +1192,6 @@
#   Other.FD = -1;
#+#ifdef _WIN32
#+  RemoveOnClose = Other.RemoveOnClose;
#+  Other.RemoveOnClose = false;
#+#endif
#   return *this;
#@@ -1208,14 +1212,16 @@
#   TmpName = "";
#-  return Error::success();
#-#else
#-  // Always try to close and remove.
#+  bool Remove = true;
#+#endif
#   std::error_code RemoveEC;
#-  if (!TmpName.empty()) {
#+  if (Remove && !TmpName.empty()) {
#     RemoveEC = fs::remove(TmpName);
#+#ifndef _WIN32
#     sys::DontRemoveFileOnSignal(TmpName);
#+#endif
#     if (!RemoveEC)
#       TmpName = "";
#+  } else {
#+    TmpName = "";
#   }
#   return errorCodeToError(RemoveEC);
#-#endif
# }
#@@ -1230,2 +1236,3 @@
#   std::error_code RenameEC = setDeleteDisposition(H, false);
#+  bool ShouldDelete = false;
#   if (!RenameEC) {
#@@ -1236,3 +1243,3 @@
#       RenameEC = copy_file(TmpName, Name);
#-      setDeleteDisposition(H, true);
#+      ShouldDelete = true;
#     }
#@@ -1242,3 +1249,9 @@
#   if (RenameEC)
#-    setDeleteDisposition(H, true);
#+    ShouldDelete = true;
#+  if (ShouldDelete) {
#+    if (!RemoveOnClose)
#+      setDeleteDisposition(H, true);
#+    else
#+      remove(TmpName);
#+  }
# #else
#@@ -1300,2 +1313,7 @@
# #ifndef _WIN32
#+  auto H = reinterpret_cast<HANDLE>(_get_osfhandle(FD));
#+  if (std::error_code EC = setDeleteDisposition(H, true)) {
#+    Ret.RemoveOnClose = true;
#+  }
#+#else
#   if (sys::RemoveFileOnSignal(ResultPath)) {
#EOF
#patch -ulbf llvm/lib/Support/Windows/Path.inc << EOF
#@@ -429,3 +429,3 @@
#   if (!IsLocal)
#-    return std::error_code();
#+    return errc::not_supported;
#
#@@ -1185,8 +1185,2 @@
#
#-  if (Flags & OF_Delete) {
#-    if ((EC = setDeleteDisposition(Result, true))) {
#-      ::CloseHandle(Result);
#-      return errorCodeToError(EC);
#-    }
#-  }
#   return Result;
#EOF
## llvm/include/llvm/Support/FileSystem.h llvm/lib/Support/Path.cpp llvm/lib/Support/Windows/Path.inc
### fix C++ issue with missing include of limits
##if echo $CXX|grep -q clang++; then
## for F in $(find llvm -name '*.cpp') $(find clang -name '*.cpp') $(find lldb -name '*.cpp'); do
##  if [ -f $F ]; then
##   mv $F $F.bak1 &&
##   echo "#include <cstdlib>" > $F &&
##   echo "#include <limits>" >> $F &&
##   echo "#include <cmath>" >> $F &&
##   cat $F.bak1 >> $F
##  fi
## done
##fi
### fix issues with std::isnan/std::isinf/std::signbit in llvm/lib/Support/NativeFormatting.cpp (version >= 13.0.0)
##if echo $CXX|grep -q clang++; then
## sed -i.bak -e "s/std::\(isnan\|isinf\|signbit\)/\1/" llvm/lib/Support/NativeFormatting.cpp
##fi
######llvm/lib/Target/X86/X86FrameLowering.cpp:3686:24: note: include the header <cstdlib> or explicitly provide a declaration for 'std::abs'
##mv llvm/lib/Target/X86/X86FrameLowering.cpp llvm/lib/Target/X86/X86FrameLowering.cpp.bak &&
##echo "#include <cstdlib>" > llvm/lib/Target/X86/X86FrameLowering.cpp &&
##cat llvm/lib/Target/X86/X86FrameLowering.cpp.bak >> llvm/lib/Target/X86/X86FrameLowering.cpp
######llvm/lib/Support/FileUtilities.cpp:146:14: note: include the header <cmath> or explicitly provide a declaration for 'std::abs'
##mv llvm/lib/Support/FileUtilities.cpp llvm/lib/Support/FileUtilities.cpp.bak &&
##echo "#include <cstdlib>" > llvm/lib/Support/FileUtilities.cpp &&
##echo "#include <cmath>" > llvm/lib/Support/FileUtilities.cpp &&
##cat llvm/lib/Support/FileUtilities.cpp.bak >> llvm/lib/Support/FileUtilities.cpp
#
#mkdir -p build &&
# # build main LLVM suite
# wl-showstatus configure &&
# #libunwind;openmp;parallel-libs;polly;pstl;flang
# #-DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;libclc;lld;lldb;polly;mlir;pstl;parallel-libs" \
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
#  -DBUILD_SHARED_LIBS:BOOL=OFF \
#  -DLLVM_BUILD_LLVM_DYLIB:BOOL=OFF \
#  -DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;libclc;lld;lldb;polly;mlir;pstl" \
#  -DLLVM_ENABLE_RUNTIMES:STRING="compiler-rt;libcxx;libcxxabi" \
#  -DLLVM_TARGETS_TO_BUILD:STRING="X86;NVPTX;AMDGPU;ARM;AArch64;WebAssembly" \
#  -DLLVM_HOST_TRIPLE:STRING=$(echo $BUILDPLATFORM|sed -e "s/-.*$//")-w64-mingw32 \
#  -DLLVM_DEFAULT_TARGET_TRIPLE=$(echo $BUILDPLATFORM|sed -e "s/-.*$//")-w64-mingw32 \
#  -DLLVM_BUILD_STATIC=OFF \
#  -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF \
#  -DLLVM_CCACHE_BUILD:BOOL=OFF \
#  -DLLVM_ENABLE_MODULES:BOOL=OFF \
#  -DLLVM_ENABLE_PLUGINS:BOOL=ON \
#  -DLLVM_ENABLE_THREADS:BOOL=ON \
#  -DLLVM_ENABLE_UNWIND_TABLES:BOOL=ON \
#  -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF \
#  -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON \
#  -DLLVM_ENABLE_LTO:STRING=OFF \
#  -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) \
#  -DLLVM_ENABLE_RTTI:BOOL=ON \
#  -DLLVM_ENABLE_TERMINFO:BOOL=OFF \
#  -DLLVM_ENABLE_Z3_SOLVER:BOOL=ON \
#  -DLLVM_Z3_INSTALL_DIR:STRING=$MINGWPREFIX \
#  -DLLVM_ENABLE_FFI:BOOL=ON \
#  -DLLVM_ENABLE_FFI:BOOL=ON \
#  -DFFI_INCLUDE_DIR:PATH=$MINGWPREFIX/include \
#  -DLLVM_ENABLE_LIBXML2:BOOL=ON \
#  -DLLVM_ENABLE_PIC:BOOL=OFF \
#  -DLLVM_USE_RELATIVE_PATHS_IN_DEBUG_INFO:BOOL=ON \
#  -DLLVM_USE_RELATIVE_PATHS_IN_FILES:BOOL=ON \
#  -DLLVM_INSTALL_BINUTILS_SYMLINKS:BOOL=OFF \
#  -DLLVM_INSTALL_CCTOOLS_SYMLINKS:BOOL=OFF \
#  -DLLVM_ENABLE_DOXYGEN:BOOL=OFF -DDOXYGEN_DOT_EXECUTABLE:FILEPATH= -DDOXYGEN_EXECUTABLE:FILEPATH= \
#  -DLLVM_ENABLE_SPHINX=OFF \
#  -DLLVM_INCLUDE_DOCS:BOOL=OFF \
#  -DLLVM_BUILD_EXAMPLES:BOOL=OFF \
#  -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF \
#  -DLLVM_INCLUDE_BENCHMARKS:BOOL=OFF \
#  -DLLVM_INCLUDE_TESTS:BOOL=OFF \
#  -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF \
#  \
#  -DCOMPILER_RT_DEFAULT_TARGET_ONLY=OFF \
#  -DCOMPILER_RT_BUILD_BUILTINS:BOOL=ON \
#  -DCOMPILER_RT_USE_BUILTINS_LIBRARY=OFF \
#  -DSANITIZER_CXX_ABI=libc++ \
#  -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF \
#  \
#  -DLIBCXX_ENABLE_SHARED:BOOL=Off \
#  -DLIBCXX_ENABLE_STATIC:BOOL=ON \
#  -DLIBCXX_USE_COMPILER_RT:BOOL=ON \
#  -DLIBCXX_HAS_WIN32_THREAD_API:BOOL=ON \
#  -DLIBCXX_HAS_PTHREAD_API:BOOL=OFF \
#  -DLIBCXX_ENABLE_EXPERIMENTAL_LIBRARY:BOOL=OFF \
#  -DLIBCXX_CXX_ABI=libcxxabi \
#  -DLIBCXX_CXX_ABI_INCLUDE_PATHS=$PWD/libcxxabi/include \
#  -DLIBCXX_CXX_ABI_LIBRARY_PATH:PATH=$PWD/build_libcxxabi/lib \
#  -DLIBCXX_LIBDIR_SUFFIX="" \
#  -DLIBCXX_INCLUDE_TESTS:BOOL=OFF \
#  -DLIBCXX_ENABLE_ABI_LINKER_SCRIPT:BOOL=OFF \
#  \
#  -DLIBCXXABI_ENABLE_SHARED:BOOL=Off \
#  -DLIBCXXABI_ENABLE_STATIC:BOOL=ON \
#  -DLIBCXXABI_USE_COMPILER_RT:BOOL=ON \
#  -DLIBCXXABI_LIBCXX_INCLUDES:PATH=$PWD/build_libcxx/include/c++/v1 \
#  -DLIBCXXABI_LIBDIR_SUFFIX="" \
#  -DLIBCXXABI_ENABLE_EXCEPTIONS:BOOL=ON \
#  -DLIBCXXABI_ENABLE_ASSERTIONS:BOOL=OFF \
#  \
#  -DLIBUNWIND_ENABLE_SHARED:BOOL=Off \
#  -DLIBUNWIND_ENABLE_STATIC:BOOL=ON \
#  -DLIBUNWIND_USE_COMPILER_RT:BOOL=ON \
#  \
#  -DLIBCLANG_BUILD_STATIC:BOOL=OFF \
#  -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF \
#  -DCLANG_PLUGIN_SUPPORT:BOOL=ON \
#  -DCLANG_ENABLE_CLANGD:BOOL=ON \
#  -DCLANG_DEFAULT_CXX_STDLIB:STRING=libc++ \
#  -DCLANG_DEFAULT_RTLIB:STRING=compiler-rt \
#  -DCLANG_DEFAULT_UNWINDLIB:STRING=none \
#  -DCLANG_DEFAULT_OPENMP_RUNTIME:STRING=libomp \
#  -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF \
#  -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON \
#  -DCLANG_TOOL_APINOTES_TEST_BUILD:BOOL=OFF \
#  -DCLANG_TOOL_ARCMT_TEST_BUILD:BOOL=OFF \
#  -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD:BOOL=OFF \
#  -DCLANG_TOOL_C_ARCMT_TEST_BUILD:BOOL=OFF \
#  -DCLANG_TOOL_C_INDEX_TEST_BUILD:BOOL=OFF \
#  -DCLANG_INCLUDE_DOCS:BOOL=OFF \
#  -DCLANG_BUILD_EXAMPLES:BOOL=OFF \
#  -DCLANG_INCLUDE_TESTS:BOOL=OFF \
#  \
#  -DLLDB_TOOL_LLDB_SERVER_BUILD:BOOL=ON \
#  -DLLDB_TOOL_LLDB_VSCODE_BUILD:BOOL=ON \
#  -DLLDB_ENABLE_LIBEDIT:BOOL=OFF \
#  -DLLDB_ENABLE_CURSES:BOOL=ON \
#  -DLLDB_ENABLE_LIBXML2:BOOL=ON \
#  -DLLDB_ENABLE_LZMA:BOOL=ON \
#  -DLLDB_ENABLE_PYTHON:BOOL=ON \
#  \
#  -DCLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
#  -DLLD_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
#  -DFLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
#  \
#  -DCMAKE_CXX_FLAGS:STRING="-D_WIN32_WINNT=0x0600" \
#  \
#  -DPython3_FIND_REGISTRY:BOOL=NEVER \
#  -DPython3_EXECUTABLE:FILEPATH=$MINGWPREFIX/share/python/bin/python.exe \
#  -Sllvm -Bbuild &&
# # -DCMAKE_CXX_FLAGS:STRING=" " \
# #-DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;lld;lldb;libclc;pstl" \
# #-DLLVM_ENABLE_RUNTIMES:STRING="compiler-rt;libc;libcxx;libcxxabi;libunwind;openmp" \
# #-DCOMPILER_RT_USE_BUILTINS_LIBRARY:BOOL=ON 
# #-DLLVM_HOST_TRIPLE:STRING=$BUILDPLATFORM -DCOMPILER_RT_DEFAULT_TARGET_TRIPLE:STRING=$RUNPLATFORM -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLIBCXXABI_TARGET_TRIPLE:STRING=$RUNPLATFORM -DLIBUNWIND_TARGET_TRIPLE:STRING=$RUNPLATFORM 
# #-DCLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
# #-DLLD_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
# #-DFLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
# #-DCMAKE_C_FLAGS:STRING="-D_FORTIFY_SOURCE=0 -D__SSP_FORTIFY_LEVEL=0" \
# #-DCMAKE_CXX_FLAGS:STRING="-D_FORTIFY_SOURCE=0 -D__SSP_FORTIFY_LEVEL=0" \
# #-LLVM_BUILD_32_BITS:BOOL=ON \
# #-DLLVM_INSTALL_BINUTILS_SYMLINKS:BOOL=ON \
# #-DLLVM_INSTALL_CCTOOLS_SYMLINKS:BOOL=ON \
# #  + share/llvm/bin/addr2line.exe
# #  + share/llvm/bin/ar.exe
# #  + share/llvm/bin/bitcode_strip.exe
# #  + share/llvm/bin/c++filt.exe
# #  + share/llvm/bin/dlltool.exe
# #  + share/llvm/bin/dwp.exe
# #  + share/llvm/bin/install_name_tool.exe
# #  + share/llvm/bin/libtool.exe
# #  + share/llvm/bin/lipo.exe
# #  + share/llvm/bin/nm.exe
# #  + share/llvm/bin/objcopy.exe
# #  + share/llvm/bin/objdump.exe
# #  + share/llvm/bin/ranlib.exe
# #  + share/llvm/bin/readelf.exe
# #  + share/llvm/bin/size.exe
# #  + share/llvm/bin/strings.exe
# #  + share/llvm/bin/strip.exe
# #  + share/llvm/bin/windres.exe
# #-DCLANG_DEFAULT_UNWINDLIB:STRING=libcxx \
# #-DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF \
# #-DBUILD_SHARED_LIBS:BOOL=OFF #see also: https://llvm.org/docs/BuildingADistribution.html
#
# #-DCMAKE_C_COMPILER:FILEPATH=$(PATH=$MINGWPREFIX/share/llvm/bin:$PATH which clang.exe) \
# #-DCMAKE_CXX_COMPILER:FILEPATH=$(PATH=$MINGWPREFIX/share/llvm/bin:$PATH which clang++.exe) \
# #-DCMAKE_RC_COMPILER:FILEPATH=$(PATH=$MINGWPREFIX/share/llvm/bin:$PATH which windres.exe) \
# #-DCMAKE_ASM_MASM_COMPILER:FILEPATH=$(PATH=$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ml.exe) \
# #-DCMAKE_AR:FILEPATH=$(PATH=$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ar.exe) \
# #-DCMAKE_RANLIB:FILEPATH=$(PATH=$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ranlib.exe) \
# #-DCMAKE_EXE_LINKER_FLAGS:STRING="-L$MINGWPREFIX/share/llvm/lib" \
# #-DCMAKE_CXX_FLAGS:STRING="-I$MINGWPREFIX/share/llvm/include/c++/v1" \
#
# #-DCMAKE_ASM_COMPILER:STRING=yasm.exe \
# #-DCMAKE_ASM_MASM_COMPILER:STRING="jwasm.exe $(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "-win64"; else echo "-coff"; fi)" \
# #$(if which clang.exe &> /dev/null; then echo "-DCMAKE_C_COMPILER:FILEPATH=$(which clang.exe)"; fi) \
# #$(if which clang++.exe &> /dev/null; then echo "-DCMAKE_CXX_COMPILER:FILEPATH=$(which clang++.exe)"; fi) \
# #$(if which llvm-ranlib.exe &> /dev/null; then echo "-DCMAKE_C_COMPILER_RANLIB:FILEPATH=$(which llvm-ranlib.exe) -DCMAKE_CXX_COMPILER_RANLIB:FILEPATH=$(which llvm-ranlib.exe)"; fi) \
# #$(if which llvm-ar.exe &> /dev/null; then echo "-DCMAKE_C_COMPILER_AR:FILEPATH=$(which llvm-ar.exe) -DCMAKE_CXX_COMPILER_AR:FILEPATH=$(which llvm-ar.exe)"; fi) \
# #-DLLVM_TABLEGEN:STRING=$(which llvm-tblgen.exe 2> /dev/null) \
# ## don't use -fno-lto flag with yasm
# #sed -i.bak -e "s/\(yasm\.exe .*\) -fno-lto/\1/" build/compile_commands.json &&
# #sed -i.bak -e "s/-fno-lto//" build/build.ninja build/compile_commands.json
# ## fix missing -lgcc/-lgcc_s
# #sed -i.bak -e "s/-lgcc_s\|-lgcc//g" build/build.ninja &&
# ## fix missing link libraries
# #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -lpthread/" build/build.ninja &&
# wl-showstatus build-install &&
# ninja -Cbuild install/strip &&
# #ninja -Cbuild install-distribution &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf llvm-project-$VERSION.src
# #wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf llvm-project-llvmorg-$VERSION



export NAME="The LLVM Compiler Infrastructure"
export STATUS=
export URL=https://llvm.org/
export BASENAME=llvm-project
export DESCRIPTION="The LLVM Compiler Infrastructure - a toolkit for the construction of highly optimized compilers, optimizers, and run-time environments."
export CATEGORY=development
export TYPE=application
#export VERSION=14.0.0
#export VERSIONDATE=20220323
#export VERSION=14.0.1
#export VERSIONDATE=20220413
#export VERSION=14.0.2
#export VERSIONDATE=20220427
#export VERSION=14.0.3
#export VERSIONDATE=20220429
#export VERSION=14.0.4
#export VERSIONDATE=20220525
#export VERSION=14.0.5
#export VERSIONDATE=20220611
#export VERSION=14.0.6
#export VERSIONDATE=20220625
#export VERSION=15.0.0
#export VERSIONDATE=20220906
#export VERSION=15.0.1
#export VERSIONDATE=20220920
#export VERSION=15.0.2
#export VERSIONDATE=20221004
#export VERSION=15.0.3
#export VERSIONDATE=20221018
#export VERSION=15.0.4
#export VERSIONDATE=20221102
#export VERSION=15.0.5
#export VERSIONDATE=20221116
#export VERSION=15.0.6
#export VERSIONDATE=20221129
#export VERSION=15.0.7
#export VERSIONDATE=20230112
#export VERSION=16.0.0
#export VERSIONDATE=20230318
#export VERSION=16.0.2
#export VERSIONDATE=20230419
#export VERSION=16.0.3
#export VERSIONDATE=20230503
#export VERSION=16.0.4
#export VERSIONDATE=20230517
#export VERSION=16.0.5
#export VERSIONDATE=20230603
#export VERSION=16.0.6
#export VERSIONDATE=20230725
#export VERSION=17.0.1
#export VERSIONDATE=20230919
#export VERSION=17.0.2
#export VERSIONDATE=20231003
#export VERSION=17.0.3
#export VERSIONDATE=20231021
#export VERSION=17.0.4
#export VERSIONDATE=20231031
#export VERSION=17.0.5
#export VERSIONDATE=20231114
####-- Found Doxygen: D:/Prog/winlibs32_stage/custombuilt/bin/doxygen.exe (found version "1.9.7") found components: doxygen missing components: dot
#export VERSION=17.0.6
#export VERSIONDATE=20231128
#export VERSION=18.1.1
#export VERSIONDATE=20240307
####llvm/lib/Target/AMDGPU/SMInstructions.td:1067:7: error: Record `S_BUFFER_ATOMIC_OR_SGPR_RTN_gfx10' does not have a field named `variadicOpsAreDefs'!
#export VERSION=18.1.2
#export VERSIONDATE=20240320
#export VERSION=18.1.3
#export VERSIONDATE=20240404
#export VERSION=18.1.4
#export VERSIONDATE=20240417
#export VERSION=18.1.5
#export VERSIONDATE=20240502
#export VERSION=18.1.6
#export VERSIONDATE=20240519
#export VERSION=18.1.7
#export VERSIONDATE=20240606
#export VERSION=18.1.8
#export VERSIONDATE=20240709
#export VERSION=19.1.0
#export VERSIONDATE=20240917
#export VERSION=19.1.1
#export VERSIONDATE=20241001
#export VERSION=19.1.2
#export VERSIONDATE=20241015
#export VERSION=19.1.3
#export VERSIONDATE=20241030
#export VERSION=19.1.4
#export VERSIONDATE=20241119
#export VERSION=19.1.5
#export VERSIONDATE=20241203
#export VERSION=19.1.6
#export VERSIONDATE=20241218
export VERSION=19.1.7
export VERSIONDATE=20250114
#export VERSION=20.1.0
#export VERSIONDATE=20250305
#export VERSION=20.1.1
#export VERSIONDATE=20250319
#export VERSION=20.1.2
#export VERSIONDATE=20250402
####ld.exe: lib/ExecutionEngine/JITLink/CMakeFiles/LLVMJITLink.dir/EHFrameSupport.cpp.obj:EHFrameSupport.cpp:(.text$_ZN4llvm7jitlink25InProcessEHFrameRegistrar18deregisterEHFramesENS_3orc17ExecutorAddrRangeE+0x13): undefined reference to `llvm::orc::deregisterEHFrameSection(void const*, unsigned long long)'
wl-showstatus --package-version
export DEPENDENCIES=pthreads,zlib,xz,libxml2,libffi,isl,z3,swig,ncurses,protobuf,wineditline,cpython-mingw
export OPTIONALDEPENDENCIES=udis86,graphviz,hwloc,libpfm4,tbb
export BUILDDEPENDENCIES=cmake,ninja,jwasm
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=llvm/LICENSE.TXT
export LICENSETYPE="Apache with exceptions"
#export DOWNLOADURL="https://releases.llvm.org/ llvmorg-"
#export DOWNLOADURL="https://github.com/llvm/llvm-project/releases/ llvm-project- .src.tar.xz"
#export DOWNLOADURL="https://github.com/llvm/llvm-project/releases/ llvmorg-"
export DOWNLOADURL="https://github.com/llvm/llvm-project/tags/ llvmorg-"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://github.com/llvm/llvm-project/releases/download/llvmorg-$VERSION/llvm-project-$VERSION.src.tar.xz
#export DOWNLOADSOURCEURL=https://github.com/llvm/llvm-project/releases/download/llvmorg-$(echo $VERSION|sed -e "s/\([0-9]\)\(rc\)/\1-\2/")/llvm-project-$VERSION.src.tar.xz
export DOWNLOADSOURCEURL=https://github.com/llvm/llvm-project/archive/refs/tags/llvmorg-$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
#tar xJ --force-local -f $TARBALLDIR/$BASENAME/llvm-project-$VERSION.src.tar.xz
#cd llvm-project-$VERSION.src
tar xz --force-local -f $TARBALLDIR/$BASENAME/llvmorg-$VERSION.tar.gz
cd llvm-project-llvmorg-$VERSION
# fix clang/include/clang/Interpreter/Interpreter.h (version >= 17.0.1)
#### Bug reported here: https://github.com/llvm/llvm-project/pull/66881
patch -ulbf clang/include/clang/Interpreter/Interpreter.h << EOF
@@ -42,3 +42,3 @@
 /// Create a pre-configured \\c CompilerInstance for incremental processing.
-class IncrementalCompilerBuilder {
+class REPL_EXTERNAL_VISIBILITY IncrementalCompilerBuilder {
 public:
@@ -75,3 +75,3 @@
 /// Provides top-level interfaces for incremental compilation and execution.
-class Interpreter {
+class REPL_EXTERNAL_VISIBILITY Interpreter {
   std::unique_ptr<llvm::orc::ThreadSafeContext> TSCtx;
EOF
## fix lldb/source/Core/IOHandlerCursesGUI.cpp (version >= 20.1.2)
#patch -ulbf lldb/source/Core/IOHandlerCursesGUI.cpp << EOF
#@@ -12,3 +12,3 @@
# #if LLDB_ENABLE_CURSES
#-#if CURSES_HAVE_NCURSES_CURSES_H
#+#if 1
# #include <ncurses/curses.h>
#EOF
# add icon to resource file llvm/resources/windows_version_resource.rc (version >= 18.1.7)
patch -ulbf llvm/resources/windows_version_resource.rc << EOF
@@ -54,2 +54,3 @@

+0 ICON DISCARDABLE "../cmake/nsis_icon.ico"
 1 VERSIONINFO
@@ -64,7 +65,7 @@
       VALUE "FileDescription", RC_FILE_DESCRIPTION
-      VALUE "FileVersion", RC_FILE_VERSION
-      VALUE "InternalName", RC_INTERNAL_NAME
+      VALUE "FileVersion", "$VERSION"
+//      VALUE "InternalName", RC_INTERNAL_NAME
       VALUE "OriginalFilename", RC_ORIGINAL_FILENAME
-      VALUE "ProductName", RC_PRODUCT_NAME
-      VALUE "ProductVersion", RC_PRODUCT_VERSION
+//      VALUE "ProductName", RC_PRODUCT_NAME
+//      VALUE "ProductVersion", RC_PRODUCT_VERSION

EOF
# actually use resource file in llvm/cmake/modules/AddLLVM.cmake (version >= 18.1.7)
patch -ulbf llvm/cmake/modules/AddLLVM.cmake << EOF
@@ -368,3 +368,3 @@
   set(sources \${ARGN})
-  if (MSVC AND CMAKE_HOST_SYSTEM_NAME STREQUAL "Windows")
+  if (WIN32 AND CMAKE_HOST_SYSTEM_NAME STREQUAL "Windows")
     set(resource_file \${LLVM_SOURCE_DIR}/resources/windows_version_resource.rc)
@@ -435,4 +435,6 @@

+  if (MSVC)
   set_property(SOURCE \${resource_file}
                PROPERTY COMPILE_FLAGS /nologo)
+  endif()
   set_property(SOURCE \${resource_file}
EOF
# avoid z3 version detection issue (version >= 15.0.7)
sed -i.bak -e "s/\(find_package(Z3 \)[0-9.]*/\1/" llvm/CMakeLists.txt
mkdir -p build_shared &&
 wl-showstatus configure &&
 #flang
 #-DCOMPILER_RT_DEFAULT_TARGET_TRIPLE:STRING=$RUNPLATFORM \
 # -DLLVM_BUILD_LLVM_DYLIB:BOOL=ON \
 # -DCLANG_LINK_CLANG_DYLIB:BOOL=ON \
 # -DLLVM_LINK_LLVM_DYLIB:BOOL=ON \
 # -DLLVM_TARGETS_TO_BUILD:STRING="X86;ARM;AArch64;NVPTX;AMDGPU;AVR;WebAssembly" \
 # -DLLVM_TARGETS_TO_BUILD:STRING=all \
 # -DLLVM_DYLIB_COMPONENTS:STRING=all \
 #
 # -DLLVM_ENABLE_RUNTIMES:STRING="compiler-rt;libcxx;libcxxabi;libunwind;openmp" \
 # -DPython3_LIBRARIES:FILEPATH="$(PKG_CONFIG_PATH=$MINGWPREFIX/share/python/lib/pkgconfig:${PKG_CONFIG_PATH:+:$PKG_CONFIG_PATH} pkg-config --libs python3)" \
 # -DPython3_INCLUDE_DIRS:FILEPATH=$(ls -1d $MINGWPREFIX/share/python/include/python*|sort -V|tail -n1) \
 #
 PATH=$MINGWPREFIX/share/python/bin:$PATH \
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
  -DCMAKE_SYSTEM_NAME:STRING=Windows \
  -DBUILD_SHARED_LIBS:BOOL=ON \
  -DLLVM_BUILD_STATIC=OFF \
  -DLIBCLANG_BUILD_STATIC:BOOL=OFF \
  -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF \
  -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF \
  -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM \
  -DLLVM_DEFAULT_TARGET_TRIPLE:STRING=$RUNPLATFORM \
  -DLLVM_TARGETS_TO_BUILD:STRING="X86;ARM;AArch64;NVPTX;AMDGPU;WebAssembly" \
  -DLLVM_RUNTIME_TARGETS=$RUNPLATFORM \
  -DCLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
  -DLLD_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
  -DFLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
  -DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;lld;lldb;pstl;mlir" \
  -DLLVM_ENABLE_RUNTIMES:STRING="" \
  -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=OFF \
  -DLLVM_ENABLE_THREADS:BOOL=ON \
  -DCLANG_BUILD_TOOLS:BOOL=ON \
  -DCLANG_DEFAULT_RTLIB:STRING=libgcc \
  -DCLANG_DEFAULT_CXX_STDLIB:STRING=libstdc++ \
  -DCLANG_DEFAULT_OPENMP_RUNTIME:STRING=libgomp \
  -DCLANG_DEFAULT_UNWINDLIB:STRING=libgcc \
  -DSANITIZER_CXX_ABI:STRING=libstdc++ \
  -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF \
  -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON \
  -DLLVM_ENABLE_LIBEDIT:BOOL=ON \
  -DLLDB_ENABLE_LIBEDIT:BOOL=ON \
  -DLibEdit_INCLUDE_DIRS:PATH=$MINGWPREFIX/include \
  -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) \
  -DLLVM_ENABLE_RTTI:BOOL=ON \
  -DLLVM_ENABLE_MODULES:BOOL=OFF \
  -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF \
  -DLLVM_ENABLE_FFI:BOOL=ON \
  -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON \
  -DLLVM_ENABLE_LIBXML2:BOOL=ON \
  -DLLVM_ENABLE_THREADS:BOOL=ON \
  -DLLVM_ENABLE_UNWIND_TABLES:BOOL=ON \
  -DLLVM_ENABLE_Z3_SOLVER:BOOL=ON \
  -DLLVM_INCLUDE_TOOLS:BOOL=ON \
  -DLLVM_INCLUDE_UTILS:BOOL=ON \
  -DLLVM_INSTALL_UTILS:BOOL=ON \
  -DLLVM_ENABLE_TERMINFO:BOOL=OFF \
  -DLLVM_ENABLE_LIBEDIT:BOOL=OFF \
  -DLLDB_ENABLE_LIBEDIT:BOOL=OFF \
  -DLLDB_ENABLE_CURSES:BOOL=ON \
  -DLLDB_ENABLE_LIBXML2:BOOL=ON \
  -DLLDB_ENABLE_LZMA:BOOL=ON \
  -DLLDB_ENABLE_LUA:BOOL=OFF \
  -DLLDB_ENABLE_PYTHON:BOOL=ON \
  -DLLVM_ENABLE_SPHINX=OFF \
  -DLLVM_INCLUDE_DOCS:BOOL=OFF \
  -DCLANG_INCLUDE_TESTS:BOOL=OFF \
  -DLLDB_INCLUDE_TESTS:BOOL=OFF \
  -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF \
  -DLLVM_INCLUDE_TESTS:BOOL=OFF \
  -DLLVM_TOOL_LLVM_C_TEST_BUILD:BOOL=OFF \
  -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF \
  -DLLVM_BUILD_BENCHMARKS:BOOL=OFF \
  -DLLVM_INCLUDE_BENCHMARKS:BOOL=OFF \
  -DBENCHMARK_USE_BUNDLED_GTEST:BOOL=OFF \
  -DLLVM_BUILD_TESTS:BOOL=OFF \
  -DBUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF \
  -DCLANG_PLUGIN_SUPPORT:BOOL=ON \
  -DCLANG_ENABLE_CLANGD:BOOL=ON \
  -DCLANG_TOOL_APINOTES_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_ARCMT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_C_ARCMT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_C_INDEX_TEST_BUILD:BOOL=OFF \
  -DCLANG_INCLUDE_DOCS:BOOL=OFF \
  -DCLANG_BUILD_EXAMPLES:BOOL=OFF \
  -DLLD_BUILD_TOOLS:BOOL=ON \
  -DLLD_DEFAULT_LD_LLD_IS_MINGW:BOOL=ON \
  -DLLDB_TOOL_LLDB_SERVER_BUILD:BOOL=ON \
  -DLLDB_TOOL_LLDB_VSCODE_BUILD:BOOL=ON \
  -DLLVM_TOOL_OPENMP_BUILD:BOOL=ON \
  -DLLVM_TOOL_PARALLEL_LIBS_BUILD:BOOL=ON \
  -DLLDB_TOOL_LLDB_INSTR_BUILD:BOOL=OFF \
  -DLLDB_DISABLE_PYTHON:BOOL=OFF \
  -DLLDB_ENABLE_PYTHON:BOOL=ON \
  -DLLDB_EMBED_PYTHON_HOME:BOOL=OFF \
  -DLLDB_PYTHON_RELATIVE_PATH:PATH=libexec/site-packages -DLLDB_PYTHON_EXE_RELATIVE_PATH:FILEPATH=bin/python.exe -DLLDB_PYTHON_EXT_SUFFIX:STRING=.pyd \
  -DPython3_FIND_REGISTRY:BOOL=NEVER \
  -DPython3_EXECUTABLE:FILEPATH=$MINGWPREFIX/share/python/bin/python.exe \
  -DCMAKE_CXX_FLAGS:STRING="-fpermissive -D_WIN32_WINNT=0x0600 $(if ${CC:-gcc} --version|grep -q clang; then echo "-femulated-tls"; fi)" \
  -DCMAKE_OBJECT_PATH_MAX=300 \
  -Sllvm -Bbuild_shared &&
 #-DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;lld;lldb;libclc;pstl" \
 #-DZ3_INCLUDE_DIR:PATH=$MINGWDIR/include -DZ3_LIBRARIES:STRING=-lz3 
 #-DCURSES_INCLUDE_DIRS:PATH=$MINGWDIR/include -DCURSES_LIBRARIES:STRING=-lncurses -DPANEL_LIBRARIES:STRING=-lpanel \
 #-DLLVM_TOOL_LLVM_JITLINK_BUILD:BOOL=OFF -DLLVM_TOOL_LLVM_JITLISTENER_BUILD:BOOL=OFF \
 #-DLIBLZMA_INCLUDE_DIR:PATH=$MINGWDIR/include -DLIBLZMA_LIBRARY:STRING=-llzma 
 #-DCMAKE_OBJECT_PATH_MAX=300 
 #-DLLVM_ENABLE_PROJECTS:STRING="libunwind;polly;flang"
 #-DLLVM_ENABLE_PROJECTS:STRING="openmp"
 #-DLLVM_ENABLE_DOXYGEN:BOOL=OFF -DDOXYGEN_DOT_EXECUTABLE:FILEPATH= -DDOXYGEN_EXECUTABLE:FILEPATH= \
 #-DLLDB_PYTHON_RELATIVE_PATH:PATH=libexec/site-packages -DLLDB_PYTHON_EXE_RELATIVE_PATH:FILEPATH=bin/python.exe -DLLDB_PYTHON_EXT_SUFFIX:STRING=.pyd 
 #-DHAVE_STEADY_CLOCK:BOOL=ON 
 #-DLLVM_ENABLE_LLD:BOOL=ON -DCLANG_DEFAULT_LINKER:STRING=lld 
 # fix missing link libraries
 if ${CC:-gcc} --version|grep -q clang; then
  sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -pthread/" build_shared/build.ninja
 fi &&
 # fix library order when linking MLIR
 ####Bug reported: https://github.com/llvm/llvm-project/issues/127179
 sed -i.bak -e "s?\(lib/libLLVMTableGen[^ ]*\.a\)\(.*\)\(lib/libMLIRTableGen[^ ]*\.a\)?\3\2\1?" build_shared/build.ninja &&
 wl-showstatus build-install &&
 #PATH=$MINGWPREFIX/share/python/bin:$PATH ninja -Cbuild_shared install/strip &&
 ( PATH=$MINGWPREFIX/share/python/bin:$PATH ninja -Cbuild_shared install/strip || PATH=$MINGWPREFIX/share/python/bin:$PATH ninja -j1 -Cbuild_shared install/strip || PATH=$PWD/build_shared/bin:$PWD/build_shared/tools:$PATH ninja -Cbuild_shared install/strip ) &&
 #( ninja -Cbuild_shared install/strip || ninja -j1 -Cbuild_shared install/strip ) &&
 #wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf llvm-project-$VERSION.src
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf llvm-project-llvmorg-$VERSION
####Bug reported (add --enable-auto-import to linker help to make configure scripts detect shared library support): https://github.com/llvm/llvm-project/issues/59873
####Bug reported (ARM64 emulation mismatch with -DLLD_DEFAULT_LD_LLD_IS_MINGW:BOOL=ON): https://github.com/llvm/llvm-project/issues/60848









# WORKING
mkdir -p build_llvm &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=MinSizeRel -DBUILD_SHARED_LIBS:BOOL=ON \
  -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM \
  -DLLVM_TARGETS_TO_BUILD:STRING="X86;NVPTX;AMDGPU;ARM;AArch64;WebAssembly" \
  -DLLVM_ENABLE_MODULES:BOOL=OFF \
  -DLLVM_ENABLE_PLUGINS:BOOL=ON \
  -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON \
  -DLLVM_ENABLE_LTO:STRING=OFF \
  -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) \
  -DLLVM_ENABLE_RTTI:BOOL=ON \
  -DLLVM_ENABLE_TERMINFO:BOOL=OFF \
  -DLLVM_ENABLE_Z3_SOLVER:BOOL=ON \
  -DLLVM_Z3_INSTALL_DIR:STRING=$MINGWPREFIX \
  -DLLVM_USE_RELATIVE_PATHS_IN_DEBUG_INFO:BOOL=ON \
  -DLLVM_USE_RELATIVE_PATHS_IN_FILES:BOOL=ON \
  -DLLVM_ENABLE_FFI:BOOL=ON \
  -DFFI_INCLUDE_DIR:PATH=$MINGWPREFIX/include \
  -DLLVM_ENABLE_PIC:BOOL=OFF \
  -DLLVM_INCLUDE_DOCS:BOOL=OFF \
  -DLLVM_BUILD_EXAMPLES:BOOL=OFF \
  -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF \
  -DLLVM_INCLUDE_BENCHMARKS:BOOL=OFF \
  -DLLVM_BUILD_TESTS:BOOL=OFF \
  -DLLVM_INCLUDE_TESTS:BOOL=OFF \
  -DGIT_EXECUTABLE:FILEPATH= \
  -DPython3_EXECUTABLE:PATH=$MINGWPREFIX/share/python/bin/python3.exe -Sllvm -Bbuild_llvm &&
 #-DCLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))"
 #-DLLVM_TARGETS_TO_BUILD:STRING="X86;NVPTX;AMDGPU;ARM;AArch64;WebAssembly"
 #-DLLVM_ENABLE_LTO:STRING=OFF 
 #-DLLVM_ENABLE_LTO:STRING=Thin 
 #-DLLVM_ENABLE_LTO:STRING=Full 
 
 #-DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;compiler-rt;cross-project-tests;libc;libclc;libcxx;libcxxabi;libunwind;lld;lldb;mlir;openmp;parallel-libs;polly;pstl;flang" 
 #-DLLVM_ENABLE_RUNTIMES:STRING="compiler-rt;libc;libcxx;libcxxabi;libunwind;openmp"
 #-DLLVM_INSTALL_TOOLCHAIN_ONLY:BOOL=ON 
 #-DLLVM_INSTALL_UTILS:BOOL=ON 
 #-DLLVM_USE_SPLIT_DWARF:BOOL=ON 
 #cmake.exe -Wno-dev -GNinja \
 # -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
 # -DBUILD_SHARED_LIBS:BOOL=ON \
 # -DLLVM_BUILD_STATIC=OFF \
 # -DLIBCLANG_BUILD_STATIC:BOOL=OFF \
 # -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF \
 # -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF \
 # -DCLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
 # -DLLD_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
 # -DFLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
 # -DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;lld;lldb;libclc;mlir;pstl;parallel-libs" \
 # -DLLVM_ENABLE_RUNTIMES:STRING="libc;libcxx;libcxxabi;openmp"
 # -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=OFF \
 # -DLLVM_ENABLE_THREADS:BOOL=ON \
 # -DLLVM_ENABLE_RUNTIMES:STRING=all \
 # -DCLANG_BUILD_TOOLS:BOOL=ON \
 # -DLLVM_BUILD_EXTERNAL_COMPILER_RT:BOOL=ON \
 # -DCOMPILER_RT_USE_BUILTINS_LIBRARY=ON \
 # -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF \
 # -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON \
 # -DLLVM_ENABLE_LIBEDIT:BOOL=ON \
 # -DLLDB_ENABLE_LIBEDIT:BOOL=ON \
 # -DLibEdit_INCLUDE_DIRS:PATH=$MINGWPREFIX/include \
 # -DLLDB_ENABLE_CURSES:BOOL=ON \
 # -DLLDB_ENABLE_LIBXML2:BOOL=ON \
 # -DLLDB_ENABLE_LUA:BOOL=ON \
 # -DLLDB_ENABLE_LZMA:BOOL=ON \
 # -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) \
 # -DLLVM_ENABLE_RTTI:BOOL=ON \
 # -DLLVM_ENABLE_MODULES:BOOL=OFF \
 # -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF \
 # -DLLVM_ENABLE_FFI:BOOL=ON \
 # -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON \
 # -DLLVM_ENABLE_LIBXML2:BOOL=ON \
 # -DLLVM_ENABLE_THREADS:BOOL=ON \
 # -DLLVM_ENABLE_UNWIND_TABLES:BOOL=ON \
 # -DLLVM_ENABLE_Z3_SOLVER:BOOL=ON \
 # -DLLVM_INCLUDE_TOOLS:BOOL=ON \
 # -DLLVM_INCLUDE_UTILS:BOOL=ON \
 # -DLLVM_INSTALL_UTILS:BOOL=ON \
 # -DLLVM_ENABLE_TERMINFO:BOOL=OFF \
 # -DLLVM_ENABLE_LIBEDIT:BOOL=OFF \
 # -DLLDB_ENABLE_LIBEDIT:BOOL=OFF \
 # -DLLDB_ENABLE_CURSES:BOOL=ON \
 # -DLLDB_ENABLE_LIBXML2:BOOL=ON \
 # -DLLDB_ENABLE_LZMA:BOOL=ON \
 # -DLLDB_ENABLE_PYTHON:BOOL=ON \
 # -DPython3_FIND_REGISTRY:BOOL=NEVER \
 # -DPython3_EXECUTABLE:PATH=$MINGWPREFIX/share/python/bin/python3.exe \
 # -DLLVM_ENABLE_SPHINX=OFF \
 # -DLLVM_INCLUDE_DOCS:BOOL=OFF \
 # -DCLANG_INCLUDE_TESTS:BOOL=OFF \
 # -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF \
 # -DLLDB_INCLUDE_TESTS:BOOL=OFF \
 # -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF \
 # -DLLVM_INCLUDE_TESTS:BOOL=OFF \
 # -DLLVM_TOOL_LLVM_C_TEST_BUILD:BOOL=OFF \
 # -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF \
 # -DLLVM_BUILD_BENCHMARKS:BOOL=OFF \
 # -DLLVM_BUILD_TESTS:BOOL=OFF \
 # -DBUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF \
 # -DCLANG_PLUGIN_SUPPORT:BOOL=ON \
 # -DCLANG_ENABLE_CLANGD:BOOL=ON \
 # -DCLANG_TOOL_APINOTES_TEST_BUILD:BOOL=OFF \
 # -DCLANG_TOOL_ARCMT_TEST_BUILD:BOOL=OFF \
 # -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD:BOOL=OFF \
 # -DCLANG_TOOL_C_ARCMT_TEST_BUILD:BOOL=OFF \
 # -DCLANG_TOOL_C_INDEX_TEST_BUILD:BOOL=OFF \
 # -DCLANG_INCLUDE_DOCS:BOOL=OFF \
 # -DCLANG_BUILD_EXAMPLES:BOOL=OFF \
 # -DLLD_BUILD_TOOLS:BOOL=ON \
 # -DLLDB_TOOL_LLDB_SERVER_BUILD:BOOL=ON \
 # -DLLDB_TOOL_LLDB_VSCODE_BUILD:BOOL=ON \
 # -DLLVM_TOOL_OPENMP_BUILD:BOOL=ON \
 # -DLLVM_TOOL_PARALLEL_LIBS_BUILD:BOOL=ON \
 # -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF \
 # -DLLDB_DISABLE_PYTHON:BOOL=ON -Sllvm -Bbuild_shared &&
 wl-showstatus build-install &&
 ninja -Cbuild_llvm install/strip &&
    echo OK

mkdir -p build_compiler-rt &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
  -DBUILD_SHARED_LIBS:BOOL=ON \
  -DLLVM_TARGETS_TO_BUILD:STRING="X86;NVPTX;AMDGPU;ARM;AArch64;WebAssembly" \
  -DCOMPILER_RT_DEFAULT_TARGET_TRIPLE:STRING=$RUNPLATFORM \
  -DLLVM_MAIN_SRC_DIR:PATH=$PWD/llvm \
  -DLLVM_CONFIG_PATH:PATH=$PWD/build_llvm/bin/llvm-config.exe \
  -DCOMPILER_RT_DEFAULT_TARGET_ONLY=OFF \
  -DSANITIZER_CXX_ABI=libc++ \
  -DCOMPILER_RT_USE_BUILTINS_LIBRARY=OFF \
  -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF \
  -DCOMPILER_RT_CAN_EXECUTE_TESTS:BOOL=OFF \
  -DCMAKE_CXX_FLAGS:STRING=" " \
  -DPython3_EXECUTABLE:FILEPATH=$PYDIR/python.exe -Scompiler-rt -Bbuild_compiler-rt &&
 wl-showstatus build-install &&
 ninja -Cbuild_compiler-rt install/strip &&
    echo OK
#  -DCOMPILER_RT_BAREMETAL_BUILD:BOOL=ON \



####https://github.com/mstorsjo/llvm-mingw/blob/master/build-openmp.sh
#for F in $(find openmp -name '*.cpp') $(find lldb -name '*.cpp'); do
# if [ -f $F ]; then
#  mv $F $F.bak1 &&
#  echo "#include <cstdlib>" > $F &&
#  echo "#include <limits>" >> $F &&
#  echo "#include <cmath>" >> $F &&
#  cat $F.bak1 >> $F
# fi
#done
#mkdir -p build_openmp_i686 &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
#  -DLLVM_TARGETS_TO_BUILD:STRING="X86" \
#  -DLLVM_HOST_TRIPLE:STRING=$BUILDPLATFORM \
#  -DBUILD_SHARED_LIBS:BOOL=OFF \
#  -DLLVM_MAIN_SRC_DIR:PATH=$PWD/llvm \
#  -DCMAKE_CROSSCOMPILING:BOOL=ON \
#  -DCMAKE_SYSTEM_NAME:STRING=Windows \
#  -DCMAKE_C_COMPILER:FILEPATH=$INSTALLPREFIX/share/llvm/bin/clang.exe \
#  -DCMAKE_CXX_COMPILER:FILEPATH=$INSTALLPREFIX/share/llvm/bin/clang++.exe \
#  -DCMAKE_RC_COMPILER:FILEPATH=$INSTALLPREFIX/share/llvm/bin/windres.exe \
#  -DCMAKE_ASM_MASM_COMPILER:FILEPATH=$INSTALLPREFIX/share/llvm/bin/llvm-ml.exe \
#  -DCMAKE_AR:FILEPATH=$INSTALLPREFIX/share/llvm/bin/llvm-ar.exe \
#  -DCMAKE_RANLIB:FILEPATH=$INSTALLPREFIX/share/llvm/bin/llvm-ranlib.exe \
#  -DCMAKE_CXX_FLAGS:STRING="-I$INSTALLPREFIX/share/llvm/include/c++/v1" \
#  -DCMAKE_EXE_LINKER_FLAGS:STRING="-L$INSTALLPREFIX/share/llvm/lib" \
#  -DLIBOMP_ENABLE_SHARED:BOOL=ON \
#  -Sopenmp -Bbuild_openmp_i686 &&
# wl-showstatus build-install &&
# ninja -Cbuild_openmp_i686 install/strip &&
#    echo OK
mkdir -p build_openmp &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
  -DLLVM_TARGETS_TO_BUILD:STRING="X86;AArch64" \
  -DBUILD_SHARED_LIBS:BOOL=OFF \
  -DLLVM_MAIN_SRC_DIR:PATH=$PWD/llvm \
  -DCMAKE_C_COMPILER:FILEPATH=$INSTALLPREFIX/share/llvm/bin/clang.exe \
  -DCMAKE_CXX_COMPILER:FILEPATH=$INSTALLPREFIX/share/llvm/bin/clang++.exe \
  -DCMAKE_RC_COMPILER:FILEPATH=$INSTALLPREFIX/share/llvm/bin/windres.exe \
  -DCMAKE_ASM_MASM_COMPILER:FILEPATH=$INSTALLPREFIX/share/llvm/bin/llvm-ml.exe \
  -DCMAKE_AR:FILEPATH=$INSTALLPREFIX/share/llvm/bin/llvm-ar.exe \
  -DCMAKE_RANLIB:FILEPATH=$INSTALLPREFIX/share/llvm/bin/llvm-ranlib.exe \
  -DCMAKE_EXE_LINKER_FLAGS:STRING="-L$INSTALLPREFIX/share/llvm/lib" \
  -DCMAKE_CXX_FLAGS:STRING="-I$INSTALLPREFIX/share/llvm/include/c++/v1" \
  -DLIBOMP_ASMFLAGS=-m64 \
  -DLIBOMP_ENABLE_SHARED:BOOL=ON \
  -Sopenmp -Bbuild_openmp &&
  #-DLLVM_TARGETS_TO_BUILD:STRING="X86" \
  #-DLLVM_HOST_TRIPLE:STRING=$(echo $BUILDPLATFORM|sed -e "s/-.*$//")-w64-mingw32 \
 wl-showstatus build-install &&
 ninja -Cbuild_openmp install/strip &&
    echo OK
#  -DCMAKE_CROSSCOMPILING:BOOL=ON \
#  -DCMAKE_SYSTEM_NAME:STRING=Windows \
#-DCMAKE_MODULE_LINKER_FLAGS:STRING="-L$INSTALLPREFIX/share/llvm/lib" 
#-DCMAKE_STATIC_LINKER_FLAGS:STRING="-L$INSTALLPREFIX/share/llvm/lib" 
#-DCMAKE_SHARED_LINKER_FLAGS:STRING="-L$INSTALLPREFIX/share/llvm/lib" 
#-DCMAKE_EXE_LINKER_FLAGS::STRING="-L$INSTALLPREFIX/share/llvm/lib" 


mkdir -p build_libunwind_$TARGET_ARG &&
 touch SUCCESS
 for TARGET_ARG in i686 x86_64 armv7 aarch64; do
  wl-showstatus configure &&
  cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm/$TARGET_ARG-w64-mingw32 -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
   -DBUILD_SHARED_LIBS:BOOL=ON \
   -DLIBUNWIND_ENABLE_SHARED:BOOL=ON \
   -DLIBUNWIND_ENABLE_STATIC:BOOL=ON \
   -DLIBUNWIND_TARGET_TRIPLE:STRING=$TARGET_ARG-w64-windows-gnu \
   -DLLVM_PATH:PATH=$PWD/llvm \
   -DCMAKE_C_COMPILER:FILEPATH=$INSTALLPREFIX/share/llvm/bin/clang.exe \
   -DCMAKE_CXX_COMPILER:FILEPATH=$INSTALLPREFIX/share/llvm/bin/clang++.exe \
   -DCMAKE_RC_COMPILER:FILEPATH=$INSTALLPREFIX/share/llvm/bin/windres.exe \
   -DCMAKE_ASM_MASM_COMPILER:FILEPATH=$INSTALLPREFIX/share/llvm/bin/llvm-ml.exe \
   -DCMAKE_AR:FILEPATH=$INSTALLPREFIX/share/llvm/bin/llvm-ar.exe \
   -DCMAKE_RANLIB:FILEPATH=$INSTALLPREFIX/share/llvm/bin/llvm-ranlib.exe \
   -DCMAKE_EXE_LINKER_FLAGS:STRING="-L$INSTALLPREFIX/share/llvm/lib" \
   -DLIBCXXABI_ENABLE_EXCEPTIONS:BOOL=ON \
   -DLIBUNWIND_USE_COMPILER_RT:BOOL=ON \
   -DCOMPILER_RT_USE_BUILTINS_LIBRARY:BOOL=ON \
   -DPython3_EXECUTABLE:FILEPATH=$PYDIR/python.exe \
   -DCMAKE_CXX_FLAGS:STRING=" " \
   -Slibunwind -Bbuild_libunwind_$TARGET_ARG || rm -f SUCCESS
   #-DLIBUNWIND_TARGET_TRIPLE:STRING=$RUNPLATFORM \
   #-DLLVM_TARGETS_TO_BUILD:STRING="X86;ARM;AArch64" \
 done
 for TARGET_ARG in i686 x86_64 armv7 aarch64; do
  wl-showstatus build-install &&
  ninja -Cbuild_libunwind_$TARGET_ARG install/strip || rm -f SUCCESS
 done &&
    echo OK



mkdir -p build_flang &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
  -DBUILD_SHARED_LIBS:BOOL=ON \
  -DLLVM_PATH:PATH=$PWD/llvm \
  -DCLANG_DIR:PATH=$PWD/clang \
  -DClang_DIR:PATH=$PWD/build/lib/cmake/clang \
  -DLLVM_MAIN_SRC_DIR:PATH=$PWD/llvm \
  -DLLVM_USE_RELATIVE_PATHS_IN_DEBUG_INFO:BOOL=ON \
  -DLLVM_USE_RELATIVE_PATHS_IN_FILES:BOOL=ON \
  -DLLVM_ENABLE_LIBCXX=ON \
  -DCMAKE_C_COMPILER:FILEPATH=$INSTALLPREFIX/share/llvm/bin/clang.exe \
  -DCMAKE_CXX_COMPILER:FILEPATH=$INSTALLPREFIX/share/llvm/bin/clang++.exe \
  -DCMAKE_RC_COMPILER:FILEPATH=$INSTALLPREFIX/share/llvm/bin/windres.exe \
  -DCMAKE_ASM_MASM_COMPILER:FILEPATH=$INSTALLPREFIX/share/llvm/bin/llvm-ml.exe \
  -DCMAKE_AR:FILEPATH=$INSTALLPREFIX/share/llvm/bin/llvm-ar.exe \
  -DCMAKE_RANLIB:FILEPATH=$INSTALLPREFIX/share/llvm/bin/llvm-ranlib.exe \
  -DCMAKE_EXE_LINKER_FLAGS:STRING="-L$INSTALLPREFIX/share/llvm/lib" \
  -DFLANG_INCLUDE_TESTS:BOOL=OFF \
  -Sflang -Bbuild_flang &&
 wl-showstatus build-install &&
 ninja -Cbuild_flang install/strip &&
    echo OK



mkdir -p build_libcxx &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
  -DBUILD_SHARED_LIBS:BOOL=ON \
  -DLIBCXX_ENABLE_SHARED:BOOL=ON \
  -DLIBCXX_ENABLE_STATIC:BOOL=ON \
  -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM \
  -DLLVM_PATH:PATH=$PWD/llvm \
  -DLIBCXX_USE_COMPILER_RT:BOOL=ON \
  -DLIBCXX_HAS_WIN32_THREAD_API:BOOL=ON \
  -DLIBCXX_ENABLE_SHARED:BOOL=ON \
  -DLIBCXX_ENABLE_STATIC:BOOL=ON \
  -DLIBCXX_ENABLE_EXPERIMENTAL_LIBRARY:BOOL=OFF \
  -DLIBCXX_CXX_ABI=libcxxabi \
  -DLIBCXX_CXX_ABI_INCLUDE_PATHS=$PWD/libcxxabi/include \
  -DLIBCXX_CXX_ABI_LIBRARY_PATH:PATH=$PWD/build_libcxxabi/lib \
  -DLIBCXX_LIBDIR_SUFFIX="" \
  -DLIBCXX_INCLUDE_TESTS:BOOL=OFF \
  -DLIBCXX_ENABLE_ABI_LINKER_SCRIPT:BOOL=OFF \
  -DPython3_EXECUTABLE:FILEPATH=$PYDIR/python.exe -Slibcxx -Bbuild_libcxx &&
 #-DLIBCXX_BUILD_32_BITS:BOOL=OFF 
 wl-showstatus build-install &&
 ninja -Cbuild_libcxx install/strip &&
    echo OK

mkdir -p build_libcxxabi &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
  -DBUILD_SHARED_LIBS:BOOL=ON \
  -DLIBCXXABI_ENABLE_SHARED:BOOL=ON \
  -DLIBCXXABI_ENABLE_STATIC:BOOL=ON \
  -DLIBCXXABI_TARGET_TRIPLE:STRING=$RUNPLATFORM \
  -DLLVM_HOST_TRIPLE:STRING=$BUILDPLATFORM \
  -DLLVM_PATH:PATH=$PWD/llvm \
  -DLIBCXXABI_USE_COMPILER_RT:BOOL=ON \
  -DLIBCXXABI_LIBCXX_INCLUDES:PATH=$PWD/build_libcxx/include/c++/v1 \
  -DLIBCXXABI_LIBDIR_SUFFIX="" \
  -DLIBCXXABI_INCLUDE_TESTS:BOOL=OFF \
  -DPython3_EXECUTABLE:FILEPATH=$PYDIR/python.exe \
  -DCMAKE_CXX_FLAGS:STRING="-I$PWD/libcxx/include" -Slibcxxabi -Bbuild_libcxxabi &&
 #-DLIBCXXABI_BUILD_32_BITS:BOOL=OFF
 #-DLIBCXXABI_USE_LLVM_UNWINDER:BOOL=ON 
 #-DLLVM_PATH:PATH=$PWD
 wl-showstatus build-install &&
 ninja -Cbuild_libcxxabi install/strip &&
    echo OK

mkdir -p build_clang &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
  -DBUILD_SHARED_LIBS:BOOL=ON \
  -DLIBUNWIND_ENABLE_SHARED:BOOL=ON \
  -DLIBUNWIND_ENABLE_STATIC:BOOL=ON \
  -DLIBUNWIND_TARGET_TRIPLE:STRING=$RUNPLATFORM \
  -DLLVM_PATH:PATH=$PWD/llvm \
  -DCLANG_ENABLE_PROTO_FUZZER:BOOL=ON \
  -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON \
  -DCLANG_DEFAULT_UNWINDLIB:STRING=libunwind \
  -DCLANG_INCLUDE_DOCS:BOOL=OFF \
  -DCLANG_BUILD_EXAMPLES:BOOL=OFF \
  -DPython3_EXECUTABLE:FILEPATH=$PYDIR/python.exe -Sclang -Bbuild_clang &&
 #-DLLVM_TOOL_CLANG_TOOLS_EXTRA_BUILD:BOOL=ON 
 #// Native TableGen executable. Saves building one when cross-compiling.
 #-DCLANG_TABLEGEN:STRING=clang-tblgen 
 #-DLIBCLANG_BUILD_STATIC:BOOL=ON 
 #-DLLVM_ENABLE_LTO:STRING=OFF 
 #-DLLVM_ENABLE_LTO:STRING=Thin 
 #-DLLVM_ENABLE_LTO:STRING=Full 
 #-DLLVM_USE_RELATIVE_PATHS_IN_FILES:BOOL=ON \
 #-DLLVM_USE_RELATIVE_PATHS_IN_DEBUG_INFO:BOOL=ON 
 wl-showstatus build-install &&
 ninja -Cbuild_clang install/strip &&
    echo OK

mkdir -p build_lldb &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
  -DBUILD_SHARED_LIBS:BOOL=ON \
  -DLLVM_PATH:PATH=$PWD/llvm \
  -DPython3_EXECUTABLE:FILEPATH=$PYDIR/python.exe -Slldb -Bbuild_lldb &&
 wl-showstatus build-install &&
 ninja -Cbuild_lldb install/strip &&
    echo OK




mkdir -p build_runtimes &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja \
  -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
  -DBUILD_SHARED_LIBS:BOOL=ON \
  -DLLVM_ENABLE_RUNTIMES:STRING="libc;libcxx;libcxxabi" \
  -DLLVM_ENABLE_LTO:STRING=OFF \
  -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) \
  -DLLVM_ENABLE_RTTI:BOOL=ON \
  -DLLVM_SOURCE_PREFIX:STRING=$PWD \
  -DLLVM_DIR:PATH=$INSTALLPREFIX/share/llvm \
  -DClang_DIR:PATH=$INSTALLPREFIX/share/llvm \
  -DPython3_EXECUTABLE:PATH=$MINGWPREFIX/share/python/bin/python3.exe \
  -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF -Sruntimes -Bbuild_runtimes &&
 #-DLLVM_ENABLE_RUNTIMES:STRING="compiler-rt;libc;libcxx;libcxxabi;libunwind;openmp" 
 #-DLLVM_LIBC_INCLUDE_SCUDO:BOOL=ON 
 wl-showstatus build-install &&
 ninja -Cbuild_runtimes install/strip &&
    echo OK

mkdir -p build_libc &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
  -DBUILD_SHARED_LIBS:BOOL=ON \
  -DLLVM_LIBC_MPFR_INSTALL_PATH:PATH=$MINGWPREFIX -Slibc -Bbuild_libc &&
 #-DLLVM_LIBC_INCLUDE_SCUDO:BOOL=ON 
 wl-showstatus build-install &&
 ninja -Cbuild_libc install/strip &&
    echo OK

#cmake.exe -GNinja -Scompiler-rt -DLLVM_BINARY_DIR:PATH=$INSTALLPREFIX/share/llvm/bin -Bbuild_test -LH && echo OK; rm -rf build_test

#cmake.exe -GNinja -Sllvm -DPython3_EXECUTABLE:FILEPATH=$PYDIR/python.exe -Bbuild_test -LH && echo OK; rm -rf build_test


mkdir -p build_test && cmake.exe -GNinja -Scompiler-rt -DPython3_EXECUTABLE:FILEPATH=$PYDIR/python.exe -Bbuild_test -LH && echo OK; rm -rf build_test
-DLLVM_CONFIG_PATH

mkdir -p build_test && cmake.exe -GNinja -S. -Bbuild_test -LH && echo OK; rm -rf build_test




#mkdir -p build_stage &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$PWD/stage1 -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
#  -DLLVM_ENABLE_PROJECTS:STRING="clang;libcxx;libcxxabi;lld" \
#  -DLLVM_TARGETS_TO_BUILD:STRING="Native" \
#  -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON \
#  -DLLVM_ENABLE_ASSERTIONS:BOOL=ON \
#  -DLLVM_INCLUDE_DOCS:BOOL=OFF \
#  -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF \
#  -DLLVM_INCLUDE_BENCHMARKS:BOOL=OFF \
#  -DLLVM_INCLUDE_TESTS:BOOL=OFF \
#  -Sllvm -Bbuild_stage &&
#  #-DLLVM_TARGETS_TO_BUILD:STRING="host" \
# ninja -Cbuild_stage CONFIGURE_LLVM_NATIVE &&
# wl-showstatus build-install &&
# ninja -Cbuild_stage/NATIVE install/strip &&
#    echo OK
#####CMake Error at cmake_install.cmake:41 (file): file INSTALL cannot make directory "C:/Program Files (x86)/LLVM/include/llvm": No such file or directory.



#  -DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;libclc;lld;lldb;polly;mlir;pstl;parallel-libs" \
#  -DLLVM_ENABLE_RUNTIMES:STRING="compiler-rt;libcxx;libcxxabi" \
mkdir -p build_stage &&
 PATH=$MINGWPREFIX/share/python/bin:$PATH cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$PWD/stage1 -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
  -DCLANG_ENABLE_BOOTSTRAP:BOOL=ON \
  -DCLANG_BOOTSTRAP_PASSTHROUGH="CMAKE_INSTALL_PREFIX;CMAKE_BUILD_TYPE" \
  -DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;lld" \
  -DLLVM_ENABLE_RUNTIMES:STRING="compiler-rt;libcxx;libcxxabi" \
  -DLLVM_TARGETS_TO_BUILD:STRING="X86" \
  -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON \
  -DLLVM_ENABLE_ASSERTIONS:BOOL=ON \
  -DLLVM_INCLUDE_DOCS:BOOL=OFF \
  -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF \
  -DLLVM_INCLUDE_BENCHMARKS:BOOL=OFF \
  -DLLVM_INCLUDE_TESTS:BOOL=OFF \
  -DBOOTSTRAP_LLVM_OPTIMIZED_TABLEGEN:BOOL=ON \
  -DBOOTSTRAP_LLVM_ENABLE_ASSERTIONS:BOOL=OFF \
  -DBOOTSTRAP_LLVM_INCLUDE_DOCS:BOOL=OFF \
  -DBOOTSTRAP_LLVM_INCLUDE_EXAMPLES:BOOL=OFF \
  -DBOOTSTRAP_LLVM_INCLUDE_BENCHMARKS:BOOL=OFF \
  -DBOOTSTRAP_LLVM_INCLUDE_TESTS:BOOL=OFF \
  -DBOOTSTRAP_CLANG_DEFAULT_CXX_STDLIB=libc++ \
  -DBOOTSTRAP_CLANG_DEFAULT_RTLIB=compiler-rt \
  -DBOOTSTRAP_LIBCXX_USE_COMPILER_RT:BOOL=ON \
  -DBOOTSTRAP_LIBCXXABI_USE_COMPILER_RT:BOOL=ON \
  -DBOOTSTRAP_LIBCXXABI_USE_LLVM_UNWINDER:BOOL=ON \
  -DBOOTSTRAP_LIBUNWIND_USE_COMPILER_RT:BOOL=ON \
  -DBOOTSTRAP_LLVM_USE_LINKER=lld \
  -DBOOTSTRAP_CMAKE_C_FLAGS:STRING="-I$MINGWDIR/$RUNPLATFORM/include" \
  -DBOOTSTRAP_CMAKE_CXX_FLAGS:STRING="-I$MINGWDIR/$RUNPLATFORM/include" \
  -DCMAKE_C_FLAGS:STRING="-I$MINGWDIR/$RUNPLATFORM/include" \
  -DCMAKE_CXX_FLAGS:STRING="-I$MINGWDIR/$RUNPLATFORM/include" \
  -DPython3_EXECUTABLE:FILEPATH=$MINGWPREFIX/share/python/bin/python.exe \
  -DBOOTSTRAP_Python3_EXECUTABLE:FILEPATH=$MINGWPREFIX/share/python/bin/python.exe \
  -Sllvm -Bbuild_stage &&
  #-DLLVM_TARGETS_TO_BUILD:STRING="host" \
 wl-showstatus build-install &&
 ninja -Cbuild_stage install/strip &&
    echo OK
####CMake Error at cmake_install.cmake:41 (file): file INSTALL cannot make directory "C:/Program Files (x86)/LLVM/include/llvm": No such file or directory.



####See also: https://llvm.org/docs/AdvancedBuilds.html
####See also: https://llvm.org/docs/BuildingADistribution.html
mkdir -p build_stage &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$PWD/stage1 -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
  -DCLANG_ENABLE_BOOTSTRAP:BOOL=ON \
  -DCLANG_BOOTSTRAP_PASSTHROUGH="CMAKE_INSTALL_PREFIX;CMAKE_BUILD_TYPE" \
  -DWITH_LLD_BOOTSTRAP:BOOL=ON \
  -DLLVM_ENABLE_PROJECTS:STRING="clang;lld" \
  -DLLVM_ENABLE_RUNTIMES:STRING="libcxx;libcxxabi" \
  -DLLVM_TARGETS_TO_BUILD:STRING="X86" \
  -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON \
  -DLLVM_ENABLE_ASSERTIONS:BOOL=ON \
  -DLLVM_INCLUDE_DOCS:BOOL=OFF \
  -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF \
  -DLLVM_INCLUDE_BENCHMARKS:BOOL=OFF \
  -DLLVM_INCLUDE_TESTS:BOOL=OFF \
  -DBOOTSTRAP_LLVM_OPTIMIZED_TABLEGEN:BOOL=ON \
  -DBOOTSTRAP_LLVM_ENABLE_ASSERTIONS:BOOL=OFF \
  -DBOOTSTRAP_LLVM_INCLUDE_DOCS:BOOL=OFF \
  -DBOOTSTRAP_LLVM_INCLUDE_EXAMPLES:BOOL=OFF \
  -DBOOTSTRAP_LLVM_INCLUDE_BENCHMARKS:BOOL=OFF \
  -DBOOTSTRAP_LLVM_INCLUDE_TESTS:BOOL=OFF \
  -DBOOTSTRAP_LLVM_USE_LINKER=$PWD/build_stage/bin/lld.exe \
  -DBOOTSTRAP_CMAKE_LINKER=$PWD/build_stage/bin/lld.exe \
  -DBOOTSTRAP_CLANG_DEFAULT_CXX_STDLIB=libc++ \
  -DBOOTSTRAP_LIBCXXABI_LIBCXX_INCLUDES:PATH=$PWD/build_libcxx/include/c++/v1 \
  -DBOOTSTRAP_LIBCXX_HAS_WIN32_THREAD_API:BOOL=ON \
  -DBOOTSTRAP_LIBCXX_HAS_PTHREAD_API:BOOL=OFF \
  -DBOOTSTRAP_Python3_EXECUTABLE:FILEPATH=$MINGWPREFIX/share/python/bin/python.exe \
  -DLIBCXX_HAS_WIN32_THREAD_API:BOOL=ON \
  -DLIBCXX_HAS_PTHREAD_API:BOOL=OFF \
  -DPython3_EXECUTABLE:FILEPATH=$MINGWPREFIX/share/python/bin/python.exe \
  -DNATIVE_Python3_EXECUTABLE:FILEPATH=$MINGWPREFIX/share/python/bin/python.exe \
  -Sllvm -Bbuild_stage &&
  #-DLLVM_TARGETS_TO_BUILD:STRING="host" \
 wl-showstatus build-install &&
 ninja -Cbuild_stage install/strip &&
    echo OK



#cd $MINGWDIR/bin
#ln -sf clang.exe gcc.exe
#ln -sf clang++.exe g++.exe












# WORKING
mkdir -p build_stage &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$PWD/stage1 -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
  -DBUILD_SHARED_LIBS:BOOL=OFF \
  -DLLVM_BUILD_LLVM_DYLIB:BOOL=OFF \
  -DLLVM_DYLIB_COMPONENTS:STRING="Native" \
  -DLLVM_TARGETS_TO_BUILD:STRING="host" \
  -DLLVM_ENABLE_PROJECTS:STRING="clang;lld" \
  -DLLVM_ENABLE_RUNTIMES:STRING="" \
  -DLLVM_BUILD_TOOLS:BOOL=ON \
  -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON \
  -DLLVM_ENABLE_ASSERTIONS:BOOL=ON \
  -DLLVM_INCLUDE_DOCS:BOOL=OFF \
  -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF \
  -DLLVM_INCLUDE_BENCHMARKS:BOOL=OFF \
  -DLLVM_INCLUDE_TESTS:BOOL=OFF \
  -DLLD_DEFAULT_LD_LLD_IS_MINGW:BOOL=ON \
  -Sllvm -Bbuild_stage &&
  #-DLLVM_ENABLE_RUNTIMES:STRING="libcxx;libcxxabi" \
  #-DLIBCXX_HAS_WIN32_THREAD_API:BOOL=ON \
  #-DLIBCXX_HAS_PTHREAD_API:BOOL=OFF \
 wl-showstatus build &&
 ninja -Cbuild_stage all llvm-config &&
 wl-showstatus build-install &&
 ninja -Cbuild_stage install/strip &&
 cp -u build_stage/bin/llvm-config.exe stage1/bin/ &&
 cp -u build_stage/NATIVE/bin/llvm-tblgen.exe stage1/bin/ &&
 cp -u build_stage/NATIVE/bin/clang-tblgen.exe stage1/bin/ &&
    echo OK

# WORKING
mkdir -p build_compiler-rt &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$PWD/stage1 -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
  -DBUILD_SHARED_LIBS:BOOL=ON \
  -DLLVM_TARGETS_TO_BUILD:STRING="X86" \
  -DCOMPILER_RT_DEFAULT_TARGET_TRIPLE:STRING=$RUNPLATFORM \
  -DLLVM_MAIN_SRC_DIR:PATH=$PWD/llvm \
  -DLLVM_CONFIG_PATH:PATH=$PWD/stage1/bin/llvm-config.exe \
  -DCOMPILER_RT_BUILD_SANITIZERS:BOOL=OFF \
  -DCOMPILER_RT_DEFAULT_TARGET_ONLY=OFF \
  -DCOMPILER_RT_USE_BUILTINS_LIBRARY=OFF \
  -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF \
  -DCOMPILER_RT_CAN_EXECUTE_TESTS:BOOL=OFF \
  -DCMAKE_ASM_COMPILER_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
  -DCMAKE_ASM_COMPILER_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
  -DCMAKE_C_COMPILER:FILEPATH=$PWD/stage1/bin/clang.exe \
  -DCMAKE_C_COMPILER_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
  -DCMAKE_C_COMPILER_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
  -DCMAKE_CXX_COMPILER:FILEPATH=$PWD/stage1/bin/clang++.exe \
  -DCMAKE_CXX_COMPILER_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
  -DCMAKE_CXX_COMPILER_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
  -DCMAKE_RC_COMPILER:FILEPATH=$PWD/stage1/bin/llvm-windres.exe \
  -DCMAKE_LINKER:FILEPATH=$PWD/stage1/bin/ld.lld.exe \
  -DGOLD_EXECUTABLE:FILEPATH=$PWD/stage1/bin/ld.lld.exe \
  -DCMAKE_CXX_FLAGS:STRING=" " \
  -DPython3_EXECUTABLE:FILEPATH=$PYDIR/python.exe -Scompiler-rt -Bbuild_compiler-rt &&
 #-DCMAKE_ASM_MASM_COMPILER:FILEPATH=$PWD/stage1/bin/llvm-ml.exe \
 #-DSANITIZER_CXX_ABI=libc++ \
 wl-showstatus build-install &&
 ninja -Cbuild_compiler-rt install/strip &&
    echo OK

#### Works with -DLIBCXX_ENABLE_SHARED:BOOL=OFF
mkdir -p build_libcxx &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$PWD/stage1 -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
  -DLIBCXX_ENABLE_SHARED:BOOL=ON \
  -DLIBCXX_ENABLE_STATIC:BOOL=ON \
  -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM \
  -DLLVM_PATH:PATH=$PWD/llvm \
  -DLIBCXX_USE_COMPILER_RT:BOOL=ON \
  -DLIBCXX_HAS_WIN32_THREAD_API:BOOL=ON \
  -DLIBCXX_HAS_PTHREAD_API:BOOL=OFF \
  -DLIBCXX_ENABLE_EXPERIMENTAL_LIBRARY:BOOL=OFF \
  -DLIBCXX_LIBDIR_SUFFIX="" \
  -DLIBCXX_INCLUDE_TESTS:BOOL=OFF \
  -DLIBCXX_ENABLE_ABI_LINKER_SCRIPT:BOOL=OFF \
  -DLIBCXX_CXX_ABI:STRING=libcxxabi \
  -DLIBCXX_CXX_ABI_INCLUDE_PATHS="$PWD/libcxxabi/include" \
  -DLIBCXX_CXX_ABI_LIBRARY_PATH:PATH=$PWD/stage1/lib \
  -DLIBCXX_ENABLE_STATIC_ABI_LIBRARY:BOOL=ON \
  -DCMAKE_C_COMPILER:FILEPATH=$PWD/stage1/bin/clang.exe \
  -DCMAKE_C_COMPILER_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
  -DCMAKE_C_COMPILER_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
  -DCMAKE_CXX_COMPILER:FILEPATH=$PWD/stage1/bin/clang++.exe \
  -DCMAKE_CXX_COMPILER_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
  -DCMAKE_CXX_COMPILER_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
  -DCMAKE_RC_COMPILER:FILEPATH=$PWD/stage1/bin/llvm-windres.exe \
  -DCMAKE_LINKER:FILEPATH=$PWD/stage1/bin/ld.lld.exe \
  -DLIBCXX_INCLUDE_DOCS:BOOL=OFF \
  -DLIBCXX_INCLUDE_TESTS:BOOL=OFF \
  -DLIBCXX_INCLUDE_BENCHMARKS:BOOL=OFF \
  -DPython3_EXECUTABLE:FILEPATH=$PYDIR/python.exe -Slibcxx -Bbuild_libcxx &&
 #-DBUILD_SHARED_LIBS:BOOL=OFF \
 #-DLIBCXX_CXX_ABI=libcxxabi \
 #-DLIBCXX_CXX_ABI_INCLUDE_PATHS=$PWD/libcxxabi/include \
 #-DLIBCXX_CXX_ABI_LIBRARY_PATH:PATH=$PWD/build_libcxxabi/lib \
 #-DLIBCXX_ABI_FORCE_MICROSOFT:BOOL=OFF \
 #-DCMAKE_ASM_COMPILER:FILEPATH=$(which yasm.exe) \
 #-DCMAKE_ASM_COMPILER_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
 #-DCMAKE_ASM_COMPILER_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
 #-DGOLD_EXECUTABLE:FILEPATH=$PWD/stage1/bin/ld.lld.exe \
 wl-showstatus build-install &&
 ninja -Cbuild_libcxx install-cxx-headers &&
 ninja -Cbuild_libcxx install/strip &&
    echo OK

#### Works with -DLIBCXXABI_ENABLE_SHARED:BOOL=OFF
mkdir -p build_libcxxabi &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$PWD/stage1 -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
  -DLIBCXXABI_ENABLE_SHARED:BOOL=ON \
  -DLIBCXXABI_ENABLE_STATIC:BOOL=ON \
  -DLIBCXXABI_TARGET_TRIPLE:STRING=$RUNPLATFORM \
  -DLLVM_HOST_TRIPLE:STRING=$BUILDPLATFORM \
  -DLLVM_PATH:PATH=$PWD/llvm \
  -DLIBCXXABI_USE_COMPILER_RT:BOOL=ON \
  -DLIBCXXABI_LIBCXX_INCLUDES:PATH=$PWD/stage1/include/c++/v1 \
  -DLIBCXXABI_LIBCXX_LIBRARY_PATH:PATH=$PWD/stage1/lib \
  -DLIBCXXABI_LIBDIR_SUFFIX="" \
  -DLIBCXXABI_INCLUDE_TESTS:BOOL=OFF \
  -DCMAKE_C_COMPILER:FILEPATH=$PWD/stage1/bin/clang.exe \
  -DCMAKE_C_COMPILER_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
  -DCMAKE_C_COMPILER_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
  -DCMAKE_CXX_COMPILER:FILEPATH=$PWD/stage1/bin/clang++.exe \
  -DCMAKE_CXX_COMPILER_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
  -DCMAKE_CXX_COMPILER_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
  -DCMAKE_LINKER:FILEPATH=$PWD/stage1/bin/ld.lld.exe \
  -DPython3_EXECUTABLE:FILEPATH=$PYDIR/python.exe \
  -Slibcxxabi -Bbuild_libcxxabi &&
 #-DBUILD_SHARED_LIBS:BOOL=OFF \
 #-DCMAKE_CXX_FLAGS:STRING="-I$PWD/libcxx/include" \
 #-DLIBCXXABI_BUILD_32_BITS:BOOL=OFF
 #-DLIBCXXABI_USE_LLVM_UNWINDER:BOOL=ON 
 #-DLLVM_PATH:PATH=$PWD
 wl-showstatus build-install &&
 ninja -Cbuild_libcxxabi install/strip &&
    echo OK




mkdir -p build &&
 # build main LLVM suite
 wl-showstatus configure &&
 #libunwind;openmp;parallel-libs;polly;pstl;flang
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
  -DBUILD_SHARED_LIBS:BOOL=OFF \
  -DLLVM_BUILD_LLVM_DYLIB:BOOL=OFF \
  -DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;libclc;lld;lldb;polly;mlir;pstl;parallel-libs" \
  -DLLVM_ENABLE_RUNTIMES:STRING="compiler-rt;libcxx;libcxxabi" \
  -DLLVM_TARGETS_TO_BUILD:STRING="X86;NVPTX;AMDGPU;ARM;AArch64;WebAssembly" \
  -DLLVM_HOST_TRIPLE:STRING=$(echo $BUILDPLATFORM|sed -e "s/-.*$//")-w64-mingw32 \
  -DLLVM_BUILD_STATIC=OFF \
  -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF \
  -DLLVM_CCACHE_BUILD:BOOL=OFF \
  -DLLVM_ENABLE_MODULES:BOOL=OFF \
  -DLLVM_ENABLE_PLUGINS:BOOL=ON \
  -DLLVM_ENABLE_THREADS:BOOL=ON \
  -DLLVM_ENABLE_UNWIND_TABLES:BOOL=ON \
  -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF \
  -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON \
  -DLLVM_ENABLE_LTO:STRING=OFF \
  -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) \
  -DLLVM_ENABLE_RTTI:BOOL=ON \
  -DLLVM_ENABLE_TERMINFO:BOOL=OFF \
  -DLLVM_ENABLE_Z3_SOLVER:BOOL=ON \
  -DLLVM_Z3_INSTALL_DIR:STRING=$MINGWPREFIX \
  -DLLVM_ENABLE_FFI:BOOL=ON \
  -DLLVM_ENABLE_FFI:BOOL=ON \
  -DFFI_INCLUDE_DIR:PATH=$MINGWPREFIX/include \
  -DLLVM_ENABLE_LIBXML2:BOOL=ON \
  -DLLVM_ENABLE_PIC:BOOL=OFF \
  -DLLVM_USE_RELATIVE_PATHS_IN_DEBUG_INFO:BOOL=ON \
  -DLLVM_USE_RELATIVE_PATHS_IN_FILES:BOOL=ON \
  -DLLVM_INSTALL_BINUTILS_SYMLINKS:BOOL=ON \
  -DLLVM_INSTALL_CCTOOLS_SYMLINKS:BOOL=ON \
  -DLLVM_ENABLE_DOXYGEN:BOOL=OFF -DDOXYGEN_DOT_EXECUTABLE:FILEPATH= -DDOXYGEN_EXECUTABLE:FILEPATH= \
  -DLLVM_ENABLE_SPHINX=OFF \
  -DLLVM_INCLUDE_DOCS:BOOL=OFF \
  -DLLVM_BUILD_EXAMPLES:BOOL=OFF \
  -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF \
  -DLLVM_INCLUDE_BENCHMARKS:BOOL=OFF \
  -DLLVM_INCLUDE_TESTS:BOOL=OFF \
  -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF \
  -DLLVM_TABLEGEN:STRING=$PWD/stage1/bin/llvm-tblgen.exe \
  -DCLANG_TABLEGEN:STRING=$PWD/stage1/bin/clang-tblgen.exe \
  -DLLVM_CONFIG:STRING=$PWD/stage1/bin/llvm-config.exe \
  \
  -DCOMPILER_RT_DEFAULT_TARGET_ONLY=OFF \
  -DCOMPILER_RT_USE_BUILTINS_LIBRARY=OFF \
  -DSANITIZER_CXX_ABI=libc++ \
  -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF \
  \
  -DLIBCXX_ENABLE_SHARED:BOOL=Off \
  -DLIBCXX_ENABLE_STATIC:BOOL=ON \
  -DLIBCXX_USE_COMPILER_RT:BOOL=ON \
  -DLIBCXX_HAS_WIN32_THREAD_API:BOOL=ON \
  -DLIBCXX_HAS_PTHREAD_API:BOOL=OFF \
  -DLLD_DEFAULT_LD_LLD_IS_MINGW:BOOL=ON \
  -DLIBCXX_ENABLE_EXPERIMENTAL_LIBRARY:BOOL=OFF \
  -DLIBCXX_CXX_ABI=libcxxabi \
  -DLIBCXX_CXX_ABI_INCLUDE_PATHS=$PWD/libcxxabi/include \
  -DLIBCXX_CXX_ABI_LIBRARY_PATH:PATH=$PWD/build_libcxxabi/lib \
  -DLIBCXX_LIBDIR_SUFFIX="" \
  -DLIBCXX_INCLUDE_TESTS:BOOL=OFF \
  -DLIBCXX_ENABLE_ABI_LINKER_SCRIPT:BOOL=OFF \
  \
  -DLIBCXXABI_ENABLE_SHARED:BOOL=Off \
  -DLIBCXXABI_ENABLE_STATIC:BOOL=ON \
  -DLIBCXXABI_USE_COMPILER_RT:BOOL=ON \
  -DLIBCXXABI_LIBCXX_INCLUDES:PATH=$PWD/build_libcxx/include/c++/v1 \
  -DLIBCXXABI_LIBDIR_SUFFIX="" \
  -DLIBCXXABI_ENABLE_EXCEPTIONS:BOOL=ON \
  -DLIBCXXABI_ENABLE_ASSERTIONS:BOOL=OFF \
  \
  -DLIBUNWIND_ENABLE_SHARED:BOOL=Off \
  -DLIBUNWIND_ENABLE_STATIC:BOOL=ON \
  -DLIBUNWIND_USE_COMPILER_RT:BOOL=ON \
  \
  -DLIBCLANG_BUILD_STATIC:BOOL=OFF \
  -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF \
  -DCLANG_PLUGIN_SUPPORT:BOOL=ON \
  -DCLANG_ENABLE_CLANGD:BOOL=ON \
  -DCLANG_DEFAULT_CXX_STDLIB:STRING=libc++ \
  -DCLANG_DEFAULT_RTLIB:STRING=compiler-rt \
  -DCLANG_DEFAULT_UNWINDLIB:STRING=none \
  -DCLANG_DEFAULT_OPENMP_RUNTIME:STRING=libomp \
  -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF \
  -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON \
  -DCLANG_TOOL_APINOTES_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_ARCMT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_C_ARCMT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_C_INDEX_TEST_BUILD:BOOL=OFF \
  -DCLANG_INCLUDE_DOCS:BOOL=OFF \
  -DCLANG_BUILD_EXAMPLES:BOOL=OFF \
  -DCLANG_INCLUDE_TESTS:BOOL=OFF \
  \
  -DLLDB_TOOL_LLDB_SERVER_BUILD:BOOL=ON \
  -DLLDB_TOOL_LLDB_VSCODE_BUILD:BOOL=ON \
  -DLLDB_ENABLE_LIBEDIT:BOOL=OFF \
  -DLLDB_ENABLE_CURSES:BOOL=ON \
  -DLLDB_ENABLE_LIBXML2:BOOL=ON \
  -DLLDB_ENABLE_LZMA:BOOL=ON \
  -DLLDB_ENABLE_PYTHON:BOOL=ON \
  \
  -DCMAKE_ASM_COMPILER:FILEPATH=$(which yasm.exe) \
  -DCMAKE_ASM_COMPILER_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
  -DCMAKE_ASM_COMPILER_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
  -DCMAKE_C_COMPILER:FILEPATH=$PWD/stage1/bin/clang.exe \
  -DCMAKE_C_COMPILER_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
  -DCMAKE_C_COMPILER_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
  -DCMAKE_CXX_COMPILER:FILEPATH=$PWD/stage1/bin/clang++.exe \
  -DCMAKE_CXX_COMPILER_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
  -DCMAKE_CXX_COMPILER_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
  -DCMAKE_RC_COMPILER:FILEPATH=$PWD/stage1/bin/llvm-windres.exe \
  -DCMAKE_LINKER:FILEPATH=$PWD/stage1/bin/ld.lld.exe \
  -DGOLD_EXECUTABLE:FILEPATH=$PWD/stage1/bin/ld.lld.exe \
  \
  -DCLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
  -DLLD_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
  -DFLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
  \
  -DCMAKE_CXX_FLAGS:STRING=" " \
  \
  -DPython3_FIND_REGISTRY:BOOL=NEVER \
  -DPython3_EXECUTABLE:FILEPATH=$MINGWPREFIX/share/python/bin/python.exe \
  -Sllvm -Bbuild &&
 #-DCMAKE_CXX_FLAGS:STRING="-stdlib=libc++ -I$(cygpath -m $PWD/libcxx/include)" \
 #-DCMAKE_EXE_LINKER_FLAGS:STRING="-stdlib=libc++" \
 #-DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;lld;lldb;libclc;pstl" \
 #-DLLVM_ENABLE_RUNTIMES:STRING="compiler-rt;libc;libcxx;libcxxabi;libunwind;openmp" \
 #-DCOMPILER_RT_USE_BUILTINS_LIBRARY:BOOL=ON 
 #-DLLVM_HOST_TRIPLE:STRING=$BUILDPLATFORM -DCOMPILER_RT_DEFAULT_TARGET_TRIPLE:STRING=$RUNPLATFORM -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLIBCXXABI_TARGET_TRIPLE:STRING=$RUNPLATFORM -DLIBUNWIND_TARGET_TRIPLE:STRING=$RUNPLATFORM 
 #-DCLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
 #-DLLD_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
 #-DFLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
 #-DCMAKE_C_FLAGS:STRING="-D_FORTIFY_SOURCE=0 -D__SSP_FORTIFY_LEVEL=0" \
 #-DCMAKE_CXX_FLAGS:STRING="-D_FORTIFY_SOURCE=0 -D__SSP_FORTIFY_LEVEL=0" \
 #-LLVM_BUILD_32_BITS:BOOL=ON \
 #-DLLVM_INSTALL_BINUTILS_SYMLINKS:BOOL=ON \
 #-DLLVM_INSTALL_CCTOOLS_SYMLINKS:BOOL=ON \
 #  + share/llvm/bin/addr2line.exe
 #  + share/llvm/bin/ar.exe
 #  + share/llvm/bin/bitcode_strip.exe
 #  + share/llvm/bin/c++filt.exe
 #  + share/llvm/bin/dlltool.exe
 #  + share/llvm/bin/dwp.exe
 #  + share/llvm/bin/install_name_tool.exe
 #  + share/llvm/bin/libtool.exe
 #  + share/llvm/bin/lipo.exe
 #  + share/llvm/bin/nm.exe
 #  + share/llvm/bin/objcopy.exe
 #  + share/llvm/bin/objdump.exe
 #  + share/llvm/bin/ranlib.exe
 #  + share/llvm/bin/readelf.exe
 #  + share/llvm/bin/size.exe
 #  + share/llvm/bin/strings.exe
 #  + share/llvm/bin/strip.exe
 #  + share/llvm/bin/windres.exe
 #-DCLANG_DEFAULT_UNWINDLIB:STRING=libcxx \
 #-DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF \
 #-DBUILD_SHARED_LIBS:BOOL=OFF #see also: https://llvm.org/docs/BuildingADistribution.html

 #-DCMAKE_C_COMPILER:FILEPATH=$(PATH=$MINGWPREFIX/share/llvm/bin:$PATH which clang.exe) \
 #-DCMAKE_CXX_COMPILER:FILEPATH=$(PATH=$MINGWPREFIX/share/llvm/bin:$PATH which clang++.exe) \
 #-DCMAKE_RC_COMPILER:FILEPATH=$(PATH=$MINGWPREFIX/share/llvm/bin:$PATH which windres.exe) \
 #-DCMAKE_ASM_MASM_COMPILER:FILEPATH=$(PATH=$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ml.exe) \
 #-DCMAKE_AR:FILEPATH=$(PATH=$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ar.exe) \
 #-DCMAKE_RANLIB:FILEPATH=$(PATH=$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ranlib.exe) \
 #-DCMAKE_EXE_LINKER_FLAGS:STRING="-L$MINGWPREFIX/share/llvm/lib" \
 #-DCMAKE_CXX_FLAGS:STRING="-I$MINGWPREFIX/share/llvm/include/c++/v1" \

 #-DCMAKE_ASM_COMPILER:STRING=yasm.exe \
 #-DCMAKE_ASM_MASM_COMPILER:STRING="jwasm.exe $(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "-win64"; else echo "-coff"; fi)" \
 #$(if which clang.exe &> /dev/null; then echo "-DCMAKE_C_COMPILER:FILEPATH=$(which clang.exe)"; fi) \
 #$(if which clang++.exe &> /dev/null; then echo "-DCMAKE_CXX_COMPILER:FILEPATH=$(which clang++.exe)"; fi) \
 #$(if which llvm-ranlib.exe &> /dev/null; then echo "-DCMAKE_C_COMPILER_RANLIB:FILEPATH=$(which llvm-ranlib.exe) -DCMAKE_CXX_COMPILER_RANLIB:FILEPATH=$(which llvm-ranlib.exe)"; fi) \
 #$(if which llvm-ar.exe &> /dev/null; then echo "-DCMAKE_C_COMPILER_AR:FILEPATH=$(which llvm-ar.exe) -DCMAKE_CXX_COMPILER_AR:FILEPATH=$(which llvm-ar.exe)"; fi) \
 #-DLLVM_TABLEGEN:STRING=$(which llvm-tblgen.exe 2> /dev/null) \
 ## don't use -fno-lto flag with yasm
 #sed -i.bak -e "s/\(yasm\.exe .*\) -fno-lto/\1/" build/compile_commands.json &&
 #sed -i.bak -e "s/-fno-lto//" build/build.ninja build/compile_commands.json
 ## fix missing -lgcc/-lgcc_s
 #sed -i.bak -e "s/-lgcc_s\|-lgcc//g" build/build.ninja &&
 # fix missing link libraries
 ##sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -lpthread/" build/build.ninja &&
 #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -lpthread -Wl,--image-base -Wl,0x10000000/" build/build.ninja &&
 #sed -i.bak -e "s?^\s*LINK_LIBRARIES\s*=.*?& -lwinpthread -L$(cygpath -m $PWD/stage1/lib) -lLLVMRuntimeDyld -Wl,--image-base -Wl,0x10000000?" build/build.ninja &&
 wl-showstatus build-install &&
 ninja -Cbuild install/strip &&
    echo OK





mkdir -p build_stage2 &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$PWD/stage2 -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
  -DBUILD_SHARED_LIBS:BOOL=ON \
  -DLLVM_BUILD_LLVM_DYLIB:BOOL=ON \
  -DLLVM_DYLIB_COMPONENTS:STRING="Native" \
  -DLLVM_TARGETS_TO_BUILD:STRING="host" \
  -DLLVM_ENABLE_PROJECTS:STRING="clang;lld" \
  -DLLVM_ENABLE_RUNTIMES:STRING="" \
  -DLLVM_BUILD_TOOLS:BOOL=ON \
  -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON \
  -DLLVM_ENABLE_ASSERTIONS:BOOL=ON \
  -DLLVM_INCLUDE_DOCS:BOOL=OFF \
  -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF \
  -DLLVM_INCLUDE_BENCHMARKS:BOOL=OFF \
  -DLLVM_INCLUDE_TESTS:BOOL=OFF \
  -DLLD_DEFAULT_LD_LLD_IS_MINGW:BOOL=ON \
  -DLLVM_TABLEGEN:STRING=$PWD/stage1/bin/llvm-tblgen.exe \
  -DCLANG_TABLEGEN:STRING=$PWD/stage1/bin/clang-tblgen.exe \
  -DLLVM_CONFIG:STRING=$PWD/stage1/bin/llvm-config.exe \
  -DCMAKE_ASM_COMPILER_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
  -DCMAKE_ASM_COMPILER_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
  -DCMAKE_C_COMPILER:FILEPATH=$PWD/stage1/bin/clang.exe \
  -DCMAKE_C_COMPILER_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
  -DCMAKE_C_COMPILER_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
  -DCMAKE_CXX_COMPILER:FILEPATH=$PWD/stage1/bin/clang++.exe \
  -DCMAKE_CXX_COMPILER_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
  -DCMAKE_CXX_COMPILER_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
  -DCMAKE_RC_COMPILER:FILEPATH=$PWD/stage1/bin/llvm-windres.exe \
  -DCMAKE_LINKER:FILEPATH=$PWD/stage1/bin/ld.lld.exe \
  -DGOLD_EXECUTABLE:FILEPATH=$PWD/stage1/bin/ld.lld.exe \
  -DCLANG_DEFAULT_CXX_STDLIB:STRING=libc++ \
  -DCLANG_DEFAULT_RTLIB:STRING=compiler-rt \
  -DCMAKE_C_FLAGS:STRING="-femulated-tls" -DCMAKE_CXX_FLAGS:STRING="-femulated-tls" \
  -Sllvm -Bbuild_stage2 &&
  #-DLLVM_ENABLE_RUNTIMES:STRING="libcxx;libcxxabi" \
  #-DLIBCXX_HAS_WIN32_THREAD_API:BOOL=ON \
  #-DLIBCXX_HAS_PTHREAD_API:BOOL=OFF \
 sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -lpthread -Wl,--image-base -Wl,0x10000000/" build_stage2/build.ninja &&
 wl-showstatus build &&
 ninja -Cbuild_stage2 &&
    echo OK
 ninja -Cbuild_stage2 all llvm-config &&
 wl-showstatus build-install &&
 ninja -Cbuild_stage2 install/strip &&
 cp -u build_stage2/bin/llvm-config.exe stage2/bin/ &&
 cp -u build_stage2/NATIVE/bin/llvm-tblgen.exe stage2/bin/ &&
 cp -u build_stage2/NATIVE/bin/clang-tblgen.exe stage2/bin/ &&
    echo OK



 # -DCMAKE_ASM_COMPILER_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
 # -DCMAKE_ASM_COMPILER_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
 # -DCMAKE_C_COMPILER:FILEPATH=$PWD/stage1/bin/clang.exe \
 # -DCMAKE_C_COMPILER_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
 # -DCMAKE_C_COMPILER_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
 # -DCMAKE_CXX_COMPILER:FILEPATH=$PWD/stage1/bin/clang++.exe \
 # -DCMAKE_CXX_COMPILER_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
 # -DCMAKE_CXX_COMPILER_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
 # -DCMAKE_RC_COMPILER:FILEPATH=$PWD/stage1/bin/llvm-windres.exe \
 # -DCMAKE_LINKER:FILEPATH=$PWD/stage1/bin/ld.lld.exe \
 # -DGOLD_EXECUTABLE:FILEPATH=$PWD/stage1/bin/ld.lld.exe \

####Notes:
#### For distribution use: -DLLVM_INSTALL_TOOLCHAIN_ONLY:BOOL=ON 




########################################################################




#mkdir -p build_llvm &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
#  -DCMAKE_BUILD_TYPE=Release \
#  -DLLVM_ENABLE_ASSERTIONS=OFF \
#  -DLLVM_ENABLE_PROJECTS="clang;lld;lldb" \
#  -DLLVM_TARGETS_TO_BUILD="X86;ARM;AArch64" \
#  -DLLVM_INSTALL_TOOLCHAIN_ONLY=ON \
#  -DLLVM_LINK_LLVM_DYLIB=ON \
#  -DLLVM_TOOLCHAIN_TOOLS="llvm-ar;llvm-ranlib;llvm-objdump;llvm-rc;llvm-cvtres;llvm-nm;llvm-strings;llvm-readobj;llvm-dlltool;llvm-pdbutil;llvm-objcopy;llvm-strip;llvm-cov;llvm-profdata;llvm-addr2line;llvm-symbolizer;llvm-windres;llvm-ml;llvm-readelf" \
#  -DLLDB_INCLUDE_TESTS=OFF \
#  -DPython3_FIND_REGISTRY:BOOL=NEVER \
#  -DPython3_EXECUTABLE:FILEPATH=$MINGWPREFIX/share/python/bin/python.exe \
#  -Sllvm -Bbuild_llvm &&
#  #-DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM \
#  #-DLLVM_ENABLE_LTO=Full \
# wl-showstatus build-install &&
# ninja -Cbuild_llvm install/strip &&
#    echo OK

#mkdir -p build_llvm &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release \
#  -DLLVM_LINK_LLVM_DYLIB=ON \
#  -DLLVM_ENABLE_ASSERTIONS=OFF \
#  -DLLVM_ENABLE_PROJECTS="clang;lld;lldb" \
#  -DLLVM_ENABLE_RUNTIMES:STRING="" \
#  -DLLVM_TARGETS_TO_BUILD="X86;ARM;AArch64" \
#  -DLLVM_INSTALL_TOOLCHAIN_ONLY=ON \
#  -DLLVM_TOOLCHAIN_TOOLS="llvm-ar;llvm-ranlib;llvm-objdump;llvm-rc;llvm-cvtres;llvm-nm;llvm-strings;llvm-readobj;llvm-dlltool;llvm-pdbutil;llvm-objcopy;llvm-strip;llvm-cov;llvm-profdata;llvm-addr2line;llvm-symbolizer;llvm-windres;llvm-ml;llvm-readelf" \
#  -DCLANG_DEFAULT_UNWINDLIB:STRING=none \
#  -DLLVM_INCLUDE_DOCS:BOOL=OFF \
#  -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF \
#  -DLLVM_INCLUDE_BENCHMARKS:BOOL=OFF \
#  -DLLVM_INCLUDE_TESTS:BOOL=OFF \
#  -DLLDB_INCLUDE_TESTS:BOOL=OFF \
#  -DPython3_FIND_REGISTRY:BOOL=NEVER \
#  -DPython3_EXECUTABLE:FILEPATH=$MINGWPREFIX/share/python/bin/python.exe \
#  -Sllvm -Bbuild_llvm &&
#  #-DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM \
#  #-DLLVM_ENABLE_LTO=Full \
#  #-DCLANG_DEFAULT_UNWINDLIB:STRING=none \
#  #-DLIBUNWIND_ENABLE_SHARED:BOOL=ON \
#  #-DLIBUNWIND_ENABLE_STATIC:BOOL=ON \
#  #-DLLVM_ENABLE_RUNTIMES:STRING="libunwind" \
#  #-DCLANG_DEFAULT_UNWINDLIB:STRING=libunwind \
#  #-DLibEdit_INCLUDE_DIRS:PATH=$MINGWPREFIX/include 
#  #-DGCC_INSTALL_PREFIX=$(dirname $(dirname $(which gcc)))
# wl-showstatus build-install &&
# ninja -Cbuild_llvm install/strip &&
#    echo OK

#  -DLLVM_INSTALL_TOOLCHAIN_ONLY=ON \
mkdir -p build_llvm &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE=Release \
  -DLLVM_ENABLE_ASSERTIONS=OFF \
  -DLLVM_ENABLE_PROJECTS="clang;lld;lldb" \
  -DLLVM_ENABLE_RUNTIMES:STRING="libunwind" \
  -DLLVM_TARGETS_TO_BUILD="X86;ARM;AArch64" \
  -DLLVM_INSTALL_TOOLCHAIN_ONLY=OFF \
  -DLLVM_LINK_LLVM_DYLIB=ON \
  -DLLVM_TOOLCHAIN_TOOLS="llvm-ar;llvm-ranlib;llvm-objdump;llvm-rc;llvm-cvtres;llvm-nm;llvm-strings;llvm-readobj;llvm-dlltool;llvm-pdbutil;llvm-objcopy;llvm-strip;llvm-cov;llvm-profdata;llvm-addr2line;llvm-symbolizer;llvm-windres;llvm-ml;llvm-readelf" \
  -DLLVM_INCLUDE_DOCS:BOOL=OFF \
  -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF \
  -DLLVM_INCLUDE_BENCHMARKS:BOOL=OFF \
  -DLLVM_INCLUDE_TESTS:BOOL=OFF \
  -DCOMPILER_RT_USE_BUILTINS_LIBRARY=ON \
  -DCOMPILER_RT_CAN_EXECUTE_TESTS:BOOL=OFF \
  -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF \
  -DCLANG_DEFAULT_UNWINDLIB:STRING=none \
  -DLIBUNWIND_ENABLE_SHARED:BOOL=ON \
  -DLIBUNWIND_ENABLE_STATIC:BOOL=ON \
  -DLLDB_INCLUDE_TESTS:BOOL=OFF \
  -DPython3_FIND_REGISTRY:BOOL=NEVER \
  -DPython3_EXECUTABLE:FILEPATH=$MINGWPREFIX/share/python/bin/python.exe \
  -Sllvm -Bbuild_llvm &&
  #-DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM \
  #-DLLVM_ENABLE_LTO=Full \
  #-DCLANG_DEFAULT_UNWINDLIB:STRING=none \
  #-DCLANG_DEFAULT_UNWINDLIB:STRING=libunwind \
  #-DLLVM_ENABLE_RUNTIMES:STRING="libunwind;compiler-rt;libcxx;libcxxabi" \
  #-DLibEdit_INCLUDE_DIRS:PATH=$MINGWPREFIX/include 
 wl-showstatus build-install &&
 ninja -Cbuild_llvm install/strip &&
    echo OK

mkdir -p build_compiler-rt &&
 wl-showstatus configure &&
 PATH=$INSTALLPREFIX/share/llvm/bin:$PATH \
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
  -DBUILD_SHARED_LIBS:BOOL=ON \
  -DLLVM_TARGETS_TO_BUILD:STRING="X86" \
  -DLLVM_MAIN_SRC_DIR:PATH=$PWD/llvm \
  -DCOMPILER_RT_BUILD_SANITIZERS:BOOL=OFF \
  -DCOMPILER_RT_DEFAULT_TARGET_ONLY=OFF \
  -DCOMPILER_RT_USE_BUILTINS_LIBRARY=OFF \
  -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF \
  -DCOMPILER_RT_CAN_EXECUTE_TESTS:BOOL=OFF \
  -DCMAKE_CXX_FLAGS:STRING=" " \
  -DPython3_EXECUTABLE:FILEPATH=$PYDIR/python.exe -Scompiler-rt -Bbuild_compiler-rt &&
 # -DLLVM_CONFIG_PATH:PATH=$INSTALLPREFIX/share/llvm/bin/llvm-config.exe \
 # -DLLVM_CONFIG_PATH:PATH=$PWD/build_llvm/bin/llvm-config.exe \
 # -DCOMPILER_RT_DEFAULT_TARGET_TRIPLE:STRING=$RUNPLATFORM \
 # -DCMAKE_ASM_COMPILER_AR:FILEPATH=$INSTALLPREFIX/share/llvm/bin/llvm-ar.exe \
 # -DCMAKE_ASM_COMPILER_RANLIB:FILEPATH=$INSTALLPREFIX/share/llvm/bin/llvm-ranlib.exe \
 # -DCMAKE_C_COMPILER:FILEPATH=$INSTALLPREFIX/share/llvm/bin/clang.exe \
 # -DCMAKE_C_COMPILER_AR:FILEPATH=$INSTALLPREFIX/share/llvm/bin/llvm-ar.exe \
 # -DCMAKE_C_COMPILER_RANLIB:FILEPATH=$INSTALLPREFIX/share/llvm/bin/llvm-ranlib.exe \
 # -DCMAKE_CXX_COMPILER:FILEPATH=$INSTALLPREFIX/share/llvm/bin/clang++.exe \
 # -DCMAKE_CXX_COMPILER_AR:FILEPATH=$INSTALLPREFIX/share/llvm/bin/llvm-ar.exe \
 # -DCMAKE_CXX_COMPILER_RANLIB:FILEPATH=$INSTALLPREFIX/share/llvm/bin/llvm-ranlib.exe \
 # -DCMAKE_RC_COMPILER:FILEPATH=$INSTALLPREFIX/share/llvm/bin/llvm-windres.exe \
 # -DCMAKE_LINKER:FILEPATH=$INSTALLPREFIX/share/llvm/bin/ld.lld.exe \
 # -DGOLD_EXECUTABLE:FILEPATH=$INSTALLPREFIX/share/llvm/bin/ld.lld.exe \
 # -DCMAKE_ASM_MASM_COMPILER:FILEPATH=$PWD/stage1/bin/llvm-ml.exe \
 # -DSANITIZER_CXX_ABI=libc++ \
 wl-showstatus build-install &&
 ninja -Cbuild_compiler-rt install/strip &&
 # manually copy libclang_rt.*.a files to the location where they are expected
 mkdir -p $INSTALLPREFIX/share/llvm/lib/clang/$VERSION/lib/windows &&
 cp -f $INSTALLPREFIX/share/llvm/lib/windows/* $INSTALLPREFIX/share/llvm/lib/clang/$VERSION/lib/windows/ &&
    echo OK

#### TO DO: https://github.com/lldb-tools/lldb-mi

# download wrappers
if [ ! -f $TARBALLDIR/$BASENAME/mstorsjo-llvm-mingw-master.tar.gz ]; then
 wl-download -v -d $TARBALLDIR/$BASENAME https://github.com/mstorsjo/llvm-mingw/archive/refs/heads/master.tar.gz &&
 mv -f $TARBALLDIR/$BASENAME/master.tar.gz $TARBALLDIR/$BASENAME/mstorsjo-llvm-mingw-master.tar.gz
fi
tar xz --force-local -f $TARBALLDIR/$BASENAME/mstorsjo-llvm-mingw-master.tar.gz

# build wrappers
CLANG_MAJOR=$(basename $(echo $INSTALLPREFIX/share/llvm/lib/clang/* | awk '{print $NF}') | cut -f 1 -d .)
cp -f llvm-mingw-master/wrappers/*-wrapper.sh $INSTALLPREFIX/share/llvm/bin/
$INSTALLPREFIX/share/llvm/bin/clang.exe llvm-mingw-master/wrappers/clang-target-wrapper.c -o $INSTALLPREFIX/share/llvm/bin/clang-target-wrapper.exe -O2 -Wl,-s -municode -DCLANG=\"clang-$CLANG_MAJOR.exe\"
$INSTALLPREFIX/share/llvm/bin/clang.exe llvm-mingw-master/wrappers/llvm-wrapper.c -o $INSTALLPREFIX/share/llvm/bin/llvm-wrapper.exe -O2 -Wl,-s -municode -DCLANG=\"clang-$CLANG_MAJOR.exe\"

# install wrappers through soft links
for arch in i686 x86_64 armv7 aarch64; do
    for target_os in mingw32 mingw32uwp; do
        for exec in clang clang++ gcc g++ cc c99 c11 c++ as; do
            ln -sf clang-target-wrapper.exe $INSTALLPREFIX/share/llvm/bin/$arch-w64-$target_os-$exec.exe
        done
        for exec in addr2line ar ranlib nm objcopy readelf strings strip; do
            ln -sf llvm-$exec.exe $INSTALLPREFIX/share/llvm/bin/$arch-w64-$target_os-$exec.exe || true
        done
        # windres and dlltool can't use llvm-wrapper, as that loses the original target arch prefix.
        ln -sf llvm-windres.exe $INSTALLPREFIX/share/llvm/bin/$arch-w64-$target_os-windres.exe
        ln -sf llvm-dlltool.exe $INSTALLPREFIX/share/llvm/bin/$arch-w64-$target_os-dlltool.exe
        for exec in ld objdump; do
            ln -sf $exec-wrapper.sh $INSTALLPREFIX/share/llvm/bin/$arch-w64-$target_os-$exec
        done
    done
done &&
cp -f $INSTALLPREFIX/share/llvm/bin/clang.exe $INSTALLPREFIX/share/llvm/bin/clang-$CLANG_MAJOR.exe &&
cp -f $INSTALLPREFIX/share/llvm/bin/clang++.exe $INSTALLPREFIX/share/llvm/bin/clang++-$CLANG_MAJOR.exe &&
if [ -z "$HOST" ]; then
    HOST=$($INSTALLPREFIX/share/llvm/bin/clang-$CLANG_MAJOR -dumpmachine | sed 's/-.*//')-w64-mingw32
fi &&
# Install unprefixed wrappers if $HOST is one of the architectures we are installing wrappers for.
for exec in gcc g++ cc c99 c11 c++ addr2line ar dlltool ranlib nm objcopy readelf strings strip windres; do
    ln -sf $HOST-$exec.exe $INSTALLPREFIX/share/llvm/bin/$exec.exe
done &&
for exec in ld objdump; do
    ln -sf $HOST-$exec $INSTALLPREFIX/share/llvm/bin/$exec
done

# build MinGW-w64 headers and crt
for arch in i686 x86_64 armv7 aarch64; do
 mkdir -p build_mingw-w64-headers-$arch build_mingw-w64-crt-$arch &&
 wl-showstatus configure &&
 cd build_mingw-w64-headers-$arch &&
 PATH=$INSTALLPREFIX/share/llvm/bin:$PATH \
 $MINGWPREFIX/src/mingw-w64/mingw-w64-headers/configure --prefix=$INSTALLPREFIX/share/llvm/$arch-w64-mingw32 --build=$BUILDPLATFORM --host=$arch-w64-mingw32 \
  --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrt"; else echo "msvcrt-os"; fi) \
  --enable-sdk=all \
  --enable-idl &&
 cd .. &&
 wl-showstatus build &&
 PATH=$INSTALLPREFIX/share/llvm/bin:$PATH \
 make -Cbuild_mingw-w64-headers-$arch install-strip &&
 wl-showstatus configure &&
 cd build_mingw-w64-crt-$arch &&
 PATH=$INSTALLPREFIX/share/llvm/bin:$PATH \
 $MINGWPREFIX/src/mingw-w64/mingw-w64-crt/configure --prefix=$INSTALLPREFIX/share/llvm/$arch-w64-mingw32 --build=$BUILDPLATFORM --host=$arch-w64-mingw32 \
  --$(if [ "$arch" == "i686" ]; then echo "enable"; else echo "disable"; fi)-lib32 \
  --$(if [ "$arch" == "x86_64" ]; then echo "enable"; else echo "disable"; fi)-lib64 \
  --$(if [ "$arch" == "armv7" ]; then echo "enable"; else echo "disable"; fi)-libarm32 \
  --$(if [ "$arch" == "aarch64" ]; then echo "enable"; else echo "disable"; fi)-libarm64 \
  --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrt"; else echo "msvcrt-os"; fi) \
  --enable-wildcard &&
 cd .. &&
 wl-showstatus build &&
 PATH=$INSTALLPREFIX/share/llvm/bin:$PATH \
 make -Cbuild_mingw-w64-crt-$arch install-strip
done

 #for arch in i686 x86_64 armv7 aarch64; do
 for arch in i686 x86_64; do
  ## create dummy libunwind.a to avoid linking with -unwindlib=none
  #$INSTALLPREFIX/share/llvm/bin/llvm-ar rcs $INSTALLPREFIX/share/llvm/$arch-w64-mingw32/lib/libunwind.a &&
  mkdir -p build_libunwind_$arch &&
  wl-showstatus configure &&
  PATH=$INSTALLPREFIX/share/llvm/bin:$PATH \
  cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm/$arch-w64-mingw32 -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
   -DBUILD_SHARED_LIBS:BOOL=ON \
   -DLIBUNWIND_TARGET_TRIPLE:STRING=$arch-w64-windows-gnu \
   -DLIBUNWIND_ENABLE_SHARED:BOOL=ON \
   -DLIBUNWIND_ENABLE_STATIC:BOOL=ON \
   -DLIBUNWIND_USE_COMPILER_RT:BOOL=OFF \
   -DLLVM_PATH:PATH=$PWD/llvm \
   -Slibunwind -Bbuild_libunwind_$arch &&
  wl-showstatus build-install &&
  PATH=$INSTALLPREFIX/share/llvm/bin:$PATH \
  ninja -Cbuild_libunwind_$arch install/strip
 done &&
    echo OK

# build MinGW-w64 gendef
mkdir -p build_mingw-w64-gendef &&
wl-showstatus configure &&
cd build_mingw-w64-gendef &&
PATH=$INSTALLPREFIX/share/llvm/bin:$PATH \
$MINGWPREFIX/src/mingw-w64/mingw-w64-tools/gendef/configure --prefix=$INSTALLPREFIX/share/llvm --build=$BUILDPLATFORM --host=$RUNPLATFORM &&
#LDFLAGS="-Wl,--unwindlib=compiler-rt" &&
cd .. &&
wl-showstatus build &&
PATH=$INSTALLPREFIX/share/llvm/bin:$PATH \
make -Cbuild_mingw-w64-gendef install-strip &&
    echo OK

# build MinGW-w64 widl (probably okay to only build for $HOST)
for arch in i686 x86_64 armv7 aarch64; do
 mkdir -p build_mingw-w64-widl-$arch &&
 wl-showstatus configure &&
 cd build_mingw-w64-widl-$arch &&
 PATH=$INSTALLPREFIX/share/llvm/bin:$PATH \
 $MINGWPREFIX/src/mingw-w64/mingw-w64-tools/widl/configure --prefix=$INSTALLPREFIX/share/llvm/$arch-w64-mingw32 --build=$BUILDPLATFORM --target=$arch-w64-mingw32 \
  --with-widl-includedir=../include &&
 #--with-widl-includedir=$INSTALLPREFIX/share/llvm/include &&
 cd .. &&
 wl-showstatus build &&
 PATH=$INSTALLPREFIX/share/llvm/bin:$PATH \
 make -Cbuild_mingw-w64-widl-$arch install-strip
done &&
ln -sf ../$HOST/bin/$HOST-widl.exe $INSTALLPREFIX/share/llvm/bin/widl.exe &&
    echo OK

CLANG_VERSION=$(basename "$(dirname "$(dirname "$(dirname "$("$INSTALLPREFIX/share/llvm/bin/$HOST-clang.exe" --print-libgcc-file-name -rtlib=compiler-rt)")")")")
for arch in i686 x86_64 armv7 aarch64; do
 mkdir -p build_compiler-rt-$arch &&
 wl-showstatus configure &&
 PATH=$INSTALLPREFIX/share/llvm/bin:$PATH \
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm/lib/clang/$CLANG_VERSION -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
  -DBUILD_SHARED_LIBS:BOOL=ON \
  -DCOMPILER_RT_DEFAULT_TARGET_TRIPLE:STRING=$arch-w64-windows-gnu \
  -DCMAKE_SYSTEM_NAME:STRING=Windows \
  -DCMAKE_C_COMPILER:FILEPATH=$INSTALLPREFIX/share/llvm/bin/$arch-w64-mingw32-clang.exe \
  -DCMAKE_CXX_COMPILER:FILEPATH=$INSTALLPREFIX/share/llvm/bin/$arch-w64-mingw32-clang++.exe \
  -DCMAKE_AR:FILEPATH=$INSTALLPREFIX/share/llvm/bin/llvm-ar.exe \
  -DCMAKE_RANLIB:FILEPATH=$INSTALLPREFIX/share/llvm/bin/llvm-ranlib.exe \
  -DCMAKE_C_COMPILER_TARGET=$arch-windows-gnu \
  -DCMAKE_CXX_COMPILER_TARGET=$arch-windows-gnu \
  -DCOMPILER_RT_DEFAULT_TARGET_ONLY:BOOL=ON \
  -DCOMPILER_RT_USE_BUILTINS_LIBRARY:BOOL=ON \
  -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF \
  -DSANITIZER_CXX_ABI=libc++ \
  -Scompiler-rt -Bbuild_compiler-rt-$arch &&
  #-DLLVM_TARGETS_TO_BUILD:STRING="X86;NVPTX;AMDGPU;ARM;AArch64;WebAssembly" \
  #-DLLVM_MAIN_SRC_DIR:PATH=$PWD/llvm \
  #-DLLVM_CONFIG_PATH:PATH=$PWD/build_llvm/bin/llvm-config.exe \
  #-DCMAKE_CXX_FLAGS:STRING=" " \
  #-DPython3_EXECUTABLE:FILEPATH=$PYDIR/python.exe \
 wl-showstatus build-install &&
 PATH=$INSTALLPREFIX/share/llvm/bin:$PATH \
 ninja -Cbuild_compiler-rt-$arch install/strip
done &&
    echo OK

#for arch in i686 x86_64 armv7 aarch64; do
# mkdir -p build_mingw-w64-$arch &&
# cd build_mingw-w64-$arch &&
# PATH=$INSTALLPREFIX/share/llvm/bin:$PATH \
# $MINGWPREFIX/src/mingw-w64/configure --prefix=$INSTALLPREFIX/share/llvm/$arch-w64-mingw32 --build=$BUILDPLATFORM --host=$arch-w64-mingw32 \
#  --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrt"; else echo "msvcrt-os"; fi) \
#  --with-libraries=all \
#  --with-tools=all \
#  --enable-sdk=all \
#  --enable-secure-api \
#  --enable-wildcard \
#  --$(if [ "$arch" == "i686" ]; then echo "enable"; else echo "disable"; fi)-lib32 \
#  --$(if [ "$arch" == "x86_64" ]; then echo "enable"; else echo "disable"; fi)-lib64 \
#  --$(if [ "$arch" == "armv7" ]; then echo "enable"; else echo "disable"; fi)-libarm32 \
#  --$(if [ "$arch" == "aarch64" ]; then echo "enable"; else echo "disable"; fi)-libarm64 \
#  --enable-lib$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) --disable-lib$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 32; else echo 64; fi) --disable-libarm32 --disable-libarm64 \
#  --enable-idl \
#  CFLAGS="-fcommon $(gcc --help -v 2>/dev/null|grep -q " -Wexpansion-to-defined" && echo "-Wno-expansion-to-defined")" \
#  CXXFLAGS="-I$PWD/../libcxx/include" \
#  LDFLAGS="-Wl,-no-undefined" &&
# cd .. &&
# PATH=$INSTALLPREFIX/share/llvm/bin:$PATH \
# make -Cbuild_mingw-w64-$arch install-strip
#done

#for arch in i686 x86_64 armv7 aarch64; do
# mkdir -p build_libcxx-$arch &&
#  wl-showstatus configure &&
#  PATH=$INSTALLPREFIX/share/llvm/bin:$PATH \
#  cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$PWD/stage1 -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
#   -DLIBCXX_ENABLE_SHARED:BOOL=ON \
#   -DLIBCXX_ENABLE_STATIC:BOOL=ON \
#   -DLIBCXX_TARGET_TRIPLE:STRING=$RUNPLATFORM \
#   -DLLVM_PATH:PATH=$PWD/llvm \
#   -DLIBCXX_USE_COMPILER_RT:BOOL=ON \
#   -DLIBCXX_HAS_WIN32_THREAD_API:BOOL=ON \
#   -DLIBCXX_HAS_PTHREAD_API:BOOL=OFF \
#   -DLIBCXX_ENABLE_EXPERIMENTAL_LIBRARY:BOOL=OFF \
#   -DLIBCXX_LIBDIR_SUFFIX="" \
#   -DLIBCXX_INCLUDE_TESTS:BOOL=OFF \
#   -DLIBCXX_ENABLE_ABI_LINKER_SCRIPT:BOOL=OFF \
#   -DLIBCXX_CXX_ABI:STRING=libcxxabi \
#   -DLIBCXX_CXX_ABI=libcxxabi \
#   -DLIBCXX_CXX_ABI_INCLUDE_PATHS="$PWD/libcxxabi/include" \
#   -DLIBCXX_CXX_ABI_LIBRARY_PATH:PATH=$PWD/stage1/lib \
#   -DLIBCXX_ENABLE_STATIC_ABI_LIBRARY:BOOL=ON \
#   -DLIBCXX_INCLUDE_DOCS:BOOL=OFF \
#   -DLIBCXX_INCLUDE_TESTS:BOOL=OFF \
#   -DLIBCXX_INCLUDE_BENCHMARKS:BOOL=OFF \
#   -DPython3_EXECUTABLE:FILEPATH=$PYDIR/python.exe -Slibcxx -Bbuild_libcxx-$arch &&
#  #-DBUILD_SHARED_LIBS:BOOL=OFF \
#  #-DLIBCXX_CXX_ABI=libcxxabi \
#  #-DLIBCXX_CXX_ABI_INCLUDE_PATHS=$PWD/libcxxabi/include \
#  #-DLIBCXX_CXX_ABI_LIBRARY_PATH:PATH=$PWD/build_libcxxabi/lib \
#  #-DLIBCXX_ABI_FORCE_MICROSOFT:BOOL=OFF \
#  #-DCMAKE_ASM_COMPILER:FILEPATH=$(which yasm.exe) \
#  #-DCMAKE_ASM_COMPILER_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
#  #-DCMAKE_ASM_COMPILER_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
#  #-DGOLD_EXECUTABLE:FILEPATH=$PWD/stage1/bin/ld.lld.exe \
#  wl-showstatus build-install &&
#  PATH=$INSTALLPREFIX/share/llvm/bin:$PATH \
#  ninja -Cbuild_libcxx-$arch install-cxx-headers &&
#  PATH=$INSTALLPREFIX/share/llvm/bin:$PATH \
#  ninja -Cbuild_libcxx-$arch install/strip &&
#     echo OK
# 
# #### Works with -DLIBCXXABI_ENABLE_SHARED:BOOL=OFF
# mkdir -p build_libcxxabi-$arch &&
#  wl-showstatus configure &&
#  PATH=$INSTALLPREFIX/share/llvm/bin:$PATH \
#  cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$PWD/stage1 -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
#   -DLIBCXXABI_ENABLE_SHARED:BOOL=ON \
#   -DLIBCXXABI_ENABLE_STATIC:BOOL=ON \
#   -DLIBCXXABI_TARGET_TRIPLE:STRING=$RUNPLATFORM \
#   -DLLVM_PATH:PATH=$PWD/llvm \
#   -DLIBCXXABI_USE_COMPILER_RT:BOOL=ON \
#   -DLIBCXXABI_LIBCXX_INCLUDES:PATH=$PWD/stage1/include/c++/v1 \
#   -DLIBCXXABI_LIBCXX_LIBRARY_PATH:PATH=$PWD/stage1/lib \
#   -DLIBCXXABI_LIBDIR_SUFFIX="" \
#   -DLIBCXXABI_INCLUDE_TESTS:BOOL=OFF \
#   -Slibcxxabi -Bbuild_libcxxabi-$arch &&
#  #-DBUILD_SHARED_LIBS:BOOL=OFF \
#  #-DCMAKE_CXX_FLAGS:STRING="-I$PWD/libcxx/include" \
#  #-DLIBCXXABI_BUILD_32_BITS:BOOL=OFF
#  #-DLIBCXXABI_USE_LLVM_UNWINDER:BOOL=ON 
#  #-DLLVM_PATH:PATH=$PWD
#  wl-showstatus build-install &&
#  PATH=$INSTALLPREFIX/share/llvm/bin:$PATH \
#  ninja -Cbuild_libcxxabi-$arch install/strip &&
#     echo OK
#done





















#  -DLLVM_INSTALL_TOOLCHAIN_ONLY=ON \
mkdir -p build_llvm &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE=Release \
  -DLLVM_ENABLE_ASSERTIONS=ON \
  -DLLVM_ENABLE_PROJECTS="clang;lld;lldb" \
  -DLLVM_ENABLE_RUNTIMES:STRING="libunwind;libcxx;libcxxabi" \
  -DLLVM_TARGETS_TO_BUILD="X86;ARM;AArch64" \
  -DLLVM_INSTALL_TOOLCHAIN_ONLY=OFF \
  -DLLVM_LINK_LLVM_DYLIB=ON \
  -DLLVM_TOOLCHAIN_TOOLS="llvm-ar;llvm-ranlib;llvm-objdump;llvm-rc;llvm-cvtres;llvm-nm;llvm-strings;llvm-readobj;llvm-dlltool;llvm-pdbutil;llvm-objcopy;llvm-strip;llvm-cov;llvm-profdata;llvm-addr2line;llvm-symbolizer;llvm-windres;llvm-ml;llvm-readelf" \
  -DLLVM_INCLUDE_DOCS:BOOL=OFF \
  -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF \
  -DLLVM_INCLUDE_BENCHMARKS:BOOL=OFF \
  -DLLVM_INCLUDE_TESTS:BOOL=OFF \
  -DLIBCXX_HAS_WIN32_THREAD_API:BOOL=ON \
  -DLIBCXX_HAS_PTHREAD_API:BOOL=OFF \
  -DCOMPILER_RT_BUILD_SANITIZERS:BOOL=OFF \
  -DCOMPILER_RT_DEFAULT_TARGET_ONLY=OFF \
  -DCOMPILER_RT_USE_BUILTINS_LIBRARY=OFF \
  -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF \
  -DCOMPILER_RT_CAN_EXECUTE_TESTS:BOOL=OFF \
  -DCLANG_DEFAULT_UNWINDLIB:STRING=none \
  -DLIBUNWIND_ENABLE_SHARED:BOOL=ON \
  -DLIBUNWIND_ENABLE_STATIC:BOOL=ON \
  -DLIBUNWIND_USE_COMPILER_RT:BOOL=OFF \
  -DLLDB_INCLUDE_TESTS:BOOL=OFF \
  -DPython3_FIND_REGISTRY:BOOL=NEVER \
  -DPython3_EXECUTABLE:FILEPATH=$MINGWPREFIX/share/python/bin/python.exe \
  $(if gcc --version|grep -q "^gcc"; then echo "-DLIBCXXABI_ENABLE_NEW_DELETE_DEFINITIONS:BOOL=ON"; fi) \
  -Sllvm -Bbuild_llvm &&
  #-DCMAKE_CXX_FLAGS:STRING="-I$PWD/libc/src" \
  #-DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM \
  #-DLLVM_ENABLE_LTO=Full \
  #-DCLANG_DEFAULT_UNWINDLIB:STRING=none \
  #-DCLANG_DEFAULT_UNWINDLIB:STRING=libunwind \
  #-DLLVM_ENABLE_RUNTIMES:STRING="libunwind;compiler-rt;libcxx;libcxxabi" \
  #-DLibEdit_INCLUDE_DIRS:PATH=$MINGWPREFIX/include 
 wl-showstatus build-install &&
 ninja -Cbuild_llvm install/strip &&
    echo OK






































  #-DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;libclc;lld;lldbpstl;polly;mlir;parallel-libs" \
  #-DLLVM_ENABLE_RUNTIMES:STRING="compiler-rt;libcxx;libcxxabi;libunwind;openmp" \
# boostrapped build
mkdir -p build_staged &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
  -DCLANG_ENABLE_BOOTSTRAP:BOOL=ON \
  -DBUILD_SHARED_LIBS:BOOL=ON \
  -DLLVM_BUILD_STATIC=OFF \
  -DLIBCLANG_BUILD_STATIC:BOOL=OFF \
  -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF \
  -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF \
  -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM \
  -DLLVM_TARGETS_TO_BUILD:STRING="X86" \
  -DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;compiler-rt;lld" \
  -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=OFF \
  -DLLVM_ENABLE_THREADS:BOOL=ON \
  -DCLANG_BUILD_TOOLS:BOOL=ON \
  -DCLANG_DEFAULT_RTLIB:STRING=libgcc \
  -DCLANG_DEFAULT_CXX_STDLIB:STRING=libstdc++ \
  -DCLANG_DEFAULT_OPENMP_RUNTIME:STRING=libgomp \
  -DCLANG_DEFAULT_UNWINDLIB:STRING=libgcc \
  -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF \
  -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON \
  -DLLVM_ENABLE_LIBEDIT:BOOL=ON \
  -DLibEdit_INCLUDE_DIRS:PATH=$MINGWPREFIX/include \
  -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) \
  -DLLVM_ENABLE_RTTI:BOOL=ON \
  -DLLVM_ENABLE_MODULES:BOOL=OFF \
  -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF \
  -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON \
  -DLLVM_ENABLE_THREADS:BOOL=ON \
  -DLLVM_ENABLE_UNWIND_TABLES:BOOL=ON \
  -DLLVM_TOOL_OPENMP_BUILD:BOOL=ON \
  -DLLVM_TOOL_PARALLEL_LIBS_BUILD:BOOL=ON \
  -DLLVM_ENABLE_FFI:BOOL=ON \
  -DLLVM_ENABLE_LIBXML2:BOOL=ON \
  -DLLVM_ENABLE_Z3_SOLVER:BOOL=ON \
  -DLLVM_INCLUDE_TOOLS:BOOL=ON \
  -DLLVM_INCLUDE_UTILS:BOOL=ON \
  -DLLVM_INSTALL_UTILS:BOOL=ON \
  -DLLVM_ENABLE_TERMINFO:BOOL=OFF \
  -DLLVM_ENABLE_LIBEDIT:BOOL=OFF \
  -DLLVM_ENABLE_SPHINX=OFF \
  -DLLVM_INCLUDE_DOCS:BOOL=OFF \
  -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF \
  -DLLVM_INCLUDE_TESTS:BOOL=OFF \
  -DLLVM_TOOL_LLVM_C_TEST_BUILD:BOOL=OFF \
  -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF \
  -DLLVM_BUILD_BENCHMARKS:BOOL=OFF \
  -DLLVM_BUILD_TESTS:BOOL=OFF \
  -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF \
  -DCLANG_INCLUDE_TESTS:BOOL=OFF \
  -DBUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF \
  -DCLANG_PLUGIN_SUPPORT:BOOL=ON \
  -DCLANG_ENABLE_CLANGD:BOOL=ON \
  -DCLANG_TOOL_APINOTES_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_ARCMT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_C_ARCMT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_C_INDEX_TEST_BUILD:BOOL=OFF \
  -DCLANG_INCLUDE_DOCS:BOOL=OFF \
  -DCLANG_BUILD_EXAMPLES:BOOL=OFF \
  -DLLD_BUILD_TOOLS:BOOL=ON \
  -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF \
  -DPython3_FIND_REGISTRY:BOOL=NEVER \
  -DPython3_EXECUTABLE:PATH=$MINGWPREFIX/share/python/bin/python3.exe \
  \
  -DBOOTSTRAP_CMAKE_BUILD_TYPE:STRING=Release \
  -DBOOTSTRAP_BUILD_SHARED_LIBS:BOOL=ON \
  -DBOOTSTRAP_LLVM_BUILD_STATIC=OFF \
  -DBOOTSTRAP_LIBCLANG_BUILD_STATIC:BOOL=OFF \
  -DBOOTSTRAP_LLVM_LINK_LLVM_DYLIB:BOOL=OFF \
  -DBOOTSTRAP_CLANG_LINK_CLANG_DYLIB:BOOL=OFF \
  -DBOOTSTRAP_LLVM_HOST_TRIPLE:STRING=$RUNPLATFORM \
  -DBOOTSTRAP_LLVM_TARGETS_TO_BUILD:STRING="X86;NVPTX;AMDGPU;ARM;AArch64" \
  -DBOOTSTRAP_CLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
  -DBOOTSTRAP_LLD_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
  -DBOOTSTRAP_FLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
  -DBOOTSTRAP_LLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;libclc;lld;lldbpstl;polly;mlir;parallel-libs" \
  -DBOOTSTRAP_LLVM_ENABLE_RUNTIMES:STRING="compiler-rt;libcxx;libcxxabi;libunwind;openmp" \
  -DBOOTSTRAP_LLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=OFF \
  -DBOOTSTRAP_LLVM_ENABLE_THREADS:BOOL=ON \
  -DBOOTSTRAP_CLANG_BUILD_TOOLS:BOOL=ON \
  -DBOOTSTRAP_CLANG_DEFAULT_RTLIB:STRING=compiler-rt \
  -DBOOTSTRAP_CLANG_DEFAULT_CXX_STDLIB:STRING=libc++ \
  -DBOOTSTRAP_CLANG_DEFAULT_OPENMP_RUNTIME:STRING=libomp \
  -DBOOTSTRAP_CLANG_DEFAULT_UNWINDLIB:STRING=libcxx \
  -DBOOTSTRAP_CLANG_ENABLE_PROTO_FUZZER:BOOL=OFF \
  -DBOOTSTRAP_CLANG_ENABLE_STATIC_ANALYZER:BOOL=ON \
  -DBOOTSTRAP_LIBCXX_ENABLE_ABI_LINKER_SCRIPT:BOOL=OFF \
  -DBOOTSTRAP_LIBCXX_CXX_ABI:STRING=libcxxabi \
  -DBOOTSTRAP_LIBCXX_ENABLE_SHARED:BOOL=ON \
  -DBOOTSTRAP_LIBCXX_ENABLE_STATIC:BOOL=ON \
  -DBOOTSTRAP_LIBCXX_USE_COMPILER_RT:BOOL=ON \
  -DBOOTSTRAP_LIBCXX_HAS_WIN32_THREAD_API:BOOL=ON \
  -DBOOTSTRAP_LIBCXX_HAS_PTHREAD_API:BOOL=OFF \
  -DBOOTSTRAP_LIBCXX_ENABLE_EXPERIMENTAL_LIBRARY:BOOL=OFF \
  -DBOOTSTRAP_LIBCXX_LIBDIR_SUFFIX="" \
  -DBOOTSTRAP_LIBCXX_INCLUDE_TESTS:BOOL=OFF \
  -DBOOTSTRAP_LLVM_ENABLE_LIBEDIT:BOOL=ON \
  -DBOOTSTRAP_LLDB_ENABLE_LIBEDIT:BOOL=ON \
  -DBOOTSTRAP_LibEdit_INCLUDE_DIRS:PATH=$MINGWPREFIX/include \
  -DBOOTSTRAP_LLDB_ENABLE_CURSES:BOOL=ON \
  -DBOOTSTRAP_LLDB_ENABLE_LIBXML2:BOOL=ON \
  -DBOOTSTRAP_LLDB_ENABLE_LUA:BOOL=ON \
  -DBOOTSTRAP_LLDB_ENABLE_LZMA:BOOL=ON \
  -DBOOTSTRAP_LLVM_ENABLE_EH:BOOL=ON \
  -DBOOTSTRAP_LLVM_ENABLE_RTTI:BOOL=ON \
  -DBOOTSTRAP_LLVM_ENABLE_MODULES:BOOL=OFF \
  -DBOOTSTRAP_LLVM_ENABLE_ASSERTIONS:BOOL=OFF \
  -DBOOTSTRAP_LLVM_ENABLE_FFI:BOOL=ON \
  -DBOOTSTRAP_LLVM_OPTIMIZED_TABLEGEN:BOOL=ON \
  -DBOOTSTRAP_LLVM_ENABLE_LIBXML2:BOOL=ON \
  -DBOOTSTRAP_LLVM_ENABLE_THREADS:BOOL=ON \
  -DBOOTSTRAP_LLVM_ENABLE_UNWIND_TABLES:BOOL=ON \
  -DBOOTSTRAP_LLVM_ENABLE_Z3_SOLVER:BOOL=ON \
  -DBOOTSTRAP_LLVM_INCLUDE_TOOLS:BOOL=ON \
  -DBOOTSTRAP_LLVM_INCLUDE_UTILS:BOOL=ON \
  -DBOOTSTRAP_LLVM_INSTALL_UTILS:BOOL=ON \
  -DBOOTSTRAP_LLVM_ENABLE_TERMINFO:BOOL=OFF \
  -DBOOTSTRAP_LLVM_ENABLE_LIBEDIT:BOOL=OFF \
  -DBOOTSTRAP_LLDB_ENABLE_LIBEDIT:BOOL=OFF \
  -DBOOTSTRAP_LLDB_ENABLE_CURSES:BOOL=ON \
  -DBOOTSTRAP_LLDB_ENABLE_LIBXML2:BOOL=ON \
  -DBOOTSTRAP_LLDB_ENABLE_LZMA:BOOL=ON \
  -DBOOTSTRAP_LLDB_ENABLE_PYTHON:BOOL=ON \
  -DBOOTSTRAP_LLVM_ENABLE_SPHINX=OFF \
  -DBOOTSTRAP_LLVM_INCLUDE_DOCS:BOOL=OFF \
  -DBOOTSTRAP_CLANG_INCLUDE_TESTS:BOOL=OFF \
  -DBOOTSTRAP_COMPILER_RT_INCLUDE_TESTS:BOOL=OFF \
  -DBOOTSTRAP_LLDB_INCLUDE_TESTS:BOOL=OFF \
  -DBOOTSTRAP_LLVM_INCLUDE_GO_TESTS:BOOL=OFF \
  -DBOOTSTRAP_LLVM_INCLUDE_TESTS:BOOL=OFF \
  -DBOOTSTRAP_LLVM_TOOL_LLVM_C_TEST_BUILD:BOOL=OFF \
  -DBOOTSTRAP_LLVM_INCLUDE_EXAMPLES:BOOL=OFF \
  -DBOOTSTRAP_LLVM_BUILD_BENCHMARKS:BOOL=OFF \
  -DBOOTSTRAP_LLVM_BUILD_TESTS:BOOL=OFF \
  -DBOOTSTRAP_BUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF \
  -DBOOTSTRAP_CLANG_PLUGIN_SUPPORT:BOOL=ON \
  -DBOOTSTRAP_CLANG_ENABLE_CLANGD:BOOL=ON \
  -DBOOTSTRAP_CLANG_TOOL_APINOTES_TEST_BUILD:BOOL=OFF \
  -DBOOTSTRAP_CLANG_TOOL_ARCMT_TEST_BUILD:BOOL=OFF \
  -DBOOTSTRAP_CLANG_TOOL_CLANG_IMPORT_TEST_BUILD:BOOL=OFF \
  -DBOOTSTRAP_CLANG_TOOL_C_ARCMT_TEST_BUILD:BOOL=OFF \
  -DBOOTSTRAP_CLANG_TOOL_C_INDEX_TEST_BUILD:BOOL=OFF \
  -DBOOTSTRAP_CLANG_INCLUDE_DOCS:BOOL=OFF \
  -DBOOTSTRAP_CLANG_BUILD_EXAMPLES:BOOL=OFF \
  -DBOOTSTRAP_LLD_BUILD_TOOLS:BOOL=ON \
  -DBOOTSTRAP_LLDB_TOOL_LLDB_SERVER_BUILD:BOOL=ON \
  -DBOOTSTRAP_LLDB_TOOL_LLDB_VSCODE_BUILD:BOOL=ON \
  -DBOOTSTRAP_LLVM_TOOL_OPENMP_BUILD:BOOL=ON \
  -DBOOTSTRAP_LLVM_TOOL_PARALLEL_LIBS_BUILD:BOOL=ON \
  -DBOOTSTRAP_CLANG_ENABLE_PROTO_FUZZER:BOOL=OFF \
  -DBOOTSTRAP_LLDB_DISABLE_PYTHON:BOOL=OFF \
  -DBOOTSTRAP_Python3_FIND_REGISTRY:BOOL=NEVER \
  -DBOOTSTRAP_Python3_EXECUTABLE:PATH=$MINGWPREFIX/share/python/bin/python3.exe \
  -Sllvm -Bbuild_staged &&
 wl-showstatus build-install &&
 ninja -Cbuild_staged install/strip &&
    echo OK





























mkdir -p build_staged &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
  -DCLANG_ENABLE_BOOTSTRAP:BOOL=ON \
  -DBUILD_SHARED_LIBS:BOOL=ON \
  -DLLVM_BUILD_STATIC=OFF \
  -DLIBCLANG_BUILD_STATIC:BOOL=OFF \
  -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF \
  -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF \
  -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM \
  -DLLVM_TARGETS_TO_BUILD:STRING="X86" \
  -DLLVM_ENABLE_PROJECTS:STRING="clang;lld;pstl" \
  -DLLVM_ENABLE_RUNTIMES:STRING="libcxx;libcxxabi;libunwind" \
  -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=OFF \
  -DCLANG_BUILD_TOOLS:BOOL=ON \
  -DCLANG_DEFAULT_RTLIB:STRING=libgcc \
  -DCLANG_DEFAULT_CXX_STDLIB:STRING=libstdc++ \
  -DCLANG_DEFAULT_OPENMP_RUNTIME:STRING=libgomp \
  -DCLANG_DEFAULT_UNWINDLIB:STRING=libgcc \
  -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF \
  -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON \
  -DLLVM_ENABLE_LIBEDIT:BOOL=ON \
  -DLibEdit_INCLUDE_DIRS:PATH=$MINGWPREFIX/include \
  -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) \
  -DLLVM_ENABLE_RTTI:BOOL=ON \
  -DLLVM_ENABLE_MODULES:BOOL=OFF \
  -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF \
  -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON \
  -DLLVM_ENABLE_THREADS:BOOL=ON \
  -DLLVM_ENABLE_UNWIND_TABLES:BOOL=ON \
  -DLLVM_TOOL_OPENMP_BUILD:BOOL=ON \
  -DLLVM_TOOL_PARALLEL_LIBS_BUILD:BOOL=ON \
  -DLLVM_ENABLE_FFI:BOOL=ON \
  -DLLVM_ENABLE_LIBXML2:BOOL=ON \
  -DLLVM_ENABLE_Z3_SOLVER:BOOL=ON \
  -DLLVM_INCLUDE_TOOLS:BOOL=ON \
  -DLLVM_INCLUDE_UTILS:BOOL=ON \
  -DLLVM_INSTALL_UTILS:BOOL=ON \
  -DLLVM_ENABLE_TERMINFO:BOOL=OFF \
  -DLLVM_ENABLE_LIBEDIT:BOOL=OFF \
  -DLLVM_ENABLE_SPHINX=OFF \
  -DLLVM_INCLUDE_DOCS:BOOL=OFF \
  -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF \
  -DLLVM_INCLUDE_TESTS:BOOL=OFF \
  -DLLVM_TOOL_LLVM_C_TEST_BUILD:BOOL=OFF \
  -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF \
  -DLLVM_BUILD_BENCHMARKS:BOOL=OFF \
  -DLLVM_BUILD_TESTS:BOOL=OFF \
  -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF \
  -DCLANG_INCLUDE_TESTS:BOOL=OFF \
  -DBUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF \
  -DCLANG_PLUGIN_SUPPORT:BOOL=ON \
  -DCLANG_ENABLE_CLANGD:BOOL=ON \
  -DCLANG_TOOL_APINOTES_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_ARCMT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_C_ARCMT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_C_INDEX_TEST_BUILD:BOOL=OFF \
  -DCLANG_INCLUDE_DOCS:BOOL=OFF \
  -DCLANG_BUILD_EXAMPLES:BOOL=OFF \
  -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF \
  -DLIBCXX_HAS_WIN32_THREAD_API:BOOL=OFF \
  -DLIBCXX_HAS_PTHREAD_API:BOOL=ON \
  -DLLD_BUILD_TOOLS:BOOL=ON \
  -DPython3_FIND_REGISTRY:BOOL=NEVER \
  -DPython3_EXECUTABLE:PATH=$MINGWPREFIX/share/python/bin/python3.exe \
  -DCMAKE_CXX_FLAGS:STRING="-Wl,--allow-multiple-definition" \
  -DCMAKE_EXE_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition" \
  \
  -DBOOTSTRAP_CMAKE_BUILD_TYPE:STRING=Release \
  -DBOOTSTRAP_BUILD_SHARED_LIBS:BOOL=ON \
  -DBOOTSTRAP_LLVM_BUILD_STATIC=OFF \
  -DBOOTSTRAP_LIBCLANG_BUILD_STATIC:BOOL=OFF \
  -DBOOTSTRAP_LLVM_LINK_LLVM_DYLIB:BOOL=OFF \
  -DBOOTSTRAP_CLANG_LINK_CLANG_DYLIB:BOOL=OFF \
  -DBOOTSTRAP_LLVM_HOST_TRIPLE:STRING=$RUNPLATFORM \
  -DBOOTSTRAP_LLVM_TARGETS_TO_BUILD:STRING="X86;NVPTX;AMDGPU;ARM;AArch64" \
  -DBOOTSTRAP_CLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
  -DBOOTSTRAP_LLD_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
  -DBOOTSTRAP_FLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
  -DBOOTSTRAP_LLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;libclc;lld;lldbpstl;polly;mlir;parallel-libs" \
  -DBOOTSTRAP_LLVM_ENABLE_RUNTIMES:STRING="compiler-rt;libcxx;libcxxabi;libunwind;openmp" \
  -DBOOTSTRAP_LLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=OFF \
  -DBOOTSTRAP_LLVM_ENABLE_THREADS:BOOL=ON \
  -DBOOTSTRAP_CLANG_BUILD_TOOLS:BOOL=ON \
  -DBOOTSTRAP_CLANG_DEFAULT_RTLIB:STRING=compiler-rt \
  -DBOOTSTRAP_CLANG_DEFAULT_CXX_STDLIB:STRING=libc++ \
  -DBOOTSTRAP_CLANG_DEFAULT_OPENMP_RUNTIME:STRING=libomp \
  -DBOOTSTRAP_CLANG_DEFAULT_UNWINDLIB:STRING=libcxx \
  -DBOOTSTRAP_CLANG_ENABLE_PROTO_FUZZER:BOOL=OFF \
  -DBOOTSTRAP_CLANG_ENABLE_STATIC_ANALYZER:BOOL=ON \
  -DBOOTSTRAP_LIBCXX_ENABLE_ABI_LINKER_SCRIPT:BOOL=OFF \
  -DBOOTSTRAP_LIBCXX_HAS_WIN32_THREAD_API:BOOL=OFF \
  -DBOOTSTRAP_LIBCXX_HAS_PTHREAD_API:BOOL=ON \
  -DBOOTSTRAP_LIBCXX_CXX_ABI:STRING=libcxxabi \
  -DBOOTSTRAP_LIBCXXABI_ENABLE_NEW_DELETE_DEFINITIONS=ON \
  -DBOOTSTRAP_LLVM_ENABLE_LIBEDIT:BOOL=ON \
  -DBOOTSTRAP_LLDB_ENABLE_LIBEDIT:BOOL=ON \
  -DBOOTSTRAP_LibEdit_INCLUDE_DIRS:PATH=$MINGWPREFIX/include \
  -DBOOTSTRAP_LLDB_ENABLE_CURSES:BOOL=ON \
  -DBOOTSTRAP_LLDB_ENABLE_LIBXML2:BOOL=ON \
  -DBOOTSTRAP_LLDB_ENABLE_LUA:BOOL=ON \
  -DBOOTSTRAP_LLDB_ENABLE_LZMA:BOOL=ON \
  -DBOOTSTRAP_LLVM_ENABLE_EH:BOOL=ON \
  -DBOOTSTRAP_LLVM_ENABLE_RTTI:BOOL=ON \
  -DBOOTSTRAP_LLVM_ENABLE_MODULES:BOOL=OFF \
  -DBOOTSTRAP_LLVM_ENABLE_ASSERTIONS:BOOL=OFF \
  -DBOOTSTRAP_LLVM_ENABLE_FFI:BOOL=ON \
  -DBOOTSTRAP_LLVM_OPTIMIZED_TABLEGEN:BOOL=ON \
  -DBOOTSTRAP_LLVM_ENABLE_LIBXML2:BOOL=ON \
  -DBOOTSTRAP_LLVM_ENABLE_UNWIND_TABLES:BOOL=ON \
  -DBOOTSTRAP_LLVM_ENABLE_Z3_SOLVER:BOOL=ON \
  -DBOOTSTRAP_LLVM_INCLUDE_TOOLS:BOOL=ON \
  -DBOOTSTRAP_LLVM_INCLUDE_UTILS:BOOL=ON \
  -DBOOTSTRAP_LLVM_INSTALL_UTILS:BOOL=ON \
  -DBOOTSTRAP_LLVM_ENABLE_TERMINFO:BOOL=OFF \
  -DBOOTSTRAP_LLVM_ENABLE_LIBEDIT:BOOL=OFF \
  -DBOOTSTRAP_LLDB_ENABLE_LIBEDIT:BOOL=OFF \
  -DBOOTSTRAP_LLDB_ENABLE_CURSES:BOOL=ON \
  -DBOOTSTRAP_LLDB_ENABLE_LIBXML2:BOOL=ON \
  -DBOOTSTRAP_LLDB_ENABLE_LZMA:BOOL=ON \
  -DBOOTSTRAP_LLDB_ENABLE_PYTHON:BOOL=ON \
  -DBOOTSTRAP_LLVM_ENABLE_SPHINX=OFF \
  -DBOOTSTRAP_LLVM_INCLUDE_DOCS:BOOL=OFF \
  -DBOOTSTRAP_CLANG_INCLUDE_TESTS:BOOL=OFF \
  -DBOOTSTRAP_COMPILER_RT_INCLUDE_TESTS:BOOL=OFF \
  -DBOOTSTRAP_LLDB_INCLUDE_TESTS:BOOL=OFF \
  -DBOOTSTRAP_LLVM_INCLUDE_GO_TESTS:BOOL=OFF \
  -DBOOTSTRAP_LLVM_INCLUDE_TESTS:BOOL=OFF \
  -DBOOTSTRAP_LLVM_TOOL_LLVM_C_TEST_BUILD:BOOL=OFF \
  -DBOOTSTRAP_LLVM_INCLUDE_EXAMPLES:BOOL=OFF \
  -DBOOTSTRAP_LLVM_BUILD_BENCHMARKS:BOOL=OFF \
  -DBOOTSTRAP_LLVM_BUILD_TESTS:BOOL=OFF \
  -DBOOTSTRAP_BUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF \
  -DBOOTSTRAP_CLANG_PLUGIN_SUPPORT:BOOL=ON \
  -DBOOTSTRAP_CLANG_ENABLE_CLANGD:BOOL=ON \
  -DBOOTSTRAP_CLANG_TOOL_APINOTES_TEST_BUILD:BOOL=OFF \
  -DBOOTSTRAP_CLANG_TOOL_ARCMT_TEST_BUILD:BOOL=OFF \
  -DBOOTSTRAP_CLANG_TOOL_CLANG_IMPORT_TEST_BUILD:BOOL=OFF \
  -DBOOTSTRAP_CLANG_TOOL_C_ARCMT_TEST_BUILD:BOOL=OFF \
  -DBOOTSTRAP_CLANG_TOOL_C_INDEX_TEST_BUILD:BOOL=OFF \
  -DBOOTSTRAP_CLANG_INCLUDE_DOCS:BOOL=OFF \
  -DBOOTSTRAP_CLANG_BUILD_EXAMPLES:BOOL=OFF \
  -DBOOTSTRAP_LLD_BUILD_TOOLS:BOOL=ON \
  -DBOOTSTRAP_LLDB_TOOL_LLDB_SERVER_BUILD:BOOL=ON \
  -DBOOTSTRAP_LLDB_TOOL_LLDB_VSCODE_BUILD:BOOL=ON \
  -DBOOTSTRAP_LLVM_TOOL_OPENMP_BUILD:BOOL=ON \
  -DBOOTSTRAP_LLVM_TOOL_PARALLEL_LIBS_BUILD:BOOL=ON \
  -DBOOTSTRAP_CLANG_ENABLE_PROTO_FUZZER:BOOL=OFF \
  -DBOOTSTRAP_LLDB_DISABLE_PYTHON:BOOL=OFF \
  -DBOOTSTRAP_Python3_FIND_REGISTRY:BOOL=NEVER \
  -DBOOTSTRAP_Python3_EXECUTABLE:PATH=$MINGWPREFIX/share/python/bin/python3.exe \
  -DBOOTSTRAP_CMAKE_CXX_FLAGS:STRING="-Wl,--allow-multiple-definition" \
  -DBOOTSTRAP_CMAKE_EXE_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition" \
  -Sllvm -Bbuild_staged &&
 wl-showstatus build-install &&
 ninja -Cbuild_staged install/strip &&
    echo OK
#-DBOOTSTRAP_LIBCXX_ENABLE_SHARED:BOOL=ON \
#-DBOOTSTRAP_LIBCXX_ENABLE_STATIC:BOOL=ON \
#-DBOOTSTRAP_LIBCXX_USE_COMPILER_RT:BOOL=ON \
#-DBOOTSTRAP_LIBCXX_HAS_WIN32_THREAD_API:BOOL=ON \
#-DBOOTSTRAP_LIBCXX_HAS_PTHREAD_API:BOOL=OFF \
#-DBOOTSTRAP_LIBCXX_ENABLE_EXPERIMENTAL_LIBRARY:BOOL=OFF \
#-DBOOTSTRAP_LIBCXX_LIBDIR_SUFFIX="" \
#-DBOOTSTRAP_LIBCXX_INCLUDE_TESTS:BOOL=OFF \


















mkdir -p build_stage1 &&
 # build main LLVM suite
 wl-showstatus configure &&
 #libunwind;openmp;parallel-libs;polly;pstl;flang
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$PWD/stage1 -DCMAKE_BUILD_TYPE:STRING=Release \
  -DBUILD_SHARED_LIBS:BOOL=OFF \
  -DLLVM_BUILD_LLVM_DYLIB:BOOL=OFF \
  -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF \
  -DLLVM_BUILD_STATIC=OFF \
  -DLLVM_ENABLE_PROJECTS:STRING="clang;lld;libcxx;libcxxabi;libunwind;compiler-rt" \
  -DLLVM_TARGETS_TO_BUILD:STRING="X86" \
  -DLLVM_HOST_TRIPLE:STRING=$BUILDPLATFORM \
  -DLLVM_DEFAULT_TARGET_TRIPLE=$BUILDPLATFORM \
  -DLLVM_CCACHE_BUILD:BOOL=OFF \
  -DLLVM_ENABLE_MODULES:BOOL=OFF \
  -DLLVM_ENABLE_PLUGINS:BOOL=ON \
  -DLLVM_ENABLE_THREADS:BOOL=ON \
  -DLLVM_ENABLE_UNWIND_TABLES:BOOL=OFF \
  -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF \
  -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON \
  -DLLVM_ENABLE_LTO:STRING=OFF \
  -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) \
  -DLLVM_ENABLE_RTTI:BOOL=ON \
  -DLLVM_ENABLE_TERMINFO:BOOL=OFF \
  -DLLVM_ENABLE_Z3_SOLVER:BOOL=ON \
  -DLLVM_Z3_INSTALL_DIR:STRING=$MINGWPREFIX \
  -DLLVM_ENABLE_LIBXML2:BOOL=OFF \
  -DLLVM_ENABLE_PIC:BOOL=OFF \
  -DLLVM_USE_RELATIVE_PATHS_IN_DEBUG_INFO:BOOL=ON \
  -DLLVM_USE_RELATIVE_PATHS_IN_FILES:BOOL=ON \
  -DLLVM_INSTALL_BINUTILS_SYMLINKS:BOOL=OFF \
  -DLLVM_INSTALL_CCTOOLS_SYMLINKS:BOOL=OFF \
  -DLLVM_ENABLE_DOXYGEN:BOOL=OFF -DDOXYGEN_DOT_EXECUTABLE:FILEPATH= -DDOXYGEN_EXECUTABLE:FILEPATH= \
  -DLLVM_ENABLE_SPHINX=OFF \
  -DLLVM_BUILD_TOOLS:BOOL=OFF \
  -DLLVM_INCLUDE_DOCS:BOOL=OFF \
  -DLLVM_BUILD_EXAMPLES:BOOL=OFF \
  -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF \
  -DLLVM_INCLUDE_BENCHMARKS:BOOL=OFF \
  -DLLVM_INCLUDE_TESTS:BOOL=OFF \
  -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF \
  \
  -DLIBCXX_ENABLE_SHARED:BOOL=ON \
  -DLIBCXX_ENABLE_STATIC:BOOL=ON \
  -DLIBCXX_USE_COMPILER_RT:BOOL=OFF \
  -DLIBCXX_HAS_WIN32_THREAD_API:BOOL=ON \
  -DLIBCXX_HAS_PTHREAD_API:BOOL=OFF \
  -DLIBCXX_ENABLE_EXPERIMENTAL_LIBRARY:BOOL=OFF \
  -DLIBCXX_CXX_ABI=libcxxabi \
  -DLIBCXX_CXX_ABI_INCLUDE_PATHS=$PWD/libcxxabi/include \
  -DLIBCXX_CXX_ABI_LIBRARY_PATH:PATH=$PWD/build_libcxxabi/lib \
  -DLIBCXX_LIBDIR_SUFFIX="" \
  -DLIBCXX_INCLUDE_TESTS:BOOL=OFF \
  -DLIBCXX_ENABLE_ABI_LINKER_SCRIPT:BOOL=OFF \
  \
  -DLIBCXXABI_ENABLE_SHARED:BOOL=ON \
  -DLIBCXXABI_ENABLE_STATIC:BOOL=ON \
  -DLIBCXXABI_USE_COMPILER_RT:BOOL=OFF \
  -DLIBCXXABI_LIBCXX_INCLUDES:PATH=$PWD/build_libcxx/include/c++/v1 \
  -DLIBCXXABI_LIBDIR_SUFFIX="" \
  -DLIBCXXABI_ENABLE_EXCEPTIONS:BOOL=OFF \
  -DLIBCXXABI_ENABLE_ASSERTIONS:BOOL=OFF \
  -DLIBCXXABI_ENABLE_NEW_DELETE_DEFINITIONS=ON \
  \
  -DLIBUNWIND_ENABLE_SHARED:BOOL=ON \
  -DLIBUNWIND_ENABLE_STATIC:BOOL=ON \
  -DLIBUNWIND_USE_COMPILER_RT:BOOL=OFF \
  \
  -DCOMPILER_RT_USE_BUILTINS_LIBRARY:BOOL=OFF \
  -DCOMPILER_RT_DEFAULT_TARGET_ONLY:BOOL=OFF \
  \
  -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF \
  -DCLANG_PLUGIN_SUPPORT:BOOL=ON \
  -DCLANG_ENABLE_CLANGD:BOOL=ON \
  -DCLANG_DEFAULT_CXX_STDLIB:STRING=libc++ \
  -DCLANG_DEFAULT_RTLIB:STRING=compiler-rt \
  -DCLANG_DEFAULT_UNWINDLIB:STRING=none \
  -DCLANG_DEFAULT_OPENMP_RUNTIME:STRING=libomp \
  -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF \
  -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON \
  -DCLANG_TOOL_APINOTES_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_ARCMT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_C_ARCMT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_C_INDEX_TEST_BUILD:BOOL=OFF \
  -DCLANG_BUILD_TOOLS:BOOL=OFF \
  -DCLANG_INCLUDE_DOCS:BOOL=OFF \
  -DCLANG_BUILD_EXAMPLES:BOOL=OFF \
  -DCLANG_INCLUDE_TESTS:BOOL=OFF \
  \
  -DPython3_FIND_REGISTRY:BOOL=NEVER \
  -DPython3_EXECUTABLE:FILEPATH=$MINGWPREFIX/share/python/bin/python.exe \
  -Sllvm -Bbuild_stage1 &&
 #-DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;lld;lldb;libclc;pstl" \
 #-DLLVM_ENABLE_RUNTIMES:STRING="compiler-rt;libc;libcxx;libcxxabi;libunwind;openmp" \
 #-DCOMPILER_RT_USE_BUILTINS_LIBRARY:BOOL=ON 
 #-DLLVM_HOST_TRIPLE:STRING=$BUILDPLATFORM -DCOMPILER_RT_DEFAULT_TARGET_TRIPLE:STRING=$RUNPLATFORM -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLIBCXXABI_TARGET_TRIPLE:STRING=$RUNPLATFORM -DLIBUNWIND_TARGET_TRIPLE:STRING=$RUNPLATFORM 
 #-DCLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
 #-DLLD_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
 #-DFLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
 #-DCMAKE_C_FLAGS:STRING="-D_FORTIFY_SOURCE=0 -D__SSP_FORTIFY_LEVEL=0" \
 #-DCMAKE_CXX_FLAGS:STRING="-D_FORTIFY_SOURCE=0 -D__SSP_FORTIFY_LEVEL=0" \
 #-LLVM_BUILD_32_BITS:BOOL=ON \
 #-DLLVM_INSTALL_BINUTILS_SYMLINKS:BOOL=ON \
 #-DLLVM_INSTALL_CCTOOLS_SYMLINKS:BOOL=ON \
 #  + share/llvm/bin/addr2line.exe
 #  + share/llvm/bin/ar.exe
 #  + share/llvm/bin/bitcode_strip.exe
 #  + share/llvm/bin/c++filt.exe
 #  + share/llvm/bin/dlltool.exe
 #  + share/llvm/bin/dwp.exe
 #  + share/llvm/bin/install_name_tool.exe
 #  + share/llvm/bin/libtool.exe
 #  + share/llvm/bin/lipo.exe
 #  + share/llvm/bin/nm.exe
 #  + share/llvm/bin/objcopy.exe
 #  + share/llvm/bin/objdump.exe
 #  + share/llvm/bin/ranlib.exe
 #  + share/llvm/bin/readelf.exe
 #  + share/llvm/bin/size.exe
 #  + share/llvm/bin/strings.exe
 #  + share/llvm/bin/strip.exe
 #  + share/llvm/bin/windres.exe
 #-DCLANG_DEFAULT_UNWINDLIB:STRING=libcxx \
 #-DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF \
 #-DBUILD_SHARED_LIBS:BOOL=OFF #see also: https://llvm.org/docs/BuildingADistribution.html

 #-DCMAKE_C_COMPILER:FILEPATH=$(PATH=$MINGWPREFIX/share/llvm/bin:$PATH which clang.exe) \
 #-DCMAKE_CXX_COMPILER:FILEPATH=$(PATH=$MINGWPREFIX/share/llvm/bin:$PATH which clang++.exe) \
 #-DCMAKE_RC_COMPILER:FILEPATH=$(PATH=$MINGWPREFIX/share/llvm/bin:$PATH which windres.exe) \
 #-DCMAKE_ASM_MASM_COMPILER:FILEPATH=$(PATH=$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ml.exe) \
 #-DCMAKE_AR:FILEPATH=$(PATH=$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ar.exe) \
 #-DCMAKE_RANLIB:FILEPATH=$(PATH=$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ranlib.exe) \
 #-DCMAKE_EXE_LINKER_FLAGS:STRING="-L$MINGWPREFIX/share/llvm/lib" \
 #-DCMAKE_CXX_FLAGS:STRING="-I$MINGWPREFIX/share/llvm/include/c++/v1" \

 #-DCMAKE_ASM_COMPILER:STRING=yasm.exe \
 #-DCMAKE_ASM_MASM_COMPILER:STRING="jwasm.exe $(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "-win64"; else echo "-coff"; fi)" \
 #$(if which clang.exe &> /dev/null; then echo "-DCMAKE_C_COMPILER:FILEPATH=$(which clang.exe)"; fi) \
 #$(if which clang++.exe &> /dev/null; then echo "-DCMAKE_CXX_COMPILER:FILEPATH=$(which clang++.exe)"; fi) \
 #$(if which llvm-ranlib.exe &> /dev/null; then echo "-DCMAKE_C_COMPILER_RANLIB:FILEPATH=$(which llvm-ranlib.exe) -DCMAKE_CXX_COMPILER_RANLIB:FILEPATH=$(which llvm-ranlib.exe)"; fi) \
 #$(if which llvm-ar.exe &> /dev/null; then echo "-DCMAKE_C_COMPILER_AR:FILEPATH=$(which llvm-ar.exe) -DCMAKE_CXX_COMPILER_AR:FILEPATH=$(which llvm-ar.exe)"; fi) \
 #-DLLVM_TABLEGEN:STRING=$(which llvm-tblgen.exe 2> /dev/null) \
 ## don't use -fno-lto flag with yasm
 #sed -i.bak -e "s/\(yasm\.exe .*\) -fno-lto/\1/" build/compile_commands.json &&
 #sed -i.bak -e "s/-fno-lto//" build/build.ninja build/compile_commands.json
 ## fix missing -lgcc/-lgcc_s
 #sed -i.bak -e "s/-lgcc_s\|-lgcc//g" build/build.ninja &&
 ## fix missing link libraries
 #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -lpthread/" build/build.ninja &&
 wl-showstatus build-install &&
 ninja -Cbuild_stage1 install/strip &&
    echo OK

#  -DCLANG_DEFAULT_RTLIB:STRING=compiler-rt \
#  -DCOMPILER_RT_DEFAULT_TARGET_ONLY:BOOL=ON \
#  -DCOMPILER_RT_USE_BUILTINS_LIBRARY:BOOL=ON \
#  -DGCC_INSTALL_PREFIX=$(dirname $(dirname $(which gcc)))
# Needed wheb building with gcc:
#  -DLIBCXXABI_ENABLE_NEW_DELETE_DEFINITIONS=ON \


sed -i.bak "s?-lclang-cpp?-L$(cygpath -m $PWD/build_stage1/lib) -lclang?" build_stage1/build.ninja





















## fix compiler-rt/cmake/config-ix.cmake (version >= 13.0.0)
#patch -ulbf compiler-rt/cmake/config-ix.cmake << EOF
#@@ -196,3 +196,3 @@
#     NOT CMAKE_SIZEOF_VOID_P EQUAL 8)
#-  message(FATAL_ERROR "Please use architecture with 4 or 8 byte pointers.")
#+  message(WATNING "Please use architecture with 4 or 8 byte pointers.")
# endif()
#EOF
# fix detection of MSVC linker in compiler-rt/CMakeLists.txt (version >= 13.0.0)
patch -ulbf compiler-rt/CMakeLists.txt << EOF
@@ -570,3 +570,3 @@

-if (CMAKE_LINKER MATCHES "link.exe\$")
+if (CMAKE_LINKER MATCHES "link.exe\$" AND NOT CMAKE_LINKER MATCHES "llvm-link.exe\$")
   # Silence MSVC linker warnings caused by empty object files. The
EOF
mkdir -p build_stage1 &&
 # build native LLVM suite
 wl-showstatus configure &&
 #clang-tools-extra;libclc;libunwind;openmp;parallel-libs;polly;pstl;flang
 #-DLLVM_TARGETS_TO_BUILD:STRING="X86;ARM;AArch64" \
 #-DLIBCXX_CXX_ABI_LIBRARY_PATH:PATH=$PWD/build_libcxxabi/lib \
 #-DLIBCXXABI_LIBCXX_INCLUDES:PATH=$PWD/build_libcxx/include/c++/v1 \
 #-DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR:BOOL=ON \ #-> runtimes stored in lib/clang/$version/$target/lib (instead of lib/clang/$version/lib/$os)
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$PWD/stage1 -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
  -DBUILD_SHARED_LIBS:BOOL=OFF \
  -DLLVM_BUILD_LLVM_DYLIB:BOOL=OFF \
  -DCLANG_ENABLE_BOOTSTRAP:BOOL=OFF \
  -DLLVM_ENABLE_PROJECTS:STRING="clang;lld" \
  -DLLVM_ENABLE_RUNTIMES:STRING="libcxx;libcxxabi" \
  -DLLVM_TARGETS_TO_BUILD:STRING="X86;ARM;AArch64" \
  -DLLVM_HOST_TRIPLE:STRING=$BUILDPLATFORM \
  -DLLVM_DEFAULT_TARGET_TRIPLE:STRING=$RUNPLATFORM \
  -DLLVM_BUILD_STATIC=ON \
  -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF \
  -DLLVM_CCACHE_BUILD:BOOL=OFF \
  -DLLVM_ENABLE_MODULES:BOOL=OFF \
  -DLLVM_ENABLE_PLUGINS:BOOL=ON \
  -DLLVM_ENABLE_THREADS:BOOL=ON \
  -DLLVM_ENABLE_UNWIND_TABLES:BOOL=ON \
  -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF \
  -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON \
  -DLLVM_ENABLE_LTO:STRING=OFF \
  -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) \
  -DLLVM_ENABLE_RTTI:BOOL=ON \
  -DLLVM_ENABLE_TERMINFO:BOOL=OFF \
  -DLLVM_ENABLE_Z3_SOLVER:BOOL=ON \
  -DLLVM_Z3_INSTALL_DIR:STRING=$MINGWPREFIX \
  -DLLVM_ENABLE_FFI:BOOL=ON \
  -DLLVM_ENABLE_FFI:BOOL=ON \
  -DFFI_INCLUDE_DIR:PATH=$MINGWPREFIX/include \
  -DLLVM_ENABLE_LIBXML2:BOOL=ON \
  -DLLVM_ENABLE_PIC:BOOL=OFF \
  -DLLVM_USE_RELATIVE_PATHS_IN_DEBUG_INFO:BOOL=ON \
  -DLLVM_USE_RELATIVE_PATHS_IN_FILES:BOOL=ON \
  -DLLVM_INSTALL_BINUTILS_SYMLINKS:BOOL=OFF \
  -DLLVM_INSTALL_CCTOOLS_SYMLINKS:BOOL=OFF \
  -DLLVM_ENABLE_DOXYGEN:BOOL=OFF \
  -DLLVM_ENABLE_SPHINX=OFF \
  -DLLVM_INCLUDE_DOCS:BOOL=OFF \
  -DLLVM_BUILD_EXAMPLES:BOOL=OFF \
  -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF \
  -DLLVM_INCLUDE_BENCHMARKS:BOOL=OFF \
  -DLLVM_INCLUDE_TESTS:BOOL=OFF \
  \
  -DLIBCXX_ENABLE_SHARED:BOOL=OFF \
  -DLIBCXX_ENABLE_STATIC:BOOL=ON \
  -DLIBCXX_USE_COMPILER_RT:BOOL=ON \
  -DLIBCXX_HAS_WIN32_THREAD_API:BOOL=ON \
  -DLIBCXX_HAS_PTHREAD_API:BOOL=OFF \
  -DLIBCXX_ENABLE_EXPERIMENTAL_LIBRARY:BOOL=OFF \
  -DLIBCXX_CXX_ABI=libcxxabi \
  -DLIBCXX_CXX_ABI_INCLUDE_PATHS=$PWD/libcxxabi/include \
  -DLIBCXX_LIBDIR_SUFFIX="" \
  -DLIBCXX_INCLUDE_TESTS:BOOL=OFF \
  -DLIBCXX_ENABLE_ABI_LINKER_SCRIPT:BOOL=OFF \
  \
  -DLIBCXXABI_ENABLE_SHARED:BOOL=OFF \
  -DLIBCXXABI_ENABLE_STATIC:BOOL=ON \
  -DLIBCXXABI_USE_COMPILER_RT:BOOL=ON \
  -DLIBCXXABI_LIBDIR_SUFFIX="" \
  -DLIBCXXABI_ENABLE_EXCEPTIONS:BOOL=ON \
  -DLIBCXXABI_ENABLE_ASSERTIONS:BOOL=OFF \
  \
  -DLIBCLANG_BUILD_STATIC:BOOL=OFF \
  -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF \
  -DCLANG_PLUGIN_SUPPORT:BOOL=ON \
  -DCLANG_DEFAULT_RTLIB:STRING= \
  -DCLANG_DEFAULT_CXX_STDLIB:STRING=libc++ \
  -DCLANG_DEFAULT_UNWINDLIB:STRING=none \
  -DCLANG_DEFAULT_OPENMP_RUNTIME:STRING=libgomp \
  -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF \
  -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON \
  -DCLANG_TOOL_APINOTES_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_ARCMT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_C_ARCMT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_C_INDEX_TEST_BUILD:BOOL=OFF \
  -DCLANG_INCLUDE_DOCS:BOOL=OFF \
  -DCLANG_BUILD_EXAMPLES:BOOL=OFF \
  -DCLANG_INCLUDE_TESTS:BOOL=OFF \
  \
  -DCMAKE_C_FLAGS:STRING="-static-libgcc" \
  -DCMAKE_CXX_FLAGS:STRING="-static-libstdc++" \
  -DCMAKE_{SHARED,MODULE,EXE}_LINKER_FLAGS:STRING="-static-libgcc -static-libstdc++" \
  -DPython3_FIND_REGISTRY:BOOL=NEVER \
  -DPython3_EXECUTABLE:FILEPATH=$MINGWPREFIX/share/python/bin/python.exe \
  -Sllvm -Bbuild_stage1 &&
 wl-showstatus build-install &&
 #ninja -Cbuild_stage1 install/strip &&
 ( ninja -Cbuild_stage1 install/strip && ninja -j1 -Cbuild_stage1 install/strip ) &&
 cp -f stage1/bin/clang.exe stage1/bin/gcc_renamed_clang.exe &&
 cp -f stage1/bin/clang++.exe stage1/bin/g++_renamed_clang++.exe &&
    echo OK


# build native LLVM suite
mkdir -p build_llvm &&
 wl-showstatus configure &&
 #-DCMAKE_FIND_ROOT_PATH=
 #-DLLVM_HOST_TRIPLE=
 #-DCLANG_DEFAULT_UNWINDLIB:STRING=none \
 #-DLLVM_ENABLE_RUNTIMES:STRING="libunwind" \
 #-DCLANG_DEFAULT_UNWINDLIB:STRING=libunwind \
 #-DCMAKE_CXX_FLAGS:STRING="-fno-unwind-tables" \
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$PWD/stage1 -DCMAKE_BUILD_TYPE:STRING=Release \
  -DCMAKE_SYSTEM_NAME:STRING=Windows \
  -DCMAKE_CROSSCOMPILING:BOOL=ON \
  -DCROSS_TOOLCHAIN_FLAGS_NATIVE:STRING= \
  -DLLVM_LINK_LLVM_DYLIB:BOOL=ON \
  -DLLVM_ENABLE_PROJECTS:STRING="clang;lld" \
  -DLLVM_TARGETS_TO_BUILD:STRING="ARM;AArch64;X86" \
  -DLLVM_INSTALL_TOOLCHAIN_ONLY:BOOL=OFF \
  \
  -DLLVM_ENABLE_UNWIND_TABLES:BOOL=OFF \
  -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF \
  -DLLVM_ENABLE_RTTI:BOOL=ON \
  -DLLVM_ENABLE_EH:BOOL=ON \
  \
  -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM:STRING=NEVER \
  -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE:STRING=ONLY \
  -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY:STRING=ONLY \
  -DCLANG_DEFAULT_RTLIB:STRING=compiler-rt \
  -DCLANG_DEFAULT_UNWINDLIB:STRING=none \
  -DCLANG_DEFAULT_CXX_STDLIB:STRING=libc++ \
  -DCLANG_DEFAULT_LINKER:STRING=lld \
  -DTOOLCHAIN_ONLY:BOOL=ON \
  -Sllvm -Bbuild_llvm &&
 wl-showstatus build-install &&
 ninja -Cbuild_llvm install/strip &&
 cp -f stage1/bin/clang.exe stage1/bin/gcc_renamed_clang.exe &&
 cp -f stage1/bin/clang++.exe stage1/bin/g++_renamed_clang++.exe &&
    echo OK



#### see also: https://libcxx.llvm.org/BuildingLibcxx.html#bootstrapping-build

# build native LLVM suite
mkdir -p build_llvm &&
 wl-showstatus configure &&
 #-DCMAKE_FIND_ROOT_PATH=
 #-DLLVM_HOST_TRIPLE=
 #-DCLANG_DEFAULT_UNWINDLIB:STRING=none \
 #-DLLVM_ENABLE_RUNTIMES:STRING="libunwind" \
 #-DCLANG_DEFAULT_UNWINDLIB:STRING=libunwind \
 #-DCMAKE_CXX_FLAGS:STRING="-fno-unwind-tables" \
 #-DLLVM_RUNTIME_TARGETS="$(for arch in i686 x86_64 armv7 aarch64; do echo -n "$arch-w64-mingw32;"; done)" \
 #-DLLVM_RUNTIME_TARGETS="$(for arch in i686 x86_64 armv7 aarch64; do echo -n "$arch-pc-windows-gnu;"; done)" \
 #-DLLVM_RUNTIME_TARGETS="$(for arch in i686 x86_64 armv7 aarch64; do echo -n "$arch-w64-windows-gnu;"; done)" \
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$PWD/stage1 -DCMAKE_BUILD_TYPE:STRING=Release \
  -DCMAKE_SYSTEM_NAME:STRING=Windows \
  -DCMAKE_CROSSCOMPILING:BOOL=ON \
  -DCROSS_TOOLCHAIN_FLAGS_NATIVE:STRING= \
  -DLLVM_LINK_LLVM_DYLIB:BOOL=ON \
  -DLLVM_ENABLE_PROJECTS:STRING="clang;lld" \
  -DLLVM_ENABLE_RUNTIMES:STRING="compiler-rt;libcxx;libcxxabi;libunwind" \
  -DLLVM_TARGETS_TO_BUILD="ARM;AArch64;X86" \
  -DLLVM_RUNTIME_TARGETS="default$(for arch in i686 x86_64 armv7 aarch64; do echo -n ";$arch-w64-windows-gnu"; done)" \
  -DLLVM_INSTALL_TOOLCHAIN_ONLY:BOOL=OFF \
  \
  -DLLVM_ENABLE_UNWIND_TABLES:BOOL=OFF \
  -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF \
  -DLLVM_ENABLE_RTTI:BOOL=ON \
  -DLLVM_ENABLE_EH:BOOL=ON \
  \
  -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM:STRING=NEVER \
  -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE:STRING=ONLY \
  -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY:STRING=ONLY \
  -DCLANG_DEFAULT_RTLIB:STRING=compiler-rt \
  -DCLANG_DEFAULT_UNWINDLIB:STRING=none \
  -DCLANG_DEFAULT_CXX_STDLIB:STRING=libc++ \
  -DCLANG_DEFAULT_LINKER:STRING=lld \
  -DTOOLCHAIN_ONLY:BOOL=ON \
  -Sllvm -Bbuild_llvm &&
 wl-showstatus build-install &&
 ninja -Cbuild_llvm install-runtimes-stripped &&
 ninja -Cbuild_llvm install/strip &&
 cp -f stage1/bin/clang.exe stage1/bin/gcc_renamed_clang.exe &&
 cp -f stage1/bin/clang++.exe stage1/bin/g++_renamed_clang++.exe &&
    echo OK



# build native LLVM suite using bootstrapping/runtimes build
mkdir -p build_llvm &&
 wl-showstatus configure &&
 #-DCMAKE_FIND_ROOT_PATH=
 #-DLLVM_HOST_TRIPLE=
 #-DCLANG_DEFAULT_UNWINDLIB:STRING=none \
 #-DLLVM_ENABLE_RUNTIMES:STRING="libunwind" \
 #-DCLANG_DEFAULT_UNWINDLIB:STRING=libunwind \
 #-DCMAKE_CXX_FLAGS:STRING="-fno-unwind-tables" \
 #-DLIBCXX_TARGET_INFO="libcxx.test.target_info.MingwLocalTI" \
 #-DLLVM_RUNTIME_TARGETS="$(for arch in i686 x86_64 armv7 aarch64; do echo -n "$arch-w64-mingw32;"; done)" \
 #-DLLVM_RUNTIME_TARGETS="$(for arch in i686 x86_64 armv7 aarch64; do echo -n "$arch-pc-windows-gnu;"; done)" \
 #-DLLVM_RUNTIME_TARGETS="$(for arch in i686 x86_64 armv7 aarch64; do echo -n "$arch-w64-windows-gnu;"; done)" \
 #targets: wasm32/wasm64
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$PWD/stage1 -DCMAKE_BUILD_TYPE:STRING=Release \
  -DCMAKE_SYSTEM_NAME:STRING=Windows \
  -DCMAKE_CROSSCOMPILING:BOOL=ON \
  -DCROSS_TOOLCHAIN_FLAGS_NATIVE:STRING= \
  -DLLVM_LINK_LLVM_DYLIB:BOOL=ON \
  -DLLVM_ENABLE_PROJECTS:STRING="clang;lld" \
  -DLLVM_ENABLE_RUNTIMES:STRING="compiler-rt;libcxx;libcxxabi" \
  -DLLVM_TARGETS_TO_BUILD="ARM;AArch64;X86" \
  -DLLVM_RUNTIME_TARGETS="default$(for arch in i686 x86_64 armv7 aarch64; do echo -n ";$arch-w64-windows-gnu"; done)" \
  -DLLVM_INSTALL_TOOLCHAIN_ONLY:BOOL=OFF \
  \
  -DLLVM_ENABLE_UNWIND_TABLES:BOOL=OFF \
  -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF \
  -DLLVM_ENABLE_RTTI:BOOL=ON \
  -DLLVM_ENABLE_EH:BOOL=ON \
  \
  -DLIBCXX_ENABLE_EXCEPTIONS:BOOL=ON \
  -DLIBCXX_HAS_WIN32_THREAD_API:BOOL=ON \
  -DLIBCXX_CXX_ABI:STRING=libstdc++ \
  -DLIBCXXABI_USE_LLVM_UNWINDER:BOOL=ON \
  -DCOMPILER_RT_USE_BUILTINS_LIBRARY=OFF \
  -DCOMPILER_RT_BUILD_BUILTINS:BOOL=ON \
  \
  -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM:STRING=NEVER \
  -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE:STRING=ONLY \
  -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY:STRING=ONLY \
  -DCLANG_DEFAULT_RTLIB:STRING=compiler-rt \
  -DCLANG_DEFAULT_UNWINDLIB:STRING=none \
  -DCLANG_DEFAULT_CXX_STDLIB:STRING=libc++ \
  -DCLANG_DEFAULT_LINKER:STRING=lld \
  -DTOOLCHAIN_ONLY:BOOL=ON \
  -DCMAKE_ASM_COMPILER_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
  -DCMAKE_ASM_COMPILER_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
  -DCMAKE_C_COMPILER:FILEPATH=$PWD/stage1/bin/clang.exe \
  -DCMAKE_C_COMPILER_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
  -DCMAKE_C_COMPILER_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
  -DCMAKE_CXX_COMPILER:FILEPATH=$PWD/stage1/bin/clang++.exe \
  -DCMAKE_CXX_COMPILER_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
  -DCMAKE_CXX_COMPILER_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
  -DCMAKE_RC_COMPILER:FILEPATH=$PWD/stage1/bin/llvm-windres.exe \
  -DCMAKE_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
  -DCMAKE_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
  -DCMAKE_READELF:FILEPATH=$PWD/stage1/bin/llvm-readelf.exe \
  -DCMAKE_DLLTOOL:FILEPATH=$PWD/stage1/bin/llvm-dlltool.exe \
  -DCMAKE_NM:FILEPATH=$PWD/stage1/bin/llvm-nm.exe \
  -DCMAKE_OBJCOPY:FILEPATH=$PWD/stage1/bin/llvm-objcopy.exe \
  -DCMAKE_OBJDUMP:FILEPATH=$PWD/stage1/bin/llvm-objdump.exe \
  -DCMAKE_LINKER:FILEPATH=$PWD/stage1/bin/llvm-link.exe \
  -DCMAKE_STRIP:FILEPATH=$PWD/stage1/bin/llvm-strip.exe \
  -DGOLD_EXECUTABLE:FILEPATH=$PWD/stage1/bin/ld.lld.exe \
  -DCMAKE_ASM_FLAGS:STRING="-fuse-ld=lld" \
  -DCMAKE_C_FLAGS:STRING="-fuse-ld=lld" \
  -DCMAKE_CXX_FLAGS:STRING="-fuse-ld=lld" \
  -DCMAKE_{SHARED,MODULE,EXE}_LINKER_FLAGS:STRING="-fuse-ld=lld" \
  -Sllvm -Bbuild_llvm &&
  # -rtlib=compiler-rt -stdlib=libc++
 wl-showstatus build-install &&
 ninja -Cbuild_llvm install-runtimes-stripped &&
 ninja -Cbuild_llvm install/strip &&
 cp -f stage1/bin/clang.exe stage1/bin/gcc_renamed_clang.exe &&
 cp -f stage1/bin/clang++.exe stage1/bin/g++_renamed_clang++.exe &&
    echo OK



 # build MinGW-w64 headers
 mkdir -p build_mingw-w64_headers &&
 wl-showstatus configure &&
 cd build_mingw-w64_headers &&
 $MINGWPREFIX/src/mingw-w64/mingw-w64-headers/configure --prefix=$PWD/../stage1 \
  --build=$BUILDPLATFORM \
  --host=$RUNPLATFORM \
  --with-default-win32-winnt=0x0600 \
  --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrt"; else echo "msvcrt-os"; fi) \
  --enable-sdk=all \
  --enable-idl \
  &&
 cd .. &&
 wl-showstatus build-install &&
 make -Cbuild_mingw-w64_headers install-strip &&

 # build MinGW-w64
 mkdir -p build_mingw-w64 &&
 wl-showstatus configure &&
 cd build_mingw-w64 &&
 $MINGWPREFIX/src/mingw-w64/configure --prefix=$PWD/../stage1_mingw-w64 \
  --build=$BUILDPLATFORM \
  --host=$RUNPLATFORM \
  --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrt"; else echo "msvcrt-os"; fi) \
  --without-libraries \
  --with-tools=all \
  --enable-sdk=all \
  --enable-secure-api \
  --enable-wildcard \
  --enable-lib32 \
  --enable-lib64 \
  --enable-libarm32 \
  --enable-libarm64 \
  --with-default-win32-winnt=0x0600 \
  --enable-idl \
  --without-genlib \
  --without-gnu-ld \
  --with-sysroot=$PWD/../stage1 \
  LIBX8632SUFFIXDIR=libx8632 \
  LIBX8664SUFFIXDIR=libx8664 \
  LIBARM32SUFFIXDIR=libarm32 \
  LIBARM64SUFFIXDIR=libarm64 \
  CC="$PWD/../stage1/bin/gcc_renamed_clang.exe -fuse-ld=lld" \
  CXX="$PWD/../stage1/bin/g++_renamed_clang++.exe -fuse-ld=lld" \
  AS="$PWD/../stage1/bin/llvm-as.exe" \
  LD="$PWD/../stage1/bin/lld-link.exe" \
  DLLTOOL="$PWD/../stage1/bin/llvm-dlltool.exe" \
  AR="$PWD/../stage1/bin/llvm-ar.exe" \
  RANLIB="$PWD/../stage1/bin/llvm-ranlib.exe" \
  RC="$PWD/../stage1/bin/llvm-windres.exe" \
  NM="$PWD/../stage1/bin/llvm-nm.exe" \
  OBJDUMP="$PWD/../stage1/bin/llvm-objdump.exe" \
  &&
  #--with-libraries=winpthreads,winstorecompat 
  #--libdir=$PWD/../stage1_mingw-w64/$(case $(echo $RUNPLATFORM|sed -e "s/^\([^-]*\).*$/\1/") in i686) echo "lib32";; x86_64) echo "lib64";; armv7) echo "libarm32";; aarch64) echo "libarm64";; esac) \
  #CFLAGS="-I$PWD/../stage1/lib/clang/$(echo $VERSION|sed -e "s/\([0-9]*\.[0-9]*\.[0-9]*\).*$/\1/")/include -I$PWD/../stage1_mingw-w64/include" \
  #CFLAGS="-I$PWD/../stage1_mingw-w64/include -D_FORTIFY_SOURCE=0 -fno-stack-protector" \
  #CFLAGS="-I$PWD/../stage1/include -I$PWD/../stage1/include/$BUILDPLATFORM/c++/v1 -I$PWD/../stage1/include/c++/v1" \
  #LDFLAGS="-L$PWD/../stage1/lib -Wl,-no-undefined" \
 cd .. &&
 ## fix link issues in build_mingw-w64/mingw-w64-libraries/winpthreads/
 #sed -i.bak -e "s?\(-o \)\([^ ]*\)\(.*\) -link \(-dll\)?-shared -s -mwindows \1.libs/libwinpthread-1.dll -Wl,--out-implib,\2 \3 \4?" build_mingw-w64/mingw-w64-libraries/winpthreads/libtool &&
 #sed -i.bak -e "s?\$(AM_V_CCLD).*\$(libwinpthread_la_OBJECTS).*?& \&\& \$(AR) \$(ARFLAGS) .libs/libwinpthread.a \$(libwinpthread_la_OBJECTS:.lo=.o) \&\& cp -f .libs/libwinpthread.a .libs/libwinpthread.lib?" build_mingw-w64/mingw-w64-libraries/winpthreads/Makefile &&
 #wl-showstatus build &&
 #( make -Cbuild_mingw-w64 || make -Cbuild_mingw-w64 CC="$PWD/stage1/bin/clang.exe -fuse-ld=lld -fno-integrated-as" ) &&
 wl-showstatus build-install &&
 #make -Cbuild_mingw-w64/mingw-w64-headers install-strip &&
 make -Cbuild_mingw-w64/mingw-w64-crt install-libarm32LIBRARIES CFLAGS="-target armv7-w64-mingw32 -march=armv7-a -mtune=armv7-a+vfpv4+neon+thumb2 -D__arm__" CCASFLAGS="-target armv7-w64-mingw32 -march=armv7-a -mtune=armv7-a+vfpv4+neon+thumb2" &&
 make -Cbuild_mingw-w64/mingw-w64-crt install-libarm64LIBRARIES CFLAGS="-target aarch64-w64-mingw32 -mtune=cortex-a57 -D__aarch64__" CCASFLAGS="-target aarch64-w64-mingw32 -mtune=cortex-a57" &&
 #make -Cbuild_mingw-w64/mingw-w64-crt install-strip &&
 make -Cbuild_mingw-w64 install-strip &&
 ## rename libwinpthread.lib to libwinpthread.a
 #for F in stage1_mingw-w64/lib*/libwinpthread.lib; do
 # mv -f $F $(echo $F|sed -e "s/\.lib$/.a/")
 #done &&
 # copy to target folders
 for D in stage1_mingw-w64/lib*; do
  case $(basename $D) in
   lib)
    arch=$(echo $RUNPLATFORM|sed -e "s/^\([^-]*\).*$/\1/")
    ;;
   lib32)
    arch=i686
    ;;
   lib64)
    arch=x86_64
    ;;
   libarm32)
    arch=armv7
    ;;
   libarm64)
    arch=aarch64
    ;;
   *)
    echo ERROR: unknown architecture for $D
    ;;
  esac &&
  mkdir -p stage1/$arch-w64-mingw32/lib &&
  cp -rf $D/* stage1/$arch-w64-mingw32/lib
  #mkdir -p stage1/$arch-w64-windows-gnu/lib &&
  #cp -rf $D/* stage1/$arch-w64-windows-gnu/lib
 done &&
    echo OK

# build MinGW-w64 winpthreads library
 for arch in i686 x86_64 armv7 aarch64; do
  mkdir -p build_mingw-w64_winpthreads_$arch &&
  wl-showstatus configure &&
  cd build_mingw-w64_winpthreads_$arch &&
  $MINGWPREFIX/src/mingw-w64/mingw-w64-libraries/winpthreads/configure --prefix=$PWD/../mingw-w64_winpthreads_$arch \
   --build=$BUILDPLATFORM \
   --host=$arch-w64-mingw32 \
   --with-sysroot=$PWD/../stage1 \
   --without-gnu-ld \
   CC="$PWD/../stage1/bin/gcc_renamed_clang.exe -fuse-ld=lld -target $arch-w64-mingw32 $(if [ "$arch" == "armv7" ]; then echo "-march=armv7-a -mtune=armv7-a+vfpv4+neon+thumb2"; fi)" \
   CXX="$PWD/../stage1/bin/g++_renamed_clang++.exe -fuse-ld=lld -target $arch-w64-mingw32" \
   AS="$PWD/../stage1/bin/llvm-as.exe" \
   LD="$PWD/../stage1/bin/lld-link.exe" \
   DLLTOOL="$PWD/../stage1/bin/llvm-dlltool.exe" \
   AR="$PWD/../stage1/bin/llvm-ar.exe" \
   RANLIB="$PWD/../stage1/bin/llvm-ranlib.exe" \
   RC="$PWD/../stage1/bin/llvm-windres.exe --target=$arch-w64-mingw32" \
   NM="$PWD/../stage1/bin/llvm-nm.exe" \
   OBJDUMP="$PWD/../stage1/bin/llvm-objdump.exe" \
   CFLAGS="-I$PWD/mingw-w64-$arch/include" \
   CCASFLAGS="-I$PWD/mingw-w64-$arch/include" \
   LDFLAGS="$(if [ "$arch" == "armv7" ]; then echo "-lmingwex"; fi)" \
   &&
   #CFLAGS="-I$PWD/../stage1/include -I$PWD/../stage1/include/$RUNPLATFORM/c++/v1 -I$PWD/../stage1/include/c++/v1 $(if [ "$arch" == "aarch64" ]; then echo "-D__aarch64__"; fi)" \
   #LDFLAGS="-L$PWD/../stage1/lib -Wl,-no-undefined" \
  cd .. &&
  #-rtlib=compiler-rt -unwindlib=libunwind -stdlib=libc++ 
  #-Wl,-m,$(case $arch in i686) echo "i386pe";; x86_64) echo "i386pep";; armv7) echo "thumb2pe";; aarch64) echo "arm64pe";; esac)
  # fix detection of shared libraries
  sed -i.bak2 -e "s/\(deplibs_check_method=\"\)[^\"]*/\1pass_all/" build_mingw-w64_winpthreads_$arch/libtool &&
  # fix link issues in build_mingw-w64/mingw-w64-libraries/winpthreads/
  sed -i.bak -e "s?\(-o \)\([^ ]*\)\(.*\) -link \(-dll\)?-shared -s -mwindows \1.libs/libwinpthread-1.dll -Wl,--out-implib,\2 \3 \4?" build_mingw-w64_winpthreads_$arch/libtool &&
  sed -i.bak -e "s?\$(AM_V_CCLD).*\$(libwinpthread_la_OBJECTS).*?& \&\& \$(AR) \$(ARFLAGS) .libs/libwinpthread.a \$(libwinpthread_la_OBJECTS:.lo=.o) \&\& cp -f .libs/libwinpthread.a .libs/libwinpthread.lib?" build_mingw-w64_winpthreads_$arch/Makefile &&
  wl-showstatus build-install &&
  # build include files and make them available
  make -Cbuild_mingw-w64_winpthreads_$arch install-strip &&
  mkdir -p stage1/$arch-w64-mingw32 &&
  cp -rf mingw-w64_winpthreads_$arch/* stage1/$arch-w64-mingw32/ &&
  #mkdir -p stage1/lib/$arch-w64-mingw32 &&
  #cp -rf mingw-w64_winpthreads_$arch/* stage1/lib/$arch-w64-mingw32/ &&
  ##mkdir -p stage1/$arch-w64-windows-gnu/lib &&
  ##cp -rf mingw-w64_winpthreads_$arch/lib/* stage1/$arch-w64-windows-gnu/lib/ &&
  touch SUCCESS_$arch || break
 done &&
 if [ $(ls -1 SUCCESS_*|wc -l) -ne 4 ]; then false; fi &&
 rm -f SUCCESS_* &&
    echo OK



 # build MinGW-w64
 for arch in i686 x86_64 armv7 aarch64; do
  mkdir -p build_mingw-w64_$arch &&
  wl-showstatus configure &&
  cd build_mingw-w64_$arch &&
  $MINGWPREFIX/src/mingw-w64/configure --prefix=$PWD/../stage1_mingw-w64_$arch \
   --build=$BUILDPLATFORM \
   --host=$RUNPLATFORM \
   --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrt"; else echo "msvcrt-os"; fi) \
   --without-libraries \
   --without-tools \
   --enable-sdk=all \
   --enable-secure-api \
   --enable-wildcard \
   --$(if [ "$arch" == "i686" ]; then echo "enable"; else echo "disable"; fi)-lib32 \
   --$(if [ "$arch" == "x86_64" ]; then echo "enable"; else echo "disable"; fi)-lib64 \
   --$(if [ "$arch" == "armv7" ]; then echo "enable"; else echo "disable"; fi)-libarm32 \
   --$(if [ "$arch" == "aarch64" ]; then echo "enable"; else echo "disable"; fi)-libarm64 \
   --with-default-win32-winnt=0x0600 \
   --enable-idl \
   --without-genlib \
   --without-gnu-ld \
   --with-sysroot=$PWD/../stage1 \
   CC="$PWD/../stage1/bin/gcc_renamed_clang.exe -fuse-ld=lld -target $arch-w64-mingw32" \
   CXX="$PWD/../stage1/bin/g++_renamed_clang++.exe -fuse-ld=lld -target $arch-w64-mingw32" \
   AS="$PWD/../stage1/bin/llvm-as.exe -target $arch-w64-mingw32" \
   LD="$PWD/../stage1/bin/lld-link.exe" \
   DLLTOOL="$PWD/../stage1/bin/llvm-dlltool.exe" \
   AR="$PWD/../stage1/bin/llvm-ar.exe" \
   RANLIB="$PWD/../stage1/bin/llvm-ranlib.exe" \
   RC="$PWD/../stage1/bin/llvm-windres.exe" \
   NM="$PWD/../stage1/bin/llvm-nm.exe" \
   OBJDUMP="$PWD/../stage1/bin/llvm-objdump.exe" \
   &&
   #$(if echo $RUNPLATFORM|grep -q "^$arch"; then echo "--with-tools=all"; else echo "--without-tools"; fi) \
   #--with-libraries=winpthreads,winstorecompat 
   #--libdir=$PWD/../stage1_mingw-w64/$(case $(echo $RUNPLATFORM|sed -e "s/^\([^-]*\).*$/\1/") in i686) echo "lib32";; x86_64) echo "lib64";; armv7) echo "libarm32";; aarch64) echo "libarm64";; esac) \
   #CFLAGS="-I$PWD/../stage1/lib/clang/$(echo $VERSION|sed -e "s/\([0-9]*\.[0-9]*\.[0-9]*\).*$/\1/")/include -I$PWD/../stage1_mingw-w64/include" \
   #CFLAGS="-I$PWD/../stage1_mingw-w64/include -D_FORTIFY_SOURCE=0 -fno-stack-protector" \
   #CFLAGS="-I$PWD/../stage1/include -I$PWD/../stage1/include/$BUILDPLATFORM/c++/v1 -I$PWD/../stage1/include/c++/v1" \
   #LDFLAGS="-L$PWD/../stage1/lib -Wl,-no-undefined" \
   #DLLTOOL="$PWD/../stage1/bin/llvm-dlltool.exe -m $(case $arch in i686) echo "i386";; x86_64) echo "i386:x86-64";; armv7) echo "arm";; aarch64) echo "arm64";; esac)" \
  cd .. &&
  ## fix link issues in build_mingw-w64/mingw-w64-libraries/winpthreads/
  #sed -i.bak -e "s?\(-o \)\([^ ]*\)\(.*\) -link \(-dll\)?-shared -s -mwindows \1.libs/libwinpthread-1.dll -Wl,--out-implib,\2 \3 \4?" build_mingw-w64/mingw-w64-libraries/winpthreads/libtool &&
  #sed -i.bak -e "s?\$(AM_V_CCLD).*\$(libwinpthread_la_OBJECTS).*?& \&\& \$(AR) \$(ARFLAGS) .libs/libwinpthread.a \$(libwinpthread_la_OBJECTS:.lo=.o) \&\& cp -f .libs/libwinpthread.a .libs/libwinpthread.lib?" build_mingw-w64/mingw-w64-libraries/winpthreads/Makefile &&
  # fix llvm-dlltool arguments
  sed -i.bak -e "s/--as\(-flags\)*=[^ ]*//" build_mingw-w64_$arch/mingw-w64-crt/Makefile &&
  #wl-showstatus build &&
  #( make -Cbuild_mingw-w64_$arch || make -Cbuild_mingw-w64_$arch CC="$PWD/stage1/bin/clang.exe -fuse-ld=lld -fno-integrated-as" ) &&
  wl-showstatus build-install &&
  #make -Cbuild_mingw-w64_$arch/mingw-w64-headers install-strip &&
  #make -Cbuild_mingw-w64_$arch/mingw-w64-crt install-libarm32LIBRARIES CFLAGS="-target armv7-w64-mingw32 -march=armv7-a -mtune=armv7-a+vfpv4+neon+thumb2 -D__arm__" CCASFLAGS="-target armv7-w64-mingw32 -march=armv7-a -mtune=armv7-a+vfpv4+neon+thumb2" &&
  #make -Cbuild_mingw-w64_$arch/mingw-w64-crt install-libarm64LIBRARIES CFLAGS="-target aarch64-w64-mingw32 -mtune=cortex-a57 -D__aarch64__" CCASFLAGS="-target aarch64-w64-mingw32 -mtune=cortex-a57" &&
  #make -Cbuild_mingw-w64_$arch/mingw-w64-crt install-strip &&
  make -Cbuild_mingw-w64_$arch install-strip &&
  ## rename libwinpthread.lib to libwinpthread.a
  #for F in stage1_mingw-w64/lib*/libwinpthread.lib; do
  # mv -f $F $(echo $F|sed -e "s/\.lib$/.a/")
  #done &&
  # copy to target folders
  for D in stage1_mingw-w64/lib*; do
   case $(basename $D) in
    lib)
     arch=$(echo $RUNPLATFORM|sed -e "s/^\([^-]*\).*$/\1/")
     ;;
    lib32)
     arch=i686
     ;;
    lib64)
     arch=x86_64
     ;;
    libarm32)
     arch=armv7
     ;;
    libarm64)
     arch=aarch64
     ;;
    *)
     echo ERROR: unknown architecture for $D
     ;;
   esac &&
   mkdir -p stage1/$arch-w64-mingw32/lib &&
   cp -rf $D/* stage1/$arch-w64-mingw32/lib
   #mkdir -p stage1/$arch-w64-windows-gnu/lib &&
   #cp -rf $D/* stage1/$arch-w64-windows-gnu/lib
  done &&
  touch SUCCESS_$arch || break
 done &&
 if [ $(ls -1 SUCCESS_*|wc -l) -ne 4 ]; then false; fi &&
 rm -f SUCCESS_* &&
    echo OK




 # build MinGW-w64 headers
 mkdir -p build_mingw-w64_headers &&
 wl-showstatus configure &&
 cd build_mingw-w64_headers &&
 $MINGWPREFIX/src/mingw-w64/mingw-w64-headers/configure --prefix=$PWD/../mingw-w64_headers \
  --build=$BUILDPLATFORM \
  --host=$RUNPLATFORM \
  --with-default-win32-winnt=0x0600 \
  --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrt"; else echo "msvcrt-os"; fi) \
  --enable-sdk=all \
  --enable-idl \
  &&
  #CC="$PWD/../stage1/bin/gcc_renamed_clang.exe -fuse-ld=lld" \
  #CXX="$PWD/../stage1/bin/g++_renamed_clang++.exe -fuse-ld=lld" \
  #AS="$PWD/../stage1/bin/llvm-as.exe" \
  #LD="$PWD/../stage1/bin/lld-link.exe" \
  #DLLTOOL="$PWD/../stage1/bin/llvm-dlltool.exe" \
  #AR="$PWD/../stage1/bin/llvm-ar.exe" \
  #RANLIB="$PWD/../stage1/bin/llvm-ranlib.exe" \
  #RC="$PWD/../stage1/bin/llvm-windres.exe" \
  #NM="$PWD/../stage1/bin/llvm-nm.exe" \
  #OBJDUMP="$PWD/../stage1/bin/llvm-objdump.exe" \
  #CFLAGS="-I$PWD/mingw-w64-$arch/include" \
  #CCASFLAGS="-I$PWD/mingw-w64-$arch/include" \
 cd .. &&
 wl-showstatus build-install &&
 make -Cbuild_mingw-w64_headers install-strip &&
 cp -rf mingw-w64_headers/include/* stage1/include/ &&

 # build MinGW-w64 crt libraries
 for arch in i686 x86_64 armv7 aarch64; do
  mkdir -p build_mingw-w64_crt_$arch &&
  wl-showstatus configure &&
  cd build_mingw-w64_crt_$arch &&
  $MINGWPREFIX/src/mingw-w64/mingw-w64-crt/configure --prefix=$PWD/../mingw-w64_crt_$arch \
   --build=$BUILDPLATFORM \
   --host=$arch-w64-mingw32 \
   --$(if [ "$arch" == "i686" ]; then echo "enable"; else echo "disable"; fi)-lib32 \
   --$(if [ "$arch" == "x86_64" ]; then echo "enable"; else echo "disable"; fi)-lib64 \
   --$(if [ "$arch" == "armv7" ]; then echo "enable"; else echo "disable"; fi)-libarm32 \
   --$(if [ "$arch" == "aarch64" ]; then echo "enable"; else echo "disable"; fi)-libarm64 \
   --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrt"; else echo "msvcrt-os"; fi) \
   --enable-wildcard \
   --disable-delay-import-libs \
   --disable-experimental \
   --without-genlib \
   CC="$PWD/../stage1/bin/gcc_renamed_clang.exe -target $arch-w64-mingw32 -fuse-ld=lld" \
   CXX="$PWD/../stage1/bin/g++_renamed_clang++.exe -target $arch-w64-mingw32 -fuse-ld=lld" \
   AS="$PWD/../stage1/bin/llvm-as.exe" \
   LD="$PWD/../stage1/bin/lld-link.exe" \
   DLLTOOL="$PWD/../stage1/bin/llvm-dlltool.exe" \
   AR="$PWD/../stage1/bin/llvm-ar.exe" \
   RANLIB="$PWD/../stage1/bin/llvm-ranlib.exe" \
   RC="$PWD/../stage1/bin/llvm-windres.exe --target=$arch-w64-mingw32" \
   NM="$PWD/../stage1/bin/llvm-nm.exe" \
   OBJDUMP="$PWD/../stage1/bin/llvm-objdump.exe" \
   CFLAGS="-I$PWD/mingw-w64-$arch/include" \
   CCASFLAGS="-I$PWD/mingw-w64-$arch/include" \
   &&
   #CFLAGS="-I$PWD/../stage1/include -I$PWD/../stage1/include/$RUNPLATFORM/c++/v1 -I$PWD/../stage1/include/c++/v1 $(if [ "$arch" == "aarch64" ]; then echo "-D__aarch64__"; fi)" \
   #LDFLAGS="-L$PWD/../stage1/lib -Wl,-no-undefined" \
  cd .. &&
  #-rtlib=compiler-rt -unwindlib=libunwind -stdlib=libc++ 
  wl-showstatus build-install &&
  # build include files and make them available
  make -Cbuild_mingw-w64_crt_$arch install-strip &&
  mkdir -p stage1/$arch-w64-mingw32 &&
  cp -rf mingw-w64_crt_$arch/* stage1/$arch-w64-mingw32/ &&
  #mkdir -p stage1/lib/$arch-w64-mingw32 &&
  #cp -rf mingw-w64_crt_$arch/lib/* stage1/lib/$arch-w64-mingw32/ &&
  #mkdir -p stage1/$arch-w64-windows-gnu/lib &&
  #cp -rf mingw-w64_crt_$arch/lib/* stage1/$arch-w64-windows-gnu/lib/ &&
  touch SUCCESS_$arch || break
 done &&
 if [ $(ls -1 SUCCESS_*|wc -l) -ne 4 ]; then false; fi &&
 rm -f SUCCESS_* &&
    echo OK



 mkdir -p build_compiler-rt &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$PWD/stage1 -DCMAKE_BUILD_TYPE:STRING=Release \
  -DBUILD_SHARED_LIBS:BOOL=ON \
  -DLLVM_TARGETS_TO_BUILD:STRING="X86;ARM;AArch64;NVPTX;AMDGPU;WebAssembly" \
  -DCOMPILER_RT_DEFAULT_TARGET_TRIPLE:STRING=$RUNPLATFORM \
  -DCOMPILER_RT_DEFAULT_TARGET_ONLY:BOOL=OFF \
  -DCOMPILER_RT_USE_LIBCXX:BOOL=ON \
  -DCOMPILER_RT_USE_BUILTINS_LIBRARY=OFF \
  -DCOMPILER_RT_BUILD_BUILTINS:BOOL=ON \
  -DCOMPILER_RT_BUILD_SANITIZERS:BOOL=OFF \
  -DCOMPILER_RT_BUILD_LIBFUZZER:BOOL=OFF \
  -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF \
  -DCOMPILER_RT_CAN_EXECUTE_TESTS:BOOL=OFF \
  -DLLVM_MAIN_SRC_DIR:PATH=$PWD/llvm \
  -DLLVM_CONFIG_PATH:PATH=$PWD/stage1/bin/llvm-config.exe \
  -DCMAKE_ASM_COMPILER_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
  -DCMAKE_ASM_COMPILER_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
  -DCMAKE_C_COMPILER:FILEPATH=$PWD/stage1/bin/clang.exe \
  -DCMAKE_C_COMPILER_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
  -DCMAKE_C_COMPILER_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
  -DCMAKE_CXX_COMPILER:FILEPATH=$PWD/stage1/bin/clang++.exe \
  -DCMAKE_CXX_COMPILER_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
  -DCMAKE_CXX_COMPILER_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
  -DCMAKE_RC_COMPILER:FILEPATH=$PWD/stage1/bin/llvm-windres.exe \
  -DCMAKE_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
  -DCMAKE_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
  -DCMAKE_READELF:FILEPATH=$PWD/stage1/bin/llvm-readelf.exe \
  -DCMAKE_DLLTOOL:FILEPATH=$PWD/stage1/bin/llvm-dlltool.exe \
  -DCMAKE_NM:FILEPATH=$PWD/stage1/bin/llvm-nm.exe \
  -DCMAKE_OBJCOPY:FILEPATH=$PWD/stage1/bin/llvm-objcopy.exe \
  -DCMAKE_OBJDUMP:FILEPATH=$PWD/stage1/bin/llvm-objdump.exe \
  -DCMAKE_LINKER:FILEPATH=$PWD/stage1/bin/llvm-link.exe \
  -DCMAKE_STRIP:FILEPATH=$PWD/stage1/bin/llvm-strip.exe \
  -DGOLD_EXECUTABLE:FILEPATH=$PWD/stage1/bin/ld.lld.exe \
  -DCMAKE_C_FLAGS:STRING="-fuse-ld=lld -rtlib=compiler-rt" \
  -DCMAKE_CXX_FLAGS:STRING="-fuse-ld=lld -stdlib=libc++ -I$PWD/stage1/include/c++/v1" \
  -DCMAKE_{SHARED,MODULE,EXE}_LINKER_FLAGS:STRING="-L$PWD/build_mingw-w64/mingw-w64-libraries/winpthreads/fakelib" \
  -DPython3_EXECUTABLE:FILEPATH=$PYDIR/python.exe -Scompiler-rt -Bbuild_compiler-rt &&
 #-DCMAKE_ASM_MASM_COMPILER:FILEPATH=$PWD/stage1/bin/llvm-ml.exe \
 #-DSANITIZER_CXX_ABI=libc++ \
 wl-showstatus build-install &&
 ninja -Cbuild_compiler-rt install/strip &&
 # manually copy libclang_rt.*.a files to the location where they are expected
 mkdir -p stage1/lib/clang/$VERSION/lib/windows &&
 cp -f stage1/lib/windows/* stage1/lib/clang/$VERSION/lib/windows/ &&
    echo OK

#next: build compiler-rt
#  -DCLANG_DEFAULT_RTLIB:STRING=compiler-rt \
#  -DCLANG_DEFAULT_CXX_STDLIB:STRING=libc++ \
#  -DCLANG_DEFAULT_UNWINDLIB:STRING=libcxx \
#  -DCLANG_DEFAULT_OPENMP_RUNTIME:STRING=libomp \



 # build MinGW-w64 for supported platforms
 for arch in i686 x86_64 armv7 aarch64; do
  mkdir -p build_mingw-w64_$arch &&
  wl-showstatus configure &&
  cd build_mingw-w64_$arch &&
  #--host=$RUNPLATFORM \
  #--host=$arch-w64-mingw32 \
  #--host=$arch-w64-windows-gnu \
  #--with-libraries=winpthreads,winstorecompat$(if [ "$arch-w64-mingw32" == "$RUNPLATFORM" ]; then echo ",libmangle"; fi) \
  #--with-tools=$(if [ "$arch-w64-mingw32" == "$RUNPLATFORM" ]; then echo "all"; else echo "genlib,genpeimg,genstubdll,widl"; fi) \
  $MINGWPREFIX/src/mingw-w64/configure --prefix=$PWD/../mingw-w64-$arch \
   --build=$BUILDPLATFORM \
   --host=$arch-w64-mingw32 \
   --$(if [ "$arch" == "i686" ]; then echo "enable"; else echo "disable"; fi)-lib32 \
   --$(if [ "$arch" == "x86_64" ]; then echo "enable"; else echo "disable"; fi)-lib64 \
   --$(if [ "$arch" == "armv7" ]; then echo "enable"; else echo "disable"; fi)-libarm32 \
   --$(if [ "$arch" == "aarch64" ]; then echo "enable"; else echo "disable"; fi)-libarm64 \
   --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrt"; else echo "msvcrt-os"; fi) \
   --with-libraries=$(if [ "$arch-w64-mingw32" == "$RUNPLATFORM" ]; then echo "all"; else echo "winpthreads,winstorecompat"; fi) \
   --with-tools=$(if [ "$arch-w64-mingw32" == "$RUNPLATFORM" ]; then echo "all"; fi) \
   --enable-sdk=all \
   --enable-secure-api \
   --enable-wildcard \
   --enable-idl \
   --without-genlib \
   --without-gnu-ld \
  --with-sysroot=$PWD/../stage1 \
   CC="$PWD/../stage1/bin/gcc_renamed_clang.exe -fuse-ld=lld" \
   CXX="$PWD/../stage1/bin/g++_renamed_clang++.exe -fuse-ld=lld" \
   AS="$PWD/../stage1/bin/llvm-as.exe" \
   LD="$PWD/../stage1/bin/lld-link.exe" \
   DLLTOOL="$PWD/../stage1/bin/llvm-dlltool.exe" \
   AR="$PWD/../stage1/bin/llvm-ar.exe" \
   RANLIB="$PWD/../stage1/bin/llvm-ranlib.exe" \
   RC="$PWD/../stage1/bin/llvm-windres.exe" \
   NM="$PWD/../stage1/bin/llvm-nm.exe" \
   OBJDUMP="$PWD/../stage1/bin/llvm-objdump.exe" \
   CFLAGS="-I$PWD/mingw-w64-$arch/include" \
   CCASFLAGS="-I$PWD/mingw-w64-$arch/include" \
   &&
   #CFLAGS="-I$PWD/../stage1/include -I$PWD/../stage1/include/$RUNPLATFORM/c++/v1 -I$PWD/../stage1/include/c++/v1 $(if [ "$arch" == "aarch64" ]; then echo "-D__aarch64__"; fi)" \
   #LDFLAGS="-L$PWD/../stage1/lib -Wl,-no-undefined" \
  cd .. &&
  # fix link issues in build_mingw-w64/mingw-w64-libraries/winpthreads/
  #sed -i.bak -e "s? -link \(-dll\)?\1?" build_mingw-w64/mingw-w64-libraries/winpthreads/libtool &&
  sed -i.bak -e "s?\(-o \)\([^ ]*\)\(.*\) -link \(-dll\)?-shared -s -mwindows \1.libs/libwinpthread-1.dll -Wl,--out-implib,\2 \3 \4?" build_mingw-w64_$arch/mingw-w64-libraries/winpthreads/libtool &&
  sed -i.bak -e "s?\$(AM_V_CCLD).*\$(libwinpthread_la_OBJECTS).*?& \&\& \$(AR) \$(ARFLAGS) .libs/libwinpthread.a \$(libwinpthread_la_OBJECTS:.lo=.o) \&\& cp -f .libs/libwinpthread.a .libs/libwinpthread.lib?" build_mingw-w64_$arch/mingw-w64-libraries/winpthreads/Makefile &&
  wl-showstatus build-install &&
  # build include files and make them available
  make -Cbuild_mingw-w64_$arch/mingw-w64-headers install-strip &&
  #mkdir -p stage1/$arch-w64-mingw32/ &&
  #cp -rf mingw-w64-$arch/include stage1/$arch-w64-mingw32/ &&
  # build library files and make them available
  ( make -Cbuild_mingw-w64_$arch/mingw-w64-crt install-strip || make -Cbuild_mingw-w64_$arch/mingw-w64-crt install-strip CC="$PWD/stage1/bin/clang.exe -fuse-ld=lld -fno-integrated-as" ) &&
  #CFLAGS="-I$PWD/mingw-w64-$arch/include" CCASFLAGS="-I$PWD/mingw-w64-$arch/include" 
  #cp -rf mingw-w64-$arch/lib stage1/$arch-w64-mingw32/ &&
  make -Cbuild_mingw-w64_$arch &&
  #( make -Cbuild_mingw-w64_$arch || make -Cbuild_mingw-w64_$arch CC="$PWD/stage1/bin/clang.exe -fuse-ld=lld -fno-integrated-as" ) &&
  wl-showstatus build-install &&
  make -Cbuild_mingw-w64_$arch install-strip &&
  # rename libwinpthread.lib to libwinpthread.a
  mv -f mingw-w64-$arch/lib/libwinpthread.lib mingw-w64-$arch/lib/libwinpthread.a &&
  # copy to platform folder
  #mkdir -p stage1/$arch-w64-mingw32/ &&
  #cp -rf -i mingw-w64-$arch/bin stage1/$arch-w64-mingw32/ &&
  #cp -rf -i mingw-w64-$arch/{lib,include} stage1/$arch-w64-mingw32/ &&
  mkdir -p stage1/$arch-w64-windows-gnu/ &&
  cp -rf -i mingw-w64-$arch/bin stage1/$arch-w64-windows-gnu/ &&
  cp -rf -i mingw-w64-$arch/{lib,include} stage1/$arch-w64-windows-gnu/ &&
  touch SUCCESS_$arch || break
 done &&
 ls -1 SUCCESS_* &&
    echo OK



 # build libcxx for supported platforms
 for arch in i686 x86_64 armv7 aarch64; do
  mkdir -p build_libcxx_$arch &&
  #ar cr build_libcxx_$arch/libgcc.a
  #ar cr build_libcxx_$arch/libgcc_s.a
  wl-showstatus configure &&
  cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
   -DBUILD_SHARED_LIBS:BOOL=ON \
   -DLIBCXX_ENABLE_SHARED:BOOL=ON \
   -DLIBCXX_ENABLE_STATIC:BOOL=ON \
   -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM \
   -DLLVM_PATH:PATH=$PWD/llvm \
   -DLIBCXX_USE_COMPILER_RT:BOOL=ON \
   -DLIBCXX_HAS_WIN32_THREAD_API:BOOL=ON \
   -DLIBCXX_ENABLE_SHARED:BOOL=ON \
   -DLIBCXX_ENABLE_STATIC:BOOL=ON \
   -DLIBCXX_ENABLE_EXPERIMENTAL_LIBRARY:BOOL=OFF \
   -DLIBCXX_CXX_ABI=libcxxabi \
   -DLIBCXX_CXX_ABI_INCLUDE_PATHS=$PWD/libcxxabi/include \
   -DLIBCXX_CXX_ABI_LIBRARY_PATH:PATH=$PWD/build_libcxxabi/lib \
   -DLIBCXX_LIBDIR_SUFFIX="" \
   -DLIBCXX_INCLUDE_TESTS:BOOL=OFF \
   -DLIBCXX_ENABLE_ABI_LINKER_SCRIPT:BOOL=OFF \
   -DLLVM_MAIN_SRC_DIR:PATH=$PWD/llvm \
   -DLLVM_CONFIG_PATH:PATH=$PWD/stage1/bin/llvm-config.exe \
   -DCMAKE_ASM_COMPILER_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
   -DCMAKE_ASM_COMPILER_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
   -DCMAKE_C_COMPILER:FILEPATH=$PWD/stage1/bin/clang.exe \
   -DCMAKE_C_COMPILER_TARGET=$arch-windows-gnu \
   -DCMAKE_C_COMPILER_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
   -DCMAKE_C_COMPILER_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
   -DCMAKE_CXX_COMPILER:FILEPATH=$PWD/stage1/bin/clang++.exe \
   -DCMAKE_CXX_COMPILER_TARGET=$arch-windows-gnu \
   -DCMAKE_CXX_COMPILER_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
   -DCMAKE_CXX_COMPILER_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
   -DCMAKE_RC_COMPILER:FILEPATH=$PWD/stage1/bin/llvm-windres.exe \
   -DCMAKE_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
   -DCMAKE_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
   -DCMAKE_READELF:FILEPATH=$PWD/stage1/bin/llvm-readelf.exe \
   -DCMAKE_DLLTOOL:FILEPATH=$PWD/stage1/bin/llvm-dlltool.exe \
   -DCMAKE_NM:FILEPATH=$PWD/stage1/bin/llvm-nm.exe \
   -DCMAKE_OBJCOPY:FILEPATH=$PWD/stage1/bin/llvm-objcopy.exe \
   -DCMAKE_OBJDUMP:FILEPATH=$PWD/stage1/bin/llvm-objdump.exe \
   -DCMAKE_LINKER:FILEPATH=$PWD/stage1/bin/llvm-link.exe \
   -DCMAKE_STRIP:FILEPATH=$PWD/stage1/bin/llvm-strip.exe \
   -DGOLD_EXECUTABLE:FILEPATH=$PWD/stage1/bin/ld.lld.exe \
   -DCMAKE_C_FLAGS:STRING="--target=$arch-w64-mingw32 -fuse-ld=lld" \
   -DCMAKE_CXX_FLAGS:STRING="--target=$arch-w64-mingw32 -fuse-ld=lld -stdlib=libc++ -Wl,-L$PWD/build_libcxx_$arch" \
   -DPython3_EXECUTABLE:FILEPATH=$PYDIR/python.exe -Slibcxx -Bbuild_libcxx_$arch &&
  #-DCMAKE_CXX_FLAGS:STRING="--target=$arch-w64-mingw32 -fuse-ld=lld -stdlib=libc++ -I$PWD/$RUNPLATFORM/include -I$PWD/stage1/include/c++/v1" \
  #-DLIBCXX_BUILD_32_BITS:BOOL=OFF 
  wl-showstatus build-install &&
  ninja -Cbuild_libcxx install/strip &&
     echo OK || break
 done

 # build libcxxabi for supported platforms
 for arch in i686 x86_64 armv7 aarch64; do
  mkdir -p build_libcxxabi_$arch &&
  wl-showstatus configure &&
   make.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
   -DBUILD_SHARED_LIBS:BOOL=ON \
   -DLIBCXXABI_ENABLE_SHARED:BOOL=ON \
   -DLIBCXXABI_ENABLE_STATIC:BOOL=ON \
   -DLIBCXXABI_TARGET_TRIPLE:STRING=$RUNPLATFORM \
   -DLLVM_HOST_TRIPLE:STRING=$BUILDPLATFORM \
   -DLLVM_PATH:PATH=$PWD/llvm \
   -DLIBCXXABI_USE_COMPILER_RT:BOOL=ON \
   -DLIBCXXABI_LIBCXX_INCLUDES:PATH=$PWD/build_libcxx/include/c++/v1 \
   -DLIBCXXABI_LIBDIR_SUFFIX="" \
   -DLIBCXXABI_INCLUDE_TESTS:BOOL=OFF \
   -DLLVM_MAIN_SRC_DIR:PATH=$PWD/llvm \
   -DLLVM_CONFIG_PATH:PATH=$PWD/stage1/bin/llvm-config.exe \
   -DCMAKE_ASM_COMPILER_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
   -DCMAKE_ASM_COMPILER_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
   -DCMAKE_C_COMPILER:FILEPATH=$PWD/stage1/bin/clang.exe \
   -DCMAKE_C_COMPILER_TARGET=$arch-windows-gnu \
   -DCMAKE_C_COMPILER_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
   -DCMAKE_C_COMPILER_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
   -DCMAKE_CXX_COMPILER:FILEPATH=$PWD/stage1/bin/clang++.exe \
   -DCMAKE_CXX_COMPILER_TARGET=$arch-windows-gnu \
   -DCMAKE_CXX_COMPILER_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
   -DCMAKE_CXX_COMPILER_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
   -DCMAKE_RC_COMPILER:FILEPATH=$PWD/stage1/bin/llvm-windres.exe \
   -DCMAKE_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
   -DCMAKE_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
   -DCMAKE_READELF:FILEPATH=$PWD/stage1/bin/llvm-readelf.exe \
   -DCMAKE_DLLTOOL:FILEPATH=$PWD/stage1/bin/llvm-dlltool.exe \
   -DCMAKE_NM:FILEPATH=$PWD/stage1/bin/llvm-nm.exe \
   -DCMAKE_OBJCOPY:FILEPATH=$PWD/stage1/bin/llvm-objcopy.exe \
   -DCMAKE_OBJDUMP:FILEPATH=$PWD/stage1/bin/llvm-objdump.exe \
   -DCMAKE_LINKER:FILEPATH=$PWD/stage1/bin/llvm-link.exe \
   -DCMAKE_STRIP:FILEPATH=$PWD/stage1/bin/llvm-strip.exe \
   -DGOLD_EXECUTABLE:FILEPATH=$PWD/stage1/bin/ld.lld.exe \
   -DCMAKE_C_FLAGS:STRING="--target=$arch-w64-mingw32 -fuse-ld=lld -I$PWD/$RUNPLATFORM/include" \
   -DCMAKE_CXX_FLAGS:STRING="--target=$arch-w64-mingw32 -fuse-ld=lld -stdlib=libc++ -I$PWD/$RUNPLATFORM/include -I$PWD/stage1/include/c++/v1" \
   -DCMAKE_{SHARED,MODULE,EXE}_LINKER_FLAGS:STRING="-L$PWD/build_mingw-w64_winpthreads_$arch/fakelib" \
   -DPython3_EXECUTABLE:FILEPATH=$PYDIR/python.exe \
   -Slibcxxabi -Bbuild_libcxxabi_$arch &&
   #-DCMAKE_ASM_MASM_COMPILER:FILEPATH=$PWD/stage1/bin/llvm-ml.exe \
   #-DSANITIZER_CXX_ABI=libc++ \
  wl-showstatus build-install &&
  ninja -Cbuild_libcxxabi_$arch install/strip &&
  ## manually copy libclang_rt.*.a files to the location where they are expected
  #mkdir -p stage1/lib/clang/$VERSION/lib/windows &&
  #cp -f stage1/lib/windows/* stage1/lib/clang/$VERSION/lib/windows/ &&
    echo OK || break
 done &&
    echo OK



 arch=i686
 arch=x86_64
  mkdir -p build_compiler-rt_$arch &&
  wl-showstatus configure &&
  cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$PWD/compiler-rt_$arch -DCMAKE_BUILD_TYPE:STRING=Release \
   -DCOMPILER_RT_DEFAULT_TARGET_ONLY:BOOL=ON \
   -DCOMPILER_RT_USE_BUILTINS_LIBRARY:BOOL=OFF \
   -DCOMPILER_RT_BUILD_BUILTINS:BOOL=ON \
   -DCOMPILER_RT_BUILD_LIBFUZZER:BOOL=OFF \
   -DCOMPILER_RT_BUILD_MEMPROF:BOOL=OFF \
   -DCOMPILER_RT_BUILD_PROFILE:BOOL=OFF \
   -DCOMPILER_RT_BUILD_SANITIZERS:BOOL=OFF \
   -DCOMPILER_RT_BUILD_XRAY:BOOL=OFF \
   -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF \
   -DSANITIZER_CXX_ABI:STRING=libc++ \
   -DCMAKE_SYSTEM_NAME=Windows \
   -DCMAKE_ASM_COMPILER_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
   -DCMAKE_ASM_COMPILER_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
   -DCMAKE_C_COMPILER:FILEPATH=$PWD/stage1/bin/clang.exe \
   -DCMAKE_C_COMPILER_TARGET:STRING=$arch-windows-gnu \
   -DCMAKE_CXX_COMPILER:FILEPATH=$PWD/stage1/bin/clang++.exe \
   -DCMAKE_CXX_COMPILER_TARGET:STRING=$arch-windows-gnu \
   -DCMAKE_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
   -DCMAKE_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
   -DCMAKE_NM:FILEPATH=$PWD/stage1/bin/llvm-nm.exe \
   -DCMAKE_ASM_FLAGS="build-c-flags" \
   -DCMAKE_C_FLAGS:STRING="-fuse-ld=lld -rtlib=compiler-rt" \
   -DCMAKE_CXX_FLAGS:STRING="-fuse-ld=lld" \
   -DCMAKE_EXE_LINKER_FLAGS:STRING="-fuse-ld=lld" \
   -Scompiler-rt -Bbuild_compiler-rt_$arch &&
  wl-showstatus build-install &&
  ninja -Cbuild_compiler-rt_$arch install/strip &&
    echo OK
   #-DCMAKE_INSTALL_PREFIX="$PREFIX/lib/clang/$CLANG_VERSION" \
   #-DCMAKE_C_COMPILER_TARGET:STRING=$arch-w64-mingw32 \
   #-DCMAKE_CXX_COMPILER_TARGET:STRING=$arch-w64-mingw32 \



#cp stage1/lib/$RUNPLATFORM/*.a stage1/$RUNPLATFORM/lib/

 # build compiler-rt for supported platforms
 for arch in i686 x86_64 armv7 aarch64; do
  mkdir -p build_compiler-rt_$arch &&
   wl-showstatus configure &&
   cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$PWD/TEST -DCMAKE_BUILD_TYPE:STRING=Release \
    -DBUILD_SHARED_LIBS:BOOL=ON \
    -DCOMPILER_RT_DEFAULT_TARGET_ONLY:BOOL=ON \
    -DCOMPILER_RT_USE_LIBCXX:BOOL=ON \
    -DCOMPILER_RT_USE_BUILTINS_LIBRARY=OFF \
    -DCOMPILER_RT_BUILD_BUILTINS:BOOL=ON \
    -DCOMPILER_RT_BUILD_SANITIZERS:BOOL=OFF \
    -DCOMPILER_RT_BUILD_LIBFUZZER:BOOL=OFF \
    -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF \
    -DCOMPILER_RT_CAN_EXECUTE_TESTS:BOOL=OFF \
    -DSANITIZER_CXX_ABI:STRING=libc++ \
    -DLLVM_MAIN_SRC_DIR:PATH=$PWD/llvm \
    -DLLVM_CONFIG_PATH:PATH=$PWD/stage1/bin/llvm-config.exe \
    -DCMAKE_ASM_COMPILER_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
    -DCMAKE_ASM_COMPILER_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
    -DCMAKE_C_COMPILER:FILEPATH=$PWD/stage1/bin/clang.exe \
    -DCMAKE_C_COMPILER_TARGET=$arch-windows-gnu \
    -DCMAKE_C_COMPILER_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
    -DCMAKE_C_COMPILER_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
    -DCMAKE_CXX_COMPILER:FILEPATH=$PWD/stage1/bin/clang++.exe \
    -DCMAKE_CXX_COMPILER_TARGET=$arch-windows-gnu \
    -DCMAKE_CXX_COMPILER_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
    -DCMAKE_CXX_COMPILER_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
    -DCMAKE_RC_COMPILER:FILEPATH=$PWD/stage1/bin/llvm-windres.exe \
    -DCMAKE_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
    -DCMAKE_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
    -DCMAKE_READELF:FILEPATH=$PWD/stage1/bin/llvm-readelf.exe \
    -DCMAKE_DLLTOOL:FILEPATH=$PWD/stage1/bin/llvm-dlltool.exe \
    -DCMAKE_NM:FILEPATH=$PWD/stage1/bin/llvm-nm.exe \
    -DCMAKE_OBJCOPY:FILEPATH=$PWD/stage1/bin/llvm-objcopy.exe \
    -DCMAKE_OBJDUMP:FILEPATH=$PWD/stage1/bin/llvm-objdump.exe \
    -DCMAKE_LINKER:FILEPATH=$PWD/stage1/bin/llvm-link.exe \
    -DCMAKE_STRIP:FILEPATH=$PWD/stage1/bin/llvm-strip.exe \
    -DGOLD_EXECUTABLE:FILEPATH=$PWD/stage1/bin/ld.lld.exe \
    -DCMAKE_C_FLAGS:STRING="--target=$arch-w64-mingw32 -fuse-ld=lld -I$PWD/$RUNPLATFORM/include" \
    -DCMAKE_CXX_FLAGS:STRING="--target=$arch-w64-mingw32 -fuse-ld=lld -stdlib=libc++ -I$PWD/$RUNPLATFORM/include -I$PWD/stage1/include/c++/v1" \
    -DCMAKE_{SHARED,MODULE,EXE}_LINKER_FLAGS:STRING="-L$PWD/build_mingw-w64_winpthreads_$arch/fakelib" \
    -DPython3_EXECUTABLE:FILEPATH=$PYDIR/python.exe \
    -Scompiler-rt -Bbuild_compiler-rt_$arch &&
   #-DCMAKE_ASM_MASM_COMPILER:FILEPATH=$PWD/stage1/bin/llvm-ml.exe \
   #-DSANITIZER_CXX_ABI=libc++ \
   wl-showstatus build-install &&
   ninja -Cbuild_compiler-rt_$arch install/strip &&
   ## manually copy libclang_rt.*.a files to the location where they are expected
   #mkdir -p stage1/lib/clang/$VERSION/lib/windows &&
   #cp -f stage1/lib/windows/* stage1/lib/clang/$VERSION/lib/windows/ &&
      echo OK || break
 done &&
    echo OK



mkdir -p build &&
 # build main LLVM suite
 wl-showstatus configure &&
 #-DLLVM_TARGETS_TO_BUILD:STRING="X86;ARM;AArch64;NVPTX;AMDGPU;WebAssembly" \
 #-DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;libclc;lld;lldb;polly;mlir;pstl;parallel-libs" \
 #-DLLVM_ENABLE_RUNTIMES:STRING="compiler-rt;libcxx;libcxxabi;libunwind;openmp" \
 #-DCLANG_DEFAULT_RTLIB:STRING=compiler-rt \
 #-DLIBCXX_USE_COMPILER_RT:BOOL=ON \
 #-DLIBCXXABI_USE_COMPILER_RT:BOOL=ON \
 #-DLIBUNWIND_USE_COMPILER_RT:BOOL=ON \
 #libunwind;openmp;flang
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release \
  -DBUILD_SHARED_LIBS:BOOL=ON \
  -DLLVM_BUILD_LLVM_DYLIB:BOOL=OFF \
  -DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;libclc;lld;lldb;polly;pstl;parallel-libs" \
  -DLLVM_ENABLE_RUNTIMES:STRING="libcxx;libcxxabi;libunwind" \
  -DLLVM_TARGETS_TO_BUILD:STRING="X86" \
  -DLLVM_HOST_TRIPLE:STRING=$BUILDPLATFORM \
  -DLLVM_DEFAULT_TARGET_TRIPLE=$RUNPLATFORM \
  -DLLVM_BUILD_STATIC=OFF \
  -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF \
  -DLLVM_CCACHE_BUILD:BOOL=OFF \
  -DLLVM_ENABLE_MODULES:BOOL=OFF \
  -DLLVM_ENABLE_PLUGINS:BOOL=ON \
  -DLLVM_ENABLE_THREADS:BOOL=ON \
  -DLLVM_ENABLE_UNWIND_TABLES:BOOL=ON \
  -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF \
  -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON \
  -DLLVM_TABLEGEN:STRING=$PWD/stage1/bin/llvm-tblgen.exe \
  -DLLVM_ENABLE_LTO:STRING=OFF \
  -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) \
  -DLLVM_ENABLE_RTTI:BOOL=ON \
  -DLLVM_ENABLE_TERMINFO:BOOL=OFF \
  -DLLVM_ENABLE_Z3_SOLVER:BOOL=ON \
  -DLLVM_Z3_INSTALL_DIR:STRING=$MINGWPREFIX \
  -DLLVM_ENABLE_FFI:BOOL=ON \
  -DLLVM_ENABLE_FFI:BOOL=ON \
  -DFFI_INCLUDE_DIR:PATH=$MINGWPREFIX/include \
  -DLLVM_ENABLE_LIBXML2:BOOL=ON \
  -DLLVM_ENABLE_PIC:BOOL=OFF \
  -DLLVM_USE_RELATIVE_PATHS_IN_DEBUG_INFO:BOOL=ON \
  -DLLVM_USE_RELATIVE_PATHS_IN_FILES:BOOL=ON \
  -DLLVM_INSTALL_BINUTILS_SYMLINKS:BOOL=OFF \
  -DLLVM_INSTALL_CCTOOLS_SYMLINKS:BOOL=OFF \
  -DLLVM_ENABLE_DOXYGEN:BOOL=OFF -DDOXYGEN_DOT_EXECUTABLE:FILEPATH= -DDOXYGEN_EXECUTABLE:FILEPATH= \
  -DLLVM_ENABLE_SPHINX=OFF \
  -DLLVM_TOOL_LLVM_OPT_FUZZER_BUILD:BOOL=OFF \
  -DLLVM_TOOL_LLVM_AS_FUZZER_BUILD:BOOL=OFF \
  -DLLVM_INCLUDE_DOCS:BOOL=OFF \
  -DLLVM_BUILD_EXAMPLES:BOOL=OFF \
  -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF \
  -DLLVM_INCLUDE_BENCHMARKS:BOOL=OFF \
  -DLLVM_INCLUDE_TESTS:BOOL=OFF \
  -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF \
  \
  -DSANITIZER_CXX_ABI=libc++ \
  -DCOMPILER_RT_DEFAULT_TARGET_ONLY=ON \
  -DCOMPILER_RT_USE_BUILTINS_LIBRARY=OFF \
  -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF \
  \
  -DLIBCXX_ENABLE_SHARED:BOOL=OFF \
  -DLIBCXX_ENABLE_STATIC:BOOL=ON \
  -DLIBCXX_USE_COMPILER_RT:BOOL=OFF \
  -DLIBCXX_HAS_WIN32_THREAD_API:BOOL=ON \
  -DLIBCXX_HAS_PTHREAD_API:BOOL=OFF \
  -DLIBCXX_ENABLE_EXPERIMENTAL_LIBRARY:BOOL=OFF \
  -DLIBCXX_CXX_ABI=libcxxabi \
  -DLIBCXX_CXX_ABI_INCLUDE_PATHS=$PWD/libcxxabi/include \
  -DLIBCXX_CXX_ABI_LIBRARY_PATH:PATH=$PWD/build_libcxxabi/lib \
  -DLIBCXX_LIBDIR_SUFFIX="" \
  -DLIBCXX_INCLUDE_TESTS:BOOL=OFF \
  -DLIBCXX_ENABLE_ABI_LINKER_SCRIPT:BOOL=OFF \
  \
  -DLIBCXXABI_ENABLE_SHARED:BOOL=OFF \
  -DLIBCXXABI_ENABLE_STATIC:BOOL=ON \
  -DLIBCXXABI_USE_COMPILER_RT:BOOL=OFF \
  -DLIBCXXABI_LIBCXX_INCLUDES:PATH=$PWD/build_libcxx/include/c++/v1 \
  -DLIBCXXABI_LIBDIR_SUFFIX="" \
  -DLIBCXXABI_ENABLE_EXCEPTIONS:BOOL=ON \
  -DLIBCXXABI_ENABLE_ASSERTIONS:BOOL=OFF \
  \
  -DLIBUNWIND_ENABLE_SHARED:BOOL=ON \
  -DLIBUNWIND_ENABLE_STATIC:BOOL=ON \
  -DLIBUNWIND_USE_COMPILER_RT:BOOL=OFF \
  \
  -DLIBCLANG_BUILD_STATIC:BOOL=OFF \
  -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF \
  -DCLANG_PLUGIN_SUPPORT:BOOL=ON \
  -DCLANG_ENABLE_CLANGD:BOOL=ON \
  -DCLANG_DEFAULT_CXX_STDLIB:STRING=libc++ \
  -DCLANG_DEFAULT_RTLIB:STRING= \
  -DCLANG_DEFAULT_UNWINDLIB:STRING=none \
  -DCLANG_DEFAULT_OPENMP_RUNTIME:STRING=libomp \
  -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON \
  -DCLANG_TOOL_APINOTES_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_ARCMT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_C_ARCMT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_C_INDEX_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_CLANG_FUZZER_BUILD:BOOL=OFF \
  -DCLANG_INCLUDE_DOCS:BOOL=OFF \
  -DCLANG_BUILD_EXAMPLES:BOOL=OFF \
  -DCLANG_INCLUDE_TESTS:BOOL=OFF \
  \
  -DLLDB_TOOL_LLDB_SERVER_BUILD:BOOL=ON \
  -DLLDB_TOOL_LLDB_VSCODE_BUILD:BOOL=ON \
  -DLLDB_ENABLE_LIBEDIT:BOOL=OFF \
  -DLLDB_ENABLE_CURSES:BOOL=ON \
  -DLLDB_ENABLE_LIBXML2:BOOL=ON \
  -DLLDB_ENABLE_LZMA:BOOL=ON \
  -DLLDB_ENABLE_PYTHON:BOOL=ON \
  \
  -DLLVM_POLLY_LINK_INTO_TOOLS:BOOL=ON \
  -DPOLLY_ENABLE_GPGPU_CODEGEN:BOOL=OFF \
  -DPOLLY_BUNDLED_ISL:BOOL=ON \
  \
  -DCLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
  -DLLD_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
  -DFLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
  \
  -DLLVM_CONFIG_PATH:PATH=$PWD/stage1/bin/llvm-config.exe \
  -DCMAKE_ASM_COMPILER_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
  -DCMAKE_ASM_COMPILER_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
  -DCMAKE_C_COMPILER:FILEPATH=$PWD/stage1/bin/clang.exe \
  -DCMAKE_C_COMPILER_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
  -DCMAKE_C_COMPILER_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
  -DCMAKE_CXX_COMPILER:FILEPATH=$PWD/stage1/bin/clang++.exe \
  -DCMAKE_CXX_COMPILER_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
  -DCMAKE_CXX_COMPILER_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
  -DCMAKE_RC_COMPILER:FILEPATH=$PWD/stage1/bin/llvm-windres.exe \
  -DCMAKE_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
  -DCMAKE_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
  -DCMAKE_READELF:FILEPATH=$PWD/stage1/bin/llvm-readelf.exe \
  -DCMAKE_DLLTOOL:FILEPATH=$PWD/stage1/bin/llvm-dlltool.exe \
  -DCMAKE_NM:FILEPATH=$PWD/stage1/bin/llvm-nm.exe \
  -DCMAKE_OBJCOPY:FILEPATH=$PWD/stage1/bin/llvm-objcopy.exe \
  -DCMAKE_OBJDUMP:FILEPATH=$PWD/stage1/bin/llvm-objdump.exe \
  -DCMAKE_LINKER:FILEPATH=$PWD/stage1/bin/llvm-link.exe \
  -DCMAKE_STRIP:FILEPATH=$PWD/stage1/bin/llvm-strip.exe \
  -DGOLD_EXECUTABLE:FILEPATH=$PWD/stage1/bin/ld.lld.exe \
  -DCMAKE_C_FLAGS:STRING="-fuse-ld=lld -femulated-tls " \
  -DCMAKE_CXX_FLAGS:STRING="-fuse-ld=lld -femulated-tls -I$PWD/stage1/include/c++/v1 -I$PWD/stage1/include/x86_64-w64-mingw32/c++/v1" \
  -DCMAKE_{SHARED,MODULE,EXE}_LINKER_FLAGS:STRING="-lwinpthread -v -Wl,-L$PWD/stage1/lib/$RUNPLATFORM -rtlib=compiler-rt -stdlib=libc++" \
   \
  -DPython3_FIND_REGISTRY:BOOL=NEVER \
  -DPython3_EXECUTABLE:FILEPATH=$MINGWPREFIX/share/python/bin/python.exe \
  -Sllvm -Bbuild &&
  #clang -fuse-ld=lld -rtlib=compiler-rt
  #clang++ -fuse-ld=lld -stdlib=libc++
  #-DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;lld;lldb;libclc;pstl" \
  #-DLLVM_ENABLE_RUNTIMES:STRING="compiler-rt;libc;libcxx;libcxxabi;libunwind;openmp" \
  #-DCOMPILER_RT_USE_BUILTINS_LIBRARY:BOOL=ON 
  #-DLLVM_HOST_TRIPLE:STRING=$BUILDPLATFORM -DCOMPILER_RT_DEFAULT_TARGET_TRIPLE:STRING=$RUNPLATFORM -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLIBCXXABI_TARGET_TRIPLE:STRING=$RUNPLATFORM -DLIBUNWIND_TARGET_TRIPLE:STRING=$RUNPLATFORM 
  #-DCLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
  #-DLLD_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
  #-DFLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
  #-DCMAKE_C_FLAGS:STRING="-D_FORTIFY_SOURCE=0 -D__SSP_FORTIFY_LEVEL=0" \
  #-DCMAKE_CXX_FLAGS:STRING="-D_FORTIFY_SOURCE=0 -D__SSP_FORTIFY_LEVEL=0" \
  #-LLVM_BUILD_32_BITS:BOOL=ON \
  #-DLLVM_INSTALL_BINUTILS_SYMLINKS:BOOL=ON \
  #-DLLVM_INSTALL_CCTOOLS_SYMLINKS:BOOL=ON \
  #-DCLANG_DEFAULT_UNWINDLIB:STRING=libcxx \
  #-DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF \
  #-DBUILD_SHARED_LIBS:BOOL=OFF #see also: https://llvm.org/docs/BuildingADistribution.html
  
  #-DCMAKE_C_COMPILER:FILEPATH=$(PATH=$MINGWPREFIX/share/llvm/bin:$PATH which clang.exe) \
  #-DCMAKE_CXX_COMPILER:FILEPATH=$(PATH=$MINGWPREFIX/share/llvm/bin:$PATH which clang++.exe) \
  #-DCMAKE_RC_COMPILER:FILEPATH=$(PATH=$MINGWPREFIX/share/llvm/bin:$PATH which windres.exe) \
  #-DCMAKE_ASM_MASM_COMPILER:FILEPATH=$(PATH=$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ml.exe) \
  #-DCMAKE_AR:FILEPATH=$(PATH=$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ar.exe) \
  #-DCMAKE_RANLIB:FILEPATH=$(PATH=$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ranlib.exe) \
  #-DCMAKE_EXE_LINKER_FLAGS:STRING="-L$MINGWPREFIX/share/llvm/lib" \
  #-DCMAKE_CXX_FLAGS:STRING="-I$MINGWPREFIX/share/llvm/include/c++/v1" \
  
  #-DCMAKE_ASM_COMPILER:STRING=yasm.exe \
  #-DCMAKE_ASM_MASM_COMPILER:STRING="jwasm.exe $(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "-win64"; else echo "-coff"; fi)" \
  #$(if which clang.exe &> /dev/null; then echo "-DCMAKE_C_COMPILER:FILEPATH=$(which clang.exe)"; fi) \
  #$(if which clang++.exe &> /dev/null; then echo "-DCMAKE_CXX_COMPILER:FILEPATH=$(which clang++.exe)"; fi) \
  #$(if which llvm-ranlib.exe &> /dev/null; then echo "-DCMAKE_C_COMPILER_RANLIB:FILEPATH=$(which llvm-ranlib.exe) -DCMAKE_CXX_COMPILER_RANLIB:FILEPATH=$(which llvm-ranlib.exe)"; fi) \
  #$(if which llvm-ar.exe &> /dev/null; then echo "-DCMAKE_C_COMPILER_AR:FILEPATH=$(which llvm-ar.exe) -DCMAKE_CXX_COMPILER_AR:FILEPATH=$(which llvm-ar.exe)"; fi) \
  #-DLLVM_TABLEGEN:STRING=$(which llvm-tblgen.exe 2> /dev/null) \
 ## don't use -fno-lto flag with yasm
 #sed -i.bak -e "s/\(yasm\.exe .*\) -fno-lto/\1/" build/compile_commands.json &&
 #sed -i.bak -e "s/-fno-lto//" build/build.ninja build/compile_commands.json
 ## fix missing -lgcc/-lgcc_s
 #sed -i.bak -e "s/-lgcc_s\|-lgcc//g" build/build.ninja &&
 ## fix missing link libraries
 #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -lpthread/" build/build.ninja &&
 wl-showstatus build-install &&
 #CPLUS_INCLUDE_PATH=$PWD/stage1/include/$BUILDPLATFORM/c++/v1:$PWD/stage1/include/c++/v1${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} ninja -Cbuild install/strip &&
 ninja -Cbuild install/strip &&
    echo OK
#mkdir -p $PWD/stage1/lib/x86_64-w64-windows-gnu
#cp -u $PWD/stage1/lib/$RUNPLATFORM/* $PWD/stage1/lib/x86_64-w64-windows-gnu/



 mkdir -p build_mingw-w64_widl &&
 cd build_mingw-w64_widl &&
 $MINGWPREFIX/src/mingw-w64/mingw-w64-tools/widl/configure --prefix=$INSTALLPREFIX/share/mingw-w64 --build=$BUILDPLATFORM --host=$RUNPLATFORM &&
 cd .. &&
 if [ ! -f build_mingw-w64/mingw-w64-libraries/winstorecompat/Makefile ]; then
  wl-showstatus configure &&
  mkdir -p build_mingw-w64_winstorecompat &&
  cd build_mingw-w64_winstorecompat &&
  $MINGWPREFIX/src/mingw-w64/mingw-w64-libraries/winstorecompat/configure --prefix=$INSTALLPREFIX/share/mingw-w64 --build=$BUILDPLATFORM --host=$RUNPLATFORM &&
  cd ..
 fi &&


 
mkdir -p build &&
 # build main LLVM suite
 wl-showstatus configure &&
 #libunwind;openmp;parallel-libs;polly;pstl;flang
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
  -DBUILD_SHARED_LIBS:BOOL=OFF \
  -DLLVM_BUILD_LLVM_DYLIB:BOOL=OFF \
  -DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;libclc;lld;lldb;polly;mlir;pstl;parallel-libs" \
  -DLLVM_ENABLE_RUNTIMES:STRING="compiler-rt;libcxx;libcxxabi" \
  -DLLVM_TARGETS_TO_BUILD:STRING="X86;NVPTX;AMDGPU;ARM;AArch64;WebAssembly" \
  -DLLVM_HOST_TRIPLE:STRING=$(echo $BUILDPLATFORM|sed -e "s/-.*$//")-w64-mingw32 \
  -DLLVM_BUILD_STATIC=OFF \
  -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF \
  -DLLVM_CCACHE_BUILD:BOOL=OFF \
  -DLLVM_ENABLE_MODULES:BOOL=OFF \
  -DLLVM_ENABLE_PLUGINS:BOOL=ON \
  -DLLVM_ENABLE_THREADS:BOOL=ON \
  -DLLVM_ENABLE_UNWIND_TABLES:BOOL=ON \
  -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF \
  -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON \
  -DLLVM_ENABLE_LTO:STRING=OFF \
  -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) \
  -DLLVM_ENABLE_RTTI:BOOL=ON \
  -DLLVM_ENABLE_TERMINFO:BOOL=OFF \
  -DLLVM_ENABLE_Z3_SOLVER:BOOL=Off \
  -DLLVM_Z3_INSTALL_DIR:STRING=$MINGWPREFIX \
  -DLLVM_ENABLE_FFI:BOOL=ON \
  -DLLVM_ENABLE_FFI:BOOL=ON \
  -DFFI_INCLUDE_DIR:PATH=$MINGWPREFIX/include \
  -DLLVM_ENABLE_LIBXML2:BOOL=ON \
  -DLLVM_ENABLE_PIC:BOOL=OFF \
  -DLLVM_USE_RELATIVE_PATHS_IN_DEBUG_INFO:BOOL=ON \
  -DLLVM_USE_RELATIVE_PATHS_IN_FILES:BOOL=ON \
  -DLLVM_INSTALL_BINUTILS_SYMLINKS:BOOL=OFF \
  -DLLVM_INSTALL_CCTOOLS_SYMLINKS:BOOL=OFF \
  -DLLVM_ENABLE_DOXYGEN:BOOL=OFF -DDOXYGEN_DOT_EXECUTABLE:FILEPATH= -DDOXYGEN_EXECUTABLE:FILEPATH= \
  -DLLVM_ENABLE_SPHINX=OFF \
  -DLLVM_INCLUDE_DOCS:BOOL=OFF \
  -DLLVM_BUILD_EXAMPLES:BOOL=OFF \
  -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF \
  -DLLVM_INCLUDE_BENCHMARKS:BOOL=OFF \
  -DLLVM_INCLUDE_TESTS:BOOL=OFF \
  -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF \
  \
  -DCOMPILER_RT_DEFAULT_TARGET_ONLY=OFF \
  -DCOMPILER_RT_USE_BUILTINS_LIBRARY=OFF \
  -DSANITIZER_CXX_ABI=libc++ \
  -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF \
  \
  -DLIBCXX_ENABLE_SHARED:BOOL=Off \
  -DLIBCXX_ENABLE_STATIC:BOOL=ON \
  -DLIBCXX_USE_COMPILER_RT:BOOL=ON \
  -DLIBCXX_HAS_WIN32_THREAD_API:BOOL=ON \
  -DLIBCXX_HAS_PTHREAD_API:BOOL=OFF \
  -DLIBCXX_ENABLE_EXPERIMENTAL_LIBRARY:BOOL=OFF \
  -DLIBCXX_CXX_ABI=libcxxabi \
  -DLIBCXX_CXX_ABI_INCLUDE_PATHS=$PWD/libcxxabi/include \
  -DLIBCXX_CXX_ABI_LIBRARY_PATH:PATH=$PWD/build_libcxxabi/lib \
  -DLIBCXX_LIBDIR_SUFFIX="" \
  -DLIBCXX_INCLUDE_TESTS:BOOL=OFF \
  -DLIBCXX_ENABLE_ABI_LINKER_SCRIPT:BOOL=OFF \
  \
  -DLIBCXXABI_ENABLE_SHARED:BOOL=Off \
  -DLIBCXXABI_ENABLE_STATIC:BOOL=ON \
  -DLIBCXXABI_USE_COMPILER_RT:BOOL=ON \
  -DLIBCXXABI_LIBCXX_INCLUDES:PATH=$PWD/build_libcxx/include/c++/v1 \
  -DLIBCXXABI_LIBDIR_SUFFIX="" \
  -DLIBCXXABI_ENABLE_EXCEPTIONS:BOOL=ON \
  -DLIBCXXABI_ENABLE_ASSERTIONS:BOOL=OFF \
  \
  -DLIBUNWIND_ENABLE_SHARED:BOOL=Off \
  -DLIBUNWIND_ENABLE_STATIC:BOOL=ON \
  -DLIBUNWIND_USE_COMPILER_RT:BOOL=ON \
  \
  -DLIBCLANG_BUILD_STATIC:BOOL=OFF \
  -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF \
  -DCLANG_PLUGIN_SUPPORT:BOOL=ON \
  -DCLANG_ENABLE_CLANGD:BOOL=ON \
  -DCLANG_DEFAULT_CXX_STDLIB:STRING=libc++ \
  -DCLANG_DEFAULT_RTLIB:STRING=compiler-rt \
  -DCLANG_DEFAULT_UNWINDLIB:STRING=none \
  -DCLANG_DEFAULT_OPENMP_RUNTIME:STRING=libomp \
  -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF \
  -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON \
  -DCLANG_TOOL_APINOTES_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_ARCMT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_C_ARCMT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_C_INDEX_TEST_BUILD:BOOL=OFF \
  -DCLANG_INCLUDE_DOCS:BOOL=OFF \
  -DCLANG_BUILD_EXAMPLES:BOOL=OFF \
  -DCLANG_INCLUDE_TESTS:BOOL=OFF \
  \
  -DLLDB_TOOL_LLDB_SERVER_BUILD:BOOL=ON \
  -DLLDB_TOOL_LLDB_VSCODE_BUILD:BOOL=ON \
  -DLLDB_ENABLE_LIBEDIT:BOOL=OFF \
  -DLLDB_ENABLE_CURSES:BOOL=ON \
  -DLLDB_ENABLE_LIBXML2:BOOL=ON \
  -DLLDB_ENABLE_LZMA:BOOL=ON \
  -DLLDB_ENABLE_PYTHON:BOOL=ON \
  \
  -DCLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
  -DLLD_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
  -DFLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
  \
  -DCMAKE_C_COMPILER:FILEPATH=$PWD/stage1/bin/clang.exe \
  -DCMAKE_CXX_COMPILER:FILEPATH=$PWD/stage1/bin/clang++.exe \
  -DCMAKE_RC_COMPILER:FILEPATH=$PWD/stage1/bin/windres.exe \
  -DCMAKE_ASM_MASM_COMPILER:FILEPATH=$PWD/stage1/bin/llvm-ml.exe \
  -DCMAKE_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
  -DCMAKE_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
  -DCMAKE_CXX_FLAGS:STRING="-I$PWD/stage1/include/$BUILDPLATFORM/c++/v1 -I$PWD/stage1/include/c++/v1" \
  -DCMAKE_EXE_LINKER_FLAGS:STRING="-L$PWD/stage1/lib" \
  -DPython3_FIND_REGISTRY:BOOL=NEVER \
  -DPython3_EXECUTABLE:FILEPATH=$MINGWPREFIX/share/python/bin/python.exe \
  -Sllvm -Bbuild &&
 #-DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;lld;lldb;libclc;pstl" \
 #-DLLVM_ENABLE_RUNTIMES:STRING="compiler-rt;libc;libcxx;libcxxabi;libunwind;openmp" \
 #-DCOMPILER_RT_USE_BUILTINS_LIBRARY:BOOL=ON 
 #-DLLVM_HOST_TRIPLE:STRING=$BUILDPLATFORM -DCOMPILER_RT_DEFAULT_TARGET_TRIPLE:STRING=$RUNPLATFORM -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLIBCXXABI_TARGET_TRIPLE:STRING=$RUNPLATFORM -DLIBUNWIND_TARGET_TRIPLE:STRING=$RUNPLATFORM 
 #-DCLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
 #-DLLD_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
 #-DFLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
 #-DCMAKE_C_FLAGS:STRING="-D_FORTIFY_SOURCE=0 -D__SSP_FORTIFY_LEVEL=0" \
 #-DCMAKE_CXX_FLAGS:STRING="-D_FORTIFY_SOURCE=0 -D__SSP_FORTIFY_LEVEL=0" \
 #-LLVM_BUILD_32_BITS:BOOL=ON \
 #-DLLVM_INSTALL_BINUTILS_SYMLINKS:BOOL=ON \
 #-DLLVM_INSTALL_CCTOOLS_SYMLINKS:BOOL=ON \
 #  + share/llvm/bin/addr2line.exe
 #  + share/llvm/bin/ar.exe
 #  + share/llvm/bin/bitcode_strip.exe
 #  + share/llvm/bin/c++filt.exe
 #  + share/llvm/bin/dlltool.exe
 #  + share/llvm/bin/dwp.exe
 #  + share/llvm/bin/install_name_tool.exe
 #  + share/llvm/bin/libtool.exe
 #  + share/llvm/bin/lipo.exe
 #  + share/llvm/bin/nm.exe
 #  + share/llvm/bin/objcopy.exe
 #  + share/llvm/bin/objdump.exe
 #  + share/llvm/bin/ranlib.exe
 #  + share/llvm/bin/readelf.exe
 #  + share/llvm/bin/size.exe
 #  + share/llvm/bin/strings.exe
 #  + share/llvm/bin/strip.exe
 #  + share/llvm/bin/windres.exe
 #-DCLANG_DEFAULT_UNWINDLIB:STRING=libcxx \
 #-DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF \
 #-DBUILD_SHARED_LIBS:BOOL=OFF #see also: https://llvm.org/docs/BuildingADistribution.html

 #-DCMAKE_ASM_COMPILER:STRING=yasm.exe \
 #-DCMAKE_ASM_MASM_COMPILER:STRING="jwasm.exe $(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "-win64"; else echo "-coff"; fi)" \
 #$(if which clang.exe &> /dev/null; then echo "-DCMAKE_C_COMPILER:FILEPATH=$(which clang.exe)"; fi) \
 #$(if which clang++.exe &> /dev/null; then echo "-DCMAKE_CXX_COMPILER:FILEPATH=$(which clang++.exe)"; fi) \
 #$(if which llvm-ranlib.exe &> /dev/null; then echo "-DCMAKE_C_COMPILER_RANLIB:FILEPATH=$(which llvm-ranlib.exe) -DCMAKE_CXX_COMPILER_RANLIB:FILEPATH=$(which llvm-ranlib.exe)"; fi) \
 #$(if which llvm-ar.exe &> /dev/null; then echo "-DCMAKE_C_COMPILER_AR:FILEPATH=$(which llvm-ar.exe) -DCMAKE_CXX_COMPILER_AR:FILEPATH=$(which llvm-ar.exe)"; fi) \
 #-DLLVM_TABLEGEN:STRING=$(which llvm-tblgen.exe 2> /dev/null) \
 ## don't use -fno-lto flag with yasm
 #sed -i.bak -e "s/\(yasm\.exe .*\) -fno-lto/\1/" build/compile_commands.json &&
 #sed -i.bak -e "s/-fno-lto//" build/build.ninja build/compile_commands.json
 ## fix missing -lgcc/-lgcc_s
 #sed -i.bak -e "s/-lgcc_s\|-lgcc//g" build/build.ninja &&
 ## fix missing link libraries
 #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -lpthread/" build/build.ninja &&
 wl-showstatus build-install &&
 C_INCLUDE_PATH=$PWD/stage1/include${C_INCLUDE_PATH:+:$C_INCLUDE_PATH} CPLUS_INCLUDE_PATH=$PWD/stage1/include${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} LIBRARY_PATH=$PWD/stage1/lib${LIBRARY_PATH:+:$LIBRARY_PATH} ninja -Cbuild install/strip &&
 #ninja -Cbuild install-distribution &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf llvm-project-$VERSION.src

#aarch64-w64-mingw32 and armv7-w64-mingw32
#-DCMAKE_ASM_COMPILER_TARGET="arm-linux-gnueabihf"
#-DCMAKE_C_COMPILER_TARGET="arm-linux-gnueabihf"
#-DCMAKE_CXX_COMPILER_TARGET="arm-linux-gnueabihf"





































export NAME="The LLVM Compiler Infrastructure"
export STATUS=
export URL=https://llvm.org/
export BASENAME=llvm-project
export DESCRIPTION="The LLVM Compiler Infrastructure - a toolkit for the construction of highly optimized compilers, optimizers, and run-time environments."
export CATEGORY=development
export TYPE=application
export VERSION=13.0.0
export VERSIONDATE=20211212
#export VERSION=13.0.1rc1
#export VERSIONDATE=20211212
#export VERSION=13.0.1rc3
#export VERSIONDATE=20220121
wl-showstatus --package-version
#export DEPENDENCIES=pthreads,zlib,xz,libxml2,libffi,isl,z3,swig,lua,ncurses,protobuf,wineditline
export DEPENDENCIES=pthreads,zlib,xz,libxml2,libffi,isl,z3,swig,lua,ncurses,protobuf,wineditline,cpython-mingw,tbb
export OPTIONALDEPENDENCIES=udis86,graphviz,hwloc,libpfm4
export BUILDDEPENDENCIES=cmake,ninja,jwasm
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=llvm/LICENSE.TXT
export LICENSETYPE="Apache with exceptions"
#export DOWNLOADURL="https://releases.llvm.org/ llvmorg-"
#export DOWNLOADURL="https://github.com/llvm/llvm-project/releases/ llvm-project- .src.tar.xz"
export DOWNLOADURL="https://github.com/llvm/llvm-project/releases/ llvmorg-"
#export DOWNLOADURL="https://github.com/llvm/llvm-project/tags/ llvmorg-"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://github.com/llvm/llvm-project/releases/download/llvmorg-$VERSION/llvm-project-$VERSION.src.tar.xz
export DOWNLOADSOURCEURL=https://github.com/llvm/llvm-project/releases/download/llvmorg-$(echo $VERSION|sed -e "s/\([0-9]\)\(rc\)/\1-\2/")/llvm-project-$VERSION.src.tar.xz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xJ --force-local -f $TARBALLDIR/$BASENAME/llvm-project-$VERSION.src.tar.xz
cd llvm-project-$VERSION.src
patch -ulbf llvm/tools/llvm-config/llvm-config.cpp << EOF
@@ -382,2 +382,25 @@
     SharedVersionedExt = LLVM_DYLIB_VERSION ".dll";
+#ifdef __MINGW32__
+    if (1) {
+      SharedPrefix = "lib";
+      StaticExt = "a";
+      StaticPrefix = "lib";
+      if (getenv("MSYSTEM")) {
+        std::replace(ActiveObjRoot.begin(), ActiveObjRoot.end(), '\\\\', '/');
+        std::replace(ActivePrefix.begin(), ActivePrefix.end(), '\\\\', '/');
+        std::replace(ActiveBinDir.begin(), ActiveBinDir.end(), '\\\\', '/');
+        std::replace(ActiveLibDir.begin(), ActiveLibDir.end(), '\\\\', '/');
+        std::replace(ActiveCMakeDir.begin(), ActiveCMakeDir.end(), '\\\\', '/');
+        std::replace(ActiveIncludeOption.begin(), ActiveIncludeOption.end(), '\\\\', '/');
+      } else {
+        DirSep = "\\\\";
+        std::replace(ActiveObjRoot.begin(), ActiveObjRoot.end(), '/', '\\\\');
+        std::replace(ActivePrefix.begin(), ActivePrefix.end(), '/', '\\\\');
+        std::replace(ActiveBinDir.begin(), ActiveBinDir.end(), '/', '\\\\');
+        std::replace(ActiveLibDir.begin(), ActiveLibDir.end(), '/', '\\\\');
+        std::replace(ActiveCMakeDir.begin(), ActiveCMakeDir.end(), '/', '\\\\');
+        std::replace(ActiveIncludeOption.begin(), ActiveIncludeOption.end(), '/', '\\\\');
+      }
+    } else
+#endif
     if (HostTriple.isOSCygMing()) {
EOF
# ignore -fPIC flag for Windows targets (version <= 13.0.0)
####bug reported here: https://github.com/llvm/llvm-project/issues/52947
patch -ulbf clang/lib/Driver/ToolChains/CommonArgs.cpp << EOF
@@ -1188,6 +1188,4 @@
                                     options::OPT_fpie, options::OPT_fno_pie);
-  if (Triple.isOSWindows() && LastPICArg &&
-      LastPICArg ==
-          Args.getLastArg(options::OPT_fPIC, options::OPT_fpic,
-                          options::OPT_fPIE, options::OPT_fpie)) {
+  if (Triple.isOSWindows() && !Triple.isOSCygMing() && LastPICArg &&
+      LastPICArg == Args.getLastArg(options::OPT_fPIC, options::OPT_fpic, options::OPT_fPIE, options::OPT_fpie)) {
     ToolChain.getDriver().Diag(diag::err_drv_unsupported_opt_for_target)
EOF
patch -ulbf clang/lib/Driver/ToolChains/MinGW.cpp << EOF
@@ -481,5 +481,3 @@

-bool toolchains::MinGW::isPICDefaultForced() const {
-  return getArch() == llvm::Triple::x86_64;
-}
+bool toolchains::MinGW::isPICDefaultForced() const { return true; }

EOF
# ignore --as-needed linker flag for Windows targets (version <= 13.0.0)
####bug reported here: https://github.com/llvm/llvm-project/issues/52947
patch -ulbf lld/MinGW/Options.td << EOF
@@ -148,2 +148,3 @@
 def: Joined<["-"], "O">;
+def: F<"as-needed">;
 def: F<"build-id">;
@@ -155,2 +156,3 @@
 defm: EqNoHelp<"minor-image-version">;
+def: F<"no-as-needed">;
 def: F<"no-undefined">;
EOF
# fix errors when working on a (ImDisk) RAM-drive (version <= 13.0.0)
####bug reported here: https://bugs.llvm.org/show_bug.cgi?id=52080
patch -ulbf llvm/include/llvm/Support/FileSystem.h << EOF
@@ -866,2 +866,6 @@
   int FD = -1;
+#ifdef _WIN32
+  // Whether we need to manually remove the file on close.
+  bool RemoveOnClose = false;
+#endif

EOF
patch -ulbf llvm/lib/Support/Path.cpp << EOF
@@ -1192,2 +1192,6 @@
   Other.FD = -1;
+#ifdef _WIN32
+  RemoveOnClose = Other.RemoveOnClose;
+  Other.RemoveOnClose = false;
+#endif
   return *this;
@@ -1208,14 +1212,16 @@
   TmpName = "";
-  return Error::success();
-#else
-  // Always try to close and remove.
+  bool Remove = true;
+#endif
   std::error_code RemoveEC;
-  if (!TmpName.empty()) {
+  if (Remove && !TmpName.empty()) {
     RemoveEC = fs::remove(TmpName);
+#ifndef _WIN32
     sys::DontRemoveFileOnSignal(TmpName);
+#endif
     if (!RemoveEC)
       TmpName = "";
+  } else {
+    TmpName = "";
   }
   return errorCodeToError(RemoveEC);
-#endif
 }
@@ -1230,2 +1236,3 @@
   std::error_code RenameEC = setDeleteDisposition(H, false);
+  bool ShouldDelete = false;
   if (!RenameEC) {
@@ -1236,3 +1243,3 @@
       RenameEC = copy_file(TmpName, Name);
-      setDeleteDisposition(H, true);
+      ShouldDelete = true;
     }
@@ -1242,3 +1249,9 @@
   if (RenameEC)
-    setDeleteDisposition(H, true);
+    ShouldDelete = true;
+  if (ShouldDelete) {
+    if (!RemoveOnClose)
+      setDeleteDisposition(H, true);
+    else
+      remove(TmpName);
+  }
 #else
@@ -1300,2 +1313,7 @@
 #ifndef _WIN32
+  auto H = reinterpret_cast<HANDLE>(_get_osfhandle(FD));
+  if (std::error_code EC = setDeleteDisposition(H, true)) {
+    Ret.RemoveOnClose = true;
+  }
+#else
   if (sys::RemoveFileOnSignal(ResultPath)) {
EOF
patch -ulbf llvm/lib/Support/Windows/Path.inc << EOF
@@ -429,3 +429,3 @@
   if (!IsLocal)
-    return std::error_code();
+    return errc::not_supported;

@@ -1185,8 +1185,2 @@

-  if (Flags & OF_Delete) {
-    if ((EC = setDeleteDisposition(Result, true))) {
-      ::CloseHandle(Result);
-      return errorCodeToError(EC);
-    }
-  }
   return Result;
EOF
## fix compiler-rt/cmake/config-ix.cmake (version >= 13.0.0)
#patch -ulbf compiler-rt/cmake/config-ix.cmake << EOF
#@@ -196,3 +196,3 @@
#     NOT CMAKE_SIZEOF_VOID_P EQUAL 8)
#-  message(FATAL_ERROR "Please use architecture with 4 or 8 byte pointers.")
#+  message(WATNING "Please use architecture with 4 or 8 byte pointers.")
# endif()
#EOF
# fix detection of MSVC linker in compiler-rt/CMakeLists.txt (version >= 13.0.0)
patch -ulbf compiler-rt/CMakeLists.txt << EOF
@@ -570,3 +570,3 @@

-if (CMAKE_LINKER MATCHES "link.exe\$")
+if (CMAKE_LINKER MATCHES "link.exe\$" AND NOT CMAKE_LINKER MATCHES "llvm-link.exe\$")
   # Silence MSVC linker warnings caused by empty object files. The
EOF
mkdir -p build_stage1 &&
 # build native LLVM suite
 wl-showstatus configure &&
 #clang-tools-extra;libclc;libunwind;openmp;parallel-libs;polly;pstl;flang
 #-DLLVM_TARGETS_TO_BUILD:STRING="X86;ARM;AArch64" \
 #-DLIBCXX_CXX_ABI_LIBRARY_PATH:PATH=$PWD/build_libcxxabi/lib \
 #-DLIBCXXABI_LIBCXX_INCLUDES:PATH=$PWD/build_libcxx/include/c++/v1 \
 #-DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR:BOOL=ON \ #-> runtimes stored in lib/clang/$version/$target/lib (instead of lib/clang/$version/lib/$os)
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$PWD/stage1 -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
  -DBUILD_SHARED_LIBS:BOOL=OFF \
  -DLLVM_BUILD_LLVM_DYLIB:BOOL=OFF \
  -DCLANG_ENABLE_BOOTSTRAP:BOOL=OFF \
  -DLLVM_ENABLE_PROJECTS:STRING="clang;lld" \
  -DLLVM_ENABLE_RUNTIMES:STRING="libcxx;libcxxabi" \
  -DLLVM_TARGETS_TO_BUILD:STRING="X86;ARM;AArch64" \
  -DLLVM_HOST_TRIPLE:STRING=$BUILDPLATFORM \
  -DLLVM_DEFAULT_TARGET_TRIPLE:STRING=$RUNPLATFORM \
  -DLLVM_BUILD_STATIC=ON \
  -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF \
  -DLLVM_CCACHE_BUILD:BOOL=OFF \
  -DLLVM_ENABLE_MODULES:BOOL=OFF \
  -DLLVM_ENABLE_PLUGINS:BOOL=ON \
  -DLLVM_ENABLE_THREADS:BOOL=ON \
  -DLLVM_ENABLE_UNWIND_TABLES:BOOL=ON \
  -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF \
  -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON \
  -DLLVM_ENABLE_LTO:STRING=OFF \
  -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) \
  -DLLVM_ENABLE_RTTI:BOOL=ON \
  -DLLVM_ENABLE_TERMINFO:BOOL=OFF \
  -DLLVM_ENABLE_Z3_SOLVER:BOOL=ON \
  -DLLVM_Z3_INSTALL_DIR:STRING=$MINGWPREFIX \
  -DLLVM_ENABLE_FFI:BOOL=ON \
  -DLLVM_ENABLE_FFI:BOOL=ON \
  -DFFI_INCLUDE_DIR:PATH=$MINGWPREFIX/include \
  -DLLVM_ENABLE_LIBXML2:BOOL=ON \
  -DLLVM_ENABLE_PIC:BOOL=OFF \
  -DLLVM_USE_RELATIVE_PATHS_IN_DEBUG_INFO:BOOL=ON \
  -DLLVM_USE_RELATIVE_PATHS_IN_FILES:BOOL=ON \
  -DLLVM_INSTALL_BINUTILS_SYMLINKS:BOOL=OFF \
  -DLLVM_INSTALL_CCTOOLS_SYMLINKS:BOOL=OFF \
  -DLLVM_ENABLE_DOXYGEN:BOOL=OFF \
  -DLLVM_ENABLE_SPHINX=OFF \
  -DLLVM_INCLUDE_DOCS:BOOL=OFF \
  -DLLVM_BUILD_EXAMPLES:BOOL=OFF \
  -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF \
  -DLLVM_INCLUDE_BENCHMARKS:BOOL=OFF \
  -DLLVM_INCLUDE_TESTS:BOOL=OFF \
  \
  -DLIBCXX_ENABLE_SHARED:BOOL=OFF \
  -DLIBCXX_ENABLE_STATIC:BOOL=ON \
  -DLIBCXX_USE_COMPILER_RT:BOOL=ON \
  -DLIBCXX_HAS_WIN32_THREAD_API:BOOL=ON \
  -DLIBCXX_HAS_PTHREAD_API:BOOL=OFF \
  -DLIBCXX_ENABLE_EXPERIMENTAL_LIBRARY:BOOL=OFF \
  -DLIBCXX_CXX_ABI=libcxxabi \
  -DLIBCXX_CXX_ABI_INCLUDE_PATHS=$PWD/libcxxabi/include \
  -DLIBCXX_LIBDIR_SUFFIX="" \
  -DLIBCXX_INCLUDE_TESTS:BOOL=OFF \
  -DLIBCXX_ENABLE_ABI_LINKER_SCRIPT:BOOL=OFF \
  \
  -DLIBCXXABI_ENABLE_SHARED:BOOL=OFF \
  -DLIBCXXABI_ENABLE_STATIC:BOOL=ON \
  -DLIBCXXABI_USE_COMPILER_RT:BOOL=ON \
  -DLIBCXXABI_LIBDIR_SUFFIX="" \
  -DLIBCXXABI_ENABLE_EXCEPTIONS:BOOL=ON \
  -DLIBCXXABI_ENABLE_ASSERTIONS:BOOL=OFF \
  \
  -DLIBCLANG_BUILD_STATIC:BOOL=OFF \
  -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF \
  -DCLANG_PLUGIN_SUPPORT:BOOL=ON \
  -DCLANG_DEFAULT_RTLIB:STRING= \
  -DCLANG_DEFAULT_CXX_STDLIB:STRING=libc++ \
  -DCLANG_DEFAULT_UNWINDLIB:STRING=none \
  -DCLANG_DEFAULT_OPENMP_RUNTIME:STRING=libgomp \
  -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF \
  -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON \
  -DCLANG_TOOL_APINOTES_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_ARCMT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_C_ARCMT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_C_INDEX_TEST_BUILD:BOOL=OFF \
  -DCLANG_INCLUDE_DOCS:BOOL=OFF \
  -DCLANG_BUILD_EXAMPLES:BOOL=OFF \
  -DCLANG_INCLUDE_TESTS:BOOL=OFF \
  \
  -DCMAKE_C_FLAGS:STRING="-static-libgcc" \
  -DCMAKE_CXX_FLAGS:STRING="-static-libstdc++" \
  -DCMAKE_{SHARED,MODULE,EXE}_LINKER_FLAGS:STRING="-static-libgcc -static-libstdc++" \
  -DPython3_FIND_REGISTRY:BOOL=NEVER \
  -DPython3_EXECUTABLE:FILEPATH=$MINGWPREFIX/share/python/bin/python.exe \
  -Sllvm -Bbuild_stage1 &&
 wl-showstatus build-install &&
 #ninja -Cbuild_stage1 install/strip &&
 ( ninja -Cbuild_stage1 install/strip && ninja -j1 -Cbuild_stage1 install/strip ) &&
 cp -f stage1/bin/clang.exe stage1/bin/gcc_renamed_clang.exe &&
 cp -f stage1/bin/clang++.exe stage1/bin/g++_renamed_clang++.exe &&

 # build MinGW-w64 headers
 mkdir -p build_mingw-w64_headers &&
 wl-showstatus configure &&
 cd build_mingw-w64_headers &&
 $MINGWPREFIX/src/mingw-w64/mingw-w64-headers/configure --prefix=$PWD/../stage1 \
  --build=$BUILDPLATFORM \
  --host=$RUNPLATFORM \
  --with-default-win32-winnt=0x0600 \
  --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrt"; else echo "msvcrt-os"; fi) \
  --enable-sdk=all \
  --enable-idl \
  &&
 cd .. &&
 wl-showstatus build-install &&
 make -Cbuild_mingw-w64_headers install-strip &&

 # build MinGW-w64 crt libraries
 for arch in i686 x86_64 armv7 aarch64; do
  mkdir -p build_mingw-w64_crt_$arch &&
  wl-showstatus configure &&
  cd build_mingw-w64_crt_$arch &&
  $MINGWPREFIX/src/mingw-w64/mingw-w64-crt/configure --prefix=$PWD/../mingw-w64_crt_$arch \
   --build=$BUILDPLATFORM \
   --host=$arch-w64-mingw32 \
   --$(if [ "$arch" == "i686" ]; then echo "enable"; else echo "disable"; fi)-lib32 \
   --$(if [ "$arch" == "x86_64" ]; then echo "enable"; else echo "disable"; fi)-lib64 \
   --$(if [ "$arch" == "armv7" ]; then echo "enable"; else echo "disable"; fi)-libarm32 \
   --$(if [ "$arch" == "aarch64" ]; then echo "enable"; else echo "disable"; fi)-libarm64 \
   --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrt"; else echo "msvcrt-os"; fi) \
   --enable-wildcard \
   --disable-delay-import-libs \
   --disable-experimental \
   --without-genlib \
   CC="$PWD/../stage1/bin/gcc_renamed_clang.exe -target $arch-w64-mingw32 -fuse-ld=lld" \
   CXX="$PWD/../stage1/bin/g++_renamed_clang++.exe -target $arch-w64-mingw32 -fuse-ld=lld" \
   AS="$PWD/../stage1/bin/llvm-as.exe" \
   LD="$PWD/../stage1/bin/lld-link.exe" \
   DLLTOOL="$PWD/../stage1/bin/llvm-dlltool.exe" \
   AR="$PWD/../stage1/bin/llvm-ar.exe" \
   RANLIB="$PWD/../stage1/bin/llvm-ranlib.exe" \
   RC="$PWD/../stage1/bin/llvm-windres.exe --target=$arch-w64-mingw32" \
   NM="$PWD/../stage1/bin/llvm-nm.exe" \
   OBJDUMP="$PWD/../stage1/bin/llvm-objdump.exe" \
   CFLAGS="-I$PWD/mingw-w64-$arch/include" \
   CCASFLAGS="-I$PWD/mingw-w64-$arch/include" \
   &&
   #CFLAGS="-I$PWD/../stage1/include -I$PWD/../stage1/include/$RUNPLATFORM/c++/v1 -I$PWD/../stage1/include/c++/v1 $(if [ "$arch" == "aarch64" ]; then echo "-D__aarch64__"; fi)" \
   #LDFLAGS="-L$PWD/../stage1/lib -Wl,-no-undefined" \
  cd .. &&
  #-rtlib=compiler-rt -unwindlib=libunwind -stdlib=libc++ 
  wl-showstatus build-install &&
  # build include files and make them available
  make -Cbuild_mingw-w64_crt_$arch install-strip &&
  mkdir -p stage1/$arch-w64-mingw32 &&
  cp -rf mingw-w64_crt_$arch/* stage1/$arch-w64-mingw32/ &&
  #mkdir -p stage1/lib/$arch-w64-mingw32 &&
  #cp -rf mingw-w64_crt_$arch/lib/* stage1/lib/$arch-w64-mingw32/ &&
  #mkdir -p stage1/$arch-w64-windows-gnu/lib &&
  #cp -rf mingw-w64_crt_$arch/lib/* stage1/$arch-w64-windows-gnu/lib/ &&
  touch SUCCESS_$arch || break
 done &&
 if [ $(ls -1 SUCCESS_*|wc -l) -ne 4 ]; then false; fi &&
 rm -f SUCCESS_* &&
    echo OK



 #CLANG_VERSION=$(basename "$(dirname "$(dirname "$(dirname "$("$INSTALLPREFIX/share/llvm/bin/$HOST-clang.exe" --print-libgcc-file-name -rtlib=compiler-rt)")")")")
 #-DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm/lib/clang/$CLANG_VERSION
 for arch in i686 x86_64 armv7 aarch64; do
  mkdir -p build_compiler-rt-$arch &&
  wl-showstatus configure &&
  PATH=stage1/bin:$PATH \
  cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$PWD/compiler-rt-$arch -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
   -DBUILD_SHARED_LIBS:BOOL=ON \
   -DCOMPILER_RT_DEFAULT_TARGET_TRIPLE:STRING=$arch-windows-gnu \
   -DCOMPILER_RT_DEFAULT_TARGET_ONLY:BOOL=ON \
   -DCOMPILER_RT_USE_LIBCXX:BOOL=OFF \
   -DCOMPILER_RT_USE_BUILTINS_LIBRARY=OFF \
   -DCOMPILER_RT_BUILD_BUILTINS:BOOL=ON \
   -DCOMPILER_RT_BUILD_SANITIZERS:BOOL=OFF \
   -DCOMPILER_RT_BUILD_LIBFUZZER:BOOL=OFF \
   -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF \
   -DCOMPILER_RT_CAN_EXECUTE_TESTS:BOOL=OFF \
   -DLLVM_MAIN_SRC_DIR:PATH=$PWD/llvm \
   -DLLVM_CONFIG_PATH:PATH=$PWD/stage1/bin/llvm-config.exe \
   \
   -DCMAKE_ASM_COMPILER_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
   -DCMAKE_ASM_COMPILER_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
   -DCMAKE_C_COMPILER:FILEPATH=$PWD/stage1/bin/clang.exe \
   -DCMAKE_C_COMPILER_TARGET=$arch-windows-gnu \
   -DCMAKE_C_COMPILER_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
   -DCMAKE_C_COMPILER_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
   -DCMAKE_CXX_COMPILER:FILEPATH=$PWD/stage1/bin/clang++.exe \
   -DCMAKE_CXX_COMPILER_TARGET=$arch-windows-gnu \
   -DCMAKE_CXX_COMPILER_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
   -DCMAKE_CXX_COMPILER_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
   -DCMAKE_RC_COMPILER:FILEPATH=$PWD/stage1/bin/llvm-windres.exe \
   -DCMAKE_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
   -DCMAKE_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
   -DCMAKE_READELF:FILEPATH=$PWD/stage1/bin/llvm-readelf.exe \
   -DCMAKE_DLLTOOL:FILEPATH=$PWD/stage1/bin/llvm-dlltool.exe \
   -DCMAKE_NM:FILEPATH=$PWD/stage1/bin/llvm-nm.exe \
   -DCMAKE_OBJCOPY:FILEPATH=$PWD/stage1/bin/llvm-objcopy.exe \
   -DCMAKE_OBJDUMP:FILEPATH=$PWD/stage1/bin/llvm-objdump.exe \
   -DCMAKE_LINKER:FILEPATH=$PWD/stage1/bin/llvm-link.exe \
   -DCMAKE_STRIP:FILEPATH=$PWD/stage1/bin/llvm-strip.exe \
   -DGOLD_EXECUTABLE:FILEPATH=$PWD/stage1/bin/ld.lld.exe \
   -DCMAKE_C_FLAGS:STRING="--target=$arch-w64-mingw32 -fuse-ld=lld" \
   -DCMAKE_CXX_FLAGS:STRING="--target=$arch-w64-mingw32 -fuse-ld=lld " \
   -DCMAKE_{SHARED,MODULE,EXE}_LINKER_FLAGS:STRING="-L$PWD/build_mingw-w64_winpthreads_$arch/fakelib" \
   -Scompiler-rt -Bbuild_compiler-rt-$arch &&
   #-DCMAKE_CXX_FLAGS:STRING="--target=$arch-w64-mingw32 -fuse-ld=lld -stdlib=libc++ -Wl,-L$PWD/build_libcxx_$arch" \
   #-DLLVM_TARGETS_TO_BUILD:STRING="X86;NVPTX;AMDGPU;ARM;AArch64;WebAssembly" \
   #-DLLVM_MAIN_SRC_DIR:PATH=$PWD/llvm \
   #-DLLVM_CONFIG_PATH:PATH=$PWD/build_llvm/bin/llvm-config.exe \
   #-DCMAKE_CXX_FLAGS:STRING=" " \
   #-DPython3_EXECUTABLE:FILEPATH=$PYDIR/python.exe \
  wl-showstatus build-install &&
  PATH=$PWD/stage1/bin:$PATH \
  ninja -Cbuild_compiler-rt-$arch install/strip &&
  touch SUCCESS_$arch || break
 done &&
 if [ $(ls -1 SUCCESS_*|wc -l) -ne 4 ]; then false; fi &&
 rm -f SUCCESS_* &&
    echo OK



 # build MinGW-w64 winpthreads library
 for arch in i686 x86_64 armv7 aarch64; do
  mkdir -p build_mingw-w64_winpthreads_$arch &&
  wl-showstatus configure &&
  cd build_mingw-w64_winpthreads_$arch &&
  $MINGWPREFIX/src/mingw-w64/mingw-w64-libraries/winpthreads/configure --prefix=$PWD/../mingw-w64_winpthreads_$arch \
   --build=$BUILDPLATFORM \
   --host=$arch-w64-mingw32 \
   --with-sysroot=$PWD/../stage1 \
   --without-gnu-ld \
   CC="$PWD/../stage1/bin/gcc_renamed_clang.exe -fuse-ld=lld -target $arch-w64-mingw32" \
   CXX="$PWD/../stage1/bin/g++_renamed_clang++.exe -fuse-ld=lld -target $arch-w64-mingw32" \
   AS="$PWD/../stage1/bin/llvm-as.exe" \
   LD="$PWD/../stage1/bin/lld-link.exe" \
   DLLTOOL="$PWD/../stage1/bin/llvm-dlltool.exe" \
   AR="$PWD/../stage1/bin/llvm-ar.exe" \
   RANLIB="$PWD/../stage1/bin/llvm-ranlib.exe" \
   RC="$PWD/../stage1/bin/llvm-windres.exe --target=$arch-w64-mingw32" \
   NM="$PWD/../stage1/bin/llvm-nm.exe" \
   OBJDUMP="$PWD/../stage1/bin/llvm-objdump.exe" \
   CFLAGS="-I$PWD/mingw-w64-$arch/include $(if [ "$arch" == "armv7" ]; then echo "-target armv7-w64-mingw32 -march=armv7-a -mtune=armv7-a+vfpv4+neon+thumb2"; fi)" \
   CCASFLAGS="-I$PWD/mingw-w64-$arch/include $(if [ "$arch" == "armv7" ]; then echo "-target armv7-w64-mingw32 -march=armv7-a -mtune=armv7-a+vfpv4+neon+thumb2"; fi)" \
   LDFLAGS="$(if [ "$arch" == "armv7" ]; then echo "-lmingwex"; fi)" \
   &&
   #CFLAGS="-I$PWD/../stage1/include -I$PWD/../stage1/include/$RUNPLATFORM/c++/v1 -I$PWD/../stage1/include/c++/v1 $(if [ "$arch" == "aarch64" ]; then echo "-D__aarch64__"; fi)" \
   #LDFLAGS="-L$PWD/../stage1/lib -Wl,-no-undefined" \
  cd .. &&
  #-rtlib=compiler-rt -unwindlib=libunwind -stdlib=libc++ 
  #-Wl,-m,$(case $arch in i686) echo "i386pe";; x86_64) echo "i386pep";; armv7) echo "thumb2pe";; aarch64) echo "arm64pe";; esac)
  # fix detection of shared libraries
  sed -i.bak2 -e "s/\(deplibs_check_method=\"\)[^\"]*/\1pass_all/" build_mingw-w64_winpthreads_$arch/libtool &&
  # fix link issues in build_mingw-w64/mingw-w64-libraries/winpthreads/
  sed -i.bak -e "s?\(-o \)\([^ ]*\)\(.*\) -link \(-dll\)?-shared -s -mwindows \1.libs/libwinpthread-1.dll -Wl,--out-implib,\2 \3 \4?" build_mingw-w64_winpthreads_$arch/libtool &&
  sed -i.bak -e "s?\$(AM_V_CCLD).*\$(libwinpthread_la_OBJECTS).*?& \&\& \$(AR) \$(ARFLAGS) .libs/libwinpthread.a \$(libwinpthread_la_OBJECTS:.lo=.o) \&\& cp -f .libs/libwinpthread.a .libs/libwinpthread.lib?" build_mingw-w64_winpthreads_$arch/Makefile &&
  wl-showstatus build-install &&
  #make -Cbuild_mingw-w64_winpthreads_$arch fakelib/libgcc.a fakelib/libgcc_eh.a fakelib/libgcc_s.a &&
  make -Cbuild_mingw-w64_winpthreads_$arch install-strip &&
  mkdir -p stage1/$arch-w64-mingw32 &&
  cp -rf mingw-w64_winpthreads_$arch/* stage1/$arch-w64-mingw32/ &&
  #mkdir -p stage1/lib/$arch-w64-mingw32 &&
  #cp -rf mingw-w64_winpthreads_$arch/* stage1/lib/$arch-w64-mingw32/ &&
  ##mkdir -p stage1/$arch-w64-windows-gnu/lib &&
  ##cp -rf mingw-w64_winpthreads_$arch/lib/* stage1/$arch-w64-windows-gnu/lib/ &&
  touch SUCCESS_$arch || break
 done &&
 if [ $(ls -1 SUCCESS_*|wc -l) -ne 4 ]; then false; fi &&
 rm -f SUCCESS_* &&
    echo OK

#stage1/bin/llvm-objdump.exe --headers mingw-w64_crt_*/lib/crtbegin.o









































# build native LLVM suite using bootstrapping/runtimes build
mkdir -p build_llvm1 &&
 wl-showstatus configure &&
 #-DCMAKE_FIND_ROOT_PATH=
 #-DLLVM_HOST_TRIPLE=
 #-DCLANG_DEFAULT_UNWINDLIB:STRING=none \
 #-DLLVM_ENABLE_RUNTIMES:STRING="libunwind" \
 #-DCLANG_DEFAULT_UNWINDLIB:STRING=libunwind \
 #-DCMAKE_CXX_FLAGS:STRING="-fno-unwind-tables" \
 #-DLIBCXX_TARGET_INFO="libcxx.test.target_info.MingwLocalTI" \
 #-DLLVM_RUNTIME_TARGETS="$(for arch in i686 x86_64 armv7 aarch64; do echo -n "$arch-w64-mingw32;"; done)" \
 #-DLLVM_RUNTIME_TARGETS="$(for arch in i686 x86_64 armv7 aarch64; do echo -n "$arch-pc-windows-gnu;"; done)" \
 #-DLLVM_RUNTIME_TARGETS="$(for arch in i686 x86_64 armv7 aarch64; do echo -n "$arch-w64-windows-gnu;"; done)" \
 #targets: wasm32/wasm64
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$PWD/build1 -DCMAKE_BUILD_TYPE:STRING=Release \
  -DCMAKE_SYSTEM_NAME:STRING=Windows \
  -DCMAKE_CROSSCOMPILING:BOOL=ON \
  -DCROSS_TOOLCHAIN_FLAGS_NATIVE:STRING= \
  -DLLVM_LINK_LLVM_DYLIB:BOOL=ON \
  -DLLVM_ENABLE_PROJECTS:STRING="clang;lld" \
  -DLLVM_ENABLE_RUNTIMES:STRING="compiler-rt" \
  -DLLVM_TARGETS_TO_BUILD="X86" \
  -DLLVM_RUNTIME_TARGETS="default;x86_64-w64-windows-gnu" \
  -DLLVM_INSTALL_TOOLCHAIN_ONLY:BOOL=OFF \
  \
  -DLLVM_ENABLE_UNWIND_TABLES:BOOL=OFF \
  -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF \
  -DLLVM_ENABLE_RTTI:BOOL=ON \
  -DLLVM_ENABLE_EH:BOOL=ON \
  \
  -DLIBCXX_ENABLE_EXCEPTIONS:BOOL=ON \
  -DLIBCXX_HAS_WIN32_THREAD_API:BOOL=ON \
  -DLIBCXX_CXX_ABI:STRING=libstdc++ \
  -DLIBCXXABI_USE_LLVM_UNWINDER:BOOL=ON \
  -DCOMPILER_RT_USE_BUILTINS_LIBRARY=OFF \
  -DCOMPILER_RT_BUILD_BUILTINS:BOOL=ON \
  \
  -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM:STRING=NEVER \
  -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE:STRING=ONLY \
  -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY:STRING=ONLY \
  -DCLANG_DEFAULT_RTLIB:STRING=compiler-rt \
  -DCLANG_DEFAULT_UNWINDLIB:STRING=none \
  -DCLANG_DEFAULT_CXX_STDLIB:STRING=libc++ \
  -DCLANG_DEFAULT_LINKER:STRING=lld \
  -DTOOLCHAIN_ONLY:BOOL=ON \
  -Sllvm -Bbuild_llvm1 &&
  # -rtlib=compiler-rt -stdlib=libc++
 wl-showstatus build-install &&
 ninja -Cbuild_llvm1 install-runtimes-stripped &&
 ninja -Cbuild_llvm1 install/strip &&
 cp -f build1/bin/clang.exe build1/bin/gcc_renamed_clang.exe &&
 cp -f build1/bin/clang++.exe build1/bin/g++_renamed_clang++.exe &&

 # build MinGW-w64 headers
 mkdir -p build_mingw-w64_headers &&
 wl-showstatus configure &&
 cd build_mingw-w64_headers &&
 $MINGWPREFIX/src/mingw-w64/mingw-w64-headers/configure --prefix=$PWD/../build1 \
  --build=$BUILDPLATFORM \
  --host=$RUNPLATFORM \
  --with-default-win32-winnt=0x0600 \
  --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrt"; else echo "msvcrt-os"; fi) \
  --enable-sdk=all \
  --enable-idl \
  &&
 cd .. &&
 wl-showstatus build-install &&
 make -Cbuild_mingw-w64_headers install-strip &&

 # build MinGW-w64 (except for tools)
 mkdir -p build_mingw-w64 &&
 wl-showstatus configure &&
 cd build_mingw-w64 &&
 $MINGWPREFIX/src/mingw-w64/configure --prefix=$PWD/../build1_mingw-w64 \
  --build=$BUILDPLATFORM \
  --host=$RUNPLATFORM \
  --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrt"; else echo "msvcrt-os"; fi) \
  --without-headers \
  --with-libraries=all \
  --with-tools= \
  --enable-sdk=all \
  --enable-secure-api \
  --enable-wildcard \
  --enable-lib$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi) \
  --disable-lib$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 32; else echo 64; fi) \
  --disable-libarm32 \
  --disable-libarm64 \
  --with-default-win32-winnt=0x0600 \
  --enable-idl \
  --without-genlib \
  --without-gnu-ld \
  --with-sysroot=$PWD/../build1 \
  CC="$PWD/../build1/bin/gcc_renamed_clang.exe --driver-mode=gcc -fuse-ld=lld" \
  CXX="$PWD/../build1/bin/g++_renamed_clang++.exe --driver-mode=g++ -fuse-ld=lld" \
  AS="$PWD/../build1/bin/llvm-as.exe" \
  LD="$PWD/../build1/bin/lld-link.exe" \
  DLLTOOL="$PWD/../build1/bin/llvm-dlltool.exe" \
  AR="$PWD/../build1/bin/llvm-ar.exe" \
  RANLIB="$PWD/../build1/bin/llvm-ranlib.exe" \
  RC="$PWD/../build1/bin/llvm-windres.exe" \
  NM="$PWD/../build1/bin/llvm-nm.exe" \
  OBJDUMP="$PWD/../build1/bin/llvm-objdump.exe" \
  &&
  #--with-libraries=winpthreads,winstorecompat 
  #--libdir=$PWD/../build1_mingw-w64/$(case $(echo $RUNPLATFORM|sed -e "s/^\([^-]*\).*$/\1/") in i686) echo "lib32";; x86_64) echo "lib64";; armv7) echo "libarm32";; aarch64) echo "libarm64";; esac) \
  #CFLAGS="-I$PWD/../build1/lib/clang/$(echo $VERSION|sed -e "s/\([0-9]*\.[0-9]*\.[0-9]*\).*$/\1/")/include -I$PWD/../build1_mingw-w64/include" \
  #CFLAGS="-I$PWD/../build1_mingw-w64/include -D_FORTIFY_SOURCE=0 -fno-stack-protector" \
  #CFLAGS="-I$PWD/../build1/include -I$PWD/../build1/include/$BUILDPLATFORM/c++/v1 -I$PWD/../build1/include/c++/v1" \
  #LDFLAGS="-L$PWD/../build1/lib -Wl,-no-undefined" \
 cd .. &&
 # fix link issues in build_mingw-w64/mingw-w64-libraries/winpthreads/
 sed -i.bak -e "s?\(-o \)\([^ ]*\)\(.*\) -link \(-dll\)?-shared -s -mwindows \1.libs/libwinpthread-1.dll -Wl,--out-implib,\2 \3 \4?" build_mingw-w64/mingw-w64-libraries/winpthreads/libtool &&
 sed -i.bak -e "s?\$(AM_V_CCLD).*\$(libwinpthread_la_OBJECTS).*?& \&\& \$(AR) \$(ARFLAGS) .libs/libwinpthread.a \$(libwinpthread_la_OBJECTS:.lo=.o) \&\& cp -f .libs/libwinpthread.a .libs/libwinpthread.lib?" build_mingw-w64/mingw-w64-libraries/winpthreads/Makefile &&
 #wl-showstatus build &&
 #( make -Cbuild_mingw-w64 || make -Cbuild_mingw-w64 CC="$PWD/build1/bin/clang.exe -fuse-ld=lld -fno-integrated-as" ) &&
 wl-showstatus build-install &&
 #make -Cbuild_mingw-w64/mingw-w64-headers install-strip &&
 #make -Cbuild_mingw-w64/mingw-w64-crt install-libarm32LIBRARIES CFLAGS="-target armv7-w64-mingw32 -march=armv7-a -mtune=armv7-a+vfpv4+neon+thumb2 -D__arm__" CCASFLAGS="-target armv7-w64-mingw32 -march=armv7-a -mtune=armv7-a+vfpv4+neon+thumb2" &&
 #make -Cbuild_mingw-w64/mingw-w64-crt install-libarm64LIBRARIES CFLAGS="-target aarch64-w64-mingw32 -mtune=cortex-a57 -D__aarch64__" CCASFLAGS="-target aarch64-w64-mingw32 -mtune=cortex-a57" &&
 #make -Cbuild_mingw-w64/mingw-w64-crt install-strip &&
 make -Cbuild_mingw-w64 install-strip &&
 mkdir -p build1/$RUNPLATFORM &&
 cp -rf build1_mingw-w64/* build1/$RUNPLATFORM/ &&
 #mkdir -p build1/$(echo $RUNPLATFORM|sed -e "s/^\([^-]*\).*$/\1/")-w64-windows-gnu/lib &&
 #cp -rf build1_mingw-w64/lib/* build1/$(echo $RUNPLATFORM|sed -e "s/^\([^-]*\).*$/\1/")-w64-windows-gnu/lib
    echo OK




mkdir -p build_runtimes &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja \
  -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
  -DBUILD_SHARED_LIBS:BOOL=ON \
  -DLLVM_ENABLE_RUNTIMES:STRING="libcxxabi" \
  -DLLVM_ENABLE_LTO:STRING=OFF \
  -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) \
  -DLLVM_ENABLE_RTTI:BOOL=ON \
  -DLLVM_DIR:PATH=$INSTALLPREFIX/share/llvm \
  -DClang_DIR:PATH=$INSTALLPREFIX/share/llvm \
  -DLLVM_CONFIG:STRING=$PWD/build1/bin/llvm-config.exe \
  -DCMAKE_ASM_COMPILER:FILEPATH=$PWD/build1/bin/llvm-as.exe \
  -DCMAKE_ASM_COMPILER_AR:FILEPATH=$PWD/build1/bin/llvm-ar.exe \
  -DCMAKE_ASM_COMPILER_RANLIB:FILEPATH=$PWD/build1/bin/llvm-ranlib.exe \
  -DCMAKE_C_COMPILER:FILEPATH=$PWD/build1/bin/clang.exe \
  -DCMAKE_C_COMPILER_AR:FILEPATH=$PWD/build1/bin/llvm-ar.exe \
  -DCMAKE_C_COMPILER_RANLIB:FILEPATH=$PWD/build1/bin/llvm-ranlib.exe \
  -DCMAKE_CXX_COMPILER:FILEPATH=$PWD/build1/bin/clang++.exe \
  -DCMAKE_CXX_COMPILER_AR:FILEPATH=$PWD/build1/bin/llvm-ar.exe \
  -DCMAKE_CXX_COMPILER_RANLIB:FILEPATH=$PWD/build1/bin/llvm-ranlib.exe \
  -DCMAKE_RC_COMPILER:FILEPATH=$PWD/build1/bin/llvm-windres.exe \
  -DCMAKE_AR:FILEPATH=$PWD/build1/bin/llvm-ar.exe \
  -DCMAKE_RANLIB:FILEPATH=$PWD/build1/bin/llvm-ranlib.exe \
  -DCMAKE_READELF:FILEPATH=$PWD/build1/bin/llvm-readelf.exe \
  -DCMAKE_DLLTOOL:FILEPATH=$PWD/build1/bin/llvm-dlltool.exe \
  -DCMAKE_NM:FILEPATH=$PWD/build1/bin/llvm-nm.exe \
  -DCMAKE_OBJCOPY:FILEPATH=$PWD/build1/bin/llvm-objcopy.exe \
  -DCMAKE_OBJDUMP:FILEPATH=$PWD/build1/bin/llvm-objdump.exe \
  -DCMAKE_LINKER:FILEPATH=$PWD/build1/bin/llvm-link.exe \
  -DCMAKE_STRIP:FILEPATH=$PWD/build1/bin/llvm-strip.exe \
  -DGOLD_EXECUTABLE:FILEPATH=$PWD/build1/bin/ld.lld.exe \
  -DCMAKE_ASM_FLAGS:STRING="-fuse-ld=lld" \
  -DCMAKE_C_FLAGS:STRING="--driver-mode=gcc -fuse-ld=lld" \
  -DCMAKE_CXX_FLAGS:STRING="--driver-mode=g++ -fuse-ld=lld" \
  -DCMAKE_{SHARED,MODULE,EXE}_LINKER_FLAGS:STRING="-fuse-ld=lld" \
  -DPython3_EXECUTABLE:PATH=$MINGWPREFIX/share/python/bin/python3.exe \
  -Sruntimes -Bbuild_runtimes &&
 #-DLLVM_ENABLE_RUNTIMES:STRING="compiler-rt;libc;libcxx;libcxxabi;libunwind;openmp" 
 #-DLLVM_LIBC_INCLUDE_SCUDO:BOOL=ON 
 wl-showstatus build-install &&
 ninja -Cbuild_runtimes install/strip &&
    echo OK

# fix compiler-rt/cmake/config-ix.cmake (version >= 13.0.0)
patch -ulbf compiler-rt/cmake/config-ix.cmake << EOF
@@ -196,3 +196,3 @@
     NOT CMAKE_SIZEOF_VOID_P EQUAL 8)
-  message(FATAL_ERROR "Please use architecture with 4 or 8 byte pointers.")
+  message(WATNING "Please use architecture with 4 or 8 byte pointers.")
 endif()
EOF
# build native LLVM suite using bootstrapping/runtimes build
mkdir -p build_llvm2 &&
 wl-showstatus configure &&
 #-DCMAKE_FIND_ROOT_PATH=
 #-DLLVM_HOST_TRIPLE=
 #-DCLANG_DEFAULT_UNWINDLIB:STRING=none \
 #-DLLVM_ENABLE_RUNTIMES:STRING="libunwind" \
 #-DCLANG_DEFAULT_UNWINDLIB:STRING=libunwind \
 #-DCMAKE_CXX_FLAGS:STRING="-fno-unwind-tables" \
 #-DLIBCXX_TARGET_INFO="libcxx.test.target_info.MingwLocalTI" \
 #-DLLVM_RUNTIME_TARGETS="$(for arch in i686 x86_64 armv7 aarch64; do echo -n "$arch-w64-mingw32;"; done)" \
 #-DLLVM_RUNTIME_TARGETS="$(for arch in i686 x86_64 armv7 aarch64; do echo -n "$arch-pc-windows-gnu;"; done)" \
 #-DLLVM_RUNTIME_TARGETS="$(for arch in i686 x86_64 armv7 aarch64; do echo -n "$arch-w64-windows-gnu;"; done)" \
 #targets: wasm32/wasm64
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$PWD/build2 -DCMAKE_BUILD_TYPE:STRING=Release \
  -DCMAKE_SYSTEM_NAME:STRING=Windows \
  -DCMAKE_CROSSCOMPILING:BOOL=ON \
  -DCROSS_TOOLCHAIN_FLAGS_NATIVE:STRING= \
  -DLLVM_LINK_LLVM_DYLIB:BOOL=ON \
  -DLLVM_ENABLE_PROJECTS:STRING="clang;lld" \
  -DLLVM_ENABLE_RUNTIMES:STRING="compiler-rt;libcxx;libcxxabi;libunwind" \
  -DLLVM_TARGETS_TO_BUILD="X86" \
  -DLLVM_RUNTIME_TARGETS="default;x86_64-w64-windows-gnu" \
  -DLLVM_INSTALL_TOOLCHAIN_ONLY:BOOL=OFF \
  -DLLVM_ENABLE_LIBCXX=ON \
  \
  -DLLVM_ENABLE_UNWIND_TABLES:BOOL=OFF \
  -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF \
  -DLLVM_ENABLE_RTTI:BOOL=ON \
  -DLLVM_ENABLE_EH:BOOL=ON \
  \
  -DLIBCXX_ENABLE_EXCEPTIONS:BOOL=ON \
  -DLIBCXX_HAS_WIN32_THREAD_API:BOOL=ON \
  -DLIBCXX_CXX_ABI:STRING=libstdc++ \
  -DLIBCXXABI_USE_LLVM_UNWINDER:BOOL=ON \
  -DCOMPILER_RT_USE_BUILTINS_LIBRARY=OFF \
  -DCOMPILER_RT_BUILD_BUILTINS:BOOL=ON \
  \
  -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM:STRING=NEVER \
  -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE:STRING=ONLY \
  -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY:STRING=ONLY \
  -DCLANG_DEFAULT_RTLIB:STRING=compiler-rt \
  -DCLANG_DEFAULT_UNWINDLIB:STRING=none \
  -DCLANG_DEFAULT_CXX_STDLIB:STRING=libc++ \
  -DCLANG_DEFAULT_LINKER:STRING=lld \
  -DTOOLCHAIN_ONLY:BOOL=ON \
  \
  -DCMAKE_ASM_COMPILER:FILEPATH=$PWD/build1/bin/llvm-as.exe \
  -DCMAKE_ASM_COMPILER_AR:FILEPATH=$PWD/build1/bin/llvm-ar.exe \
  -DCMAKE_ASM_COMPILER_RANLIB:FILEPATH=$PWD/build1/bin/llvm-ranlib.exe \
  -DCMAKE_C_COMPILER:FILEPATH=$PWD/build1/bin/clang.exe \
  -DCMAKE_C_COMPILER_AR:FILEPATH=$PWD/build1/bin/llvm-ar.exe \
  -DCMAKE_C_COMPILER_RANLIB:FILEPATH=$PWD/build1/bin/llvm-ranlib.exe \
  -DCMAKE_CXX_COMPILER:FILEPATH=$PWD/build1/bin/clang++.exe \
  -DCMAKE_CXX_COMPILER_AR:FILEPATH=$PWD/build1/bin/llvm-ar.exe \
  -DCMAKE_CXX_COMPILER_RANLIB:FILEPATH=$PWD/build1/bin/llvm-ranlib.exe \
  -DCMAKE_RC_COMPILER:FILEPATH=$PWD/build1/bin/llvm-windres.exe \
  -DCMAKE_AR:FILEPATH=$PWD/build1/bin/llvm-ar.exe \
  -DCMAKE_RANLIB:FILEPATH=$PWD/build1/bin/llvm-ranlib.exe \
  -DCMAKE_READELF:FILEPATH=$PWD/build1/bin/llvm-readelf.exe \
  -DCMAKE_DLLTOOL:FILEPATH=$PWD/build1/bin/llvm-dlltool.exe \
  -DCMAKE_NM:FILEPATH=$PWD/build1/bin/llvm-nm.exe \
  -DCMAKE_OBJCOPY:FILEPATH=$PWD/build1/bin/llvm-objcopy.exe \
  -DCMAKE_OBJDUMP:FILEPATH=$PWD/build1/bin/llvm-objdump.exe \
  -DCMAKE_LINKER:FILEPATH=$PWD/build1/bin/llvm-link.exe \
  -DCMAKE_STRIP:FILEPATH=$PWD/build1/bin/llvm-strip.exe \
  -DGOLD_EXECUTABLE:FILEPATH=$PWD/build1/bin/ld.lld.exe \
  -DCMAKE_ASM_FLAGS:STRING="-fuse-ld=lld" \
  -DCMAKE_C_FLAGS:STRING="--driver-mode=gcc -fuse-ld=lld" \
  -DCMAKE_CXX_FLAGS:STRING="--driver-mode=g++ -fuse-ld=lld -stdlib=libstdc++ -static-libstdc++" \
  -DCMAKE_{SHARED,MODULE,EXE}_LINKER_FLAGS:STRING="-fuse-ld=lld" \
  -Sllvm -Bbuild_llvm2 &&
  # -rtlib=compiler-rt -stdlib=libc++
 wl-showstatus build-install &&
 ninja -Cbuild_llvm2 install-runtimes-stripped &&
 ninja -Cbuild_llvm2 install/strip &&
 #cp -f build1/bin/clang.exe build1/bin/gcc_renamed_clang.exe &&
 #cp -f build1/bin/clang++.exe build1/bin/g++_renamed_clang++.exe &&
    echo OK







 # build MinGW-w64 headers
 mkdir -p build_mingw-w64_headers &&
 wl-showstatus configure &&
 cd build_mingw-w64_headers &&
 $MINGWPREFIX/src/mingw-w64/mingw-w64-headers/configure --prefix=$PWD/../build1 \
  --build=$BUILDPLATFORM \
  --host=$RUNPLATFORM \
  --with-default-win32-winnt=0x0600 \
  --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrt"; else echo "msvcrt-os"; fi) \
  --enable-sdk=all \
  --enable-idl \
  &&
 cd .. &&
 wl-showstatus build-install &&
 make -Cbuild_mingw-w64_headers install-strip &&

 # bootstrapped build
 mkdir -p build_stage &&
 PATH=$MINGWPREFIX/share/python/bin:$PATH cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$PWD/stage1 -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
  -DCLANG_ENABLE_BOOTSTRAP:BOOL=ON \
  -DCLANG_BOOTSTRAP_PASSTHROUGH="CMAKE_INSTALL_PREFIX;CMAKE_BUILD_TYPE" \
  -DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;lld" \
  -DLLVM_ENABLE_RUNTIMES:STRING="compiler-rt;libcxx;libcxxabi" \
  -DLLVM_TARGETS_TO_BUILD:STRING="X86" \
  -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON \
  -DLLVM_ENABLE_ASSERTIONS:BOOL=ON \
  -DLLVM_INCLUDE_DOCS:BOOL=OFF \
  -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF \
  -DLLVM_INCLUDE_BENCHMARKS:BOOL=OFF \
  -DLLVM_INCLUDE_TESTS:BOOL=OFF \
  -DBOOTSTRAP_LLVM_OPTIMIZED_TABLEGEN:BOOL=ON \
  -DBOOTSTRAP_LLVM_ENABLE_ASSERTIONS:BOOL=OFF \
  -DBOOTSTRAP_LLVM_INCLUDE_DOCS:BOOL=OFF \
  -DBOOTSTRAP_LLVM_INCLUDE_EXAMPLES:BOOL=OFF \
  -DBOOTSTRAP_LLVM_INCLUDE_BENCHMARKS:BOOL=OFF \
  -DBOOTSTRAP_LLVM_INCLUDE_TESTS:BOOL=OFF \
  -DBOOTSTRAP_CLANG_DEFAULT_CXX_STDLIB=libc++ \
  -DBOOTSTRAP_CLANG_DEFAULT_RTLIB=compiler-rt \
  -DBOOTSTRAP_LIBCXX_USE_COMPILER_RT:BOOL=ON \
  -DBOOTSTRAP_LIBCXXABI_USE_COMPILER_RT:BOOL=ON \
  -DBOOTSTRAP_LIBCXXABI_USE_LLVM_UNWINDER:BOOL=ON \
  -DBOOTSTRAP_LIBUNWIND_USE_COMPILER_RT:BOOL=ON \
  -DBOOTSTRAP_LLVM_USE_LINKER=lld \
  -DCMAKE_C_FLAGS:STRING="-I$PWD/build1/include" \
  -DCMAKE_CXX_FLAGS:STRING="-I$PWD/build1/include" \
  -DBOOTSTRAP_CMAKE_C_FLAGS:STRING="-I$PWD/build1/include" \
  -DBOOTSTRAP_CMAKE_CXX_FLAGS:STRING="-I$PWD/build1/include" \
  -DPython3_EXECUTABLE:FILEPATH=$MINGWPREFIX/share/python/bin/python.exe \
  -DBOOTSTRAP_Python3_EXECUTABLE:FILEPATH=$MINGWPREFIX/share/python/bin/python.exe \
  -Sllvm -Bbuild_stage &&
  #-DLLVM_TARGETS_TO_BUILD:STRING="host" \
  #-DBOOTSTRAP_CMAKE_C_FLAGS:STRING="-I$MINGWDIR/$RUNPLATFORM/include" \
  #-DBOOTSTRAP_CMAKE_CXX_FLAGS:STRING="-I$MINGWDIR/$RUNPLATFORM/include" \
  #-DCMAKE_C_FLAGS:STRING="-I$MINGWDIR/$RUNPLATFORM/include" \
  #-DCMAKE_CXX_FLAGS:STRING="-I$MINGWDIR/$RUNPLATFORM/include" \
 wl-showstatus build-install &&
 CPLUS_INCLUDE_PATH= ninja -Cbuild_stage install/strip &&
    echo OK















########################################################################

MSTORSJO_LLVM_MINGW_VERSION=20211002
wl-download -v -d $TARBALLDIR/$BASENAME https://github.com/mstorsjo/llvm-mingw/releases/download/$MSTORSJO_LLVM_MINGW_VERSION/llvm-mingw-$MSTORSJO_LLVM_MINGW_VERSION-$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrt"; else echo "msvcrt"; fi)-$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "x86_64"; else echo "i686"; fi).zip
unzip -oq $TARBALLDIR/$BASENAME/llvm-mingw-$MSTORSJO_LLVM_MINGW_VERSION-$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrt"; else echo "msvcrt"; fi)-$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "x86_64"; else echo "i686"; fi).zip
mv llvm-mingw-$MSTORSJO_LLVM_MINGW_VERSION-$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrt"; else echo "msvcrt"; fi)-$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "x86_64"; else echo "i686"; fi) prebuilt

#mv -f prebuilt/bin/$RUNPLATFORM-ld prebuilt/bin/$RUNPLATFORM-ld.bak
#cp -f prebuilt/bin/ld.lld.exe prebuilt/bin/$RUNPLATFORM-ld.exe

# don't depend on gpm library when using libedit/curses
sed -i.bak -e "s/^\(\s*\)list(APPEND .* gpm).*$/\1if(NOT MINGW)\n&\n\1endif()/" lldb/source/Core/CMakeLists.txt lldb/source/Host/CMakeLists.txt
mkdir -p build_llvm1 &&
 # build main LLVM suite
 wl-showstatus configure &&
 #libunwind;openmp;parallel-libs;polly;pstl;flang
 #-DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;libclc;lld;lldb;polly;mlir" \
 #-DLLVM_RUNTIME_TARGETS="default;x86_64-w64-windows-gnu" \
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$PWD/build1 -DCMAKE_BUILD_TYPE:STRING=Release \
  -DBUILD_SHARED_LIBS:BOOL=OFF \
  -DLLVM_BUILD_LLVM_DYLIB:BOOL=OFF \
  -DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;libclc;lld;polly;parallel-libs" \
  -DLLVM_ENABLE_RUNTIMES:STRING="libcxxabi;libunwind" \
  -DLLVM_TARGETS_TO_BUILD:STRING="X86;NVPTX;AMDGPU;ARM;AArch64;WebAssembly" \
  -DLLVM_HOST_TRIPLE:STRING=$(echo $BUILDPLATFORM|sed -e "s/-.*$//")-w64-mingw32 \
  -DLLVM_BUILD_STATIC=ON \
  -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF \
  -DLLVM_CCACHE_BUILD:BOOL=OFF \
  -DLLVM_ENABLE_MODULES:BOOL=OFF \
  -DLLVM_ENABLE_PLUGINS:BOOL=ON \
  -DLLVM_ENABLE_THREADS:BOOL=ON \
  -DLLVM_ENABLE_UNWIND_TABLES:BOOL=OFF \
  -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF \
  -DLLVM_USE_HOST_TOOLS:BOOL=ON \
  -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON \
  -DLLVM_ENABLE_LTO:STRING=OFF \
  -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) \
  -DLLVM_ENABLE_RTTI:BOOL=ON \
  -DLLVM_ENABLE_TERMINFO:BOOL=OFF \
  -DLLVM_ENABLE_Z3_SOLVER:BOOL=ON \
  -DLLVM_Z3_INSTALL_DIR:STRING=$MINGWPREFIX \
  -DLLVM_ENABLE_FFI:BOOL=ON \
  -DLLVM_ENABLE_FFI:BOOL=ON \
  -DFFI_INCLUDE_DIR:PATH=$MINGWPREFIX/include \
  -DLLVM_ENABLE_LIBXML2:BOOL=ON \
  -DLLVM_ENABLE_PIC:BOOL=OFF \
  -DLLVM_USE_RELATIVE_PATHS_IN_DEBUG_INFO:BOOL=ON \
  -DLLVM_USE_RELATIVE_PATHS_IN_FILES:BOOL=ON \
  -DLLVM_INSTALL_BINUTILS_SYMLINKS:BOOL=OFF \
  -DLLVM_INSTALL_CCTOOLS_SYMLINKS:BOOL=OFF \
  -DLLVM_TOOL_LIBUNWIND_BUILD:BOOL=ON \
  -DLLVM_TOOL_LIBCXXABI_BUILD:BOOL=ON \
  -DLLVM_ENABLE_DOXYGEN:BOOL=OFF -DDOXYGEN_DOT_EXECUTABLE:FILEPATH= -DDOXYGEN_EXECUTABLE:FILEPATH= \
  -DLLVM_ENABLE_SPHINX=OFF \
  -DLLVM_INCLUDE_DOCS:BOOL=OFF \
  -DLLVM_BUILD_EXAMPLES:BOOL=OFF \
  -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF \
  -DLLVM_INCLUDE_BENCHMARKS:BOOL=OFF \
  -DLLVM_INCLUDE_TESTS:BOOL=OFF \
  -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF \
  \
  -DLLVM_TOOL_COMPILER_RT_BUILD:BOOL=ON \
  -DCOMPILER_RT_DEFAULT_TARGET_ONLY=OFF \
  -DCOMPILER_RT_USE_BUILTINS_LIBRARY=OFF \
  -DSANITIZER_CXX_ABI:STRING=libcxxabi \
  -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF \
  \
  -DLLVM_TOOL_LIBCXX_BUILD:BOOL=ON \
  -DLIBCXX_ENABLE_SHARED:BOOL=ON \
  -DLIBCXX_ENABLE_STATIC:BOOL=ON \
  -DLIBCXX_USE_COMPILER_RT:BOOL=ON \
  -DLIBCXX_HAS_WIN32_THREAD_API:BOOL=ON \
  -DLIBCXX_HAS_PTHREAD_API:BOOL=OFF \
  -DLIBCXX_ENABLE_EXPERIMENTAL_LIBRARY:BOOL=OFF \
  -DLIBCXX_CXX_ABI=libcxxabi \
  -DLIBCXX_CXX_ABI_INCLUDE_PATHS=$PWD/libcxxabi/include \
  -DLIBCXX_CXX_ABI_LIBRARY_PATH:PATH=$PWD/build_libcxxabi/lib \
  -DLIBCXX_LIBDIR_SUFFIX="" \
  -DLIBCXX_INCLUDE_TESTS:BOOL=OFF \
  -DLIBCXX_ENABLE_ABI_LINKER_SCRIPT:BOOL=OFF \
  \
  -DLLVM_TOOL_LIBCXXABI_BUILD:BOOL=ON \
  -DLIBCXXABI_ENABLE_SHARED:BOOL=ON \
  -DLIBCXXABI_ENABLE_STATIC:BOOL=ON \
  -DLIBCXXABI_USE_COMPILER_RT:BOOL=ON \
  -DLIBCXXABI_LIBCXX_INCLUDES:PATH=$PWD/build_libcxx/include/c++/v1 \
  -DLIBCXXABI_LIBDIR_SUFFIX="" \
  -DLIBCXXABI_ENABLE_EXCEPTIONS:BOOL=ON \
  -DLIBCXXABI_ENABLE_ASSERTIONS:BOOL=OFF \
  \
  -DLLVM_TOOL_LIBUNWIND_BUILD:BOOL=ON \
  -DLIBUNWIND_ENABLE_SHARED:BOOL=ON \
  -DLIBUNWIND_ENABLE_STATIC:BOOL=ON \
  -DLIBUNWIND_USE_COMPILER_RT:BOOL=OFF \
  \
  -DLLVM_TOOL_CLANG_BUILD:BOOL=ON \
  -DLLVM_TOOL_CLANG_TOOLS_EXTRA_BUILD:BOOL=OFF \
  -DLIBCLANG_BUILD_STATIC:BOOL=OFF \
  -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF \
  -DCLANG_PLUGIN_SUPPORT:BOOL=ON \
  -DCLANG_ENABLE_CLANGD:BOOL=ON \
  -DCLANG_DEFAULT_CXX_STDLIB:STRING=libc++ \
  -DCLANG_DEFAULT_RTLIB:STRING= \
  -DCLANG_DEFAULT_UNWINDLIB:STRING=none \
  -DCLANG_DEFAULT_OPENMP_RUNTIME:STRING=libomp \
  -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF \
  -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON \
  -DCLANG_TOOL_APINOTES_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_ARCMT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_C_ARCMT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_C_INDEX_TEST_BUILD:BOOL=OFF \
  -DCLANG_INCLUDE_DOCS:BOOL=OFF \
  -DCLANG_BUILD_EXAMPLES:BOOL=OFF \
  -DCLANG_INCLUDE_TESTS:BOOL=OFF \
  \
  -DLLVM_TOOL_MLIR_BUILD:BOOL=OFF \
  \
  -DLLVM_TOOL_PSTL_BUILD:BOOL=OFF \
  \
  -DLLDB_TOOL_LLDB_SERVER_BUILD:BOOL=ON \
  -DLLDB_TOOL_LLDB_VSCODE_BUILD:BOOL=ON \
  -DLLDB_ENABLE_LIBEDIT:BOOL=OFF \
  -DLLDB_ENABLE_CURSES:BOOL=OFF \
  -DLLDB_ENABLE_LIBXML2:BOOL=ON \
  -DLLDB_ENABLE_LZMA:BOOL=ON \
  -DLLDB_ENABLE_PYTHON:BOOL=ON \
  \
  -DCLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
  -DLLD_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
  -DFLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
  \
  -DLLD_DEFAULT_LD_LLD_IS_MINGW:BOOL=ON \
  -DCMAKE_ASM_COMPILER:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-as.exe \
  -DCMAKE_ASM_COMPILER_AR:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-ar.exe \
  -DCMAKE_ASM_COMPILER_RANLIB:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-ranlib.exe \
  -DCMAKE_C_COMPILER:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-clang.exe \
  -DCMAKE_C_COMPILER_AR:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-ar.exe \
  -DCMAKE_C_COMPILER_RANLIB:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-ranlib.exe \
  -DCMAKE_CXX_COMPILER:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-clang++.exe \
  -DCMAKE_CXX_COMPILER_AR:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-ar.exe \
  -DCMAKE_CXX_COMPILER_RANLIB:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-ranlib.exe \
  -DCMAKE_RC_COMPILER:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-windres.exe \
  -DCMAKE_AR:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-ar.exe \
  -DCMAKE_RANLIB:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-ranlib.exe \
  -DCMAKE_LINKER:FILEPATH=$PWD/prebuilt/bin/ld.lld.exe \
  -DGOLD_EXECUTABLE:FILEPATH=$PWD/prebuilt/bin/ld.lld.exe \
  -DCMAKE_READELF:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-readelf.exe \
  -DCMAKE_DLLTOOL:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-dlltool.exe \
  -DCMAKE_NM:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-nm.exe \
  -DCMAKE_OBJCOPY:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-objcopy.exe \
  -DCMAKE_OBJDUMP:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-objdump.exe \
  -DCMAKE_STRIP:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-strip.exe \
  -DCMAKE_ASM_FLAGS:STRING="-fuse-ld=lld" \
  -DCMAKE_C_FLAGS:STRING="-g0 --driver-mode=gcc -fuse-ld=lld" \
  -DCMAKE_CXX_FLAGS:STRING="-g0 --driver-mode=g++ -fuse-ld=lld" \
  -DCMAKE_{SHARED,MODULE,EXE}_LINKER_FLAGS:STRING="-fuse-ld=lld" \
  \
  -DPython3_FIND_REGISTRY:BOOL=NEVER \
  -DPython3_EXECUTABLE:FILEPATH=$MINGWPREFIX/share/python/bin/python.exe \
  -Sllvm -Bbuild_llvm1 &&
 #-DCROSS_TOOLCHAIN_FLAGS_LLVM_NATIVE:STRING="-DCMAKE_CXX_FLAGS=-fuse-ld=lld -DCMAKE_SHARED_LINKER_FLAGS=-fuse-ld=lld -DCMAKE_MODULE_LINKER_FLAGS=-fuse-ld=lld -DCMAKE_EXE_LINKER_FLAGS=-fuse-ld=lld" \
 #-Wl,-exclude-all-symbols
 #-DLLVM_BUILD_LLVM_DYLIB:BOOL=ON
 #-DLLVM_BUILD_LLVM_C_DYLIB:BOOL=OFF
 #-DLLVM_LINK_LLVM_DYLIB:BOOL=OFF
 #-DCLANG_LINK_CLANG_DYLIB:BOOL=OFF
 #-DLLVM_DYLIB_COMPONENTS:STRING=all
 #-DLLVM_TARGETS_TO_BUILD:STRING="X86;NVPTX;AMDGPU;ARM;AArch64;WebAssembly" \
 #-DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;lld;lldb;libclc;pstl" \
 #-DLLVM_ENABLE_RUNTIMES:STRING="compiler-rt;libc;libcxx;libcxxabi;libunwind;openmp" \
 #-DCOMPILER_RT_USE_BUILTINS_LIBRARY:BOOL=ON 
 #-DLLVM_HOST_TRIPLE:STRING=$BUILDPLATFORM -DCOMPILER_RT_DEFAULT_TARGET_TRIPLE:STRING=$RUNPLATFORM -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLIBCXXABI_TARGET_TRIPLE:STRING=$RUNPLATFORM -DLIBUNWIND_TARGET_TRIPLE:STRING=$RUNPLATFORM 
 #-DCLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
 #-DLLD_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
 #-DFLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
 #-DCMAKE_C_FLAGS:STRING="-D_FORTIFY_SOURCE=0 -D__SSP_FORTIFY_LEVEL=0" \
 #-DCMAKE_CXX_FLAGS:STRING="-D_FORTIFY_SOURCE=0 -D__SSP_FORTIFY_LEVEL=0" \
 #-LLVM_BUILD_32_BITS:BOOL=ON \
 #-DLLVM_INSTALL_BINUTILS_SYMLINKS:BOOL=ON \
 #-DLLVM_INSTALL_CCTOOLS_SYMLINKS:BOOL=ON \
 #  + share/llvm/bin/addr2line.exe
 #  + share/llvm/bin/ar.exe
 #  + share/llvm/bin/bitcode_strip.exe
 #  + share/llvm/bin/c++filt.exe
 #  + share/llvm/bin/dlltool.exe
 #  + share/llvm/bin/dwp.exe
 #  + share/llvm/bin/install_name_tool.exe
 #  + share/llvm/bin/libtool.exe
 #  + share/llvm/bin/lipo.exe
 #  + share/llvm/bin/nm.exe
 #  + share/llvm/bin/objcopy.exe
 #  + share/llvm/bin/objdump.exe
 #  + share/llvm/bin/ranlib.exe
 #  + share/llvm/bin/readelf.exe
 #  + share/llvm/bin/size.exe
 #  + share/llvm/bin/strings.exe
 #  + share/llvm/bin/strip.exe
 #  + share/llvm/bin/windres.exe
 #-DCLANG_DEFAULT_UNWINDLIB:STRING=libcxx \
 #-DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF \
 #-DBUILD_SHARED_LIBS:BOOL=OFF #see also: https://llvm.org/docs/BuildingADistribution.html

 #-DCMAKE_C_COMPILER:FILEPATH=$(PATH=$MINGWPREFIX/share/llvm/bin:$PATH which clang.exe) \
 #-DCMAKE_CXX_COMPILER:FILEPATH=$(PATH=$MINGWPREFIX/share/llvm/bin:$PATH which clang++.exe) \
 #-DCMAKE_RC_COMPILER:FILEPATH=$(PATH=$MINGWPREFIX/share/llvm/bin:$PATH which windres.exe) \
 #-DCMAKE_ASM_MASM_COMPILER:FILEPATH=$(PATH=$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ml.exe) \
 #-DCMAKE_AR:FILEPATH=$(PATH=$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ar.exe) \
 #-DCMAKE_RANLIB:FILEPATH=$(PATH=$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ranlib.exe) \
 #-DCMAKE_EXE_LINKER_FLAGS:STRING="-L$MINGWPREFIX/share/llvm/lib" \
 #-DCMAKE_CXX_FLAGS:STRING="-I$MINGWPREFIX/share/llvm/include/c++/v1" \

 #-DCMAKE_ASM_COMPILER:STRING=yasm.exe \
 #-DCMAKE_ASM_MASM_COMPILER:STRING="jwasm.exe $(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "-win64"; else echo "-coff"; fi)" \
 #$(if which clang.exe &> /dev/null; then echo "-DCMAKE_C_COMPILER:FILEPATH=$(which clang.exe)"; fi) \
 #$(if which clang++.exe &> /dev/null; then echo "-DCMAKE_CXX_COMPILER:FILEPATH=$(which clang++.exe)"; fi) \
 #$(if which llvm-ranlib.exe &> /dev/null; then echo "-DCMAKE_C_COMPILER_RANLIB:FILEPATH=$(which llvm-ranlib.exe) -DCMAKE_CXX_COMPILER_RANLIB:FILEPATH=$(which llvm-ranlib.exe)"; fi) \
 #$(if which llvm-ar.exe &> /dev/null; then echo "-DCMAKE_C_COMPILER_AR:FILEPATH=$(which llvm-ar.exe) -DCMAKE_CXX_COMPILER_AR:FILEPATH=$(which llvm-ar.exe)"; fi) \
 #-DLLVM_TABLEGEN:STRING=$(which llvm-tblgen.exe 2> /dev/null) \
 ## don't use -fno-lto flag with yasm
 #sed -i.bak -e "s/\(yasm\.exe .*\) -fno-lto/\1/" build/compile_commands.json &&
 #sed -i.bak -e "s/-fno-lto//" build/build.ninja build/compile_commands.json
 ## fix missing -lgcc/-lgcc_s
 #sed -i.bak -e "s/-lgcc_s\|-lgcc//g" build/build.ninja &&
 ## fix missing link libraries
 #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -lpthread/" build/build.ninja &&
 #sed -i.bak -e "s?prebuilt/bin/$RUNPLATFORM-ld?prebuilt/bin/ld.lld.exe? build_llvm1/NATIVE/test/lit.site.cfg.py &&
 wl-showstatus build-install &&
 PATH=$PWD/prebuilt/bin:$PATH ninja -Cbuild_llvm1 install-runtimes-stripped &&
 PATH=$PWD/prebuilt/bin:$PATH ninja -Cbuild_llvm1 install/strip &&
 cp -f build1/bin/clang.exe build1/bin/gcc_renamed_clang.exe &&
 cp -f build1/bin/clang++.exe build1/bin/g++_renamed_clang++.exe &&
    echo OK















































# see also: https://github.com/syoyo/llvm-project-mingw-build

# fix libunwind/src/CMakeLists.txt (version >= )
patch -ulbf libunwind/src/CMakeLists.txt << EOF
@@ -94,3 +94,3 @@
          LIBUNWIND_SUPPORTS_FUNWIND_TABLES_FLAG))
-  message(FATAL_ERROR
+  message(WARNING
           "Compiler doesn't support generation of unwind tables if exception "
EOF

# build native tools
mkdir -p build_native &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$PWD/native -DCMAKE_BUILD_TYPE:STRING=MinSizeRel  \
  -DLLVM_ENABLE_PROJECTS:STRING="clang" \
  -DLLVM_TARGETS_TO_BUILD:STRING="host" \
  -DLLVM_BUILD_LLVM_DYLIB:BOOL=OFF \
  -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON \
  -DLLVM_ENABLE_ASSERTIONS:BOOL=ON \
  \
  -DCMAKE_ASM_COMPILER:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-as.exe \
  -DCMAKE_ASM_COMPILER_AR:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-ar.exe \
  -DCMAKE_ASM_COMPILER_RANLIB:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-ranlib.exe \
  -DCMAKE_C_COMPILER:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-clang.exe \
  -DCMAKE_C_COMPILER_AR:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-ar.exe \
  -DCMAKE_C_COMPILER_RANLIB:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-ranlib.exe \
  -DCMAKE_CXX_COMPILER:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-clang++.exe \
  -DCMAKE_CXX_COMPILER_AR:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-ar.exe \
  -DCMAKE_CXX_COMPILER_RANLIB:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-ranlib.exe \
  -DCMAKE_RC_COMPILER:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-windres.exe \
  -DCMAKE_AR:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-ar.exe \
  -DCMAKE_RANLIB:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-ranlib.exe \
  -DCMAKE_LINKER:FILEPATH=$PWD/prebuilt/bin/ld.lld.exe \
  -DGOLD_EXECUTABLE:FILEPATH=$PWD/prebuilt/bin/ld.lld.exe \
  -DCMAKE_READELF:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-readelf.exe \
  -DCMAKE_DLLTOOL:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-dlltool.exe \
  -DCMAKE_NM:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-nm.exe \
  -DCMAKE_OBJCOPY:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-objcopy.exe \
  -DCMAKE_OBJDUMP:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-objdump.exe \
  -DCMAKE_STRIP:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-strip.exe \
  -DCMAKE_ASM_FLAGS:STRING="-fuse-ld=lld" \
  -DCMAKE_C_FLAGS:STRING="-g0 -fuse-ld=lld" \
  -DCMAKE_CXX_FLAGS:STRING="-g0 -fuse-ld=lld" \
  -DCMAKE_{SHARED,MODULE,EXE}_LINKER_FLAGS:STRING="-fuse-ld=lld" \
  -Sllvm -Bbuild_native &&
 wl-showstatus build &&
 PATH=$PWD/prebuilt/bin:$PATH ninja -Cbuild_native clang-tblgen llvm-tblgen llvm-config &&
 strip build_native/bin/*tblgen.exe &&
 wl-showstatus build-install &&
 #PATH=$PWD/prebuilt/bin:$PATH ninja -Cbuild_native install-llvm-tblgen-stripped &&
 #PATH=$PWD/prebuilt/bin:$PATH ninja -Cbuild_native install/strip &&
 #cp -f build_native/bin/clang-tblgen.exe native/bin/ &&
 #cp -f native/bin/clang.exe native/bin/gcc_renamed_clang.exe &&
 #cp -f native/bin/clang++.exe native/bin/g++_renamed_clang++.exe &&
 #cp -u prebuilt/bin/{libc++.dll,libunwind.dll} native/bin/ &&
 mkdir -p native/bin &&
 PATH=$PWD/prebuilt/bin:$PATH copypedeps -r build_native/bin/*tblgen.exe build_native/bin/llvm-config.exe native/bin/ &&

 # build cross-compiler
 mkdir -p build_cross &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$PWD/cross -DCMAKE_BUILD_TYPE:STRING=Release  \
  -DCMAKE_CROSSCOMPILING:BOOL=ON \
  -DCMAKE_SYSTEM_NAME:STRING=Windows \
  -DLLVM_ENABLE_PROJECTS="clang" \
  -DLLVM_ENABLE_RUNTIMES:STRING="compiler-rt;libcxxabi" \
  -DLLVM_TARGETS_TO_BUILD="X86;ARM;AArch64" \
  -DLLVM_BUILD_LLVM_DYLIB:BOOL=ON \
  -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF \
  -DLLVM_INCLUDE_TESTS:BOOL=OFF \
  -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF \
  -DLLVM_INCLUDE_BENCHMARKS:BOOL=OFF \
  -DLLVM_INCLUDE_DOCS:BOOL=OFF \
  -DLLVM_ENABLE_ASSERTIONS:BOOL=ON \
  \
  -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF \
  \
  -DCOMPILER_RT_DEFAULT_TARGET_ONLY:BOOL=OFF \
  -DCOMPILER_RT_BUILD_XRAY:BOOL=OFF \
  -DCOMPILER_RT_USE_BUILTINS_LIBRARY=OFF \
  -DCOMPILER_RT_BUILD_BUILTINS:BOOL=ON \
  -DCOMPILER_RT_BUILD_LIBFUZZER:BOOL=OFF \
  -DCOMPILER_RT_BUILD_MEMPROF:BOOL=OFF \
  -DCOMPILER_RT_BUILD_PROFILE:BOOL=OFF \
  -DCOMPILER_RT_BUILD_SANITIZERS:BOOL=OFF \
  -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF \
  \
  -DLIBCXXABI_ENABLE_SHARED:BOOL=ON \
  -DLIBCXXABI_ENABLE_STATIC:BOOL=ON \
  -DLIBCXXABI_TARGET_TRIPLE:STRING=$RUNPLATFORM \
  -DLIBCXXABI_USE_COMPILER_RT:BOOL=ON \
  -DLIBCXXABI_LIBCXX_INCLUDES:PATH=$PWD/build_libcxx/include/c++/v1 \
  -DLIBCXXABI_LIBDIR_SUFFIX="" \
  -DLIBCXXABI_INCLUDE_TESTS:BOOL=OFF \
  \
  -DCMAKE_SYSTEM_PROGRAM_PATH=$PWD/native/bin \
  -DCMAKE_FIND_ROOT_PATH="$PWD/native" \
  -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER \
  -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY \
  -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY \
  \
  -DLLVM_TABLEGEN:STRING=$PWD/native/bin/llvm-tblgen.exe \
  -DCLANG_TABLEGEN:STRING=$PWD/native/bin/clang-tblgen.exe \
  -DLLVM_CONFIG_PATH:STRING=$PWD/native/bin/llvm-config.exe \
  \
  -DCMAKE_ASM_COMPILER:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-as.exe \
  -DCMAKE_ASM_COMPILER_AR:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-ar.exe \
  -DCMAKE_ASM_COMPILER_RANLIB:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-ranlib.exe \
  -DCMAKE_C_COMPILER:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-clang.exe \
  -DCMAKE_C_COMPILER_AR:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-ar.exe \
  -DCMAKE_C_COMPILER_RANLIB:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-ranlib.exe \
  -DCMAKE_CXX_COMPILER:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-clang++.exe \
  -DCMAKE_CXX_COMPILER_AR:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-ar.exe \
  -DCMAKE_CXX_COMPILER_RANLIB:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-ranlib.exe \
  -DCMAKE_RC_COMPILER:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-windres.exe \
  -DCMAKE_AR:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-ar.exe \
  -DCMAKE_RANLIB:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-ranlib.exe \
  -DCMAKE_LINKER:FILEPATH=$PWD/prebuilt/bin/ld.lld.exe \
  -DGOLD_EXECUTABLE:FILEPATH=$PWD/prebuilt/bin/ld.lld.exe \
  -DCMAKE_READELF:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-readelf.exe \
  -DCMAKE_DLLTOOL:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-dlltool.exe \
  -DCMAKE_NM:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-nm.exe \
  -DCMAKE_OBJCOPY:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-objcopy.exe \
  -DCMAKE_OBJDUMP:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-objdump.exe \
  -DCMAKE_STRIP:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-strip.exe \
  -DCMAKE_ASM_FLAGS:STRING="-g0 -no-integrated-as -fuse-ld=lld" \
  -DCMAKE_C_FLAGS:STRING="-g0 -fuse-ld=lld" \
  -DCMAKE_CXX_FLAGS:STRING="-g0 -fuse-ld=lld" \
  -DCMAKE_{SHARED,MODULE,EXE}_LINKER_FLAGS:STRING="-fuse-ld=lld -static-libgcc -static-libstdc++" \
  -Sllvm -Bbuild_cross &&
 #-DCMAKE_CXX_FLAGS:STRING="-g0 -fuse-ld=lld -I$PWD/prebuilt/include/c++/v1" \
 wl-showstatus build-install &&
 PATH=$PWD/prebuilt/bin:$PATH ninja -Cbuild_cross install/strip &&
 #PATH=$PWD/prebuilt/bin:$PATH CPLUS_INCLUDE_PATH=$PWD/prebuilt/include/c++/v1${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} ninja -Cbuild_cross install/strip &&
    echo OK

 for arch in x86_64; do
  # build libunwind
  mkdir -p build_libunwind_$arch &&
   wl-showstatus configure &&
   cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$PWD/libunwind_$arch -DCMAKE_BUILD_TYPE:STRING=Release  \
   -DCMAKE_CROSSCOMPILING:BOOL=ON \
   -DCMAKE_SYSTEM_NAME:STRING=Windows \
   -DLIBUNWIND_TARGET_TRIPLE:STRING=$arch-w64-windows-gnu \
   -DCMAKE_C_COMPILER_WORKS:BOOL=ON \
   -DCMAKE_CXX_COMPILER_WORKS:BOOL=ON \
   -DCXX_SUPPORTS_CXX11:BOOL=ON \
   -DLIBUNWIND_USE_COMPILER_RT:BOOL=ON \
   -DLIBUNWIND_ENABLE_THREADS:BOOL=ON \
   -DLIBUNWIND_ENABLE_SHARED:BOOL=ON \
   -DLIBUNWIND_ENABLE_STATIC:BOOL=ON \
   -DLIBUNWIND_ENABLE_CROSS_UNWINDING:BOOL=OFF \
   -DCMAKE_ASM_COMPILER:FILEPATH=$PWD/cross/bin/clang.exe \
   -DCMAKE_ASM_COMPILER_AR:FILEPATH=$PWD/cross/bin/llvm-ar.exe \
   -DCMAKE_ASM_COMPILER_RANLIB:FILEPATH=$PWD/cross/bin/llvm-ranlib.exe \
   -DCMAKE_C_COMPILER:FILEPATH=$PWD/cross/bin/clang.exe \
   -DCMAKE_C_COMPILER_AR:FILEPATH=$PWD/cross/bin/llvm-ar.exe \
   -DCMAKE_C_COMPILER_RANLIB:FILEPATH=$PWD/cross/bin/llvm-ranlib.exe \
   -DCMAKE_CXX_COMPILER:FILEPATH=$PWD/cross/bin/clang++.exe \
   -DCMAKE_CXX_COMPILER_AR:FILEPATH=$PWD/cross/bin/llvm-ar.exe \
   -DCMAKE_CXX_COMPILER_RANLIB:FILEPATH=$PWD/cross/bin/llvm-ranlib.exe \
   -DCMAKE_RC_COMPILER:FILEPATH=$PWD/cross/bin/llvm-windres.exe \
   -DCMAKE_AR:FILEPATH=$PWD/cross/bin/llvm-ar.exe \
   -DCMAKE_RANLIB:FILEPATH=$PWD/cross/bin/llvm-ranlib.exe \
   -DCMAKE_LINKER:FILEPATH=$PWD/cross/bin/llvmclang++.exe \
   -DGOLD_EXECUTABLE:FILEPATH= \
   -DCMAKE_READELF:FILEPATH=$PWD/cross/bin/llvm-readelf.exe \
   -DCMAKE_DLLTOOL:FILEPATH=$PWD/cross/bin/llvm-dlltool.exe \
   -DCMAKE_NM:FILEPATH=$PWD/cross/bin/llvm-nm.exe \
   -DCMAKE_OBJCOPY:FILEPATH=$PWD/cross/bin/llvm-objcopy.exe \
   -DCMAKE_OBJDUMP:FILEPATH=$PWD/cross/bin/llvm-objdump.exe \
   -DCMAKE_STRIP:FILEPATH=$PWD/cross/bin/llvm-strip.exe \
   -DCMAKE_ASM_FLAGS:STRING="-g0 -no-integrated-as -fuse-ld=lld" \
   -DCMAKE_C_FLAGS:STRING="-g0 -fuse-ld=lld -Wno-dll-attribute-on-redeclaration" \
   -DCMAKE_CXX_FLAGS:STRING="-g0 -fuse-ld=lld -Wno-dll-attribute-on-redeclaration" \
   -DCMAKE_{SHARED,MODULE,EXE}_LINKER_FLAGS:STRING="-s" \
   -Slibunwind -Bbuild_libunwind_$arch &&
   wl-showstatus build-install &&
   PATH=$PWD/prebuilt/bin:$PATH ninja -Cbuild_libunwind_$arch install/strip -w dupbuild=warn &&
    echo OK
 done

  -DCMAKE_ASM_COMPILER:FILEPATH=$PWD/native/bin/llvm-as.exe \
  -DCMAKE_ASM_COMPILER_AR:FILEPATH=$PWD/native/bin/llvm-ar.exe \
  -DCMAKE_ASM_COMPILER_RANLIB:FILEPATH=$PWD/native/bin/llvm-ranlib.exe \
  -DCMAKE_C_COMPILER:FILEPATH=$PWD/native/bin/clang.exe \
  -DCMAKE_C_COMPILER_AR:FILEPATH=$PWD/native/bin/llvm-ar.exe \
  -DCMAKE_C_COMPILER_RANLIB:FILEPATH=$PWD/native/bin/llvm-ranlib.exe \
  -DCMAKE_CXX_COMPILER:FILEPATH=$PWD/native/bin/clang++.exe \
  -DCMAKE_CXX_COMPILER_AR:FILEPATH=$PWD/native/bin/llvm-ar.exe \
  -DCMAKE_CXX_COMPILER_RANLIB:FILEPATH=$PWD/native/bin/llvm-ranlib.exe \
  -DCMAKE_RC_COMPILER:FILEPATH=$PWD/native/bin/llvm-windres.exe \
  -DCMAKE_AR:FILEPATH=$PWD/native/bin/llvm-ar.exe \
  -DCMAKE_RANLIB:FILEPATH=$PWD/native/bin/llvm-ranlib.exe \
  -DCMAKE_LINKER:FILEPATH=$PWD/native/bin/llvmclang++.exe \
  -DGOLD_EXECUTABLE:FILEPATH= \
  -DCMAKE_READELF:FILEPATH=$PWD/native/bin/llvm-readelf.exe \
  -DCMAKE_DLLTOOL:FILEPATH=$PWD/native/bin/llvm-dlltool.exe \
  -DCMAKE_NM:FILEPATH=$PWD/native/bin/llvm-nm.exe \
  -DCMAKE_OBJCOPY:FILEPATH=$PWD/native/bin/llvm-objcopy.exe \
  -DCMAKE_OBJDUMP:FILEPATH=$PWD/native/bin/llvm-objdump.exe \
  -DCMAKE_STRIP:FILEPATH=$PWD/native/bin/llvm-strip.exe \
  -DCMAKE_ASM_FLAGS:STRING="-fuse-ld=lld" \
  -DCMAKE_C_FLAGS:STRING="-g0" \
  -DCMAKE_CXX_FLAGS:STRING="-g0" \
  -DCMAKE_{SHARED,MODULE,EXE}_LINKER_FLAGS:STRING="-s" \


























mkdir -p build_staged &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
  -DCLANG_ENABLE_BOOTSTRAP:BOOL=ON \
  -DBUILD_SHARED_LIBS:BOOL=ON \
  -DLLVM_BUILD_STATIC=OFF \
  -DLIBCLANG_BUILD_STATIC:BOOL=OFF \
  -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF \
  -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF \
  -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM \
  -DLLVM_TARGETS_TO_BUILD:STRING="host" \
  -DLLVM_HOST_TRIPLE:STRING=$(echo $BUILDPLATFORM|sed -e "s/-.*$//")-w64-mingw32 \
  -DLLVM_DEFAULT_TARGET_TRIPLE=$(echo $BUILDPLATFORM|sed -e "s/-.*$//")-w64-mingw32 \
  -DLLVM_ENABLE_PROJECTS:STRING="clang;lld;pstl" \
  -DLLVM_ENABLE_RUNTIMES:STRING="compiler-rt;libcxx;libcxxabi;libunwind" \
  -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=OFF \
  -DLLVM_TOOL_BUGPOINT_PASSES_BUILD:BOOL=OFF \
  -DCLANG_BUILD_TOOLS:BOOL=ON \
  -DCLANG_DEFAULT_RTLIB:STRING=libgcc \
  -DCLANG_DEFAULT_CXX_STDLIB:STRING=libstdc++ \
  -DCLANG_DEFAULT_OPENMP_RUNTIME:STRING=libgomp \
  -DCLANG_DEFAULT_UNWINDLIB:STRING=libgcc \
  -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF \
  -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON \
  -DLLVM_ENABLE_LIBEDIT:BOOL=ON \
  -DLibEdit_INCLUDE_DIRS:PATH=$MINGWPREFIX/include \
  -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) \
  -DLLVM_ENABLE_RTTI:BOOL=ON \
  -DLLVM_ENABLE_MODULES:BOOL=OFF \
  -DLLVM_ENABLE_ASSERTIONS:BOOL=ON \
  -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON \
  -DLLVM_ENABLE_THREADS:BOOL=ON \
  -DLLVM_ENABLE_UNWIND_TABLES:BOOL=ON \
  -DLLVM_TOOL_OPENMP_BUILD:BOOL=ON \
  -DLLVM_TOOL_PARALLEL_LIBS_BUILD:BOOL=ON \
  -DLLVM_ENABLE_FFI:BOOL=ON \
  -DLLVM_ENABLE_LIBXML2:BOOL=ON \
  -DLLVM_ENABLE_Z3_SOLVER:BOOL=ON \
  -DLLVM_INCLUDE_TOOLS:BOOL=ON \
  -DLLVM_INCLUDE_UTILS:BOOL=ON \
  -DLLVM_INSTALL_UTILS:BOOL=ON \
  -DLLVM_ENABLE_TERMINFO:BOOL=OFF \
  -DLLVM_ENABLE_LIBEDIT:BOOL=OFF \
  -DLLVM_ENABLE_SPHINX=OFF \
  -DLLVM_INCLUDE_DOCS:BOOL=OFF \
  -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF \
  -DLLVM_INCLUDE_TESTS:BOOL=OFF \
  -DLLVM_TOOL_LLVM_C_TEST_BUILD:BOOL=OFF \
  -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF \
  -DLLVM_BUILD_BENCHMARKS:BOOL=OFF \
  -DLLVM_BUILD_TESTS:BOOL=OFF \
  -DBUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF \
  -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF \
  -DCLANG_INCLUDE_TESTS:BOOL=OFF \
  -DCLANG_PLUGIN_SUPPORT:BOOL=ON \
  -DCLANG_ENABLE_CLANGD:BOOL=ON \
  -DCLANG_TOOL_APINOTES_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_ARCMT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_C_ARCMT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_C_INDEX_TEST_BUILD:BOOL=OFF \
  -DCLANG_INCLUDE_DOCS:BOOL=OFF \
  -DCLANG_BUILD_EXAMPLES:BOOL=OFF \
  -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF \
  -DLIBCXX_HAS_WIN32_THREAD_API:BOOL=OFF \
  -DLIBCXX_HAS_PTHREAD_API:BOOL=ON \
  -DLLD_BUILD_TOOLS:BOOL=ON \
  -DPython3_FIND_REGISTRY:BOOL=NEVER \
  -DPython3_EXECUTABLE:PATH=$MINGWPREFIX/share/python/bin/python3.exe \
  -DCMAKE_CXX_FLAGS:STRING="-Wl,--allow-multiple-definition" \
  -DCMAKE_EXE_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition" \
  \
  -DBOOTSTRAP_CMAKE_BUILD_TYPE:STRING=Release \
  -DBOOTSTRAP_BUILD_SHARED_LIBS:BOOL=ON \
  -DBOOTSTRAP_LLVM_BUILD_STATIC=OFF \
  -DBOOTSTRAP_LIBCLANG_BUILD_STATIC:BOOL=OFF \
  -DBOOTSTRAP_LLVM_LINK_LLVM_DYLIB:BOOL=OFF \
  -DBOOTSTRAP_CLANG_LINK_CLANG_DYLIB:BOOL=OFF \
  -DBOOTSTRAP_LLVM_HOST_TRIPLE:STRING=$(echo $RUNPLATFORM|sed -e "s/-.*$//")-w64-mingw32 \
  -DBOOTSTRAP_LLVM_DEFAULT_TARGET_TRIPLE=$(echo $RUNPLATFORM|sed -e "s/-.*$//")-w64-mingw32 \
  -DBOOTSTRAP_LLVM_TARGET_ARCH:STRING=$(echo $RUNPLATFORM|sed -e "s/-.*$//") \
  -DBOOTSTRAP_LLVM_TARGETS_TO_BUILD:STRING="X86" \
  -DBOOTSTRAP_LLVM_RUNTIME_TARGETS=$(echo $RUNPLATFORM|sed -e "s/-.*$//")-w64-mingw32 \
  -DBOOTSTRAP_CLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
  -DBOOTSTRAP_LLD_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
  -DBOOTSTRAP_FLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
  -DBOOTSTRAP_LLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;libclc;lld;lldbpstl;polly;mlir;parallel-libs" \
  -DBOOTSTRAP_LLVM_ENABLE_RUNTIMES:STRING="compiler-rt;libcxx;libcxxabi;libunwind;openmp" \
  -DBOOTSTRAP_LLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=OFF \
  -DBOOTSTRAP_LLVM_ENABLE_THREADS:BOOL=ON \
  -DBOOTSTRAP_LLVM_ENABLE_LIBEDIT:BOOL=ON \
  -DBOOTSTRAP_LibEdit_INCLUDE_DIRS:PATH=$MINGWPREFIX/include \
  -DBOOTSTRAP_LLVM_ENABLE_TERMINFO:BOOL=OFF \
  -DBOOTSTRAP_LLVM_ENABLE_EH:BOOL=ON \
  -DBOOTSTRAP_LLVM_ENABLE_RTTI:BOOL=ON \
  -DBOOTSTRAP_LLVM_ENABLE_MODULES:BOOL=OFF \
  -DBOOTSTRAP_LLVM_ENABLE_ASSERTIONS:BOOL=ON \
  -DBOOTSTRAP_LLVM_ENABLE_FFI:BOOL=ON \
  -DBOOTSTRAP_LLVM_OPTIMIZED_TABLEGEN:BOOL=ON \
  -DBOOTSTRAP_LLVM_ENABLE_LIBXML2:BOOL=ON \
  -DBOOTSTRAP_LLVM_ENABLE_UNWIND_TABLES:BOOL=ON \
  -DBOOTSTRAP_LLVM_ENABLE_Z3_SOLVER:BOOL=ON \
  -DBOOTSTRAP_LLVM_TOOL_OPENMP_BUILD:BOOL=ON \
  -DBOOTSTRAP_LLVM_TOOL_PARALLEL_LIBS_BUILD:BOOL=ON \
  -DBOOTSTRAP_LLVM_INCLUDE_TOOLS:BOOL=ON \
  -DBOOTSTRAP_LLVM_INCLUDE_UTILS:BOOL=ON \
  -DBOOTSTRAP_LLVM_INSTALL_UTILS:BOOL=ON \
  -DBOOTSTRAP_LLVM_ENABLE_SPHINX=OFF \
  -DBOOTSTRAP_LLVM_INCLUDE_DOCS:BOOL=OFF \
  -DBOOTSTRAP_LLVM_INCLUDE_GO_TESTS:BOOL=OFF \
  -DBOOTSTRAP_LLVM_INCLUDE_TESTS:BOOL=OFF \
  -DBOOTSTRAP_LLVM_TOOL_LLVM_C_TEST_BUILD:BOOL=OFF \
  -DBOOTSTRAP_LLVM_TOOL_BUGPOINT_PASSES_BUILD:BOOL=OFF \
  -DBOOTSTRAP_LLVM_INCLUDE_EXAMPLES:BOOL=OFF \
  -DBOOTSTRAP_LLVM_BUILD_BENCHMARKS:BOOL=OFF \
  -DBOOTSTRAP_LLVM_BUILD_TESTS:BOOL=OFF \
  \
  -DBOOTSTRAP_LLD_BUILD_TOOLS:BOOL=ON \
  \
  -DBOOTSTRAP_CLANG_BUILD_TOOLS:BOOL=ON \
  -DBOOTSTRAP_CLANG_DEFAULT_RTLIB:STRING=compiler-rt \
  -DBOOTSTRAP_CLANG_DEFAULT_CXX_STDLIB:STRING=libc++ \
  -DBOOTSTRAP_CLANG_DEFAULT_OPENMP_RUNTIME:STRING=libomp \
  -DBOOTSTRAP_CLANG_DEFAULT_UNWINDLIB:STRING=libunwind \
  -DBOOTSTRAP_CLANG_ENABLE_PROTO_FUZZER:BOOL=OFF \
  -DBOOTSTRAP_CLANG_ENABLE_STATIC_ANALYZER:BOOL=ON \
  \
  -DBOOTSTRAP_LIBCXX_ENABLE_SHARED:BOOL=ON \
  -DBOOTSTRAP_LIBCXX_ENABLE_STATIC:BOOL=ON \
  -DBOOTSTRAP_LIBCXX_USE_COMPILER_RT:BOOL=ON \
  -DBOOTSTRAP_LIBCXX_LIBDIR_SUFFIX="" \
  -DBOOTSTRAP_LIBCXX_INCLUDE_TESTS:BOOL=OFF \
  -DBOOTSTRAP_LIBCXX_ENABLE_ABI_LINKER_SCRIPT:BOOL=OFF \
  -DBOOTSTRAP_LIBCXX_HAS_WIN32_THREAD_API:BOOL=ON \
  -DBOOTSTRAP_LIBCXX_HAS_PTHREAD_API:BOOL=ON \
  -DBOOTSTRAP_LIBCXX_CXX_ABI:STRING=libcxxabi \
  \
  -DBOOTSTRAP_LIBCXXABI_ENABLE_SHARED:BOOL=ON \
  -DBOOTSTRAP_LIBCXXABI_ENABLE_STATIC:BOOL=ON \
  -DBOOTSTRAP_LIBCXXABI_USE_COMPILER_RT:BOOL=ON \
  -DBOOTSTRAP_LIBCXXABI_LIBCXX_INCLUDES:PATH=$PWD/build_libcxx/include/c++/v1 \
  -DBOOTSTRAP_LIBCXXABI_LIBDIR_SUFFIX="" \
  -DBOOTSTRAP_LIBCXXABI_ENABLE_EXCEPTIONS:BOOL=ON \
  -DBOOTSTRAP_LIBCXXABI_ENABLE_ASSERTIONS:BOOL=ON \
  -DBOOTSTRAP_LIBCXXABI_ENABLE_NEW_DELETE_DEFINITIONS=ON \
  \
  -DBOOTSTRAP_LLDB_ENABLE_LIBEDIT:BOOL=ON \
  -DBOOTSTRAP_LLDB_ENABLE_CURSES:BOOL=ON \
  -DBOOTSTRAP_LLDB_ENABLE_LIBXML2:BOOL=ON \
  -DBOOTSTRAP_LLDB_ENABLE_LUA:BOOL=ON \
  -DBOOTSTRAP_LLDB_ENABLE_LZMA:BOOL=ON \
  -DBOOTSTRAP_LLDB_ENABLE_LIBEDIT:BOOL=OFF \
  -DBOOTSTRAP_LLDB_ENABLE_CURSES:BOOL=ON \
  -DBOOTSTRAP_LLDB_ENABLE_LIBXML2:BOOL=ON \
  -DBOOTSTRAP_LLDB_ENABLE_LZMA:BOOL=ON \
  -DBOOTSTRAP_LLDB_ENABLE_PYTHON:BOOL=ON \
  -DBOOTSTRAP_LLDB_DISABLE_PYTHON:BOOL=OFF \
  -DBOOTSTRAP_LLDB_INCLUDE_TESTS:BOOL=OFF \
  -DBOOTSTRAP_LLDB_TOOL_LLDB_SERVER_BUILD:BOOL=ON \
  -DBOOTSTRAP_LLDB_TOOL_LLDB_VSCODE_BUILD:BOOL=ON \
  \
  -DBOOTSTRAP_COMPILER_RT_DEFAULT_TARGET_TRIPLE:STRING=$(echo $RUNPLATFORM|sed -e "s/-.*$//")-w64-mingw32 \
  -DBOOTSTRAP_COMPILER_RT_DEFAULT_TARGET_ONLY:BOOL=ON \
  -DBOOTSTRAP_COMPILER_RT_INCLUDE_TESTS:BOOL=OFF \
  -DBOOTSTRAP_COMPILER_RT_DEFAULT_TARGET_ONLY:BOOL=ON \
  -DBOOTSTRAP_COMPILER_RT_BUILD_BUILTINS:BOOL=ON \
  -DBOOTSTRAP_COMPILER_RT_USE_BUILTINS_LIBRARY=ON \
  -DBOOTSTRAP_COMPILER_RT_INCLUDE_TESTS:BOOL=OFF \
  -DBOOTSTRAP_SANITIZER_CXX_ABI=libc++ \
  \
  -DBOOTSTRAP_BUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF \
  -DBOOTSTRAP_CLANG_INCLUDE_TESTS:BOOL=OFF \
  -DBOOTSTRAP_CLANG_PLUGIN_SUPPORT:BOOL=ON \
  -DBOOTSTRAP_CLANG_ENABLE_CLANGD:BOOL=ON \
  -DBOOTSTRAP_CLANG_TOOL_APINOTES_TEST_BUILD:BOOL=OFF \
  -DBOOTSTRAP_CLANG_TOOL_ARCMT_TEST_BUILD:BOOL=OFF \
  -DBOOTSTRAP_CLANG_TOOL_CLANG_IMPORT_TEST_BUILD:BOOL=OFF \
  -DBOOTSTRAP_CLANG_TOOL_C_ARCMT_TEST_BUILD:BOOL=OFF \
  -DBOOTSTRAP_CLANG_TOOL_C_INDEX_TEST_BUILD:BOOL=OFF \
  -DBOOTSTRAP_CLANG_INCLUDE_DOCS:BOOL=OFF \
  -DBOOTSTRAP_CLANG_BUILD_EXAMPLES:BOOL=OFF \
  -DBOOTSTRAP_CLANG_ENABLE_PROTO_FUZZER:BOOL=OFF \
  \
  -DBOOTSTRAP_Python3_FIND_REGISTRY:BOOL=NEVER \
  -DBOOTSTRAP_Python3_EXECUTABLE:PATH=$MINGWPREFIX/share/python/bin/python3.exe \
  -DBOOTSTRAP_CMAKE_CXX_FLAGS:STRING="-Wl,--allow-multiple-definition" \
  -DBOOTSTRAP_CMAKE_EXE_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition" \
  -Sllvm -Bbuild_staged &&
 wl-showstatus build-install &&
 PATH=$MINGWPREFIX/share/python/bin:$PATH ninja -Cbuild_staged install/strip &&
    echo OK





















































# fix compiler-rt/cmake/config-ix.cmake (version >= 13.0.0)
patch -ulbf compiler-rt/cmake/config-ix.cmake << EOF
@@ -196,3 +196,3 @@
     NOT CMAKE_SIZEOF_VOID_P EQUAL 8)
-  message(FATAL_ERROR "Please use architecture with 4 or 8 byte pointers.")
+  message(WATNING "Please use architecture with 4 or 8 byte pointers.")
 endif()
EOF
# fix compiler-rt/lib/asan/asan_win.cpp (version >= 13.0.0)
patch -ulbf compiler-rt/lib/asan/asan_win.cpp << EOF
@@ -248,3 +248,3 @@
 void *AsanDoesNotSupportStaticLinkage() {
-#if defined(_DEBUG)
+#if defined(_DEBUG) && !defined(__MINGW32__)
 #error Please build the runtime with a non-debug CRT: /MD or /MT
EOF

MSTORSJO_LLVM_MINGW_VERSION=20211002
wl-download -v -d $TARBALLDIR/$BASENAME https://github.com/mstorsjo/llvm-mingw/releases/download/$MSTORSJO_LLVM_MINGW_VERSION/llvm-mingw-$MSTORSJO_LLVM_MINGW_VERSION-$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrt"; else echo "msvcrt"; fi)-$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "x86_64"; else echo "i686"; fi).zip
unzip -oq $TARBALLDIR/$BASENAME/llvm-mingw-$MSTORSJO_LLVM_MINGW_VERSION-$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrt"; else echo "msvcrt"; fi)-$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "x86_64"; else echo "i686"; fi).zip
mv llvm-mingw-$MSTORSJO_LLVM_MINGW_VERSION-$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrt"; else echo "msvcrt"; fi)-$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "x86_64"; else echo "i686"; fi) prebuilt

 # build MinGW-w64 headers
 mkdir -p build_mingw-w64_headers &&
 wl-showstatus configure &&
 cd build_mingw-w64_headers &&
 $MINGWPREFIX/src/mingw-w64/mingw-w64-headers/configure --prefix=$PWD/../native \
  --build=$BUILDPLATFORM \
  --host=$RUNPLATFORM \
  --with-default-win32-winnt=0x0600 \
  --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrt"; else echo "msvcrt-os"; fi) \
  --enable-sdk=all \
  --enable-idl \
  &&
 cd .. &&
 wl-showstatus build-install &&
 make -Cbuild_mingw-w64_headers install-strip &&
    echo OK

#mkdir -p build_mingw-w64_headers &&
# wl-showstatus configure &&
# cd build_mingw-w64_headers &&
# $MINGWPREFIX/src/mingw-w64/mingw-w64-headers/configure --prefix=$PWD/../native/$BUILDPLATFORM \
#  --build=$BUILDPLATFORM \
#  --host=$RUNPLATFORM \
#  --with-default-win32-winnt=0x0600 \
#  --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrt"; else echo "msvcrt-os"; fi) \
#  --enable-sdk=all \
#  --enable-idl \
#  &&
# cd .. &&
# wl-showstatus build-install &&
# make -Cbuild_mingw-w64_headers install-strip &&
#    echo OK

## don't add -D_DEBUG flag
#sed -i.bak -e "s/NOT MSVC/NOT WIN32/" libcxxabi/CMakeLists.txt libunwind/CMakeLists.txt
#sed -i.bak -e "s/-D_DEBUG//" libcxxabi/CMakeLists.txt libunwind/CMakeLists.txt
# build native llvm tools
mkdir -p build_native &&
 wl-showstatus configure &&
 #-DLLVM_RUNTIME_TARGETS=$(echo $BUILDPLATFORM|sed -e "s/-.*$//")-w64-windows-gnu \
 #-DLLVM_TOOL_LLVM_OPT_FUZZER_BUILD:BOOL=OFF \
 #-DLLVM_ENABLE_RUNTIMES:STRING="compiler-rt;libcxx;libcxxabi" \
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$PWD/native -DCMAKE_BUILD_TYPE:STRING=Release \
  -DLLVM_TARGETS_TO_BUILD:STRING="host" \
  -DLLVM_RUNTIME_TARGETS=$BUILDPLATFORM \
  -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM \
  -DLLVM_DEFAULT_TARGET_TRIPLE:STRING=$RUNPLATFORM \
  -DLLVM_ENABLE_PROJECTS:STRING="clang;lld" \
  -DLLVM_ENABLE_RUNTIMES:STRING="compiler-rt;libcxx;libcxxabi" \
  -DLLVM_BUILD_LLVM_DYLIB:BOOL=OFF \
  -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON \
  -DLLVM_ENABLE_ASSERTIONS:BOOL=ON \
  -DLLVM_BUILD_TESTS:BOOL=OFF \
  -DLLVM_INCLUDE_TESTS:BOOL=OFF \
  -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF \
  \
  -DLLVM_TOOL_LLVM_AS_FUZZER_BUILD:BOOL=OFF \
  -DLLVM_TOOL_LLVM_ISEL_FUZZER_BUILD:BOOL=OFF \
  -DLLVM_TOOL_LLVM_ITANIUM_DEMANGLE_FUZZER_BUILD:BOOL=OFF \
  -DLLVM_TOOL_LLVM_MC_ASSEMBLE_FUZZER_BUILD:BOOL=OFF \
  -DLLVM_TOOL_LLVM_MC_DISASSEMBLE_FUZZER_BUILD:BOOL=OFF \
  -DLLVM_TOOL_LLVM_OPT_FUZZER_BUILD:BOOL=OFF \
  -DLLVM_TOOL_LLVM_RUST_DEMANGLE_FUZZER_BUILD:BOOL=OFF \
  -DLLVM_TOOL_LLVM_SPECIAL_CASE_LIST_FUZZER_BUILD:BOOL=OFF \
  -DLLVM_TOOL_LLVM_YAML_NUMERIC_PARSER_FUZZER_BUILD:BOOL=OFF \
  -DLLVM_TOOL_LLVM_YAML_PARSER_FUZZER_BUILD:BOOL=OFF \
  -DLLVM_TOOL_VFABI_DEMANGLE_FUZZER_BUILD:BOOL=OFF \
  \
  -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF \
  -DCLANG_TOOL_CLANG_FUZZER_BUILD:BOOL=OFF \
  -DLLVM_TOOL_LLVM_MICROSOFT_DEMANGLE_FUZZER_BUILD:BOOL=OFF \
  -DCLANG_ENABLE_ARCMT:BOOL=OFF \
  -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=OFF \
  -DCLANG_INCLUDE_TESTS:BOOL=OFF \
  \
  -DCOMPILER_RT_DEFAULT_TARGET_ONLY:BOOL=ON \
  -DCOMPILER_RT_BUILD_XRAY:BOOL=OFF \
  -DCOMPILER_RT_USE_BUILTINS_LIBRARY=OFF \
  -DCOMPILER_RT_BUILD_BUILTINS:BOOL=OFF \
  -DCOMPILER_RT_BUILD_LIBFUZZER:BOOL=OFF \
  -DCOMPILER_RT_BUILD_MEMPROF:BOOL=OFF \
  -DCOMPILER_RT_BUILD_PROFILE:BOOL=OFF \
  -DCOMPILER_RT_BUILD_SANITIZERS:BOOL=OFF \
  -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF \
  \
  -DLIBCXX_HAS_WIN32_THREAD_API:BOOL=ON \
  -DLIBCXX_HAS_PTHREAD_API:BOOL=ON \
  \
  -DLLD_DEFAULT_LD_LLD_IS_MINGW:BOOL=ON \
  \
  -DCMAKE_C_COMPILER_WORKS:BOOL=ON \
  -DCMAKE_CXX_COMPILER_WORKS:BOOL=ON \
  -DCXX_SUPPORTS_CXX11:BOOL=ON \
  -DCMAKE_ASM_COMPILER:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-as.exe \
  -DCMAKE_ASM_COMPILER_AR:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-ar.exe \
  -DCMAKE_ASM_COMPILER_RANLIB:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-ranlib.exe \
  -DCMAKE_C_COMPILER:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-clang.exe \
  -DCMAKE_C_COMPILER_AR:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-ar.exe \
  -DCMAKE_C_COMPILER_RANLIB:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-ranlib.exe \
  -DCMAKE_CXX_COMPILER:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-clang++.exe \
  -DCMAKE_CXX_COMPILER_AR:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-ar.exe \
  -DCMAKE_CXX_COMPILER_RANLIB:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-ranlib.exe \
  -DCMAKE_RC_COMPILER:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-windres.exe \
  -DCMAKE_AR:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-ar.exe \
  -DCMAKE_RANLIB:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-ranlib.exe \
  -DCMAKE_LINKER:FILEPATH=$PWD/prebuilt/bin/ld.lld.exe \
  -DGOLD_EXECUTABLE:FILEPATH=$PWD/prebuilt/bin/ld.lld.exe \
  -DLLVM_USE_LINKER:FILEPATH=$PWD/prebuilt/bin/ld.lld.exe \
  -DCMAKE_READELF:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-readelf.exe \
  -DCMAKE_DLLTOOL:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-dlltool.exe \
  -DCMAKE_NM:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-nm.exe \
  -DCMAKE_OBJCOPY:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-objcopy.exe \
  -DCMAKE_OBJDUMP:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-objdump.exe \
  -DCMAKE_STRIP:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-strip.exe \
  -DCMAKE_ASM_FLAGS:STRING="-fuse-ld=lld" \
  -DCMAKE_C_FLAGS:STRING="-g0 -U_DEBUG -fuse-ld=lld" \
  -DCMAKE_CXX_FLAGS:STRING="-g0 -U_DEBUG -fuse-ld=lld -I$PWD/prebuilt/include/c++/v1" \
  -DCMAKE_{SHARED,MODULE,EXE}_LINKER_FLAGS:STRING="-fuse-ld=lld" \
  -Sllvm -Bbuild_native &&
 #-I$PWD/native/include
 #-DCMAKE_C_FLAGS:STRING="-g0 -U_DEBUG -fuse-ld=lld -I$PWD/native/include" \
 #-DCMAKE_CXX_FLAGS:STRING="-g0 -U_DEBUG -fuse-ld=lld" \
 #-DCMAKE_CXX_FLAGS:STRING="-g0 -U_DEBUG -fuse-ld=lld -I$PWD/prebuilt/include/c++/v1" \
 #-DCMAKE_CXX_FLAGS:STRING="-g0 -U_DEBUG -fuse-ld=lld -std=c++11 -I$PWD/native/include -I$PWD/build_native/include/c++/v1" \
 ## don't build with debugging information
 #ninja -Cbuild_native CONFIGURE_LLVM_NATIVE &&
 #sed -i.bak -e "s/-D_DEBUG//g" $(grep -l "\-D_DEBUG" $(find build_native -name '*.cmake' -or -name '*.inc' -or -name '*.ninja' -or -name '*.json')) &&
 #ninja -Cbuild_native llvm-config runtimes/runtimes-configure &&
 #sed -i.bak -e "s?-D_DEBUG?-g0?" build_native/build.ninja build_native/NATIVE/build.ninja build_native/compile_commands.json &&
 #sed -i.bak -e "s?-D_DEBUG?-g0 -I$(cygpath -m $PWD/build_native/include/c++/v1)?" build_native/tools/llvm-config/BuildVariables.inc &&
 #sed -i.bak -e "s?-D_DEBUG?-g0 -I$(cygpath -m $PWD/build_native/include/c++/v1)?" build_native/runtimes/runtimes-x86_64-w64-mingw32-bins/build.ninja &&
 #sed -i.bak2 -e "s?\(cmake\.exe\) \(-DCMAKE_C_COMPILER\)?\1 -DCMAKE_BUILD_TYPE:STRING=Release \2?" build_native/build.ninja &&
 #sed -i.bak -e "s?\(cmake\.exe.*\) \(-S\)?\1 -DCMAKE_BUILD_TYPE:STRING=Release \2?" build_native/runtimes/runtimes-x86_64-w64-mingw32-bins/build.ninja &&
 wl-showstatus build &&
 PATH=$PWD/prebuilt/bin:$PATH ninja -Cbuild_native &&
 ## fix issue building runtimes because of -D_DEBUG
 #for D in $(sed -ne "s/^build runtimes-\(.*\)-configure:.*/\1/p" build_native/build.ninja); do
 # echo mkdir -p build_native/runtimes/runtimes-$D-bins/build.ninja
 # mkdir -p build_native/runtimes/runtimes-$D-bins/build.ninja
 #done &&
 #( PATH=$PWD/prebuilt/bin:$PATH ninja -Cbuild_native || (
 # for D in $(sed -ne "s/^build runtimes-\(.*\)-configure:.*/\1/p" build_native/build.ninja); do
 #  rmdir build_native/runtimes/runtimes-$D-bins/build.ninja &&
 #  PATH=$PWD/prebuilt/bin:$PATH ninja -Cbuild_native runtimes-$D-configure &&
 #  sed -i.bak -e "s?-D_DEBUG?-g0?g" build_native/runtimes/runtimes-$D-bins/compile_commands.json &&
 #  #sed -i.bak -e "s?-D_DEBUG?-g0?g" build_native/runtimes/runtimes-$D-bins/build.ninja &&
 #  PATH=$PWD/prebuilt/bin:$PATH ninja -Cbuild_native runtimes-$D
 # done &&
 # PATH=$PWD/prebuilt/bin:$PATH ninja -Cbuild_native
 #)) &&
 #PATH=$PWD/prebuilt/bin:$PATH ninja -Cbuild_native clang-tblgen llvm-tblgen llvm-config &&
 strip build_native/bin/*tblgen.exe &&
 wl-showstatus build-install &&
 PATH=$PWD/prebuilt/bin:$PATH ninja -Cbuild_native install/strip &&
 #( PATH=$PWD/prebuilt/bin:$PATH ninja -Cbuild_native install/strip || (
 # sed -i.bak -e "s/-D_DEBUG//g" $(grep -l "\-D_DEBUG" $(find build_native -name '*.cmake' -or -name '*.inc' -or -name '*.json')) &&
 # PATH=$PWD/prebuilt/bin:$PATH ninja -Cbuild_native install/strip
 #)) &&
 ## don't link with -lgcc
 #sed -i.bak -e "s/\(deps = \)gcc/\1/g" $(grep -l "deps = gcc" $(find build_native -name 'rules.ninja')) &&
 ## don't build with debugging information
 #for F in build_native/runtimes/runtimes-*-bins/build.ninja; do
 # sed -i.bak -e "s/-D_DEBUG//g; s/LINK_FLAGS = /&-fuse-ld=lld /; s/LINK_LIBRARIES = /&-fuse-ld=lld /" $F &&
 # CPLUS_INCLUDE_PATH=$PWD/build_native/include/c++/v1:$PWD/build_native/include/$(echo $F|sed -e "s/^.*runtimes-\(.*\)-bins.*$/\1/")/c++/v1${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} PATH=$PWD/prebuilt/bin:$PATH ninja -C$(dirname $F)
 #done
 cp -f build_native/bin/clang-tblgen.exe native/bin/ &&
 cp -f native/bin/clang.exe native/bin/gcc_renamed_clang.exe &&
 cp -f native/bin/clang++.exe native/bin/g++_renamed_clang++.exe &&
 cp -u prebuilt/bin/{libc++.dll,libunwind.dll} native/bin/ &&



 # build native mingw-w64
 arch=$(echo $BUILDPLATFORM|sed -e "s/-.*$//") &&
 mkdir -p build_mingw-w64_native &&
 wl-showstatus configure &&
 cd build_mingw-w64_native &&
 $MINGWPREFIX/src/mingw-w64/configure --prefix=$PWD/../native\
  --build=$BUILDPLATFORM \
  --host=$RUNPLATFORM \
  --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrt"; else echo "msvcrt-os"; fi) \
  --with-libraries \
  --without-tools \
  --enable-sdk=all \
  --enable-secure-api \
  --enable-wildcard \
  --$(if [ "$arch" == "i686" ]; then echo "enable"; else echo "disable"; fi)-lib32 \
  --$(if [ "$arch" == "x86_64" ]; then echo "enable"; else echo "disable"; fi)-lib64 \
  --$(if [ "$arch" == "armv7" ]; then echo "enable"; else echo "disable"; fi)-libarm32 \
  --$(if [ "$arch" == "aarch64" ]; then echo "enable"; else echo "disable"; fi)-libarm64 \
  --with-default-win32-winnt=0x0600 \
  --enable-idl \
  --without-genlib \
  --without-gnu-ld \
  --with-sysroot=$PWD/../native \
  CC="$PWD/../native/bin/gcc_renamed_clang.exe -fuse-ld=lld -target $arch-w64-mingw32" \
  CXX="$PWD/../native/bin/g++_renamed_clang++.exe -fuse-ld=lld -target $arch-w64-mingw32" \
  AS="$PWD/../native/bin/llvm-as.exe -target $arch-w64-mingw32" \
  LD="$PWD/../native/bin/lld-link.exe" \
  DLLTOOL="$PWD/../native/bin/llvm-dlltool.exe" \
  AR="$PWD/../native/bin/llvm-ar.exe" \
  RANLIB="$PWD/../native/bin/llvm-ranlib.exe" \
  RC="$PWD/../native/bin/llvm-windres.exe" \
  NM="$PWD/../native/bin/llvm-nm.exe" \
  OBJDUMP="$PWD/../native/bin/llvm-objdump.exe" \
  &&
 cd .. &&
 # fix llvm-dlltool arguments
 sed -i.bak -e "s/--as\(-flags\)*=[^ ]*//" build_mingw-w64_native/mingw-w64-crt/Makefile &&
 # fix link issues in build_mingw-w64/mingw-w64-libraries/winpthreads/
 sed -i.bak -e "s?\(-o \)\([^ ]*\)\(.*\) -link \(-dll\)?-shared -s -mwindows \1.libs/libwinpthread-1.dll -Wl,--out-implib,\2 \3 \4?" build_mingw-w64_native/mingw-w64-libraries/winpthreads/libtool &&
 sed -i.bak -e "s?\$(AM_V_CCLD).*\$(libwinpthread_la_OBJECTS).*?& \&\& \$(AR) \$(ARFLAGS) .libs/libwinpthread.a \$(libwinpthread_la_OBJECTS:.lo=.o) \&\& cp -f .libs/libwinpthread.a .libs/libwinpthread.lib?" build_mingw-w64_native/mingw-w64-libraries/winpthreads/Makefile &&
 #wl-showstatus build &&
 #( make -Cbuild_mingw-w64_native || make -Cbuild_mingw-w64_native CC="$PWD/native/bin/clang.exe -fuse-ld=lld -fno-integrated-as" ) &&
 wl-showstatus build-install &&
 #make -Cbuild_mingw-w64_native/mingw-w64-headers install-strip &&
 #make -Cbuild_mingw-w64_native/mingw-w64-crt install-libarm32LIBRARIES CFLAGS="-target armv7-w64-mingw32 -march=armv7-a -mtune=armv7-a+vfpv4+neon+thumb2 -D__arm__" CCASFLAGS="-target armv7-w64-mingw32 -march=armv7-a -mtune=armv7-a+vfpv4+neon+thumb2" &&
 #make -Cbuild_mingw-w64_native/mingw-w64-crt install-libarm64LIBRARIES CFLAGS="-target aarch64-w64-mingw32 -mtune=cortex-a57 -D__aarch64__" CCASFLAGS="-target aarch64-w64-mingw32 -mtune=cortex-a57" &&
 #make -Cbuild_mingw-w64_native/mingw-w64-crt install-strip &&
 make -Cbuild_mingw-w64_native install-strip &&
    echo OK



 #mkdir -p build_cross &&
 #wl-showstatus configure &&
 ##-DLLVM_ENABLE_RUNTIMES:STRING="compiler-rt;libcxx;libcxxabi" \
 ##-DLLVM_ENABLE_RUNTIMES:STRING="compiler-rt;libunwind" \
 ##-DLIBUNWIND_ENABLE_SHARED:BOOL=ON \
 ##-DLIBUNWIND_ENABLE_STATIC:BOOL=ON \
 ##-DLIBUNWIND_USE_COMPILER_RT:BOOL=ON \
 ##-DLLVM_ENABLE_EH:BOOL=ON \
 ##-DLLVM_ENABLE_RTTI:BOOL=ON \
 #####ld.lld: error: too many exported symbols (max 65535)
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$PWD/cross -DCMAKE_BUILD_TYPE:STRING=Release  \
 # -DCMAKE_CROSSCOMPILING:BOOL=ON \
 # -DCMAKE_SYSTEM_NAME:STRING=Windows \
 # -DLLVM_ENABLE_PROJECTS="clang;lld" \
 # -DLLVM_ENABLE_RUNTIMES:STRING="compiler-rt" \
 # -DLLVM_TARGETS_TO_BUILD="X86;ARM;AArch64" \
 # -DLLVM_BUILD_LLVM_DYLIB:BOOL=ON \
 # -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF \
 # -DLLVM_INCLUDE_TESTS:BOOL=OFF \
 # -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF \
 # -DLLVM_INCLUDE_BENCHMARKS:BOOL=OFF \
 # -DLLVM_INCLUDE_DOCS:BOOL=OFF \
 # -DLLVM_ENABLE_ASSERTIONS:BOOL=ON \
 # \
 # -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF \
 # \
 # -DCOMPILER_RT_DEFAULT_TARGET_ONLY:BOOL=OFF \
 # -DCOMPILER_RT_BUILD_XRAY:BOOL=OFF \
 # -DCOMPILER_RT_USE_BUILTINS_LIBRARY=ON \
 # -DCOMPILER_RT_BUILD_BUILTINS:BOOL=ON \
 # -DCOMPILER_RT_BUILD_LIBFUZZER:BOOL=OFF \
 # -DCOMPILER_RT_BUILD_MEMPROF:BOOL=OFF \
 # -DCOMPILER_RT_BUILD_PROFILE:BOOL=OFF \
 # -DCOMPILER_RT_BUILD_SANITIZERS:BOOL=OFF \
 # -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF \
 # \
 # -DLIBCXXABI_ENABLE_SHARED:BOOL=ON \
 # -DLIBCXXABI_ENABLE_STATIC:BOOL=ON \
 # -DLIBCXXABI_TARGET_TRIPLE:STRING=$RUNPLATFORM \
 # -DLIBCXXABI_USE_COMPILER_RT:BOOL=ON \
 # -DLIBCXXABI_LIBCXX_INCLUDES:PATH=$PWD/build_libcxx/include/c++/v1 \
 # -DLIBCXXABI_LIBDIR_SUFFIX="" \
 # -DLIBCXXABI_INCLUDE_TESTS:BOOL=OFF \
 # \
 # -DCMAKE_SYSTEM_PROGRAM_PATH=$PWD/native/bin \
 # -DCMAKE_FIND_ROOT_PATH="$PWD/native" \
 # -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER \
 # -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY \
 # -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY \
 # \
 # -DLLVM_TABLEGEN:STRING=$PWD/native/bin/llvm-tblgen.exe \
 # -DCLANG_TABLEGEN:STRING=$PWD/native/bin/clang-tblgen.exe \
 # -DLLVM_CONFIG_PATH:STRING=$PWD/native/bin/llvm-config.exe \
 # \
 # -DCMAKE_ASM_COMPILER:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-as.exe \
 # -DCMAKE_ASM_COMPILER_AR:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-ar.exe \
 # -DCMAKE_ASM_COMPILER_RANLIB:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-ranlib.exe \
 # -DCMAKE_C_COMPILER:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-clang.exe \
 # -DCMAKE_C_COMPILER_AR:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-ar.exe \
 # -DCMAKE_C_COMPILER_RANLIB:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-ranlib.exe \
 # -DCMAKE_CXX_COMPILER:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-clang++.exe \
 # -DCMAKE_CXX_COMPILER_AR:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-ar.exe \
 # -DCMAKE_CXX_COMPILER_RANLIB:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-ranlib.exe \
 # -DCMAKE_RC_COMPILER:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-windres.exe \
 # -DCMAKE_AR:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-ar.exe \
 # -DCMAKE_RANLIB:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-ranlib.exe \
 # -DCMAKE_LINKER:FILEPATH=$PWD/prebuilt/bin/ld.lld.exe \
 # -DGOLD_EXECUTABLE:FILEPATH=$PWD/prebuilt/bin/ld.lld.exe \
 # -DCMAKE_READELF:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-readelf.exe \
 # -DCMAKE_DLLTOOL:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-dlltool.exe \
 # -DCMAKE_NM:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-nm.exe \
 # -DCMAKE_OBJCOPY:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-objcopy.exe \
 # -DCMAKE_OBJDUMP:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-objdump.exe \
 # -DCMAKE_STRIP:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-strip.exe \
 # -DCMAKE_ASM_FLAGS:STRING="-g0 -no-integrated-as -fuse-ld=lld" \
 # -DCMAKE_C_FLAGS:STRING="-g0 -fuse-ld=lld" \
 # -DCMAKE_CXX_FLAGS:STRING="-g0 -fuse-ld=lld" \
 # -DCMAKE_{SHARED,MODULE,EXE}_LINKER_FLAGS:STRING="-fuse-ld=lld" \
 # -Sllvm -Bbuild_cross &&
 ##-DCMAKE_CXX_FLAGS:STRING="-g0 -fuse-ld=lld -I$PWD/prebuilt/include/c++/v1" \
 #wl-showstatus build-install &&
 #PATH=$PWD/prebuilt/bin:$PATH ninja -Cbuild_cross install/strip &&
 ##PATH=$PWD/prebuilt/bin:$PATH CPLUS_INCLUDE_PATH=$PWD/prebuilt/include/c++/v1${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} ninja -Cbuild_cross install/strip &&
 #cp -f build_cross/bin/clang-tblgen.exe cross/bin/ &&
 #cp -f cross/bin/clang.exe cross/bin/gcc_renamed_clang.exe &&
 #cp -f cross/bin/clang++.exe cross/bin/g++_renamed_clang++.exe &&
 ##cp -u prebuilt/bin/{libc++.dll,libunwind.dll} cross/bin/ &&
 #   echo OK



 mkdir -p build_cross &&
 wl-showstatus configure &&
 #-DLLVM_ENABLE_RUNTIMES:STRING="compiler-rt;libcxx;libcxxabi" \
 #-DLLVM_ENABLE_RUNTIMES:STRING="compiler-rt;libunwind" \
 #-DLIBUNWIND_ENABLE_SHARED:BOOL=ON \
 #-DLIBUNWIND_ENABLE_STATIC:BOOL=ON \
 #-DLIBUNWIND_USE_COMPILER_RT:BOOL=ON \
 ####ld.lld: error: too many exported symbols (max 65535)
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$PWD/cross -DCMAKE_BUILD_TYPE:STRING=Release  \
  -DCMAKE_CROSSCOMPILING:BOOL=ON \
  -DCMAKE_SYSTEM_NAME:STRING=Windows \
  -DLLVM_ENABLE_PROJECTS="clang;lld" \
  -DLLVM_ENABLE_RUNTIMES:STRING="compiler-rt" \
  -DLLVM_TARGETS_TO_BUILD="X86;ARM;AArch64" \
  -DLLVM_BUILD_LLVM_DYLIB:BOOL=OFF \
  -DBUILD_SHARED_LIBS:BOOL=ON \
  -DLLVM_BUILD_TESTS:BOOL=OFF \
  -DLLVM_INCLUDE_TESTS:BOOL=OFF \
  -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF \
  -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF \
  -DLLVM_INCLUDE_BENCHMARKS:BOOL=OFF \
  -DLLVM_INCLUDE_DOCS:BOOL=OFF \
  -DLLVM_ENABLE_ASSERTIONS:BOOL=ON \
  -DLLVM_ENABLE_EH:BOOL=ON \
  -DLLVM_ENABLE_RTTI:BOOL=ON \
  -DLLVM_TOOL_BUGPOINT_PASSES_BUILD:BOOL=OFF \
  \
  -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF \
  \
  -DCOMPILER_RT_DEFAULT_TARGET_ONLY:BOOL=OFF \
  -DCOMPILER_RT_BUILD_XRAY:BOOL=OFF \
  -DCOMPILER_RT_USE_BUILTINS_LIBRARY=ON \
  -DCOMPILER_RT_BUILD_BUILTINS:BOOL=ON \
  -DCOMPILER_RT_BUILD_LIBFUZZER:BOOL=OFF \
  -DCOMPILER_RT_BUILD_MEMPROF:BOOL=OFF \
  -DCOMPILER_RT_BUILD_PROFILE:BOOL=OFF \
  -DCOMPILER_RT_BUILD_SANITIZERS:BOOL=OFF \
  -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF \
  \
  -DLIBUNWIND_ENABLE_SHARED:BOOL=ON \
  -DLIBUNWIND_ENABLE_STATIC:BOOL=ON \
  -DLIBUNWIND_USE_COMPILER_RT:BOOL=ON \
  \
  -DLIBCXX_ENABLE_SHARED:BOOL=ON \
  -DLIBCXX_ENABLE_STATIC:BOOL=ON \
  -DLIBCXX_USE_COMPILER_RT:BOOL=ON \
  -DLIBCXX_HAS_WIN32_THREAD_API:BOOL=ON \
  -DLIBCXX_HAS_PTHREAD_API:BOOL=OFF \
  -DLIBCXX_ENABLE_EXPERIMENTAL_LIBRARY:BOOL=OFF \
  -DLIBCXX_CXX_ABI=libcxxabi \
  -DLIBCXX_CXX_ABI_INCLUDE_PATHS=$PWD/libcxxabi/include \
  -DLIBCXX_CXX_ABI_LIBRARY_PATH:PATH=$PWD/build_libcxxabi/lib \
  -DLIBCXX_LIBDIR_SUFFIX="" \
  -DLIBCXX_INCLUDE_TESTS:BOOL=OFF \
  -DLIBCXX_ENABLE_ABI_LINKER_SCRIPT:BOOL=OFF \
  \
  -DLIBCXXABI_ENABLE_SHARED:BOOL=ON \
  -DLIBCXXABI_ENABLE_STATIC:BOOL=ON \
  -DLIBCXXABI_TARGET_TRIPLE:STRING=$RUNPLATFORM \
  -DLIBCXXABI_USE_COMPILER_RT:BOOL=ON \
  -DLIBCXXABI_LIBCXX_INCLUDES:PATH=$PWD/build_libcxx/include/c++/v1 \
  -DLIBCXXABI_LIBDIR_SUFFIX="" \
  -DLIBCXXABI_INCLUDE_TESTS:BOOL=OFF \
  \
  -DCMAKE_SYSTEM_PROGRAM_PATH=$PWD/native/bin \
  -DCMAKE_FIND_ROOT_PATH="$PWD/native" \
  -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER \
  -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY \
  -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY \
  \
  -DLLVM_TABLEGEN:STRING=$PWD/native/bin/llvm-tblgen.exe \
  -DCLANG_TABLEGEN:STRING=$PWD/native/bin/clang-tblgen.exe \
  -DLLVM_CONFIG_PATH:STRING=$PWD/native/bin/llvm-config.exe \
  \
  -DCMAKE_ASM_COMPILER:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-as.exe \
  -DCMAKE_ASM_COMPILER_AR:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-ar.exe \
  -DCMAKE_ASM_COMPILER_RANLIB:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-ranlib.exe \
  -DCMAKE_C_COMPILER:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-clang.exe \
  -DCMAKE_C_COMPILER_AR:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-ar.exe \
  -DCMAKE_C_COMPILER_RANLIB:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-ranlib.exe \
  -DCMAKE_CXX_COMPILER:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-clang++.exe \
  -DCMAKE_CXX_COMPILER_AR:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-ar.exe \
  -DCMAKE_CXX_COMPILER_RANLIB:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-ranlib.exe \
  -DCMAKE_RC_COMPILER:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-windres.exe \
  -DCMAKE_AR:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-ar.exe \
  -DCMAKE_RANLIB:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-ranlib.exe \
  -DCMAKE_LINKER:FILEPATH=$PWD/prebuilt/bin/ld.lld.exe \
  -DGOLD_EXECUTABLE:FILEPATH=$PWD/prebuilt/bin/ld.lld.exe \
  -DCMAKE_READELF:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-readelf.exe \
  -DCMAKE_DLLTOOL:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-dlltool.exe \
  -DCMAKE_NM:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-nm.exe \
  -DCMAKE_OBJCOPY:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-objcopy.exe \
  -DCMAKE_OBJDUMP:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-objdump.exe \
  -DCMAKE_STRIP:FILEPATH=$PWD/prebuilt/bin/$RUNPLATFORM-strip.exe \
  -DCMAKE_ASM_FLAGS:STRING="-g0 -no-integrated-as -fuse-ld=lld" \
  -DCMAKE_C_FLAGS:STRING="-g0 -fuse-ld=lld" \
  -DCMAKE_CXX_FLAGS:STRING="-g0 -fuse-ld=lld" \
  -DCMAKE_{SHARED,MODULE,EXE}_LINKER_FLAGS:STRING="-fuse-ld=lld" \
  -Sllvm -Bbuild_cross &&
 #-DCMAKE_CXX_FLAGS:STRING="-g0 -fuse-ld=lld -I$PWD/prebuilt/include/c++/v1" \
 wl-showstatus build-install &&
 PATH=$PWD/prebuilt/bin:$PATH ninja -Cbuild_cross install/strip &&
 #PATH=$PWD/prebuilt/bin:$PATH CPLUS_INCLUDE_PATH=$PWD/prebuilt/include/c++/v1${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} ninja -Cbuild_cross install/strip &&
 strip build_cross/bin/clang-tblgen.exe &&
 cp -f build_cross/bin/clang-tblgen.exe cross/bin/ &&
 cp -f cross/bin/clang.exe cross/bin/gcc_renamed_clang.exe &&
 cp -f cross/bin/clang++.exe cross/bin/g++_renamed_clang++.exe &&
 #cp -u prebuilt/bin/{libc++.dll,libunwind.dll} cross/bin/ &&
    echo OK



 # build runtimes
 for arch in i686 x86_64 armv7 aarch64; do
  mkdir -p build_cross_runtimes_$arch &&
  wl-showstatus configure &&
  cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$PWD/cross -DCMAKE_BUILD_TYPE:STRING=Release  \
   -DCMAKE_CROSSCOMPILING:BOOL=ON \
   -DCMAKE_SYSTEM_NAME:STRING=Windows \
   -DLLVM_ENABLE_RUNTIMES:STRING="compiler-rt" \
   -DLLVM_ENABLE_ASSERTIONS:BOOL=ON \
   -DLLVM_ENABLE_EH:BOOL=ON \
   -DLLVM_ENABLE_RTTI:BOOL=ON \
   \
   -DCMAKE_ASM_COMPILER_TARGET=$arch-w64-mingw32 \
   -DCMAKE_C_COMPILER_TARGET=$arch-w64-mingw32 \
   -DCMAKE_CXX_COMPILER_TARGET=$arch-w64-mingw32 \
   -DCOMPILER_RT_DEFAULT_TARGET_TRIPLE:STRING=$arch-w64-mingw32 \
   -DCOMPILER_RT_DEFAULT_TARGET_ONLY:BOOL=OFF \
   -DCOMPILER_RT_USE_LIBCXX:BOOL=ON \
   -DCOMPILER_RT_BUILD_XRAY:BOOL=OFF \
   -DCOMPILER_RT_USE_BUILTINS_LIBRARY=ON \
   -DCOMPILER_RT_BUILD_BUILTINS:BOOL=ON \
   -DCOMPILER_RT_BUILD_LIBFUZZER:BOOL=OFF \
   -DCOMPILER_RT_BUILD_MEMPROF:BOOL=OFF \
   -DCOMPILER_RT_BUILD_PROFILE:BOOL=OFF \
   -DCOMPILER_RT_BUILD_SANITIZERS:BOOL=OFF \
   -DCOMPILER_RT_SANITIZERS_TO_BUILD:STRING="" \
   -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF \
   \
   -DLIBCXXABI_ENABLE_SHARED:BOOL=ON \
   -DLIBCXXABI_ENABLE_STATIC:BOOL=ON \
   -DLIBCXXABI_TARGET_TRIPLE:STRING=$arch-w64-mingw32 \
   -DLIBCXXABI_USE_COMPILER_RT:BOOL=ON \
   -DLIBCXXABI_LIBCXX_INCLUDES:PATH=$PWD/build_libcxx/include/c++/v1 \
   -DLIBCXXABI_LIBDIR_SUFFIX="" \
   -DLIBCXXABI_INCLUDE_TESTS:BOOL=OFF \
   \
   -DCMAKE_SYSTEM_PROGRAM_PATH=$PWD/native/bin \
   -DCMAKE_FIND_ROOT_PATH="$PWD/native" \
   -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER \
   -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY \
   -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY \
   \
   -DLLVM_CONFIG_PATH:STRING=$PWD/native/bin/llvm-config.exe \
   \
   -DCMAKE_ASM_COMPILER:STRING=$PWD/prebuilt/bin/$arch-w64-mingw32-clang.exe \
   -DCMAKE_ASM_COMPILER_AR:FILEPATH=$PWD/prebuilt/bin/$arch-w64-mingw32-ar.exe \
   -DCMAKE_ASM_COMPILER_RANLIB:FILEPATH=$PWD/prebuilt/bin/$arch-w64-mingw32-ranlib.exe \
   -DCMAKE_C_COMPILER:FILEPATH=$PWD/prebuilt/bin/$arch-w64-mingw32-clang.exe \
   -DCMAKE_C_COMPILER_AR:FILEPATH=$PWD/prebuilt/bin/$arch-w64-mingw32-ar.exe \
   -DCMAKE_C_COMPILER_RANLIB:FILEPATH=$PWD/prebuilt/bin/$arch-w64-mingw32-ranlib.exe \
   -DCMAKE_CXX_COMPILER:FILEPATH=$PWD/prebuilt/bin/$arch-w64-mingw32-clang++.exe \
   -DCMAKE_CXX_COMPILER_AR:FILEPATH=$PWD/prebuilt/bin/$arch-w64-mingw32-ar.exe \
   -DCMAKE_CXX_COMPILER_RANLIB:FILEPATH=$PWD/prebuilt/bin/$arch-w64-mingw32-ranlib.exe \
   -DCMAKE_RC_COMPILER:FILEPATH=$PWD/prebuilt/bin/$arch-w64-mingw32-windres.exe \
   -DCMAKE_AR:FILEPATH=$PWD/prebuilt/bin/$arch-w64-mingw32-ar.exe \
   -DCMAKE_RANLIB:FILEPATH=$PWD/prebuilt/bin/$arch-w64-mingw32-ranlib.exe \
   -DCMAKE_LINKER:FILEPATH=$PWD/prebuilt/bin/ld.lld.exe \
   -DGOLD_EXECUTABLE:FILEPATH=$PWD/prebuilt/bin/ld.lld.exe \
   -DCMAKE_READELF:FILEPATH=$PWD/prebuilt/bin/$arch-w64-mingw32-readelf.exe \
   -DCMAKE_DLLTOOL:FILEPATH=$PWD/prebuilt/bin/$arch-w64-mingw32-dlltool.exe \
   -DCMAKE_NM:FILEPATH=$PWD/prebuilt/bin/$arch-w64-mingw32-nm.exe \
   -DCMAKE_OBJCOPY:FILEPATH=$PWD/prebuilt/bin/$arch-w64-mingw32-objcopy.exe \
   -DCMAKE_OBJDUMP:FILEPATH=$PWD/prebuilt/bin/$arch-w64-mingw32-objdump.exe \
   -DCMAKE_STRIP:FILEPATH=$PWD/prebuilt/bin/$arch-w64-mingw32-strip.exe \
   -DCMAKE_ASM_FLAGS:STRING="-g0 -v -integrated-as -fuse-ld=lld" \
   -DCMAKE_C_FLAGS:STRING="-g0 -fuse-ld=lld" \
   -DCMAKE_CXX_FLAGS:STRING="-g0 -fuse-ld=lld" \
   -DCMAKE_{SHARED,MODULE,EXE}_LINKER_FLAGS:STRING="-fuse-ld=lld" \
   -Sruntimes -Bbuild_cross_runtimes_$arch &&
  #-DCMAKE_ASM_COMPILER:FILEPATH=$PWD/prebuilt/bin/$arch-w64-mingw32-as.exe \
  #-DCMAKE_ASM_FLAGS:STRING="-g0 -v -no-integrated-as -fuse-ld=lld" \
  #-DCMAKE_CXX_FLAGS:STRING="-g0 -fuse-ld=lld -I$PWD/prebuilt/include/c++/v1" \
  wl-showstatus build-install &&
  PATH=$PWD/prebuilt/bin:$PATH ninja -Cbuild_cross_runtimes_$arch install/strip &&
  touch SUCCESS_$arch || break
 done &&
 if [ $(ls -1 SUCCESS_*|wc -l) -ne 4 ]; then false; fi &&
 rm -f SUCCESS_* &&
    echo OK



 # build MinGW-w64 headers
 mkdir -p build_mingw-w64_headers &&
 wl-showstatus configure &&
 cd build_mingw-w64_headers &&
 $MINGWPREFIX/src/mingw-w64/mingw-w64-headers/configure --prefix=$PWD/../cross \
  --build=$BUILDPLATFORM \
  --host=$RUNPLATFORM \
  --with-default-win32-winnt=0x0600 \
  --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrt"; else echo "msvcrt-os"; fi) \
  --enable-sdk=all \
  --enable-idl \
  &&
 cd .. &&
 wl-showstatus build-install &&
 make -Cbuild_mingw-w64_headers install-strip &&
    echo OK

 # build cross mingw-w64
 arch=$(echo $BUILDPLATFORM|sed -e "s/-.*$//") &&
 mkdir -p build_mingw-w64_cross &&
 wl-showstatus configure &&
 cd build_mingw-w64_cross &&
 $MINGWPREFIX/src/mingw-w64/configure --prefix=$PWD/../cross\
  --build=$BUILDPLATFORM \
  --host=$RUNPLATFORM \
  --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrt"; else echo "msvcrt-os"; fi) \
  --with-libraries \
  --without-tools \
  --enable-sdk=all \
  --enable-secure-api \
  --enable-wildcard \
  --$(if [ "$arch" == "i686" ]; then echo "enable"; else echo "disable"; fi)-lib32 \
  --$(if [ "$arch" == "x86_64" ]; then echo "enable"; else echo "disable"; fi)-lib64 \
  --$(if [ "$arch" == "armv7" ]; then echo "enable"; else echo "disable"; fi)-libarm32 \
  --$(if [ "$arch" == "aarch64" ]; then echo "enable"; else echo "disable"; fi)-libarm64 \
  --with-default-win32-winnt=0x0600 \
  --enable-idl \
  --without-genlib \
  --without-gnu-ld \
  --with-sysroot=$PWD/../cross \
  CC="$PWD/../cross/bin/gcc_renamed_clang.exe -fuse-ld=lld -target $arch-w64-mingw32" \
  CXX="$PWD/../cross/bin/g++_renamed_clang++.exe -fuse-ld=lld -target $arch-w64-mingw32" \
  AS="$PWD/../cross/bin/llvm-as.exe -target $arch-w64-mingw32" \
  LD="$PWD/../cross/bin/lld-link.exe" \
  DLLTOOL="$PWD/../cross/bin/llvm-dlltool.exe" \
  AR="$PWD/../cross/bin/llvm-ar.exe" \
  RANLIB="$PWD/../cross/bin/llvm-ranlib.exe" \
  RC="$PWD/../cross/bin/llvm-windres.exe" \
  NM="$PWD/../cross/bin/llvm-nm.exe" \
  OBJDUMP="$PWD/../cross/bin/llvm-objdump.exe" \
  &&
 cd .. &&
 # fix llvm-dlltool arguments
 sed -i.bak -e "s/--as\(-flags\)*=[^ ]*//" build_mingw-w64_cross/mingw-w64-crt/Makefile &&
 # fix link issues in build_mingw-w64/mingw-w64-libraries/winpthreads/
 sed -i.bak -e "s?\(-o \)\([^ ]*\)\(.*\) -link \(-dll\)?-shared -s -mwindows \1.libs/libwinpthread-1.dll -Wl,--out-implib,\2 \3 \4?" build_mingw-w64_cross/mingw-w64-libraries/winpthreads/libtool &&
 sed -i.bak -e "s?\$(AM_V_CCLD).*\$(libwinpthread_la_OBJECTS).*?& \&\& \$(AR) \$(ARFLAGS) .libs/libwinpthread.a \$(libwinpthread_la_OBJECTS:.lo=.o) \&\& cp -f .libs/libwinpthread.a .libs/libwinpthread.lib?" build_mingw-w64_cross/mingw-w64-libraries/winpthreads/Makefile &&
 #wl-showstatus build &&
 #( make -Cbuild_mingw-w64_cross || make -Cbuild_mingw-w64_cross CC="$PWD/cross/bin/clang.exe -fuse-ld=lld -fno-integrated-as" ) &&
 wl-showstatus build-install &&
 #make -Cbuild_mingw-w64_cross/mingw-w64-headers install-strip &&
 #make -Cbuild_mingw-w64_cross/mingw-w64-crt install-libarm32LIBRARIES CFLAGS="-target armv7-w64-mingw32 -march=armv7-a -mtune=armv7-a+vfpv4+neon+thumb2 -D__arm__" CCASFLAGS="-target armv7-w64-mingw32 -march=armv7-a -mtune=armv7-a+vfpv4+neon+thumb2" &&
 #make -Cbuild_mingw-w64_cross/mingw-w64-crt install-libarm64LIBRARIES CFLAGS="-target aarch64-w64-mingw32 -mtune=cortex-a57 -D__aarch64__" CCASFLAGS="-target aarch64-w64-mingw32 -mtune=cortex-a57" &&
 #make -Cbuild_mingw-w64_cross/mingw-w64-crt install-strip &&
 make -Cbuild_mingw-w64_cross install-strip &&
    echo OK




 # build MinGW-w64 libraries
 for arch in i686 x86_64 armv7 aarch64; do
  mkdir -p build_mingw-w64_cross_$arch &&
  wl-showstatus configure &&
  cd build_mingw-w64_cross_$arch &&
  $MINGWPREFIX/src/mingw-w64/configure --prefix=$PWD/../cross/$arch-w64-mingw32 \
   --build=$BUILDPLATFORM \
   --host=$RUNPLATFORM \
   --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrt"; else echo "msvcrt-os"; fi) \
   --without-libraries \
   --without-tools \
   --enable-sdk=all \
   --enable-secure-api \
   --enable-wildcard \
   --$(if [ "$arch" == "i686" ]; then echo "enable"; else echo "disable"; fi)-lib32 \
   --$(if [ "$arch" == "x86_64" ]; then echo "enable"; else echo "disable"; fi)-lib64 \
   --$(if [ "$arch" == "armv7" ]; then echo "enable"; else echo "disable"; fi)-libarm32 \
   --$(if [ "$arch" == "aarch64" ]; then echo "enable"; else echo "disable"; fi)-libarm64 \
   --with-default-win32-winnt=0x0600 \
   --enable-idl \
   --without-genlib \
   --without-gnu-ld \
   --with-sysroot=$PWD/../cross \
   CC="$PWD/../cross/bin/gcc_renamed_clang.exe -fuse-ld=lld -target $arch-w64-mingw32 $(if [ "$arch" == "armv7" ] || [ "$arch" == "aarch64" ]; then echo "-femulated-tls"; fi)" \
   CXX="$PWD/../cross/bin/g++_renamed_clang++.exe -fuse-ld=lld -target $arch-w64-mingw32" \
   AS="$PWD/../cross/bin/llvm-as.exe -target $arch-w64-mingw32" \
   LD="$PWD/../cross/bin/lld-link.exe" \
   DLLTOOL="$PWD/../cross/bin/llvm-dlltool.exe" \
   AR="$PWD/../cross/bin/llvm-ar.exe" \
   RANLIB="$PWD/../cross/bin/llvm-ranlib.exe" \
   RC="$PWD/../cross/bin/llvm-windres.exe" \
   NM="$PWD/../cross/bin/llvm-nm.exe" \
   OBJDUMP="$PWD/../cross/bin/llvm-objdump.exe" \
   &&
  cd .. &&
  # fix llvm-dlltool arguments
  sed -i.bak -e "s/--as\(-flags\)*=[^ ]*//" build_mingw-w64_cross_$arch/mingw-w64-crt/Makefile &&
  ## fix link issues in build_mingw-w64/mingw-w64-libraries/winpthreads/
  #sed -i.bak -e "s?\(-o \)\([^ ]*\)\(.*\) -link \(-dll\)?-shared -s -mwindows \1.libs/libwinpthread-1.dll -Wl,--out-implib,\2 \3 \4?" build_mingw-w64_cross_$arch/mingw-w64-libraries/winpthreads/libtool &&
  #sed -i.bak -e "s?\$(AM_V_CCLD).*\$(libwinpthread_la_OBJECTS).*?& \&\& \$(AR) \$(ARFLAGS) .libs/libwinpthread.a \$(libwinpthread_la_OBJECTS:.lo=.o) \&\& cp -f .libs/libwinpthread.a .libs/libwinpthread.lib?" build_mingw-w64_cross_$arch/mingw-w64-libraries/winpthreads/Makefile &&
  #wl-showstatus build &&
  #( make -Cbuild_mingw-w64_cross_$arch || make -Cbuild_mingw-w64_cross_$arch CC="$PWD/cross/bin/clang.exe -fuse-ld=lld -fno-integrated-as" ) &&
  wl-showstatus build-install &&
  #make -Cbuild_mingw-w64_cross_$arch/mingw-w64-headers install-strip &&
  #make -Cbuild_mingw-w64_cross_$arch/mingw-w64-crt install-libarm32LIBRARIES CFLAGS="-target armv7-w64-mingw32 -march=armv7-a -mtune=armv7-a+vfpv4+neon+thumb2 -D__arm__" CCASFLAGS="-target armv7-w64-mingw32 -march=armv7-a -mtune=armv7-a+vfpv4+neon+thumb2" &&
  #make -Cbuild_mingw-w64_cross_$arch/mingw-w64-crt install-libarm64LIBRARIES CFLAGS="-target aarch64-w64-mingw32 -mtune=cortex-a57 -D__aarch64__" CCASFLAGS="-target aarch64-w64-mingw32 -mtune=cortex-a57" &&
  #make -Cbuild_mingw-w64_cross_$arch/mingw-w64-crt install-strip &&
  make -Cbuild_mingw-w64_cross_$arch install-strip &&
  #make -Cbuild_mingw-w64_cross_$arch install-strip CFLAGS="$(if [ "$arch" == "armv7" ] || [ "$arch" == "aarch64" ]; then echo "-femulated-tls"; fi)" &&
  ( ls -1d cross/$arch-w64-mingw32/lib || mv -f cross/$arch-w64-mingw32/lib* cross/$arch-w64-mingw32/lib ) &> /dev/null &&
  touch SUCCESS_$arch || break
 done &&
 if [ $(ls -1 SUCCESS_*|wc -l) -ne 4 ]; then false; fi &&
 rm -f SUCCESS_* &&
    echo OK

 # build MinGW-w64 winpthreads library
 for arch in i686 x86_64 armv7 aarch64; do
  mkdir -p build_mingw-w64_winpthreads_cross_$arch &&
  wl-showstatus configure &&
  cd build_mingw-w64_winpthreads_cross_$arch &&
  #PATH=$PWD/native/bin:$PATH $MINGWPREFIX/src/mingw-w64/mingw-w64-libraries/winpthreads/configure --prefix=$PWD/../cross/$arch-w64-mingw32 \
  $MINGWPREFIX/src/mingw-w64/mingw-w64-libraries/winpthreads/configure --prefix=$PWD/../cross/$arch-w64-mingw32 \
   --build=$BUILDPLATFORM \
   --host=$arch-w64-mingw32 \
   --with-sysroot=$PWD/../cross \
   --without-gnu-ld \
   CC="$PWD/../cross/bin/gcc_renamed_clang.exe -fuse-ld=lld -target $arch-w64-mingw32 $(if [ "$arch" == "armv7" ]; then echo "-march=armv7-a -mtune=armv7-a+vfpv4+neon+thumb2"; fi) $(if [ "$arch" == "armv7" ] || [ "$arch" == "aarch64" ]; then echo "-femulated-tls"; fi)" \
   CXX="$PWD/../cross/bin/g++_renamed_clang++.exe -fuse-ld=lld -target $arch-w64-mingw32" \
   AS="$PWD/../cross/bin/llvm-as.exe" \
   LD="$PWD/../cross/bin/lld-link.exe" \
   DLLTOOL="$PWD/../cross/bin/llvm-dlltool.exe" \
   AR="$PWD/../cross/bin/llvm-ar.exe" \
   RANLIB="$PWD/../cross/bin/llvm-ranlib.exe" \
   RC="$PWD/../cross/bin/llvm-windres.exe --target=$arch-w64-mingw32" \
   NM="$PWD/../cross/bin/llvm-nm.exe" \
   OBJDUMP="$PWD/../cross/bin/llvm-objdump.exe" \
   &&
   #CFLAGS="$(if [ "$arch" == "armv7" ] || [ "$arch" == "aarch64" ]; then echo "-femulated-tls"; fi)" \
   #CFLAGS="-I$PWD/../cross/include -I$PWD/../cross/include/$RUNPLATFORM/c++/v1 -I$PWD/../cross/include/c++/v1 $(if [ "$arch" == "aarch64" ]; then echo "-D__aarch64__"; fi)" \
   #LDFLAGS="-L$PWD/../cross/lib -Wl,-no-undefined" \
  cd .. &&
  #-rtlib=compiler-rt -unwindlib=libunwind -stdlib=libc++ 
  #-Wl,-m,$(case $arch in i686) echo "i386pe";; x86_64) echo "i386pep";; armv7) echo "thumb2pe";; aarch64) echo "arm64pe";; esac)
  # fix detection of shared libraries
  sed -i.bak2 -e "s/\(deplibs_check_method=\"\)[^\"]*/\1pass_all/" build_mingw-w64_winpthreads_cross_$arch/libtool &&
  # fix link issues in build_mingw-w64/mingw-w64-libraries/winpthreads/
  sed -i.bak -e "s?\(-o \)\([^ ]*\)\(.*\) -link \(-dll\)?-shared -s -mwindows \1.libs/libwinpthread-1.dll -Wl,--out-implib,\2 \3 \4?" build_mingw-w64_winpthreads_cross_$arch/libtool &&
  sed -i.bak -e "s?\$(AM_V_CCLD).*\$(libwinpthread_la_OBJECTS).*?& \&\& \$(AR) \$(ARFLAGS) .libs/libwinpthread.a \$(libwinpthread_la_OBJECTS:.lo=.o) \&\& cp -f .libs/libwinpthread.a .libs/libwinpthread.lib?" build_mingw-w64_winpthreads_cross_$arch/Makefile &&
  wl-showstatus build-install &&
  # build include files and make them available
  #PATH=$PWD/prebuilt/bin:$PATH make -Cbuild_mingw-w64_winpthreads_cross_$arch install-strip &&
  make -Cbuild_mingw-w64_winpthreads_cross_$arch install-strip &&
  #make -Cbuild_mingw-w64_winpthreads_cross_$arch install-strip CFLAGS="$(if [ "$arch" == "armv7" ] || [ "$arch" == "aarch64" ]; then echo "-femulated-tls"; fi)" &&
  cp -u build_mingw-w64_winpthreads_cross_$arch/fakelib/*.a cross/$arch-w64-mingw32/lib/ &&
  #mkdir -p cross/$arch-w64-mingw32 &&
  #cp -rf mingw-w64_winpthreads_$arch/* cross/$arch-w64-mingw32/ &&
  #mkdir -p cross/lib/$arch-w64-mingw32 &&
  #cp -rf mingw-w64_winpthreads_$arch/* cross/lib/$arch-w64-mingw32/ &&
  ##mkdir -p cross/$arch-w64-windows-gnu/lib &&
  ##cp -rf mingw-w64_winpthreads_$arch/lib/* cross/$arch-w64-windows-gnu/lib/ &&
  touch SUCCESS_$arch || break
 done &&
 if [ $(ls -1 SUCCESS_*|wc -l) -ne 4 ]; then false; fi &&
 rm -f SUCCESS_* &&
    echo OK

#CLANG_VERSION=$(basename "$(dirname "$(dirname "$(dirname "$("$INSTALLPREFIX/share/llvm/bin/$HOST-clang.exe" --print-libgcc-file-name -rtlib=compiler-rt)")")")")
 for arch in i686 x86_64 armv7 aarch64; do
  mkdir -p build_compiler-rt-$arch &&
  wl-showstatus configure &&
  PATH=$INSTALLPREFIX/share/llvm/bin:$PATH \
  #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm/lib/clang/$CLANG_VERSION -DCMAKE_BUILD_TYPE:STRING=Release \
  cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$PWD/compiler-rt_$arcg -DCMAKE_BUILD_TYPE:STRING=Release \
   -DBUILD_SHARED_LIBS:BOOL=ON \
   -DCOMPILER_RT_DEFAULT_TARGET_TRIPLE:STRING=$arch-w64-windows-gnu \
   -DCMAKE_SYSTEM_NAME:STRING=Windows \
   \
   -DCOMPILER_RT_DEFAULT_TARGET_ONLY=ON \
   -DCOMPILER_RT_USE_LIBCXX:BOOL=OFF \
   -DCOMPILER_RT_USE_BUILTINS_LIBRARY=OFF \
   -DCOMPILER_RT_BUILD_BUILTINS:BOOL=ON \
   -DCOMPILER_RT_BUILD_SANITIZERS:BOOL=OFF \
   -DCOMPILER_RT_BUILD_LIBFUZZER:BOOL=OFF \
   -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF \
   -DCOMPILER_RT_CAN_EXECUTE_TESTS:BOOL=OFF \
   -DSANITIZER_CXX_ABI=libc++ \
   \
   -DCMAKE_ASM_COMPILER_TARGET=$arch-windows-gnu \
   -DCMAKE_C_COMPILER_TARGET=$arch-windows-gnu \
   -DCMAKE_CXX_COMPILER_TARGET=$arch-windows-gnu \
   \
   -DCMAKE_ASM_COMPILER:FILEPATH=$PWD/cross/bin/llvm-as.exe \
   -DCMAKE_ASM_COMPILER_AR:FILEPATH=$PWD/cross/bin/llvm-ar.exe \
   -DCMAKE_ASM_COMPILER_RANLIB:FILEPATH=$PWD/cross/bin/llvm-ranlib.exe \
   -DCMAKE_C_COMPILER:FILEPATH=$PWD/cross/bin/clang.exe \
   -DCMAKE_C_COMPILER_AR:FILEPATH=$PWD/cross/bin/llvm-ar.exe \
   -DCMAKE_C_COMPILER_RANLIB:FILEPATH=$PWD/cross/bin/llvm-ranlib.exe \
   -DCMAKE_CXX_COMPILER:FILEPATH=$PWD/cross/bin/clang++.exe \
   -DCMAKE_CXX_COMPILER_AR:FILEPATH=$PWD/cross/bin/llvm-ar.exe \
   -DCMAKE_CXX_COMPILER_RANLIB:FILEPATH=$PWD/cross/bin/llvm-ranlib.exe \
   -DCMAKE_RC_COMPILER:FILEPATH=$PWD/cross/bin/llvm-windres.exe \
   -DCMAKE_AR:FILEPATH=$PWD/cross/bin/llvm-ar.exe \
   -DCMAKE_RANLIB:FILEPATH=$PWD/cross/bin/llvm-ranlib.exe \
   -DCMAKE_READELF:FILEPATH=$PWD/cross/bin/llvm-readelf.exe \
   -DCMAKE_DLLTOOL:FILEPATH=$PWD/cross/bin/llvm-dlltool.exe \
   -DCMAKE_NM:FILEPATH=$PWD/cross/bin/llvm-nm.exe \
   -DCMAKE_OBJCOPY:FILEPATH=$PWD/cross/bin/llvm-objcopy.exe \
   -DCMAKE_OBJDUMP:FILEPATH=$PWD/cross/bin/llvm-objdump.exe \
   -DCMAKE_LINKER:FILEPATH=$PWD/cross/bin/llvm-link.exe \
   -DCMAKE_STRIP:FILEPATH=$PWD/cross/bin/llvm-strip.exe \
   -DGOLD_EXECUTABLE:FILEPATH=$PWD/cross/bin/ld.lld.exe \
   -DCMAKE_ASM_FLAGS:STRING="-g0 -no-integrated-as -fuse-ld=lld" \
   -DCMAKE_C_FLAGS:STRING="-g0 -fuse-ld=lld" \
   -DCMAKE_CXX_FLAGS:STRING="-g0 -fuse-ld=lld" \
   -DCMAKE_{SHARED,MODULE,EXE}_LINKER_FLAGS:STRING="-fuse-ld=lld" \
   -Scompiler-rt -Bbuild_compiler-rt-$arch &&
   #-DLLVM_TARGETS_TO_BUILD:STRING="X86;NVPTX;AMDGPU;ARM;AArch64;WebAssembly" \
   #-DLLVM_MAIN_SRC_DIR:PATH=$PWD/llvm \
   #-DLLVM_CONFIG_PATH:PATH=$PWD/build_llvm/bin/llvm-config.exe \
   #-DCMAKE_CXX_FLAGS:STRING=" " \
   #-DPython3_EXECUTABLE:FILEPATH=$PYDIR/python.exe \
  wl-showstatus build-install &&
  PATH=$PWD/prebuilt/bin:$PATH ninja -Cbuild_compiler-rt-$arch install/strip &&
  touch SUCCESS_$arch || break
 done &&
 if [ $(ls -1 SUCCESS_*|wc -l) -ne 4 ]; then false; fi &&
 rm -f SUCCESS_* &&
    echo OK

# build MinGW-w64 libraries
 for arch in i686 x86_64 armv7 aarch64; do
  for lib in $(ls -1 $MINGWPREFIX/src/mingw-w64/mingw-w64-libraries); do
   mkdir -p build_mingw-w64_$lib\_cross_$arch &&
   wl-showstatus configure &&
   cd build_mingw-w64_$lib\_cross_$arch &&
   $MINGWPREFIX/src/mingw-w64/mingw-w64-libraries/$lib/configure --prefix=$PWD/../cross/$arch-w64-mingw32 \
    --build=$BUILDPLATFORM \
    --host=$arch-w64-mingw32 \
    --with-sysroot=$PWD/../cross \
    --without-gnu-ld \
    CC="$PWD/../cross/bin/gcc_renamed_clang.exe -fuse-ld=lld -target $arch-w64-mingw32 $(if [ "$arch" == "armv7" ]; then echo "-march=armv7-a -mtune=armv7-a+vfpv4+neon+thumb2"; fi)" \
    CXX="$PWD/../cross/bin/g++_renamed_clang++.exe -fuse-ld=lld -target $arch-w64-mingw32" \
    AS="$PWD/../cross/bin/llvm-as.exe" \
    LD="$PWD/../cross/bin/lld-link.exe" \
    DLLTOOL="$PWD/../cross/bin/llvm-dlltool.exe" \
    AR="$PWD/../cross/bin/llvm-ar.exe" \
    RANLIB="$PWD/../cross/bin/llvm-ranlib.exe" \
    RC="$PWD/../cross/bin/llvm-windres.exe --target=$arch-w64-mingw32" \
    NM="$PWD/../cross/bin/llvm-nm.exe" \
    OBJDUMP="$PWD/../cross/bin/llvm-objdump.exe" \
    &&
    #CFLAGS="-I$PWD/../cross/include -I$PWD/../cross/include/$RUNPLATFORM/c++/v1 -I$PWD/../cross/include/c++/v1 $(if [ "$arch" == "aarch64" ]; then echo "-D__aarch64__"; fi)" \
    #LDFLAGS="-L$PWD/../cross/lib -Wl,-no-undefined" \
   cd .. &&
   #-rtlib=compiler-rt -unwindlib=libunwind -stdlib=libc++ 
   #-Wl,-m,$(case $arch in i686) echo "i386pe";; x86_64) echo "i386pep";; armv7) echo "thumb2pe";; aarch64) echo "arm64pe";; esac)
   # fix detection of shared libraries
   sed -i.bak2 -e "s/\(deplibs_check_method=\"\)[^\"]*/\1pass_all/" build_mingw-w64_$lib\_cross_$arch/libtool &&
   ## fix link issues
   #sed -i.bak -e "s?\(-o \)\([^ ]*\)\(.*\) -link \(-dll\)?-shared -s -mwindows \1.libs/libwinpthread-1.dll -Wl,--out-implib,\2 \3 \4?" build_mingw-w64_$lib\_cross_$arch/libtool &&
   #sed -i.bak -e "s?\$(AM_V_CCLD).*\$(libwinpthread_la_OBJECTS).*?& \&\& \$(AR) \$(ARFLAGS) .libs/libwinpthread.a \$(libwinpthread_la_OBJECTS:.lo=.o) \&\& cp -f .libs/libwinpthread.a .libs/libwinpthread.lib?" build_mingw-w64_$lib\_cross_$arch/Makefile &&
   wl-showstatus build-install &&
   # build include files and make them available
   make -Cbuild_mingw-w64_$lib\_cross_$arch install-strip &&
   #mkdir -p cross/$arch-w64-mingw32 &&
   #cp -rf mingw-w64_winpthreads_$arch/* cross/$arch-w64-mingw32/ &&
   #mkdir -p cross/lib/$arch-w64-mingw32 &&
   #cp -rf mingw-w64_winpthreads_$arch/* cross/lib/$arch-w64-mingw32/ &&
   ##mkdir -p cross/$arch-w64-windows-gnu/lib &&
   ##cp -rf mingw-w64_winpthreads_$arch/lib/* cross/$arch-w64-windows-gnu/lib/ &&
   touch SUCCESS_$arch || break 2
  done
 done &&
 if [ $(ls -1 SUCCESS_*|wc -l) -ne 4 ]; then false; fi &&
 rm -f SUCCESS_* &&
    echo OK




 mkdir -p build_final &&
 wl-showstatus configure &&
 #-DLLVM_ENABLE_RUNTIMES:STRING="compiler-rt;libcxx;libcxxabi" \
 #-DLLVM_ENABLE_RUNTIMES:STRING="compiler-rt;libunwind" \
 #-DLIBUNWIND_ENABLE_SHARED:BOOL=ON \
 #-DLIBUNWIND_ENABLE_STATIC:BOOL=ON \
 #-DLIBUNWIND_USE_COMPILER_RT:BOOL=ON \
 ####ld.lld: error: too many exported symbols (max 65535)
 PATH=$PWD/cross/bin:$PWD/prebuilt/bin:$PATH cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$PWD/final -DCMAKE_BUILD_TYPE:STRING=Release  \
  -DCMAKE_CROSSCOMPILING:BOOL=ON \
  -DCMAKE_SYSTEM_NAME:STRING=Windows \
  -DLLVM_ENABLE_PROJECTS="clang;lld" \
  -DLLVM_ENABLE_RUNTIMES:STRING="compiler-rt" \
  -DLLVM_TARGETS_TO_BUILD="X86;ARM;AArch64" \
  -DLLVM_BUILD_LLVM_DYLIB:BOOL=OFF \
  -DBUILD_SHARED_LIBS:BOOL=ON \
  -DLLVM_BUILD_TESTS:BOOL=OFF \
  -DLLVM_INCLUDE_TESTS:BOOL=OFF \
  -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF \
  -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF \
  -DLLVM_INCLUDE_BENCHMARKS:BOOL=OFF \
  -DLLVM_INCLUDE_DOCS:BOOL=OFF \
  -DLLVM_ENABLE_ASSERTIONS:BOOL=ON \
  -DLLVM_ENABLE_EH:BOOL=ON \
  -DLLVM_ENABLE_RTTI:BOOL=ON \
  -DLLVM_TOOL_BUGPOINT_PASSES_BUILD:BOOL=OFF \
  \
  -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF \
  \
  -DCOMPILER_RT_DEFAULT_TARGET_ONLY:BOOL=OFF \
  -DCOMPILER_RT_BUILD_XRAY:BOOL=OFF \
  -DCOMPILER_RT_USE_BUILTINS_LIBRARY=ON \
  -DCOMPILER_RT_BUILD_BUILTINS:BOOL=ON \
  -DCOMPILER_RT_BUILD_LIBFUZZER:BOOL=OFF \
  -DCOMPILER_RT_BUILD_MEMPROF:BOOL=OFF \
  -DCOMPILER_RT_BUILD_PROFILE:BOOL=OFF \
  -DCOMPILER_RT_BUILD_SANITIZERS:BOOL=OFF \
  -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF \
  \
  -DLIBUNWIND_ENABLE_SHARED:BOOL=ON \
  -DLIBUNWIND_ENABLE_STATIC:BOOL=ON \
  -DLIBUNWIND_USE_COMPILER_RT:BOOL=ON \
  \
  -DLIBCXX_ENABLE_SHARED:BOOL=ON \
  -DLIBCXX_ENABLE_STATIC:BOOL=ON \
  -DLIBCXX_USE_COMPILER_RT:BOOL=ON \
  -DLIBCXX_HAS_WIN32_THREAD_API:BOOL=ON \
  -DLIBCXX_HAS_PTHREAD_API:BOOL=OFF \
  -DLIBCXX_ENABLE_EXPERIMENTAL_LIBRARY:BOOL=OFF \
  -DLIBCXX_CXX_ABI=libcxxabi \
  -DLIBCXX_CXX_ABI_INCLUDE_PATHS=$PWD/libcxxabi/include \
  -DLIBCXX_CXX_ABI_LIBRARY_PATH:PATH=$PWD/build_libcxxabi/lib \
  -DLIBCXX_LIBDIR_SUFFIX="" \
  -DLIBCXX_INCLUDE_TESTS:BOOL=OFF \
  -DLIBCXX_ENABLE_ABI_LINKER_SCRIPT:BOOL=OFF \
  \
  -DLIBCXXABI_ENABLE_SHARED:BOOL=ON \
  -DLIBCXXABI_ENABLE_STATIC:BOOL=ON \
  -DLIBCXXABI_TARGET_TRIPLE:STRING=$RUNPLATFORM \
  -DLIBCXXABI_USE_COMPILER_RT:BOOL=ON \
  -DLIBCXXABI_LIBCXX_INCLUDES:PATH=$PWD/build_native/include/c++/v1 \
  -DLIBCXXABI_LIBDIR_SUFFIX="" \
  -DLIBCXXABI_INCLUDE_TESTS:BOOL=OFF \
  \
  -DCMAKE_SYSTEM_PROGRAM_PATH=$PWD/cross/bin \
  -DCMAKE_FIND_ROOT_PATH="$PWD/cross" \
  -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER \
  -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY \
  -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY \
  \
  -DLLVM_TABLEGEN:STRING=$PWD/cross/bin/llvm-tblgen.exe \
  -DCLANG_TABLEGEN:STRING=$PWD/cross/bin/clang-tblgen.exe \
  -DLLVM_CONFIG_PATH:STRING=$PWD/cross/bin/llvm-config.exe \
  \
  -DCMAKE_ASM_COMPILER:FILEPATH=$PWD/cross/bin/llvm-as.exe \
  -DCMAKE_ASM_COMPILER_AR:FILEPATH=$PWD/cross/bin/llvm-ar.exe \
  -DCMAKE_ASM_COMPILER_RANLIB:FILEPATH=$PWD/cross/bin/llvm-ranlib.exe \
  -DCMAKE_C_COMPILER:FILEPATH=$PWD/cross/bin/clang.exe \
  -DCMAKE_C_COMPILER_AR:FILEPATH=$PWD/cross/bin/llvm-ar.exe \
  -DCMAKE_C_COMPILER_RANLIB:FILEPATH=$PWD/cross/bin/llvm-ranlib.exe \
  -DCMAKE_CXX_COMPILER:FILEPATH=$PWD/cross/bin/clang++.exe \
  -DCMAKE_CXX_COMPILER_AR:FILEPATH=$PWD/cross/bin/llvm-ar.exe \
  -DCMAKE_CXX_COMPILER_RANLIB:FILEPATH=$PWD/cross/bin/llvm-ranlib.exe \
  -DCMAKE_RC_COMPILER:FILEPATH=$PWD/cross/bin/llvm-windres.exe \
  -DCMAKE_AR:FILEPATH=$PWD/cross/bin/llvm-ar.exe \
  -DCMAKE_RANLIB:FILEPATH=$PWD/cross/bin/llvm-ranlib.exe \
  -DCMAKE_LINKER:FILEPATH=$PWD/prebuilt/bin/ld.lld.exe \
  -DGOLD_EXECUTABLE:FILEPATH=$PWD/prebuilt/bin/ld.lld.exe \
  -DCMAKE_READELF:FILEPATH=$PWD/cross/bin/llvm-readelf.exe \
  -DCMAKE_DLLTOOL:FILEPATH=$PWD/cross/bin/llvm-dlltool.exe \
  -DCMAKE_NM:FILEPATH=$PWD/cross/bin/llvm-nm.exe \
  -DCMAKE_OBJCOPY:FILEPATH=$PWD/cross/bin/llvm-objcopy.exe \
  -DCMAKE_OBJDUMP:FILEPATH=$PWD/cross/bin/llvm-objdump.exe \
  -DCMAKE_STRIP:FILEPATH=$PWD/cross/bin/llvm-strip.exe \
  -DCMAKE_ASM_FLAGS:STRING="-g0 -no-integrated-as -fuse-ld=lld" \
  -DCMAKE_C_FLAGS:STRING="-g0 -fuse-ld=lld" \
  -DCMAKE_CXX_FLAGS:STRING="-g0 -fuse-ld=lld" \
  -DCMAKE_{SHARED,MODULE,EXE}_LINKER_FLAGS:STRING="-fuse-ld=lld" \
  -Sllvm -Bbuild_final &&
 #-DCMAKE_CXX_FLAGS:STRING="-g0 -fuse-ld=lld -I$PWD/prebuilt/include/c++/v1" \
 wl-showstatus build-install &&
 PATH=$PWD/cross/bin:$PWD/prebuilt/bin:$PATH ninja -Cbuild_final install/strip &&
 #PATH=$PWD/prebuilt/bin:$PATH CPLUS_INCLUDE_PATH=$PWD/prebuilt/include/c++/v1${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} ninja -Cbuild_final install/strip &&
 cp -f build_final/bin/clang-tblgen.exe final/bin/ &&
 cp -f final/bin/clang.exe final/bin/gcc_renamed_clang.exe &&
 cp -f final/bin/clang++.exe final/bin/g++_renamed_clang++.exe &&
 #cp -u prebuilt/bin/{libc++.dll,libunwind.dll} final/bin/ &&
    echo OK


####TO DO: LIBCXX_STANDALONE_BUILD









































#mkdir -p build_stage1 &&
# wl-showstatus configure &&
# #-DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;compiler-rt;lld;lldb;libclc;pstl" \
# #;libc;libcxx;libcxxabi
# #-DCLANG_DEFAULT_RTLIB:STRING=libgcc \
# #-DCLANG_DEFAULT_CXX_STDLIB:STRING=libstdc++ \
# #-DCLANG_DEFAULT_OPENMP_RUNTIME:STRING=libgomp \
# #-DCLANG_DEFAULT_UNWINDLIB:STRING=libgcc \
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$PWD/stage1 -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
#  -DBUILD_SHARED_LIBS:BOOL=ON \
#  -DLLVM_BUILD_STATIC=OFF \
#  -DLIBCLANG_BUILD_STATIC:BOOL=OFF \
#  -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF \
#  -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF \
#  -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM \
#  -DLLVM_TARGETS_TO_BUILD:STRING="X86;NVPTX;AMDGPU;ARM;AArch64" \
#  -DCLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
#  -DLLD_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
#  -DFLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
#  -DLLVM_ENABLE_PROJECTS:STRING="clang;compiler-rt;lld" \
#  -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=OFF \
#  -DCLANG_BUILD_TOOLS:BOOL=ON \
#  -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF \
#  -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON \
#  -DLLDB_ENABLE_CURSES:BOOL=ON \
#  -DLLDB_ENABLE_LIBXML2:BOOL=ON \
#  -DLLDB_ENABLE_LUA:BOOL=ON \
#  -DLLDB_ENABLE_LZMA:BOOL=ON \
#  -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) \
#  -DLLVM_ENABLE_RTTI:BOOL=ON \
#  -DLLVM_ENABLE_MODULES:BOOL=OFF \
#  -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF \
#  -DLLVM_ENABLE_FFI:BOOL=ON \
#  -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON \
#  -DLLVM_ENABLE_LIBXML2:BOOL=ON \
#  -DLLVM_ENABLE_THREADS:BOOL=ON \
#  -DLLVM_ENABLE_UNWIND_TABLES:BOOL=ON \
#  -DLLVM_ENABLE_Z3_SOLVER:BOOL=ON \
#  -DLLVM_INCLUDE_TOOLS:BOOL=ON \
#  -DLLVM_INCLUDE_UTILS:BOOL=ON \
#  -DLLVM_INSTALL_UTILS:BOOL=ON \
#  -DLLVM_ENABLE_TERMINFO:BOOL=OFF \
#  -DLLVM_ENABLE_LIBEDIT:BOOL=OFF \
#  -DLLDB_ENABLE_LIBEDIT:BOOL=OFF \
#  -DLLDB_ENABLE_CURSES:BOOL=ON \
#  -DLLDB_ENABLE_LIBXML2:BOOL=ON \
#  -DLLDB_ENABLE_LZMA:BOOL=ON \
#  -DLLDB_ENABLE_PYTHON:BOOL=ON \
#  -DPython3_FIND_REGISTRY:BOOL=NEVER \
#  -DPython3_EXECUTABLE:PATH=$MINGWPREFIX/share/python/bin/python3.exe \
#  -DLLVM_ENABLE_SPHINX=OFF \
#  -DLLVM_INCLUDE_DOCS:BOOL=OFF \
#  -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF \
#  -DLLVM_INCLUDE_TESTS:BOOL=OFF \
#  -DLLVM_TOOL_LLVM_C_TEST_BUILD:BOOL=OFF \
#  -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF \
#  -DLLVM_BUILD_BENCHMARKS:BOOL=OFF \
#  -DLLVM_BUILD_TESTS:BOOL=OFF \
#  -DLLVM_TOOL_OPENMP_BUILD:BOOL=ON \
#  -DLLVM_TOOL_PARALLEL_LIBS_BUILD:BOOL=ON \
#  -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF \
#  -DCLANG_INCLUDE_TESTS:BOOL=OFF \
#  -DBUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF \
#  -DCLANG_PLUGIN_SUPPORT:BOOL=ON \
#  -DCLANG_ENABLE_CLANGD:BOOL=ON \
#  -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF \
#  -DCLANG_TOOL_APINOTES_TEST_BUILD:BOOL=OFF \
#  -DCLANG_TOOL_ARCMT_TEST_BUILD:BOOL=OFF \
#  -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD:BOOL=OFF \
#  -DCLANG_TOOL_C_ARCMT_TEST_BUILD:BOOL=OFF \
#  -DCLANG_TOOL_C_INDEX_TEST_BUILD:BOOL=OFF \
#  -DCLANG_INCLUDE_DOCS:BOOL=OFF \
#  -DCLANG_BUILD_EXAMPLES:BOOL=OFF \
#  -DLLD_BUILD_TOOLS:BOOL=ON \
#  -DLLD_DEFAULT_LD_LLD_IS_MINGW:BOOL=ON \
#  -Sllvm -Bbuild_stage1 &&
# wl-showstatus build-install &&
# ninja -Cbuild_stage1 install/strip &&
# strip build_stage1/bin/clang-tblgen.exe &&
# cp -f build_stage1/bin/clang-tblgen.exe stage1/bin/ &&
# cp -f stage1/bin/clang.exe stage1/bin/gcc_renamed_clang.exe &&
# cp -f stage1/bin/clang++.exe stage1/bin/g++_renamed_clang++.exe &&

mkdir -p build_stage0 &&
 wl-showstatus configure &&
 #-DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;compiler-rt;lld;lldb;libclc;pstl" \
 #;libc;libcxx;libcxxabi
 #-DCLANG_DEFAULT_RTLIB:STRING=libgcc \
 #-DCLANG_DEFAULT_CXX_STDLIB:STRING=libstdc++ \
 #-DCLANG_DEFAULT_OPENMP_RUNTIME:STRING=libgomp \
 #-DCLANG_DEFAULT_UNWINDLIB:STRING=libgcc \
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$PWD/stage0 -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
  -DBUILD_SHARED_LIBS:BOOL=ON \
  -DLLVM_BUILD_STATIC=OFF \
  -DLIBCLANG_BUILD_STATIC:BOOL=OFF \
  -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF \
  -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF \
  -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM \
  -DLLVM_TARGETS_TO_BUILD:STRING="X86" \
  -DLLVM_ENABLE_PROJECTS:STRING="clang;lld" \
  -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=OFF \
  -DLLVM_ENABLE_THREADS:BOOL=OFF \
  -DCLANG_BUILD_TOOLS:BOOL=ON \
  -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF \
  -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON \
  -DLLDB_ENABLE_CURSES:BOOL=ON \
  -DLLDB_ENABLE_LIBXML2:BOOL=ON \
  -DLLDB_ENABLE_LUA:BOOL=ON \
  -DLLDB_ENABLE_LZMA:BOOL=ON \
  -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) \
  -DLLVM_ENABLE_RTTI:BOOL=ON \
  -DLLVM_ENABLE_MODULES:BOOL=OFF \
  -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF \
  -DLLVM_ENABLE_FFI:BOOL=ON \
  -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON \
  -DLLVM_ENABLE_LIBXML2:BOOL=ON \
  -DLLVM_ENABLE_UNWIND_TABLES:BOOL=ON \
  -DLLVM_ENABLE_Z3_SOLVER:BOOL=ON \
  -DLLVM_INCLUDE_TOOLS:BOOL=ON \
  -DLLVM_INCLUDE_UTILS:BOOL=ON \
  -DLLVM_INSTALL_UTILS:BOOL=ON \
  -DLLVM_ENABLE_TERMINFO:BOOL=OFF \
  -DLLVM_ENABLE_LIBEDIT:BOOL=OFF \
  -DLLDB_ENABLE_LIBEDIT:BOOL=OFF \
  -DLLDB_ENABLE_CURSES:BOOL=ON \
  -DLLDB_ENABLE_LIBXML2:BOOL=ON \
  -DLLDB_ENABLE_LZMA:BOOL=ON \
  -DLLDB_ENABLE_PYTHON:BOOL=ON \
  -DPython3_FIND_REGISTRY:BOOL=NEVER \
  -DPython3_EXECUTABLE:PATH=$MINGWPREFIX/share/python/bin/python3.exe \
  -DLLVM_ENABLE_SPHINX=OFF \
  -DLLVM_INCLUDE_DOCS:BOOL=OFF \
  -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF \
  -DLLVM_INCLUDE_TESTS:BOOL=OFF \
  -DLLVM_TOOL_LLVM_C_TEST_BUILD:BOOL=OFF \
  -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF \
  -DLLVM_BUILD_BENCHMARKS:BOOL=OFF \
  -DLLVM_BUILD_TESTS:BOOL=OFF \
  -DLLVM_TOOL_OPENMP_BUILD:BOOL=ON \
  -DLLVM_TOOL_PARALLEL_LIBS_BUILD:BOOL=ON \
  -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF \
  -DCLANG_INCLUDE_TESTS:BOOL=OFF \
  -DBUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF \
  -DCLANG_PLUGIN_SUPPORT:BOOL=ON \
  -DCLANG_ENABLE_CLANGD:BOOL=ON \
  -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF \
  -DCLANG_TOOL_APINOTES_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_ARCMT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_C_ARCMT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_C_INDEX_TEST_BUILD:BOOL=OFF \
  -DCLANG_INCLUDE_DOCS:BOOL=OFF \
  -DCLANG_BUILD_EXAMPLES:BOOL=OFF \
  -DLLD_BUILD_TOOLS:BOOL=ON \
  -DLLD_DEFAULT_LD_LLD_IS_MINGW:BOOL=ON \
  -Sllvm -Bbuild_stage0 &&
 wl-showstatus build-install &&
 ninja -Cbuild_stage0 install/strip &&
 build_stage0/bin/llvm-strip.exe build_stage0/bin/clang-tblgen.exe &&
 cp -f build_stage0/bin/clang-tblgen.exe stage0/bin/ &&
 #cp -f stage0/bin/clang.exe stage0/bin/gcc_renamed_clang.exe &&
 #cp -f stage0/bin/clang++.exe stage0/bin/g++_renamed_clang++.exe &&

 # build MinGW-w64
 arch=$(echo $BUILDPLATFORM|sed -e "s/-.*$//") &&
 mkdir -p build_mingw-w64_stage0 &&
 wl-showstatus configure &&
 cd build_mingw-w64_stage0 &&
 $MINGWPREFIX/src/mingw-w64/configure --prefix=$PWD/../stage0\
  --build=$BUILDPLATFORM \
  --host=$RUNPLATFORM \
  --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrt"; else echo "msvcrt-os"; fi) \
  --with-libraries \
  --without-tools \
  --enable-sdk=all \
  --enable-secure-api \
  --enable-wildcard \
  --$(if [ "$arch" == "i686" ]; then echo "enable"; else echo "disable"; fi)-lib32 \
  --$(if [ "$arch" == "x86_64" ]; then echo "enable"; else echo "disable"; fi)-lib64 \
  --$(if [ "$arch" == "armv7" ]; then echo "enable"; else echo "disable"; fi)-libarm32 \
  --$(if [ "$arch" == "aarch64" ]; then echo "enable"; else echo "disable"; fi)-libarm64 \
  --with-default-win32-winnt=0x0600 \
  --enable-idl \
  --without-genlib \
  --without-gnu-ld \
  --with-sysroot=$PWD/../stage0 \
  CC="$PWD/../stage0/bin/gcc_renamed_clang.exe -fuse-ld=lld -target $arch-w64-mingw32" \
  CXX="$PWD/../stage0/bin/g++_renamed_clang++.exe -fuse-ld=lld -target $arch-w64-mingw32" \
  AS="$PWD/../stage0/bin/llvm-as.exe -target $arch-w64-mingw32" \
  LD="$PWD/../stage0/bin/lld-link.exe" \
  DLLTOOL="$PWD/../stage0/bin/llvm-dlltool.exe" \
  AR="$PWD/../stage0/bin/llvm-ar.exe" \
  RANLIB="$PWD/../stage0/bin/llvm-ranlib.exe" \
  RC="$PWD/../stage0/bin/llvm-windres.exe" \
  NM="$PWD/../stage0/bin/llvm-nm.exe" \
  OBJDUMP="$PWD/../stage0/bin/llvm-objdump.exe" \
  &&
 cd .. &&
 # fix llvm-dlltool arguments
 sed -i.bak -e "s/--as\(-flags\)*=[^ ]*//" build_mingw-w64_stage0/mingw-w64-crt/Makefile &&
 # fix link issues in build_mingw-w64/mingw-w64-libraries/winpthreads/
 sed -i.bak -e "s?\(-o \)\([^ ]*\)\(.*\) -link \(-dll\)?-shared -s -mwindows \1.libs/libwinpthread-1.dll -Wl,--out-implib,\2 \3 \4?" build_mingw-w64_stage0/mingw-w64-libraries/winpthreads/libtool &&
 sed -i.bak -e "s?\$(AM_V_CCLD).*\$(libwinpthread_la_OBJECTS).*?& \&\& \$(AR) \$(ARFLAGS) .libs/libwinpthread.a \$(libwinpthread_la_OBJECTS:.lo=.o) \&\& cp -f .libs/libwinpthread.a .libs/libwinpthread.lib?" build_mingw-w64_stage0/mingw-w64-libraries/winpthreads/Makefile &&
 #wl-showstatus build &&
 #( make -Cbuild_mingw-w64_stage0 || make -Cbuild_mingw-w64_stage0 CC="$PWD/stage0/bin/clang.exe -fuse-ld=lld -fno-integrated-as" ) &&
 wl-showstatus build-install &&
 #make -Cbuild_mingw-w64_stage0/mingw-w64-headers install-strip &&
 #make -Cbuild_mingw-w64_stage0/mingw-w64-crt install-libarm32LIBRARIES CFLAGS="-target armv7-w64-mingw32 -march=armv7-a -mtune=armv7-a+vfpv4+neon+thumb2 -D__arm__" CCASFLAGS="-target armv7-w64-mingw32 -march=armv7-a -mtune=armv7-a+vfpv4+neon+thumb2" &&
 #make -Cbuild_mingw-w64_stage0/mingw-w64-crt install-libarm64LIBRARIES CFLAGS="-target aarch64-w64-mingw32 -mtune=cortex-a57 -D__aarch64__" CCASFLAGS="-target aarch64-w64-mingw32 -mtune=cortex-a57" &&
 #make -Cbuild_mingw-w64_stage0/mingw-w64-crt install-strip &&
 make -Cbuild_mingw-w64_stage0 install-strip &&
    echo OK



mkdir -p build_stage1 &&
 wl-showstatus configure &&
 #-DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;compiler-rt;lld;lldb;libclc;pstl" \
 #;libc;libcxx;libcxxabi
 #-DCLANG_DEFAULT_RTLIB:STRING=libgcc \
 #-DCLANG_DEFAULT_CXX_STDLIB:STRING=libstdc++ \
 #-DCLANG_DEFAULT_OPENMP_RUNTIME:STRING=libgomp \
 #-DCLANG_DEFAULT_UNWINDLIB:STRING=libgcc \
 #-DLLVM_ENABLE_LIBCXX:BOOL=ON \
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$PWD/stage1 -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
  -DBUILD_SHARED_LIBS:BOOL=ON \
  -DLLVM_BUILD_STATIC=OFF \
  -DLIBCLANG_BUILD_STATIC:BOOL=OFF \
  -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF \
  -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF \
  -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM \
  -DLLVM_TARGETS_TO_BUILD:STRING="X86;NVPTX;AMDGPU;ARM;AArch64" \
  -DLLVM_ENABLE_PROJECTS:STRING="clang;compiler-rt;lld" \
  -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=OFF \
  -DCLANG_BUILD_TOOLS:BOOL=ON \
  -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF \
  -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON \
  -DLLDB_ENABLE_CURSES:BOOL=ON \
  -DLLDB_ENABLE_LIBXML2:BOOL=ON \
  -DLLDB_ENABLE_LUA:BOOL=ON \
  -DLLDB_ENABLE_LZMA:BOOL=ON \
  -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) \
  -DLLVM_ENABLE_RTTI:BOOL=ON \
  -DLLVM_ENABLE_MODULES:BOOL=OFF \
  -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF \
  -DLLVM_ENABLE_FFI:BOOL=ON \
  -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON \
  -DLLVM_ENABLE_LIBXML2:BOOL=ON \
  -DLLVM_ENABLE_THREADS:BOOL=ON \
  -DLLVM_ENABLE_UNWIND_TABLES:BOOL=ON \
  -DLLVM_ENABLE_Z3_SOLVER:BOOL=ON \
  -DLLVM_INCLUDE_TOOLS:BOOL=ON \
  -DLLVM_INCLUDE_UTILS:BOOL=ON \
  -DLLVM_INSTALL_UTILS:BOOL=ON \
  -DLLVM_ENABLE_TERMINFO:BOOL=OFF \
  -DLLVM_ENABLE_LIBEDIT:BOOL=OFF \
  -DLLDB_ENABLE_LIBEDIT:BOOL=OFF \
  -DLLDB_ENABLE_CURSES:BOOL=ON \
  -DLLDB_ENABLE_LIBXML2:BOOL=ON \
  -DLLDB_ENABLE_LZMA:BOOL=ON \
  -DLLDB_ENABLE_PYTHON:BOOL=ON \
  -DPython3_FIND_REGISTRY:BOOL=NEVER \
  -DPython3_EXECUTABLE:PATH=$MINGWPREFIX/share/python/bin/python3.exe \
  -DLLVM_ENABLE_SPHINX=OFF \
  -DLLVM_INCLUDE_DOCS:BOOL=OFF \
  -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF \
  -DLLVM_INCLUDE_TESTS:BOOL=OFF \
  -DLLVM_TOOL_LLVM_C_TEST_BUILD:BOOL=OFF \
  -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF \
  -DLLVM_BUILD_BENCHMARKS:BOOL=OFF \
  -DLLVM_BUILD_TESTS:BOOL=OFF \
  -DLLVM_TOOL_OPENMP_BUILD:BOOL=ON \
  -DLLVM_TOOL_PARALLEL_LIBS_BUILD:BOOL=ON \
  -DCOMPILER_RT_EXCLUDE_ATOMIC_BUILTIN:BOOL=OFF \
  -DCOMPILER_RT_BUILD_STANDALONE_LIBATOMIC:BOOL=ON \
  -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF \
  -DCLANG_INCLUDE_TESTS:BOOL=OFF \
  -DBUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF \
  -DCLANG_PLUGIN_SUPPORT:BOOL=ON \
  -DCLANG_ENABLE_CLANGD:BOOL=ON \
  -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF \
  -DCLANG_TOOL_APINOTES_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_ARCMT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_C_ARCMT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_C_INDEX_TEST_BUILD:BOOL=OFF \
  -DCLANG_INCLUDE_DOCS:BOOL=OFF \
  -DCLANG_BUILD_EXAMPLES:BOOL=OFF \
  -DLLD_BUILD_TOOLS:BOOL=ON \
  -DLLD_DEFAULT_LD_LLD_IS_MINGW:BOOL=ON \
  -DLLVM_ENABLE_THREADS:BOOL=ON \
  -DLIBCXX_HAS_WIN32_THREAD_API:BOOL=ON \
  -DLIBCXX_HAS_PTHREAD_API:BOOL=OFF \
  \
  -DLLVM_TABLEGEN:STRING=$PWD/stage0/bin/llvm-tblgen.exe \
  -DCLANG_TABLEGEN:STRING=$PWD/stage0/bin/clang-tblgen.exe \
  -DLLVM_CONFIG:STRING=$PWD/stage0/bin/llvm-config.exe \
  \
  -DCMAKE_ASM_COMPILER:FILEPATH=$PWD/stage0/bin/clang.exe \
  -DCMAKE_ASM_COMPILER_AR:FILEPATH=$PWD/stage0/bin/llvm-ar.exe \
  -DCMAKE_ASM_COMPILER_RANLIB:FILEPATH=$PWD/stage0/bin/llvm-ranlib.exe \
  -DCMAKE_C_COMPILER:FILEPATH=$PWD/stage0/bin/clang.exe \
  -DCMAKE_C_COMPILER_AR:FILEPATH=$PWD/stage0/bin/llvm-ar.exe \
  -DCMAKE_C_COMPILER_RANLIB:FILEPATH=$PWD/stage0/bin/llvm-ranlib.exe \
  -DCMAKE_CXX_COMPILER:FILEPATH=$PWD/stage0/bin/clang++.exe \
  -DCMAKE_CXX_COMPILER_AR:FILEPATH=$PWD/stage0/bin/llvm-ar.exe \
  -DCMAKE_CXX_COMPILER_RANLIB:FILEPATH=$PWD/stage0/bin/llvm-ranlib.exe \
  -DCMAKE_RC_COMPILER:FILEPATH=$PWD/stage0/bin/llvm-windres.exe \
  -DCMAKE_AR:FILEPATH=$PWD/stage0/bin/llvm-ar.exe \
  -DCMAKE_RANLIB:FILEPATH=$PWD/stage0/bin/llvm-ranlib.exe \
  -DCMAKE_READELF:FILEPATH=$PWD/stage0/bin/llvm-readelf.exe \
  -DCMAKE_DLLTOOL:FILEPATH=$PWD/stage0/bin/llvm-dlltool.exe \
  -DCMAKE_NM:FILEPATH=$PWD/stage0/bin/llvm-nm.exe \
  -DCMAKE_OBJCOPY:FILEPATH=$PWD/stage0/bin/llvm-objcopy.exe \
  -DCMAKE_OBJDUMP:FILEPATH=$PWD/stage0/bin/llvm-objdump.exe \
  -DCMAKE_LINKER:FILEPATH=$PWD/stage0/bin/llvm-link.exe \
  -DCMAKE_STRIP:FILEPATH=$PWD/stage0/bin/llvm-strip.exe \
  -DGOLD_EXECUTABLE:FILEPATH=$PWD/stage0/bin/ld.lld.exe \
  -DCMAKE_ASM_FLAGS:STRING="-g0 -no-integrated-as -fuse-ld=lld" \
  -DCMAKE_C_FLAGS:STRING="-g0 -fuse-ld=lld" \
  -DCMAKE_CXX_FLAGS:STRING="-g0 -fuse-ld=lld -femulated-tls" \
  -DCMAKE_{SHARED,MODULE,EXE}_LINKER_FLAGS:STRING="-lpthread" \
  -Sllvm -Bbuild_stage1 &&
 sed -i.bak -e "s?/IGNORE:[0-9]*??" build_stage1/build.ninja &&
 wl-showstatus build-install &&
 ninja -Cbuild_stage1 install/strip &&
 strip build_stage1/bin/clang-tblgen.exe &&
 cp -f build_stage1/bin/clang-tblgen.exe stage1/bin/ &&
 cp -f stage1/bin/clang.exe stage1/bin/gcc_renamed_clang.exe &&
 cp -f stage1/bin/clang++.exe stage1/bin/g++_renamed_clang++.exe &&

 # build MinGW-w64 headers
 mkdir -p build_mingw-w64-headers &&
 wl-showstatus configure &&
 cd build_mingw-w64-headers &&
 PATH=$INSTALLPREFIX/share/llvm/bin:$PATH \
 $MINGWPREFIX/src/mingw-w64/mingw-w64-headers/configure --prefix=$PWD/../stage1 --build=$BUILDPLATFORM --host=$RUNPLATFORM \
  --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrt"; else echo "msvcrt-os"; fi) \
  --enable-sdk=all \
  --enable-idl &&
 cd .. &&
 wl-showstatus build &&
 make -Cbuild_mingw-w64-headers install-strip &&

 # build MinGW-w64 crt libraries
 for arch in i686 x86_64 armv7 aarch64; do
  mkdir -p build_mingw-w64_crt_$arch &&
  wl-showstatus configure &&
  cd build_mingw-w64_crt_$arch &&
  $MINGWPREFIX/src/mingw-w64/mingw-w64-crt/configure --prefix=$PWD/../mingw-w64_crt_$arch \
   --build=$BUILDPLATFORM \
   --host=$arch-w64-mingw32 \
   --$(if [ "$arch" == "i686" ]; then echo "enable"; else echo "disable"; fi)-lib32 \
   --$(if [ "$arch" == "x86_64" ]; then echo "enable"; else echo "disable"; fi)-lib64 \
   --$(if [ "$arch" == "armv7" ]; then echo "enable"; else echo "disable"; fi)-libarm32 \
   --$(if [ "$arch" == "aarch64" ]; then echo "enable"; else echo "disable"; fi)-libarm64 \
   --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrt"; else echo "msvcrt-os"; fi) \
   --enable-wildcard \
   --disable-delay-import-libs \
   --disable-experimental \
   --without-genlib \
   CC="$PWD/../stage1/bin/gcc_renamed_clang.exe -target $arch-w64-mingw32 -fuse-ld=lld" \
   CXX="$PWD/../stage1/bin/g++_renamed_clang++.exe -target $arch-w64-mingw32 -fuse-ld=lld" \
   AS="$PWD/../stage1/bin/llvm-as.exe" \
   LD="$PWD/../stage1/bin/lld-link.exe" \
   DLLTOOL="$PWD/../stage1/bin/llvm-dlltool.exe" \
   AR="$PWD/../stage1/bin/llvm-ar.exe" \
   RANLIB="$PWD/../stage1/bin/llvm-ranlib.exe" \
   RC="$PWD/../stage1/bin/llvm-windres.exe --target=$arch-w64-mingw32" \
   NM="$PWD/../stage1/bin/llvm-nm.exe" \
   OBJDUMP="$PWD/../stage1/bin/llvm-objdump.exe" \
   STRIP="$PWD/../stage1/bin/llvm-strip.exe" \
   CFLAGS="-I$PWD/mingw-w64-$arch/include" \
   CCASFLAGS="-I$PWD/mingw-w64-$arch/include" \
   &&
   #CFLAGS="-I$PWD/../stage1/include -I$PWD/../stage1/include/$RUNPLATFORM/c++/v1 -I$PWD/../stage1/include/c++/v1 $(if [ "$arch" == "aarch64" ]; then echo "-D__aarch64__"; fi)" \
   #LDFLAGS="-L$PWD/../stage1/lib -Wl,-no-undefined" \
  cd .. &&
  #-rtlib=compiler-rt -unwindlib=libunwind -stdlib=libc++ 
  wl-showstatus build-install &&
  # build include files and make them available
  make -Cbuild_mingw-w64_crt_$arch install-strip &&
  mkdir -p stage1/$arch-w64-mingw32 &&
  cp -rf mingw-w64_crt_$arch/* stage1/$arch-w64-mingw32/ &&
  #mkdir -p stage1/lib/$arch-w64-mingw32 &&
  #cp -rf mingw-w64_crt_$arch/lib/* stage1/lib/$arch-w64-mingw32/ &&
  #mkdir -p stage1/$arch-w64-windows-gnu/lib &&
  #cp -rf mingw-w64_crt_$arch/lib/* stage1/$arch-w64-windows-gnu/lib/ &&
  touch SUCCESS_$arch || break
 done &&
 if [ $(ls -1 SUCCESS_*|wc -l) -ne 4 ]; then false; fi &&
 rm -f SUCCESS_* &&

 # build native compiler-rt
 mkdir -p build_compiler-rt_native &&
 #mkdir -p build_compiler-rt_native/dummylibs &&
 ##cp -f $MINGWDIR/lib/gcc/$RUNPLATFORM/*/libgcc*.a $MINGWDIR/lib/libgcc*.a build_compiler-rt_native/dummylibs/ &&
 #ar cr build_compiler-rt_native/dummylibs/libgcc.a
 #ar cr build_compiler-rt_native/dummylibs/libgcc_s.a
 #ar cr build_compiler-rt_native/dummylibs/libgcc_eh.a
 wl-showstatus configure &&
 #-DCOMPILER_RT_DEFAULT_TARGET_ONLY:BOOL=ON \
 #-DCOMPILER_RT_DEFAULT_TARGET_TRIPLE:STRING=$arch-w64-windows-gnu \
 #-DSANITIZER_CXX_ABI=libc++ \
 #-DCMAKE_ASM_COMPILER_TARGET=$arch-windows-gnu \
 #-DCMAKE_C_COMPILER_TARGET=$arch-windows-gnu \
 #-DCMAKE_CXX_COMPILER_TARGET=$arch-windows-gnu \
 #PATH=$INSTALLPREFIX/share/llvm/bin:$PATH \
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$PWD/stage1 -DCMAKE_BUILD_TYPE:STRING=Release \
  -DBUILD_SHARED_LIBS:BOOL=ON \
  -DCMAKE_SYSTEM_NAME:STRING=Windows \
  \
  -DCOMPILER_RT_DEFAULT_TARGET_TRIPLE:STRING=$(echo $RUNPLATFORM|sed -e "s/^\([^-]*\).*$/\1/")-w64-windows-gnu \
  -DCOMPILER_RT_USE_LIBCXX:BOOL=OFF \
  -DCOMPILER_RT_USE_BUILTINS_LIBRARY=OFF \
  -DCOMPILER_RT_BUILD_BUILTINS:BOOL=ON \
  -DCOMPILER_RT_BUILD_SANITIZERS:BOOL=OFF \
  -DCOMPILER_RT_BUILD_LIBFUZZER:BOOL=OFF \
  -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF \
  -DCOMPILER_RT_CAN_EXECUTE_TESTS:BOOL=OFF \
  \
  -DCMAKE_ASM_COMPILER:FILEPATH=$PWD/stage1/bin/clang.exe \
  -DCMAKE_ASM_COMPILER_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
  -DCMAKE_ASM_COMPILER_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
  -DCMAKE_C_COMPILER:FILEPATH=$PWD/stage1/bin/clang.exe \
  -DCMAKE_C_COMPILER_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
  -DCMAKE_C_COMPILER_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
  -DCMAKE_CXX_COMPILER:FILEPATH=$PWD/stage1/bin/clang++.exe \
  -DCMAKE_CXX_COMPILER_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
  -DCMAKE_CXX_COMPILER_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
  -DCMAKE_RC_COMPILER:FILEPATH=$PWD/stage1/bin/llvm-windres.exe \
  -DCMAKE_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
  -DCMAKE_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
  -DCMAKE_READELF:FILEPATH=$PWD/stage1/bin/llvm-readelf.exe \
  -DCMAKE_DLLTOOL:FILEPATH=$PWD/stage1/bin/llvm-dlltool.exe \
  -DCMAKE_NM:FILEPATH=$PWD/stage1/bin/llvm-nm.exe \
  -DCMAKE_OBJCOPY:FILEPATH=$PWD/stage1/bin/llvm-objcopy.exe \
  -DCMAKE_OBJDUMP:FILEPATH=$PWD/stage1/bin/llvm-objdump.exe \
  -DCMAKE_LINKER:FILEPATH=$PWD/stage1/bin/llvm-link.exe \
  -DCMAKE_STRIP:FILEPATH=$PWD/stage1/bin/llvm-strip.exe \
  -DGOLD_EXECUTABLE:FILEPATH=$PWD/stage1/bin/ld.lld.exe \
  -DCMAKE_ASM_FLAGS:STRING="-g0 -no-integrated-as -fuse-ld=lld" \
  -DCMAKE_C_FLAGS:STRING="-g0 -fuse-ld=lld" \
  -DCMAKE_CXX_FLAGS:STRING="-g0 -fuse-ld=lld" \
  -DCMAKE_STATIC_LINKER_FLAGS:STRING="" \
  -DCMAKE_{SHARED,MODULE,EXE}_LINKER_FLAGS:STRING="-fuse-ld=lld --rtlib=compiler-rt" \
  -DPython3_FIND_REGISTRY:BOOL=NEVER \
  -DPython3_EXECUTABLE:FILEPATH=$PYDIR/python.exe \
  -Scompiler-rt -Bbuild_compiler-rt_native &&
 sed -i.bak -e "s?/IGNORE:[0-9]*??" build_compiler-rt_native/build.ninja &&
 wl-showstatus build-install &&
 ninja -Cbuild_compiler-rt_native install/strip &&
    echo OK

# # build MinGW-w64 libraries
# for arch in i686 x86_64 armv7 aarch64; do
#  mkdir -p build_mingw-w64_stage1_$arch &&
#  wl-showstatus configure &&
#  cd build_mingw-w64_stage1_$arch &&
#  $MINGWPREFIX/src/mingw-w64/configure --prefix=$PWD/../stage1/$arch-w64-mingw32 \
#   --build=$BUILDPLATFORM \
#   --host=$RUNPLATFORM \
#   --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrt"; else echo "msvcrt-os"; fi) \
#   --without-libraries \
#   --without-tools \
#   --enable-sdk=all \
#   --enable-secure-api \
#   --enable-wildcard \
#   --$(if [ "$arch" == "i686" ]; then echo "enable"; else echo "disable"; fi)-lib32 \
#   --$(if [ "$arch" == "x86_64" ]; then echo "enable"; else echo "disable"; fi)-lib64 \
#   --$(if [ "$arch" == "armv7" ]; then echo "enable"; else echo "disable"; fi)-libarm32 \
#   --$(if [ "$arch" == "aarch64" ]; then echo "enable"; else echo "disable"; fi)-libarm64 \
#   --with-default-win32-winnt=0x0600 \
#   --enable-idl \
#   --without-genlib \
#   --without-gnu-ld \
#   --with-sysroot=$PWD/../stage1 \
#   CC="$PWD/../stage1/bin/gcc_renamed_clang.exe -fuse-ld=lld -target $arch-w64-mingw32 $(if [ "$arch" == "armv7" ] || [ "$arch" == "aarch64" ]; then echo "-femulated-tls"; fi)" \
#   CXX="$PWD/../stage1/bin/g++_renamed_clang++.exe -fuse-ld=lld -target $arch-w64-mingw32" \
#   AS="$PWD/../stage1/bin/llvm-as.exe -target $arch-w64-mingw32" \
#   LD="$PWD/../stage1/bin/lld-link.exe" \
#   DLLTOOL="$PWD/../stage1/bin/llvm-dlltool.exe" \
#   AR="$PWD/../stage1/bin/llvm-ar.exe" \
#   RANLIB="$PWD/../stage1/bin/llvm-ranlib.exe" \
#   RC="$PWD/../stage1/bin/llvm-windres.exe" \
#   NM="$PWD/../stage1/bin/llvm-nm.exe" \
#   OBJDUMP="$PWD/../stage1/bin/llvm-objdump.exe" \
#   &&
#  cd .. &&
#  # fix llvm-dlltool arguments
#  sed -i.bak -e "s/--as\(-flags\)*=[^ ]*//" build_mingw-w64_stage1_$arch/mingw-w64-crt/Makefile &&
#  ## fix link issues in build_mingw-w64/mingw-w64-libraries/winpthreads/
#  #sed -i.bak -e "s?\(-o \)\([^ ]*\)\(.*\) -link \(-dll\)?-shared -s -mwindows \1.libs/libwinpthread-1.dll -Wl,--out-implib,\2 \3 \4?" build_mingw-w64_stage1_$arch/mingw-w64-libraries/winpthreads/libtool &&
#  #sed -i.bak -e "s?\$(AM_V_CCLD).*\$(libwinpthread_la_OBJECTS).*?& \&\& \$(AR) \$(ARFLAGS) .libs/libwinpthread.a \$(libwinpthread_la_OBJECTS:.lo=.o) \&\& cp -f .libs/libwinpthread.a .libs/libwinpthread.lib?" build_mingw-w64_stage1_$arch/mingw-w64-libraries/winpthreads/Makefile &&
#  #wl-showstatus build &&
#  #( make -Cbuild_mingw-w64_stage1_$arch || make -Cbuild_mingw-w64_stage1_$arch CC="$PWD/stage1/bin/clang.exe -fuse-ld=lld -fno-integrated-as" ) &&
#  wl-showstatus build-install &&
#  #make -Cbuild_mingw-w64_stage1_$arch/mingw-w64-headers install-strip &&
#  #make -Cbuild_mingw-w64_stage1_$arch/mingw-w64-crt install-libarm32LIBRARIES CFLAGS="-target armv7-w64-mingw32 -march=armv7-a -mtune=armv7-a+vfpv4+neon+thumb2 -D__arm__" CCASFLAGS="-target armv7-w64-mingw32 -march=armv7-a -mtune=armv7-a+vfpv4+neon+thumb2" &&
#  #make -Cbuild_mingw-w64_stage1_$arch/mingw-w64-crt install-libarm64LIBRARIES CFLAGS="-target aarch64-w64-mingw32 -mtune=cortex-a57 -D__aarch64__" CCASFLAGS="-target aarch64-w64-mingw32 -mtune=cortex-a57" &&
#  #make -Cbuild_mingw-w64_stage1_$arch/mingw-w64-crt install-strip &&
#  make -Cbuild_mingw-w64_stage1_$arch install-strip &&
#  #make -Cbuild_mingw-w64_stage1_$arch install-strip CFLAGS="$(if [ "$arch" == "armv7" ] || [ "$arch" == "aarch64" ]; then echo "-femulated-tls"; fi)" &&
#  ( ls -1d stage1/$arch-w64-mingw32/lib || mv -f stage1/$arch-w64-mingw32/lib* stage1/$arch-w64-mingw32/lib ) &> /dev/null &&
#  touch SUCCESS_$arch || break
# done &&
# if [ $(ls -1 SUCCESS_*|wc -l) -ne 4 ]; then false; fi &&
# rm -f SUCCESS_* &&
#    echo OK

 # build MinGW-w64 winpthreads library
 #for arch in i686 x86_64 armv7 aarch64; do
 for arch in i686 x86_64 aarch64; do
  mkdir -p build_mingw-w64_winpthreads_stage1_$arch &&
  wl-showstatus configure &&
  cd build_mingw-w64_winpthreads_stage1_$arch &&
  #PATH=$PWD/native/bin:$PATH $MINGWPREFIX/src/mingw-w64/mingw-w64-libraries/winpthreads/configure --prefix=$PWD/../stage1/$arch-w64-mingw32 \
  $MINGWPREFIX/src/mingw-w64/mingw-w64-libraries/winpthreads/configure --prefix=$PWD/../stage1/$arch-w64-mingw32 \
   --build=$BUILDPLATFORM \
   --host=$arch-w64-mingw32 \
   --with-sysroot=$PWD/../stage1 \
   --without-gnu-ld \
   CC="$PWD/../stage1/bin/gcc_renamed_clang.exe -fuse-ld=lld -target $arch-w64-mingw32 $(if [ "$arch" == "armv7" ]; then echo "-march=armv7-a -mtune=armv7-a+vfpv4+neon+thumb2"; fi) $(if [ "$arch" == "armv7" ] || [ "$arch" == "aarch64" ]; then echo "-femulated-tls"; fi)" \
   CXX="$PWD/../stage1/bin/g++_renamed_clang++.exe -fuse-ld=lld -target $arch-w64-mingw32" \
   AS="$PWD/../stage1/bin/llvm-as.exe" \
   LD="$PWD/../stage1/bin/lld-link.exe" \
   DLLTOOL="$PWD/../stage1/bin/llvm-dlltool.exe" \
   AR="$PWD/../stage1/bin/llvm-ar.exe" \
   RANLIB="$PWD/../stage1/bin/llvm-ranlib.exe" \
   RC="$PWD/../stage1/bin/llvm-windres.exe --target=$arch-w64-mingw32" \
   NM="$PWD/../stage1/bin/llvm-nm.exe" \
   OBJDUMP="$PWD/../stage1/bin/llvm-objdump.exe" \
   STRIP="$PWD/../stage1/bin/llvm-strip.exe" \
   CFLAGS="-D_FORTIFY_SOURCE=2" \
   LDFLAGS="$(if [ "$arch" == "armv7" ] || [ "$arch" == "aarch64" ]; then echo "-lmsvcrt -lmingwex"; fi)" \
   &&
   #CFLAGS="$(if [ "$arch" == "armv7" ] || [ "$arch" == "aarch64" ]; then echo "-femulated-tls"; fi)" \
   #CFLAGS="-I$PWD/../stage1/include -I$PWD/../stage1/include/$RUNPLATFORM/c++/v1 -I$PWD/../stage1/include/c++/v1 $(if [ "$arch" == "aarch64" ]; then echo "-D__aarch64__"; fi)" \
   #LDFLAGS="-L$PWD/../stage1/lib -Wl,-no-undefined" \
   #LDFLAGS="-Lstage1/$arch-w64-mingw32/lib $(if [ "$arch" == "armv7" ] || [ "$arch" == "aarch64" ]; then echo "-lmsvcrt -lmingwex"; fi)" \
  cd .. &&
  #-rtlib=compiler-rt -unwindlib=libunwind -stdlib=libc++ 
  #-Wl,-m,$(case $arch in i686) echo "i386pe";; x86_64) echo "i386pep";; armv7) echo "thumb2pe";; aarch64) echo "arm64pe";; esac)
  # fix detection of shared libraries
  sed -i.bak2 -e "s/\(deplibs_check_method=\"\)[^\"]*/\1pass_all/" build_mingw-w64_winpthreads_stage1_$arch/libtool &&
  # fix link issues in build_mingw-w64/mingw-w64-libraries/winpthreads/
  sed -i.bak -e "s?\(-o \)\([^ ]*\)\(.*\) -link \(-dll\)?-shared -s -mwindows \1.libs/libwinpthread-1.dll -Wl,--out-implib,\2 \3 \4?" build_mingw-w64_winpthreads_stage1_$arch/libtool &&
  sed -i.bak -e "s?\$(AM_V_CCLD).*\$(libwinpthread_la_OBJECTS).*?& \&\& \$(AR) \$(ARFLAGS) .libs/libwinpthread.a \$(libwinpthread_la_OBJECTS:.lo=.o) \&\& cp -f .libs/libwinpthread.a .libs/libwinpthread.lib?" build_mingw-w64_winpthreads_stage1_$arch/Makefile &&
  wl-showstatus build-install &&
  # build include files and make them available
  #PATH=$PWD/prebuilt/bin:$PATH make -Cbuild_mingw-w64_winpthreads_stage1_$arch install-strip &&
  make -Cbuild_mingw-w64_winpthreads_stage1_$arch install-strip &&
  #make -Cbuild_mingw-w64_winpthreads_stage1_$arch install-strip CFLAGS="$(if [ "$arch" == "armv7" ] || [ "$arch" == "aarch64" ]; then echo "-femulated-tls"; fi)" &&
  cp -u build_mingw-w64_winpthreads_stage1_$arch/fakelib/*.a stage1/$arch-w64-mingw32/lib/ &&
  #mkdir -p stage1/$arch-w64-mingw32 &&
  #cp -rf mingw-w64_winpthreads_$arch/* stage1/$arch-w64-mingw32/ &&
  #mkdir -p stage1/lib/$arch-w64-mingw32 &&
  #cp -rf mingw-w64_winpthreads_$arch/* stage1/lib/$arch-w64-mingw32/ &&
  ##mkdir -p stage1/$arch-w64-windows-gnu/lib &&
  ##cp -rf mingw-w64_winpthreads_$arch/lib/* stage1/$arch-w64-windows-gnu/lib/ &&
  touch SUCCESS_$arch || break
 done &&
 #if [ $(ls -1 SUCCESS_*|wc -l) -ne 4 ]; then false; fi &&
 if [ $(ls -1 SUCCESS_*|wc -l) -ne 3 ]; then false; fi &&
 rm -f SUCCESS_* &&
    echo OK

# # build MinGW-w64 for Intel
# mkdir -p build_mingw-w64_intel &&
# wl-showstatus configure &&
# cd build_mingw-w64_intel &&
# $MINGWPREFIX/src/mingw-w64/configure --prefix=$PWD/../stage1_mingw-w64_intel \
#  --build=$BUILDPLATFORM \
#  --host=$RUNPLATFORM \
#  --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrt"; else echo "msvcrt-os"; fi) \
#  --without-libraries \
#  --with-tools=all \
#  --enable-sdk=all \
#  --enable-secure-api \
#  --enable-wildcard \
#  --enable-lib32 \
#  --enable-lib64 \
#  --disable-libarm32 \
#  --disable-libarm64 \
#  --with-default-win32-winnt=0x0600 \
#  --enable-idl \
#  --without-genlib \
#  --without-gnu-ld \
#  --with-sysroot=$PWD/../stage1 \
#  LIBX8632SUFFIXDIR=libx8632 \
#  LIBX8664SUFFIXDIR=libx8664 \
#  LIBARM32SUFFIXDIR=libarm32 \
#  LIBARM64SUFFIXDIR=libarm64 \
#  CC="$PWD/../stage1/bin/gcc_renamed_clang.exe -fuse-ld=lld" \
#  CXX="$PWD/../stage1/bin/g++_renamed_clang++.exe -fuse-ld=lld" \
#  AS="$PWD/../stage1/bin/llvm-as.exe" \
#  LD="$PWD/../stage1/bin/lld-link.exe" \
#  DLLTOOL="$PWD/../stage1/bin/llvm-dlltool.exe" \
#  AR="$PWD/../stage1/bin/llvm-ar.exe" \
#  RANLIB="$PWD/../stage1/bin/llvm-ranlib.exe" \
#  RC="$PWD/../stage1/bin/llvm-windres.exe" \
#  NM="$PWD/../stage1/bin/llvm-nm.exe" \
#  OBJDUMP="$PWD/../stage1/bin/llvm-objdump.exe" \
#  &&
#  #--with-libraries=winpthreads,winstorecompat 
#  #--libdir=$PWD/../stage1_mingw-w64_intel/$(case $(echo $RUNPLATFORM|sed -e "s/^\([^-]*\).*$/\1/") in i686) echo "lib32";; x86_64) echo "lib64";; armv7) echo "libarm32";; aarch64) echo "libarm64";; esac) \
#  #CFLAGS="-I$PWD/../stage1/lib/clang/$(echo $VERSION|sed -e "s/\([0-9]*\.[0-9]*\.[0-9]*\).*$/\1/")/include -I$PWD/../stage1_mingw-w64_intel/include" \
#  #CFLAGS="-I$PWD/../stage1_mingw-w64_intel/include -D_FORTIFY_SOURCE=0 -fno-stack-protector" \
#  #CFLAGS="-I$PWD/../stage1/include -I$PWD/../stage1/include/$BUILDPLATFORM/c++/v1 -I$PWD/../stage1/include/c++/v1" \
#  #LDFLAGS="-L$PWD/../stage1/lib -Wl,-no-undefined" \
# cd .. &&
# ## fix link issues in build_mingw-w64_intel/mingw-w64-libraries/winpthreads/
# #sed -i.bak -e "s?\(-o \)\([^ ]*\)\(.*\) -link \(-dll\)?-shared -s -mwindows \1.libs/libwinpthread-1.dll -Wl,--out-implib,\2 \3 \4?" build_mingw-w64_intel/mingw-w64-libraries/winpthreads/libtool &&
# #sed -i.bak -e "s?\$(AM_V_CCLD).*\$(libwinpthread_la_OBJECTS).*?& \&\& \$(AR) \$(ARFLAGS) .libs/libwinpthread.a \$(libwinpthread_la_OBJECTS:.lo=.o) \&\& cp -f .libs/libwinpthread.a .libs/libwinpthread.lib?" build_mingw-w64_intel/mingw-w64-libraries/winpthreads/Makefile &&
# #wl-showstatus build &&
# #( make -Cbuild_mingw-w64_intel || make -Cbuild_mingw-w64_intel CC="$PWD/stage1/bin/clang.exe -fuse-ld=lld -fno-integrated-as" ) &&
# wl-showstatus build-install &&
# #make -Cbuild_mingw-w64_intel/mingw-w64-headers install-strip &&
# #make -Cbuild_mingw-w64_intel/mingw-w64-crt install-libarm32LIBRARIES CFLAGS="-target armv7-w64-mingw32 -march=armv7-a -mtune=armv7-a+vfpv4+neon+thumb2 -D__arm__" CCASFLAGS="-target armv7-w64-mingw32 -march=armv7-a -mtune=armv7-a+vfpv4+neon+thumb2" &&
# #make -Cbuild_mingw-w64_intel/mingw-w64-crt install-libarm64LIBRARIES CFLAGS="-target aarch64-w64-mingw32 -mtune=cortex-a57 -D__aarch64__" CCASFLAGS="-target aarch64-w64-mingw32 -mtune=cortex-a57" &&
# #make -Cbuild_mingw-w64_intel/mingw-w64-crt install-strip &&
# make -Cbuild_mingw-w64_intel install-strip &&
# ## rename libwinpthread.lib to libwinpthread.a
# #for F in stage1_mingw-w64_intel/lib*/libwinpthread.lib; do
# # mv -f $F $(echo $F|sed -e "s/\.lib$/.a/")
# #done &&
# # copy to target folders
# for D in stage1_mingw-w64_intel/lib*; do
#  case $(basename $D) in
#   lib)
#    arch=$(echo $RUNPLATFORM|sed -e "s/^\([^-]*\).*$/\1/")
#    ;;
#   lib32)
#    arch=i686
#    ;;
#   lib64)
#    arch=x86_64
#    ;;
#   libarm32)
#    arch=armv7
#    ;;
#   libarm64)
#    arch=aarch64
#    ;;
#   *)
#    echo ERROR: unknown architecture for $D
#    ;;
#  esac &&
#  mkdir -p stage1/$arch-w64-mingw32/lib &&
#  cp -rf $D/* stage1/$arch-w64-mingw32/lib
#  #mkdir -p stage1/$arch-w64-windows-gnu/lib &&
#  #cp -rf $D/* stage1/$arch-w64-windows-gnu/lib
# done &&
#    echo OK
#
# # build MinGW-w64 for ARM
# mkdir -p build_mingw-w64_arm &&
# wl-showstatus configure &&
# cd build_mingw-w64_arm &&
# $MINGWPREFIX/src/mingw-w64/configure --prefix=$PWD/../stage1_mingw-w64_arm \
#  --build=$BUILDPLATFORM \
#  --host=$RUNPLATFORM \
#  --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrt"; else echo "msvcrt-os"; fi) \
#  --without-headers \
#  --without-libraries \
#  --without-tools \
#  --enable-sdk=all \
#  --enable-secure-api \
#  --enable-wildcard \
#  --disable-lib32 \
#  --disable-lib64 \
#  --enable-libarm32 \
#  --enable-libarm64 \
#  --with-default-win32-winnt=0x0501 \
#  --enable-idl \
#  --without-genlib \
#  --without-gnu-ld \
#  --with-sysroot=$PWD/../stage1 \
#  LIBX8632SUFFIXDIR=libx8632 \
#  LIBX8664SUFFIXDIR=libx8664 \
#  LIBARM32SUFFIXDIR=libarm32 \
#  LIBARM64SUFFIXDIR=libarm64 \
#  CC="$PWD/../stage1/bin/gcc_renamed_clang.exe -fuse-ld=lld" \
#  CXX="$PWD/../stage1/bin/g++_renamed_clang++.exe -fuse-ld=lld" \
#  AS="$PWD/../stage1/bin/llvm-as.exe" \
#  LD="$PWD/../stage1/bin/lld-link.exe" \
#  DLLTOOL="$PWD/../stage1/bin/llvm-dlltool.exe" \
#  AR="$PWD/../stage1/bin/llvm-ar.exe" \
#  RANLIB="$PWD/../stage1/bin/llvm-ranlib.exe" \
#  RC="$PWD/../stage1/bin/llvm-windres.exe" \
#  NM="$PWD/../stage1/bin/llvm-nm.exe" \
#  OBJDUMP="$PWD/../stage1/bin/llvm-objdump.exe" \
#  &&
#  #--with-libraries=winpthreads,winstorecompat 
#  #--libdir=$PWD/../stage1_mingw-w64/$(case $(echo $RUNPLATFORM|sed -e "s/^\([^-]*\).*$/\1/") in i686) echo "lib32";; x86_64) echo "lib64";; armv7) echo "libarm32";; aarch64) echo "libarm64";; esac) \
#  #CFLAGS="-I$PWD/../stage1/lib/clang/$(echo $VERSION|sed -e "s/\([0-9]*\.[0-9]*\.[0-9]*\).*$/\1/")/include -I$PWD/../stage1_mingw-w64/include" \
#  #CFLAGS="-I$PWD/../stage1_mingw-w64/include -D_FORTIFY_SOURCE=0 -fno-stack-protector" \
#  #CFLAGS="-I$PWD/../stage1/include -I$PWD/../stage1/include/$BUILDPLATFORM/c++/v1 -I$PWD/../stage1/include/c++/v1" \
#  #LDFLAGS="-L$PWD/../stage1/lib -Wl,-no-undefined" \
# cd .. &&
# ## fix link issues in build_mingw-w64/mingw-w64-libraries/winpthreads/
# #sed -i.bak -e "s?\(-o \)\([^ ]*\)\(.*\) -link \(-dll\)?-shared -s -mwindows \1.libs/libwinpthread-1.dll -Wl,--out-implib,\2 \3 \4?" build_mingw-w64/mingw-w64-libraries/winpthreads/libtool &&
# #sed -i.bak -e "s?\$(AM_V_CCLD).*\$(libwinpthread_la_OBJECTS).*?& \&\& \$(AR) \$(ARFLAGS) .libs/libwinpthread.a \$(libwinpthread_la_OBJECTS:.lo=.o) \&\& cp -f .libs/libwinpthread.a .libs/libwinpthread.lib?" build_mingw-w64/mingw-w64-libraries/winpthreads/Makefile &&
# #wl-showstatus build &&
# #( make -Cbuild_mingw-w64 || make -Cbuild_mingw-w64 CC="$PWD/stage1/bin/clang.exe -fuse-ld=lld -fno-integrated-as" ) &&
# wl-showstatus build-install &&
# #make -Cbuild_mingw-w64_arm/mingw-w64-headers install-strip &&
# make -Cbuild_mingw-w64_arm/mingw-w64-crt install-libarm32LIBRARIES CFLAGS="-target armv7-w64-mingw32 -march=armv7-a -mtune=armv7-a+vfpv4+neon+thumb2 -D__arm__" CCASFLAGS="-target armv7-w64-mingw32 -march=armv7-a -mtune=armv7-a+vfpv4+neon+thumb2" &&
# make -Cbuild_mingw-w64_arm/mingw-w64-crt install-libarm64LIBRARIES CFLAGS="-target aarch64-w64-mingw32 -mtune=cortex-a57 -D__aarch64__" CCASFLAGS="-target aarch64-w64-mingw32 -mtune=cortex-a57" &&
# #make -Cbuild_mingw-w64_arm/mingw-w64-crt install-strip &&
# make -Cbuild_mingw-w64_arm install-strip &&
# ## rename libwinpthread.lib to libwinpthread.a
# #for F in stage1_mingw-w64/lib*/libwinpthread.lib; do
# # mv -f $F $(echo $F|sed -e "s/\.lib$/.a/")
# #done &&
# # copy to target folders
# for D in stage1_mingw-w64_arm/lib*; do
#  case $(basename $D) in
#   lib)
#    arch=$(echo $RUNPLATFORM|sed -e "s/^\([^-]*\).*$/\1/")
#    ;;
#   lib32)
#    arch=i686
#    ;;
#   lib64)
#    arch=x86_64
#    ;;
#   libarm32)
#    arch=armv7
#    ;;
#   libarm64)
#    arch=aarch64
#    ;;
#   *)
#    echo ERROR: unknown architecture for $D
#    ;;
#  esac &&
#  mkdir -p stage1/$arch-w64-mingw32/lib &&
#  cp -rf $D/* stage1/$arch-w64-mingw32/lib
#  #mkdir -p stage1/$arch-w64-windows-gnu/lib &&
#  #cp -rf $D/* stage1/$arch-w64-windows-gnu/lib
# done &&
#    echo OK



file stage1/*/lib/dllcrt2.o


####See also: https://groups.google.com/g/llvm-dev/c/JFllGYGBpNQ
####See also: https://developer.arm.com/documentation/102563/0100/LLVM-support-for-Arm-based-devices

####Error: ld.lld: error: undefined symbol: std::__once_call
####Fix: -DCMAKE_CXX_FLAGS:STRING="-femulated-tls"





































# fix compiler-rt/cmake/config-ix.cmake (version >= 13.0.0)
patch -ulbf compiler-rt/cmake/config-ix.cmake << EOF
@@ -196,3 +196,3 @@
     NOT CMAKE_SIZEOF_VOID_P EQUAL 8)
-  message(FATAL_ERROR "Please use architecture with 4 or 8 byte pointers.")
+  message(WATNING "Please use architecture with 4 or 8 byte pointers.")
 endif()
EOF

# WORKING: build static compiler and linker
mkdir -p build_stage1 &&
 # build main LLVM suite
 wl-showstatus configure &&
 #libunwind;openmp;parallel-libs;polly;pstl;flang
 #;polly;mlir;pstl
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$PWD/stage1 -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
  -DBUILD_SHARED_LIBS:BOOL=OFF \
  -DLLVM_BUILD_LLVM_DYLIB:BOOL=OFF \
  -DLLVM_ENABLE_PROJECTS:STRING="clang;lld" \
  -DLLVM_ENABLE_RUNTIMES:STRING="compiler-rt;libcxx;libcxxabi" \
  -DLLVM_TARGETS_TO_BUILD:STRING="X86;ARM;AArch64" \
  -DLLVM_RUNTIME_TARGETS=default \
  -DLLVM_HOST_TRIPLE:STRING=$(echo $BUILDPLATFORM|sed -e "s/-.*$//")-w64-mingw32 \
  -DLLVM_DEFAULT_TARGET_TRIPLE=$(echo $BUILDPLATFORM|sed -e "s/-.*$//")-w64-mingw32 \
  -DLLVM_BUILD_STATIC=OFF \
  -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF \
  -DLLVM_CCACHE_BUILD:BOOL=OFF \
  -DLLVM_ENABLE_MODULES:BOOL=OFF \
  -DLLVM_ENABLE_PLUGINS:BOOL=ON \
  -DLLVM_ENABLE_THREADS:BOOL=ON \
  -DLLVM_ENABLE_UNWIND_TABLES:BOOL=ON \
  -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF \
  -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON \
  -DLLVM_ENABLE_LTO:STRING=OFF \
  -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) \
  -DLLVM_ENABLE_RTTI:BOOL=ON \
  -DLLVM_ENABLE_TERMINFO:BOOL=OFF \
  -DLLVM_ENABLE_Z3_SOLVER:BOOL=ON \
  -DLLVM_Z3_INSTALL_DIR:STRING=$MINGWPREFIX \
  -DLLVM_ENABLE_FFI:BOOL=OFF \
  -DLLVM_ENABLE_LIBXML2:BOOL=ON \
  -DLLVM_ENABLE_PIC:BOOL=OFF \
  -DLLVM_USE_RELATIVE_PATHS_IN_DEBUG_INFO:BOOL=ON \
  -DLLVM_USE_RELATIVE_PATHS_IN_FILES:BOOL=ON \
  -DLLVM_INSTALL_BINUTILS_SYMLINKS:BOOL=OFF \
  -DLLVM_INSTALL_CCTOOLS_SYMLINKS:BOOL=OFF \
  -DLLVM_ENABLE_DOXYGEN:BOOL=OFF -DDOXYGEN_DOT_EXECUTABLE:FILEPATH= -DDOXYGEN_EXECUTABLE:FILEPATH= \
  -DLLVM_ENABLE_SPHINX=OFF \
  -DLLVM_INCLUDE_DOCS:BOOL=OFF \
  -DLLVM_BUILD_EXAMPLES:BOOL=OFF \
  -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF \
  -DLLVM_INCLUDE_BENCHMARKS:BOOL=OFF \
  -DLLVM_INCLUDE_TESTS:BOOL=OFF \
  -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF \
  \
  -DCOMPILER_RT_DEFAULT_TARGET_ONLY=ON \
  -DCOMPILER_RT_USE_BUILTINS_LIBRARY=OFF \
  -DCOMPILER_RT_BUILD_BUILTINS:BOOL=OFF \
  -DCOMPILER_RT_BUILD_SANITIZERS:BOOL=OFF \
  -DCOMPILER_RT_BUILD_LIBFUZZER:BOOL=OFF \
  -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF \
  -DCOMPILER_RT_CAN_EXECUTE_TESTS:BOOL=OFF \
  -DSANITIZER_CXX_ABI=libc++ \
  \
  -DLIBCXX_ENABLE_SHARED:BOOL=Off \
  -DLIBCXX_ENABLE_STATIC:BOOL=ON \
  -DLIBCXX_USE_COMPILER_RT:BOOL=ON \
  -DLIBCXX_HAS_WIN32_THREAD_API:BOOL=ON \
  -DLIBCXX_HAS_PTHREAD_API:BOOL=OFF \
  -DLIBCXX_ENABLE_EXPERIMENTAL_LIBRARY:BOOL=OFF \
  -DLIBCXX_CXX_ABI=libcxxabi \
  -DLIBCXX_CXX_ABI_INCLUDE_PATHS=$PWD/libcxxabi/include \
  -DLIBCXX_CXX_ABI_LIBRARY_PATH:PATH=$PWD/build_libcxxabi/lib \
  -DLIBCXX_LIBDIR_SUFFIX="" \
  -DLIBCXX_INCLUDE_TESTS:BOOL=OFF \
  -DLIBCXX_ENABLE_ABI_LINKER_SCRIPT:BOOL=OFF \
  \
  -DLIBCXXABI_ENABLE_SHARED:BOOL=Off \
  -DLIBCXXABI_ENABLE_STATIC:BOOL=ON \
  -DLIBCXXABI_USE_COMPILER_RT:BOOL=ON \
  -DLIBCXXABI_LIBCXX_INCLUDES:PATH=$PWD/build_libcxx/include/c++/v1 \
  -DLIBCXXABI_LIBDIR_SUFFIX="" \
  -DLIBCXXABI_ENABLE_EXCEPTIONS:BOOL=ON \
  -DLIBCXXABI_ENABLE_ASSERTIONS:BOOL=OFF \
  \
  -DLIBUNWIND_ENABLE_SHARED:BOOL=Off \
  -DLIBUNWIND_ENABLE_STATIC:BOOL=ON \
  -DLIBUNWIND_USE_COMPILER_RT:BOOL=ON \
  \
  -DLIBCLANG_BUILD_STATIC:BOOL=OFF \
  -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF \
  -DCLANG_PLUGIN_SUPPORT:BOOL=ON \
  -DCLANG_ENABLE_CLANGD:BOOL=ON \
  -DCLANG_DEFAULT_RTLIB:STRING=libgcc \
  -DCLANG_DEFAULT_CXX_STDLIB:STRING=libstdc++ \
  -DCLANG_DEFAULT_UNWINDLIB:STRING=none \
  -DCLANG_DEFAULT_OPENMP_RUNTIME:STRING=libgomp \
  -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF \
  -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON \
  -DCLANG_TOOL_APINOTES_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_ARCMT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_C_ARCMT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_C_INDEX_TEST_BUILD:BOOL=OFF \
  -DCLANG_INCLUDE_DOCS:BOOL=OFF \
  -DCLANG_BUILD_EXAMPLES:BOOL=OFF \
  -DCLANG_INCLUDE_TESTS:BOOL=OFF \
  \
  -DLLDB_TOOL_LLDB_SERVER_BUILD:BOOL=ON \
  -DLLDB_TOOL_LLDB_VSCODE_BUILD:BOOL=ON \
  -DLLDB_ENABLE_LIBEDIT:BOOL=OFF \
  -DLLDB_ENABLE_CURSES:BOOL=ON \
  -DLLDB_ENABLE_LIBXML2:BOOL=ON \
  -DLLDB_ENABLE_LZMA:BOOL=ON \
  -DLLDB_ENABLE_PYTHON:BOOL=ON \
  \
  -DCLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
  -DLLD_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
  -DFLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
  \
  -DCMAKE_CXX_FLAGS:STRING="-D_WIN32_WINNT=0x0600" \
  \
  -DPython3_FIND_REGISTRY:BOOL=NEVER \
  -DPython3_EXECUTABLE:FILEPATH=$MINGWPREFIX/share/python/bin/python.exe \
  -Sllvm -Bbuild_stage1 &&
  #-DCMAKE_CXX_FLAGS:STRING="-I$(cygpath -m $PWD/libcxx/include)" \
 wl-showstatus build-install &&
 PATH=$MINGWPREFIX/share/python/bin:$PATH ninja -Cbuild_stage1 install/strip &&
 strip build_stage1/bin/clang-tblgen.exe &&
 cp -f build_stage1/bin/clang-tblgen.exe stage1/bin/ &&
 cp -f stage1/bin/clang.exe stage1/bin/gcc_renamed_clang.exe &&
 cp -f stage1/bin/clang++.exe stage1/bin/g++_renamed_clang++.exe &&
    echo OK



# build MinGW-w64 headers and crt
for arch in i686 x86_64 armv7 aarch64; do
 mkdir -p build_mingw-w64-headers-$arch build_mingw-w64-crt-$arch &&
 wl-showstatus configure &&
 cd build_mingw-w64-headers-$arch &&
 PATH=$PWD/stage1/bin:$PATH \
 $MINGWPREFIX/src/mingw-w64/mingw-w64-headers/configure --prefix=$PWD/../stage1/$arch-w64-mingw32 --build=$BUILDPLATFORM --host=$arch-w64-mingw32 \
  --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrt"; else echo "msvcrt-os"; fi) \
  --enable-sdk=all \
  --enable-idl &&
 cd .. &&
 wl-showstatus build-install &&
 PATH=$PWD/stage1/bin:$PATH \
 make -Cbuild_mingw-w64-headers-$arch install-strip &&
 wl-showstatus configure &&
 cd build_mingw-w64-crt-$arch &&
 PATH=$PWD/stage1/bin:$PATH \
 $MINGWPREFIX/src/mingw-w64/mingw-w64-crt/configure --prefix=$PWD/../stage1/$arch-w64-mingw32 --build=$BUILDPLATFORM --host=$arch-w64-mingw32 \
  --$(if [ "$arch" == "i686" ]; then echo "enable"; else echo "disable"; fi)-lib32 \
  --$(if [ "$arch" == "x86_64" ]; then echo "enable"; else echo "disable"; fi)-lib64 \
  --$(if [ "$arch" == "armv7" ]; then echo "enable"; else echo "disable"; fi)-libarm32 \
  --$(if [ "$arch" == "aarch64" ]; then echo "enable"; else echo "disable"; fi)-libarm64 \
  --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrt"; else echo "msvcrt-os"; fi) \
  --enable-wildcard \
  CC="$PWD/../stage1/bin/gcc_renamed_clang.exe -fuse-ld=lld -target $arch-w64-mingw32 $(if [ "$arch" == "armv7" ]; then echo "-march=armv7-a -mtune=armv7-a+vfpv4+neon+thumb2"; fi)" \
  CXX="$PWD/../stage1/bin/g++_renamed_clang++.exe -fuse-ld=lld" \
  AS="$PWD/../stage1/bin/llvm-as.exe" \
  LD="$PWD/../stage1/bin/lld-link.exe" \
  DLLTOOL="$PWD/../stage1/bin/llvm-dlltool.exe" \
  AR="$PWD/../stage1/bin/llvm-ar.exe" \
  RANLIB="$PWD/../stage1/bin/llvm-ranlib.exe" \
  RC="$PWD/../stage1/bin/llvm-windres.exe" \
  NM="$PWD/../stage1/bin/llvm-nm.exe" \
  OBJDUMP="$PWD/../stage1/bin/llvm-objdump.exe" \
  &&
 cd .. &&
 wl-showstatus build &&
 PATH=$PWD/stage1/bin:$PATH make -Cbuild_mingw-w64-crt-$arch &&
 wl-showstatus build-install &&
 PATH=$PWD/stage1/bin:$PATH make -Cbuild_mingw-w64-crt-$arch install-strip &&
 touch SUCCESS_$arch || break
done &&
 if [ $(ls -1 SUCCESS_*|wc -l) -ne 4 ]; then false; fi &&
 rm -f SUCCESS_* &&
    echo OK



for arch in i686 x86_64 aarch64; do
#for arch in i686 x86_64 armv7 aarch64; do
  mkdir -p build_mingw-w64_winpthreads_stage1_$arch &&
  wl-showstatus configure &&
  cd build_mingw-w64_winpthreads_stage1_$arch &&
  #PATH=$PWD/native/bin:$PATH $MINGWPREFIX/src/mingw-w64/mingw-w64-libraries/winpthreads/configure --prefix=$PWD/../stage1/$arch-w64-mingw32 \
  $MINGWPREFIX/src/mingw-w64/mingw-w64-libraries/winpthreads/configure --prefix=$PWD/../stage1/$arch-w64-mingw32 \
   --build=$BUILDPLATFORM \
   --host=$arch-w64-mingw32 \
   --with-sysroot=$PWD/../stage1 \
   --without-gnu-ld \
   CC="$PWD/../stage1/bin/gcc_renamed_clang.exe -fuse-ld=lld -target $arch-w64-mingw32 $(if [ "$arch" == "armv7" ]; then echo "-march=armv7-a -mtune=armv7-a+vfpv4+neon+thumb2"; fi) $(if [ "$arch" == "armv7" ] || [ "$arch" == "aarch64" ]; then echo "-femulated-tls"; fi)" \
   CXX="$PWD/../stage1/bin/g++_renamed_clang++.exe -fuse-ld=lld -target $arch-w64-mingw32" \
   AS="$PWD/../stage1/bin/llvm-as.exe" \
   LD="$PWD/../stage1/bin/lld-link.exe" \
   DLLTOOL="$PWD/../stage1/bin/llvm-dlltool.exe" \
   AR="$PWD/../stage1/bin/llvm-ar.exe" \
   RANLIB="$PWD/../stage1/bin/llvm-ranlib.exe" \
   RC="$PWD/../stage1/bin/llvm-windres.exe --target=$arch-w64-mingw32" \
   NM="$PWD/../stage1/bin/llvm-nm.exe" \
   OBJDUMP="$PWD/../stage1/bin/llvm-objdump.exe" \
   STRIP="$PWD/../stage1/bin/llvm-strip.exe" \
   CFLAGS="-D_FORTIFY_SOURCE=2" \
   LDFLAGS="$(if [ "$arch" == "armv7" ] || [ "$arch" == "aarch64" ]; then echo "-lmsvcrt -lmingwex"; fi)" \
   &&
   #CFLAGS="$(if [ "$arch" == "armv7" ] || [ "$arch" == "aarch64" ]; then echo "-femulated-tls"; fi)" \
   #CFLAGS="-I$PWD/../stage1/include -I$PWD/../stage1/include/$RUNPLATFORM/c++/v1 -I$PWD/../stage1/include/c++/v1 $(if [ "$arch" == "aarch64" ]; then echo "-D__aarch64__"; fi)" \
   #LDFLAGS="-L$PWD/../stage1/lib -Wl,-no-undefined" \
   #LDFLAGS="-Lstage1/$arch-w64-mingw32/lib $(if [ "$arch" == "armv7" ] || [ "$arch" == "aarch64" ]; then echo "-lmsvcrt -lmingwex"; fi)" \
  cd .. &&
  #-rtlib=compiler-rt -unwindlib=libunwind -stdlib=libc++ 
  #-Wl,-m,$(case $arch in i686) echo "i386pe";; x86_64) echo "i386pep";; armv7) echo "thumb2pe";; aarch64) echo "arm64pe";; esac)
  # fix detection of shared libraries
  sed -i.bak2 -e "s/\(deplibs_check_method=\"\)[^\"]*/\1pass_all/" build_mingw-w64_winpthreads_stage1_$arch/libtool &&
  # fix link issues in build_mingw-w64/mingw-w64-libraries/winpthreads/
  sed -i.bak -e "s?\(-o \)\([^ ]*\)\(.*\) -link \(-dll\)?-shared -s -mwindows \1.libs/libwinpthread-1.dll -Wl,--out-implib,\2 \3 \4?" build_mingw-w64_winpthreads_stage1_$arch/libtool &&
  sed -i.bak -e "s?\$(AM_V_CCLD).*\$(libwinpthread_la_OBJECTS).*?& \&\& \$(AR) \$(ARFLAGS) .libs/libwinpthread.a \$(libwinpthread_la_OBJECTS:.lo=.o) \&\& cp -f .libs/libwinpthread.a .libs/libwinpthread.lib?" build_mingw-w64_winpthreads_stage1_$arch/Makefile &&
  wl-showstatus build-install &&
  # build include files and make them available
  #PATH=$PWD/prebuilt/bin:$PATH make -Cbuild_mingw-w64_winpthreads_stage1_$arch install-strip &&
  make -Cbuild_mingw-w64_winpthreads_stage1_$arch install-strip &&
  #make -Cbuild_mingw-w64_winpthreads_stage1_$arch install-strip CFLAGS="$(if [ "$arch" == "armv7" ] || [ "$arch" == "aarch64" ]; then echo "-femulated-tls"; fi)" &&
  cp -u build_mingw-w64_winpthreads_stage1_$arch/fakelib/*.a stage1/$arch-w64-mingw32/lib/ &&
  #mkdir -p stage1/$arch-w64-mingw32 &&
  #cp -rf mingw-w64_winpthreads_$arch/* stage1/$arch-w64-mingw32/ &&
  #mkdir -p stage1/lib/$arch-w64-mingw32 &&
  #cp -rf mingw-w64_winpthreads_$arch/* stage1/lib/$arch-w64-mingw32/ &&
  ##mkdir -p stage1/$arch-w64-windows-gnu/lib &&
  ##cp -rf mingw-w64_winpthreads_$arch/lib/* stage1/$arch-w64-windows-gnu/lib/ &&
  touch SUCCESS_$arch || break
 done &&
 #if [ $(ls -1 SUCCESS_*|wc -l) -ne 4 ]; then false; fi &&
 if [ $(ls -1 SUCCESS_*|wc -l) -ne 3 ]; then false; fi &&
 rm -f SUCCESS_* &&
    echo OK



 # build runtimes
 for arch in i686 x86_64 aarch64; do
 #for arch in i686 x86_64 armv7 aarch64; do
  mkdir -p build_cross_runtimes_$arch &&
  mkdir -p build_cross_runtimes_$arch/dummylibs &&
  #PATH=$PWD/stage1/bin:$MINGWPREFIX/share/llvm/bin:$PATH llvm-ar.exe cr build_cross_runtimes_$arch/dummylibs/libgcc.a &&
  #PATH=$PWD/stage1/bin:$MINGWPREFIX/share/llvm/bin:$PATH llvm-ar.exe cr build_cross_runtimes_$arch/dummylibs/libgcc_s.a &&
  #PATH=$PWD/stage1/bin:$MINGWPREFIX/share/llvm/bin:$PATH llvm-ar.exe cr build_cross_runtimes_$arch/dummylibs/libgcc_eh.a &&
  PATH=$PWD/stage1/bin:$MINGWPREFIX/share/llvm/bin:$PATH llvm-ar.exe cr build_cross_runtimes_$arch/dummylibs/libstdc++.a &&
  wl-showstatus configure &&
  #-DCOMPILER_RT_DEFAULT_TARGET_TRIPLE:STRING=$arch-w64-mingw32 \
  cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$PWD/stage1 -DCMAKE_BUILD_TYPE:STRING=Release  \
   -DCMAKE_CROSSCOMPILING:BOOL=ON \
   -DCMAKE_SYSTEM_NAME:STRING=Windows \
   -DLLVM_ENABLE_RUNTIMES:STRING="compiler-rt" \
   -DLLVM_ENABLE_ASSERTIONS:BOOL=ON \
   -DLLVM_ENABLE_EH:BOOL=ON \
   -DLLVM_ENABLE_RTTI:BOOL=ON \
   \
   -DCOMPILER_RT_DEFAULT_TARGET_ONLY:BOOL=ON \
   -DCOMPILER_RT_USE_LIBCXX:BOOL=ON \
   -DCOMPILER_RT_USE_BUILTINS_LIBRARY=OFF \
   -DCOMPILER_RT_BUILD_BUILTINS:BOOL=ON \
   -DCOMPILER_RT_BUILD_XRAY:BOOL=OFF \
   -DCOMPILER_RT_BUILD_LIBFUZZER:BOOL=OFF \
   -DCOMPILER_RT_BUILD_PROFILE:BOOL=OFF \
   -DCOMPILER_RT_BUILD_MEMPROF:BOOL=OFF \
   -DCOMPILER_RT_BUILD_PROFILE:BOOL=OFF \
   -DCOMPILER_RT_BUILD_SANITIZERS:BOOL=OFF \
   -DCOMPILER_RT_SANITIZERS_TO_BUILD:STRING="" \
   -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF \
   \
   -DLIBCXXABI_ENABLE_SHARED:BOOL=ON \
   -DLIBCXXABI_ENABLE_STATIC:BOOL=ON \
   -DLIBCXXABI_TARGET_TRIPLE:STRING=$arch-w64-mingw32 \
   -DLIBCXXABI_USE_COMPILER_RT:BOOL=ON \
   -DLIBCXXABI_LIBCXX_INCLUDES:PATH=$PWD/build_libcxx/include/c++/v1 \
   -DLIBCXXABI_LIBDIR_SUFFIX="" \
   -DLIBCXXABI_INCLUDE_TESTS:BOOL=OFF \
   \
   -DCMAKE_SYSTEM_PROGRAM_PATH=$PWD/native/bin \
   -DCMAKE_FIND_ROOT_PATH="$PWD/native" \
   -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER \
   -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY \
   -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY \
   \
   -DLLVM_CONFIG_PATH:STRING=$PWD/stage1/bin/llvm-config.exe \
   \
   -DCMAKE_C_COMPILER_EXTERNAL_TOOLCHAIN:PATH=$PWD/stage1/$arch-w64-mingw32 \
   -DCMAKE_CXX_COMPILER_EXTERNAL_TOOLCHAIN:PATH=$PWD/stage1/$arch-w64-mingw32 \
   -DCMAKE_ASM_COMPILER_TARGET=$arch-w64-mingw32 \
   -DCMAKE_C_COMPILER_TARGET=$arch-w64-mingw32 \
   -DCMAKE_CXX_COMPILER_TARGET=$arch-w64-mingw32 \
   -DCMAKE_ASM_COMPILER:FILEPATH=$(PATH=$PWD/stage1/bin:$MINGWPREFIX/share/llvm/bin:$PATH which clang.exe) \
   -DCMAKE_ASM_COMPILER_AR:FILEPATH=$(PATH=$PWD/stage1/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ar.exe) \
   -DCMAKE_ASM_COMPILER_RANLIB:FILEPATH=$(PATH=$PWD/stage1/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ranlib.exe) \
   -DCMAKE_C_COMPILER:FILEPATH=$(PATH=$PWD/stage1/bin:$MINGWPREFIX/share/llvm/bin:$PATH which clang.exe) \
   -DCMAKE_C_COMPILER_AR:FILEPATH=$(PATH=$PWD/stage1/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ar.exe) \
   -DCMAKE_C_COMPILER_RANLIB:FILEPATH=$(PATH=$PWD/stage1/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ranlib.exe) \
   -DCMAKE_CXX_COMPILER:FILEPATH=$(PATH=$PWD/stage1/bin:$MINGWPREFIX/share/llvm/bin:$PATH which clang++.exe) \
   -DCMAKE_CXX_COMPILER_AR:FILEPATH=$(PATH=$PWD/stage1/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ar.exe) \
   -DCMAKE_CXX_COMPILER_RANLIB:FILEPATH=$(PATH=$PWD/stage1/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ranlib.exe) \
   -DCMAKE_RC_COMPILER:FILEPATH=$(PATH=$PWD/stage1/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-windres.exe) \
   -DCMAKE_AR:FILEPATH=$(PATH=$PWD/stage1/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ar.exe) \
   -DCMAKE_RANLIB:FILEPATH=$(PATH=$PWD/stage1/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ranlib.exe) \
   -DCMAKE_READELF:FILEPATH=$(PATH=$PWD/stage1/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-readelf.exe) \
   -DCMAKE_DLLTOOL:FILEPATH=$(PATH=$PWD/stage1/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-dlltool.exe) \
   -DCMAKE_NM:FILEPATH=$(PATH=$PWD/stage1/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-nm.exe) \
   -DCMAKE_OBJCOPY:FILEPATH=$(PATH=$PWD/stage1/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-objcopy.exe) \
   -DCMAKE_OBJDUMP:FILEPATH=$(PATH=$PWD/stage1/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-objdump.exe) \
   -DCMAKE_LINKER:FILEPATH=$(PATH=$PWD/stage1/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-link.exe) \
   -DCMAKE_STRIP:FILEPATH=$(PATH=$PWD/stage1/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-strip.exe) \
   -DGOLD_EXECUTABLE:FILEPATH=$(PATH=$PWD/stage1/bin:$MINGWPREFIX/share/llvm/bin:$PATH which ld.lld.exe) \
   -DCMAKE_ASM_FLAGS:STRING="-g0 -v -integrated-as -fuse-ld=lld" \
   -DCMAKE_C_FLAGS:STRING="-g0 -fuse-ld=lld -femulated-tls" \
   -DCMAKE_CXX_FLAGS:STRING="-g0 -fuse-ld=lld -femulated-tls" \
   -DCMAKE_{SHARED,MODULE,EXE}_LINKER_FLAGS:STRING="-fuse-ld=lld -L$(cygpath -m $PWD/build_cross_runtimes_$arch/dummylibs)" \
  \
  -DPython3_FIND_REGISTRY:BOOL=NEVER \
  -DPython3_EXECUTABLE:FILEPATH=$MINGWPREFIX/share/python/bin/python.exe \
   -Sruntimes -Bbuild_cross_runtimes_$arch &&
  #-DCMAKE_ASM_COMPILER:FILEPATH=$PWD/stage1/bin/$arch-w64-mingw32-as.exe \
  #-DCMAKE_ASM_FLAGS:STRING="-g0 -v -no-integrated-as -fuse-ld=lld" \
  #-DCMAKE_CXX_FLAGS:STRING="-g0 -fuse-ld=lld -I$PWD/stage1/include/c++/v1" \
  # -stdlib=libstdc++
  sed -i.bak -e "s?/IGNORE:[0-9]*??" build_cross_runtimes_$arch/build.ninja &&
  wl-showstatus build-install &&
  PATH=$PWD/stage1/bin:$PATH ninja -Cbuild_cross_runtimes_$arch install/strip &&
  touch SUCCESS_$arch || break
 done &&
 if [ $(ls -1 SUCCESS_*|wc -l) -ne 4 ]; then false; fi &&
 rm -f SUCCESS_* &&
 # manually copy libclang_rt.*.a files to the location where they are expected
 mkdir -p stage1/lib/clang/$(echo $VERSION|sed -e "s/-.*$//")/lib/windows &&
 cp -f stage1/lib/windows/* stage1/lib/clang/$(echo $VERSION|sed -e "s/-.*$//")/lib/windows/ &&
    echo OK





## fix llvm/cmake/modules/CheckAtomic.cmake (version >= 14.0.0-rc2)
#sed -i.bak -e "s/MSVC/WIN32/" llvm/cmake/modules/CheckAtomic.cmake

mkdir -p build_stage2 &&
 # build main LLVM suite
 wl-showstatus configure &&
 #libunwind;openmp;parallel-libs;polly;pstl;flang;libclc
 PATH=$PWD/stage1/bin:$PATH \
 C_INCLUDE_PATH=$PWD/stage1/include:${C_INCLUDE_PATH:+:$C_INCLUDE_PATH} \
 CPLUS_INCLUDE_PATH=$PWD/stage1/include:${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} \
 LIBRARY_PATH=$PWD/stage1/lib:$PWD/stage1/$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "x86_64"; else echo "i686"; fi)-w64-mingw32/lib:${LIBRARY_PATH:+:$LIBRARY_PATH} \
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release \
  -DBUILD_SHARED_LIBS:BOOL=ON \
  -DLLVM_BUILD_STATIC=OFF \
  -DLLVM_BUILD_LLVM_DYLIB:BOOL=OFF \
  -DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;lld;lldb;polly;mlir;pstl" \
  -DLLVM_ENABLE_RUNTIMES:STRING="compiler-rt;libcxx;libcxxabi" \
  -DLLVM_TARGETS_TO_BUILD:STRING="X86;NVPTX;AMDGPU;ARM;AArch64;WebAssembly" \
  -DLLVM_HOST_TRIPLE:STRING=$(echo $BUILDPLATFORM|sed -e "s/-.*$//")-w64-mingw32 \
  -DLLVM_DEFAULT_TARGET_TRIPLE=$(echo $BUILDPLATFORM|sed -e "s/-.*$//")-w64-mingw32 \
  -DLLVM_BUILD_STATIC=OFF \
  -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF \
  -DLLVM_CCACHE_BUILD:BOOL=OFF \
  -DLLVM_ENABLE_MODULES:BOOL=OFF \
  -DLLVM_ENABLE_PLUGINS:BOOL=ON \
  -DLLVM_ENABLE_THREADS:BOOL=ON \
  -DLLVM_ENABLE_UNWIND_TABLES:BOOL=ON \
  -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF \
  -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON \
  -DLLVM_ENABLE_LTO:STRING=OFF \
  -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) \
  -DLLVM_ENABLE_RTTI:BOOL=ON \
  -DLLVM_ENABLE_TERMINFO:BOOL=OFF \
  -DLLVM_ENABLE_Z3_SOLVER:BOOL=ON \
  -DLLVM_Z3_INSTALL_DIR:STRING=$MINGWPREFIX \
  -DLLVM_ENABLE_FFI:BOOL=ON \
  -DLLVM_ENABLE_FFI:BOOL=ON \
  -DFFI_INCLUDE_DIR:PATH=$MINGWPREFIX/include \
  -DLLVM_ENABLE_LIBXML2:BOOL=ON \
  -DLLVM_ENABLE_PIC:BOOL=OFF \
  -DLLVM_USE_RELATIVE_PATHS_IN_DEBUG_INFO:BOOL=ON \
  -DLLVM_USE_RELATIVE_PATHS_IN_FILES:BOOL=ON \
  -DLLVM_INSTALL_BINUTILS_SYMLINKS:BOOL=OFF \
  -DLLVM_INSTALL_CCTOOLS_SYMLINKS:BOOL=OFF \
  -DLLVM_ENABLE_DOXYGEN:BOOL=OFF -DDOXYGEN_DOT_EXECUTABLE:FILEPATH= -DDOXYGEN_EXECUTABLE:FILEPATH= \
  -DLLVM_ENABLE_SPHINX=OFF \
  -DLLVM_INCLUDE_DOCS:BOOL=OFF \
  -DLLVM_BUILD_EXAMPLES:BOOL=OFF \
  -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF \
  -DLLVM_INCLUDE_BENCHMARKS:BOOL=OFF \
  -DLLVM_INCLUDE_TESTS:BOOL=OFF \
  -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF \
  \
  -DLLVM_TOOL_LLVM_AS_FUZZER_BUILD:BOOL=OFF \
  -DLLVM_TOOL_LLVM_ISEL_FUZZER_BUILD:BOOL=OFF \
  -DLLVM_TOOL_LLVM_ITANIUM_DEMANGLE_FUZZER_BUILD:BOOL=OFF \
  -DLLVM_TOOL_LLVM_MICROSOFT_DEMANGLE_FUZZER_BUILD:BOOL=OFF \
  -DLLVM_TOOL_LLVM_MC_ASSEMBLE_FUZZER_BUILD:BOOL=OFF \
  -DLLVM_TOOL_LLVM_MC_DISASSEMBLE_FUZZER_BUILD:BOOL=OFF \
  -DLLVM_TOOL_LLVM_OPT_FUZZER_BUILD:BOOL=OFF \
  -DLLVM_TOOL_LLVM_RUST_DEMANGLE_FUZZER_BUILD:BOOL=OFF \
  -DLLVM_TOOL_LLVM_SPECIAL_CASE_LIST_FUZZER_BUILD:BOOL=OFF \
  -DLLVM_TOOL_LLVM_YAML_NUMERIC_PARSER_FUZZER_BUILD:BOOL=OFF \
  -DLLVM_TOOL_LLVM_YAML_PARSER_FUZZER_BUILD:BOOL=OFF \
  -DLLVM_TOOL_VFABI_DEMANGLE_FUZZER_BUILD:BOOL=OFF \
  \
  -DCOMPILER_RT_DEFAULT_TARGET_ONLY=OFF \
  -DCOMPILER_RT_BUILD_BUILTINS:BOOL=ON \
  -DCOMPILER_RT_USE_BUILTINS_LIBRARY=ON \
  -DCOMPILER_RT_USE_LIBCXX:BOOL=ON \
  -DSANITIZER_CXX_ABI=libcxxabi \
  -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF \
  \
  -DLLVM_ENABLE_LIBCXX=ON \
  -DLIBCXX_ENABLE_SHARED:BOOL=ON \
  -DLIBCXX_ENABLE_STATIC:BOOL=ON \
  -DLIBCXX_USE_COMPILER_RT:BOOL=OFF \
  -DLIBCXX_HAS_WIN32_THREAD_API:BOOL=ON \
  -DLIBCXX_HAS_PTHREAD_API:BOOL=OFF \
  -DLIBCXX_ENABLE_EXPERIMENTAL_LIBRARY:BOOL=OFF \
  -DLIBCXX_CXX_ABI=libcxxabi \
  -DLIBCXX_CXX_ABI_INCLUDE_PATHS=$PWD/libcxxabi/include \
  -DLIBCXX_CXX_ABI_LIBRARY_PATH:PATH=$PWD/build_libcxxabi/lib \
  -DLIBCXX_LIBDIR_SUFFIX="" \
  -DLIBCXX_INCLUDE_TESTS:BOOL=OFF \
  -DLIBCXX_ENABLE_ABI_LINKER_SCRIPT:BOOL=OFF \
  \
  -DLIBCXXABI_ENABLE_SHARED:BOOL=ON \
  -DLIBCXXABI_ENABLE_STATIC:BOOL=ON \
  -DLIBCXXABI_USE_COMPILER_RT:BOOL=OFF \
  -DLIBCXXABI_LIBCXX_INCLUDES:PATH=$PWD/s/include/c++/v1 \
  -DLIBCXXABI_LIBDIR_SUFFIX="" \
  -DLIBCXXABI_ENABLE_EXCEPTIONS:BOOL=ON \
  -DLIBCXXABI_ENABLE_ASSERTIONS:BOOL=OFF \
  \
  -DLIBUNWIND_ENABLE_SHARED:BOOL=ON \
  -DLIBUNWIND_ENABLE_STATIC:BOOL=ON \
  -DLIBUNWIND_USE_COMPILER_RT:BOOL=OFF \
  \
  -DLIBCLANG_BUILD_STATIC:BOOL=OFF \
  -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF \
  -DCLANG_PLUGIN_SUPPORT:BOOL=ON \
  -DCLANG_ENABLE_CLANGD:BOOL=ON \
  -DCLANG_DEFAULT_CXX_STDLIB:STRING=libc++ \
  -DCLANG_DEFAULT_RTLIB:STRING=compiler-rt \
  -DCLANG_DEFAULT_UNWINDLIB:STRING=none \
  -DCLANG_DEFAULT_OPENMP_RUNTIME:STRING=libomp \
  -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF \
  -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON \
  -DCLANG_TOOL_APINOTES_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_ARCMT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_C_ARCMT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_C_INDEX_TEST_BUILD:BOOL=OFF \
  -DCLANG_INCLUDE_DOCS:BOOL=OFF \
  -DCLANG_BUILD_EXAMPLES:BOOL=OFF \
  -DCLANG_INCLUDE_TESTS:BOOL=OFF \
  \
  -DLLDB_TOOL_LLDB_SERVER_BUILD:BOOL=ON \
  -DLLDB_TOOL_LLDB_VSCODE_BUILD:BOOL=ON \
  -DLLDB_ENABLE_LIBEDIT:BOOL=OFF \
  -DLLDB_ENABLE_CURSES:BOOL=ON \
  -DLLDB_ENABLE_LIBXML2:BOOL=ON \
  -DLLDB_ENABLE_LZMA:BOOL=ON \
  -DLLDB_ENABLE_PYTHON:BOOL=ON \
  \
  -DCMAKE_CXX_FLAGS:STRING="-D_WIN32_WINNT=0x0600" \
  \
  -DLLVM_TABLEGEN:STRING=$(PATH=$PWD/stage1/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-tblgen.exe) \
  -DCLANG_TABLEGEN:STRING=$(PATH=$PWD/stage1/bin:$MINGWPREFIX/share/llvm/bin:$PATH which clang-tblgen.exe) \
  -DLLVM_CONFIG:STRING=$(PATH=$PWD/stage1/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-config.exe) \
  \
  -DCMAKE_ASM_COMPILER:FILEPATH=$(PATH=$PWD/stage1/bin:$MINGWPREFIX/share/llvm/bin:$PATH which clang.exe) \
  -DCMAKE_ASM_COMPILER_AR:FILEPATH=$(PATH=$PWD/stage1/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ar.exe) \
  -DCMAKE_ASM_COMPILER_RANLIB:FILEPATH=$(PATH=$PWD/stage1/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ranlib.exe) \
  -DCMAKE_C_COMPILER:FILEPATH=$(PATH=$PWD/stage1/bin:$MINGWPREFIX/share/llvm/bin:$PATH which clang.exe) \
  -DCMAKE_C_COMPILER_AR:FILEPATH=$(PATH=$PWD/stage1/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ar.exe) \
  -DCMAKE_C_COMPILER_RANLIB:FILEPATH=$(PATH=$PWD/stage1/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ranlib.exe) \
  -DCMAKE_CXX_COMPILER:FILEPATH=$(PATH=$PWD/stage1/bin:$MINGWPREFIX/share/llvm/bin:$PATH which clang++.exe) \
  -DCMAKE_CXX_COMPILER_AR:FILEPATH=$(PATH=$PWD/stage1/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ar.exe) \
  -DCMAKE_CXX_COMPILER_RANLIB:FILEPATH=$(PATH=$PWD/stage1/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ranlib.exe) \
  -DCMAKE_RC_COMPILER:FILEPATH=$(PATH=$PWD/stage1/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-windres.exe) \
  -DCMAKE_AR:FILEPATH=$(PATH=$PWD/stage1/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ar.exe) \
  -DCMAKE_RANLIB:FILEPATH=$(PATH=$PWD/stage1/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ranlib.exe) \
  -DCMAKE_READELF:FILEPATH=$(PATH=$PWD/stage1/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-readelf.exe) \
  -DCMAKE_DLLTOOL:FILEPATH=$(PATH=$PWD/stage1/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-dlltool.exe) \
  -DCMAKE_NM:FILEPATH=$(PATH=$PWD/stage1/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-nm.exe) \
  -DCMAKE_OBJCOPY:FILEPATH=$(PATH=$PWD/stage1/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-objcopy.exe) \
  -DCMAKE_OBJDUMP:FILEPATH=$(PATH=$PWD/stage1/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-objdump.exe) \
  -DCMAKE_LINKER:FILEPATH=$(PATH=$PWD/stage1/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-link.exe) \
  -DCMAKE_STRIP:FILEPATH=$(PATH=$PWD/stage1/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-strip.exe) \
  -DGOLD_EXECUTABLE:FILEPATH=$(PATH=$PWD/stage1/bin:$MINGWPREFIX/share/llvm/bin:$PATH which ld.lld.exe) \
  -DCMAKE_ASM_FLAGS:STRING="-g0 -no-integrated-as -fuse-ld=lld" \
  -DCMAKE_C_FLAGS:STRING="-g0 -fuse-ld=lld" \
  -DCMAKE_CXX_FLAGS:STRING="-g0 -fuse-ld=lld -I$(cygpath -m $PWD/stage1/include/c++/v1) -I$(cygpath -m $PWD/stage1/include/$RUNPLATFORM/c++/v1)" \
  -DCMAKE_STATIC_LINKER_FLAGS:STRING="" \
  -DCMAKE_{SHARED,MODULE,EXE}_LINKER_FLAGS:STRING="-fuse-ld=lld --rtlib=compiler-rt -stdlib=libc++ -L$(cygpath -m $PWD/stage1/lib/$RUNPLATFORM)" \
  -DPython3_FIND_REGISTRY:BOOL=NEVER \
  -DPython3_EXECUTABLE:FILEPATH=$MINGWPREFIX/share/python/bin/python.exe \
  -Sllvm -Bbuild_stage2 &&
 #-DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;lld;lldb;libclc;pstl" \
 #-DLLVM_ENABLE_RUNTIMES:STRING="compiler-rt;libc;libcxx;libcxxabi;libunwind;openmp" \
 #-DCOMPILER_RT_USE_BUILTINS_LIBRARY:BOOL=ON 
 #-DLLVM_HOST_TRIPLE:STRING=$BUILDPLATFORM -DCOMPILER_RT_DEFAULT_TARGET_TRIPLE:STRING=$RUNPLATFORM -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLIBCXXABI_TARGET_TRIPLE:STRING=$RUNPLATFORM -DLIBUNWIND_TARGET_TRIPLE:STRING=$RUNPLATFORM 
 #-DCLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
 #-DLLD_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
 #-DFLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
 #-DCMAKE_C_FLAGS:STRING="-D_FORTIFY_SOURCE=0 -D__SSP_FORTIFY_LEVEL=0" \
 #-DCMAKE_CXX_FLAGS:STRING="-D_FORTIFY_SOURCE=0 -D__SSP_FORTIFY_LEVEL=0" \
 #-LLVM_BUILD_32_BITS:BOOL=ON \
 #-DLLVM_INSTALL_BINUTILS_SYMLINKS:BOOL=ON \
 #-DLLVM_INSTALL_CCTOOLS_SYMLINKS:BOOL=ON \
 #  + share/llvm/bin/addr2line.exe
 #  + share/llvm/bin/ar.exe
 #  + share/llvm/bin/bitcode_strip.exe
 #  + share/llvm/bin/c++filt.exe
 #  + share/llvm/bin/dlltool.exe
 #  + share/llvm/bin/dwp.exe
 #  + share/llvm/bin/install_name_tool.exe
 #  + share/llvm/bin/libtool.exe
 #  + share/llvm/bin/lipo.exe
 #  + share/llvm/bin/nm.exe
 #  + share/llvm/bin/objcopy.exe
 #  + share/llvm/bin/objdump.exe
 #  + share/llvm/bin/ranlib.exe
 #  + share/llvm/bin/readelf.exe
 #  + share/llvm/bin/size.exe
 #  + share/llvm/bin/strings.exe
 #  + share/llvm/bin/strip.exe
 #  + share/llvm/bin/windres.exe
 #-DCLANG_DEFAULT_UNWINDLIB:STRING=libcxx \
 #-DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF \
 #-DBUILD_SHARED_LIBS:BOOL=OFF #see also: https://llvm.org/docs/BuildingADistribution.html

 #-DCMAKE_C_COMPILER:FILEPATH=$(PATH=$MINGWPREFIX/share/llvm/bin:$PATH which clang.exe) \
 #-DCMAKE_CXX_COMPILER:FILEPATH=$(PATH=$MINGWPREFIX/share/llvm/bin:$PATH which clang++.exe) \
 #-DCMAKE_RC_COMPILER:FILEPATH=$(PATH=$MINGWPREFIX/share/llvm/bin:$PATH which windres.exe) \
 #-DCMAKE_ASM_MASM_COMPILER:FILEPATH=$(PATH=$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ml.exe) \
 #-DCMAKE_AR:FILEPATH=$(PATH=$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ar.exe) \
 #-DCMAKE_RANLIB:FILEPATH=$(PATH=$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ranlib.exe) \
 #-DCMAKE_EXE_LINKER_FLAGS:STRING="-L$MINGWPREFIX/share/llvm/lib" \
 #-DCMAKE_CXX_FLAGS:STRING="-I$MINGWPREFIX/share/llvm/include/c++/v1" \

 #-DCMAKE_ASM_COMPILER:STRING=yasm.exe \
 #-DCMAKE_ASM_MASM_COMPILER:STRING="jwasm.exe $(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "-win64"; else echo "-coff"; fi)" \
 #$(if which clang.exe &> /dev/null; then echo "-DCMAKE_C_COMPILER:FILEPATH=$(which clang.exe)"; fi) \
 #$(if which clang++.exe &> /dev/null; then echo "-DCMAKE_CXX_COMPILER:FILEPATH=$(which clang++.exe)"; fi) \
 #$(if which llvm-ranlib.exe &> /dev/null; then echo "-DCMAKE_C_COMPILER_RANLIB:FILEPATH=$(which llvm-ranlib.exe) -DCMAKE_CXX_COMPILER_RANLIB:FILEPATH=$(which llvm-ranlib.exe)"; fi) \
 #$(if which llvm-ar.exe &> /dev/null; then echo "-DCMAKE_C_COMPILER_AR:FILEPATH=$(which llvm-ar.exe) -DCMAKE_CXX_COMPILER_AR:FILEPATH=$(which llvm-ar.exe)"; fi) \
 #-DLLVM_TABLEGEN:STRING=$(which llvm-tblgen.exe 2> /dev/null) \
 ## don't use -fno-lto flag with yasm
 #sed -i.bak -e "s/\(yasm\.exe .*\) -fno-lto/\1/" build/compile_commands.json &&
 #sed -i.bak -e "s/-fno-lto//" build/build.ninja build/compile_commands.json
 ## fix missing -lgcc/-lgcc_s
 #sed -i.bak -e "s/-lgcc_s\|-lgcc//g" build/build.ninja &&
 ## fix missing link libraries
 #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -lpthread/" build/build.ninja &&
 wl-showstatus build-install &&
 PATH=$PWD/stage1/bin:$PATH ninja -Cbuild_stage2 install/strip &&
    echo OK

####See also: https://llvm.org/docs/HowToCrossCompileBuiltinsOnArm.html#the-cmake-try-compile-stage-fails
####-DCMAKE_C_COMPILER_EXTERNAL_TOOLCHAIN:PATH=$PWD/stage1/$arch-w64-mingw32
####-DLLVM_BUILD_EXTERNAL_COMPILER_RT:BOOL=ON 









# get prebuilt version
PREBUILT_VERSION=20220323
PREBUILT_BASE=llvm-mingw-$PREBUILT_VERSION-$(if [ "0$USE_UCRT" -ne 0 ]; then echo -n "ucrt"; else echo -n "msvcrt"; fi)-$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "x86_64"; else echo "i686"; fi)
wl-download -v -d $TARBALLDIR/$BASENAME https://github.com/mstorsjo/llvm-mingw/releases/download/$PREBUILT_VERSION/$PREBUILT_BASE.zip
mkdir -p prebuilt
unzip -oq $TARBALLDIR/$BASENAME/$PREBUILT_BASE.zip -dprebuilt
cp -f prebuilt/$PREBUILT_BASE/bin/clang.exe prebuilt/$PREBUILT_BASE/bin/gcc_renamed_clang.exe
cp -f prebuilt/$PREBUILT_BASE/bin/clang++.exe prebuilt/$PREBUILT_BASE/bin/g++_renamed_clang++.exe
for F in $(find prebuilt -name '*-w64-mingw32-ld' -or -name 'ld'); do
 mv -f $F $F.bak
done

# fix compiler-rt/cmake/config-ix.cmake (version >= 13.0.0)
patch -ulbf compiler-rt/cmake/config-ix.cmake << EOF
@@ -206,3 +206,3 @@
     NOT CMAKE_SIZEOF_VOID_P EQUAL 8)
-  message(FATAL_ERROR "Please use architecture with 4 or 8 byte pointers.")
+  message(WATNING "Please use architecture with 4 or 8 byte pointers.")
 endif()
EOF



# build MinGW-w64 headers and crt
for arch in i686 x86_64 armv7 aarch64; do
 mkdir -p build_mingw-w64-headers-$arch build_mingw-w64-crt-$arch &&
 wl-showstatus configure &&
 cd build_mingw-w64-headers-$arch &&
 PATH=$PWD/stage1/bin:$PATH \
 $MINGWPREFIX/src/mingw-w64/mingw-w64-headers/configure --prefix=$PWD/../stage1/$arch-w64-mingw32 --build=$BUILDPLATFORM --host=$arch-w64-mingw32 \
  --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrt"; else echo "msvcrt-os"; fi) \
  --enable-sdk=all \
  --enable-idl &&
 cd .. &&
 wl-showstatus build-install &&
 PATH=$PWD/stage1/bin:$PATH \
 make -Cbuild_mingw-w64-headers-$arch install-strip &&
 wl-showstatus configure &&
 cd build_mingw-w64-crt-$arch &&
 PATH=$PWD/stage1/bin:$PATH \
 $MINGWPREFIX/src/mingw-w64/mingw-w64-crt/configure --prefix=$PWD/../stage1/$arch-w64-mingw32 --build=$BUILDPLATFORM --host=$arch-w64-mingw32 \
  --$(if [ "$arch" == "i686" ]; then echo "enable"; else echo "disable"; fi)-lib32 \
  --$(if [ "$arch" == "x86_64" ]; then echo "enable"; else echo "disable"; fi)-lib64 \
  --$(if [ "$arch" == "armv7" ]; then echo "enable"; else echo "disable"; fi)-libarm32 \
  --$(if [ "$arch" == "aarch64" ]; then echo "enable"; else echo "disable"; fi)-libarm64 \
  --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrt"; else echo "msvcrt-os"; fi) \
  --enable-wildcard \
  CC="$(PATH=$PWD/../prebuilt/$PREBUILT_BASE/bin:$PATH which clang.exe) -fuse-ld=lld -target $arch-w64-mingw32 $(if [ "$arch" == "armv7" ]; then echo "-march=armv7-a -mtune=armv7-a+vfpv4+neon+thumb2"; fi)" \
  CXX="$(PATH=$PWD/../prebuilt/$PREBUILT_BASE/bin:$PATH which clang++.exe) -fuse-ld=lld" \
  AS="$(PATH=$PWD/../prebuilt/$PREBUILT_BASE/bin:$PATH which llvm-as.exe)" \
  LD="$(PATH=$PWD/../prebuilt/$PREBUILT_BASE/bin:$PATH which lld-link.exe)" \
  DLLTOOL="$(PATH=$PWD/../prebuilt/$PREBUILT_BASE/bin:$PATH which llvm-dlltool.exe)" \
  AR="$(PATH=$PWD/../prebuilt/$PREBUILT_BASE/bin:$PATH which llvm-ar.exe)" \
  RANLIB="$(PATH=$PWD/../prebuilt/$PREBUILT_BASE/bin:$PATH which llvm-ranlib.exe)" \
  RC="$(PATH=$PWD/../prebuilt/$PREBUILT_BASE/bin:$PATH which llvm-windres.exe)" \
  NM="$(PATH=$PWD/../prebuilt/$PREBUILT_BASE/bin:$PATH which llvm-nm.exe)" \
  OBJDUMP="$(PATH=$PWD/../prebuilt/$PREBUILT_BASE/bin:$PATH which llvm-objdump.exe)" \
  &&
 cd .. &&
 wl-showstatus build &&
 PATH=$PWD/stage1/bin:$PATH make -Cbuild_mingw-w64-crt-$arch &&
 wl-showstatus build-install &&
 PATH=$PWD/stage1/bin:$PATH make -Cbuild_mingw-w64-crt-$arch install-strip &&
 touch SUCCESS_$arch || break
done &&
 if [ $(ls -1 SUCCESS_*|wc -l) -ne 4 ]; then false; fi &&
 rm -f SUCCESS_* &&
    echo OK



# build MinGW-w64 winpthreads
#for arch in i686 x86_64 aarch64; do
for arch in i686 x86_64 armv7 aarch64; do
  mkdir -p build_mingw-w64_winpthreads_stage1_$arch &&
  wl-showstatus configure &&
  cd build_mingw-w64_winpthreads_stage1_$arch &&
  #PATH=$PWD/native/bin:$PATH $MINGWPREFIX/src/mingw-w64/mingw-w64-libraries/winpthreads/configure --prefix=$PWD/../stage1/$arch-w64-mingw32 \
  $MINGWPREFIX/src/mingw-w64/mingw-w64-libraries/winpthreads/configure --prefix=$PWD/../stage1/$arch-w64-mingw32 \
   --build=$BUILDPLATFORM \
   --host=$arch-w64-mingw32 \
   --with-sysroot=$PWD/../stage1 \
   --without-gnu-ld \
   CC="$(PATH=$PWD/../prebuilt/$PREBUILT_BASE/bin:$PATH which clang.exe) -fuse-ld=lld -target $arch-w64-mingw32 $(if [ "$arch" == "armv7" ]; then echo "-march=armv7-a -mtune=armv7-a+vfpv4+neon+thumb2"; fi) $(if [ "$arch" == "armv7" ] || [ "$arch" == "aarch64" ]; then echo "-femulated-tls"; fi)" \
   CXX="$(PATH=$PWD/../prebuilt/$PREBUILT_BASE/bin:$PATH which clang++.exe) -fuse-ld=lld -target $arch-w64-mingw32" \
   AS="$(PATH=$PWD/../prebuilt/$PREBUILT_BASE/bin:$PATH which llvm-as.exe)" \
   LD="$(PATH=$PWD/../prebuilt/$PREBUILT_BASE/bin:$PATH which lld-link.exe)" \
   DLLTOOL="$(PATH=$PWD/../prebuilt/$PREBUILT_BASE/bin:$PATH which llvm-dlltool.exe)" \
   AR="$(PATH=$PWD/../prebuilt/$PREBUILT_BASE/bin:$PATH which llvm-ar.exe)" \
   RANLIB="$(PATH=$PWD/../prebuilt/$PREBUILT_BASE/bin:$PATH which llvm-ranlib.exe)" \
   RC="$(PATH=$PWD/../prebuilt/$PREBUILT_BASE/bin:$PATH which llvm-windres.exe) --target=$arch-w64-mingw32" \
   NM="$(PATH=$PWD/../prebuilt/$PREBUILT_BASE/bin:$PATH which llvm-nm.exe)" \
   OBJDUMP="$(PATH=$PWD/../prebuilt/$PREBUILT_BASE/bin:$PATH which llvm-objdump.exe)" \
   STRIP="$(PATH=$PWD/../prebuilt/$PREBUILT_BASE/bin:$PATH which llvm-strip.exe)" \
   CFLAGS="-D_FORTIFY_SOURCE=2" \
   LDFLAGS="$(if [ "$arch" == "armv7" ] || [ "$arch" == "aarch64" ]; then echo "-lmsvcrt -lmingwex"; fi)" \
   &&
   #CFLAGS="$(if [ "$arch" == "armv7" ] || [ "$arch" == "aarch64" ]; then echo "-femulated-tls"; fi)" \
   #CFLAGS="-I$PWD/../stage1/include -I$PWD/../stage1/include/$RUNPLATFORM/c++/v1 -I$PWD/../stage1/include/c++/v1 $(if [ "$arch" == "aarch64" ]; then echo "-D__aarch64__"; fi)" \
   #LDFLAGS="-L$PWD/../stage1/lib -Wl,-no-undefined" \
   #LDFLAGS="-Lstage1/$arch-w64-mingw32/lib $(if [ "$arch" == "armv7" ] || [ "$arch" == "aarch64" ]; then echo "-lmsvcrt -lmingwex"; fi)" \
  cd .. &&
  #-rtlib=compiler-rt -unwindlib=libunwind -stdlib=libc++ 
  #-Wl,-m,$(case $arch in i686) echo "i386pe";; x86_64) echo "i386pep";; armv7) echo "thumb2pe";; aarch64) echo "arm64pe";; esac)
  # fix detection of shared libraries
  sed -i.bak2 -e "s/\(deplibs_check_method=\"\)[^\"]*/\1pass_all/" build_mingw-w64_winpthreads_stage1_$arch/libtool &&
  # fix link issues in build_mingw-w64/mingw-w64-libraries/winpthreads/
  sed -i.bak -e "s?\(-o \)\([^ ]*\)\(.*\) -link \(-dll\)?-shared -s -mwindows \1.libs/libwinpthread-1.dll -Wl,--out-implib,\2 \3 \4?" build_mingw-w64_winpthreads_stage1_$arch/libtool &&
  sed -i.bak -e "s?\$(AM_V_CCLD).*\$(libwinpthread_la_OBJECTS).*?& \&\& \$(AR) \$(ARFLAGS) .libs/libwinpthread.a \$(libwinpthread_la_OBJECTS:.lo=.o) \&\& cp -f .libs/libwinpthread.a .libs/libwinpthread.lib?" build_mingw-w64_winpthreads_stage1_$arch/Makefile &&
  wl-showstatus build-install &&
  # build include files and make them available
  #PATH=$PWD/prebuilt/bin:$PATH make -Cbuild_mingw-w64_winpthreads_stage1_$arch install-strip &&
  make -Cbuild_mingw-w64_winpthreads_stage1_$arch install-strip &&
  #make -Cbuild_mingw-w64_winpthreads_stage1_$arch install-strip CFLAGS="$(if [ "$arch" == "armv7" ] || [ "$arch" == "aarch64" ]; then echo "-femulated-tls"; fi)" &&
  cp -u build_mingw-w64_winpthreads_stage1_$arch/fakelib/*.a stage1/$arch-w64-mingw32/lib/ &&
  #mkdir -p stage1/$arch-w64-mingw32 &&
  #cp -rf mingw-w64_winpthreads_$arch/* stage1/$arch-w64-mingw32/ &&
  #mkdir -p stage1/lib/$arch-w64-mingw32 &&
  #cp -rf mingw-w64_winpthreads_$arch/* stage1/lib/$arch-w64-mingw32/ &&
  ##mkdir -p stage1/$arch-w64-windows-gnu/lib &&
  ##cp -rf mingw-w64_winpthreads_$arch/lib/* stage1/$arch-w64-windows-gnu/lib/ &&
  touch SUCCESS_$arch || break
 done &&
 if [ $(ls -1 SUCCESS_*|wc -l) -ne 4 ]; then false; fi &&
 rm -f SUCCESS_* &&
    echo OK


 # build MinGW-w64 gendef
 mkdir -p build_mingw-w64-gendef &&
 wl-showstatus configure &&
 cd build_mingw-w64-gendef &&
 $MINGWPREFIX/src/mingw-w64/mingw-w64-tools/gendef/configure --prefix=$PWD/../stage1 \
  --build=$BUILDPLATFORM \
  --host=$RUNPLATFORM \
   CC="$(PATH=$PWD/../prebuilt/$PREBUILT_BASE/bin:$PATH which clang.exe) -fuse-ld=lld" \
   CXX="$(PATH=$PWD/../prebuilt/$PREBUILT_BASE/bin:$PATH which clang++.exe) -fuse-ld=lld" \
   AS="$(PATH=$PWD/../prebuilt/$PREBUILT_BASE/bin:$PATH which llvm-as.exe)" \
   LD="$(PATH=$PWD/../prebuilt/$PREBUILT_BASE/bin:$PATH which lld-link.exe)" \
   DLLTOOL="$(PATH=$PWD/../prebuilt/$PREBUILT_BASE/bin:$PATH which llvm-dlltool.exe)" \
   AR="$(PATH=$PWD/../prebuilt/$PREBUILT_BASE/bin:$PATH which llvm-ar.exe)" \
   RANLIB="$(PATH=$PWD/../prebuilt/$PREBUILT_BASE/bin:$PATH which llvm-ranlib.exe)" \
   RC="$(PATH=$PWD/../prebuilt/$PREBUILT_BASE/bin:$PATH which llvm-windres.exe) --target=$arch-w64-mingw32" \
   NM="$(PATH=$PWD/../prebuilt/$PREBUILT_BASE/bin:$PATH which llvm-nm.exe)" \
   OBJDUMP="$(PATH=$PWD/../prebuilt/$PREBUILT_BASE/bin:$PATH which llvm-objdump.exe)" \
   STRIP="$(PATH=$PWD/../prebuilt/$PREBUILT_BASE/bin:$PATH which llvm-strip.exe)" \
   CFLAGS="-D_FORTIFY_SOURCE=2" \
   LDFLAGS="$(if [ "$arch" == "armv7" ] || [ "$arch" == "aarch64" ]; then echo "-lmsvcrt -lmingwex"; fi)" \
  &&
 #LDFLAGS="-Wl,--unwindlib=compiler-rt" &&
 cd .. &&
 wl-showstatus build &&
 make -Cbuild_mingw-w64-gendef install-strip &&
    echo OK

 # build MinGW-w64 widl (probably okay to only build for $HOST)
 for arch in i686 x86_64 armv7 aarch64; do
  mkdir -p build_mingw-w64-widl-$arch &&
  wl-showstatus configure &&
  cd build_mingw-w64-widl-$arch &&
  PATH=$INSTALLPREFIX/share/llvm/bin:$PATH \
  $MINGWPREFIX/src/mingw-w64/mingw-w64-tools/widl/configure --prefix=$PWD/../stage1/$arch-w64-mingw32 \
   --build=$BUILDPLATFORM \
   --host=$RUNPLATFORM \
   --target=$arch-w64-mingw32 \
   --with-widl-includedir=../include \
    CC="$(PATH=$PWD/../prebuilt/$PREBUILT_BASE/bin:$PATH which clang.exe) -fuse-ld=lld -target $arch-w64-mingw32 $(if [ "$arch" == "armv7" ]; then echo "-march=armv7-a -mtune=armv7-a+vfpv4+neon+thumb2"; fi) $(if [ "$arch" == "armv7" ] || [ "$arch" == "aarch64" ]; then echo "-femulated-tls"; fi)" \
    CXX="$(PATH=$PWD/../prebuilt/$PREBUILT_BASE/bin:$PATH which clang++.exe) -fuse-ld=lld -target $arch-w64-mingw32" \
    AS="$(PATH=$PWD/../prebuilt/$PREBUILT_BASE/bin:$PATH which llvm-as.exe)" \
    LD="$(PATH=$PWD/../prebuilt/$PREBUILT_BASE/bin:$PATH which lld-link.exe)" \
    DLLTOOL="$(PATH=$PWD/../prebuilt/$PREBUILT_BASE/bin:$PATH which llvm-dlltool.exe)" \
    AR="$(PATH=$PWD/../prebuilt/$PREBUILT_BASE/bin:$PATH which llvm-ar.exe)" \
    RANLIB="$(PATH=$PWD/../prebuilt/$PREBUILT_BASE/bin:$PATH which llvm-ranlib.exe)" \
    RC="$(PATH=$PWD/../prebuilt/$PREBUILT_BASE/bin:$PATH which llvm-windres.exe) --target=$arch-w64-mingw32" \
    NM="$(PATH=$PWD/../prebuilt/$PREBUILT_BASE/bin:$PATH which llvm-nm.exe)" \
    OBJDUMP="$(PATH=$PWD/../prebuilt/$PREBUILT_BASE/bin:$PATH which llvm-objdump.exe)" \
    STRIP="$(PATH=$PWD/../prebuilt/$PREBUILT_BASE/bin:$PATH which llvm-strip.exe)" \
    CFLAGS="-D_FORTIFY_SOURCE=2" \
    LDFLAGS="$(if [ "$arch" == "armv7" ] || [ "$arch" == "aarch64" ]; then echo "-lmsvcrt -lmingwex"; fi)" \
   &&
  #--with-widl-includedir=$INSTALLPREFIX/share/llvm/include &&
  cd .. &&
  wl-showstatus build &&
  PATH=$PWD/stage1/bin:$PATH \
  make -Cbuild_mingw-w64-widl-$arch install-strip &&
  touch SUCCESS_$arch || break
 done &&
 if [ $(ls -1 SUCCESS_*|wc -l) -ne 4 ]; then false; fi &&
 rm -f SUCCESS_* &&
 ln -sf ../$HOST/bin/$HOST-widl.exe $PWD/stage1/bin/widl.exe &&
    echo OK






mkdir -p build_stage1 &&
 # build main LLVM suite
 wl-showstatus configure &&
 #libunwind;openmp;polly;pstl;flang;polly;mlir;pstl
 #-DLLVM_ENABLE_PROJECTS:STRING="clang;lld" \
 #-DLLVM_ENABLE_RUNTIMES:STRING="compiler-rt;libcxx;libcxxabi" \
 PATH=$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH \
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$PWD/stage1 -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
  -DBUILD_SHARED_LIBS:BOOL=ON \
  -DLLVM_BUILD_LLVM_DYLIB:BOOL=OFF \
  -DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;lld;lldb;libclc;pstl;mlir;flang" \
  -DLLVM_ENABLE_RUNTIMES:STRING="compiler-rt;libcxx;libcxxabi;libunwind" \
  -DLLVM_TARGETS_TO_BUILD:STRING="X86;ARM;AArch64" \
  -DLLVM_RUNTIME_TARGETS=default \
  -DLLVM_HOST_TRIPLE:STRING=$(echo $BUILDPLATFORM|sed -e "s/-.*$//")-w64-mingw32 \
  -DLLVM_DEFAULT_TARGET_TRIPLE=$(echo $BUILDPLATFORM|sed -e "s/-.*$//")-w64-mingw32 \
  -DLLVM_BUILD_STATIC=OFF \
  -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF \
  -DLLVM_CCACHE_BUILD:BOOL=OFF \
  -DLLVM_ENABLE_MODULES:BOOL=OFF \
  -DLLVM_ENABLE_PLUGINS:BOOL=ON \
  -DLLVM_ENABLE_THREADS:BOOL=ON \
  -DLLVM_ENABLE_UNWIND_TABLES:BOOL=ON \
  -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF \
  -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON \
  -DLLVM_ENABLE_LTO:STRING=OFF \
  -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) \
  -DLLVM_ENABLE_RTTI:BOOL=ON \
  -DLLVM_ENABLE_TERMINFO:BOOL=OFF \
  -DLLVM_ENABLE_Z3_SOLVER:BOOL=ON \
  -DLLVM_Z3_INSTALL_DIR:STRING=$MINGWPREFIX \
  -DLLVM_ENABLE_FFI:BOOL=OFF \
  -DLLVM_ENABLE_LIBXML2:BOOL=ON \
  -DLLVM_ENABLE_PIC:BOOL=OFF \
  -DLLVM_USE_RELATIVE_PATHS_IN_DEBUG_INFO:BOOL=ON \
  -DLLVM_USE_RELATIVE_PATHS_IN_FILES:BOOL=ON \
  -DLLVM_INSTALL_BINUTILS_SYMLINKS:BOOL=OFF \
  -DLLVM_INSTALL_CCTOOLS_SYMLINKS:BOOL=OFF \
  -DLLVM_ENABLE_DOXYGEN:BOOL=OFF -DDOXYGEN_EXECUTABLE:FILEPATH= -DDOXYGEN_DOT_EXECUTABLE:FILEPATH= \
  -DLLVM_ENABLE_SPHINX=OFF \
  -DLLVM_INCLUDE_DOCS:BOOL=OFF \
  -DLLVM_BUILD_EXAMPLES:BOOL=OFF \
  -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF \
  -DLLVM_INCLUDE_BENCHMARKS:BOOL=OFF \
  -DLLVM_INCLUDE_TESTS:BOOL=OFF \
  -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF \
  \
  -DCOMPILER_RT_DEFAULT_TARGET_ONLY=ON \
  -DCOMPILER_RT_USE_BUILTINS_LIBRARY=OFF \
  -DCOMPILER_RT_BUILD_BUILTINS:BOOL=OFF \
  -DCOMPILER_RT_BUILD_SANITIZERS:BOOL=OFF \
  -DCOMPILER_RT_BUILD_LIBFUZZER:BOOL=OFF \
  -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF \
  -DCOMPILER_RT_CAN_EXECUTE_TESTS:BOOL=OFF \
  -DSANITIZER_CXX_ABI=libc++ \
  \
  -DLIBCXX_ENABLE_SHARED:BOOL=Off \
  -DLIBCXX_ENABLE_STATIC:BOOL=ON \
  -DLIBCXX_USE_COMPILER_RT:BOOL=ON \
  -DLIBCXX_HAS_WIN32_THREAD_API:BOOL=ON \
  -DLIBCXX_HAS_PTHREAD_API:BOOL=OFF \
  -DLIBCXX_ENABLE_EXPERIMENTAL_LIBRARY:BOOL=OFF \
  -DLIBCXX_CXX_ABI=libcxxabi \
  -DLIBCXX_CXX_ABI_INCLUDE_PATHS=$PWD/libcxxabi/include \
  -DLIBCXX_CXX_ABI_LIBRARY_PATH:PATH=$PWD/build_libcxxabi/lib \
  -DLIBCXX_LIBDIR_SUFFIX="" \
  -DLIBCXX_INCLUDE_TESTS:BOOL=OFF \
  -DLIBCXX_ENABLE_ABI_LINKER_SCRIPT:BOOL=OFF \
  \
  -DLIBCXXABI_ENABLE_SHARED:BOOL=Off \
  -DLIBCXXABI_ENABLE_STATIC:BOOL=ON \
  -DLIBCXXABI_USE_COMPILER_RT:BOOL=ON \
  -DLIBCXXABI_LIBCXX_INCLUDES:PATH=$PWD/build_libcxx/include/c++/v1 \
  -DLIBCXXABI_LIBDIR_SUFFIX="" \
  -DLIBCXXABI_ENABLE_EXCEPTIONS:BOOL=ON \
  -DLIBCXXABI_ENABLE_ASSERTIONS:BOOL=OFF \
  \
  -DLIBUNWIND_ENABLE_SHARED:BOOL=Off \
  -DLIBUNWIND_ENABLE_STATIC:BOOL=ON \
  -DLIBUNWIND_USE_COMPILER_RT:BOOL=ON \
  \
  -DLIBCLANG_BUILD_STATIC:BOOL=OFF \
  -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF \
  -DCLANG_PLUGIN_SUPPORT:BOOL=ON \
  -DCLANG_ENABLE_CLANGD:BOOL=ON \
  -DCLANG_DEFAULT_RTLIB:STRING=libgcc \
  -DCLANG_DEFAULT_CXX_STDLIB:STRING=libstdc++ \
  -DCLANG_DEFAULT_UNWINDLIB:STRING=none \
  -DCLANG_DEFAULT_OPENMP_RUNTIME:STRING=libgomp \
  -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF \
  -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON \
  -DCLANG_TOOL_APINOTES_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_ARCMT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_C_ARCMT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_C_INDEX_TEST_BUILD:BOOL=OFF \
  -DCLANG_INCLUDE_DOCS:BOOL=OFF \
  -DCLANG_BUILD_EXAMPLES:BOOL=OFF \
  -DCLANG_INCLUDE_TESTS:BOOL=OFF \
  \
  -DLLDB_TOOL_LLDB_SERVER_BUILD:BOOL=ON \
  -DLLDB_TOOL_LLDB_VSCODE_BUILD:BOOL=ON \
  -DLLDB_ENABLE_LIBEDIT:BOOL=OFF \
  -DLLDB_ENABLE_CURSES:BOOL=ON \
  -DLLDB_ENABLE_LIBXML2:BOOL=ON \
  -DLLDB_ENABLE_LZMA:BOOL=ON \
  -DLLDB_ENABLE_PYTHON:BOOL=ON \
  \
  -DCLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
  -DLLD_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
  -DFLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
  \
  -DCMAKE_ASM_MASM_COMPILER:FILEPATH=$(PATH=$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ml.exe) \
  -DCMAKE_ASM_COMPILER:FILEPATH=$(PATH=$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which clang.exe) \
  -DCMAKE_ASM_COMPILER_AR:FILEPATH=$(PATH=$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ar.exe) \
  -DCMAKE_ASM_COMPILER_RANLIB:FILEPATH=$(PATH=$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ranlib.exe) \
  -DCMAKE_C_COMPILER:FILEPATH=$(PATH=$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which clang.exe) \
  -DCMAKE_C_COMPILER_AR:FILEPATH=$(PATH=$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ar.exe) \
  -DCMAKE_C_COMPILER_RANLIB:FILEPATH=$(PATH=$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ranlib.exe) \
  -DCMAKE_CXX_COMPILER:FILEPATH=$(PATH=$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which clang++.exe) \
  -DCMAKE_CXX_COMPILER_AR:FILEPATH=$(PATH=$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ar.exe) \
  -DCMAKE_CXX_COMPILER_RANLIB:FILEPATH=$(PATH=$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ranlib.exe) \
  -DCMAKE_RC_COMPILER:FILEPATH=$(PATH=$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-windres.exe) \
  -DCMAKE_AR:FILEPATH=$(PATH=$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ar.exe) \
  -DCMAKE_RANLIB:FILEPATH=$(PATH=$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ranlib.exe) \
  -DCMAKE_READELF:FILEPATH=$(PATH=$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-readelf.exe) \
  -DCMAKE_DLLTOOL:FILEPATH=$(PATH=$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-dlltool.exe) \
  -DCMAKE_NM:FILEPATH=$(PATH=$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-nm.exe) \
  -DCMAKE_OBJCOPY:FILEPATH=$(PATH=$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-objcopy.exe) \
  -DCMAKE_OBJDUMP:FILEPATH=$(PATH=$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-objdump.exe) \
  -DCMAKE_LINKER:FILEPATH=$(PATH=$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-link.exe) \
  -DCMAKE_STRIP:FILEPATH=$(PATH=$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-strip.exe) \
  -DGOLD_EXECUTABLE:FILEPATH=$(PATH=$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which ld.lld.exe) \
  \
  -DCMAKE_CXX_FLAGS:STRING="-D_WIN32_WINNT=0x0600 -I$PWD/stage1/$RUNPLATFORM/include -I$PWD/prebuilt/$PREBUILT_BASE/include -I$MINGWPREFIX/share/llvm/$RUNPLATFORM/include -I$MINGWPREFIX/share/llvm/$PREBUILT_BASE/include" \
  -DCMAKE_{SHARED,MODULE,EXE}_LINKER_FLAGS:STRING="-lwinpthread -L$PWD/stage1/$RUNPLATFORM/lib -L$PWD/prebuilt/$PREBUILT_BASE/lib -L$PWD/prebuilt/$PREBUILT_BASE/$RUNPLATFORM/lib -L$MINGWPREFIX/share/llvm/$RUNPLATFORM/lib -L$MINGWPREFIX/share/llvm/$PREBUILT_BASE/lib -L$MINGWPREFIX/share/llvm/$PREBUILT_BASE/$RUNPLATFORM/lib" \
  \
  -DPython3_FIND_REGISTRY:BOOL=NEVER \
  -DPython3_EXECUTABLE:FILEPATH=$MINGWPREFIX/share/python/bin/python.exe \
  -Sllvm -Bbuild_stage1 &&
 wl-showstatus build-install &&
 PATH=$MINGWPREFIX/share/python/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$PATH ninja -Cbuild_stage1 install/strip &&
 strip build_stage1/bin/clang-tblgen.exe &&
 cp -f build_stage1/bin/clang-tblgen.exe stage1/bin/ &&
 cp -f stage1/bin/clang.exe stage1/bin/gcc_renamed_clang.exe &&
 cp -f stage1/bin/clang++.exe stage1/bin/g++_renamed_clang++.exe &&
    echo OK







 # build runtimes
 for arch in i686 x86_64 armv7 aarch64; do
  mkdir -p build_cross_runtimes_$arch &&
  wl-showstatus configure &&
  PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$PATH \
  cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$PWD/cross -DCMAKE_BUILD_TYPE:STRING=Release  \
   -DCMAKE_CROSSCOMPILING:BOOL=ON \
   -DCMAKE_SYSTEM_NAME:STRING=Windows \
   -DLLVM_ENABLE_RUNTIMES:STRING="compiler-rt" \
   -DLLVM_ENABLE_ASSERTIONS:BOOL=ON \
   -DLLVM_ENABLE_EH:BOOL=ON \
   -DLLVM_ENABLE_RTTI:BOOL=ON \
   \
   -DCMAKE_ASM_COMPILER_TARGET=$arch-w64-mingw32 \
   -DCMAKE_C_COMPILER_TARGET=$arch-w64-mingw32 \
   -DCMAKE_CXX_COMPILER_TARGET=$arch-w64-mingw32 \
   -DCOMPILER_RT_DEFAULT_TARGET_TRIPLE:STRING=$arch-w64-mingw32 \
   -DCOMPILER_RT_DEFAULT_TARGET_ONLY:BOOL=OFF \
   -DCOMPILER_RT_USE_LIBCXX:BOOL=ON \
   -DCOMPILER_RT_BUILD_XRAY:BOOL=OFF \
   -DCOMPILER_RT_USE_BUILTINS_LIBRARY=ON \
   -DCOMPILER_RT_BUILD_BUILTINS:BOOL=ON \
   -DCOMPILER_RT_BUILD_LIBFUZZER:BOOL=OFF \
   -DCOMPILER_RT_BUILD_MEMPROF:BOOL=OFF \
   -DCOMPILER_RT_BUILD_PROFILE:BOOL=OFF \
   -DCOMPILER_RT_BUILD_SANITIZERS:BOOL=OFF \
   -DCOMPILER_RT_SANITIZERS_TO_BUILD:STRING="" \
   -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF \
   \
   -DLIBCXXABI_ENABLE_SHARED:BOOL=ON \
   -DLIBCXXABI_ENABLE_STATIC:BOOL=ON \
   -DLIBCXXABI_TARGET_TRIPLE:STRING=$arch-w64-mingw32 \
   -DLIBCXXABI_USE_COMPILER_RT:BOOL=ON \
   -DLIBCXXABI_LIBCXX_INCLUDES:PATH=$PWD/build_libcxx/include/c++/v1 \
   -DLIBCXXABI_LIBDIR_SUFFIX="" \
   -DLIBCXXABI_INCLUDE_TESTS:BOOL=OFF \
   \
   -DLIBUNWIND_ENABLE_SHARED:BOOL=ON \
   -DLIBUNWIND_ENABLE_STATIC:BOOL=ON \
   -DLIBUNWIND_USE_COMPILER_RT:BOOL=ON \
   \
   -DCMAKE_SYSTEM_PROGRAM_PATH=$PWD/native/bin \
   -DCMAKE_FIND_ROOT_PATH="$PWD/native" \
   -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER \
   -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY \
   -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY \
   \
   -DLLVM_CONFIG_PATH:STRING=$PWD/stage1/bin/llvm-config.exe \
    \
   -DCMAKE_ASM_MASM_COMPILER:FILEPATH=$PWD/stage1/bin/llvm-ml.exe \
   -DCMAKE_ASM_COMPILER:FILEPATH=$PWD/stage1/bin/clang.exe \
   -DCMAKE_ASM_COMPILER_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
   -DCMAKE_ASM_COMPILER_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
   -DCMAKE_C_COMPILER:FILEPATH=$PWD/stage1/bin/clang.exe \
   -DCMAKE_C_COMPILER_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
   -DCMAKE_C_COMPILER_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
   -DCMAKE_CXX_COMPILER:FILEPATH=$PWD/stage1/bin/clang++.exe \
   -DCMAKE_CXX_COMPILER_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
   -DCMAKE_CXX_COMPILER_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
   -DCMAKE_RC_COMPILER:FILEPATH=$PWD/stage1/bin/llvm-windres.exe \
   -DCMAKE_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
   -DCMAKE_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
   -DCMAKE_READELF:FILEPATH=$PWD/stage1/bin/llvm-readelf.exe \
   -DCMAKE_DLLTOOL:FILEPATH=$PWD/stage1/bin/llvm-dlltool.exe \
   -DCMAKE_NM:FILEPATH=$PWD/stage1/bin/llvm-nm.exe \
   -DCMAKE_OBJCOPY:FILEPATH=$PWD/stage1/bin/llvm-objcopy.exe \
   -DCMAKE_OBJDUMP:FILEPATH=$PWD/stage1/bin/llvm-objdump.exe \
   -DCMAKE_LINKER:FILEPATH=$PWD/stage1/bin/llvm-link.exe \
   -DCMAKE_STRIP:FILEPATH=$PWD/stage1/bin/llvm-strip.exe \
   -DGOLD_EXECUTABLE:FILEPATH=$PWD/stage1/bin/ld.lld.exe \
   -DCMAKE_ASM_FLAGS:STRING="-g0 -v -integrated-as -fuse-ld=lld" \
   -DCMAKE_C_FLAGS:STRING="-g0 -fuse-ld=lld -D_WIN32_WINNT=0x0600 -I$PWD/stage1/$RUNPLATFORM/include" \
   -DCMAKE_CXX_FLAGS:STRING="-g0 -fuse-ld=lld -D_WIN32_WINNT=0x0600 -I$PWD/stage1/$RUNPLATFORM/include" \
   -DCMAKE_{SHARED,MODULE,EXE}_LINKER_FLAGS:STRING="-fuse-ld=lld -lwinpthread -L$PWD/stage1/$RUNPLATFORM/lib -L$PWD/stage1/lib " \
   \
   -DPython3_FIND_REGISTRY:BOOL=NEVER \
   -DPython3_EXECUTABLE:FILEPATH=$MINGWPREFIX/share/python/bin/python.exe \
   -Sruntimes -Bbuild_cross_runtimes_$arch &&
  #-DCMAKE_ASM_COMPILER:FILEPATH=$PWD/prebuilt/bin/$arch-w64-mingw32-as.exe \
  #-DCMAKE_ASM_FLAGS:STRING="-g0 -v -no-integrated-as -fuse-ld=lld" \
  #-DCMAKE_CXX_FLAGS:STRING="-g0 -fuse-ld=lld -I$PWD/prebuilt/include/c++/v1" \
  sed -i.bak -e "s?/IGNORE:[0-9]*??" build_cross_runtimes_$arch/build.ninja &&
  #sed -i.bak2 -e "s?-lNOTFOUND??g" build_cross_runtimes_$arch/build.ninja &&
  wl-showstatus build-install &&
  PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$PATH \
  ninja -Cbuild_cross_runtimes_$arch install/strip &&
  touch SUCCESS_$arch || break
 done &&
 if [ $(ls -1 SUCCESS_*|wc -l) -ne 4 ]; then false; fi &&
 rm -f SUCCESS_* &&
    echo OK





















mkdir -p build_stage1 &&
 # build main LLVM suite
 wl-showstatus configure &&
 #-DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;lld;flang" \
 PATH=$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH \
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$PWD/stage1 -DCMAKE_BUILD_TYPE:STRING=Release \
  -DBUILD_SHARED_LIBS:BOOL=OFF \
  -DLLVM_BUILD_LLVM_DYLIB:BOOL=ON \
  -DLLVM_ENABLE_PROJECTS:STRING="clang;lld" \
  -DLLVM_ENABLE_RUNTIMES:STRING="" \
  -DLLVM_TARGETS_TO_BUILD:STRING="ARM;AArch64;X86" \
  -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF \
  -DLLVM_INSTALL_TOOLCHAIN_ONLY:BOOL=ON \
  \
  -DCLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
  -DLLD_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
  -DFLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
  \
  -DCMAKE_ASM_COMPILER:FILEPATH=$(PATH=$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which clang.exe) \
  -DCMAKE_ASM_COMPILER_AR:FILEPATH=$(PATH=$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ar.exe) \
  -DCMAKE_ASM_COMPILER_RANLIB:FILEPATH=$(PATH=$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ranlib.exe) \
  -DCMAKE_C_COMPILER:FILEPATH=$(PATH=$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which clang.exe) \
  -DCMAKE_C_COMPILER_AR:FILEPATH=$(PATH=$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ar.exe) \
  -DCMAKE_C_COMPILER_RANLIB:FILEPATH=$(PATH=$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ranlib.exe) \
  -DCMAKE_CXX_COMPILER:FILEPATH=$(PATH=$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which clang++.exe) \
  -DCMAKE_CXX_COMPILER_AR:FILEPATH=$(PATH=$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ar.exe) \
  -DCMAKE_CXX_COMPILER_RANLIB:FILEPATH=$(PATH=$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ranlib.exe) \
  -DCMAKE_RC_COMPILER:FILEPATH=$(PATH=$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-windres.exe) \
  -DCMAKE_AR:FILEPATH=$(PATH=$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ar.exe) \
  -DCMAKE_RANLIB:FILEPATH=$(PATH=$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ranlib.exe) \
  -DCMAKE_READELF:FILEPATH=$(PATH=$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-readelf.exe) \
  -DCMAKE_DLLTOOL:FILEPATH=$(PATH=$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-dlltool.exe) \
  -DCMAKE_NM:FILEPATH=$(PATH=$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-nm.exe) \
  -DCMAKE_OBJCOPY:FILEPATH=$(PATH=$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-objcopy.exe) \
  -DCMAKE_OBJDUMP:FILEPATH=$(PATH=$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-objdump.exe) \
  -DCMAKE_LINKER:FILEPATH=$(PATH=$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-link.exe) \
  -DCMAKE_STRIP:FILEPATH=$(PATH=$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-strip.exe) \
  -DGOLD_EXECUTABLE:FILEPATH=$(PATH=$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which ld.lld.exe) \
  \
  -DCMAKE_CXX_FLAGS:STRING="-g0 -D_WIN32_WINNT=0x0600 -I$PWD/stage1/$RUNPLATFORM/include -I$PWD/prebuilt/$PREBUILT_BASE/include -I$MINGWPREFIX/share/llvm/$RUNPLATFORM/include -I$MINGWPREFIX/share/llvm/$PREBUILT_BASE/include" \
  -DCMAKE_{SHARED,MODULE,EXE}_LINKER_FLAGS:STRING="-lpthread -L$PWD/stage1/$RUNPLATFORM/lib -L$PWD/prebuilt/$PREBUILT_BASE/lib -L$PWD/prebuilt/$PREBUILT_BASE/$RUNPLATFORM/lib -L$MINGWPREFIX/share/llvm/$RUNPLATFORM/lib -L$MINGWPREFIX/share/llvm/$PREBUILT_BASE/lib -L$MINGWPREFIX/share/llvm/$PREBUILT_BASE/$RUNPLATFORM/lib" \
  \
  -DPython3_FIND_REGISTRY:BOOL=NEVER \
  -DPython3_EXECUTABLE:FILEPATH=$MINGWPREFIX/share/python/bin/python.exe \
  -Sllvm -Bbuild_stage1 &&
 ## fix missing link libraries
 #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lpthread/" build_stage1/build.ninja &&
 wl-showstatus build-install &&
 PATH=$MINGWPREFIX/share/python/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$PATH ninja -Cbuild_stage1 install/strip &&
 strip build_stage1/bin/clang-tblgen.exe &&
 cp -f build_stage1/bin/clang-tblgen.exe stage1/bin/ &&
 cp -f stage1/bin/clang.exe stage1/bin/gcc_renamed_clang.exe &&
 cp -f stage1/bin/clang++.exe stage1/bin/g++_renamed_clang++.exe &&
 cp -u build_stage1/bin/llvm-{dlltool,windres}.exe stage1/bin/ &&



 # build MinGW-w64 headers
 mkdir -p build_mingw-w64-headers &&
 wl-showstatus configure &&
 cd build_mingw-w64-headers &&
 PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH  \
 $MINGWPREFIX/src/mingw-w64/mingw-w64-headers/configure --prefix=$PWD/../stage1 --build=$BUILDPLATFORM --host=$RUNPLATFORM \
  --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrt"; else echo "msvcrt-os"; fi) \
  --enable-sdk=all \
  --enable-idl &&
 cd .. &&
 wl-showstatus build-install &&
 PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH  \
 make -Cbuild_mingw-w64-headers install-strip &&
 
 # build MinGW-w64 crt
 for arch in i686 x86_64 armv7 aarch64; do
  mkdir -p build_mingw-w64-crt-$arch &&
  wl-showstatus configure &&
  cd build_mingw-w64-crt-$arch &&
  PATH=$PWD/../stage1/bin:$PWD/../prebuilt/$PREBUILT_BASE/bin:$PWD/../prebuilt/$PREBUILT_BASE/$arch-w64-mingw32/bin:$MINGWPREFIX/share/llvm/$arch-w64-mingw32/bin:$MINGWPREFIX/share/llvm/bin:$PATH:$(cygpath $WINDIR/System32/downlevel) \
  $MINGWPREFIX/src/mingw-w64/mingw-w64-crt/configure --prefix=$PWD/../stage1/$arch-w64-mingw32 --build=$BUILDPLATFORM --host=$arch-w64-mingw32 \
   --$(if [ "$arch" == "i686" ]; then echo "enable"; else echo "disable"; fi)-lib32 \
   --$(if [ "$arch" == "x86_64" ]; then echo "enable"; else echo "disable"; fi)-lib64 \
   --$(if [ "$arch" == "armv7" ]; then echo "enable"; else echo "disable"; fi)-libarm32 \
   --$(if [ "$arch" == "aarch64" ]; then echo "enable"; else echo "disable"; fi)-libarm64 \
   --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrt"; else echo "msvcrt-os"; fi) \
   --enable-wildcard \
   CC="$PWD/../stage1/bin/clang.exe -fuse-ld=lld -target $arch-w64-mingw32 $(if [ "$arch" == "armv7" ]; then echo "-march=armv7-a -mtune=armv7-a+vfpv4+neon+thumb2"; fi)" \
   CXX="$PWD/../stage1/bin/clang++.exe -fuse-ld=lld" \
   AS="$PWD/../stage1/bin/llvm-as.exe" \
   LD="$PWD/../stage1/bin/lld-link.exe" \
   DLLTOOL="$PWD/../stage1/bin/llvm-dlltool.exe" \
   AR="$PWD/../stage1/bin/llvm-ar.exe" \
   RANLIB="$PWD/../stage1/bin/llvm-ranlib.exe" \
   RC="$PWD/../stage1/bin/llvm-windres.exe" \
   NM="$PWD/../stage1/bin/llvm-nm.exe" \
   OBJDUMP="$PWD/../stage1/bin/llvm-objdump.exe" \
   &&
  cd .. &&
  #wl-showstatus build &&
  #PATH=$PWD/prebuilt/$PREBUILT_BASE/$arch-w64-mingw32/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/$arch-w64-mingw32/bin:$MINGWPREFIX/share/llvm/bin:$PATH:$(cygpath $WINDIR/System32/downlevel) \
  #make -Cbuild_mingw-w64-crt-$arch &&
  wl-showstatus build-install &&
  PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/$arch-w64-mingw32/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/$arch-w64-mingw32/bin:$MINGWPREFIX/share/llvm/bin:$PATH:$(cygpath $WINDIR/System32/downlevel) \
  make -Cbuild_mingw-w64-crt-$arch install-strip &&
  touch SUCCESS_$arch || break
 done &&
 if [ $(ls -1 SUCCESS_*|wc -l) -ne 4 ]; then false; fi &&
 rm -f SUCCESS_* &&
 



 # create dummy libraries
 mkdir -p dummylibs &&
 cp -f $MINGWDIR/lib/gcc/$RUNPLATFORM/*/libgcc*.a $MINGWDIR/lib/libgcc*.a dummylibs/ &&
 #ar cr dummylibs/libgcc.a
 #ar cr dummylibs/libgcc_s.a
 #ar cr dummylibs/libgcc_eh.a

 # build main LLVM suite
 mkdir -p build_stage1 &&
 wl-showstatus configure &&
 PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH \
 # -DLLVM_ENABLE_RUNTIMES:STRING="compiler-rt;libc;libcxx;libcxxabi;libunwind;openmp"
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$PWD/stage1 -DCMAKE_BUILD_TYPE:STRING=Release \
  -DBUILD_SHARED_LIBS:BOOL=OFF \
  -DLLVM_BUILD_LLVM_DYLIB:BOOL=ON \
  -DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;lld;flang" \
  -DLLVM_ENABLE_RUNTIMES:STRING="compiler-rt;libc;libcxx;libcxxabi;libunwind;openmp" \
  -DLLVM_TARGETS_TO_BUILD:STRING="ARM;AArch64;X86" \
  -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF \
  -DLLVM_INSTALL_TOOLCHAIN_ONLY:BOOL=ON \
  \
  -DCLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
  -DLLD_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
  -DFLANG_VENDOR:STRING="(built by Brecht Sanders$(echo $(if [ "$RELEASE" != "" ]; then echo -n ", r$RELEASE"; fi)))" \
  \
  -DLLVM_TABLEGEN:STRING=$PWD/stage1/bin/llvm-tblgen.exe \
  -DCLANG_TABLEGEN:STRING=$PWD/stage1/bin/clang-tblgen.exe \
  -DLLVM_CONFIG:STRING=$PWD/stage1/bin/llvm-config.exe \
  \
  -DCMAKE_ASM_COMPILER:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which clang.exe) \
  -DCMAKE_ASM_COMPILER_AR:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ar.exe) \
  -DCMAKE_ASM_COMPILER_RANLIB:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ranlib.exe) \
  -DCMAKE_C_COMPILER:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which clang.exe) \
  -DCMAKE_C_COMPILER_AR:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ar.exe) \
  -DCMAKE_C_COMPILER_RANLIB:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ranlib.exe) \
  -DCMAKE_CXX_COMPILER:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which clang++.exe) \
  -DCMAKE_CXX_COMPILER_AR:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ar.exe) \
  -DCMAKE_CXX_COMPILER_RANLIB:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ranlib.exe) \
  -DCMAKE_RC_COMPILER:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-windres.exe) \
  -DCMAKE_AR:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ar.exe) \
  -DCMAKE_RANLIB:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ranlib.exe) \
  -DCMAKE_READELF:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-readelf.exe) \
  -DCMAKE_DLLTOOL:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-dlltool.exe) \
  -DCMAKE_NM:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-nm.exe) \
  -DCMAKE_OBJCOPY:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-objcopy.exe) \
  -DCMAKE_OBJDUMP:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-objdump.exe) \
  -DCMAKE_LINKER:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-link.exe) \
  -DCMAKE_STRIP:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-strip.exe) \
  -DGOLD_EXECUTABLE:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which ld.lld.exe) \
  \
  -DCMAKE_C_FLAGS:STRING="-g0 -D_WIN32_WINNT=0x0600 -I$PWD/stage1/$RUNPLATFORM/include -I$PWD/prebuilt/$PREBUILT_BASE/include -I$MINGWPREFIX/share/llvm/$RUNPLATFORM/include -I$MINGWPREFIX/share/llvm/$PREBUILT_BASE/include" \
  -DCMAKE_CXX_FLAGS:STRING="-g0 -D_WIN32_WINNT=0x0600 -I$PWD/stage1/$RUNPLATFORM/include -I$PWD/prebuilt/$PREBUILT_BASE/include -I$MINGWPREFIX/share/llvm/$RUNPLATFORM/include -I$MINGWPREFIX/share/llvm/$PREBUILT_BASE/include" \
  -DCMAKE_{SHARED,MODULE,EXE}_LINKER_FLAGS:STRING="-L$PWD/stage1/$RUNPLATFORM/lib -L$(cygpath -m $PWD/dummylibs) -L$PWD/stage1/$RUNPLATFORM/lib -L$PWD/prebuilt/$PREBUILT_BASE/lib -L$PWD/prebuilt/$PREBUILT_BASE/$RUNPLATFORM/lib -L$MINGWPREFIX/share/llvm/$RUNPLATFORM/lib -L$MINGWPREFIX/share/llvm/$PREBUILT_BASE/lib -L$MINGWPREFIX/share/llvm/$PREBUILT_BASE/$RUNPLATFORM/lib" \
  \
  -DPython3_FIND_REGISTRY:BOOL=NEVER \
  -DPython3_EXECUTABLE:FILEPATH=$MINGWPREFIX/share/python/bin/python.exe \
  -Sllvm -Bbuild_stage1 &&
 #-lmsvcrt -lucrt 
 ## fix missing link libraries
 #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lpthread/" build_stage1/build.ninja &&
 wl-showstatus build-install &&
 PATH=$MINGWPREFIX/share/python/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$PATH ninja -Cbuild_stage1 install/strip &&
   echo OK



 # build MinGW-w64 winpthreads
 for arch in i686 x86_64 armv7 aarch64; do
  mkdir -p build_mingw-w64_winpthreads_stage1_$arch &&
  wl-showstatus configure &&
  cd build_mingw-w64_winpthreads_stage1_$arch &&
  # CC="$PWD/../stage1/bin/clang.exe -fuse-ld=lld -target $arch-w64-mingw32 $(if [ "$arch" == "armv7" ]; then echo "-march=armv7-a -mtune=armv7-a+vfpv4+neon+thumb2"; fi) $(if [ "$arch" == "armv7" ] || [ "$arch" == "aarch64" ]; then echo "-femulated-tls"; fi)" \
  # CFLAGS="$(if [ "$arch" == "i686" ] || [ "$arch" == "x86_64" ]; then echo "-D_FORTIFY_SOURCE=2"; else echo "-femulated-tls"; fi)" \
  PATH=$PWD/../stage1/bin:$PWD/../prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH:$(cygpath $WINDIR/System32/downlevel) \
  $MINGWPREFIX/src/mingw-w64/mingw-w64-libraries/winpthreads/configure --prefix=$PWD/../stage1/$arch-w64-mingw32 \
   --build=$BUILDPLATFORM \
   --host=$arch-w64-mingw32 \
   --with-sysroot=$PWD/../stage1 \
   --without-gnu-ld \
   CC="$PWD/../stage1/bin/clang.exe -fuse-ld=lld -target $arch-w64-mingw32 $(if [ "$arch" == "armv7" ]; then echo "-march=armv7-a -mtune=armv7-a+vfpv4+neon+thumb2"; fi)" \
   CXX="$PWD/../stage1/bin/clang++.exe -fuse-ld=lld -target $arch-w64-mingw32" \
   AS="$PWD/../stage1/bin/llvm-as.exe" \
   LD="$PWD/../stage1/bin/lld-link.exe" \
   DLLTOOL="$PWD/../stage1/bin/llvm-dlltool.exe" \
   AR="$PWD/../stage1/bin/llvm-ar.exe" \
   RANLIB="$PWD/../stage1/bin/llvm-ranlib.exe" \
   RC="$PWD/../stage1/bin/llvm-windres.exe --target=$arch-w64-mingw32" \
   NM="$PWD/../stage1/bin/llvm-nm.exe" \
   OBJDUMP="$PWD/../stage1/bin/llvm-objdump.exe" \
   STRIP="$PWD/../stage1/bin/llvm-strip.exe" \
   CFLAGS="$(if [ "$arch" == "i686" ] || [ "$arch" == "x86_64" ]; then echo "-D_FORTIFY_SOURCE=2"; fi)" \
   LDFLAGS="$(if [ "$arch" == "armv7" ] || [ "$arch" == "aarch64" ]; then echo "-lmsvcrt -lmingwex"; fi)" \
   &&
   #CFLAGS="$(if [ "$arch" == "armv7" ] || [ "$arch" == "aarch64" ]; then echo "-femulated-tls"; fi)" \
   #CFLAGS="-I$PWD/../stage1/include -I$PWD/../stage1/include/$RUNPLATFORM/c++/v1 -I$PWD/../stage1/include/c++/v1 $(if [ "$arch" == "aarch64" ]; then echo "-D__aarch64__"; fi)" \
   #LDFLAGS="-L$PWD/../stage1/lib -Wl,-no-undefined" \
   #LDFLAGS="-Lstage1/$arch-w64-mingw32/lib $(if [ "$arch" == "armv7" ] || [ "$arch" == "aarch64" ]; then echo "-lmsvcrt -lmingwex"; fi)" \
  cd .. &&
  #-rtlib=compiler-rt -unwindlib=libunwind -stdlib=libc++ 
  #-Wl,-m,$(case $arch in i686) echo "i386pe";; x86_64) echo "i386pep";; armv7) echo "thumb2pe";; aarch64) echo "arm64pe";; esac)
  # fix detection of shared libraries
  sed -i.bak2 -e "s/\(deplibs_check_method=\"\)[^\"]*/\1pass_all/" build_mingw-w64_winpthreads_stage1_$arch/libtool &&
  # fix link issues in build_mingw-w64/mingw-w64-libraries/winpthreads/
  sed -i.bak -e "s?\(-o \)\([^ ]*\)\(.*\) -link \(-dll\)?-shared -s -mwindows \1.libs/libwinpthread-1.dll -Wl,--out-implib,\2 \3 \4?" build_mingw-w64_winpthreads_stage1_$arch/libtool &&
  sed -i.bak -e "s?\$(AM_V_CCLD).*\$(libwinpthread_la_OBJECTS).*?& \&\& \$(AR) \$(ARFLAGS) .libs/libwinpthread.a \$(libwinpthread_la_OBJECTS:.lo=.o) \&\& cp -f .libs/libwinpthread.a .libs/libwinpthread.lib?" build_mingw-w64_winpthreads_stage1_$arch/Makefile &&
  wl-showstatus build-install &&
  # build include files and make them available
  #PATH=$PWD/prebuilt/bin:$PATH make -Cbuild_mingw-w64_winpthreads_stage1_$arch install-strip &&
  PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH:$(cygpath $WINDIR/System32/downlevel) \
  make -Cbuild_mingw-w64_winpthreads_stage1_$arch install-strip &&
  #make -Cbuild_mingw-w64_winpthreads_stage1_$arch install-strip CFLAGS="$(if [ "$arch" == "armv7" ] || [ "$arch" == "aarch64" ]; then echo "-femulated-tls"; fi)" &&
  cp -u build_mingw-w64_winpthreads_stage1_$arch/fakelib/*.a stage1/$arch-w64-mingw32/lib/ &&
  #mkdir -p stage1/$arch-w64-mingw32 &&
  #cp -rf mingw-w64_winpthreads_$arch/* stage1/$arch-w64-mingw32/ &&
  #mkdir -p stage1/lib/$arch-w64-mingw32 &&
  #cp -rf mingw-w64_winpthreads_$arch/* stage1/lib/$arch-w64-mingw32/ &&
  ##mkdir -p stage1/$arch-w64-windows-gnu/lib &&
  ##cp -rf mingw-w64_winpthreads_$arch/lib/* stage1/$arch-w64-windows-gnu/lib/ &&
  touch SUCCESS_$arch || break
 done &&
 if [ $(ls -1 SUCCESS_*|wc -l) -ne 4 ]; then false; fi &&
 rm -f SUCCESS_* &&
    echo OK













 # build libcxx for supported platforms
 for arch in i686 x86_64 armv7 aarch64; do
  mkdir -p build_libcxx_$arch &&
  mkdir -p build_libcxx_$arch/fakelib &&
  ar cr build_libcxx_$arch/fakelib/libgcc.a
  ar cr build_libcxx_$arch/fakelib/libgcc_s.a
  wl-showstatus configure &&
  PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH \
  cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
   -DBUILD_SHARED_LIBS:BOOL=ON \
   -DLIBCXX_ENABLE_SHARED:BOOL=ON \
   -DLIBCXX_ENABLE_STATIC:BOOL=ON \
   -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM \
   -DLLVM_PATH:PATH=$PWD/llvm \
   -DLIBCXX_USE_COMPILER_RT:BOOL=ON \
   -DLIBCXX_HAS_WIN32_THREAD_API:BOOL=ON \
   -DLIBCXX_ENABLE_SHARED:BOOL=ON \
   -DLIBCXX_ENABLE_STATIC:BOOL=ON \
   -DLIBCXX_ENABLE_EXPERIMENTAL_LIBRARY:BOOL=OFF \
   -DLIBCXX_CXX_ABI=libcxxabi \
   -DLIBCXX_CXX_ABI_INCLUDE_PATHS=$PWD/libcxxabi/include \
   -DLIBCXX_CXX_ABI_LIBRARY_PATH:PATH=$PWD/build_libcxxabi/lib \
   -DLIBCXX_LIBDIR_SUFFIX="" \
   -DLIBCXX_INCLUDE_TESTS:BOOL=OFF \
   -DLIBCXX_ENABLE_ABI_LINKER_SCRIPT:BOOL=OFF \
   -DLLVM_MAIN_SRC_DIR:PATH=$PWD/llvm \
   -DLLVM_CONFIG_PATH:PATH=$PWD/stage1/bin/llvm-config.exe \
   \
   -DCMAKE_C_COMPILER_TARGET=$arch-windows-gnu \
   -DCMAKE_CXX_COMPILER_TARGET=$arch-windows-gnu \
   \
   -DCMAKE_ASM_COMPILER:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which clang.exe) \
   -DCMAKE_ASM_COMPILER_AR:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ar.exe) \
   -DCMAKE_ASM_COMPILER_RANLIB:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ranlib.exe) \
   -DCMAKE_C_COMPILER:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which clang.exe) \
   -DCMAKE_C_COMPILER_AR:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ar.exe) \
   -DCMAKE_C_COMPILER_RANLIB:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ranlib.exe) \
   -DCMAKE_CXX_COMPILER:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which clang++.exe) \
   -DCMAKE_CXX_COMPILER_AR:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ar.exe) \
   -DCMAKE_CXX_COMPILER_RANLIB:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ranlib.exe) \
   -DCMAKE_RC_COMPILER:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-windres.exe) \
   -DCMAKE_AR:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ar.exe) \
   -DCMAKE_RANLIB:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ranlib.exe) \
   -DCMAKE_READELF:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-readelf.exe) \
   -DCMAKE_DLLTOOL:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-dlltool.exe) \
   -DCMAKE_NM:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-nm.exe) \
   -DCMAKE_OBJCOPY:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-objcopy.exe) \
   -DCMAKE_OBJDUMP:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-objdump.exe) \
   -DCMAKE_LINKER:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-link.exe) \
   -DCMAKE_STRIP:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-strip.exe) \
   -DGOLD_EXECUTABLE:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which ld.lld.exe) \
   \
   -DCMAKE_C_FLAGS:STRING="-g0 -D_WIN32_WINNT=0x0600 -I$PWD/stage1/$RUNPLATFORM/include -I$PWD/prebuilt/$PREBUILT_BASE/include -I$MINGWPREFIX/share/llvm/$RUNPLATFORM/include -I$MINGWPREFIX/share/llvm/$PREBUILT_BASE/include" \
   -DCMAKE_CXX_FLAGS:STRING="-g0 -D_WIN32_WINNT=0x0600 -I$PWD/stage1/$RUNPLATFORM/include -I$PWD/prebuilt/$PREBUILT_BASE/include -I$MINGWPREFIX/share/llvm/$RUNPLATFORM/include -I$MINGWPREFIX/share/llvm/$PREBUILT_BASE/include" \
   -DCMAKE_{SHARED,MODULE,EXE}_LINKER_FLAGS:STRING="-L$PWD/build_libcxx_$arch/fakelib -L$PWD/stage1/$RUNPLATFORM/lib -L$(cygpath -m $PWD/dummylibs) -L$PWD/stage1/$RUNPLATFORM/lib -L$PWD/prebuilt/$PREBUILT_BASE/lib -L$PWD/prebuilt/$PREBUILT_BASE/$RUNPLATFORM/lib -L$MINGWPREFIX/share/llvm/$RUNPLATFORM/lib -L$MINGWPREFIX/share/llvm/$PREBUILT_BASE/lib -L$MINGWPREFIX/share/llvm/$PREBUILT_BASE/$RUNPLATFORM/lib" \
   -DPython3_EXECUTABLE:FILEPATH=$PYDIR/python.exe -Slibcxx -Bbuild_libcxx_$arch &&
  #-DCMAKE_CXX_FLAGS:STRING="--target=$arch-w64-mingw32 -fuse-ld=lld -stdlib=libc++ -I$PWD/$RUNPLATFORM/include -I$PWD/stage1/include/c++/v1" \
  #-DLIBCXX_BUILD_32_BITS:BOOL=OFF 
  #-DCMAKE_C_FLAGS:STRING="--target=$arch-w64-mingw32 -fuse-ld=lld" \
  #-DCMAKE_CXX_FLAGS:STRING="--target=$arch-w64-mingw32 -fuse-ld=lld -stdlib=libc++ -Wl,-L$PWD/build_libcxx_$arch" \
  wl-showstatus build-install &&
  ninja -Cbuild_libcxx install/strip &&
     echo OK || break
 done

 # build libcxxabi for supported platforms
 for arch in i686 x86_64 armv7 aarch64; do
  mkdir -p build_libcxxabi_$arch &&
  wl-showstatus configure &&
   make.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
   -DBUILD_SHARED_LIBS:BOOL=ON \
   -DLIBCXXABI_ENABLE_SHARED:BOOL=ON \
   -DLIBCXXABI_ENABLE_STATIC:BOOL=ON \
   -DLIBCXXABI_TARGET_TRIPLE:STRING=$RUNPLATFORM \
   -DLLVM_HOST_TRIPLE:STRING=$BUILDPLATFORM \
   -DLLVM_PATH:PATH=$PWD/llvm \
   -DLIBCXXABI_USE_COMPILER_RT:BOOL=ON \
   -DLIBCXXABI_LIBCXX_INCLUDES:PATH=$PWD/build_libcxx/include/c++/v1 \
   -DLIBCXXABI_LIBDIR_SUFFIX="" \
   -DLIBCXXABI_INCLUDE_TESTS:BOOL=OFF \
   -DLLVM_MAIN_SRC_DIR:PATH=$PWD/llvm \
   -DLLVM_CONFIG_PATH:PATH=$PWD/stage1/bin/llvm-config.exe \
   \
   -DCMAKE_C_COMPILER_TARGET=$arch-windows-gnu \
   -DCMAKE_CXX_COMPILER_TARGET=$arch-windows-gnu \
   \
   -DCMAKE_ASM_COMPILER:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which clang.exe) \
   -DCMAKE_ASM_COMPILER_AR:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ar.exe) \
   -DCMAKE_ASM_COMPILER_RANLIB:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ranlib.exe) \
   -DCMAKE_C_COMPILER:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which clang.exe) \
   -DCMAKE_C_COMPILER_AR:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ar.exe) \
   -DCMAKE_C_COMPILER_RANLIB:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ranlib.exe) \
   -DCMAKE_CXX_COMPILER:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which clang++.exe) \
   -DCMAKE_CXX_COMPILER_AR:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ar.exe) \
   -DCMAKE_CXX_COMPILER_RANLIB:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ranlib.exe) \
   -DCMAKE_RC_COMPILER:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-windres.exe) \
   -DCMAKE_AR:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ar.exe) \
   -DCMAKE_RANLIB:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-ranlib.exe) \
   -DCMAKE_READELF:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-readelf.exe) \
   -DCMAKE_DLLTOOL:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-dlltool.exe) \
   -DCMAKE_NM:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-nm.exe) \
   -DCMAKE_OBJCOPY:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-objcopy.exe) \
   -DCMAKE_OBJDUMP:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-objdump.exe) \
   -DCMAKE_LINKER:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-link.exe) \
   -DCMAKE_STRIP:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which llvm-strip.exe) \
   -DGOLD_EXECUTABLE:FILEPATH=$(PATH=$PWD/stage1/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH which ld.lld.exe) \
   \
   -DCMAKE_C_FLAGS:STRING="-g0 -D_WIN32_WINNT=0x0600 -I$PWD/stage1/$RUNPLATFORM/include -I$PWD/prebuilt/$PREBUILT_BASE/include -I$MINGWPREFIX/share/llvm/$RUNPLATFORM/include -I$MINGWPREFIX/share/llvm/$PREBUILT_BASE/include" \
   -DCMAKE_CXX_FLAGS:STRING="-g0 -D_WIN32_WINNT=0x0600 -I$PWD/stage1/$RUNPLATFORM/include -I$PWD/prebuilt/$PREBUILT_BASE/include -I$MINGWPREFIX/share/llvm/$RUNPLATFORM/include -I$MINGWPREFIX/share/llvm/$PREBUILT_BASE/include" \
   -DCMAKE_{SHARED,MODULE,EXE}_LINKER_FLAGS:STRING="-L$PWD/stage1/$RUNPLATFORM/lib -L$(cygpath -m $PWD/dummylibs) -L$PWD/stage1/$RUNPLATFORM/lib -L$PWD/prebuilt/$PREBUILT_BASE/lib -L$PWD/prebuilt/$PREBUILT_BASE/$RUNPLATFORM/lib -L$MINGWPREFIX/share/llvm/$RUNPLATFORM/lib -L$MINGWPREFIX/share/llvm/$PREBUILT_BASE/lib -L$MINGWPREFIX/share/llvm/$PREBUILT_BASE/$RUNPLATFORM/lib" \
   -DCMAKE_{SHARED,MODULE,EXE}_LINKER_FLAGS:STRING="-L$PWD/build_mingw-w64_winpthreads_$arch/fakelib" \
   -DPython3_EXECUTABLE:FILEPATH=$PYDIR/python.exe \
   -Slibcxxabi -Bbuild_libcxxabi_$arch &&
   #-DCMAKE_ASM_MASM_COMPILER:FILEPATH=$PWD/stage1/bin/llvm-ml.exe \
   #-DSANITIZER_CXX_ABI=libc++ \
   #-DCMAKE_C_FLAGS:STRING="--target=$arch-w64-mingw32 -fuse-ld=lld -I$PWD/$RUNPLATFORM/include" \
   #-DCMAKE_CXX_FLAGS:STRING="--target=$arch-w64-mingw32 -fuse-ld=lld -stdlib=libc++ -I$PWD/$RUNPLATFORM/include -I$PWD/stage1/include/c++/v1" \
  wl-showstatus build-install &&
  ninja -Cbuild_libcxxabi_$arch install/strip &&
  ## manually copy libclang_rt.*.a files to the location where they are expected
  #mkdir -p stage1/lib/clang/$VERSION/lib/windows &&
  #cp -f stage1/lib/windows/* stage1/lib/clang/$VERSION/lib/windows/ &&
    echo OK || break
 done &&
    echo OK



















 for arch in i686 x86_64 aarch64; do
  mkdir -p build_compiler_rt_$arch &&
  PATH=$INSTALLPREFIX/share/llvm/bin:$PATH \
  cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
   -DCMAKE_SYSTEM_NAME=Windows \
   -DCMAKE_C_COMPILER_TARGET=$arch-w64-windows-gnu \
   -DCMAKE_C_COMPILER:FILEPATH="$INSTALLPREFIX/share/llvm/bin/clang.exe" \
   -DCMAKE_C_FLAGS:STRING="--target=$arch-w64-windows-gnu" \
   -DCMAKE_CXX_COMPILER:FILEPATH="$INSTALLPREFIX/share/llvm/bin/clang++.exe" \
   -DCMAKE_CXX_FLAGS:STRING="--target=$arch-w64-windows-gnu" \
   -DCMAKE_ASM_COMPILER:FILEPATH=$INSTALLPREFIX/share/llvm/bin/llvm-as.exe \
   -DCMAKE_LINKER:FILEPATH=$INSTALLPREFIX/share/llvm/bin/ld.lld.exe \
   -DCMAKE_AR:FILEPATH="$INSTALLPREFIX/share/llvm/bin/llvm-ar.exe" \
   -DCMAKE_RANLIB:FILEPATH="$INSTALLPREFIX/share/llvm/bin/llvm-ranlib.exe" \
   -DCOMPILER_RT_DEFAULT_TARGET_ONLY=TRUE \
   -DCOMPILER_RT_USE_BUILTINS_LIBRARY=TRUE \
   -DCOMPILER_RT_BUILD_BUILTINS=TRUE \
   -DLLVM_CONFIG_PATH="" \
   -DCMAKE_FIND_ROOT_PATH=$INSTALLPREFIX/share/llvm/$arch-w64-mingw32 \
   -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY \
   -DCMAKE_FIND_ROOT_PATH_MODE_PACKAGE=ONLY \
   -DSANITIZER_CXX_ABI=libc++ \
   -Scompiler-rt -Bbuild_compiler_rt_$arch || break
 done &&
    echo OK





















#archlist="x86_64 i686 aarch64 armv7" &&
archlist="x86_64 i686 aarch64" &&

 for arch in $archlist; do
  mkdir -p build_llvm-libgcc_$arch &&
  wl-showstatus configure $arch &&
  cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
   -DCMAKE_SYSTEM_NAME:STRING=Windows \
   -DBUILD_SHARED_LIBS:BOOL=ON \
   -DLLVM_LIBGCC_EXPLICIT_OPT_IN:BOOL=ON \
   -DCOMPILER_RT_DEFAULT_TARGET_TRIPLE:STRING=$arch-w64-mingw32 \
   -DCMAKE_C_COMPILER_TARGET:STRING=$arch-w64-mingw32 \
   -DCOMPILER_RT_CAN_EXECUTE_TESTS:BOOL=OFF \
   -DCMAKE_ASM_COMPILER_AR:FILEPATH=$INSTALLPREFIX/share/llvm/bin/llvm-ar.exe \
   -DCMAKE_ASM_COMPILER_RANLIB:FILEPATH=$INSTALLPREFIX/share/llvm/bin/llvm-ranlib.exe \
   -DCMAKE_C_COMPILER:FILEPATH=$INSTALLPREFIX/share/llvm/bin/clang.exe \
   -DCMAKE_C_COMPILER_AR:FILEPATH=$INSTALLPREFIX/share/llvm/bin/llvm-ar.exe \
   -DCMAKE_C_COMPILER_RANLIB:FILEPATH=$INSTALLPREFIX/share/llvm/bin/llvm-ranlib.exe \
   -DCMAKE_CXX_COMPILER:FILEPATH=$INSTALLPREFIX/share/llvm/bin/clang++.exe \
   -DCMAKE_CXX_COMPILER_AR:FILEPATH=$INSTALLPREFIX/share/llvm/bin/llvm-ar.exe \
   -DCMAKE_CXX_COMPILER_RANLIB:FILEPATH=$INSTALLPREFIX/share/llvm/bin/llvm-ranlib.exe \
   -DCMAKE_RC_COMPILER:FILEPATH="$INSTALLPREFIX/share/llvm/bin/llvm-windres.exe  -m $(if [ "$arch" == "x86_64" ]; then echo "i386:"; fi)$(if [ "$arch" == "aarch64" ]; then echo "arm64"; else echo "$arch"; fi)" \
   -DCMAKE_LINKER:FILEPATH=$INSTALLPREFIX/share/llvm/bin/ld.lld.exe \
   -DGOLD_EXECUTABLE:FILEPATH=$INSTALLPREFIX/share/llvm/bin/ld.lld.exe \
   -DCMAKE_C_COMPILER_TARGET=$arch-w64-windows-gnu \
   -DCMAKE_CXX_COMPILER_TARGET=$arch-w64-windows-gnu \
   -DCMAKE_C_FLAGS:STRING="--target=$arch-w64-windows-gnu -fuse-ld=lld -I$MINGWPREFIX/share/mingw-w64/include" \
   -DCMAKE_CXX_FLAGS:STRING="--target=$arch-w64-windows-gnu -fuse-ld=lld" \
   -DCMAKE_RC_FLAGS:STRING="--target=$arch-w64-windows-gnu -I$MINGWPREFIX/share/mingw-w64/include" \
   -DCMAKE_MODULE_LINKER_FLAGS:STRING="-L$MINGWPREFIX/share/mingw-w64/$arch-w64-mingw32/lib" \
   -DCMAKE_EXE_LINKER_FLAGS:STRING="-L$MINGWPREFIX/share/mingw-w64/$arch-w64-mingw32/lib" \
   -DCMAKE_STATIC_LINKER_FLAGS:STRING="" \
   -DCMAKE_SHARED_LINKER_FLAGS:STRING="-L$MINGWPREFIX/share/mingw-w64/$arch-w64-mingw32/lib" \
   -DPython3_EXECUTABLE:FILEPATH=$PYDIR/python.exe \
   -Sllvm-libgcc -Bbuild_llvm-libgcc_$arch &&
  #-DCMAKE_ASM_MASM_COMPILER:FILEPATH=$INSTALLPREFIX/share/llvm/bin/llvm-ml.exe \
  #-DSANITIZER_CXX_ABI=libc++ \
  # fix invalid --version-script and -lc linker flags
  sed -i.bak -e "s/-Wl,--version-script[^ ]*//; s?\-lc\b?$(cygpath -m $MINGWPREFIX/share/mingw-w64/$arch-w64-mingw32/lib/dllcrt1.o)?" build_llvm-libgcc_$arch/build.ninja &&
  wl-showstatus build-install $arch &&
  ninja -Cbuild_llvm-libgcc_$arch install/strip &&
  touch SUCCESS_LLVMLIBGCC_$arch || break
 done &&
 if [ $(ls -1 SUCCESS_LLVMLIBGCC_*|wc -l) -ne $(echo $archlist|wc -w) ]; then false; fi &&
    echo OK



#archlist="x86_64 i686 aarch64 armv7" &&
archlist="x86_64 i686 aarch64" &&

 for arch in $archlist; do
  mkdir -p build_compiler-rt_$arch &&
  wl-showstatus configure $arch &&
  cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
   -DBUILD_SHARED_LIBS:BOOL=ON \
   -DLLVM_TARGETS_TO_BUILD:STRING="X86;AArch64" \
   -DCOMPILER_RT_DEFAULT_TARGET_TRIPLE:STRING=$arch-w64-mingw32 \
   -DLLVM_MAIN_SRC_DIR:PATH=$PWD/llvm \
   -DLLVM_CONFIG_PATH:PATH=$INSTALLPREFIX/share/llvm/bin/llvm-config.exe \
   -DCOMPILER_RT_BUILD_SANITIZERS:BOOL=OFF \
   -DCOMPILER_RT_DEFAULT_TARGET_ONLY=OFF \
   -DCOMPILER_RT_USE_BUILTINS_LIBRARY=OFF \
   -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF \
   -DCOMPILER_RT_CAN_EXECUTE_TESTS:BOOL=OFF \
   -DCMAKE_ASM_COMPILER_AR:FILEPATH=$INSTALLPREFIX/share/llvm/bin/llvm-ar.exe \
   -DCMAKE_ASM_COMPILER_RANLIB:FILEPATH=$INSTALLPREFIX/share/llvm/bin/llvm-ranlib.exe \
   -DCMAKE_C_COMPILER:FILEPATH=$INSTALLPREFIX/share/llvm/bin/clang.exe \
   -DCMAKE_C_COMPILER_AR:FILEPATH=$INSTALLPREFIX/share/llvm/bin/llvm-ar.exe \
   -DCMAKE_C_COMPILER_RANLIB:FILEPATH=$INSTALLPREFIX/share/llvm/bin/llvm-ranlib.exe \
   -DCMAKE_CXX_COMPILER:FILEPATH=$INSTALLPREFIX/share/llvm/bin/clang++.exe \
   -DCMAKE_CXX_COMPILER_AR:FILEPATH=$INSTALLPREFIX/share/llvm/bin/llvm-ar.exe \
   -DCMAKE_CXX_COMPILER_RANLIB:FILEPATH=$INSTALLPREFIX/share/llvm/bin/llvm-ranlib.exe \
   -DCMAKE_RC_COMPILER:FILEPATH="$INSTALLPREFIX/share/llvm/bin/llvm-windres.exe  -m $(if [ "$arch" == "x86_64" ]; then echo "i386:"; fi)$(if [ "$arch" == "aarch64" ]; then echo "arm64"; else echo "$arch"; fi)" \
   -DCMAKE_LINKER:FILEPATH=$INSTALLPREFIX/share/llvm/bin/ld.lld.exe \
   -DGOLD_EXECUTABLE:FILEPATH=$INSTALLPREFIX/share/llvm/bin/ld.lld.exe \
   -DCMAKE_C_COMPILER_TARGET=$arch-w64-windows-gnu \
   -DCMAKE_CXX_COMPILER_TARGET=$arch-w64-windows-gnu \
   -DCMAKE_C_FLAGS:STRING="--target=$arch-w64-windows-gnu -fuse-ld=lld -I$MINGWPREFIX/share/mingw-w64/include" \
   -DCMAKE_CXX_FLAGS:STRING="--target=$arch-w64-windows-gnu -fuse-ld=lld -I$MINGWPREFIX/share/mingw-w64/include" \
   -DCMAKE_RC_FLAGS:STRING="--target=$arch-w64-windows-gnu -I$MINGWPREFIX/share/mingw-w64/include" \
   -DCMAKE_SHARED_LINKER_FLAGS:STRING="-L$MINGWPREFIX/share/mingw-w64/$arch-w64-mingw32/lib" \
   -DCMAKE_MODULE_LINKER_FLAGS:STRING="-L$MINGWPREFIX/share/mingw-w64/$arch-w64-mingw32/lib" \
   -DCMAKE_EXE_LINKER_FLAGS:STRING="-L$MINGWPREFIX/share/mingw-w64/$arch-w64-mingw32/lib" \
   -DPython3_EXECUTABLE:FILEPATH=$PYDIR/python.exe \
   -Scompiler-rt -Bbuild_compiler-rt_$arch &&
  #-DCMAKE_ASM_MASM_COMPILER:FILEPATH=$INSTALLPREFIX/share/llvm/bin/llvm-ml.exe \
  #-DSANITIZER_CXX_ABI=libc++ \
  # fix invalid -lgcc and -lgcc_eh linker flags
  sed -i.bak -e "s/\(-lgcc\|-lgcc_eh\)\b//g" build_compiler-rt_$arch/build.ninja &&
  wl-showstatus build-install $arch &&
  ninja -Cbuild_compiler-rt_$arch install/strip &&
  touch SUCCESS_COMPILERRT_$arch || break
 done &&
 if [ $(ls -1 SUCCESS_COMPILERRT_*|wc -l) -ne $(echo $archlist|wc -w) ]; then false; fi &&
    echo OK

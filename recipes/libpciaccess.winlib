export NAME="X.Org libpciaccess"
export STATUS=
#export URL=http://www.freedesktop.org/wiki/Software/xlibs
#export URL=http://www.x.org/
export URL=http://freedesktop.org/
export BASENAME=libpciaccess
export DESCRIPTION="X.org libpciaccess library."
export CATEGORY=x,hardware
export TYPE=library
#export VERSION=0.12.1
#export VERSIONDATE=20110203
#export VERSION=0.13
#export VERSIONDATE=20120304
#export VERSION=0.13.1
#export VERSIONDATE=20120410
#export VERSION=0.13.2
#export VERSIONDATE=20130721
export VERSION=0.13.3
export VERSIONDATE=20150204
#export VERSION=0.13.4
#export VERSIONDATE=20150501
#export VERSION=0.13.5
#export VERSIONDATE=20170405
####src/.libs/common_init.o:common_init.c:(.text+0xe): undefined reference to `pci_system_x86_create'
#export VERSION=0.14
#export VERSIONDATE=20171024
#export VERSION=0.15
#export VERSIONDATE=20190712
#export VERSION=0.16
#export VERSIONDATE=20190718
#export VERSION=0.17
#export VERSIONDATE=20221018
#export VERSION=0.18
#export VERSIONDATE=20240205
#export VERSION=0.18.1
#export VERSIONDATE=20240324
####src/common_init.c:71:3: error: #error "Unsupported OS"
wl-showstatus --package-version
export DEPENDENCIES=zlib,mman-win32
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=COPYING
export LICENSETYPE=
#export DOWNLOADURL="http://xorg.freedesktop.org/archive/individual/lib/"
export DOWNLOADURL="https://www.x.org/archive/individual/lib/"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://xorg.freedesktop.org/archive/individual/lib/$BASENAME-$VERSION.tar.bz2
export DOWNLOADSOURCEURL=https://www.x.org/archive/individual/lib/$BASENAME-$VERSION.tar.bz2
#export DOWNLOADSOURCEURL=https://www.x.org/archive/individual/lib/$BASENAME-$VERSION.tar.xz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
tar xj --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.bz2
#tar xJ --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.xz
cd $BASENAME-$VERSION
# fix missing files
mkdir -p sys
cat >> sys/endian.h << EOF
#define letoh16(x) (x)
#define letoh32(x) (x)
#define htole16(x) (x)
#define htole32(x) (x)
EOF
#cat > sys/mman.h << EOF
##define PROT_READ 0x1
##define MAP_SHARED 2
##define MAP_FAILED NULL
##define mmap(a,b,c,d,e,f) MAP_FAILED
##define munmap(a,b) (-1)
#EOF
#touch srtp_config.h
#touch scanpci/err.h
## fix scanpci/scanpci.c
#mv scanpci/scanpci.c scanpci/scanpci.c.bak
#cat > scanpci/scanpci.c << EOF
##include <config.h>
##define HAVE_UINT64_T
##define err(no,msg) return no
#EOF
#cat scanpci/scanpci.c.bak >> scanpci/scanpci.c
## fix src/common_init.c (version >= 0.14)
#sed -i.bak -e "s/__CYGWIN__/_WIN32/" src/common_init.c
## fix src/Makefile (version >= 0.14)
#sed -i.bak -e "s/^@CYGWIN_TRUE@//" src/Makefile.in
## fix src/common_init.c (version >= 0.16)
#patch -ulbf src/common_init.c << EOF
#@@ -69,3 +69,3 @@
#     err = pci_system_hurd_create();
#-#elif defined(__CYGWIN__)
#+#elif defined(__CYGWIN__) || defined(_WIN32)
#     err = pci_system_x86_create();
#EOF
## fix src/x86_pci.c (version >= 0.16)
#patch -ulbf src/x86_pci.c << EOF
#@@ -808,3 +808,3 @@
#
#-#if defined(__CYGWIN__)
#+#elif defined(__CYGWIN__) || defined(_WIN32)
#
#EOF
## fix Windows support (version >= 0.16)
#sed -i.bak -e "s/if defined(__GNU__)/& \&\& \!defined(_WIN32)/; s/if defined(__CYGWIN__)/& || defined(_WIN32)/; s/^static //; s/error_t/int/" src/common_init.c src/x86_pci.c
## fix Windows support (version >= 0.16)
#sed -i.bak -e "s/^@CYGWIN_TRUE@//" src/Makefile.in
wl-showstatus configure &&
 ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-zlib CFLAGS="-I$MINGWPREFIX/include/mman-win32" LDFLAGS="-Wl,--as-needed -lmman" &&
 # fix detection of shared libraries
 sed -i.bak -e "s/\(deplibs_check_method=\"\)[^\"]*/\1pass_all/" libtool &&
 wl-showstatus build-install &&
 make install-strip &&
 #scanpci/scanpci.exe &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
####TO DO: this library is not functional (probably because of missing mmap/mmunmap)



#export BUILDDEPENDENCIES=meson,ninja
## fix src/common_init.c (version >= 0.18.1)
#patch -ulbf src/common_init.c << EOF
#@@ -69,3 +69,3 @@
#     err = pci_system_hurd_create();
#-#elif defined(__CYGWIN__)
#+#elif defined(__CYGWIN__) || defined(__MINGW32__)
#     err = pci_system_x86_create();
#EOF
## fix src/common_interface.c (version >= 0.18.1)
#patch -ulbf src/common_interface.c << EOF
#@@ -56,2 +56,9 @@
#
#+#elif defined(__MINGW32__)
#+
#+#define LETOH_16(x) (x)
#+#define HTOLE_16(x) (x)
#+#define LETOH_32(x) (x)
#+#define HTOLE_32(x) (x)
#+
# #elif defined(__sun)
#EOF
## fix src/x86_pci.c (version >= 0.18.1)
#patch -ulbf src/x86_pci.c << EOF
#@@ -39,2 +39,6 @@
# #include "pciaccess_private.h"
#+#if defined(__MINGW32__)
#+#define error_t int
#+#define ffs __builtin_ffs
#+#endif
#
#@@ -80,3 +84,3 @@
#
#-#elif defined(__CYGWIN__)
#+#elif defined(__CYGWIN__) || defined(__MINGW32__)
#
#@@ -108,3 +112,3 @@
#
#-static int
#+int
# x86_enable_io(void)
#@@ -152,3 +156,3 @@
#
#-static int
#+int
# x86_disable_io(void)
#@@ -880,3 +884,3 @@
#
#-#if defined(__CYGWIN__)
#+#if defined(__CYGWIN__) || defined(__MINGW32__)
#
#EOF
## fix src/meson.build (version >= 0.18.1)
#patch -ulbf src/meson.build << EOF
#@@ -30,3 +30,3 @@
#   _pci_access_host_files += ['openbsd_pci.c']  # VGA arbiter code is in netbsd_pci.c
#-elif host == 'cygwin'
#+elif host == 'cygwin' or host == 'windows'
#   _pci_access_host_files += ['x86_pci.c', 'common_vgaarb_stub.c']
#EOF
#mkdir -p build_both &&
# wl-showstatus configure &&
# PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Dzlib=enabled -Dc_args="-I$MINGWPREFIX/include/mman-win32" -Dc_link_args="-lmman" . build_both &&
# wl-showstatus build-install &&
# PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -Cbuild_both install &&
#    echo OK && find . -name '*.a'




export NAME="FFTW"
export STATUS=
export URL=http://www.fftw.org/
export BASENAME=fftw
export DESCRIPTION="FFTW is a C subroutine library for computing the discrete Fourier transform (DFT) in one or more dimensions, of arbitrary input size, and of both real and complex data (as well as of even/odd data, i.e. the discrete cosine/sine transforms or DCT/DST)."
export CATEGORY=math
export TYPE=library
#export VERSION=2.1.5
#export VERSIONDATE=20170117
#export VERSION=3.1.2
#export VERSION=3.2
#export VERSION=3.2.1
#export VERSION=3.2.2
#export VERSIONDATE=
#export VERSION=3.3
#export VERSIONDATE=20110727
#export VERSION=3.3.1
#export VERSIONDATE=20120226
#export VERSION=3.3.2
#export VERSIONDATE=20120506
#export VERSION=3.3.3
#export VERSIONDATE=20121126
#export VERSION=3.3.4
#export VERSIONDATE=20140316
#export VERSION=3.3.5
#export VERSIONDATE=20160801
#export VERSION=3.3.6-pl1
#export VERSIONDATE=20170117
#export VERSION=3.3.7
#export VERSIONDATE=20171029
#export VERSION=3.3.8
#export VERSIONDATE=20180529
#export VERSION=3.3.9
#export VERSIONDATE=20201213
export VERSION=3.3.10
export VERSIONDATE=20210916
wl-showstatus --package-version
export DEPENDENCIES=pthreads
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=
export OPTIONALBUILDDEPENDENCIES=cmake,ninja
export LICENSEFILE=COPYING
export LICENSETYPE=
export DOWNLOADURL="http://www.fftw.org/download.html"
#export DOWNLOADURL="https://github.com/FFTW/fftw3/tags"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=http://www.fftw.org/$BASENAME-$VERSION.tar.gz
#export DOWNLOADSOURCEURL=https://github.com/FFTW/fftw3/archive/refs/tags/$BASENAME-$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
tar xz --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
cd $BASENAME-$VERSION
## fix missing YieldProcessor in threads/threads.c (version >= 3.3.5)
#mv threads/threads.c threads/threads.c.bak &&
#echo "#define YieldProcessor()" > threads/threads.c &&
##cat threads/threads.c.bak >> threads/threads.c
#grep -v "#include <intrin\.h>" threads/threads.c.bak >> threads/threads.c
# avoid detecting clang as MSVC (version >= 3.6.10)
if ${CC:-gcc} --version|grep -q "^clang"; then
 sed -i.bak -e "s/\bcl\*/DUMMY_&/" configure
fi
# don't detect pthreads library (version >= 3.6.10)
sed -i.bak2 -e "s/\(acx_pthread_ok=\)no/\1yes/" configure
if ! cmake --version &> /dev/null || ! ninja --version &> /dev/null; then
 mkdir -p build_single build_longdouble build_quad build_standard &&
 wl-showstatus configure single &&
 cd build_single &&
 #../configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-shared --enable-static --with-our-malloc16 --enable-threads --with-combined-threads --enable-portable-binary --enable-sse2 LDFLAGS="-Wl,--enable-auto-import" &&
 #../configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-shared --enable-static --disable-alloca --with-our-malloc16 --enable-threads --with-combined-threads --enable-single --enable-sse --enable-sse2 --enable-avx LDFLAGS="-Wl,--enable-auto-import" &&
 #../configure --cache-file=../config.cache --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-shared --enable-static --disable-alloca --with-our-malloc16 --enable-threads --with-combined-threads --enable-single --$(if ${F77:-gfortran} --version &> /dev/null; then echo "enable"; else echo "disable"; fi)-fortran $(if echo $RUNPLATFORM | grep -q "^aarch64"; then echo "--enable-armv8-pmccntr-el0"; else echo "--enable-sse --enable-sse2 --enable-avx"; fi) LDFLAGS="-Wl,--enable-auto-import" &&
 ../configure --cache-file=../config.cache --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-shared --enable-static --disable-alloca --with-our-malloc16 --enable-threads --with-combined-threads --enable-single --$(if ${F77:-gfortran} --version &> /dev/null; then echo "enable"; else echo "disable"; fi)-fortran $(if echo $RUNPLATFORM | grep -q "^aarch64"; then echo "--enable-armv8-pmccntr-el0"; else echo "--enable-sse --enable-sse2 --enable-avx"; fi) LDFLAGS="-Wl,--enable-auto-import -pthread" &&
 cd .. &&
 wl-showstatus configure longdouble &&
 cd build_longdouble &&
 #../configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-shared --enable-static --disable-alloca --with-our-malloc16 --enable-threads --with-combined-threads --enable-long-double LDFLAGS="-Wl,--enable-auto-import" &&
 #../configure --cache-file=../config.cache --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-shared --enable-static --disable-alloca --with-our-malloc16 --enable-threads --with-combined-threads --enable-long-double --$(if ${F77:-gfortran} --version &> /dev/null; then echo "enable"; else echo "disable"; fi)-fortran $(if echo $RUNPLATFORM | grep -q "^aarch64"; then echo "--enable-armv8-pmccntr-el0"; fi) LDFLAGS="-Wl,--enable-auto-import" &&
 ../configure --cache-file=../config.cache --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-shared --enable-static --disable-alloca --with-our-malloc16 --enable-threads --with-combined-threads --enable-long-double --$(if ${F77:-gfortran} --version &> /dev/null; then echo "enable"; else echo "disable"; fi)-fortran $(if echo $RUNPLATFORM | grep -q "^aarch64"; then echo "--enable-armv8-pmccntr-el0"; fi) LDFLAGS="-Wl,--enable-auto-import  -pthread" &&
 cd .. &&
 #wl-showstatus configure quad &&
 #cd build_quad &&
 ##../configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-shared --enable-static --disable-alloca --with-our-malloc16 --enable-threads --with-combined-threads --enable-quad-precision LDFLAGS="-Wl,--enable-auto-import" &&
 ##../configure --cache-file=../config.cache --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-shared --enable-static --disable-alloca --with-our-malloc16 --enable-threads --with-combined-threads --enable-quad-precision --$(if ${F77:-gfortran} --version &> /dev/null; then echo "enable"; else echo "disable"; fi)-fortran $(if echo $RUNPLATFORM | grep -q "^aarch64"; then echo "--enable-armv8-pmccntr-el0"; fi) LDFLAGS="-Wl,--enable-auto-import" &&
 #../configure --cache-file=../config.cache --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-shared --enable-static --disable-alloca --with-our-malloc16 --enable-threads --with-combined-threads --enable-quad-precision --$(if ${F77:-gfortran} --version &> /dev/null; then echo "enable"; else echo "disable"; fi)-fortran $(if echo $RUNPLATFORM | grep -q "^aarch64"; then echo "--enable-armv8-pmccntr-el0"; fi) LDFLAGS="-Wl,--enable-auto-import  -pthread" &&
 ## fix building DLLs
 #mv libtool libtool.bak &&
 #sed -e "s/\(allow_undefined=\)yes/\1no/" libtool.bak > libtool &&
 #cd .. &&
 wl-showstatus configure standard &&
 cd build_standard &&
 #../configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-shared --enable-static --disable-alloca --with-our-malloc16 --enable-threads --with-combined-threads --enable-sse2 --enable-avx LDFLAGS="-Wl,--enable-auto-import" &&
 #../configure --cache-file=../config.cache --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-shared --enable-static --disable-alloca --with-our-malloc16 --enable-threads --with-combined-threads --$(if ${F77:-gfortran} --version &> /dev/null; then echo "enable"; else echo "disable"; fi)-fortran $(if echo $RUNPLATFORM | grep -q "^aarch64"; then echo "--enable-armv8-pmccntr-el0"; else echo "--enable-sse2 --enable-avx"; fi) LDFLAGS="-Wl,--enable-auto-import" &&
 ../configure --cache-file=../config.cache --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-shared --enable-static --disable-alloca --with-our-malloc16 --enable-threads --with-combined-threads --$(if ${F77:-gfortran} --version &> /dev/null; then echo "enable"; else echo "disable"; fi)-fortran $(if echo $RUNPLATFORM | grep -q "^aarch64"; then echo "--enable-armv8-pmccntr-el0"; else echo "--enable-sse2 --enable-avx"; fi) LDFLAGS="-Wl,--enable-auto-import  -pthread" &&
 cd .. &&
 wl-showstatus build single &&
 ( make -Cbuild_single || make -Cbuild_single LIBS="-lpthread" ) &&
 wl-showstatus build longdouble &&
 ( make -Cbuild_longdouble || make -Cbuild_longdouble LIBS="-lpthread" ) &&
 #wl-showstatus build quad &&
 #( make -Cbuild_quad || make -Cbuild_quad LIBS="-lpthread" ) &&
 wl-showstatus build standard &&
 ( make -Cbuild_standard || make -Cbuild_standard LIBS="-lpthread" ) &&
 wl-showstatus build-install single &&
 make -Cbuild_single install-strip &&
 wl-showstatus build-install longdouble &&
 make -Cbuild_longdouble install-strip &&
 #wl-showstatus build-install quad &&
 #make -Cbuild_quad install-strip &&
 wl-showstatus build-install standard &&
 make -Cbuild_standard install-strip &&
 touch SUCCESS
else
 touch SUCCESS
fi &&
 rm SUCCESS &&
 # fix absolute link in .cmake file(s)
 #sed -i -e "s?$(echo $INSTALLPREFIX|sed -e "s?^/\([a-zA-Z]\)/?\1:/?")?\${CMAKE_CURRENT_LIST_FILE}/../../../..?g" $INSTALLPREFIX/lib/cmake/fftw3/*Config.cmake &&
 sed -i -e "s?$INSTALLPREFIX\|$(cygpath -m $INSTALLPREFIX)?\${CMAKE_CURRENT_LIST_FILE}/../../../..?g" $INSTALLPREFIX/lib/cmake/fftw3/*Config.cmake &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
# see also: http://www.fftw.org/install/windows.html
# removed quad-precision because of dependancy on $MINGWDIR/bin/libquadmath-0.dll



mkdir -p build_test && cmake.exe -Wno-dev -G"MSYS Makefiles" -DCMAKE_POLICY_VERSION_MINIMUM:STRING=3.5 -S. -Bbuild_test -LH && echo OK; rm -rf build_test

mkdir -p build_static build_shared &&
 wl-showstatus configure-static &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DENABLE_FLOAT:BOOL=ON -DENABLE_LONG_DOUBLE:BOOL=ON -DENABLE_QUAD_PRECISION:BOOL=ON -DENABLE_OPENMP:BOOL=ON -DENABLE_THREADS:BOOL=OFF -DWITH_COMBINED_THREADS:BOOL=OFF -DDISABLE_FORTRAN:BOOL=$(if ${F77:-gfortran} --version &> /dev/null; then echo "OFF"; else echo "ON"; fi) -DBUILD_TESTS:BOOL=OFF -DCMAKE_POLICY_VERSION_MINIMUM:STRING=3.5 -S. -Bbuild_static &&
 #-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
 wl-showstatus configure-shared &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DENABLE_FLOAT:BOOL=ON -DENABLE_LONG_DOUBLE:BOOL=ON -DENABLE_QUAD_PRECISION:BOOL=ON -DENABLE_OPENMP:BOOL=ON -DENABLE_THREADS:BOOL=OFF -DWITH_COMBINED_THREADS:BOOL=OFF -DDISABLE_FORTRAN:BOOL=$(if ${F77:-gfortran} --version &> /dev/null; then echo "OFF"; else echo "ON"; fi) -DBUILD_TESTS:BOOL=OFF -DCMAKE_POLICY_VERSION_MINIMUM:STRING=3.5 -S. -Bbuild_shared &&
 ## fix execution of Python scripts
 #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|glib-genmarshal\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
 ## fix missing link libraries
 #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lws2_32/" build_shared/build.ninja &&
 #wl-showstatus build-static &&
 #cmake.exe --build build_static &&
 #ninja -Cbuild_static &&
 #wl-showstatus build-shared &&
 #cmake.exe --build build_shared &&
 #ninja -Cbuild_shared &&
 wl-showstatus build-install-static &&
 #cmake.exe --install build_static --strip &&
 #cmake.exe --build build_static --target "install/strip" &&
 #cmake.exe --build build_static --target "library/install/strip" &&
 ninja -Cbuild_static install/strip &&
 #ninja -Cbuild_static library/install/strip &&
 wl-showstatus build-install-shared &&
 #cmake.exe --install build_shared --strip &&
 #cmake.exe --build build_shared --target "install/strip" &&
 ninja -Cbuild_shared install/strip &&
    echo OK



## fix kernel/kalloc.c (version >= 3.3.10)
#patch -ulbf kernel/kalloc.c << EOF
#@@ -105,3 +105,3 @@
#
#-#  elif defined(_MSC_VER)
#+#  elif defined(_WIN32)
#      /* MS Visual C++ 6.0 with a "Processor Pack" supports SIMD
#EOF
## fix api/api.h (version >= 3.3.10)
#patch -ulbf api/api.h << EOF
#@@ -27,2 +27,5 @@
# #endif
#+#if !defined(COMPILING_FFTW) && (defined(fftw3_EXPORTS) || defined(fftw3_threads_EXPORTS) || defined(fftw3_omp_EXPORTS) || defined(fftw3f_EXPORTS) || defined(fftw3f_threads_EXPORTS) || defined(fftw3f_omp_EXPORTS) || defined(fftw3l_EXPORTS) || defined(fftw3l_threads_EXPORTS) || defined(fftw3l_omp_EXPORTS) || defined(fftw3q_EXPORTS) || defined(fftw3q_threads_EXPORTS) || defined(fftw3q_omp_EXPORTS))
#+#  define COMPILING_FFTW
#+#endif
#
#EOF
#
##if ! cmake --version &> /dev/null || ! ninja --version &> /dev/null; then
#
#for P in STANDARD FLOAT LONG_DOUBLE QUAD_PRECISION; do
# mkdir -p build_static_$P build_shared_$P &&
# wl-showstatus configure-static-$(echo $P|tr '[:upper:]' '[:lower:]') &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DENABLE_$P:BOOL=ON -DENABLE_THREADS:BOOL=ON -DENABLE_OPENMP:BOOL=ON $(if echo $RUNPLATFORM | grep -qv "^aarch64"; then echo "-DENABLE_SSE:BOOL=ON -DENABLE_SSE2:BOOL=ON -DENABLE_AVX:BOOL=ON -DENABLE_AVX2:BOOL=ON"; fi) -DLIBM_LIBRARY:FILEPATH=" " -DBUILD_TESTS:BOOL=OFF -DCMAKE_POLICY_VERSION_MINIMUM:STRING=3.5 -S. -Bbuild_static_$P &&
# wl-showstatus configure-shared-$(echo $P|tr '[:upper:]' '[:lower:]') &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DENABLE_$P:BOOL=ON -DENABLE_THREADS:BOOL=ON -DENABLE_OPENMP:BOOL=ON $(if echo $RUNPLATFORM | grep -qv "^aarch64"; then echo "-DENABLE_SSE:BOOL=ON -DENABLE_SSE2:BOOL=ON -DENABLE_AVX:BOOL=ON -DENABLE_AVX2:BOOL=ON"; fi) -DLIBM_LIBRARY:FILEPATH=" " -DBUILD_TESTS:BOOL=OFF -DCMAKE_POLICY_VERSION_MINIMUM:STRING=3.5 -S. -Bbuild_shared_$P &&
# #-DCMAKE_C_FLAGS:STRING="-DCOMPILING_FFTW" 
# wl-showstatus build-install-static-$(echo $P|tr '[:upper:]' '[:lower:]') &&
# ninja -Cbuild_static_$P install/strip &&
# wl-showstatus build-install-shared-$(echo $P|tr '[:upper:]' '[:lower:]') &&
# ninja -Cbuild_shared_$P install/strip &&
# touch SUCCESS_$P
#done &&
# ls -l SUCCESS_*
#    echo OK

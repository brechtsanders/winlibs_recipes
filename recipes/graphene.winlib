#export NAME="Graphene"
#export STATUS=
#export URL=http://ebassi.github.io/graphene/
#export BASENAME=graphene
#export DESCRIPTION="A thin layer of graphic data types"
#export CATEGORY=dataprocessing
#export TYPE=library
##export VERSION=1.4.0
##export VERSIONDATE=20161212
##export VERSION=1.5.2
##export VERSIONDATE=20161128
##export VERSION=1.5.4
##export VERSIONDATE=20170110
#####configure: error: Cannot build introspection data without Python3
##export VERSION=1.6.0
##export VERSIONDATE=20170303
#export VERSION=1.6.2
#export VERSIONDATE=20180223
#wl-showstatus --package-version
#export DEPENDENCIES=glib2
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=
#export OPTIONALBUILDDEPENDENCIES=
##export DEPENDENCIES=
##export OPTIONALDEPENDENCIES=
##export BUILDDEPENDENCIES=meson
##export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=LICENSE
#export LICENSETYPE="MIT/X11"
#export DOWNLOADURL="https://github.com/ebassi/graphene/releases"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://github.com/ebassi/graphene/archive/$VERSION.tar.gz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
##mv $TARBALLDIR/$BASENAME/$VERSION.tar.gz $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
#wl-wait4deps
#wl-showstatus extract
##tar xz --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
#tar xz --force-local -f $TARBALLDIR/$BASENAME/$VERSION.tar.gz
#cd $BASENAME-$VERSION
#wl-showstatus configure &&
#touch gtk-doc.make &&
#autoreconf -f -i -I $MINGWPREFIX/share/aclocal &&
## don't abort on missing Python3 (version >= 1.6.0)
#mv configure configure.bak &&
#sed -e "s/as_fn_error\(.*Cannot build introspection data without Python3\)/echo\1/" configure.bak > configure &&
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-introspection=no &&
#./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --disable-introspection --disable-benchmarks &&
# wl-showstatus build-install &&
# make install-strip &&
# # fix missing _M_IX86_FP/_M_X64
# (
#patch -ulbf $INSTALLPREFIX/lib/graphene-1.0/include/graphene-config.h << EOF
#@@ -14 +14 @@
#-# if defined(__SSE__) || (_M_IX86_FP > 0) || (_M_X64 > 0)
#+# if defined(__SSE__) || (defined(_M_IX86_FP) && (_M_IX86_FP > 0)) || (defined(_M_X64) && (_M_X64 > 0))
#EOF
# ) &&
# rm -f $INSTALLPREFIX/lib/graphene-1.0/include/graphene-config.h.orig &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION



export NAME="Graphene"
export STATUS=
export URL=http://ebassi.github.io/graphene/
export BASENAME=graphene
export DESCRIPTION="A thin layer of graphic data types"
export CATEGORY=dataprocessing
export TYPE=library
#export VERSION=1.8.0
#export VERSIONDATE=20180223
#export VERSION=1.8.2
#export VERSIONDATE=20180614
#export VERSION=1.8.4
#export VERSIONDATE=20190217
#export VERSION=1.8.6
#export VERSIONDATE=20190306
#export VERSION=1.9.2
#export VERSIONDATE=20190514
#export VERSION=1.9.4
#export VERSIONDATE=20190620
#export VERSION=1.9.6
#export VERSIONDATE=20190809
####Program g-ir-scanner found: NO
#export VERSION=1.10.0
#export VERSIONDATE=20190909
#export VERSION=1.10.2
#export VERSIONDATE=20200623
#export VERSION=1.10.4
#export VERSIONDATE=20210210
export VERSION=1.10.8
export VERSIONDATE=20210319
wl-showstatus --package-version
#export DEPENDENCIES=
export DEPENDENCIES=gobject-introspection
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=meson
export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=LICENSE
export LICENSEFILE=LICENSE.txt
export LICENSETYPE="MIT/X11"
export DOWNLOADURL="https://github.com/ebassi/graphene/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/ebassi/graphene/archive/$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/$VERSION.tar.gz
cd $BASENAME-$VERSION
# fix MSVC issue
mkdir -p winfix
cp -rf $PYDIR/lib/distutils winfix/
patch -ulbf winfix/distutils/cygwinccompiler.py << EOF
@@ -85,3 +85,3 @@
         else:
-            raise ValueError("Unknown MS Compiler version %s " % msc_ver)
+            return None

EOF
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# #PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library static -D enable-gobject-types=false -D enable-introspection=false build_static &&
# #PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library static -D gobject-types=false -D introspection=false -D benchmarks=false -D tests=false build_static &&
# PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library static -D gobject-types=false -D introspection=disabled -D benchmarks=false -D tests=false build_static &&
# wl-showstatus configure &&
# #PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library shared -D enable-gobject-types=false -D enable-introspection=false build_shared &&
# #PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library shared -D gobject-types=false -D introspection=false -D benchmarks=false -D tests=false build_shared &&
# PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library shared -D gobject-types=false -D introspection=disabled -D benchmarks=false -D tests=false build_shared &&
# wl-showstatus build-install &&
# #PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib ninja -C build_static install &&
# PATH=$PYDIR:$PATH PKG_CONFIG= PYTHONPATH=$(pwd)/winfix:$MINGWPREFIX/lib${PYTHONPATH:+:$PYTHONPATH} ninja -C build_static install &&
# wl-showstatus build-install &&
# PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib ninja -C build_shared install &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
# fix detection of python3
sed -i.bak -e "s?'python3'?'$(cygpath -w $PYDIR/python.exe|sed -e 's/\\/&&&&/g')'?" src/meson.build
mkdir -p build_both &&
 wl-showstatus configure &&
 #PKG_CONFIG= PYTHONPATH=$MINGWPREFIX/lib${PYTHONPATH:+:$PYTHONPATH} $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -D gobject-types=false -D introspection=enabled -D benchmarks=false -D tests=false build_both &&
 #PKG_CONFIG= PYTHONPATH=$MINGWPREFIX/lib${PYTHONPATH:+:$PYTHONPATH} $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Dintrospection=enabled -Dgtk_doc=false -Dtests=false -Dinstalled_tests=false build_both &&
 PYTHONPATH=$MINGWPREFIX/lib${PYTHONPATH:+:$PYTHONPATH} $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Dintrospection=enabled -Dgtk_doc=false -Dtests=false -Dinstalled_tests=false build_both &&
 wl-showstatus build-install &&
 #PATH=$PYDIR:$PATH PKG_CONFIG= PYTHONPATH=$(pwd)/winfix:$MINGWPREFIX/lib${PYTHONPATH:+:$PYTHONPATH} ninja -C build_both install &&
 PATH=$PYDIR:$PATH PYTHONPATH=$(pwd)/winfix:$MINGWPREFIX/lib${PYTHONPATH:+:$PYTHONPATH} ninja -C build_both install &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




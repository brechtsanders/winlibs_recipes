#export NAME="INDI"
#export STATUS=
#export URL=http://www.indilib.org/
#export BASENAME=libindi
#export DESCRIPTION="INDI Library for Astronomical Instrumentation Control."
#export CATEGORY=hardware
#export TYPE=library
##export VERSION=0.9.9
##export VERSIONDATE=20141209
##export VERSION=1.0.0
##export VERSIONDATE=20150215
#####libs/indicom.c:265:3: error: unknown type name 'fd_set'
##export VERSION=1.1.0
##export VERSIONDATE=20150906
#####string sub-command REGEX, mode REPLACE needs at least 6 arguments total to command.
##export VERSION=1.2.0
##export VERSIONDATE=20160202
##export VERSION=1.4.0
##export VERSIONDATE=20170227
##export VERSION=1.4.1
##export VERSIONDATE=20170227
#export VERSION=1.6.2
#export VERSIONDATE=20180208
#wl-showstatus --package-version
#export DEPENDENCIES=libusb,libnova,cfitsio,pthreads,gsl
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=cmake
#export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=LICENSE
#export LICENSETYPE=LGPL
#export DOWNLOADURL="http://sourceforge.net/projects/indi/files/"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://downloads.sourceforge.net/project/indi/$BASENAME\_$VERSION.tar.gz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#wl-showstatus extract
#tar xz --force-local -f $TARBALLDIR/$BASENAME/$BASENAME\_$VERSION.tar.gz
#cd $BASENAME-$VERSION || cd $BASENAME\_$VERSION || cd libindi
## fix CMakeLists.txt
#####install Library TARGETS given no DESTINATION!
#mv CMakeLists.txt CMakeLists.txt.bak
#sed -e "s/\(LIBRARY DESTINATION \${LIB_DESTINATION}\))/\1 ARCHIVE DESTINATION \${BIN_INSTALL_DIR})/" CMakeLists.txt.bak > CMakeLists.txt
#mv libs/indibase/alignment/CMakeLists.txt libs/indibase/alignment/CMakeLists.txt.bak
#sed -e "s/\(LIBRARY DESTINATION \${[A-Z_]*}\))/\1 ARCHIVE DESTINATION \${BIN_INSTALL_DIR})/" libs/indibase/alignment/CMakeLists.txt.bak > libs/indibase/alignment/CMakeLists.txt
#wl-showstatus configure
# #rm -f CMakeCache.txt; cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DM_LIB:FILEPATH="" . -LH && echo OK
# cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DM_LIB:FILEPATH=" " . &&
# wl-showstatus build-install &&
# make install/strip &&
#    echo OK
## wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION $BASENAME\_$VERSION



export NAME="INDI"
export STATUS=
export URL=http://www.indilib.org/
export BASENAME=libindi
export DESCRIPTION="INDI Library for Astronomical Instrumentation Control."
export CATEGORY=hardware
export TYPE=library
#export VERSION=1.9.8
#export VERSIONDATE=20221018
#export VERSION=1.9.9
#export VERSIONDATE=20221130
#export VERSION=2.0.0
#export VERSIONDATE=20230131
#export VERSION=2.0.1
#export VERSIONDATE=20230405
#export VERSION=2.0.2
#export VERSIONDATE=20230531
#export VERSION=2.0.3
#export VERSIONDATE=20230801
#export VERSION=2.0.4
#export VERSIONDATE=20231001
export VERSION=2.0.5
export VERSIONDATE=20231201
wl-showstatus --package-version
export DEPENDENCIES=libusb,libnova,cfitsio,pthreads,gsl,boost
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=LGPL
export DOWNLOADURL="https://github.com/indilib/indi/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/indilib/indi/archive/refs/tags/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd indi-$VERSION
# fix libs/indibase/baseclient.cpp (version >= 1.9.8)
patch -ulbf libs/indibase/baseclient.cpp << EOF
@@ -165,3 +165,5 @@
 {
+#ifndef _WINDOWS
     struct sockaddr_un serv_addr_un;
+#endif
     struct sockaddr_in serv_addr_in;
@@ -247,3 +249,3 @@
     u_long iMode = 0;
-    iResult = ioctlsocket(sockfd, FIONBIO, &iMode);
+    int iResult = ioctlsocket(sockfd, FIONBIO, &iMode);
     if (iResult != NO_ERROR)
EOF
# fix missing timespec_get in libs/indicom.c (version >= 1.9.8)
patch -ulbf libs/indicom.c << EOF
@@ -323,2 +323,7 @@
 {
+#if defined(__MINGW32__) && !defined(_UCRT)
+    struct timeval now;
+    mingw_gettimeofday(&now, NULL);
+    return (double)now.tv_sec+(double)(now.tv_usec%1000000)/1000000.0;
+#else
     struct timespec ts;
@@ -336,2 +341,3 @@
     return (double)ts.tv_sec+(double)(ts.tv_nsec%1000000000)/1000000000.0;
+#endif
 }
EOF
# fix error: expected identifier before numeric constant in libs/libastro.cpp (version >= 1.9.8)
mv libs/libastro.cpp libs/libastro.cpp.bak &&
echo "#include <math.h>" > libs/libastro.cpp &&
cat libs/libastro.cpp.bak >> libs/libastro.cpp
# fix missing INVALID_SOCKET in libs/sockets/select.h (version >= 1.9.9)
patch -ulbf libs/sockets/select.h << EOF
@@ -29,3 +29,3 @@
 typedef SOCKET SocketFileDescriptor;
-static const int SocketInvalid = INVALID_SOCKET;
+static const SOCKET SocketInvalid = (SOCKET)(~0);
 #else
EOF
# fix missing timespec_get/TIME_UTC in libs/indicore/indicom.c (version >= 1.9.9)
patch -ulbf libs/indicore/indicom.c << EOF
@@ -332,2 +332,4 @@
     ts.tv_nsec = mts.tv_nsec;
+#elif defined(__MINGW32__) && !defined(_UCRT)
+    clock_gettime(CLOCK_REALTIME, &ts);
 #else
EOF
# fix redefinition of mode_t in libs/indicore/indiutility.h (version >= 2.0.0)
patch -ulbf libs/indicore/indiutility.h << EOF
@@ -66,3 +66,3 @@

-#ifdef _WINDOWS
+#if defined(_WINDOWS) && !defined(__MINGW32__)
 typedef int mode_t;
EOF
# fix conflict with base64.h from base64c in libs/indidevice/basedevice.cpp (version >= 2.0.2)
sed -i.bak -e "s?\(\"\)\(base64\.h\)?\1../indicore/\2?" libs/indidevice/basedevice.cpp
# fix libs/indicore/indidevapi.c (version >= 2.0.3)
patch -ulbf libs/indicore/indidevapi.c << EOF
@@ -74,3 +74,7 @@
     {
+#ifdef _WIN32
+        if (mkdir(configDir) < 0)
+#else
         if (mkdir(configDir, S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH) < 0)
+#endif
             return NULL;
@@ -78,2 +82,3 @@

+#ifndef _WIN32
     stat(configFileName, &st);
@@ -82,2 +87,3 @@
         return NULL;
+#endif

EOF
# also allow building shared library (version >= 1.9.8)
sed -i.bak -e "s/\(add_library(indiclient\) STATIC/\1/" CMakeLists.txt
mkdir -p build_static build_shared &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DINDI_BUILD_WEBSOCKET:BOOL=ON -DINDI_BUILD_CLIENT:BOOL=ON -DINDI_BUILD_SERVER:BOOL=ON -DCMAKE_C_FLAGS:STRING="-I$MINGWPREFIX/include/mman-win32" -DCMAKE_CXX_FLAGS:STRING="-D_WINDOWS" -S. -Bbuild_static &&
 # fix missing link libraries
 sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lws2_32/" build_static/build.ninja &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DINDI_BUILD_WEBSOCKET:BOOL=ON -DINDI_BUILD_CLIENT:BOOL=ON -DINDI_BUILD_SERVER:BOOL=ON -DCMAKE_C_FLAGS:STRING="-I$MINGWPREFIX/include/mman-win32" -DCMAKE_CXX_FLAGS:STRING="-D_WINDOWS" -S. -Bbuild_shared &&
 # fix missing link libraries
 sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lws2_32 -lz -lmman -lnova/" build_shared/build.ninja &&
 wl-showstatus build-install &&
 ninja -Cbuild_static install/strip &&
 wl-showstatus build-install &&
 ninja -Cbuild_shared install/strip &&
 #strip build_shared/*.dll &&
 #mkdir -p $INSTALLPREFIX/bin &&
 #cp -u build_shared/*.dll $INSTALLPREFIX/bin &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf indi-$VERSION




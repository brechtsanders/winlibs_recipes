export NAME="miniaudio"
export STATUS=
export URL=https://miniaud.io/
#export URL=https://github.com/mackron/miniaudio
export BASENAME=miniaudio
export DESCRIPTION="Audio playback and capture library written in C, in a single source file."
export CATEGORY=audio
export TYPE=library
#export VERSION=master
#export VERSIONDATE=20221030
#export VERSION=0.11.15
#export VERSIONDATE=20230430
#export VERSION=0.11.16
#export VERSIONDATE=20230515
#export VERSION=0.11.17
#export VERSIONDATE=20230527
#export VERSION=0.11.18
#export VERSIONDATE=20230807
#export VERSION=0.11.19
#export VERSIONDATE=20231104
#export VERSION=0.11.20
#export VERSIONDATE=20231110
#export VERSION=0.11.21
#export VERSIONDATE=20231115
#export VERSION=0.11.22
#export VERSIONDATE=20250224
export VERSION=0.11.23
export VERSIONDATE=20250911
wl-showstatus --package-version
export DEPENDENCIES=
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE="Public Domain"
export DOWNLOADURL="https://github.com/mackron/miniaudio/tags"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://github.com/mackron/miniaudio/archive/refs/heads/$VERSION.tar.gz
export DOWNLOADSOURCEURL=https://github.com/mackron/miniaudio/archive/refs/tags/$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/$VERSION.tar.gz
cd $BASENAME-$VERSION
wl-showstatus build &&
 ${CC:-gcc} -c -o audioconverter.o tools/audioconverter/audioconverter.c -O3 &&
 ${CC:-gcc} -s -o audioconverter.exe audioconverter.o &&
 wl-showstatus install &&
 mkdir -p $INSTALLPREFIX/include $INSTALLPREFIX/bin &&
 cp -f *.h $INSTALLPREFIX/include/ &&
 cp -f *.exe $INSTALLPREFIX/bin/ &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION



#export BUILDDEPENDENCIES=cmake,ninja
#mkdir -p build_static build_shared &&
# wl-showstatus configure-static &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DMINIAUDIO_ENABLE_WASAPI:BOOL=ON -DMINIAUDIO_USE_STDINT:BOOL=ON -DMINIAUDIO_BUILD_EXAMPLES:BOOL=OFF -DMINIAUDIO_BUILD_TESTS:BOOL=OFF -S. -Bbuild_static &&
# #-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
# wl-showstatus configure-shared &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DMINIAUDIO_ENABLE_WASAPI:BOOL=ON -DMINIAUDIO_USE_STDINT:BOOL=ON -DMINIAUDIO_BUILD_EXAMPLES:BOOL=OFF -DMINIAUDIO_BUILD_TESTS:BOOL=OFF -S. -Bbuild_shared &&
# ## fix execution of Python scripts
# #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|glib-genmarshal\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
# ## fix missing link libraries
# #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lws2_32/" build_shared/build.ninja &&
# #wl-showstatus build-static &&
# #cmake.exe --build build_static &&
# #ninja -Cbuild_static &&
# #wl-showstatus build-shared &&
# #cmake.exe --build build_shared &&
# #ninja -Cbuild_shared &&
# wl-showstatus build-install-static &&
# #cmake.exe --install build_static --strip &&
# #cmake.exe --build build_static --target "install/strip" &&
# #cmake.exe --build build_static --target "library/install/strip" &&
# ninja -Cbuild_static install/strip &&
# #ninja -Cbuild_static library/install/strip &&
# wl-showstatus build-install-shared &&
# #cmake.exe --install build_shared --strip &&
# #cmake.exe --build build_shared --target "install/strip" &&
# ninja -Cbuild_shared install/strip &&
#    echo OK

export NAME="libwnck"
export STATUS=
export URL=http://launchpad.net/libwnck
export BASENAME=libwnck
export DESCRIPTION="libwnck (pronounced \"libwink\") is used to implement pagers, tasklists, and other such things. It allows applications to monitor information about open windows, workspaces, their names/icons, and so forth."
export CATEGORY=office
export TYPE=library
#export VERSION=2.30.6
#export VERSIONDATE=20101117
#export VERSION=2.30.7
#export VERSIONDATE=20110831
#export VERSION=2.31.0
#export VERSIONDATE=20120305
####/include/tkIntXlibDecls.h:39: error: expected '=', ',', ';', 'asm' or '__attribute__' before 'void'
#export VERSION=3.0.0
#export VERSIONDATE=20110405
#export VERSION=3.0.2
#export VERSIONDATE=20110524
#export VERSION=3.1.5
#export VERSIONDATE=20110813
#export VERSION=3.2.0
#export VERSIONDATE=20110926
#export VERSION=3.2.1
#export VERSIONDATE=20111016
#export VERSION=3.3.5
#export VERSIONDATE=20120207
#export VERSION=3.4.0
#export VERSIONDATE=20120326
#export VERSION=3.4.2
#export VERSIONDATE=20120515
#export VERSION=3.4.4
#export VERSIONDATE=20121113
#export VERSION=3.4.5
#export VERSIONDATE=20130209
#export VERSION=3.5.91
#export VERSIONDATE=2012094
#export VERSION=3.4.6
#export VERSIONDATE=20130806
#export VERSION=3.4.7
#export VERSIONDATE=20130820
#export VERSION=3.4.8
#export VERSIONDATE=20140902
#export VERSION=3.4.9
#export VERSIONDATE=20140903
#export VERSION=3.14.0
#export VERSIONDATE=20141124
#export VERSION=3.14.1
#export VERSIONDATE=20160225
#export VERSION=3.18.0
#export VERSIONDATE=20160622
#export VERSION=3.20.0
#export VERSIONDATE=20160622
#export VERSION=3.20.1
#export VERSIONDATE=20160628
####libwnck/gdk/gdkx.h:15:16: error: no previous prototype for 'gdk_x11_get_xatom_by_name' [-Werror=missing-prototypes]
#export VERSION=3.24.0
#export VERSIONDATE=20170629
#export VERSION=3.24.1
#export VERSIONDATE=20170727
####libwnck/pager.c:(.text+0x543): undefined reference to `gdk_x11_screen_get_screen_number'
export VERSION=3.30.0
export VERSIONDATE=20180911
#####libwnck/xutils.c:26:10: fatal error: cairo-xlib.h: No such file or directory
export DEPENDENCIES=cairo,libx11,glib2,gtk3,atk,gettext
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=
export OPTIONALBUILDDEPENDENCIES=
#export VERSION=3.31.1
#export VERSIONDATE=20181107
#export VERSION=3.31.4
#export VERSIONDATE=20190109
#export VERSION=3.32.0
#export VERSIONDATE=20190501
#export VERSION=3.36.0
#export VERSIONDATE=20200326
#export VERSION=40.0
#export VERSIONDATE=20210511
#export VERSION=40.1
#export VERSIONDATE=20220217
#export VERSION=43.0
#export VERSIONDATE=20220917
#####libwnck/xutils.h:29:10: fatal error: gdk/gdkx.h: No such file or directory
wl-showstatus --package-version
#export DEPENDENCIES=cairo,libx11,glib2,gtk3,atk,gettext
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=meson,ninja
#export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=COPYING
export LICENSETYPE=GPL
export DOWNLOADURL="http://ftp.gnome.org/pub/GNOME/sources/libwnck/"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://ftp.gnome.org/pub/gnome/sources/$BASENAME/`echo $VERSION|sed 's/^\([0-9]*\.[0-9]*\)\..*$/\1/'`/$BASENAME-$VERSION.tar.bz2
#export DOWNLOADSOURCEURL=http://ftp.gnome.org/pub/gnome/sources/$BASENAME/`echo $VERSION|sed 's/^\([0-9]*\.[0-9]*\)\..*$/\1/'`/$BASENAME-$VERSION.tar.xz
export DOWNLOADSOURCEURL=http://ftp.gnome.org/pub/gnome/sources/libwnck/$(echo $VERSION|sed 's/^\([0-9]*\.[0-9]*\)\..*$/\1/')/$BASENAME-$VERSION.tar.xz
#export DOWNLOADSOURCEURL=http://ftp.gnome.org/pub/gnome/sources/libwnck/$(echo $VERSION|sed 's/^\([0-9]*\)\..*$/\1/')/$BASENAME-$VERSION.tar.xz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
#tar xj --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.bz2
tar xJ --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.xz
cd $BASENAME-$VERSION
# fix missing gdk/gdkx.h
mkdir -p winfix/gdk
cat > winfix/gdk/gdkx.h << EOF
#ifndef __FAKE_GDKX_H
#define __FAKE_GDKX_H
////fix error: /include/w32api/winspool.h:255: error: two or more data types in declaration specifiers
//#undef Status
//#include <windows.h>
#include <gdk/gdkwin32.h>
#include <X11/X.h>
#include <X11/Xlib.h>
#include <X11/Xutil.h>
//#define GDK_WINDOW_XID(dw) (int)GDK_WINDOW_HWND(dw)
#define GDK_DISPLAY_XDISPLAY(d) gdk_display_get_default_screen(d)
//#ifndef DEFINED_gdk_x11_get_xatom_by_name
//#define DEFINED_gdk_x11_get_xatom_by_name
#define gdk_x11_get_xatom_by_name(n) gdk_atom_intern((n), FALSE)
//inline GdkAtom gdk_x11_get_xatom_by_name(const gchar* n) { return gdk_atom_intern(n, FALSE); }
#define gdk_x11_screen_supports_net_wm_hint(s,p) FALSE
#define gdk_x11_get_xatom_name(a) NULL
#define gdk_x11_xatom_to_atom(a) NULL
#define gdk_x11_lookup_xdisplay(d) NULL
#define gdk_x11_window_lookup_for_display() NULL
#define gdk_x11_window_lookup_for_display(d,w) NULL
#define gdk_x11_screen_get_screen_number(s) 0
#ifndef GDK_IS_X11_DISPLAY
#define GDK_IS_X11_DISPLAY(d) 0
#endif
#define gdk_x11_display_error_trap_push(d)
#define gdk_x11_display_error_trap_pop(d) 0
#endif //__FAKE_GDKX_H
EOF
# fix problem detecting GNU gettext tools on 64-bit
if ( echo $RUNPLATFORM | grep -q x86_64 ); then
 mv configure configure.bak
 sed -e "s/as_fn_error\(.*GNU gettext tools not found; required for intltool\)/as_echo\1/" configure.bak > configure
fi
wl-showstatus configure &&
 #INTLTOOL_PERL="$PERLDIR/bin/perl.exe" ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-static --enable-shared --disable-debug --disable-startup-notification --disable-tools --without-x --disable-introspection --enable-compile-warnings=minimum --disable-deprecation-flags --enable-tools CFLAGS="-I$(pwd)/winfix" LDFLAGS="-Wl,-no-undefined" &&
 #PATH=$PATH:$PERLDIR/../c/bin INTLTOOL_PERL="$PERLDIR/bin/perl.exe" ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-static --enable-shared --without-x --disable-introspection --enable-compile-warnings=minimum --disable-deprecation-flags --enable-tools CFLAGS="-I$PWD/winfix" LDFLAGS="-Wl,-no-undefined" &&
 PATH=$PATH:$PERLDIR/../c/bin INTLTOOL_PERL="$PERLDIR/bin/perl.exe" ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-static --enable-shared --without-x --disable-introspection --enable-compile-warnings=minimum --disable-deprecation-flags --enable-tools CFLAGS="-I$PWD/winfix $(if ${CC:-gcc} --help -v 2>/dev/null|grep -q "\-Wint-conversion" || ${CC:-gcc} --version|grep -q "^clang"; then echo "-Wno-error=int-conversion"; fi) $(if ${CC:-gcc} --help -v 2>/dev/null|grep -q "\-Wincompatible-pointer-types" || ${CC:-gcc} --version|grep -q "^clang"; then echo "-Wno-incompatible-pointer-types"; fi)" LDFLAGS="-Wl,-no-undefined" &&
 wl-showstatus build-install &&
 # fix error: /include/w32api/winspool.h:255: error: two or more data types in declaration specifiers
 mv config.h config.h.bak &&
 echo "#include <windows.h>" > config.h &&
 cat config.h.bak >> config.h &&
 ( make install-strip || make -j1 install-strip ) &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && rm -rf $BASENAME-$VERSION
####Too many warnings, probably not working



#export BUILDDEPENDENCIES=meson,ninja
#export OPTIONALBUILDDEPENDENCIES=
## fix missing gdk/gdkx.h
#mkdir -p winfix/gdk
#echo "#include <gdk/gdkwin32.h>" > winfix/gdk/gdkx.h
## fix missing gio-unix
#sed -i.bak -e "s/gio-unix-/gio-/" meson.build
#mkdir -p build_both &&
# wl-showstatus configure &&
# #PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Dinstall_tools=false -Dintrospection=disabled -Dstartup_notification=disabled -Dc_args="-I$(pwd)/winfix" . build_both &&
# #PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Dgobject_introspection=false -Dbash_completion=false -Dsystemd=false -Doffline_update=false -Dman_pages=false -Dgtk_doc=false -Dc_args="-I$(pwd)/winfix" . build_both &&
# PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Dintrospection=enabled -Dgtk_doc=false -Dc_args="-I$(pwd)/winfix" . build_both &&
# ## fix slash/backslash path issue when calling Python from Ninja
# #sed -i.bak -e "s/join_paths/os.path.join/g; /COMMAND =.*python\.exe/ s?\"/\([a-zA-Z]\)/?\"\1:/?; /COMMAND =.*python\.exe/ s?/?\\\\?g" build_*/build.ninja &&
# # fix Python path issues in meson_exe
# sed -i.bak -e "s?$PYDIR?$(echo $PYDIR|sed -e "s?^/\([a-zA-Z]\)/?\1:/?")?" build_both/meson-private/meson_exe_python.exe_*.dat &&
# # fix undefined IconicState
# echo "#include <X11/Xutil.h>" >> build_both/config.h &&
# wl-showstatus build-install &&
# PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib GETTEXTDATADIR=$MINGWPREFIX/share/gettext  ninja -C build_both install &&
#    echo OK && find . -name '*.a'

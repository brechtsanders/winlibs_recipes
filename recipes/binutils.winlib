export NAME="GNU Binutils"
export STATUS=
export URL=http://www.gnu.org/software/binutils/
export BASENAME=binutils
export DESCRIPTION="The GNU Binutils are a collection of binary tools"
export CATEGORY=development
export TYPE=application
#export VERSION=2.23
#export VERSIONDATE=20130921
#export VERSION=2.24
#export VERSIONDATE=20131202
#export VERSION=2.25
#export VERSIONDATE=20141224
#export VERSION=2.25.1
#export VERSIONDATE=20150722
#export VERSION=2.26
#export VERSIONDATE=20160125
#export VERSION=2.26.1
#export VERSIONDATE=20160629
#export VERSION=2.27
#export VERSIONDATE=20160803
#export VERSION=2.28
#export VERSIONDATE=20170302
#export VERSION=2.28.1
#export VERSIONDATE=20170726
#export VERSION=2.29
#export VERSIONDATE=20170724
#export VERSION=2.29.1
#export VERSIONDATE=20170926
#export VERSION=2.30
#export VERSIONDATE=20180129
#export VERSION=2.31
#export VERSIONDATE=20180715
#export VERSION=2.31.1
#export VERSIONDATE=20180718
#export VERSION=2.32
#export VERSIONDATE=20190203
#export VERSION=2.33.1
#export VERSIONDATE=20191013
#export VERSION=2.34
#export VERSIONDATE=20200202
#export VERSION=2.35
#export VERSIONDATE=20200726
#export VERSION=2.35.1
#export VERSIONDATE=20200920
#export VERSION=2.35.2
#export VERSIONDATE=20210130
#export VERSION=2.36
#export VERSIONDATE=20210124
#export VERSION=2.36.1
#export VERSIONDATE=20210206
#export VERSION=2.37
#export VERSIONDATE=20210719
export VERSION=2.38
export VERSIONDATE=20220209
wl-showstatus --package-version
#export DEPENDANCIES=mpc,mpfr,gmp,cloog,isl
export DEPENDANCIES=mpc,mpfr,gmp,cloog,isl,mman-win32
export OPTIONALDEPENDANCIES=
export BUILDDEPENDANCIES=texinfo
export LICENSEFILE=COPYING
export LICENSETYPE="GPL/LGPL"
export DOWNLOADURL="http://ftp.gnu.org/gnu/binutils/"
#export DOWNLOADURL="http://sourceware.org/git/?p=binutils-gdb.git;a=tags"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=http://ftp.gnu.org/gnu/binutils/$BASENAME-$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
tar xfz $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
cd $BASENAME-$VERSION
# fix error when --with-pkgversion value contains a comma
sed -i.bak -e 's/\(-e "s\),\([^,]*\),\([^,]*\),/\1?\2?\3?/' bfd/Makefile.in
# fix bswap_16/bswap_32/bswap_identity_64 in libctf/swap.h (version >= 2.33.1)
sed -i.bak -e "s/^inline/static &/" libctf/swap.h
# fix hanging issue by reducing the data size in ld/emultempl/pep.em
sed -i.bak -e "s/^\(\s\)\s*/\1/" ld/emultempl/pep.em
## fix GCC11 issues in ld/scripttempl/pe.sc and ld/scripttempl/pep.sc (version >= 2.36.1)
#####bug report: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=98860
#patch -ulbf ld/scripttempl/pe.sc << EOF
#@@ -412,11 +412,2 @@
# 
#-  .debug_macro \${RELOCATING+BLOCK(__section_alignment__)} \${RELOCATING+(NOLOAD)} :
#-  {
#-    *(.debug_macro)
#-  }
#-  .zdebug_macro \${RELOCATING+BLOCK(__section_alignment__)} \${RELOCATING+(NOLOAD)} :
#-  {
#-    *(.zdebug_macro)
#-  }
#-
#   /* DWARF 3.  */
#@@ -440,2 +431,75 @@
#   }
#+
#+  /* DWARF 5.  */
#+  .debug_addr \${RELOCATING+BLOCK(__section_alignment__)} \${RELOCATING+(NOLOAD)} :
#+  {
#+    *(.debug_addr)
#+  }
#+  .zdebug_addr \${RELOCATING+BLOCK(__section_alignment__)} \${RELOCATING+(NOLOAD)} :
#+  {
#+    *(.zdebug_addr)
#+  }
#+
#+  .debug_line_str \${RELOCATING+BLOCK(__section_alignment__)} \${RELOCATING+(NOLOAD)} :
#+  {
#+    *(.debug_line_str)
#+  }
#+  .zdebug_line_str \${RELOCATING+BLOCK(__section_alignment__)} \${RELOCATING+(NOLOAD)} :
#+  {
#+    *(.zdebug_line_str)
#+  }
#+
#+  .debug_loclists \${RELOCATING+BLOCK(__section_alignment__)} \${RELOCATING+(NOLOAD)} :
#+  {
#+    *(.debug_loclists)
#+  }
#+  .zdebug_loclists \${RELOCATING+BLOCK(__section_alignment__)} \${RELOCATING+(NOLOAD)} :
#+  {
#+    *(.zdebug_loclists)
#+  }
#+
#+  .debug_macro \${RELOCATING+BLOCK(__section_alignment__)} \${RELOCATING+(NOLOAD)} :
#+  {
#+    *(.debug_macro)
#+  }
#+  .zdebug_macro \${RELOCATING+BLOCK(__section_alignment__)} \${RELOCATING+(NOLOAD)} :
#+  {
#+    *(.zdebug_macro)
#+  }
#+
#+  .debug_names \${RELOCATING+BLOCK(__section_alignment__)} \${RELOCATING+(NOLOAD)} :
#+  {
#+    *(.debug_names)
#+  }
#+  .zdebug_names \${RELOCATING+BLOCK(__section_alignment__)} \${RELOCATING+(NOLOAD)} :
#+  {
#+    *(.zdebug_names)
#+  }
#+
#+  .debug_rnglists \${RELOCATING+BLOCK(__section_alignment__)} \${RELOCATING+(NOLOAD)} :
#+  {
#+    *(.debug_rnglists)
#+  }
#+  .zdebug_rnglists \${RELOCATING+BLOCK(__section_alignment__)} \${RELOCATING+(NOLOAD)} :
#+  {
#+    *(.zdebug_rnglists)
#+  }
#+
#+  .debug_str_offsets \${RELOCATING+BLOCK(__section_alignment__)} \${RELOCATING+(NOLOAD)} :
#+  {
#+    *(.debug_str_offsets)
#+  }
#+  .zdebug_str_offsets \${RELOCATING+BLOCK(__section_alignment__)} \${RELOCATING+(NOLOAD)} :
#+  {
#+    *(.zdebug_str_offsets)
#+  }
#+
#+  .debug_sup \${RELOCATING+BLOCK(__section_alignment__)} \${RELOCATING+(NOLOAD)} :
#+  {
#+    *(.debug_sup)
#+  }
#+  .zdebug_sup \${RELOCATING+BLOCK(__section_alignment__)} \${RELOCATING+(NOLOAD)} :
#+  {
#+    *(.zdebug_sup)
#+  }
# 
#EOF
#patch -ulbf ld/scripttempl/pep.sc << EOF
#@@ -417,11 +417,2 @@
# 
#-  .debug_macro \${RELOCATING+BLOCK(__section_alignment__)} \${RELOCATING+(NOLOAD)} :
#-  {
#-    *(.debug_macro)
#-  }
#-  .zdebug_macro \${RELOCATING+BLOCK(__section_alignment__)} \${RELOCATING+(NOLOAD)} :
#-  {
#-    *(.zdebug_macro)
#-  }
#-
#   /* DWARF 3.  */
#@@ -445,2 +436,75 @@
#   }
#+
#+  /* DWARF 5.  */
#+  .debug_addr \${RELOCATING+BLOCK(__section_alignment__)} \${RELOCATING+(NOLOAD)} :
#+  {
#+    *(.debug_addr)
#+  }
#+  .zdebug_addr \${RELOCATING+BLOCK(__section_alignment__)} \${RELOCATING+(NOLOAD)} :
#+  {
#+    *(.zdebug_addr)
#+  }
#+
#+  .debug_line_str \${RELOCATING+BLOCK(__section_alignment__)} \${RELOCATING+(NOLOAD)} :
#+  {
#+    *(.debug_line_str)
#+  }
#+  .zdebug_line_str \${RELOCATING+BLOCK(__section_alignment__)} \${RELOCATING+(NOLOAD)} :
#+  {
#+    *(.zdebug_line_str)
#+  }
#+
#+  .debug_loclists \${RELOCATING+BLOCK(__section_alignment__)} \${RELOCATING+(NOLOAD)} :
#+  {
#+    *(.debug_loclists)
#+  }
#+  .zdebug_loclists \${RELOCATING+BLOCK(__section_alignment__)} \${RELOCATING+(NOLOAD)} :
#+  {
#+    *(.zdebug_loclists)
#+  }
#+
#+  .debug_macro \${RELOCATING+BLOCK(__section_alignment__)} \${RELOCATING+(NOLOAD)} :
#+  {
#+    *(.debug_macro)
#+  }
#+  .zdebug_macro \${RELOCATING+BLOCK(__section_alignment__)} \${RELOCATING+(NOLOAD)} :
#+  {
#+    *(.zdebug_macro)
#+  }
#+
#+  .debug_names \${RELOCATING+BLOCK(__section_alignment__)} \${RELOCATING+(NOLOAD)} :
#+  {
#+    *(.debug_names)
#+  }
#+  .zdebug_names \${RELOCATING+BLOCK(__section_alignment__)} \${RELOCATING+(NOLOAD)} :
#+  {
#+    *(.zdebug_names)
#+  }
#+
#+  .debug_rnglists \${RELOCATING+BLOCK(__section_alignment__)} \${RELOCATING+(NOLOAD)} :
#+  {
#+    *(.debug_rnglists)
#+  }
#+  .zdebug_rnglists \${RELOCATING+BLOCK(__section_alignment__)} \${RELOCATING+(NOLOAD)} :
#+  {
#+    *(.zdebug_rnglists)
#+  }
#+
#+  .debug_str_offsets \${RELOCATING+BLOCK(__section_alignment__)} \${RELOCATING+(NOLOAD)} :
#+  {
#+    *(.debug_str_offsets)
#+  }
#+  .zdebug_str_offsets \${RELOCATING+BLOCK(__section_alignment__)} \${RELOCATING+(NOLOAD)} :
#+  {
#+    *(.zdebug_str_offsets)
#+  }
#+
#+  .debug_sup \${RELOCATING+BLOCK(__section_alignment__)} \${RELOCATING+(NOLOAD)} :
#+  {
#+    *(.debug_sup)
#+  }
#+  .zdebug_sup \${RELOCATING+BLOCK(__section_alignment__)} \${RELOCATING+(NOLOAD)} :
#+  {
#+    *(.zdebug_sup)
#+  }
# 
#EOF
## patches to fix relocation truncated to fit errors (version = 2.36.1)
#####see also: https://github.com/msys2/MINGW-packages/pull/8259/commits/ea10978f3cd535ba5f5e8c6c68023eace7de0be8
#####see also: https://sourceware.org/bugzilla/show_bug.cgi?id=26659
#patch -ulbf bfd/cofflink.c << EOF
#@@ -3129,6 +3129,21 @@ _bfd_coff_generic_relocate_section (bfd *output_bfd,
# 	  return false;
# 	case bfd_reloc_overflow:
# 	  {
#+
#+	    /* Ignore any weak undef symbols that may have overflowed.  Due to
#+	       PR ld/19011 the base address is now in the upper 64-bit address
#+	       range.  This means that when _bfd_final_link_relocate calculates
#+	       the overlow it takes the distance between the symbol and the VMA
#+	       which will now always overflow as 0 - 64-bit addr > 32-bit range
#+	       of the relocation.  This ends up creating PR ld/26659.  */
#+	    if (val == 0
#+		/* Reverse the hack where 4 is subtracted from the addend.  */
#+		&& (addend + 4) == 0
#+		&& sym->n_sclass == C_NT_WEAK
#+		&& bfd_coff_classify_symbol (output_bfd, sym)
#+		     == COFF_SYMBOL_UNDEFINED)
#+	      break;
#+
# 	    const char *name;
# 	    char buf[SYMNMLEN + 1];
#EOF
#patch -ulbf ld/testsuite/ld-pe/pe.exp << EOF
#@@ -81,6 +81,7 @@ run_dump_test "reloc"
# run_dump_test "weakdef-1"
# 
# run_dump_test "pr19803"
#+run_dump_test "pr26659-weak-undef-sym"
# set pr19803_dll {
#     {   "PR 19803: not exporting swept symbols"
# 	"-shared --out-implib dx.dll --gc-sections"
#EOF
## fix ld/testsuite/ld-pe/pr26659-weak-undef-sym.d (version >= 2.36.1)
#patch -ulbf ld/testsuite/ld-pe/pr26659-weak-undef-sym.d << EOF
#@@ -0,0 +1,25 @@
#+#source: pr26659-weak-undef-sym.s
#+#target: x86_64-*-cygwin* x86_64-*-pe x86_64-*-mingw*
#+#ld: -e0
#+#objdump: -d
#+
#+#...
#+00000001[04]0[04]01000 <foo>:
#+ *[0-9a-f]+:   55                      push   %rbp
#+ *[0-9a-f]+:   48 89 e5                mov    %rsp,%rbp
#+ *[0-9a-f]+:   48 83 ec 20             sub    \\\$0x20,%rsp
#+ *[0-9a-f]+:   89 4d 10                mov    %ecx,0x10\\(%rbp\\)
#+ *[0-9a-f]+:   48 8b 05 ee 0f 00 00    mov    0xfee\\(%rip\\),%rax        # [0-9a-f]+ <__data_end__>
#+ *[0-9a-f]+:   48 85 c0                test   %rax,%rax
#+ *[0-9a-f]+:   74 05                   je     [0-9a-f]+ <foo\\+0x1c>
#+ *[0-9a-f]+:   e8 e4 ef [fb]f [fb]f            call   100000000 <__size_of_stack_reserve__\\+0xffe00000>
#+ *[0-9a-f]+:   48 8b 05 ed 0f 00 00    mov    0xfed\\(%rip\\),%rax        # [0-9a-f]+ <.refptr.bar2>
#+ *[0-9a-f]+:   48 85 c0                test   %rax,%rax
#+ *[0-9a-f]+:   74 05                   je     [0-9a-f]+ <foo\\+0x2d>
#+ *[0-9a-f]+:   e8 d3 ef [fb]f [fb]f            call   100000000 <__size_of_stack_reserve__\\+0xffe00000>
#+ *[0-9a-f]+:   8b 45 10                mov    0x10\\(%rbp\\),%eax
#+ *[0-9a-f]+:   0f af c0                imul   %eax,%eax
#+ *[0-9a-f]+:   48 83 c4 20             add    \\\$0x20,%rsp
#+ *[0-9a-f]+:   5d                      pop    %rbp
#+ *[0-9a-f]+:   c3                      ret *
#+#pass
#EOF
#patch -ulbf ld/testsuite/ld-pe/pr26659-weak-undef-sym.s << EOF
#@@ -0,0 +1,38 @@
#+        .text
#+        .globl  foo
#+        .def    foo;    .scl    2;      .type   32;     .endef
#+foo:
#+        pushq   %rbp
#+        movq    %rsp, %rbp
#+        subq    $32, %rsp
#+        movl    %ecx, 16(%rbp)
#+        movq    .refptr.bar1(%rip), %rax
#+        testq   %rax, %rax
#+        je      .L2
#+        call    bar1
#+.L2:
#+        movq    .refptr.bar2(%rip), %rax
#+        testq   %rax, %rax
#+        je      .L3
#+        call    bar2
#+.L3:
#+        movl    16(%rbp), %eax
#+        imull   %eax, %eax
#+        addq    $32, %rsp
#+        popq    %rbp
#+        ret
#+        .weak   bar2
#+        .weak   bar1
#+        .def    bar1;   .scl    2;      .type   32;     .endef
#+        .def    bar2;   .scl    2;      .type   32;     .endef
#+        .section        .rdata$.refptr.bar2, "dr"
#+        .globl  .refptr.bar2
#+        .linkonce       discard
#+.refptr.bar2:
#+        .quad   bar2
#+        .section        .rdata$.refptr.bar1, "dr"
#+        .globl  .refptr.bar1
#+        .linkonce       discard
#+.refptr.bar1:
#+        .quad   bar1
#+
#EOF
## fix building DLLs
#sed -i.bak -e "s/\(allow_undefined=\)yes/\1no/" ltmain.sh &&
mkdir -p build_win &&
 wl-showstatus configure &&
 cd build_win &&
 #../configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM LDFLAGS="-Wl,--as-needed" &&
 #../configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM &&
 #../configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-shared --enable-host-shared --enable-libada --enable-libssp --enable-lto &&
 #../configure --prefix=$INSTALLPREFIX/share/binutils --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-shared --enable-host-shared --enable-libada --enable-libssp --enable-lto AR=ar &&
 #../configure --prefix=$INSTALLPREFIX/share/binutils --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-shared --enable-host-shared --enable-libada --enable-libssp --enable-lto AR=ar LDFLAGS="-Wl,--as-needed -lintl" &&
 #../configure --prefix=$INSTALLPREFIX/share/binutils --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-shared --enable-host-shared --enable-serial-configure --disable-bootstrap --enable-{libada,libssp,lto} --enable-gold --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX --with-system-zlib AR=ar &&
 #../configure --prefix=$INSTALLPREFIX/share/binutils --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-pkgversion="Binutils for MinGW-W64 $(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo x86_64; else echo i686; fi), built by Brecht Sanders" --enable-shared --enable-host-shared --enable-serial-configure --disable-bootstrap --enable-{libada,libssp,lto} --enable-gold --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX --with-system-zlib AR=ar &&
 #../configure --prefix=$INSTALLPREFIX/share/binutils --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-pkgversion="Binutils for MinGW-W64 $(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo x86_64; else echo i686; fi), built by Brecht Sanders" --enable-shared --enable-host-shared --enable-serial-configure --disable-bootstrap --enable-{libada,libssp,lto,gold,plugins} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX --disable-{multilib,rpath} --enable-install-libiberty --with-system-zlib AR=ar &&
 #../configure --prefix=$INSTALLPREFIX/share/binutils --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-pkgversion="Binutils for MinGW-W64 $(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo x86_64; else echo i686; fi), built by Brecht Sanders" --enable-shared --enable-host-shared --enable-serial-configure --disable-bootstrap --enable-{libada,libssp,gold,plugins} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX --disable-{multilib,rpath} --enable-install-libiberty --with-system-zlib --disable-lto AR=ar --with-mmap CFLAGS="-I$MINGWPREFIX/include/mman-win32" LDFLAGS="-Wl,--as-needed -lmman" &&
 #../configure --prefix=$INSTALLPREFIX/share/binutils --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-pkgversion="Binutils for MinGW-W64 $(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo x86_64; else echo i686; fi), built by Brecht Sanders" --enable-shared --enable-host-shared --enable-serial-configure --disable-bootstrap --enable-{libada,libssp,lto,gold,plugins} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX --disable-{multilib,rpath} --enable-install-libiberty --with-system-zlib AR=ar --with-mmap CFLAGS="-I$MINGWPREFIX/include/mman-win32" LDFLAGS="-Wl,--as-needed -lmman" &&
 #../configure --prefix=$INSTALLPREFIX/share/binutils --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-pkgversion="Binutils for MinGW-W64 $(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo x86_64; else echo i686; fi), built by Brecht Sanders" --enable-shared --enable-host-shared --enable-serial-configure --disable-bootstrap --enable-{libada,libssp,lto,gold,plugins,vtable-verify} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX --disable-{multilib,rpath} --enable-install-libiberty --with-system-zlib AR=ar --with-mmap CFLAGS="-I$MINGWPREFIX/include/mman-win32" LDFLAGS="-Wl,--as-needed -lmman" &&
 ../configure --prefix=$INSTALLPREFIX/share/binutils --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-pkgversion="Binutils for MinGW-W64 $(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo x86_64; else echo i686; fi), built by Brecht Sanders" --enable-shared --enable-host-shared --enable-serial-configure --disable-bootstrap --enable-{libada,libssp,lto,gold,plugins,vtable-verify,64-bit-bfd,install-libbfd} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX --disable-{multilib,rpath} --enable-install-libiberty --with-system-zlib --with-mmap CFLAGS="-I$MINGWPREFIX/include/mman-win32" LDFLAGS="-Wl,--as-needed -lmman" AR=ar &&
 cd .. &&
 #make -j1 -Cbuild_winconfigure-host &&
 ## fix building DLLs
 #for F in */libtool; do 
 # mv $F $F.bak &&
 # sed -e "s/\(allow_undefined=\)yes/\1no/" $F.bak > $F
 #done &&
 wl-showstatus build &&
 #( make -Cbuild_win || make -Cbuild_win MAKEINFO="$PERLDIR/bin/perl.exe -I$MINGWPREFIX/share/texinfo -I$MINGWPREFIX/share/texinfo/lib/libintl-perl/lib -I$MINGWPREFIX/share/texinfo/lib/Text-Unidecode/lib -I$MINGWPREFIX/share/texinfo/lib/Unicode-EastAsianWidth/lib $(which makeinfo) --split-size=5000000" ) &&
 # fix missing uint (version >= 2.37)
 ( make -Cbuild_win || ( echo "#define uint unsigned int" >> build_win/libiberty/config.h && make -Cbuild_win ) || make -Cbuild_win MAKEINFO="$PERLDIR/bin/perl.exe -I$MINGWPREFIX/share/texinfo -I$MINGWPREFIX/share/texinfo/lib/libintl-perl/lib -I$MINGWPREFIX/share/texinfo/lib/Text-Unidecode/lib -I$MINGWPREFIX/share/texinfo/lib/Unicode-EastAsianWidth/lib $(which makeinfo) --split-size=5000000" ) &&
 wl-showstatus build-install &&
 make -Cbuild_win install-strip &&
 # remove .la files
 rm -f $(find $INSTALLPREFIX -name '*.la') &&
 # remove .dll.a file from plugin folder (version >= 2.36)
 rm -f $INSTALLPREFIX/share/binutils/lib/bfd-plugins/*.dll.a &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && rm -rf $BASENAME-$VERSION




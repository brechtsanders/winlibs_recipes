#export NAME="girara"
#export STATUS=
#export URL=https://pwmt.org/projects/girara/
#export BASENAME=girara
#export DESCRIPTION="girara is a library that implements a user interface that focuses on simplicity and minimalism. Currently based on GTK+, a cross-platform widget toolkit, it provides an interface that focuses on three main components: A so-called view widget that represents the actual application (e.g. a website (browser), an image (image viewer) or the document (document viewer)), an input bar that is used to execute commands of the application and the status bar which provides the user with current information. girara was designed to replace and enhance the user interface that is used by zathura and jumanji and other features that those applications share."
#export CATEGORY=gui
#export TYPE=library
##export VERSION=0.2.7
##export VERSIONDATE=20170327
#export VERSION=0.2.8
#export VERSIONDATE=20171221
#export DEPENDENCIES=gettext,glib2,gtk3,json,libnotify,pango
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=pexports
#export OPTIONALBUILDDEPENDENCIES=
##export VERSION=0.2.9
##export VERSIONDATE=20180316
##export VERSION=0.3.0
##export VERSIONDATE=20180523
##export VERSION=0.3.1
##export VERSIONDATE=20180921
#####meson.build:33:0: ERROR: C library 'libm' not found
##export VERSION=0.3.2
##export VERSIONDATE=20181224
##export VERSION=0.3.3
##export VERSIONDATE=20191219
#####girara/utils.c:7:10: fatal error: pwd.h: No such file or directory
#wl-showstatus --package-version
##export DEPENDENCIES=gettext,glib2,gtk3,json,libnotify,pango
##export OPTIONALDEPENDENCIES=
##export BUILDDEPENDENCIES=meson,ninja,doxygen
##export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=LICENSE
#export LICENSETYPE=
#export DOWNLOADURL="https://pwmt.org/projects/girara/download/"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://pwmt.org/projects/girara/download/$BASENAME-$VERSION.tar.gz
##export DOWNLOADSOURCEURL=https://pwmt.org/projects/girara/download/$BASENAME-$VERSION.tar.xz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#wl-showstatus extract
#tar xz --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
##tar xJ --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.xz
#cd $BASENAME-$VERSION
## fix girara/utils.c (version <= 0.2.8)
#patch -ulbf girara/utils.c << EOF
#--- girara/utils.c  2017-01-11 21:59:09.000000000 +0100
#+++ girara/utils.c  2017-03-27 22:41:40.901157700 +0200
#@@ -11,3 +11,5 @@
# #include <limits.h>
#+#ifndef _WIN32
# #include <pwd.h>
#+#endif
# #include <stdbool.h>
#@@ -95,2 +97,6 @@
# {
#+#ifdef _WIN32
#+  char* dir = getenv("HOMEPATH");
#+  return (dir ? g_strdup(dir) : NULL);
#+#else
#   if (user == NULL || g_strcmp0(user, g_get_user_name()) == 0) {
#@@ -125,2 +131,3 @@
#   return dir;
#+#endif
# }
#EOF
## fix missing getline in girara/utils.c (version <= 0.2.8)
#mv girara/utils.c girara/utils.c.bak
#cat > girara/utils.c << EOF
##include <stdio.h>
##include <stdlib.h>
##define GETLINE_BUFLEN 128
#size_t getline(char** lineptr, size_t* n, FILE* stream)
#{
#  char* bufptr;
#  char* p;
#  size_t size;
#  int c;
#  if (!lineptr || !n || !stream)
#    return -1;
#  bufptr = *lineptr;
#  size = *n;
#  c = fgetc(stream);
#  if (c == EOF)
#    return -1;
#  if (!bufptr) {
#    if ((bufptr = (char*)malloc(GETLINE_BUFLEN)) == NULL)
#      return -1;
#    size = GETLINE_BUFLEN;
#  }
#  p = bufptr;
#  while (c != EOF) {
#    if ((p - bufptr) > (size - 1)) {
#      size = size + GETLINE_BUFLEN;
#      if ((bufptr = (char*)realloc(bufptr, size)) == NULL)
#        return -1;
#    }
#    *p++ = c;
#    if (c == '\n') {
#      break;
#    }
#    c = fgetc(stream);
#  }
#  *p++ = 0;
#  *lineptr = bufptr;
#  *n = size;
#  return p - bufptr - 1;
#}
#EOF
#cat girara/utils.c.bak >> girara/utils.c
## fix missing fseeko/ftello in girara/utils.c on 32-bit
#if ! gcc --version | grep -q x86_64; then
#mv girara/utils.c girara/utils.c.bak
#cat > girara/utils.c << EOF
##define fseeko(fp,offset,whence) fseeko64(fp, offset, whence)
##define ftello(fp) ftello64(fp)
#EOF
#cat girara/utils.c.bak >> girara/utils.c
#fi
#wl-showstatus build-install &&
# make install CC=${CC:-gcc} SOVERSIONFILE="libgirara-gtk3.dll" PREFIX=$INSTALLPREFIX &&
# pexports $INSTALLPREFIX/lib/libgirara-gtk3.dll > libgirara-gtk3.def &&
# dlltool -D$INSTALLPREFIX/lib/libgirara-gtk3.dll -dlibgirara-gtk3.def -l$INSTALLPREFIX/lib/libgirara-gtk3.dll.a &&
# mkdir -p $INSTALLPREFIX/bin &&
# mv -f $INSTALLPREFIX/lib/*.dll $INSTALLPREFIX/bin/ &&
# rm -f $INSTALLPREFIX/lib/*.so $INSTALLPREFIX/lib/*.so.* &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION



export NAME="girara"
export STATUS=
export URL=https://pwmt.org/projects/girara/
export BASENAME=girara
export DESCRIPTION="girara is a library that implements a user interface that focuses on simplicity and minimalism. Currently based on GTK+, a cross-platform widget toolkit, it provides an interface that focuses on three main components: A so-called view widget that represents the actual application (e.g. a website (browser), an image (image viewer) or the document (document viewer)), an input bar that is used to execute commands of the application and the status bar which provides the user with current information. girara was designed to replace and enhance the user interface that is used by zathura and jumanji and other features that those applications share."
export CATEGORY=gui
export TYPE=library
#export VERSION=0.3.3
#export VERSIONDATE=20191219
#export VERSION=0.3.4
#export VERSIONDATE=20200106
#export VERSION=0.3.5
#export VERSIONDATE=20200728
#export VERSION=0.3.6
#export VERSIONDATE=20210715
#export VERSION=0.3.7
#export VERSIONDATE=20220214
#export VERSION=0.3.8
#export VERSIONDATE=20221128
#export VERSION=0.3.9
#export VERSIONDATE=20230116
#export VERSION=0.4.0
#export VERSIONDATE=20230319
#export VERSION=0.4.1
#export VERSIONDATE=20231209
#export VERSION=0.4.2
#export VERSIONDATE=20240114
#export VERSION=0.4.4
#export VERSIONDATE=20240507
export VERSION=0.4.5
export VERSIONDATE=20241210
wl-showstatus --package-version
export DEPENDENCIES=gettext,glib2,gtk3,json,libnotify,pango
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=meson,ninja,doxygen
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=
export DOWNLOADURL="https://pwmt.org/projects/girara/download/"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://pwmt.org/projects/girara/download/$BASENAME-$VERSION.tar.xz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xJ --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.xz
cd $BASENAME-$VERSION
# fix missing getline in girara/utils.c (version >= 0.3.3)
mv girara/utils.c girara/utils.c.bak
cat > girara/utils.c << EOF
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define GETLINE_BUFLEN 128
static ssize_t getline(char** lineptr, size_t* n, FILE* stream)
{
  char* bufptr;
  char* p;
  ssize_t size;
  int c;
  if (!lineptr || !n || !stream)
    return -1;
  bufptr = *lineptr;
  size = *n;
  c = fgetc(stream);
  if (c == EOF)
    return -1;
  if (!bufptr) {
    if ((bufptr = (char*)malloc(GETLINE_BUFLEN)) == NULL)
      return -1;
    size = GETLINE_BUFLEN;
  }
  p = bufptr;
  while (c != EOF) {
    if ((p - bufptr) > (size - 1)) {
      size = size + GETLINE_BUFLEN;
      if ((bufptr = (char*)realloc(bufptr, size)) == NULL)
        return -1;
    }
    *p++ = c;
    if (c == '\n') {
      break;
    }
    c = fgetc(stream);
  }
  *p++ = 0;
  *lineptr = bufptr;
  *n = size;
  return p - bufptr - 1;
}
struct passwd {
  const char* pw_dir;
};
static const struct passwd* getpwnam(const char* user)
{
  const char* s;
  if ((s = getenv("USERNAME")) != NULL && stricmp(user, s) == 0) {
    if ((s = getenv("LOCALAPPDATA")) == NULL) {
      s = getenv("APPDATA");
    }
  }
  return (s ? (const struct passwd*)s : NULL);
}
EOF
sed -e "s/^ *#include <pwd\.h>/#ifndef _WIN32\n&\n#endif/" girara/utils.c.bak >> girara/utils.c
mkdir -p build_static build_shared &&
 wl-showstatus configure &&
 #PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library static -D tests=disabled . build_static &&
 PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library static -D tests=disabled . build_static &&
 wl-showstatus configure &&
 #PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library shared -D tests=disabled . build_shared &&
 PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library shared -D tests=disabled . build_shared &&
 wl-showstatus build-install &&
 PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib ninja -C build_static install &&
 wl-showstatus build-install &&
 PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib ninja -C build_shared install &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




#export NAME="libdwarf"
#export STATUS=
#export URL=https://www.prevanders.net/dwarf.html
#export BASENAME=libdwarf
#export DESCRIPTION="libdwarf Library to analyze DWARF debugging information in ELF files"
#export CATEGORY=fileformat,development
#export TYPE=library
##export VERSION=20210305
##export VERSIONDATE=20210501
##export VERSION=20210528
##export VERSIONDATE=20210529
##export VERSION=0.1.1
##export VERSIONDATE=20210808
##export VERSION=0.2.0
##export VERSIONDATE=20210920
##export VERSION=0.3.0
##export VERSIONDATE=20211031
##export VERSION=0.3.1
##export VERSIONDATE=20211125
#export VERSION=0.3.2
#export VERSIONDATE=20211231
#wl-showstatus --package-version
#export DEPENDENCIES=libelf
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=
#export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=COPYING
##export LICENSEFILE=LICENSE
#export LICENSETYPE=
#export DOWNLOADURL="https://www.prevanders.net/dwarf.html"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
##export DOWNLOADSOURCEURL=https://www.prevanders.net/$BASENAME-$VERSION.tar.gz
#export DOWNLOADSOURCEURL=https://www.prevanders.net/$BASENAME-$VERSION.tar.xz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#wl-showstatus extract
##tar xz --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
#tar xJ --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.xz
#cd $BASENAME-$VERSION
## fix src/lib/libdwarf/dwarf_crc32.c (version >= 0.3.1)
#patch -ulbf src/lib/libdwarf/dwarf_crc32.c << EOF
#@@ -48,3 +48,5 @@
# #include <io.h>
#+#ifndef __MINGW32__
# typedef SSIZE_T ssize_t; /* Windows does not have POSIX ssize_t */
#+#endif
# #elif defined HAVE_UNISTD_H
#EOF
## fix src/lib/libdwarf/dwarf_object_detector.c (version >= 0.3.1)
#patch -ulbf src/lib/libdwarf/dwarf_object_detector.c << EOF
#@@ -43,3 +43,5 @@
# #include <io.h> /* lseek(), read(), close() */
#+#ifndef __MINGW32__
# typedef SSIZE_T ssize_t; /* MSVC does not have POSIX ssize_t */
#+#endif
# #elif defined HAVE_UNISTD_H
#EOF
## fix src/lib/libdwarf/dwarf_object_read_common.c (version >= 0.3.1)
#patch -ulbf src/lib/libdwarf/dwarf_object_read_common.c << EOF
#@@ -47,3 +47,5 @@
# #include <io.h> /* lseek(), read(), close() */
#+#ifndef __MINGW32__
# typedef SSIZE_T ssize_t; /* MSVC does not have POSIX ssize_t */
#+#endif
# #elif defined HAVE_UNISTD_H
#EOF
### don't use lib64 and bin64 folder names
##sed -i.bak -e "s/^\(\s*\)set(SUFFIX .*64>*).*$/\1IF(NOT MINGW)\n&\n\1ENDIF()/" libdwarf/CMakeLists.txt dwarfdump/CMakeLists.txt dwarfgen/CMakeLists.txt
##mkdir -p build_win &&
## wl-showstatus configure &&
## cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED:BOOL=ON -DBUILD_NON_SHARED:BOOL=ON -DBUILD_DWARFGEN:BOOL=ON -DDWARF_WITH_LIBELF:BOOL=ON -DBUILD_DWARFEXAMPLE:BOOL=OFF -S. -Bbuild_win &&
## sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*-ladvapi32/& -Wl,--as-needed -lz/" build_win/build.ninja &&
## # fix missing file during installation (version = 20210528)
## sed -i.bak -e "s?/libdwarf\(/libdwarf/libdwarf\.h\)?\1?" build_win/libdwarf/cmake_install.cmake &&
## wl-showstatus build &&
## ninja -Cbuild_win &&
## wl-showstatus build-install &&
## cp -u libdwarf/cmake/libdwarf-config.cmake cmake/ &&
## cp -u libdwarf/libdwarf.h build_win/libdwarf/ &&
## ninja -Cbuild_win install/strip &&
## wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
## also allow building static library (version >= 0.2.0)
#sed -i.bak -e "s/as_fn_error\(.*Static library is not supported on Windows\)/echo\1/" configure
#wl-showstatus configure &&
# ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-shared --enable-static &&
# wl-showstatus build-install &&
# make install-strip &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION



export NAME="libdwarf"
export STATUS=
export URL=https://www.prevanders.net/dwarf.html
export BASENAME=libdwarf
export DESCRIPTION="libdwarf Library to analyze DWARF debugging information in ELF files"
export CATEGORY=fileformat,development
export TYPE=library
#export VERSION=0.3.2
#export VERSIONDATE=20211230
#export VERSION=0.3.3
#export VERSIONDATE=20220129
#export VERSION=0.3.4
#export VERSIONDATE=20220224
#export VERSION=0.4.0
#export VERSIONDATE=20220413
#export VERSION=0.4.1
#export VERSIONDATE=20220626
#export VERSION=0.4.2
#export VERSIONDATE=20220914
#export VERSION=0.5.0
#export VERSIONDATE=20221123
#export VERSION=0.6.0
#export VERSIONDATE=20230221
#export VERSION=0.7.0
#export VERSIONDATE=20230521
#export VERSION=0.8.0
#export VERSIONDATE=20230919
#export VERSION=0.9.0
#export VERSIONDATE=20231209
#export VERSION=0.9.1
#export VERSIONDATE=20240128
#export VERSION=0.9.2
#export VERSIONDATE=20240403
#export VERSION=0.10.0
#export VERSIONDATE=20240625
#export VERSION=0.10.1
#export VERSIONDATE=20240702
#export VERSION=0.11.0
#export VERSIONDATE=20240816
#export VERSION=0.11.1
#export VERSIONDATE=20241203
#export VERSION=0.12.0
#export VERSIONDATE=20250403
#export VERSION=2.0.0
#export VERSIONDATE=20250520
export VERSION=2.1.0
export VERSIONDATE=20250720
wl-showstatus --package-version
export DEPENDENCIES=libelf
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=COPYING
#export LICENSEFILE=LICENSE
export LICENSETYPE=
#export DOWNLOADURL="https://www.prevanders.net/dwarf.html"
export DOWNLOADURL="https://github.com/davea42/libdwarf-code/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://www.prevanders.net/$BASENAME-$VERSION.tar.xz
#export DOWNLOADSOURCEURL=https://github.com/davea42/libdwarf-code/releases/download/libdwarf-$VERSION/$BASENAME-$VERSION.tar.xz
#export DOWNLOADSOURCEURL=https://github.com/davea42/libdwarf-code/releases/download/v$VERSION/$BASENAME-$VERSION.tar.xz
export DOWNLOADSOURCEURL=https://github.com/davea42/libdwarf-code/archive/refs/tags/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
#tar xJ --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.xz
tar xz --force-local -f $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
#cd $BASENAME-$VERSION
cd libdwarf-code-$VERSION
# fix src/lib/libdwarf/dwarf_crc32.c (version >= 0.3.1)
patch -ulbf src/lib/libdwarf/dwarf_crc32.c << EOF
@@ -48,3 +48,5 @@
 #include <io.h>
+#ifndef __MINGW32__
 typedef SSIZE_T ssize_t; /* Windows does not have POSIX ssize_t */
+#endif
 #elif defined HAVE_UNISTD_H
EOF
# fix src/lib/libdwarf/dwarf_object_detector.c (version >= 0.3.1)
patch -ulbf src/lib/libdwarf/dwarf_object_detector.c << EOF
@@ -43,3 +43,5 @@
 #include <io.h> /* lseek(), read(), close() */
+#ifndef __MINGW32__
 typedef SSIZE_T ssize_t; /* MSVC does not have POSIX ssize_t */
+#endif
 #elif defined HAVE_UNISTD_H
EOF
# fix src/lib/libdwarf/dwarf_object_read_common.c (version >= 0.3.1)
patch -ulbf src/lib/libdwarf/dwarf_object_read_common.c << EOF
@@ -47,3 +47,5 @@
 #include <io.h> /* lseek(), read(), close() */
+#ifndef __MINGW32__
 typedef SSIZE_T ssize_t; /* MSVC does not have POSIX ssize_t */
+#endif
 #elif defined HAVE_UNISTD_H
EOF
# fix DLL exports in src/lib/libdwarf/libdwarf.h (version >= 0.3.2)
patch -ulbf src/lib/libdwarf/libdwarf.h << EOF
@@ -40,3 +40,3 @@
 #if defined(_WIN32) || defined(__CYGWIN__)
-#ifdef LIBDWARF_BUILD
+#if defined(LIBDWARF_BUILD) || defined(dwarf_shared_EXPORTS)
 #define DW_API __declspec(dllexport)
EOF
# don't use path suffix in src/lib/libdwarf/CMakeLists.txt (version >= 0.3.2)
sed -i.bak -e "s/\(set(SUFFIX \).*\()\)$/\1\"\"\2/" $(grep -l "set(SUFFIX" $(find -name CMakeLists.txt))
mkdir -p build_static build_shared &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_NON_SHARED:BOOL=ON -DBUILD_SHARED:BOOL=OFF -DBUILD_DWARFGEN:BOOL=OFF -DDO_TESTING:BOOL=OFF -S. -Bbuild_static &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_NON_SHARED:BOOL=OFF -DBUILD_SHARED:BOOL=ON -DBUILD_DWARFGEN:BOOL=OFF -DDO_TESTING:BOOL=OFF -S. -Bbuild_shared &&
 # fix missing link library
 sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lz/" build_shared/build.ninja &&
 wl-showstatus build-install &&
 ninja -Cbuild_static libdwarf.a &&
 wl-showstatus build-install &&
 ninja -Cbuild_shared install/strip &&
 cp -f build_static/src/lib/libdwarf/libdwarf.a $INSTALLPREFIX/lib/ &&
 cp -u src/lib/libdwarf/libdwarf_private.h src/lib/libdwarf/dwarf_*.h $INSTALLPREFIX/include/ &&
 #wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf libdwarf-code-$VERSION




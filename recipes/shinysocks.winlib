export NAME="shinysocks"
export STATUS=
export URL=https://github.com/jgaa/shinysocks
export BASENAME=shinysocks
export DESCRIPTION="A small, ultrafast SOCKS proxy server"
export CATEGORY=communication
export TYPE=application
#export VERSION=1.00.00
#export VERSIONDATE=20230413
#export VERSION=1.3.3
#export VERSIONDATE=20240308
export VERSION=1.4.0
export VERSIONDATE=20250212
wl-showstatus --package-version
export DEPENDENCIES=boost,asio
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=GPL
export DOWNLOADURL="https://github.com/jgaa/shinysocks/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/jgaa/shinysocks/archive/refs/tags/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd $BASENAME-$VERSION
## fix shinysocks.h (version = 1.00.00)
#patch -ulbf shinysocks.h << EOF
#@@ -12,4 +12,4 @@
#
#-constexpr char *GetProgramName() { return "ShinySocks"; }
#-constexpr char *GetProgramVersion() { return "1.00"; }
#+const char *GetProgramName() { return "ShinySocks"; }
#+const char *GetProgramVersion() { return "1.00"; }
#
#EOF
## fix deprecated get_io_service() in boost (version = 1.00.00)
#####Listener.cpp:42:32: error: 'boost::asio::ip::tcp::socket' {aka 'class boost::asio::basic_stream_socket<boost::asio::ip::tcp>'} has no member named 'get_io_service'
#sed -i.bak -e "s/\([^ (]*\)\.get_io_service()/(boost::asio::io_context\&)(\1).get_executor().context()/" Listener.cpp Proxy.cpp
## fix CMakeLists.txt (version >= 1.00.00)
#patch -ulbf CMakeLists.txt << EOF
#@@ -27,3 +27,5 @@
#        add_definitions(-D_WIN32_WINNT=0x0600)
#+        if (MSVC)
#        set(CMAKE_EXE_LINKER_FLAGS "\${CMAKE_EXE_LINKER_FLAGS} /SAFESEH:NO")
#+        endif ()
#     # Msvc and possible some other Windows-compilers will link
#EOF
## fix CMakeLists.txt (version = 1.00.00)
#patch -ulbf CMakeLists.txt << EOF
#@@ -5,3 +5,3 @@
# set(Boost_USE_MULTITHREADED ON)
#-if (UNIX)
#+if (UNIX OR MINGW)
# find_package(Boost REQUIRED COMPONENTS
#@@ -22,3 +22,3 @@
#
#-if (WIN32)
#+if (MSVC)
#        include_directories(\${BOOST_ROOT})
#@@ -31,2 +31,16 @@
#     #SET(BOOST_UNIT_TEST_FRAMEWORK libboost_test_exec_monitor-vc140-mt-sgd-1_57)
#+elseif (MINGW)
#+    set(LIB_BOOST_PROGRAM_OPTIONS boost_program_options-mt)
#+    set(LIB_BOOST_SERIALIZATION boost_serialization-mt)
#+    set(LIB_BOOST_FILESYSTEM boost_filesystem-mt)
#+    set(LIB_BOOST_DATE_TIME boost_date_time-mt)
#+    set(LIB_BOOST_IOSTREAMS boost_iostreams-mt)
#+    set(LIB_BOOST_SYSTEM boost_system-mt)
#+    set(LIB_BOOST_REGEX boost_regex-mt)
#+    set(LIB_BOOST_CONTEXT boost_context-mt)
#+    set(LIB_BOOST_COROUTINE boost_coroutine-mt)
#+    set(LIB_BOOST_CHRONO boost_chrono-mt)
#+    set(LIB_BOOST_THREAD boost_thread-mt)
#+    set(LIB_BOOST_LOG boost_log boost_log_setup-mt)
#+    SET(BOOST_UNIT_TEST_FRAMEWORK boost_unit_test_framework-mt)
# else ()
#@@ -47,3 +61,3 @@
#
#-if (UNIX)
#+if (UNIX OR MINGW)
#     set (BOOST_LIBRARIES
#@@ -64,3 +78,3 @@
#
#-if (UNIX)
#+if (UNIX OR MINGW)
#     set(THREADLIBS pthread)
#@@ -73,2 +87,4 @@
#     add_definitions(-D__USE_LARGEFILE64=1 -D__USE_FILE_OFFSET64=1 -D BOOST_LOG_DYN_LINK -Wall -fPIC -std=c++1y -pthread)
#+elseif (MINGW)
#+    add_definitions(-D__USE_LARGEFILE64=1 -D__USE_FILE_OFFSET64=1 -std=c++1y -pthread)
# endif()
#EOF
mkdir -p build_win &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -S. -Bbuild_win &&
 # fix missing link libraries
 sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lws2_32 -lwsock32/" build_win/build.ninja &&
 wl-showstatus build-install &&
 ninja -Cbuild_win install/strip &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
####shinysocks.exe --help




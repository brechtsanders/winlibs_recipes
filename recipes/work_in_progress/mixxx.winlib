export NAME="Mixxx"
export STATUS=
export URL=http://www.mixxx.org/
export BASENAME=mixxx
export DESCRIPTION="Mixxx has everything you need to start making DJ mixes in a tight, integrated package. Whether you're DJing your next house party, spinning at a club, or broadcasting as a radio DJ, Mixxx has what you need to do it right."
export CATEGORY=audio
export TYPE=application
#export VERSION=1.11.0
#export VERSIONDATE=20140621
#export VERSION=2.0.0
#export VERSIONDATE=20151230
#export VERSION=2.1.0
#export VERSIONDATE=20180416
#export VERSION=2.1.3
#export VERSIONDATE=20180821
#export VERSION=2.1.4
#export VERSIONDATE=20180906
#export VERSION=2.1.5
#export VERSIONDATE=20181031
#export VERSION=2.1.6
#export VERSIONDATE=20181231
#export VERSION=2.1.7
#export VERSIONDATE=20190201
#export VERSION=2.1.8
#export VERSIONDATE=20190412
#export VERSION=2.2.0
#export VERSIONDATE=20181225
#export VERSION=2.2.1
#export VERSIONDATE=20190424
#export VERSION=2.2.2
#export VERSIONDATE=20190815
#export VERSION=2.2.3
#export VERSIONDATE=20191210
####ERROR:root:Unmet dependency: Did not find PortTime or its development headers.
#export DEPENDANCIES=qt4,libid3tag,libmad,libogg,libvorbis,libsndfile,flac,libshout,libhss1394,taglib,portaudio,portmidi,qt,qtkeychain,fftw,ffmpeg4
#export OPTIONALDEPENDANCIES=
#export BUILDDEPENDANCIES=scons
#export VERSION=2.2.4
#export VERSIONDATE=20200517
#export VERSION=2.3.0
#export VERSIONDATE=20210629
#export VERSION=2.3.1
#export VERSIONDATE=20210930
export VERSION=2.3.2
export VERSIONDATE=20220131
####scons: *** [dist64\imageformats\qdds.dll] Source `D:\Prog\winlibs64-9.2.0\custombuilt\qt\plugins\imageformats\qdds.dll' not found, needed by target `dist64\imageformats\qdds.dll'.
wl-showstatus --package-version
export DEPENDANCIES=qt,libid3tag,libmad,libogg,libvorbis,libsndfile,flac,libshout,libhss1394,taglib,portaudio,portmidi,qt,qtkeychain,fftw,ffmpeg4
export OPTIONALDEPENDANCIES=
export BUILDDEPENDANCIES=scons
export LICENSEFILE=COPYING
export LICENSETYPE=GPL
#export DOWNLOADURL="http://www.mixxx.org/download/ mixxx- -src.tar.gz"
export DOWNLOADURL="https://github.com/mixxxdj/mixxx/releases release-"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://downloads.mixxx.org/$BASENAME-$VERSION/$BASENAME-$VERSION-src.tar.gz
#export DOWNLOADSOURCEURL=https://downloads.mixxx.org/$BASENAME-$VERSION/$BASENAME-$VERSION-src.tar.gz
#export DOWNLOADSOURCEURL=https://github.com/mixxxdj/mixxx/archive/release-$VERSION.tar.gz
export DOWNLOADSOURCEURL=https://github.com/mixxxdj/mixxx/archive/refs/tags/$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
#tar xfz $TARBALLDIR/$BASENAME/$BASENAME-$VERSION-src.tar.gz
#tar xfz $TARBALLDIR/$BASENAME/release-$VERSION.tar.gz
tar xfz $TARBALLDIR/$BASENAME/$VERSION.tar.gz
cd $BASENAME-$VERSION
#cd mixxx-release-$VERSION
# fix Q_ASSERT issue in build/depends.py
sed -i.bak -e "s/'Q_ASSERT(x)=qt_noop()'/Q_ASSERT=qt_noop/" build/depends.py
wl-showstatus build &&
 #PATH=$PATH:$MINGWPREFIX/qt4/bin QTDIR=$MINGWPREFIX/qt4 QMAKESPEC=$MINGWPREFIX/qt4/mkspecs/win32-g++ PYTHONPATH=$MINGWPREFIX/python/scons $PYDIR/python.exe $MINGWPREFIX/python/Scripts/scons.py --prefix=$INSTALLPREFIX toolchain=gnu qtdir=$MINGWPREFIX/qt4 hss1394=0 vamp=0 vinylcontrol=0 hid=0 portmidi=0 shoutcast=0 &&
 #PATH=$PATH:$MINGWPREFIX/qt4/bin QTDIR=$MINGWPREFIX/qt4 QMAKESPEC=$MINGWPREFIX/qt4/mkspecs/win32-g++ INCLUDE=. LIB=. LIBPATH=. PYTHONPATH=$MINGWPREFIX/python/scons $PY2DIR/python.exe $MINGWPREFIX/python/Scripts/scons.py --prefix=$INSTALLPREFIX platform=win target=windows build=release toolchain=gnu machine=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "x86_64"; else echo "iX86"; fi) qtdir=$MINGWPREFIX/qt4 hss1394=0 vamp=0 vinylcontrol=0 hid=0 portmidi=0 shoutcast=0 &&
 #PKG_CONFIG= PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ INCLUDE=. LIB=. LIBPATH=. PYTHONPATH=$MINGWPREFIX/python/scons $PY2DIR/python.exe $MINGWPREFIX/python/Scripts/scons.py platform=win target=windows build=release toolchain=gnu machine=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "x86_64"; else echo "iX86"; fi) qtdir=$MINGWPREFIX/qt hss1394=0 vamp=0 vinylcontrol=0 hid=0 portmidi=0 shoutcast=0 &&
 PKG_CONFIG= PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ INCLUDE=. LIB=. LIBPATH=. PYTHONPATH=$MINGWPREFIX/python/scons $PY2DIR/python.exe $MINGWPREFIX/python/Scripts/scons-script.py platform=win target=windows build=release toolchain=gnu machine=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "x86_64"; else echo "iX86"; fi) qtdir=$MINGWPREFIX/qt hss1394=0 vamp=0 vinylcontrol=0 hid=0 portmidi=0 shoutcast=0 &&
    echo OK
#PYTHONPATH=$MINGWPREFIX/python/scons $PYDIR/python.exe SConstruct --prefix=$INSTALLPREFIX --toolchain=gnu
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf mixxx-release-$VERSION



## fix cmake/modules/FindMediaFoundation.cmake (version >= 2.3.1)
#patch -ulbf cmake/modules/FindMediaFoundation.cmake << EOF
#@@ -10,2 +10,6 @@
# ENDIF (MSVC)
#+IF (MINGW)
#+  SET( MediaFoundation_LIBRARIES -lmf -lmfplat -lmfreadwrite -lmfuuid -lstrmiids )
#+  SET( MediaFoundation_FOUND true )
#+ENDIF (MINGW)
#
#EOF
## fix lib/libshout-idjc/CMakeLists.txt (version >= 2.3.0)
#patch -ulbf lib/libshout-idjc/CMakeLists.txt << EOF
#@@ -44,3 +44,3 @@
# # Ensure we have pthreads
#-if(WIN32)
#+if(MSVC)
#     # vcpkg provides CMake targets for pthreads4w
#EOF
#mkdir -p build_win &&
# wl-showstatus configure &&
# PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DOPTIMIZE:STRING=portable -DBUILD_TESTING:BOOL=OFF -S. -Bbuild_win &&
# wl-showstatus build-install &&
# ninja -Cbuild_win install/strip &&
#    echo OK

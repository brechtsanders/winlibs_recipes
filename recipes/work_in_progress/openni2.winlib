export NAME="OpenNI2"
export STATUS=
export URL=https://structure.io/openni
#export URL=https://github.com/occipital/openni2
export BASENAME=openni2
export DESCRIPTION="The OpenNI organization is an industry-led, not-for-profit organization formed to certify and promote the compatibility and interoperability of Natural Interaction (NI) devices, applications and middleware."
export CATEGORY=graphics
export TYPE=library
#export VERSION=2.2-beta2
#export VERSIONDATE=20180414
export VERSION=2.2.0-debian
export VERSIONDATE=20201207
wl-showstatus --package-version
export DEPENDANCIES=
export OPTIONALDEPENDANCIES=
export BUILDDEPENDANCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=Apache
export DOWNLOADURL="https://github.com/occipital/OpenNI2/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://github.com/occipital/OpenNI2/archive/$VERSION.tar.gz
export DOWNLOADSOURCEURL=https://github.com/occipital/OpenNI2/archive/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
#tar xfz $TARBALLDIR/$BASENAME/$VERSION.tar.gz
tar xfz $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd OpenNI2-$VERSION
# fix for MinGW
patch -ulbf ThirdParty/PSCommon/XnLib/Include/Win32/XnPlatformWin32.h << EOF
@@ -69,3 +69,5 @@

-#if _MSC_VER < 1400 // Before VS2005 there was no support for the vaargs macro...
+#ifdef __MINGW32__
+       #define XN_PLATFORM_VAARGS_TYPE XN_PLATFORM_USE_GCC_VAARGS_STYLE
+#elif _MSC_VER < 1400 // Before VS2005 there was no support for the vaargs macro...
        #define XN_PLATFORM_VAARGS_TYPE XN_PLATFORM_USE_NO_VAARGS
@@ -168,3 +170,7 @@
 /** The thread static declarator (using TLS). */
+#ifdef __MINGW32__
+#define XN_THREAD_STATIC
+#else
 #define XN_THREAD_STATIC __declspec(thread)
+#endif

@@ -211,3 +217,3 @@
 /** Indicates a deprecated function */
-#if _MSC_VER < 1400 // Before VS2005 there was no support for declspec deprecated...
+#if _MSC_VER < 1400 && !defined(__MINGW32__) // Before VS2005 there was no support for declspec deprecated...
        #define XN_API_DEPRECATED(msg)
@@ -233,2 +239,6 @@

+#ifdef __MINGW32__
+#define XN_PRAGMA_START_DISABLED_WARNING_SECTION(warnings)
+#define XN_PRAGMA_STOP_DISABLED_WARNING_SECTION
+#else
 #define XN_PRAGMA_START_DISABLED_WARNING_SECTION(warnings)             \
@@ -239,2 +249,3 @@
        __pragma(warning(pop))
+#endif

EOF
sed -i.bak -e "s/if _MSC_VER < 1[0-9]*/& \&\& !defined(__MINGW32__)/" ThirdParty/PSCommon/XnLib/Include/XnPlatform.h Include/OniPlatform.h Include/Win32/OniPlatformWin32.h ThirdParty/PSCommon/XnLib/Include/Win32/XnPlatformWin32.h
sed -i.bak -e "s/USED_LIBS += rt/#&/" Source/Core/Makefile
sed -i.bak -e "s/-Werror/-fpermissive/" ThirdParty/PSCommon/BuildSystem/CommonCppMakefile
sed -i.bak -e "s/\bLinux\b/Win32/g; s?-Wall?-I$(pwd)/ThirdParty/PSCommon/XnLib/Driver/Win32/Build/sys?; s/USED_LIBS += rt/#&/" ThirdParty/PSCommon/XnLib/Source/Makefile
sed -i.bak -e "s/USED_LIBS += rt/#&/" Source/Drivers/DummyDevice/Makefile
sed -i.bak -e "s/USED_LIBS += rt/#&/" Source/Drivers/OniFile/Makefile

make -CThirdParty/PSCommon/XnLib/Source

wl-showstatus configure &&
# mkdir -p m4 &&
# autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal &&
#./autogen.sh &&
#    echo OK
## fix building DLLs on 64-bit
#if ( echo $RUNPLATFORM | grep -q x86_64 ); then
# echo "AM_GNU_GETTEXT_VERSION([$(gettext --version|head -n1|sed -e "s/^.* \([0-9\.]*\) *$/\1/")])" >> configure.ac &&
# autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal
#fi
#INTLTOOL_PERL="$PERLDIR/bin/perl.exe" 
#PERL="$PERLDIR/bin/perl.exe -I$PERLDIR/lib" 
#PYTHON=$PYDIR/python.exe 
#PYTHON=$PYDIR/python.exe C_INCLUDE_PATH=$C_INCLUDE_PATH:$PYDIR/include 
#./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM LDFLAGS="-Wl,--as-needed -Wl,-no-undefined" &&
#./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM LDFLAGS="-Wl,--as-needed" &&
./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM &&
 ## fix building DLLs
 #mv libtool libtool.bak &&
 #sed -e "s/\(allow_undefined=\)yes/\1no/" libtool.bak > libtool &&
 #wl-showstatus build &&
 #make &&
 wl-showstatus build-install &&
 make install-strip &&
    ls -l $INSTALLPREFIX/lib/pkgconfig $INSTALLPREFIX/share/pkgconfig
    make install-pkgconfigDATA

#mkdir -p build_test; cd build_test; cmake.exe -G"MSYS Makefiles" . -LH && echo OK; cd ..; rm -rf build_test
#rm -rf CMakeCache.txt CMakeFiles; cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release . -LH && echo OK
#export BUILDDEPENDANCIES=cmake
#wl-showstatus configure &&
#cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release . &&
# wl-showstatus build-install &&
# make install/strip &&
#    echo OK

#export BUILDDEPENDANCIES=cmake
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cd build_static &&
# cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF .. &&
# cd .. &&
# wl-showstatus configure &&
# cd build_shared &&
# cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON .. &&
# cd .. &&
# wl-showstatus build-install &&
# make -Cbuild_static install/strip &&
# wl-showstatus build-install &&
# make -Cbuild_shared install/strip &&
#    echo OK
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION

#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# PKG_CONFIG= PYTHONPATH=$PYTHONPATH:$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library static -D documentation=true . build_static &&
# wl-showstatus configure &&
# PKG_CONFIG= PYTHONPATH=$PYTHONPATH:$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library shared -D documentation=true . build_shared &&
# wl-showstatus build-install &&
# PATH=$PATH:$PYDIR PYTHONPATH=$PYTHONPATH:$MINGWPREFIX/lib ninja -C build_static install/strip &&
# wl-showstatus build-install &&
# PATH=$PATH:$PYDIR PYTHONPATH=$PYTHONPATH:$MINGWPREFIX/lib ninja -C build_shared install/strip &&
#    echo OK && find . -name '*.a'
## wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf OpenNI2-$VERSION




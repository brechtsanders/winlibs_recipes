export NAME="antlr4-cpp"
export STATUS=
export URL=https://github.com/antlr/antlr4-cpp
export BASENAME=antlr4-cpp
export DESCRIPTION="C++ target for ANTLR 4, including templates and runtime "
export CATEGORY=
export TYPE=library
export VERSION=master
export VERSIONDATE=20210401
####antlr4cpp/antlr/v4/runtime/atn/conflict_information.cpp:11:14: error: 'runtime_error' is not a member of 'std'
wl-showstatus --package-version
export DEPENDANCIES=
export OPTIONALDEPENDANCIES=
export BUILDDEPENDANCIES=cmakeconverter,cmake,ninja
export LICENSEFILE=LICENSE
export LICENSETYPE=BSD
export DOWNLOADURL="https://github.com/antlr/antlr4-cpp/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/antlr/antlr4-cpp/archive/refs/heads/$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xfz $TARBALLDIR/$BASENAME/$VERSION.tar.gz
cd $BASENAME-$VERSION
mkdir -p build_win &&
 wl-showstatus configure &&
 PATH=$PYDIR:$PATH PYTHONPATH=$MINGWPREFIX/python/lib/site-packages:$PYDIR/Lib/site-packages:$PYTHONPATH $MINGWPREFIX/python/Scripts/cmake-converter-script.py -s antlr4cpp.sln &&
 sed -i.bak -e "s/message(FATAL_ERROR.*arch is not supported/#&/" CMakeLists.txt &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DCMAKE_VS_PLATFORM_NAME:STRING=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "x64"; else echo "x86"; fi) -S. -Bbuild_win &&
 wl-showstatus build &&
 ninja -Cbuild_win &&
 wl-showstatus build-install &&
 ninja -Cbuild_win install/strip &&
    echo OK
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




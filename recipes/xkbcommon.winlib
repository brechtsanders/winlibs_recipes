#export NAME="xkbcommon"
#export STATUS=
#export URL=http://xkbcommon.org/
#export BASENAME=xkbcommon
#export DESCRIPTION="xkbcommon is a library to handle keyboard descriptions, including loading them from disk, parsing them and handling their state. It's mainly meant for client toolkits, window systems, and other system applications; currently that includes Wayland, kmscon, GTK+, Qt, Clutter, and more. It is also used by some XCB applications for proper keyboard support."
#export CATEGORY=system
#export TYPE=library
##export VERSION=0.5.0
##export VERSIONDATE=20150415
##export VERSION=0.6.0
##export VERSIONDATE=20160406
##export VERSION=0.6.1
##export VERSIONDATE=20160408
##export VERSION=0.7.0
##export VERSIONDATE=20161112
##export VERSION=0.7.1
##export VERSIONDATE=20170119
##export VERSION=0.7.2
##export VERSIONDATE=20170815
#####configure: error: C library does not support strcasecmp/strncasecmp
##export VERSION=0.8.0
##export VERSIONDATE=20171216
##export VERSION=0.8.1
##export VERSIONDATE=20180803
##export VERSION=0.8.2
##export VERSIONDATE=20180806
##export VERSION=0.8.3
##export VERSIONDATE=20190208
#export VERSION=0.8.4
#export VERSIONDATE=20190223
#wl-showstatus --package-version
#export DEPENDENCIES=libx11,xcb
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=
#export OPTIONALBUILDDEPENDENCIES=
##export VERSION=0.9.0
##export VERSIONDATE=20191019
##export VERSION=0.9.1
##export VERSIONDATE=20191021
##export VERSION=0.10.0
##export VERSIONDATE=20200119
#####test/x11comp.c:25:10: fatal error: spawn.h: No such file or directory
##wl-showstatus --package-version
##export DEPENDENCIES=libx11,xcb
##export OPTIONALDEPENDENCIES=
##export BUILDDEPENDENCIES=meson,ninja
##export OPTIONALBUILDDEPENDENCIES=
##export LICENSEFILE=COPYING
#export LICENSEFILE=LICENSE
#export LICENSETYPE="MIT/X11 derivative"
#export DOWNLOADURL="https://github.com/xkbcommon/libxkbcommon/releases"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://github.com/xkbcommon/libxkbcommon/archive/$BASENAME-$VERSION.tar.gz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
##mv $TARBALLDIR/$BASENAME/$BASENAME-$VERSION $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
#wl-wait4deps
#wl-showstatus extract
#tar xz --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
#cd libxkbcommon-xkbcommon-$VERSION
## fix missing strndup
#cat > src/winfix.h << EOF
##include <malloc.h>
##include <string.h>
#//static inline char* strndup (const char* s, size_t n);
#static inline char* strndup (const char* s, size_t n)
#{
#  char *result;
#  size_t len = strlen(s);
#  if (len > n)
#    len = n;
#  result = (char*)malloc(len + 1);
#  if (!result)
#    return 0;
#  result[len] = 0;
#  return (char*)memcpy(result, s, len);
#}
#EOF
#mv src/compose/paths.c src/compose/paths.c.bak
#echo "#include <winfix.h>" > src/compose/paths.c
#cat src/compose/paths.c.bak >> src/compose/paths.c
#mv src/atom.c src/atom.c.bak
#echo "#include <winfix.h>" > src/atom.c
#cat src/atom.c.bak >> src/atom.c
#mv src/x11/util.c src/x11/util.c.bak
#echo "#include <winfix.h>" > src/x11/util.c
#cat src/x11/util.c.bak >> src/x11/util.c
## fix redefinition of min and max in src/utils.h
#patch -ulbf src/utils.h << EOF
#--- src/utils.h  2014-10-18 15:41:59.000000000 +0200
#+++ src/utils.h  2015-04-15 21:59:12.585512900 +0200
#@@ -110,4 +110,5 @@
# }
#
#+#ifndef min
# static inline int
# min(int misc, int other)
#@@ -115,5 +116,7 @@
#     return (misc < other) ? misc : other;
# }
#+#endif
#
#+#ifndef max
# static inline int
# max(int misc, int other)
#@@ -121,4 +124,5 @@
#     return (misc > other) ? misc : other;
# }
#+#endif
#
# /* ctype.h is locale-dependent and has other oddities. */
#EOF
### fix missing asprintf in src/compose/paths.c (version >= 0.5.0)
##if ( ! gcc --version | grep -q "MinGW-W64" ); then
##mv src/compose/paths.c src/compose/paths.c.bak
##cat > src/compose/paths.c << EOF
###include <stdio.h>
###include <stdlib.h>
###include <stdarg.h>
###include <string.h>
##static inline int asprintf(char **strp, const char *fmt, ...)
##{
##  int size;
##  va_list args;
##  va_start(args, fmt);
##  if ((size = vsnprintf(NULL, 0, fmt, args)) < 0)
##    return size;
##  if ((*strp = (char*)malloc((size_t)size + 1)) == NULL)
##    return -1;
##  return vsnprintf(*strp, (size_t)size + 1, fmt, args);
##} 
##EOF
##cat src/compose/paths.c.bak >> src/compose/paths.c
##fi
### fix missing asprintf in src/context.c (version >= 0.5.0)
##mv src/context.c src/context.c.bak
##cat > src/context.c << EOF
###include <stdio.h>
###include <stdlib.h>
###include <stdarg.h>
###include <string.h>
##static inline int asprintf(char **strp, const char *fmt, ...)
##{
##  int size;
##  va_list args;
##  va_start(args, fmt);
##  if ((size = vsnprintf(NULL, 0, fmt, args)) < 0)
##    return size;
##  if ((*strp = (char*)malloc((size_t)size + 1)) == NULL)
##    return -1;
##  return vsnprintf(*strp, (size_t)size + 1, fmt, args);
##} 
##EOF
##cat src/context.c.bak >> src/context.c
### fix missing strnlen in src/x11/keymap.c (except for 64-bit) (version >= 0.5.0)
##if ( echo $RUNPLATFORM | grep -qv x86_64 ) && ( ! gcc --version | grep -q "MinGW-W64" ); then
##mv src/x11/keymap.c src/x11/keymap.c.bak
##cat > src/x11/keymap.c << EOF
##static inline int strnlen (const char* s, int maxlen) 
##{
##  int i;
##  for (i = 0; i < maxlen; i++)
##    if (s[i] == '\0')
##      return i;
##  return -1;
##}
##EOF
##cat src/x11/keymap.c.bak >> src/x11/keymap.c
##fi
## fix pointer conversion on 64-bit in src/xkbcomp/keywords.c (version >= 0.5.0)
#mv src/xkbcomp/keywords.c src/xkbcomp/keywords.c.bak
#sed -e "s/(int)(long)/(int)(intptr_t)/g" src/xkbcomp/keywords.c.bak > src/xkbcomp/keywords.c
### missing strncasecmp in src/keysym.c (version >= 0.7.1)
##mv src/keysym.c src/keysym.c.bak
##sed -e "s/strncasecmp/strnicmp/g" src/keysym.c.bak > src/keysym.c
#wl-showstatus configure &&
#autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal &&
### don't use C99
##sed -i.bak -e "s/\(-std=[a-z]*99\)/\1OFF/g" configure &&
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-x11 &&
#./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-x11 --disable-docs --without-doxygen &&
# wl-showstatus build &&
# # fix building DLLs
# mv libtool libtool.bak &&
# sed -e "s/\(allow_undefined=\)yes/\1no/" libtool.bak > libtool &&
# wl-showstatus build-install &&
# make install-strip &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf libxkbcommon-xkbcommon-$VERSION



export NAME="xkbcommon"
export STATUS=
export URL=http://xkbcommon.org/
export BASENAME=xkbcommon
export DESCRIPTION="xkbcommon is a library to handle keyboard descriptions, including loading them from disk, parsing them and handling their state. It's mainly meant for client toolkits, window systems, and other system applications; currently that includes Wayland, kmscon, GTK+, Qt, Clutter, and more. It is also used by some XCB applications for proper keyboard support."
export CATEGORY=system
export TYPE=library
#export VERSION=1.0.0
#export VERSIONDATE=20200907
####test/x11comp.c:25:10: fatal error: spawn.h: No such file or directory
#export VERSION=1.0.1
#export VERSIONDATE=20200912
#export VERSION=1.0.2
#export VERSIONDATE=20201120
#export VERSION=1.0.3
#export VERSIONDATE=20201124
#export VERSION=1.1.0
#export VERSIONDATE=20210228
#export VERSION=1.2.0
#export VERSIONDATE=20210403
#export VERSION=1.2.1
#export VERSIONDATE=20210408
#export VERSION=1.3.0
#export VERSIONDATE=20210502
#export VERSION=1.3.1
#export VERSIONDATE=20210911
#export VERSION=1.4.0
#export VERSIONDATE=20220204
#export VERSION=1.4.1
#export VERSIONDATE=20220522
#export VERSION=1.5.0
#export VERSIONDATE=20230103
#export VERSION=1.6.0
#export VERSIONDATE=20231009
#export VERSION=1.7.0
#export VERSIONDATE=20240324
#export VERSION=1.8.0
#export VERSIONDATE=20250205
#export VERSION=1.8.1
#export VERSIONDATE=20250312
#export VERSION=1.9.0
#export VERSIONDATE=20250427
#export VERSION=1.9.1
#export VERSIONDATE=20250503
#export VERSION=1.9.2
#export VERSIONDATE=20250507
#export VERSION=1.10.0
#export VERSIONDATE=20250522
export VERSION=1.11.0
export VERSIONDATE=20250809
wl-showstatus --package-version
export DEPENDENCIES=libx11,xcb
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=meson,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=COPYING
export LICENSEFILE=LICENSE
export LICENSETYPE="MIT/X11 derivative"
export DOWNLOADURL="https://github.com/xkbcommon/libxkbcommon/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/xkbcommon/libxkbcommon/archive/$BASENAME-$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#mv $TARBALLDIR/$BASENAME/$BASENAME-$VERSION $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
cd libxkbcommon-xkbcommon-$VERSION
# fix test/registry.c (version >= 1.0.0)
patch -ulbf test/registry.c << EOF
@@ -112,3 +112,7 @@
     assert(rc);
+#ifdef _WIN32
+    rc = mkdir(buf);
+#else
     rc = mkdir(buf, 0777);
+#endif
     assert(rc == 0);
EOF
## fix src/context.c (version >= 1.0.0)
#patch -ulbf src/context.c << EOF
#@@ -31,3 +31,3 @@
# #include <errno.h>
#-#ifdef _MSC_VER
#+#ifdef _WIN32
# # include <direct.h>
#@@ -52,3 +52,3 @@
#     struct stat stat_buf;
#-    int err;
#+    int errcode;
#     char *tmp;
#@@ -59,5 +59,5 @@
#
#-    err = stat(path, &stat_buf);
#-    if (err != 0) {
#-        err = errno;
#+    errcode = stat(path, &stat_buf);
#+    if (errcode != 0) {
#+        errcode = errno;
#         goto err;
#@@ -65,3 +65,3 @@
#     if (!S_ISDIR(stat_buf.st_mode)) {
#-        err = ENOTDIR;
#+        errcode = ENOTDIR;
#         goto err;
#@@ -70,3 +70,3 @@
#     if (!check_eaccess(path, R_OK | X_OK)) {
#-        err = EACCES;
#+        errcode = EACCES;
#         goto err;
#@@ -81,3 +81,3 @@
#     darray_append(ctx->failed_includes, tmp);
#-    log_dbg(ctx, "Include path failed: %s (%s)\\n", tmp, strerror(err));
#+    log_dbg(ctx, "Include path failed: %s (%s)\\n", tmp, strerror(errcode));
#     return 0;
#EOF
# fix src/context.c (version >= 1.0.1)
patch -ulbf src/context.c << EOF
@@ -31,3 +31,4 @@
 #include <errno.h>
-#ifdef _MSC_VER
+#ifdef _WIN32
+# define err XKBCOMMON_err
 # include <direct.h>
EOF
# fix missing mkdtemp in test/registry.c (version >= 1.0.0)
mv test/registry.c test/registry.c.bak &&
echo "#define mkdtemp(template) NULL" > test/registry.c &&
cat test/registry.c.bak >> test/registry.c
# fix missing termios.h in tools/tools-common.c (version >= 1.0.0)
sed -i.bak -e "s/_MSC_VER/_WIN32/" tools/tools-common.c
# create dummy test/x11comp.c (version >= 1.0.0)
mv test/x11comp.c test/x11comp.c.bak &&
echo "int main(void) { return 1; }" > test/x11comp.c
# fix detection of Windows (version >= 0.10.0)
sed -i.bak -e "s/_MSC_VER/_WIN32/" src/context.c bench/bench.c test/common.c test/context.c test/test.h
# fix src/scanner-utils.h (version >= 1.0.1)
patch -ulbf src/scanner-utils.h << EOF
@@ -93,4 +93,5 @@
 }

+#define eof XKBCOMMON_eof
 static inline bool
 eof(struct scanner *s)
EOF
# fix test/keysym-unicode.c (version >= 1.9.0)
patch -ulbf test/keysym-unicode.c << EOF
@@ -10,3 +10,3 @@

-main()
+int main()
 {
EOF
# skip building test/xvfb-wrapper.c (version >= 1.6.0)
mv test/xvfb-wrapper.c test/xvfb-wrapper.c.bak &&
echo "int x11_tests_run() { return 0; }" > test/xvfb-wrapper.c
# fix meson.build
sed -i.bak -e "s/cc.get_id() != 'msvc'/host_machine.system() != 'windows'/" meson.build
mkdir -p build_both &&
 wl-showstatus configure &&
 #PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Denable-x11=false -Denable-wayland=false -Denable-docs=false . build_both &&
 #PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Denable-x11=true -Denable-wayland=false -Denable-docs=false . build_both &&
 #PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Denable-x11=true -Denable-wayland=false -Denable-docs=false . build_both &&
 PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Denable-x11=true -Denable-wayland=false -Denable-docs=false -Dc_args="$(if ${CC:-gcc} --version|grep -q "^clang"; then echo "-Wno-error=implicit-function-declaration"; fi)" . build_both &&
 wl-showstatus build-install &&
 PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib ninja -Cbuild_both install &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf libxkbcommon-xkbcommon-$VERSION




export NAME="premake5"
export STATUS=
#export URL=http://premake.sourceforge.net/
#export URL=http://industriousone.com/premake
export URL=http://premake.github.io/
export BASENAME=premake5
export DESCRIPTION="Powerfully simple build configuration"
export CATEGORY=development
export TYPE=application
#export VERSION=5.0.0-alpha12
#export VERSIONDATE=20170824
#export VERSION=5.0.0-beta2
#export VERSIONDATE=20241030
export VERSION=5.0.0-beta3
export VERSIONDATE=20241111
wl-showstatus --package-version
export DEPENDENCIES=
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=
export LICENSETYPE=
#export DOWNLOADURL="https://github.com/premake/premake-core/releases v"
export DOWNLOADURL="https://github.com/premake/premake-core/releases premake- -src.zip"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL="https://github.com/premake/premake-core/releases/download/v$VERSION/premake-$VERSION-windows.zip"
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
unzip -ojq $TARBALLDIR/$BASENAME/premake-$VERSION-windows.zip -d$BASENAME-$VERSION
cd $BASENAME-$VERSION
wl-showstatus install &&
 mkdir -p $INSTALLPREFIX/bin &&
 cp -f *.exe $INSTALLPREFIX/bin/ &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION



#export NAME="premake5"
#export STATUS=
##export URL=http://premake.sourceforge.net/
##export URL=http://industriousone.com/premake
#export URL=http://premake.github.io/
#export BASENAME=premake5
#export DESCRIPTION="Powerfully simple build configuration"
#export CATEGORY=development
#export TYPE=application
##export VERSION=5.0.0-alpha11
##export VERSIONDATE=20170212
##export VERSION=5.0.0-alpha12
##export VERSIONDATE=20170824
##export VERSION=5.0.0-beta2
##export VERSIONDATE=20241030
#export VERSION=5.0.0-beta3
#export VERSIONDATE=20241111
#wl-showstatus --package-version
#export DEPENDENCIES=zlib,libzip,mbedtls,libcurl,lua
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=
#export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=LICENSE.txt
#export LICENSETYPE=
#export DOWNLOADURL="https://github.com/premake/premake-core/releases v"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
##export DOWNLOADSOURCEURL=https://github.com/premake/premake-core/releases/download/v$VERSION/premake-$VERSION-src.zip
#export DOWNLOADSOURCEURL="https://github.com/premake/premake-core/releases/download/v$VERSION/premake-$VERSION-src.zip https://github.com/premake/premake-core/releases/download/v$VERSION/premake-$VERSION-windows.zip"
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#unzip -oq $TARBALLDIR/$BASENAME/$BASENAME-$VERSION-src.zip
#mkdir -p $BASENAME-$VERSION/bin/release
#unzip -ojq $TARBALLDIR/$BASENAME/premake-$VERSION-windows.zip -d$BASENAME-$VERSION/bin/release
#cd $BASENAME-$VERSION
#patch -ulbf contrib/libzip/config.h << EOF
#--- contrib/libzip/config.h  2017-01-11 16:44:37.000000000 +0100
#+++ contrib/libzip/config.h  2017-02-13 13:54:50.853571600 +0100
#@@ -46,13 +46,2 @@
#
#-#ifndef HAVE_SSIZE_T_LIBZIP
#-#  if SIZE_T_LIBZIP == INT_LIBZIP
#-typedef int ssize_t;
#-#  elif SIZE_T_LIBZIP == LONG_LIBZIP
#-typedef long ssize_t;
#-#  elif SIZE_T_LIBZIP == LONG_LONG_LIBZIP
#-typedef long long ssize_t;
#-#  else
#-#error no suitable type for ssize_t found
#-#  endif
#-#endif
#
#EOF
## use existing libraries
#mv build/gmake.windows/Premake5.make build/gmake.windows/Premake5.make.bak &&
##sed -e "s?zlib\(-lib\.lib\)?z\1?g; s?bin/Release/\([^-]*\)-lib\.lib?-l\1.dll?g; s?\(LDDEPS\s*+=\)?#\1?; s?\(INCLUDES\s+=\)?#\1?; s?\(ALL_CX*FLAGS\s*+=\s*\)?\1-DLUA_BUILD_AS_DLL ?" build/gmake.windows/Premake5.make.bak > build/gmake.windows/Premake5.make
##sed -e "s?zlib\(-lib\.lib\)?z\1?g; s?bin/Release/\([^-]*\)-lib\.lib?-l\1.dll?g; s?\(LDDEPS\s*+=\)?#\1?; s?\(INCLUDES\s+=\)?\1-I$MINGWPREFIX/include ?; s?\(ALL_CX*FLAGS\s*+=\s*\)?\1-DLUA_BUILD_AS_DLL ?" build/gmake.windows/Premake5.make.bak > build/gmake.windows/Premake5.make
#sed -e "s?zlib\(-lib\.lib\)?z\1?g; s?bin/Release/\([^-]*\)-lib\.lib?-l\1.dll?g; s?\(LDDEPS\s*+=\)?#\1?; s?\(INCLUDES\s+=\)?\1-I$MINGWPREFIX/include ?; s?\(ALL_CX*FLAGS\s*+=\s*\)?\1-DLUA_BUILD_AS_DLL ?; s/LIBS\s*+=.*/& -lversion/" build/gmake.windows/Premake5.make.bak > build/gmake.windows/Premake5.make
#mkdir -p build/gmake.windows/bin/Release
#cp -f $MINGWPREFIX/lib/libcurl.dll.a build/gmake.windows/bin/Release/curl-lib.lib
#cp -f $MINGWPREFIX/lib/liblua.dll.a build/gmake.windows/bin/Release/lua-lib.lib
#cp -f $MINGWPREFIX/lib/libmbedtls.dll.a build/gmake.windows/bin/Release/mbedtls-lib.lib
#cp -f $MINGWPREFIX/lib/libzip.dll.a build/gmake.windows/bin/Release/zip-lib.lib
#cp -f $MINGWPREFIX/lib/libz.dll.a build/gmake.windows/bin/Release/zlib-lib.lib
#wl-showstatus build &&
#make -C build/gmake.windows CC=${CC:-gcc} LDFLAGS="-Wl,--allow-multiple-definition" config=release verbose=1 &&
# bin/release/premake5.exe --os=windows --platform=$(if ( echo $RUNPLATFORM | grep -qv x86_64 ); then echo x32; else echo x64; fi) --cc=gcc gmake &&
# make config=release CC=${CC:-gcc} &&
# wl-showstatus build-install &&
# mkdir -p $INSTALLPREFIX/bin &&
# cp -f bin/release/* $INSTALLPREFIX/bin/ &&
#    echo OK
# #wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION



#export NAME="premake5"
#export STATUS=
##export URL=http://premake.sourceforge.net/
##export URL=http://industriousone.com/premake
#export URL=http://premake.github.io/
#export BASENAME=premake5
#export DESCRIPTION="Powerfully simple build configuration"
#export CATEGORY=development
#export TYPE=application
##export VERSION=5.0.0-beta2
##export VERSIONDATE=20241030
##export VERSION=master
##export VERSIONDATE=20241109
#export VERSION=5.0.0-beta3
#export VERSIONDATE=20241111
#wl-showstatus --package-version
#export DEPENDENCIES=zlib,libzip,mbedtls,libcurl,lua
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=
#export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=LICENSE.txt
#export LICENSETYPE=BSD
##export DOWNLOADURL="https://github.com/premake/premake-core/releases v"
#export DOWNLOADURL="https://github.com/premake/premake-core/releases premake- -src.zip"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
##export DOWNLOADSOURCEURL=https://github.com/premake/premake-core/archive/refs/tags/v$VERSION.tar.gz
#export DOWNLOADSOURCEURL=https://github.com/premake/premake-core/releases/download/v$VERSION/premake-$VERSION-src.zip
##export DOWNLOADSOURCEURL="https://github.com/premake/premake-core/archive/refs/heads/$VERSION.tar.gz"
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#wl-showstatus extract
##tar xz --force-local -f $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
##cd premake-core-$VERSION
#unzip -oq $TARBALLDIR/$BASENAME/premake-$VERSION-src.zip
#cd premake-$VERSION-src
##tar xz --force-local -f $TARBALLDIR/$BASENAME/$VERSION.tar.gz
##cd premake-core-$VERSION
## fix contrib/curl/lib/strerror.c (version >= 5.0.0-beta2)
#patch -ulbf contrib/curl/lib/strerror.c << EOF
#@@ -189,4 +189,6 @@
#
#+#if CURLE_SSL_CACERT != CURLE_PEER_FAILED_VERIFICATION
#   case CURLE_PEER_FAILED_VERIFICATION:
#     return "SSL peer certificate or SSH remote key was not OK";
#+#endif
#
#EOF
## fix premake5.lua (version >= 5.0.0-beta2)
#patch -ulbf premake5.lua << EOF
#@@ -143,3 +143,3 @@
#                if not _OPTIONS["no-curl"] then
#-                       defines { "CURL_STATICLIB", "PREMAKE_CURL"}
#+                       defines { "PREMAKE_CURL"}
#                end
#EOF
##patch -ulbf build/gmake2.windows/Makefile << EOF
##@@ -10,3 +10,25 @@
##
##-ifeq (\$(config),release_x86)
##+ifeq (\$(config),release)
##+  Premake5_config = release
##+  lua_lib_config = release
##+  luashim_lib_config = release
##+  zlib_lib_config = release
##+  zip_lib_config = release
##+  mbedtls_lib_config = release
##+  curl_lib_config = release
##+  example_config = release
##+  luasocket_config = release
##+
##+else ifeq (\$(config),debug)
##+  Premake5_config = debug
##+  lua_lib_config = debug
##+  luashim_lib_config = debug
##+  zlib_lib_config = debug
##+  zip_lib_config = debug
##+  mbedtls_lib_config = debug
##+  curl_lib_config = debug
##+  example_config = debug
##+  luasocket_config = debug
##+
##+else ifeq (\$(config),release_x86)
##   Premake5_config = release_x86
##EOF
#wl-showstatus bootstrap &&
# #mingw32-make -f Bootstrap.mak mingw CC=${CC:-gcc} AR=${AR:-ar} &&
# mingw32-make -f Bootstrap.mak mingw CC=${CC:-gcc} AR=${AR:-ar} LDFLAGS="-lcurl" &&
# wl-showstatus configure &&
# bin/release/premake5.exe gmake2 --no-curl --no-luasocket &&
# #build/bootstrap/premake_bootstrap.exe gmake2 --no-curl --no-zlib --no-luasocket &&
# # avoid redefinition of ssize_t
# sed -i.bak -e "s/#ifndef HAVE_SSIZE_T_LIBZIP/#if 0/"  contrib/libzip/config.h &&
# wl-showstatus build &&
# #make CC=${CC:-gcc} CXX=${CXX:-g++} LD=${LD:-ld} AR=${AR:-ar} &&
# #make -Cbuild/gmake2.windows config=release_$(if echo $RUNPLATFORM|grep -q "^i.86"; then echo "x86"; elif echo $RUNPLATFORM|grep -q "^aarch64"; then echo "ARM64"; else echo "x64"; fi) CC=${CC:-gcc} &&
# mingw32-make config=release_$(if echo $RUNPLATFORM|grep -q "^i.86"; then echo "x86"; elif echo $RUNPLATFORM|grep -q "^aarch64"; then echo "ARM64"; else echo "x64"; fi) CFLAGS="-I$PWD/contrib/curl/include -I$PWD/contrib/lua/src" LDFLAGS="$(${PKG_CONFIG:-pkg-config} --libs-only-l lua luajit libzip)" CC=${CC:-gcc} AR=${AR:-ar} &&
# #mingw32-make config=release_$(if echo $RUNPLATFORM|grep -q "^i.86"; then echo "x86"; elif echo $RUNPLATFORM|grep -q "^aarch64"; then echo "ARM64"; else echo "x64"; fi) CFLAGS="-I$PWD/contrib/curl/include -I$PWD/contrib/lua/src" LDFLAGS="$(for F in $(find $PWD/contrib -name '*.lib'); do echo $F; done)" CC=${CC:-gcc} AR=${AR:-ar} &&
# #mingw32-make config=release_$(if echo $RUNPLATFORM|grep -q "^i.86"; then echo "x86"; elif echo $RUNPLATFORM|grep -q "^aarch64"; then echo "ARM64"; else echo "x64"; fi) zlib_lib_config= zip_lib_config= mbedtls_lib_config= curl_lib_config= lua_lib_config= CFLAGS="-I$PWD/contrib/curl/include -I$PWD/contrib/lua/src" LDFLAGS="$(${PKG_CONFIG:-pkg-config} --libs-only-l lua luajit libzip)" CC=${CC:-gcc} AR=${AR:-ar} &&
#    echo OK
## #wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf premake-core-$VERSION
## wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf premake-$VERSION-src




export NAME="premake5"
export STATUS=
#export URL=http://premake.sourceforge.net/
#export URL=http://industriousone.com/premake
export URL=http://premake.github.io/
export BASENAME=premake5
export DESCRIPTION="Powerfully simple build configuration"
export CATEGORY=development
export TYPE=application
export VERSION=5.0.0-alpha12
export VERSIONDATE=20170824
wl-showstatus --package-version
export DEPENDENCIES=
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=
export LICENSETYPE=
export DOWNLOADURL="https://github.com/premake/premake-core/releases v"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL="https://github.com/premake/premake-core/releases/download/v$VERSION/premake-$VERSION-windows.zip"
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
unzip -ojq $TARBALLDIR/$BASENAME/premake-$VERSION-windows.zip -d$BASENAME-$VERSION
cd $BASENAME-$VERSION
wl-showstatus install &&
 mkdir -p $INSTALLPREFIX/bin &&
 cp -f *.exe $INSTALLPREFIX/bin/ &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION



#export NAME="premake5"
#export STATUS=
##export URL=http://premake.sourceforge.net/
##export URL=http://industriousone.com/premake
#export URL=http://premake.github.io/
#export BASENAME=premake5
#export DESCRIPTION="Powerfully simple build configuration"
#export CATEGORY=development
#export TYPE=application
##export VERSION=5.0.0-alpha11
##export VERSIONDATE=20170212
#export VERSION=5.0.0-alpha12
#export VERSIONDATE=20170824
#wl-showstatus --package-version
#export DEPENDENCIES=zlib,libzip,mbedtls,libcurl,lua
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=
#export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=LICENSE.txt
#export LICENSETYPE=
#export DOWNLOADURL="https://github.com/premake/premake-core/releases v"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
##export DOWNLOADSOURCEURL=https://github.com/premake/premake-core/releases/download/v$VERSION/premake-$VERSION-src.zip
#export DOWNLOADSOURCEURL="https://github.com/premake/premake-core/releases/download/v$VERSION/premake-$VERSION-src.zip https://github.com/premake/premake-core/releases/download/v$VERSION/premake-$VERSION-windows.zip"
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#unzip -oq $TARBALLDIR/$BASENAME/$BASENAME-$VERSION-src.zip
#mkdir -p $BASENAME-$VERSION/bin/release
#unzip -ojq $TARBALLDIR/$BASENAME/premake-$VERSION-windows.zip -d$BASENAME-$VERSION/bin/release
#cd $BASENAME-$VERSION
#patch -ulbf contrib/libzip/config.h << EOF
#--- contrib/libzip/config.h  2017-01-11 16:44:37.000000000 +0100
#+++ contrib/libzip/config.h  2017-02-13 13:54:50.853571600 +0100
#@@ -46,13 +46,2 @@
#
#-#ifndef HAVE_SSIZE_T_LIBZIP
#-#  if SIZE_T_LIBZIP == INT_LIBZIP
#-typedef int ssize_t;
#-#  elif SIZE_T_LIBZIP == LONG_LIBZIP
#-typedef long ssize_t;
#-#  elif SIZE_T_LIBZIP == LONG_LONG_LIBZIP
#-typedef long long ssize_t;
#-#  else
#-#error no suitable type for ssize_t found
#-#  endif
#-#endif
#
#EOF
## use existing libraries
#mv build/gmake.windows/Premake5.make build/gmake.windows/Premake5.make.bak &&
##sed -e "s?zlib\(-lib\.lib\)?z\1?g; s?bin/Release/\([^-]*\)-lib\.lib?-l\1.dll?g; s?\(LDDEPS\s*+=\)?#\1?; s?\(INCLUDES\s+=\)?#\1?; s?\(ALL_CX*FLAGS\s*+=\s*\)?\1-DLUA_BUILD_AS_DLL ?" build/gmake.windows/Premake5.make.bak > build/gmake.windows/Premake5.make
##sed -e "s?zlib\(-lib\.lib\)?z\1?g; s?bin/Release/\([^-]*\)-lib\.lib?-l\1.dll?g; s?\(LDDEPS\s*+=\)?#\1?; s?\(INCLUDES\s+=\)?\1-I$MINGWPREFIX/include ?; s?\(ALL_CX*FLAGS\s*+=\s*\)?\1-DLUA_BUILD_AS_DLL ?" build/gmake.windows/Premake5.make.bak > build/gmake.windows/Premake5.make
#sed -e "s?zlib\(-lib\.lib\)?z\1?g; s?bin/Release/\([^-]*\)-lib\.lib?-l\1.dll?g; s?\(LDDEPS\s*+=\)?#\1?; s?\(INCLUDES\s+=\)?\1-I$MINGWPREFIX/include ?; s?\(ALL_CX*FLAGS\s*+=\s*\)?\1-DLUA_BUILD_AS_DLL ?; s/LIBS\s*+=.*/& -lversion/" build/gmake.windows/Premake5.make.bak > build/gmake.windows/Premake5.make
#mkdir -p build/gmake.windows/bin/Release
#cp -f $MINGWPREFIX/lib/libcurl.dll.a build/gmake.windows/bin/Release/curl-lib.lib
#cp -f $MINGWPREFIX/lib/liblua.dll.a build/gmake.windows/bin/Release/lua-lib.lib
#cp -f $MINGWPREFIX/lib/libmbedtls.dll.a build/gmake.windows/bin/Release/mbedtls-lib.lib
#cp -f $MINGWPREFIX/lib/libzip.dll.a build/gmake.windows/bin/Release/zip-lib.lib
#cp -f $MINGWPREFIX/lib/libz.dll.a build/gmake.windows/bin/Release/zlib-lib.lib
#wl-showstatus build &&
#make -C build/gmake.windows CC=${CC:-gcc} LDFLAGS="-Wl,--allow-multiple-definition" config=release verbose=1 &&
# bin/release/premake5.exe --os=windows --platform=$(if ( echo $RUNPLATFORM | grep -qv x86_64 ); then echo x32; else echo x64; fi) --cc=gcc gmake &&
# make config=release CC=${CC:-gcc} &&
# wl-showstatus build-install &&
# mkdir -p $INSTALLPREFIX/bin &&
# cp -f bin/release/* $INSTALLPREFIX/bin/ &&
#    echo OK
# #wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




export NAME="clFFT"
export STATUS=
export URL=https://github.com/clMathLibraries/clFFT
export BASENAME=clfft
export DESCRIPTION="clFFT is a software library containing FFT functions written in OpenCL. In addition to GPU devices, the library also supports running on CPU devices to facilitate debugging and heterogeneous programming."
export CATEGORY=math
export TYPE=library
export VERSION=2.12.2
export VERSIONDATE=20200404
wl-showstatus --package-version
export DEPENDENCIES=khronos-opencl-icd-loader
#export DEPENDENCIES=khronos-opencl-icd-loader,boost
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=Apache
export DOWNLOADURL="https://github.com/clMathLibraries/clFFT/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/clMathLibraries/clFFT/archive/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xfz $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd clFFT-$VERSION
# fix src/library/fft_binary_lookup.cpp (version >= 2.12.2)
patch -ulbf src/library/fft_binary_lookup.cpp << EOF
@@ -122,3 +122,3 @@

-    HANDLE handle = CreateFile(tmp.c_str(),
+    HANDLE handle = CreateFileW(tmp.c_str(),
                                GENERIC_WRITE,
EOF
## fix undefined reference to WinMain in src/client/CMakeLists.txt (version >= 2.12.2)
#patch -ulbf src/client/CMakeLists.txt << EOF
#@@ -33,3 +33,6 @@
# set( RT_LIB "" )
#-if( WIN32 )
#+if( MINGW )
#+       add_definitions( "-mconsole" )
#+       set( RT_LIB "-mconsole" )
#+elseif( WIN32 )
#        add_definitions( "/D_CONSOLE" )
#EOF
mkdir -p build_static build_shared &&
 wl-showstatus configure &&
 #cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DBUILD64:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DBUILD_RUNTIME:BOOL=ON -DBUILD_CLIENT:BOOL=ON -DUNICODE:BOOL=OFF -DBUILD_EXAMPLES:BOOL=OFF -DBUILD_TEST:BOOL=OFF -Ssrc -Bbuild_static &&
 #cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DBUILD64:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DBUILD_RUNTIME:BOOL=ON -DBUILD_CLIENT:BOOL=OFF -DBUILD_CALLBACK_CLIENT:BOOL=OFF -DUNICODE:BOOL=ON -DBUILD_EXAMPLES:BOOL=OFF -DBUILD_TEST:BOOL=OFF -DCMAKE_CXX_FLAGS:STRING="-DUNICODE -D_UNICODE" -Ssrc -Bbuild_static &&
 cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DBUILD64:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DBUILD_RUNTIME:BOOL=ON -DBUILD_CLIENT:BOOL=OFF -DBUILD_CALLBACK_CLIENT:BOOL=OFF -DUNICODE:BOOL=ON -DBUILD_EXAMPLES:BOOL=OFF -DBUILD_TEST:BOOL=OFF -DCMAKE_CXX_FLAGS:STRING="-DUNICODE -D_UNICODE -std=c++11 -fpermissive" -Ssrc -Bbuild_static &&
 #cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DBUILD64:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DBUILD_RUNTIME:BOOL=ON -DBUILD_CLIENT:BOOL=ON -DBUILD_CALLBACK_CLIENT:BOOL=ON -DUNICODE:BOOL=ON -DBUILD_EXAMPLES:BOOL=OFF -DBUILD_TEST:BOOL=OFF -DCMAKE_CXX_FLAGS:STRING="-DUNICODE -D_UNICODE" -Ssrc -Bbuild_static &&
 wl-showstatus configure &&
 #cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DBUILD64:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DBUILD_RUNTIME:BOOL=ON -DBUILD_CLIENT:BOOL=ON -DUNICODE:BOOL=OFF -DBUILD_EXAMPLES:BOOL=OFF -DBUILD_TEST:BOOL=OFF -Ssrc -Bbuild_shared &&
 #cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DBUILD64:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DBUILD_RUNTIME:BOOL=ON -DBUILD_CLIENT:BOOL=OFF -DBUILD_CALLBACK_CLIENT:BOOL=OFF -DUNICODE:BOOL=ON -DBUILD_EXAMPLES:BOOL=OFF -DBUILD_TEST:BOOL=OFF -DCMAKE_CXX_FLAGS:STRING="-DUNICODE -D_UNICODE" -Ssrc -Bbuild_shared &&
 cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DBUILD64:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DBUILD_RUNTIME:BOOL=ON -DBUILD_CLIENT:BOOL=OFF -DBUILD_CALLBACK_CLIENT:BOOL=OFF -DUNICODE:BOOL=ON -DBUILD_EXAMPLES:BOOL=OFF -DBUILD_TEST:BOOL=OFF -DCMAKE_CXX_FLAGS:STRING="-DUNICODE -D_UNICODE -std=c++11 -fpermissive" -Ssrc -Bbuild_shared &&
 #cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DBUILD64:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DBUILD_RUNTIME:BOOL=ON -DBUILD_CLIENT:BOOL=ON -DBUILD_CALLBACK_CLIENT:BOOL=ON -DUNICODE:BOOL=ON -DBUILD_EXAMPLES:BOOL=OFF -DBUILD_TEST:BOOL=OFF -DCMAKE_CXX_FLAGS:STRING="-DUNICODE -D_UNICODE" -Ssrc -Bbuild_shared &&
 #sed -i.bak -e "s/-lOpenCL/-Wl,--enable-stdcall-fixup &/" build_shared/build.ninja &&
 wl-showstatus build-install &&
 ninja -Cbuild_static install/strip &&
 wl-showstatus build-install &&
 ninja -Cbuild_shared install/strip &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf clFFT-$VERSION




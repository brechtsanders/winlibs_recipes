export NAME="amiws"
export STATUS=
export URL=https://github.com/staskobzar/amiws
export BASENAME=amiws
export DESCRIPTION="amiws is simple proxy from AMI to WEB. It can connect to one or more Asterisk PBXs via AMI (Asterisk Manager Interface), read messages from AMI stream and send actions/commands to it. Received messages are parsed and converted to JSON. amiws also provides HTTP/WebSocket interface and sends JSON messages to all connected users via HTTP."
export CATEGORY=communication
export TYPE=application
export VERSION=2.2.1
export VERSIONDATE=20220504
wl-showstatus --package-version
export DEPENDENCIES=libyaml
#export DEPENDENCIES=libyaml,openssl
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=COPYING
export LICENSETYPE=GPL
export DOWNLOADURL="https://github.com/staskobzar/amiws/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/staskobzar/amiws/archive/refs/tags/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xfz $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd $BASENAME-$VERSION
# fix src/lib/frozen.c (version >= 2.2.1)
patch -ulbf src/lib/frozen.c << EOF
@@ -41,3 +41,3 @@
 int cs_win_vsnprintf(char *str, size_t size, const char *format, va_list ap);
-#if _MSC_VER >= 1700
+#if (_MSC_VER >= 1700) || defined(__MINGW32__)
 #include <stdint.h>
EOF
# fix missing syslog.h in src/lib/amiws.h (version >= 2.2.1)
patch -ulbf src/lib/amiws.h << EOF
@@ -32,3 +32,8 @@
 #include <stdio.h>
+#ifdef _WIN32
+#define openlog(...)
+#define syslog(...)
+#else
 #include <syslog.h>
+#endif
 #include <yaml.h>
EOF
# fix src/amiws.c (version >= 2.2.1)
patch -ulbf src/amiws.c << EOF
@@ -51,3 +51,5 @@
 static void usage();
+#ifndef _WIN32
 static void daemonize(const char *pidfile, const char *wdir);
+#endif
 static void handle_signal(int sig);
@@ -90,3 +92,7 @@

+#ifndef _WIN32
   if (daemon == 1) daemonize(pidfile, wdir);
+#else
+  if (daemon == 1) fprintf(stderr, "Running as daemon not supported on Windows\\n");
+#endif

@@ -108,2 +114,3 @@

+#ifndef _WIN32
 static void daemonize(const char *pidfile,
@@ -171,2 +178,3 @@
 }
+#endif

EOF
# avoid openssl detection issue
sed -i.bak -e "s/as_fn_error\(.*openssl library not found\)/echo\1/" configure
# avoid syslog.h detection issue
sed -i.bak2 -e "s/as_fn_error\(.*syslog library header .* not found\)/echo\1/" configure
wl-showstatus configure &&
 #mkdir -p m4 &&
 ##intltoolize -f -c &&
 #autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal &&
 #./autogen.sh &&
 #    echo OK
 ## fix building DLLs on 64-bit
 #if ( echo $RUNPLATFORM | grep -q x86_64 ); then
 # echo "AM_GNU_GETTEXT_VERSION([$(gettext --version|head -n1|sed -e "s/^.* \([0-9\.]*\) *$/\1/")])" >> configure.ac &&
 # autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal
 #fi
 #PATH=$PATH:$PERLDIR/../c/bin INTLTOOL_PERL="$PERLDIR/bin/perl.exe" 
 #PERL="$PERLDIR/bin/perl.exe -I$PERLDIR/lib" 
 #PYTHON=$PYDIR/python.exe 
 #PYTHON=$PYDIR/python.exe C_INCLUDE_PATH=$C_INCLUDE_PATH:$PYDIR/include 
 #PKG_CONFIG_PATH=$MINGWPREFIX/libav/lib/pkgconfig${PKG_CONFIG_PATH:+:$PKG_CONFIG_PATH} 
 #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --enable-shared --enable-static --host=$RUNPLATFORM LDFLAGS="-Wl,-no-undefined -Wl,--as-needed" &&
 ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --without-ssl &&
 ## fix building DLLs
 #sed -i.bak -e "s/\(allow_undefined=\)yes/\1no/" libtool &&
 ## fix detection of shared libraries
 #sed -i.bak2 -e "s/\(deplibs_check_method=\"\)[^\"]*/\1file_magic ^x86 archive import|^x86 DLL|PE32+* executable (DLL)|pe-i386|pe-x86-64/; s/'file format pe-i386[^']*'/\"\$deplibs_check_method\"/" libtool &&
 #sed -i.bak2 -e "s/\(deplibs_check_method=\"\)[^\"]*/\1none/" libtool &&
 #sed -i.bak2 -e "s/\(deplibs_check_method=\"\)[^\"]*/\1pass_all/" libtool &&
 #wl-showstatus build &&
 #make &&
 wl-showstatus build-install &&
 make install-strip &&
    echo OK
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




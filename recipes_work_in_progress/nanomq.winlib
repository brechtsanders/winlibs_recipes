export NAME="NanoMQ"
export STATUS=
export URL=https://nanomq.io/
#export URL=https://github.com/nanomq/nanomq
export BASENAME=nanomq
export DESCRIPTION="NanoMQ MQTT Broker (NanoMQ) is a lightweight and blazing-fast MQTT Broker for the IoT Edge platform."
export CATEGORY=communication
export TYPE=library
#export VERSION=0.5.9
#export VERSIONDATE=20220217
#export VERSION=0.6.1
#export VERSIONDATE=20220225
#export VERSION=0.6.2
#export VERSIONDATE=20220226
#export VERSION=0.6.3
#export VERSIONDATE=20220227
#export VERSION=0.6.4
#export VERSIONDATE=20220308
#export VERSION=0.6.6
#export VERSIONDATE=20220311
#export VERSION=0.6.8
#export VERSIONDATE=20220418
#export VERSION=0.7.0
#export VERSIONDATE=20220429
#export VERSION=0.7.2
#export VERSIONDATE=20220508
#export VERSION=0.7.3
#export VERSIONDATE=20220510
#export VERSION=0.7.4
#export VERSIONDATE=20220510
#export VERSION=0.7.5
#export VERSIONDATE=20220512
#export VERSION=0.7.8
#export VERSIONDATE=20220522
#export VERSION=0.7.9
#export VERSIONDATE=20220526
#export VERSION=0.8.0
#export VERSIONDATE=20220602
#export VERSION=0.8.2
#export VERSIONDATE=20220624
#export VERSION=0.8.3
#export VERSIONDATE=20220626
#export VERSION=0.8.5
#export VERSIONDATE=20220629
#export VERSION=0.9.0
#export VERSIONDATE=20220702
#export VERSION=0.9.2
#export VERSIONDATE=20220707
#export VERSION=0.9.5
#export VERSIONDATE=20220722
#export VERSION=0.9.7
#export VERSIONDATE=20220728
#export VERSION=0.10
#export VERSIONDATE=20220730
#export VERSION=0.10.1
#export VERSIONDATE=20220801
#export VERSION=0.10.5
#export VERSIONDATE=20220805
#export VERSION=0.10.8
#export VERSIONDATE=20220814
#export VERSION=0.11.0
#export VERSIONDATE=20220827
#export VERSION=0.11.2
#export VERSIONDATE=20220904
#export VERSION=0.11.3
#export VERSIONDATE=20220907
#export VERSION=0.11.5
#export VERSIONDATE=20220913
#export VERSION=0.11.8
#export VERSIONDATE=20220916
#export VERSION=0.12.1
#export VERSIONDATE=20220924
#export VERSION=0.12.2
#export VERSIONDATE=20221011
#export VERSION=0.12.5
#export VERSIONDATE=20221024
#export VERSION=0.13.0
#export VERSIONDATE=20221105
#export VERSION=0.13.1
#export VERSIONDATE=20221121
#export VERSION=0.13.3
#export VERSIONDATE=20221123
#export VERSION=0.13.5
#export VERSIONDATE=20221124
#export VERSION=0.13.6
#export VERSIONDATE=20221126
#export VERSION=0.13.8
#export VERSIONDATE=20221202
#export VERSION=0.14.0
#export VERSIONDATE=20221202
#export VERSION=0.14.1
#export VERSIONDATE=20221203
#export VERSION=0.14.5
#export VERSIONDATE=20221211
#export VERSION=0.14.8
#export VERSIONDATE=20221217
#export VERSION=0.15.0
#export VERSIONDATE=20230109
#export VERSION=0.15.1
#export VERSIONDATE=20230116
#export VERSION=0.15.2
#export VERSIONDATE=20230212
#export VERSION=0.15.3
#export VERSIONDATE=20230214
#export VERSION=0.15.5
#export VERSIONDATE=20230217
#export VERSION=0.16.0
#export VERSIONDATE=20230307
#export VERSION=0.16.2
#export VERSIONDATE=20230316
#export VERSION=0.16.3
#export VERSIONDATE=20230318
#export VERSION=0.16.5
#export VERSIONDATE=20230325
#export VERSION=0.17.0
#export VERSIONDATE=20230401
#export VERSION=0.17.2
#export VERSIONDATE=20230409
#export VERSION=0.17.5
#export VERSIONDATE=20230415
#export VERSION=0.17.8
#export VERSIONDATE=20230422
#export VERSION=0.17.9
#export VERSIONDATE=20230427
#export VERSION=0.18.1
#export VERSIONDATE=20230427
#export VERSION=0.18.2
#export VERSIONDATE=20230520
#export VERSION=0.19.0
#export VERSIONDATE=20230708
#export VERSION=0.19.1
#export VERSIONDATE=20230715
#export VERSION=0.19.5
#export VERSIONDATE=20230805
#export VERSION=0.20.0
#export VERSIONDATE=20230928
#export VERSION=0.20.5
#export VERSIONDATE=20231025
#export VERSION=0.20.6
#export VERSIONDATE=20231028
#export VERSION=0.20.8
#export VERSIONDATE=20231118
#export VERSION=0.21
#export VERSIONDATE=20240126
#export VERSION=0.21.1
#export VERSIONDATE=20240129
#export VERSION=0.21.2
#export VERSIONDATE=20240201
#export VERSION=0.21.7
#export VERSIONDATE=20240323
#export VERSION=0.21.8
#export VERSIONDATE=20240326
#export VERSION=0.21.9
#export VERSIONDATE=20240418
#export VERSION=0.21.10
#export VERSIONDATE=20240515
#export VERSION=0.21.11
#export VERSIONDATE=20240808
#export VERSION=0.22.0
#export VERSIONDATE=20240625
#export VERSION=0.22.1
#export VERSIONDATE=20240704
#export VERSION=0.22.2
#export VERSIONDATE=20240713
#export VERSION=0.22.4
#export VERSIONDATE=20240731
#export VERSION=0.22.5
#export VERSIONDATE=20240806
#export VERSION=0.22.6
#export VERSIONDATE=20240820
#export VERSION=0.22.7
#export VERSIONDATE=20240821
#export VERSION=0.22.8
#export VERSIONDATE=20240904
#export VERSION=0.22.9
#export VERSIONDATE=20240919
#export VERSION=0.22.10
#export VERSIONDATE=20241031
#export VERSION=0.23.1
#export VERSIONDATE=20241209
#export VERSION=0.23.2
#export VERSIONDATE=20241225
#export VERSION=0.23.3
#export VERSIONDATE=20250304
#export VERSION=0.23.4
#export VERSIONDATE=20250319
#export VERSION=0.23.5
#export VERSIONDATE=20250320
#export VERSION=0.23.6
#export VERSIONDATE=20250407
#export VERSION=0.23.7
#export VERSIONDATE=20250508
#export VERSION=0.23.8
#export VERSIONDATE=20250603
#export VERSION=0.23.9
#export VERSIONDATE=20250616
#export VERSION=0.23.10
#export VERSIONDATE=20250627
#export VERSION=0.24.0
#export VERSIONDATE=20250721
export VERSION=0.24.1
export VERSIONDATE=20250813
####nanomq/include/nnb_opt.h:12:10: fatal error: nng/mqtt/mqtt_client.h: No such file or directory
wl-showstatus --package-version
export DEPENDENCIES=nanonng
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE.txt
export LICENSETYPE=MIT
export DOWNLOADURL="https://github.com/nanomq/nanomq/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/nanomq/nanomq/archive/refs/tags/$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/$VERSION.tar.gz
cd $BASENAME-$VERSION
# fix nanolib/cmd.c (version >= 0.5.9)
patch -ulbf nanolib/cmd.c << EOF
@@ -19,3 +19,5 @@
 #include <limits.h>
+#ifndef _WIN32
 #include <sys/wait.h>
+#endif
 #include <unistd.h>
EOF
## fix missing nng/mqtt/mqtt_client.h
#sed -i.bak -e "s?nng/mqtt/\(mqtt_client\.h\)?\1?; s?nng/protocol/mqtt/\(mqtt\.h\)?\1?" $(grep -l "#include <nng/mqtt/mqtt_client\.h>" $(find -name '*.c' -or -name '*.h'))

## fix missing nng.h
#sed -i.bak -e "s?\(#include <\)\(nng\.h\)?\1nng/\2?" $(grep -l "#include <nng\.h>" $(find -name '*.c' -or -name '*.h'))

## skip building empty subdirectory
#sed -i.bak -e "s/add_subdirectory(nng)/#&/" CMakeLists.txt

#grep -wi add_library $(find -name CMakeLists.txt -or -name '*.cmake')
#mkdir -p build_test && cmake.exe -G"MSYS Makefiles" -S. -Bbuild_test -LH && echo OK; rm -rf build_test

#export BUILDDEPENDENCIES=cmake
#export OPTIONALBUILDDEPENDENCIES=
#PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ 
#-DCMAKE_SYSTEM_NAME=Windows 
#-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
#mkdir -p build_win &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -S. -Bbuild_win &&
# #wl-showstatus build &&
# #make -Cbuild_win &&
# wl-showstatus build-install &&
# make -Cbuild_win install/strip &&
#    echo OK

#echo -e "ADD_LIBRARY(nng SHARED IMPORTED)\nSET_PROPERTY(TARGET nng PROPERTY IMPORTED_LOCATION \"-lnng\")" > nng/CMakeLists.txt
cat > nng/CMakeLists.txt << EOF
find_package(nng)
add_library(nng INTERFACE)
target_link_libraries(nng INTERFACE \${nng_LIBRARIES})
target_include_directories(nng INTERFACE \${nng_INCLUDE_DIR})
EOF

#export BUILDDEPENDENCIES=cmake,ninja
#export OPTIONALBUILDDEPENDENCIES=
#PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ 
#-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
#touch nng/CMakeLists.txt
mkdir -p build_win &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_NNG_PROXY:BOOL=OFF -DCMAKE_POLICY_VERSION_MINIMUM=STRING=3.5 -S. -Bbuild_win &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_NNG_PROXY:BOOL=OFF -DCMAKE_PREFIX_PATH:PATH=$MINGWPREFIX/share/nng -S. -Bbuild_win &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DCMAKE_C_FLAGS:STRING="-I$MINGWPREFIX/include/nng" -S. -Bbuild_win &&
 #wl-showstatus build &&
 #ninja -Cbuild_win &&
 wl-showstatus build-install &&
 ninja -Cbuild_win install/strip &&
    echo OK

#export BUILDDEPENDENCIES=cmake,ninja
#export OPTIONALBUILDDEPENDENCIES=
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -S. -Bbuild_static &&
# #-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -S. -Bbuild_shared &&
# ## fix execution of Python scripts
# #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|glib-genmarshal\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
# ## fix missing link libraries
# #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lws2_32/" build_win/build.ninja &&
# #wl-showstatus build &&
# #ninja -Cbuild_static &&
# #wl-showstatus build &&
# #ninja -Cbuild_shared &&
# wl-showstatus build-install &&
# ninja -Cbuild_static install/strip &&
# wl-showstatus build-install &&
# ninja -Cbuild_shared install/strip &&
#    echo OK

#-DCMAKE_BUILD_TYPE:STRING=MinSizeRel

#export BUILDDEPENDENCIES=meson,ninja
#export OPTIONALBUILDDEPENDENCIES=
#-Dc_args=$CFLAGS -Dcpp_args=$CXXFLAGS -Dc_link_args=$LDFLAGS
## fix missing gio-unix
#sed -i.bak -e "s/gio-unix-/gio-/" meson.build
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library static -D documentation=true . build_static &&
# wl-showstatus configure &&
# PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library shared -D documentation=true . build_shared &&
# ## fix slash/backslash path issue when calling Python from Ninja
# #sed -i.bak -e "s/join_paths/os.path.join/g; /COMMAND =.*python\.exe/ s?\"/\([a-zA-Z]\)/?\"\1:/?; /COMMAND =.*python\.exe/ s?/?\\\\?g" build_*/build.ninja &&
# ## add linker flag
# #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*-ladvapi32/& -Wl,--as-needed/" build_shared/build.ninja &&
# wl-showstatus build-install &&
# #PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib ninja -C build_static install &&
# PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib ninja -C build_static install/strip &&
# wl-showstatus build-install &&
# #PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib ninja -C build_shared install &&
# PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib ninja -C build_shared install/strip &&
#    echo OK && find . -name '*.a'

#export BUILDDEPENDENCIES=meson,ninja
#export OPTIONALBUILDDEPENDENCIES=
#-Dc_args=$CFLAGS -Dcpp_args=$CXXFLAGS -Dc_link_args=$LDFLAGS
## fix location of Perl
#sed -i.bak -e "s?'perl'?'$(cygpath -w $PERLDIR/bin/perl.exe|sed -e 's/\\/&&&&/g')'?" meson.build
## fix detection of Python
#sed -i.bak -e "s?'python3'?'$(cygpath -w $PYDIR/python.exe|sed -e 's/\\/&&&&/g')'?" meson.build
## fix missing gio-unix
##sed -i.bak -e "s/gio-unix-/gio-/" meson.build
#sed -i.bak -e "s/gio-unix-/gio-windows-/" meson.build
#mkdir -p build_both &&
# wl-showstatus configure &&
# PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Ddocumentation=true . build_both &&
# ## fix slash/backslash path issue when calling Python from Ninja
# #sed -i.bak -e "s/join_paths/os.path.join/g; /COMMAND =.*python\.exe/ s?\"/\([a-zA-Z]\)/?\"\1:/?; /COMMAND =.*python\.exe/ s?/?\\\\?g" build_*/build.ninja &&
# ## fix Python path issues in meson_exe
# #sed -i.bak -e "s?$PYDIR?$(echo $PYDIR|sed -e "s?^/\([a-zA-Z]\)/?\1:/?")?" build_both/meson-private/meson_exe_python.exe_*.dat &&
# ## fix execution of Python scripts
# #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *= *\| *=.*\&\& *\)\(\"\{0,1\}[^ ]*\)\(\.py\|glib-mkenums\|g-ir-scanner\|asciidoc\)\(\"\{0,1\} \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_both/build.ninja &&
# ## fix executing shell scripts
# #sed -i.bak -e "s?^\(\s*COMMAND\s*=\s*\)\(\"[^\"]*\.sh\"\)?\1\"$(cygpath -m $(which sh.exe))\" \2?" build_both/build.ninja &&
# wl-showstatus build-install &&
# PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib ninja -Cbuild_both install/strip &&
# #PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib ninja -Cbuild_both install &&
# #PATH=$PERLDIR/../c/bin:$PERLDIR/bin:$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib ninja -Cbuild_both install &&
#    echo OK && find . -name '*.a'

#wl-showstatus install &&
# mkdir -p $INSTALLPREFIX/python/Lib/site-packages &&
# PYTHONPATH=$INSTALLPREFIX/python/Lib/site-packages:$MINGWPREFIX/python/Lib/site-packages $PYDIR/python setup.py install --prefix=$(cygpath.exe -w $INSTALLPREFIX/python) &&
#    echo OK

#export DEPENDENCIES=qt
#wl-showstatus configure &&
# $MINGWPREFIX/qt/bin/qmake -makefile *.pro -spec $MINGWPREFIX/qt/mkspecs/win32-g++ &&
# wl-showstatus build &&
# mingw32-make &&
#    echo OK

#export DEPENDENCIES=qt
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cd build_static &&
# $MINGWPREFIX/qt/bin/qmake -makefile ../*.pro -spec $MINGWPREFIX/qt/mkspecs/win32-g++ CONFIG+=staticlib &&
# cd .. &&
# wl-showstatus configure &&
# cd build_shared &&
# $MINGWPREFIX/qt/bin/qmake -makefile ../*.pro -spec $MINGWPREFIX/qt/mkspecs/win32-g++ &&
# cd .. &&
# wl-showstatus build &&
# mingw32-make -Cbuild_static &&
# wl-showstatus build &&
# mingw32-make -Cbuild_shared &&
#    echo OK

#mkdir -p $INSTALLPREFIX/python/Lib/site-packages
#wl-showstatus build-install &&
# PATH=$PYDIR:$PATH PYTHON=$PYDIR/python.exe PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/python/Lib/site-packages:$INSTALLPREFIX/python:$PYDIR/Lib/site-packages:$INSTALLPREFIX/python/Lib/site-packages $PYDIR/python.exe setup.py install --prefix=$(cygpath -w $INSTALLPREFIX/python) &&
#    echo OK

# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




export NAME="Vera++"
export STATUS=
export URL=https://github.com/verateam/vera
export BASENAME=vera
export DESCRIPTION="Vera++ is a programmable tool for verification, analysis and transformation of C++ source code. Vera++ is mainly an engine that parses C++ source files and presents the result of this parsing to scripts in the form of various collections - the scripts are actually performing the requested tasks."
export CATEGORY=development
export TYPE=application
export VERSION=1.3.0
export VERSIONDATE=
wl-showstatus --package-version
export DEPENDENCIES=boost
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE_1_0.txt
export LICENSETYPE="Boost Software License"
export DOWNLOADURL="https://github.com/verateam/vera/tags"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/verateam/vera/archive/refs/tags/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd $BASENAME-$VERSION

#mkdir -p build_test && cmake.exe -Wno-dev -G"MSYS Makefiles" -DVERA_USE_SYSTEM_LUA:BOOL=OFF -DVERA_USE_SYSTEM_PYTHON:BOOL=ON -DVERA_PYTHON:BOOL=OFF -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DPython_INCLUDE_DIRS:PATH=$PYDIR/include -DPython_LIBRARIES:STRING= -DTCL_LIBRARY:STRING=$(. tclConfig.sh && echo $TCL_LIB_FLAG) -DTK_LIBRARY:STRING=$(. tkConfig.sh && echo $TK_LIB_FLAG) -S. -Bbuild_test -LH && echo OK; rm -rf build_test

#export BUILDDEPENDENCIES=cmake
#PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ 
#PATH=$PATH:$MINGWPREFIX/qt6/bin QTDIR=$MINGWPREFIX/qt6 QMAKESPEC=$MINGWPREFIX/qt6/mkspecs/win32-g++ 
#-DCMAKE_SYSTEM_NAME=Windows 
#-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
#mkdir -p build_win &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -S. -Bbuild_win &&
# #wl-showstatus build &&
# #cmake.exe --build build_win &&
# #make -Cbuild_win &&
# wl-showstatus build-install &&
# make -Cbuild_win install/strip &&
#    echo OK

#export BUILDDEPENDENCIES=cmake,ninja
#PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ 
#-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
mkdir -p build_win &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DVERA_LUA:BOOL=OFF -DVERA_USE_SYSTEM_LUA:BOOL=OFF -DVERA_PYTHON:BOOL=OFF -DVERA_USE_SYSTEM_PYTHON:BOOL=ON -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DPython_INCLUDE_DIRS:PATH=$PYDIR/include -DPython_LIBRARIES:STRING= -DTCL_LIBRARY:STRING=$(. tclConfig.sh && echo $TCL_LIB_FLAG) -DTK_LIBRARY:STRING=$(. tkConfig.sh && echo $TK_LIB_FLAG) -S. -Bbuild_win &&
 wl-showstatus build &&
 ninja -Cbuild_win &&
 wl-showstatus build-install &&
 ninja -Cbuild_win install/strip &&
    echo OK
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




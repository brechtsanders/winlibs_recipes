export NAME="clang"
export STATUS=
#export URL=http://llvm.org/
export URL=http://clang.llvm.org/
export BASENAME=clang
export DESCRIPTION="Clang is an \"LLVM native\" C/C++/Objective-C compiler, which aims to deliver amazingly fast compiles."
export CATEGORY=development
export TYPE=application
#export VERSION=3.4
#export VERSIONDATE=20140108
#export VERSION=3.4.1
#export VERSIONDATE=20140508
#export VERSION=3.4.2
#export VERSIONDATE=20140616
#export VERSION=3.5.0
#export VERSIONDATE=20140904
#export VERSION=3.5.1
#export VERSIONDATE=20150113
#export VERSION=3.5.2
#export VERSIONDATE=20150403
#export VERSION=3.6.0
#export VERSIONDATE=20150228
#export VERSION=3.6.1
#export VERSIONDATE=20150525
#export VERSION=3.6.2
#export VERSIONDATE=20150714
#export VERSION=3.7.0
#export VERSIONDATE=20150902
#export VERSION=3.7.1
#export VERSIONDATE=20160105
#export VERSION=3.8.0
#export VERSIONDATE=20160309
#export VERSION=3.8.1
#export VERSIONDATE=20160711
#export VERSION=3.9.0
#export VERSIONDATE=20160905
#export VERSION=3.9.1
#export VERSIONDATE=20161218
#export VERSION=4.0.0
#export VERSIONDATE=20170314
#export VERSION=4.0.1
#export VERSIONDATE=20170625
#export DEPENDENCIES=llvm,libxml2
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=cmake
#export OPTIONALBUILDDEPENDENCIES=
#export VERSION=5.0.0
#export VERSIONDATE=20170909
#export VERSION=5.0.1
#export VERSIONDATE=20171220
#export VERSION=5.0.2
#export VERSIONDATE=20180703
#export VERSION=6.0.0
#export VERSIONDATE=20180318
#export VERSION=6.0.1
#export VERSIONDATE=20180703
#export VERSION=7.0.0
#export VERSIONDATE=20181029
#export VERSION=7.0.1
#export VERSIONDATE=20181230
#export VERSION=7.1.0
#export VERSIONDATE=20190502
#export VERSION=8.0.0
#export VERSIONDATE=20190401
#export VERSION=8.0.1
#export VERSIONDATE=20190818
#export VERSION=9.0.0
#export VERSIONDATE=20190930
#export VERSION=9.0.1
#export VERSIONDATE=20200224
####cannot find ../../lib/libclangASTMatchers.a: Too many open files
#export VERSION=10.0.0
#export VERSIONDATE=20200326
#export VERSION=10.0.1
#export VERSIONDATE=20200804
#export VERSION=11.0.0
#export VERSIONDATE=20201012
export VERSION=11.1.0
export VERSIONDATE=20210408
#export VERSION=12.0.0
#export VERSIONDATE=20210419
#export VERSION=13.0.0
#export VERSIONDATE=20211212
#export VERSION=13.0.1
#export VERSIONDATE=20220214
#export VERSION=18.1.6
#export VERSIONDATE=20240519
wl-showstatus --package-version
#export DEPENDENCIES=llvm,lld,libxml2,z3
export DEPENDENCIES=llvm,lld,libxml2,z3,protobuf
#export DEPENDENCIES=llvm,lld,libxml2,z3,protobuf,libprotobuf-mutator
export OPTIONALDEPENDENCIES=libunwind
#export BUILDDEPENDENCIES=cmake
#export OPTIONALBUILDDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE.TXT
export LICENSETYPE=
#export DOWNLOADURL="http://llvm.org/releases/download.html clang- .src.tar.gz"
#export DOWNLOADURL="http://llvm.org/releases/download.html cfe- .src.tar.gz"
#export DOWNLOADURL="http://llvm.org/releases/download.html cfe- .src.tar.xz"
#export DOWNLOADURL="http://llvm.org/releases/download.html clang- .src.tar.xz"
export DOWNLOADURL="https://github.com/llvm/llvm-project/releases clang- .src.tar.xz"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://llvm.org/releases/$(echo $VERSION|sed -e "s/^\([0-9]*\.[0-9]*\)\.*$/\1/")/$BASENAME-$VERSION.src.tar.gz
#export DOWNLOADSOURCEURL=http://llvm.org/releases/$(echo $VERSION|sed -e "s/^\([0-9]*\.[0-9]*\)\.*$/\1/")/cfe-$VERSION.src.tar.gz
#export DOWNLOADSOURCEURL=http://llvm.org/releases/$(echo $VERSION|sed -e "s/^\([0-9]*\.[0-9]*\)\.*$/\1/")/cfe-$VERSION.src.tar.xz
#export DOWNLOADSOURCEURL=https://github.com/llvm/llvm-project/releases/download/llvmorg-$VERSION/cfe-$VERSION.src.tar.xz
export DOWNLOADSOURCEURL=https://github.com/llvm/llvm-project/releases/download/llvmorg-$VERSION/$BASENAME-$VERSION.src.tar.xz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
#tar xz --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.src.tar.gz
#tar xz --force-local -f $TARBALLDIR/$BASENAME/cfe-$VERSION.src.tar.gz
#tar xJ --force-local -f $TARBALLDIR/$BASENAME/cfe-$VERSION.src.tar.xz
tar xJ --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.src.tar.xz
#cd $BASENAME-$VERSION
#cd cfe-$VERSION.src
cd $BASENAME-$VERSION.src
# fix missing off_t in tools/c-index-test/c-index-test.c (version >= 3.4.1)
mv tools/c-index-test/c-index-test.c tools/c-index-test/c-index-test.c.bak &&
echo "#undef __STRICT_ANSI__" > tools/c-index-test/c-index-test.c &&
cat tools/c-index-test/c-index-test.c.bak >> tools/c-index-test/c-index-test.c
## fix missing KEY_WOW64_32KEY in lib/Driver/MSVCToolChain.cpp (version >= 3.6.1 <= 4.0.1)
#mv lib/Driver/MSVCToolChain.cpp lib/Driver/MSVCToolChain.cpp.bak &&
#echo "#define _WIN32_WINNT 0x0502" > lib/Driver/MSVCToolChain.cpp &&
#cat lib/Driver/MSVCToolChain.cpp.bak >> lib/Driver/MSVCToolChain.cpp
# fix tools/clang-fuzzer/ExampleClangLoopProtoFuzzer.cpp (version >= 10.0.0)
patch -ulbf tools/clang-fuzzer/ExampleClangLoopProtoFuzzer.cpp << EOF
@@ -27,3 +27,3 @@
   auto S = LoopFunctionToString(input);
-  HandleCXX(S, GetCLArgs());
+  HandleCXX(S, "./test.cc", GetCLArgs());
 }
EOF
# fix llvm detection (version >= 3.7.1)
sed -i.bak -e "s?/share/llvm/cmake?/lib/cmake/llvm?" CMakeLists.txt
# fix also building static library tools/libclang/CMakeLists.txt (version >= 10.0.0)
patch -ulbf tools/libclang/CMakeLists.txt << EOF
@@ -83,3 +83,3 @@

-if((NOT LLVM_ENABLE_PIC OR LIBCLANG_BUILD_STATIC) AND NOT WIN32)
+if((NOT LLVM_ENABLE_PIC OR LIBCLANG_BUILD_STATIC) AND NOT MSVC)
   set(ENABLE_STATIC STATIC)
@@ -87,3 +87,3 @@

-if(WIN32)
+if(MSVC)
   set(output_name "libclang")
EOF
# fix examples/Attribute/CMakeLists.txt (version >= 11.0.0)
patch -ulbf examples/Attribute/CMakeLists.txt << EOF
@@ -2,3 +2,3 @@

-if(LLVM_ENABLE_PLUGINS AND (WIN32 OR CYGWIN))
+if(LLVM_ENABLE_PLUGINS AND (MSVC OR CYGWIN))
   target_link_libraries(Attribute \${cmake_2_8_12_PRIVATE}
EOF
#mkdir -p build &&
# wl-showstatus configure &&
# #cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DLIBCLANG_BUILD_STATIC:BOOL=OFF -DCLANG_INCLUDE_DOCS:BOOL=OFF -DCLANG_PATH_TO_LLVM_BUILD:PATH=$MINGWPREFIX -DLLVM_MAIN_SRC_DIR:PATH=$MINGWPREFIX -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -S. -Bbuild &&
# #cmake.exe -Wno-dev -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DLIBCLANG_BUILD_STATIC:BOOL=OFF -DLLVM_ENABLE_EH:BOOL=OFF -DCLANG_INCLUDE_DOCS:BOOL=OFF -DBUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF -DCLANG_BUILD_EXAMPLES:BOOL=OFF -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -S. -Bbuild &&
# #cmake.exe -Wno-dev -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DLIBCLANG_BUILD_STATIC:BOOL=ON -DLLVM_ENABLE_EH:BOOL=OFF -DCLANG_BUILD_TOOLS:BOOL=ON -DCLANG_INCLUDE_DOCS:BOOL=OFF -DBUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF -DCLANG_ENABLE_BOOTSTRAP:BOOL=OFF -DCLANG_PLUGIN_SUPPORT:BOOL=ON -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=ON -DCLANG_ANALYZER_ENABLE_Z3_SOLVER:BOOL=ON -DCLANG_ANALYZER_Z3_INSTALL_DIR:PATH=$MINGWPREFIX -DCLANG_BUILD_EXAMPLES:BOOL=OFF -DCLANG_INCLUDE_TESTS:BOOL=OFF -DLLVM_BINARY_DIR:PATH=$MINGWPREFIX/bin -DCMAKE_LINKER:FILEPATH=$MINGWPREFIX/bin/lld-link.exe -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -S. -Bbuild &&
# #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DLIBCLANG_BUILD_STATIC:BOOL=ON -DLLVM_DIR:PATH=$MINGWPREFIX/share/llvm/lib/cmake/llvm -DCMAKE_LINKER:FILEPATH=$MINGWPREFIX/share/llvm/bin/lld-link.exe -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DCLANG_BUILD_TOOLS:BOOL=ON -DCLANG_INCLUDE_DOCS:BOOL=OFF -DBUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF -DCLANG_ENABLE_BOOTSTRAP:BOOL=OFF -DCLANG_PLUGIN_SUPPORT:BOOL=ON -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=ON -DCLANG_BUILD_EXAMPLES:BOOL=OFF -DCLANG_INCLUDE_TESTS:BOOL=OFF -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -S. -Bbuild &&
# #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS=OFF -DLIBCLANG_BUILD_STATIC:BOOL=ON -DLLVM_TARGETS_TO_BUILD="$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "x86_64"; else echo "X86"; fi)" -DLLVM_ENABLE_PIC:BOOL=ON -DCLANG_ENABLE_BOOTSTRAP:BOOL=OFF -DLLVM_DIR:PATH=$MINGWPREFIX/share/llvm/lib/cmake/llvm -DCMAKE_LINKER:FILEPATH=$MINGWPREFIX/share/llvm/bin/lld-link.exe -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DCLANG_BUILD_TOOLS:BOOL=ON -DCLANG_INCLUDE_DOCS:BOOL=OFF -DBUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF -DCLANG_PLUGIN_SUPPORT:BOOL=ON -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=ON -DCLANG_BUILD_EXAMPLES:BOOL=OFF -DCLANG_INCLUDE_TESTS:BOOL=OFF -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DGCC_INSTALL_PREFIX:PATH=$MINGWDIR -DCMAKE_CXX_FLAGS="-std=c++11" -DCMAKE_EXE_LINKER_FLAGS="-Wl,--as-needed -static-libgcc -static-libstdc++ -static -lstdc++" -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -S. -Bbuild &&
# #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS=ON -DLIBCLANG_BUILD_STATIC:BOOL=OFF -DLLVM_TARGETS_TO_BUILD="$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "x86_64"; else echo "X86"; fi)" -DLLVM_ENABLE_PIC:BOOL=ON -DCLANG_ENABLE_BOOTSTRAP:BOOL=OFF -DLLVM_DIR:PATH=$MINGWPREFIX/share/llvm/lib/cmake/llvm -DCMAKE_LINKER:FILEPATH=$MINGWPREFIX/share/llvm/bin/lld-link.exe -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DCLANG_BUILD_TOOLS:BOOL=ON -DCLANG_INCLUDE_DOCS:BOOL=OFF -DBUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF -DCLANG_PLUGIN_SUPPORT:BOOL=ON -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=ON -DCLANG_BUILD_EXAMPLES:BOOL=OFF -DCLANG_INCLUDE_TESTS:BOOL=OFF -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DGCC_INSTALL_PREFIX:PATH=$MINGWDIR -DCMAKE_CXX_FLAGS="-std=c++11" -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -S. -Bbuild &&
# #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DLIBCLANG_BUILD_STATIC:BOOL=OFF -DLLVM_ENABLE_PIC:BOOL=ON -DCLANG_ENABLE_BOOTSTRAP:BOOL=OFF -DLLVM_DIR:PATH=$MINGWPREFIX/share/llvm/lib/cmake/llvm -DCMAKE_LINKER:FILEPATH=$MINGWPREFIX/share/llvm/bin/lld-link.exe -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DCLANG_BUILD_TOOLS:BOOL=ON -DCLANG_INCLUDE_DOCS:BOOL=OFF -DBUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF -DCLANG_PLUGIN_SUPPORT:BOOL=ON -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=ON -DCLANG_BUILD_EXAMPLES:BOOL=OFF -DCLANG_INCLUDE_TESTS:BOOL=OFF -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -S. -Bbuild &&
# #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DLIBCLANG_BUILD_STATIC:BOOL=OFF -DLLVM_ENABLE_PIC:BOOL=ON -DCLANG_ENABLE_BOOTSTRAP:BOOL=OFF -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF -DLLVM_DIR:PATH=$MINGWPREFIX/share/llvm/lib/cmake/llvm -DCMAKE_LINKER:FILEPATH=$MINGWPREFIX/share/llvm/bin/lld-link.exe -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DCLANG_BUILD_TOOLS:BOOL=ON -DCLANG_INCLUDE_DOCS:BOOL=OFF -DBUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF -DCLANG_PLUGIN_SUPPORT:BOOL=ON -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=ON -DCLANG_BUILD_EXAMPLES:BOOL=OFF -DCLANG_INCLUDE_TESTS:BOOL=OFF -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DCLANG_DEFAULT_RTLIB:STRING="libgcc" -DCLANG_DEFAULT_CXX_STDLIB:STRING="libstdc++" -S. -Bbuild &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DCLANG_VENDOR:STRING="Brecht Sanders" -DLIBCLANG_BUILD_STATIC:BOOL=ON -DLLVM_ENABLE_PIC:BOOL=ON -DCLANG_ENABLE_BOOTSTRAP:BOOL=OFF -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF -DLLVM_DIR:PATH=$MINGWPREFIX/share/llvm/lib/cmake/llvm -DCMAKE_LINKER:FILEPATH=$MINGWPREFIX/share/llvm/bin/lld-link.exe -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DCLANG_BUILD_TOOLS:BOOL=ON -DCLANG_INCLUDE_DOCS:BOOL=OFF -DBUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF -DCLANG_PLUGIN_SUPPORT:BOOL=ON -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=ON -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF CLANG_ENABLE_STATIC_ANALYZER:BOOL=ON -DCLANG_BUILD_EXAMPLES:BOOL=OFF -DCLANG_INCLUDE_TESTS:BOOL=OFF -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DCLANG_DEFAULT_RTLIB:STRING="libgcc" -DCLANG_DEFAULT_CXX_STDLIB:STRING="libstdc++" -S. -Bbuild &&
# #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DLIBCLANG_BUILD_STATIC:BOOL=OFF -DLLVM_ENABLE_PIC:BOOL=ON -DCLANG_ENABLE_BOOTSTRAP:BOOL=OFF -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF -DLLVM_DIR:PATH=$MINGWPREFIX/share/llvm/lib/cmake/llvm -DCMAKE_LINKER:FILEPATH=$MINGWPREFIX/share/llvm/bin/lld-link.exe -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DCLANG_BUILD_TOOLS:BOOL=ON -DLLVM_TOOL_CLANG_TOOLS_EXTRA_BUILD:BOOL=ON -DCLANG_INCLUDE_DOCS:BOOL=OFF -DBUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF -DCLANG_PLUGIN_SUPPORT:BOOL=ON -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=ON -DCLANG_BUILD_EXAMPLES:BOOL=OFF -DCLANG_INCLUDE_TESTS:BOOL=OFF -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DCLANG_DEFAULT_RTLIB:STRING="libgcc" -DCLANG_DEFAULT_CXX_STDLIB:STRING="libstdc++" -S. -Bbuild &&
# #-DCLANG_ENABLE_PROTO_FUZZER:BOOL=ON
# #-DLLVM_TOOL_CLANG_TOOLS_EXTRA_BUILD:BOOL=ON
# #-DCLANG_VENDOR:STRING="Brecht Sanders" 
# #-DCMAKE_EXE_LINKER_FLAGS="-static-libgcc -static-libstdc++" 
# #-DLLVM_TARGETS_TO_BUILD="X86;x86_64"
# #-DCLANG_ENABLE_BOOTSTRAP:BOOL=ON
# #-DLLVM_FORCE_USE_OLD_HOST_TOOLCHAIN:BOOL=ON
# #-DLLVM_ENABLE_LTO:STRING=Full 
# ## fix python issue (version >= 3.7.0)
# #mv tools/libclang/CMakeFiles/libclang_exports.dir/build.make tools/libclang/CMakeFiles/libclang_exports.dir/build.make.bak &&
# #sed -e "s?\(&&\) \(-c\)?\1 $PYDIR/python.exe \2?" tools/libclang/CMakeFiles/libclang_exports.dir/build.make.bak > tools/libclang/CMakeFiles/libclang_exports.dir/build.make &&
# ## fix already defined interface in include/clang/AST/Attrs.inc (version >= 3.7.0)
# #mv include/clang/AST/Attrs.inc include/clang/AST/Attrs.inc.bak
# #sed -e "s/interface/iface/g" include/clang/AST/Attrs.inc.bak > include/clang/AST/Attrs.inc
# ## fix missing libclang-cpp
# #sed -i.bak -e "s/-lclang-cpp //g" build.ninja &&
# #wl-showstatus build &&
# #make -Cbuild clang-tblgen &&
# #make -Cbuild &&
# ## fix issue where installation folder was created as file instead (version >= 3.6.2)
# #mkdir -p $INSTALLPREFIX &&
# #wl-showstatus build-install &&
# #( make -Cbuild install/strip || make -j1 -Cbuild install/strip ) &&
# wl-showstatus build-install &&
# #ninja -Cbuild install/strip &&
# ( ninja -Cbuild install/strip || ( rm -f build/.ninja_deps; ninja -j1 -Cbuild install/strip )) &&
# # manually install CMake files
# mkdir -p $INSTALLPREFIX/share/llvm/lib/cmake/modules &&
# cp -f cmake/modules/* $INSTALLPREFIX/share/llvm/lib/cmake/modules/ &&
# cp -u build/lib/libclang.a $INSTALLPREFIX/share/llvm/lib/ &&
# #wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && rm -rf $BASENAME-$VERSION
# #wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && rm -rf cfe-$VERSION.src
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && rm -rf $BASENAME-$VERSION.src
mkdir -p build_static build_shared &&
 wl-showstatus configure &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DLIBCLANG_BUILD_STATIC:BOOL=ON -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF -DCLANG_VENDOR:STRING="(built by Brecht Sanders)" -DCLANG_ENABLE_BOOTSTRAP:BOOL=OFF -DLLVM_DIR:PATH=$MINGWPREFIX/share/llvm/lib/cmake/llvm -DCMAKE_LINKER:FILEPATH=$MINGWPREFIX/share/llvm/bin/lld-link.exe -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DCLANG_BUILD_TOOLS:BOOL=ON -DBUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF -DCLANG_PLUGIN_SUPPORT:BOOL=ON -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=ON -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON -DCLANG_DEFAULT_RTLIB:STRING="libgcc" -DCLANG_DEFAULT_CXX_STDLIB:STRING="libstdc++" -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DCLANG_INCLUDE_DOCS:BOOL=OFF -DCLANG_BUILD_EXAMPLES:BOOL=OFF -DCLANG_INCLUDE_TESTS:BOOL=OFF -S. -Bbuild_static &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DLIBCLANG_BUILD_STATIC:BOOL=ON -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF -DCLANG_VENDOR:STRING="(built by Brecht Sanders)" -DCLANG_ENABLE_BOOTSTRAP:BOOL=OFF -DLLVM_DIR:PATH=$MINGWPREFIX/share/llvm/lib/cmake/llvm -DCMAKE_LINKER:FILEPATH=$MINGWPREFIX/share/llvm/bin/lld-link.exe -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DCLANG_BUILD_TOOLS:BOOL=ON -DBUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF -DCLANG_PLUGIN_SUPPORT:BOOL=ON -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=ON -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON -DCLANG_DEFAULT_RTLIB:STRING="libgcc" -DCLANG_DEFAULT_CXX_STDLIB:STRING="libstdc++" -DCLANG_DEFAULT_OPENMP_RUNTIME:STRING=libgomp -DPython2_EXECUTABLE:PATH=$PY2DIR/python.exe -DPython3_EXECUTABLE:PATH=$PYDIR/python.exe -DCLANG_INCLUDE_DOCS:BOOL=OFF -DCLANG_BUILD_EXAMPLES:BOOL=OFF -DCLANG_INCLUDE_TESTS:BOOL=OFF -S. -Bbuild_static &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DLIBCLANG_BUILD_STATIC:BOOL=ON -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF -DCLANG_VENDOR:STRING="(built by Brecht Sanders)" -DCLANG_ENABLE_BOOTSTRAP:BOOL=OFF -DLLVM_DIR:PATH=$MINGWPREFIX/share/llvm/lib/cmake/llvm -DCMAKE_LINKER:FILEPATH=$MINGWPREFIX/share/llvm/bin/lld-link.exe -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DCLANG_BUILD_TOOLS:BOOL=ON -DBUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF -DCLANG_PLUGIN_SUPPORT:BOOL=ON -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=ON -DCLANG_ENABLE_PROTO_FUZZER:BOOL=ON -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON -DCLANG_DEFAULT_RTLIB:STRING="libgcc" -DCLANG_DEFAULT_CXX_STDLIB:STRING="libstdc++" -DCLANG_DEFAULT_OPENMP_RUNTIME:STRING=libgomp -DPython2_EXECUTABLE:PATH=$PY2DIR/python.exe -DPython3_EXECUTABLE:PATH=$PYDIR/python.exe -DCLANG_INCLUDE_DOCS:BOOL=OFF -DCLANG_BUILD_EXAMPLES:BOOL=OFF -DCLANG_INCLUDE_TESTS:BOOL=OFF -S. -Bbuild_static &&
 #sed -i.bak -e "s/-Werror -Wall//" build_static/tools/clang-fuzzer/protobuf_mutator/src/protobuf_mutator-build/build.ninja &&
 #-DLLVM_ENABLE_PIC:BOOL=ON  
 #-DLLVM_TOOL_CLANG_TOOLS_EXTRA_BUILD:BOOL=ON 
 #-DLLVM_ENABLE_LTO:STRING=Thin
 #-DLLVM_ENABLE_LTO:STRING=Full
 #-DCLANG_DEFAULT_OPENMP_RUNTIME:STRING=libgomp
 #-DCLANG_ENABLE_PROTO_FUZZER:BOOL=ON
 wl-showstatus configure &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DLIBCLANG_BUILD_STATIC:BOOL=OFF -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF -DCLANG_VENDOR:STRING="(built by Brecht Sanders)" -DCLANG_ENABLE_BOOTSTRAP:BOOL=OFF -DLLVM_DIR:PATH=$MINGWPREFIX/share/llvm/lib/cmake/llvm -DCMAKE_LINKER:FILEPATH=$MINGWPREFIX/share/llvm/bin/lld-link.exe -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DCLANG_BUILD_TOOLS:BOOL=ON -DBUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF -DCLANG_PLUGIN_SUPPORT:BOOL=ON -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=ON -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON -DCLANG_DEFAULT_RTLIB:STRING="libgcc" -DCLANG_DEFAULT_CXX_STDLIB:STRING="libstdc++" -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DCLANG_INCLUDE_DOCS:BOOL=OFF -DCLANG_BUILD_EXAMPLES:BOOL=OFF -DCLANG_INCLUDE_TESTS:BOOL=OFF -DCMAKE_EXE_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition" -S. -Bbuild_shared &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DLIBCLANG_BUILD_STATIC:BOOL=OFF -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF -DCLANG_VENDOR:STRING="(built by Brecht Sanders)" -DCLANG_ENABLE_BOOTSTRAP:BOOL=OFF -DLLVM_DIR:PATH=$MINGWPREFIX/share/llvm/lib/cmake/llvm -DCMAKE_LINKER:FILEPATH=$MINGWPREFIX/share/llvm/bin/lld-link.exe -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DCLANG_BUILD_TOOLS:BOOL=ON -DBUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF -DCLANG_PLUGIN_SUPPORT:BOOL=ON -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=ON -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON -DCLANG_DEFAULT_RTLIB:STRING="libgcc" -DCLANG_DEFAULT_CXX_STDLIB:STRING="libstdc++" -DCLANG_DEFAULT_OPENMP_RUNTIME:STRING=libgomp -DPython2_EXECUTABLE:PATH=$PY2DIR/python.exe -DPython3_EXECUTABLE:PATH=$PYDIR/python.exe -DCLANG_INCLUDE_DOCS:BOOL=OFF -DCLANG_BUILD_EXAMPLES:BOOL=OFF -DCLANG_INCLUDE_TESTS:BOOL=OFF -DCMAKE_EXE_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition" -S. -Bbuild_shared &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DLIBCLANG_BUILD_STATIC:BOOL=OFF -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF -DCLANG_VENDOR:STRING="(built by Brecht Sanders)" -DCLANG_ENABLE_BOOTSTRAP:BOOL=OFF -DLLVM_DIR:PATH=$MINGWPREFIX/share/llvm/lib/cmake/llvm -DCMAKE_LINKER:FILEPATH=$MINGWPREFIX/share/llvm/bin/lld-link.exe -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DCLANG_BUILD_TOOLS:BOOL=ON -DBUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF -DCLANG_PLUGIN_SUPPORT:BOOL=ON -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=ON -DCLANG_ENABLE_PROTO_FUZZER:BOOL=ON -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON -DCLANG_DEFAULT_RTLIB:STRING="libgcc" -DCLANG_DEFAULT_CXX_STDLIB:STRING="libstdc++" -DCLANG_DEFAULT_OPENMP_RUNTIME:STRING=libgomp -DPython2_EXECUTABLE:PATH=$PY2DIR/python.exe -DPython3_EXECUTABLE:PATH=$PYDIR/python.exe -DCLANG_INCLUDE_DOCS:BOOL=OFF -DCLANG_BUILD_EXAMPLES:BOOL=OFF -DCLANG_INCLUDE_TESTS:BOOL=OFF -DCMAKE_EXE_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition" -S. -Bbuild_shared &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DLIBCLANG_BUILD_STATIC:BOOL=ON -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF -DCLANG_VENDOR:STRING="(built by Brecht Sanders)" -DCLANG_ENABLE_BOOTSTRAP:BOOL=OFF -DLLVM_DIR:PATH=$MINGWPREFIX/share/llvm/lib/cmake/llvm -DCMAKE_LINKER:FILEPATH=$MINGWPREFIX/share/llvm/bin/lld-link.exe -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DCLANG_BUILD_TOOLS:BOOL=ON -DBUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF -DCLANG_PLUGIN_SUPPORT:BOOL=ON -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=ON -DCLANG_ENABLE_PROTO_FUZZER:BOOL=ON -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON -DCLANG_DEFAULT_RTLIB:STRING="libgcc" -DCLANG_DEFAULT_CXX_STDLIB:STRING="libstdc++" -DCLANG_DEFAULT_OPENMP_RUNTIME:STRING="libgomp" -DPython2_EXECUTABLE:PATH=$PY2DIR/python.exe -DPython3_EXECUTABLE:PATH=$PYDIR/python.exe -DCLANG_INCLUDE_DOCS:BOOL=OFF -DCLANG_BUILD_EXAMPLES:BOOL=OFF -DCLANG_INCLUDE_TESTS:BOOL=OFF -S. -Bbuild_win &&
 #sed -i.bak -e "s/-Werror -Wall//" build_win/tools/clang-fuzzer/protobuf_mutator/src/protobuf_mutator-build/build.ninja &&
 # fix linker error: export ordinal too large
 sed -i.bak -e "s/-Wl,--export-all-symbols/-Wl,--allow-multiple-definition/" build_*/build.ninja &&
 wl-showstatus build-install &&
 ninja -Cbuild_static install/strip &&
 #cp -u build_static/lib/libclang.a $INSTALLPREFIX/share/llvm/lib/ &&
 wl-showstatus build-install &&
 ninja -Cbuild_shared install/strip &&
 # manually install CMake files
 mkdir -p $INSTALLPREFIX/share/llvm/lib/cmake/modules &&
 cp -f cmake/modules/* $INSTALLPREFIX/share/llvm/lib/cmake/modules/ &&
    echo OK
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION.src
####See also: http://www.bencode.net/blog/2012/10/20/clangonwindows/
####$MINGWPREFIX/share/llvm/bin/clang.exe --version
####TO DO: libfuzzer https://llvm.org/docs/LibFuzzer.html
####TO DO: also install cmake/modules/AddClang.cmake
####NOTE: building both static and shared caused this error:
####        CommandLine Error: Option disable-symbolication registered more than once!
####        LLVM ERROR: inconsistency in registered CommandLine options"
####Superseded by llvm-project all-in-one build




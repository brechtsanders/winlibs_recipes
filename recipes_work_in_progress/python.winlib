export NAME="Python"
export STATUS=
export URL=http://www.python.org/
export BASENAME=python
export DESCRIPTION="Python is a programming language that lets you work more quickly and integrate your systems more effectively."
export CATEGORY=development
export TYPE=application
#export VERSION=2.6.7
#export VERSIONDATE=20111125
#export VERSION=2.6.8
#export VERSIONDATE=20130116
#export VERSION=2.6.9
#export VERSIONDATE=20131029
#export VERSION=2.7.2
#export VERSIONDATE=20111125
#export VERSION=2.7.3
#export VERSIONDATE=20120225
#export VERSION=2.7.4
#export VERSIONDATE=20130406
#export VERSION=2.7.5
#export VERSIONDATE=20130512
#export VERSION=2.7.6
#export VERSIONDATE=20131110
#export VERSION=2.7.7
#export VERSIONDATE=20140605
#export VERSION=2.7.8
#export VERSIONDATE=20140703
#export VERSION=2.7.9
#export VERSIONDATE=20141212
#export VERSION=2.7.10
#export VERSIONDATE=20150530
#export VERSION=2.7.11
#export VERSIONDATE=20151207
#export VERSION=2.7.12
#export VERSIONDATE=20160626
#export VERSION=2.7.13
#export VERSIONDATE=20161220
#export VERSION=2.7.14
#export VERSIONDATE=20170917
#export VERSION=2.7.15
#export VERSIONDATE=20180501
#export VERSION=2.7.16
#export VERSIONDATE=20190304
#export VERSION=2.7.17
#export VERSIONDATE=20191020
export VERSION=2.7.18
export VERSIONDATE=20200421
####Objects/exceptions.c:2057:42: error: '_PyExc_WindowsError' undeclared (first use in this function)
#export VERSION=3.1.5
#export VERSIONDATE=20120225
#export VERSION=3.2.2
#export VERSIONDATE=20111125
#export VERSION=3.2.3
#export VERSIONDATE=20120224
#export VERSION=3.2.4
#export VERSIONDATE=20130406
#export VERSION=3.2.5
#export VERSIONDATE=20130516
#export VERSION=3.2.6
#export VERSIONDATE=20141017
#export VERSION=3.3.0
#export VERSIONDATE=20130116
#export VERSION=3.3.1
#export VERSIONDATE=20130406
#export VERSION=3.3.2
#export VERSIONDATE=20130516
#export VERSION=3.3.3
#export VERSIONDATE=20131117
#export VERSION=3.3.4
#export VERSIONDATE=20140209
#export VERSION=3.3.5
#export VERSIONDATE=20140309
#export VERSION=3.3.6
#export VERSIONDATE=20141014
#export VERSION=3.3.7
#export VERSIONDATE=20170919
#export VERSION=3.4.0
#export VERSIONDATE=20140317
#export VERSION=3.4.1
#export VERSIONDATE=20140521
#export VERSION=3.4.2
#export VERSIONDATE=20141011
#export VERSION=3.4.3
#export VERSIONDATE=20150304
#export VERSION=3.4.4
#export VERSIONDATE=20151222
#export VERSION=3.4.5
#export VERSIONDATE=20160628
#export VERSION=3.4.6
#export VERSIONDATE=20170119
#export VERSION=3.4.7
#export VERSIONDATE=20170816
#export VERSION=3.4.8
#export VERSIONDATE=20180205
#export VERSION=3.4.9
#export VERSIONDATE=20180802
#export VERSION=3.4.10
#export VERSIONDATE=20190319
#export VERSION=3.5.0
#export VERSIONDATE=20150918
#export VERSION=3.5.1
#export VERSIONDATE=20151207
#export VERSION=3.5.2
#export VERSIONDATE=20160630
#export VERSION=3.5.3
#export VERSIONDATE=20170119
#export VERSION=3.5.4
#export VERSIONDATE=20170816
#export VERSION=3.5.5
#export VERSIONDATE=20180205
#export VERSION=3.5.6
#export VERSIONDATE=20180802
#export VERSION=3.5.7
#export VERSIONDATE=20190319
#export VERSION=3.5.8
#export VERSIONDATE=20191029
#export VERSION=3.5.9
#export VERSIONDATE=20191108
#export VERSION=3.5.10
#export VERSIONDATE=20200906
#export VERSION=3.6.0
#export VERSIONDATE=20161223
#export VERSION=3.6.1
#export VERSIONDATE=20170322
#export VERSION=3.6.2
#export VERSIONDATE=20170717
#export VERSION=3.6.3
#export VERSIONDATE=20171004
#export VERSION=3.6.4
#export VERSIONDATE=20171219
#export VERSION=3.6.5
#export VERSIONDATE=20180329
#export VERSION=3.6.6
#export VERSIONDATE=20180628
#export VERSION=3.6.7
#export VERSIONDATE=20181020
#export VERSION=3.6.8
#export VERSIONDATE=20181224
#export VERSION=3.6.9
#export VERSIONDATE=20190703
#export VERSION=3.6.10
#export VERSIONDATE=20191219
#export VERSION=3.6.11
#export VERSIONDATE=20200627
#export VERSION=3.6.12
#export VERSIONDATE=20200818
#export VERSION=3.6.13
#export VERSIONDATE=20210216
#export VERSION=3.7.0
#export VERSIONDATE=20180628
#export VERSION=3.7.1
#export VERSIONDATE=20181020
#export VERSION=3.7.2
#export VERSIONDATE=20181224
#export VERSION=3.7.3
#export VERSIONDATE=20190326
#export VERSION=3.7.4
#export VERSIONDATE=20190709
#export VERSION=3.7.5
#export VERSIONDATE=20191016
#export VERSION=3.7.6
#export VERSIONDATE=20191219
#export VERSION=3.7.7
#export VERSIONDATE=20200310
#export VERSION=3.7.8
#export VERSIONDATE=20200628
#export VERSION=3.7.9
#export VERSIONDATE=20200818
#export VERSION=3.7.10
#export VERSIONDATE=20210216
#export VERSION=3.8.0
#export VERSIONDATE=20191015
#export VERSION=3.8.1
#export VERSIONDATE=20191219
#export VERSION=3.8.2
#export VERSIONDATE=20200226
#export VERSION=3.8.3
#export VERSIONDATE=20200514
#export VERSION=3.8.4
#export VERSIONDATE=20200714
#export VERSION=3.8.5
#export VERSIONDATE=20200722
#export VERSION=3.8.6
#export VERSIONDATE=20200924
#export VERSION=3.8.7
#export VERSIONDATE=20201222
#export VERSION=3.8.8
#export VERSIONDATE=20210220
#export VERSION=3.8.9
#export VERSIONDATE=20210403
#export VERSION=3.8.10
#export VERSIONDATE=20210504
#export VERSION=3.9.0
#export VERSIONDATE=20201005
#export VERSION=3.9.1
#export VERSIONDATE=20201208
#export VERSION=3.9.2
#export VERSIONDATE=20210220
#export VERSION=3.9.3
#export VERSIONDATE=20210403
#export VERSION=3.9.4
#export VERSIONDATE=20210405
#export VERSION=3.9.5
#export VERSIONDATE=20210504
#export VERSION=3.9.6
#export VERSIONDATE=20210628
#export VERSION=3.9.7
#export VERSIONDATE=20210831
#export VERSION=3.10.0a1
#export VERSIONDATE=20201006
#export VERSION=3.10.0a2
#export VERSIONDATE=20201104
#export VERSION=3.10.0a3
#export VERSIONDATE=20201208
#export VERSION=3.10.0a5
#export VERSIONDATE=20210203
#export VERSION=3.10.0
#export VERSIONDATE=20211005
#export VERSION=3.10.1
#export VERSIONDATE=20211207
#export VERSION=3.10.2
#export VERSIONDATE=20220115
#export VERSION=3.10.3
#export VERSIONDATE=20220316
#export VERSION=3.10.4
#export VERSIONDATE=20220324
#export VERSION=3.10.5
#export VERSIONDATE=20220607
#export VERSION=3.10.6
#export VERSIONDATE=20220802
#export VERSION=3.10.7
#export VERSIONDATE=20220906
#export VERSION=3.10.8
#export VERSIONDATE=20221012
#export VERSION=3.11.0a3
#export VERSIONDATE=20211208
#export VERSION=3.11.0a4
#export VERSIONDATE=20220115
#export VERSION=3.11.0a5
#export VERSIONDATE=20220204
#export VERSION=3.11.0a7
#export VERSIONDATE=20220408
#export VERSION=3.11.0b1
#export VERSIONDATE=20220508
#export VERSION=3.11.0b5
#export VERSIONDATE=20221024
#export VERSION=3.11.0
#export VERSIONDATE=20221025
#export VERSION=3.11.2
#export VERSIONDATE=20230208
#export VERSION=3.12.0a2
#export VERSIONDATE=20221115
wl-showstatus --package-version
export DEPENDENCIES=expat,libffi,gdbm
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE="GPL-compatible"
#export DOWNLOADURL="http://www.python.org/download/ Python-"
export DOWNLOADURL="http://www.python.org/ftp/python/ Python-"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://www.python.org/ftp/python/$VERSION/Python-$VERSION.tar.bz2
#export DOWNLOADSOURCEURL=https://www.python.org/ftp/python/$VERSION/Python-$VERSION.tar.xz
export DOWNLOADSOURCEURL=http://www.python.org/ftp/python/`echo $VERSION|sed -e "s/[a-z][a-z]*[0-9]*$//"`/Python-$VERSION.tar.xz
#export DOWNLOADSOURCEURL=http://legacy.python.org/ftp/python/$VERSION/Python-$VERSION.tar.xz
#export DOWNLOADSOURCEURL=https://www.python.org/ftp/python/$(echo $VERSION|sed -e "s/[a-z].*$//")/Python-$VERSION.tar.xz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
#tar xj --force-local -f $TARBALLDIR/$BASENAME/Python-$VERSION.tar.bz2
tar xJ --force-local -f $TARBALLDIR/$BASENAME/Python-$VERSION.tar.xz
#tar xJ --force-local -f $TARBALLDIR/$BASENAME/Python-$VERSION.tgz
cd Python-$VERSION
## fix Python/import.c (version <= 2.6.8)
#mv Python/import.c Python/import.c.bak
#cat > Python/import.c << EOF
##define S_IXGRP 0
##define S_IXOTH 0
##define S_IWGRP 0
##define S_IWOTH 0
#EOF
#cat Python/import.c.bak >> Python/import.c
## fix missing file
#touch Objects/errmap.h
# fix missing definition of WC_NO_BEST_FIT_CHARS
mv Objects/unicodeobject.c Objects/unicodeobject.c.bak
cat > Objects/unicodeobject.c << EOF
#define WINVER 0x0500
#include "Python.h"
PyObject *PyUnicode_DecodeMBCS (const char *s, Py_ssize_t size, const char *errors);
PyObject *PyUnicode_AsMBCSString (PyObject *unicode);
EOF
cat Objects/unicodeobject.c.bak >> Objects/unicodeobject.c
# fix Python/random.c
patch -ulbf Python/random.c << EOF
--- Python/random.c  2012-06-26 22:19:58 +0200
+++ Python/random.c  2012-08-06 23:23:10 +0200
@@ -3,2 +3,3 @@
 #include <windows.h>
+#include <wincrypt.h>
 #else
EOF
# fix too many arguments to wcstok() in Modules/getpath.c (version >= 3.3.0)
sed -i.bak -e "s/\(wcstok([^)]*,[^)]*\),[^)]*)/\1)/" Modules/getpath.c
## fix (not complete yet) Modules/posixmodule.c
#patch -ulbf Modules/posixmodule.c << EOF
#--- Modules/posixmodule.c  2013-01-29 14:56:14 +0100
#+++ Modules/posixmodule.c  2013-01-29 15:52:02 +0100
#@@ -133,4 +133,7 @@
# #else
#-#if defined(PYOS_OS2) && defined(PYCC_GCC) || defined(__VMS)
#+#if defined(PYOS_OS2) && defined(PYCC_GCC) || defined(__VMS) || defined(__MINGW32__)
# /* Everything needed is defined in PC/os2emx/pyconfig.h or vms/pyconfig.h */
#+#ifdef __MINGW32__
#+#define O_NOCTTY 0
#+#endif
# #else                   /* all other compilers */
#@@ -175,3 +178,3 @@
# #else
#-#if ( defined(__WATCOMC__) || defined(_MSC_VER) ) && !defined(__QNX__)
#+#if ( defined(__WATCOMC__) || defined(_MSC_VER) || defined(__MINGW32__) ) && !defined(__QNX__)
# extern int mkdir(const char *);
#@@ -260,3 +263,3 @@
#
#-#ifdef _MSC_VER
#+#if defined(_MSC_VER) || defined(__MINGW32__)
# #ifdef HAVE_DIRECT_H
#EOF
# fix missing errmap.h in Objects/exceptions.c (version >= 3.3.1)
patch -ulbf Objects/exceptions.c << EOF
--- Objects/exceptions.c  2013-04-06 09:41:56 +0200
+++ Objects/exceptions.c  2013-04-06 19:07:50 +0200
@@ -715,3 +715,3 @@

-#ifdef MS_WINDOWS
+#if defined(MS_WINDOWS) && !defined(__MINGW32__)
 #include "errmap.h"
EOF
#mv Objects/exceptions.c Objects/exceptions.c.bak
#echo "#define MS_WINDOWS 1" > Objects/exceptions.c
#cat Objects/exceptions.c.bak >> Objects/exceptions.c
# fix missing WC_NO_BEST_FIT_CHARS in Objects/unicodeobject.c (version >= 3.3.1)
mv Objects/unicodeobject.c Objects/unicodeobject.c.bak
echo "#define WINVER 0x0500" > Objects/unicodeobject.c
cat Objects/unicodeobject.c.bak >> Objects/unicodeobject.c
# fix missing HCRYPTPROV in Python/random.c (version >= 3.3.1)
mv Python/random.c Python/random.c.bak
cat > Python/random.c << EOF
#include <windows.h>
#include <wincrypt.h>
EOF
cat Python/random.c.bak >> Python/random.c
# fix invalid number of parameters to wcstok in Modules/getpath.c (version >= 3.3.1)
mv Modules/getpath.c Modules/getpath.c.bak
cat > Modules/getpath.c << EOF
#include <windows.h>
#define wcstok wcstok_s
EOF
cat Modules/getpath.c.bak >> Modules/getpath.c
# fix Include/pyport.h
patch -ulbf Include/pyport.h << EOF
--- Include/pyport.h  2013-05-15 18:32:54 +0200
+++ Include/pyport.h  2013-05-16 08:07:30 +0200
@@ -737,3 +737,3 @@
 */
-#if defined(__CYGWIN__)
+#if defined(__CYGWIN__) || defined(__MINGW32__)
 #       define HAVE_DECLSPEC_DLL
@@ -742,3 +742,3 @@
 /* only get special linkage if built as shared or platform is Cygwin */
-#if defined(Py_ENABLE_SHARED) || defined(__CYGWIN__)
+#if defined(Py_ENABLE_SHARED) || defined(__CYGWIN__) || defined(__MINGW32__)
 #       if defined(HAVE_DECLSPEC_DLL)
@@ -749,3 +749,3 @@
         /* except for Cygwin to handle embedding */
-#                       if defined(__CYGWIN__)
+#                       if defined(__CYGWIN__) || defined(__MINGW32__)
 #                               define PyMODINIT_FUNC __declspec(dllexport) PyObject*
@@ -760,3 +760,3 @@
         /* http://docs.python.org/extending/windows.html#a-cookbook-approach */
-#                       if !defined(__CYGWIN__)
+#                       if !defined(__CYGWIN__) && !defined(__MINGW32__)
 #                               define PyAPI_FUNC(RTYPE) __declspec(dllimport) RTYPE
EOF
# fix undefined winerror_to_errno in Python/fileutils.c (version >= 3.8.3)
patch -ulbf Python/fileutils.c << EOF
@@ -8,3 +8,3 @@
 #  include <windows.h>
-extern int winerror_to_errno(int);
+#  include "../PC/errmap.h"
 #endif
EOF
# fix undefined winerror_to_errno in Objects/exceptions.c (version >= 3.8.3)
patch -ulbf Objects/exceptions.c << EOF
@@ -20,2 +20,3 @@
 #ifdef MS_WINDOWS
+#include "../PC/errmap.h"
 PyObject *PyExc_WindowsError = NULL;
EOF
# fix Py_BUILD_ASSERT issues and missing GetTickCount64 in Python/pytime.c (version >= 3.8.3)
mv Python/pytime.c Python/pytime.c.bak
cat > Python/pytime.c << EOF
#if !defined(_WIN32_WINNT) || _WIN32_WINNT < 0x0600
#undef _WIN32_WINNT
#define _WIN32_WINNT 0x0600
#endif
EOF
sed -e "s/#if SIZEOF_TIME_T == SIZEOF_LONG_LONG/& \|\| defined(_WIN32)/" Python/pytime.c.bak >> Python/pytime.c
# fix missing GetTickCount64 in Python/thread.c (version >= 3.8.3)
mv Python/thread.c Python/thread.c.bak
cat > Python/thread.c << EOF
#if !defined(_WIN32_WINNT) || _WIN32_WINNT < 0x0600
#undef _WIN32_WINNT
#define _WIN32_WINNT 0x0600
#endif
EOF
cat Python/thread.c.bak >> Python/thread.c
# use Windows dynalic loading (version >= 3.8.3)
mv Python/dynload_shlib.c.bak Python/dynload_shlib.c
cp Python/dynload_win.c Python/dynload_shlib.c
# fix missing ALL_PROCESSOR_GROUPS and ALTSEP in Modules/posixmodule.c (version >= 3.8.3)
mv Modules/posixmodule.c Modules/posixmodule.c.bak
cat > Modules/posixmodule.c << EOF
#if !defined(_WIN32_WINNT) || _WIN32_WINNT < 0x0601
#undef _WIN32_WINNT
#define _WIN32_WINNT 0x0601
#endif
#include "Include/osdefs.h"
#include <process.h>
#define HAVE_WEXECV 1
EOF
sed -e "s/_MSC_VER/_WIN32/; s/^#ifdef \(HAVE_FORK\|HAVE_TTYNAME\)$/#if defined(\1) \&\& \!defined(_WIN32)/; s/\(#if defined(MS_WINDOWS)\) \&\& \!defined(HAVE_OPENDIR)/\1/" Modules/posixmodule.c.bak >> Modules/posixmodule.c
# fix missing wcsncasecmp in Modules/getpath.c (version >= 3.8.3)
sed -i.bak -e "s/wcsncasecmp/wcsnicmp/" Modules/getpath.c
# fix Modules/pwdmodule.c (version >= 3.8.3)
patch -ulbf Modules/pwdmodule.c << EOF
@@ -5,5 +5,7 @@
 #include "posixmodule.h"

+#ifndef _WIN32
 #include <pwd.h>
+#endif

 #include "clinic/pwdmodule.c.h"
@@ -69,4 +71,7 @@
 mkpwent(struct passwd *p)
 {
+#ifdef _WIN32
+    return NULL;
+#else
     int setIndex = 0;
     PyObject *v = PyStructSequence_New(&StructPwdType);
@@ -102,4 +107,5 @@

     return v;
+#endif
 }

@@ -119,4 +125,7 @@
 /*[clinic end generated code: output=c4ee1d4d429b86c4 input=ae64d507a1c6d3e8]*/
 {
+#ifdef _WIN32
+    return NULL;
+#else
     PyObject *retval = NULL;
     uid_t uid;
@@ -187,4 +196,5 @@
 #endif
     return retval;
+#endif
 }

@@ -204,4 +214,7 @@
 /*[clinic end generated code: output=359ce1ddeb7a824f input=a6aeb5e3447fb9e0]*/
 {
+#ifdef _WIN32
+    return NULL;
+#else
     char *buf = NULL, *buf2 = NULL, *name_chars;
     int nomem = 0;
@@ -267,4 +280,5 @@
     Py_DECREF(bytes);
     return retval;
+#endif
 }

EOF
# create main for use with MinGW
cat > main2wide.c << EOF
#include "Python.h"
#include <windows.h>
int main() {
  int argcw;
  LPWSTR* argvw = CommandLineToArgvW(GetCommandLineW(), &argcw);
  int result = Py_Main(argcw, argvw);
  LocalFree(argvw);
  return result;
}
EOF
# fix PC/errmap.h (version >= 3.8.3)
mv PC/errmap.h PC/errmap.h.bak &&
echo "static " > PC/errmap.h &&
cat PC/errmap.h.bak >> PC/errmap.h &&
# use correct getpath.c (version >= 3.8.3)
mv Modules/getpath.c Modules/getpath.c.bak &&
cat > Modules/getpath.c << EOF
#ifndef PY3_DLLNAME
#define PY3_DLLNAME "python3.dll"
#endif
#include "../PC/getpathp.c"
EOF
# fix missing PY3_DLLNAME in Python/pathconfig.c (version >= 3.10.0)
mv Python/pathconfig.c Python/pathconfig.c.bak &&
cat > Python/pathconfig.c << EOF
#ifndef PY3_DLLNAME
#define PY3_DLLNAME "python3.dll"
#endif
EOF
cat Python/pathconfig.c.bak >> Python/pathconfig.c
# fix missing PyInit_posix in Modules/config.c (version >= 3.8.3)
sed -i.bak -e "s/PyInit_posix/PyInit_nt/" Modules/config.c
# fix Python/fileutils.c (version >= 3.9.1)
patch -ulbf Python/fileutils.c << EOF
@@ -2074,3 +2074,5 @@
 #define GET_LOCALE_STRING(ATTR) PyUnicode_DecodeLocale(lc->ATTR, NULL)
-#else /* MS_WINDOWS */
+#elif defined(__MINGW32__)
+#define GET_LOCALE_STRING(ATTR) PyUnicode_FromWideChar(lc->ATTR, -1)
+#else
 /* Use _W_* fields of Windows strcut lconv */
EOF
# fix Modules/_localemodule.c (version >= 3.9.1)
patch -ulbf Modules/_localemodule.c << EOF
@@ -183,3 +183,5 @@
 #define GET_LOCALE_STRING(ATTR) PyUnicode_DecodeLocale(lc->ATTR, NULL)
-#else  /* MS_WINDOWS */
+#elif defined(__MINGW32__)
+#define GET_LOCALE_STRING(ATTR) PyUnicode_DecodeLocale(lc->ATTR, -1)
+#else
 /* Use _W_* fields of Windows struct lconv */
@@ -255,3 +257,5 @@

-#ifdef MS_WINDOWS
+#ifdef __MINGW32__
+#define GET_LOCALE_STRING(ATTR) PyUnicode_DecodeLocale(lc->ATTR, -1)
+#elif defined(MS_WINDOWS)
 /* Use _W_* fields of Windows struct lconv */
EOF
#autoreconf -f -i -I $MINGWPREFIX/share/aclocal &&
#INTLTOOL_PERL="$PERLDIR/bin/perl.exe" 
#PERL="$PERLDIR/bin/perl.exe -I$PERLDIR/lib" 
#PYTHON=$PYDIR/python.exe 
#PYTHON=$PYDIR/python.exe C_INCLUDE_PATH=$PYDIR/include${C_INCLUDE_PATH:+:$C_INCLUDE_PATH} 
wl-showstatus configure &&
 #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM LDFLAGS="-no-undefined -Wl,-no-undefined" &&
 #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-threads=no --with-system-expat --with-system-ffi --with-dbmliborder=gdbm CFLAGS="-D`if ( echo $RUNPLATFORM | grep -qv x86_64 ); then echo MS_WINDOWS; else echo MS_WIN64; fi`" &&
 #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-threads=no --with-system-expat --with-system-ffi --with-dbmliborder=gdbm CFLAGS="-D`if ( echo $RUNPLATFORM | grep -qv x86_64 ); then echo MS_WINDOWS; else echo MS_WIN64; fi`" CFLAGS="-I`pwd`/PC" &&
 #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-shared --with-threads --with-system-expat --with-system-ffi --with-dbmliborder=gdbm CFLAGS="-D$(if ( echo $RUNPLATFORM | grep -qv x86_64 ); then echo MS_WINDOWS; else echo MS_WIN64; fi)" CFLAGS="-DMS_WINDOWS -I$(pwd)/PC" &&
 ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-shared --with-threads --enable-optimizations --with-system-expat --with-system-ffi --with-dbmliborder=gdbm CFLAGS="-D$(if ( echo $RUNPLATFORM | grep -qv x86_64 ); then echo MS_WINDOWS; else echo MS_WIN64; fi)" CFLAGS="-DMS_WINDOWS -I$PWD/PC" &&
 #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-shared --with-threads --enable-optimizations --with-system-expat --with-system-ffi --with-dbmliborder=gdbm CFLAGS="-D$(if ( echo $RUNPLATFORM | grep -qv x86_64 ); then echo MS_WINDOWS; else echo MS_WIN64; fi)" CFLAGS="-DMS_WINDOWS -I$PWD/PC -I$PWD/Include/internal" &&
 #echo "#define WINVER 0x0500" >> pyconfig.h &&
 # fix error: Python doesn't support sizeof(pid_t) > sizeof(long)
 sed -i.bak -e "s/^\(#define SIZEOF_PID_T\) .*/\1 SIZEOF_INT/; s/^.*#undef pid_t.*$/#define pid_t int/" pyconfig.h &&

 wl-showstatus build &&
 gcc -c -o winconsoleio.o Modules/_io/winconsoleio.c -IPC -IInclude -IInclude/internal -DPy_BUILD_CORE -O3 &&
 #gcc -c -o dynload_win.o Python/dynload_win.c -IPC -IInclude -DPy_BUILD_CORE -O3 &&
 gcc -c -o dynload_shlib.o Python/dynload_win.c -IPC -IInclude -DPy_BUILD_CORE -O3 &&
 #gcc -c -o getpathp.o PC/getpathp.c -IPC -IInclude -IInclude/internal -DPy_BUILD_CORE -O3 &&
 gcc -c -o dl_nt.o PC/dl_nt.c -IPC -IInclude -DMS_DLL_ID="\"$VERSION\"" -DPy_BUILD_CORE -O3 &&
 #gcc -c -o Modules/posixmodule.o Modules/posixmodule.c -I. -IPC -IInclude -IInclude/internal -O3 -D$(if ( echo $RUNPLATFORM | grep -qv x86_64 ); then echo MS_WINDOWS; else echo MS_WIN64; fi) -DNT_THREADS -DPy_BUILD_CORE &&
 gcc -c -o Modules/posixmodule.o PC/msvcrtmodule.c -IPC -IInclude -IInclude/internal -O3 -D$(if ( echo $RUNPLATFORM | grep -qv x86_64 ); then echo MS_WINDOWS; else echo MS_WIN64; fi) -DNT_THREADS -DPy_BUILD_CORE &&
 #gcc -c -o empty.o PC/empty.c -O3 &&
 #gcc -c -o WinMain.o PC/WinMain.c -IPC -IInclude -DwWinMain=WinMain -municode -O3 &&
 #gcc -c -o python_uwp.o PC/python_uwp.cpp -IPC -IInclude -municode -O3 &&
 gcc -c -o main2wide.o main2wide.c -IPC -IInclude -municode -DPy_BUILD_CORE -O3 &&
 #cp PC/python3.def PC/python3.def.bak &&
 #echo "PyInit_posix=PyInit_nt" >> PC/python3.def &&
 #echo "_PyImport_FindSharedFuncptrWindows" >> PC/python3.def &&
 #make BASEMODLIBS="winconsoleio.o dynload_win.o getpathp.o dl_nt.o -Wl,--as-needed -lshlwapi" &&
 PYTHONPATH=$(pwd)/Lib make CFLAGS="-I$(pwd)" BASEMODLIBS="winconsoleio.o dl_nt.o main2wide.o -Wl,--as-needed -lshlwapi -lversion -lws2_32 -lmincore" &&

 wl-showstatus build-install &&
 make install &&
    ls -l $INSTALLPREFIX/lib/pkgconfig $INSTALLPREFIX/share/pkgconfig
    make install-pkgconfigDATA
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && rm -rf Python-$VERSION



####sed -e "s/\(strcasecmp\)/MY\1/g" Python/dynload_win.c > Python/dynload_shlib.c



#name         : Python-2.7.9
#type         : .tar.xz
#version      : 2.7.9
#url          : http://www.python.org/ftp/python/2.7.9/Python-2.7.9.tar.xz
#patches      : Python2/0100-MINGW-BASE-use-NT-thread-model.patch, Python2/0110-MINGW-translate-gcc-internal-defines-to-python-platf.patch, Python2/0120-MINGW-use-header-in-lowercase.patch, Python2/0130-MINGW-configure-MACHDEP-and-platform-for-build.patch, Python2/0140-MINGW-preset-configure-defaults.patch, Python2/0150-MINGW-configure-largefile-support-for-windows-builds.patch, Python2/0160-MINGW-add-wincrypt.h-in-Python-random.c.patch, Python2/0180-MINGW-init-system-calls.patch, Python2/0190-MINGW-detect-REPARSE_DATA_BUFFER.patch, Python2/0200-MINGW-build-in-windows-modules-winreg.patch, Python2/0210-MINGW-determine-if-pwdmodule-should-be-used.patch, Python2/0220-MINGW-default-sys.path-calculations-for-windows-plat.patch, Python2/0230-MINGW-AC_LIBOBJ-replacement-of-fileblocks.patch, Python2/0250-MINGW-compiler-customize-mingw-cygwin-compilers.patch, Python2/0270-CYGWIN-issue13756-Python-make-fail-on-cygwin.patch, Python2/0290-issue6672-v2-Add-Mingw-recognition-to-pyport.h-to-al.patch, Python2/0300-MINGW-configure-for-shared-build.patch, Python2/0310-MINGW-dynamic-loading-support.patch, Python2/0320-MINGW-implement-exec-prefix.patch, Python2/0330-MINGW-ignore-main-program-for-frozen-scripts.patch, Python2/0340-MINGW-setup-exclude-termios-module.patch, Python2/0350-MINGW-setup-_multiprocessing-module.patch, Python2/0360-MINGW-setup-select-module.patch, Python2/0370-MINGW-setup-_ctypes-module-with-system-libffi.patch, Python2/0380-MINGW-defect-winsock2-and-setup-_socket-module.patch, Python2/0390-MINGW-exclude-unix-only-modules.patch, Python2/0400-MINGW-setup-msvcrt-module.patch, Python2/0410-MINGW-build-extensions-with-GCC.patch, Python2/0420-MINGW-use-Mingw32CCompiler-as-default-compiler-for-m.patch, Python2/0430-MINGW-find-import-library.patch, Python2/0440-MINGW-setup-_ssl-module.patch, Python2/0460-MINGW-generalization-of-posix-build-in-sysconfig.py.patch, Python2/0462-MINGW-support-stdcall-without-underscore.patch, Python2/0480-MINGW-generalization-of-posix-build-in-distutils-sys.patch, Python2/0490-MINGW-customize-site.patch, Python2/0500-add-python-config-sh.patch, Python2/0510-cross-darwin-feature.patch, Python2/0520-py3k-mingw-ntthreads-vs-pthreads.patch, Python2/0530-mingw-system-libffi.patch, Python2/0540-mingw-semicolon-DELIM.patch, Python2/0550-mingw-regen-use-stddef_h.patch, Python2/0560-mingw-use-posix-getpath.patch, Python2/0565-mingw-add-ModuleFileName-dir-to-PATH.patch, Python2/0570-mingw-add-BUILDIN_WIN32_MODULEs-time-msvcrt.patch, Python2/0580-mingw32-test-REPARSE_DATA_BUFFER.patch, Python2/0590-mingw-INSTALL_SHARED-LDLIBRARY-LIBPL.patch, Python2/0600-msys-mingw-prefer-unix-sep-if-MSYSTEM.patch, Python2/0610-msys-cygwin-semi-native-build-sysconfig.patch, Python2/0620-mingw-sysconfig-like-posix.patch, Python2/0630-mingw-_winapi_as_builtin_for_Popen_in_cygwinccompiler.patch, Python2/0640-mingw-x86_64-size_t-format-specifier-pid_t.patch, Python2/0650-cross-dont-add-multiarch-paths-if-cross-compiling.patch, Python2/0660-mingw-use-backslashes-in-compileall-py.patch, Python2/0670-msys-convert_path-fix-and-root-hack.patch, Python2/0690-allow-static-tcltk.patch, Python2/0710-CROSS-properly-detect-WINDOW-_flags-for-different-nc.patch, Python2/0720-mingw-pdcurses_ISPAD.patch, Python2/0740-grammar-fixes.patch, Python2/0750-Add-interp-Python-DESTSHARED-to-PYTHONPATH-b4-pybuilddir-txt-dir.patch, Python2/0760-msys-monkeypatch-os-system-via-sh-exe.patch, Python2/0770-msys-replace-slashes-used-in-io-redirection.patch, Python2/0790-mingw-add-_exec_prefix-for-tcltk-dlls.patch, Python2/0800-mingw-install-layout-as-posix.patch, Python2/0820-mingw-reorder-bininstall-ln-symlink-creation.patch, Python2/0830-add-build-sysroot-config-option.patch, Python2/0840-add-builddir-to-library_dirs.patch, Python2/0850-cross-PYTHON_FOR_BUILD-gteq-276-and-fullpath-it.patch, Python2/0855-mingw-fix-ssl-dont-use-enum_certificates.patch, Python2/0860-mingw-build-optimized-ext.patch, Python2/0870-mingw-add-LIBPL-to-library-dirs.patch, Python2/0910-fix-using-dllhandle-and-winver-mingw.patch, Python2/1000-dont-link-with-gettext.patch, Python2/1010-ctypes-python-dll.patch, Python2/1020-gdbm-module-includes.patch, Python2/1030-use-gnu_printf-in-format.patch, Python2/1040-install-msilib.patch
#configuration: --host=i686-w64-mingw32 --build=i686-w64-mingw32 --prefix=/c/mingw810/i686-810-win32-dwarf-rt_v6-rev0/mingw32/opt --enable-shared --with-threads --with-system-expat --with-system-ffi LIBFFI_INCLUDEDIR=C:/mingw810/i686-810-win32-dwarf-rt_v6-rev0/mingw32/opt/lib/libffi-3.2.1/include OPT= CFLAGS="-O2 -pipe -fno-ident -I/c/mingw810/i686-810-win32-dwarf-rt_v6-rev0/mingw32/opt/include -I/c/mingw810/prerequisites/i686-zlib-static/include -I/c/mingw810/prerequisites/i686-w64-mingw32-static/include -fwrapv -DNDEBUG -D__USE_MINGW_ANSI_STDIO=1" CPPFLAGS=" -I/c/mingw810/i686-810-win32-dwarf-rt_v6-rev0/mingw32/opt/include -I/c/mingw810/prerequisites/i686-zlib-static/include -I/c/mingw810/prerequisites/i686-w64-mingw32-static/include -IC:/mingw810/i686-810-win32-dwarf-rt_v6-rev0/mingw32/opt/include -IC:/mingw810/i686-810-win32-dwarf-rt_v6-rev0/mingw32/opt/include/ncursesw -IC:/mingw810/prerequisites/i686-zlib-static/include" LDFLAGS="-pipe -fno-ident -L/c/mingw810/i686-810-win32-dwarf-rt_v6-rev0/mingw32/opt/lib -L/c/mingw810/prerequisites/i686-zlib-static/lib -L/c/mingw810/prerequisites/i686-w64-mingw32-static/lib -LC:/mingw810/prerequisites/i686-zlib-static/lib -LC:/mingw810/i686-810-win32-dwarf-rt_v6-rev0/mingw32/opt/lib"



#### See also: CPython https://github.com/python/cpython
#### See also: WinPython https://github.com/winpython/winpython/
#### See also: http://uucode.com/texts/python-mingw/python-mingw.html
#### For gdb pretty printers support see: https://github.com/niXman/mingw-builds
#### MSYS2 patches: https://github.com/msys2/MINGW-packages/tree/master/mingw-w64-python2
#### MSYS2 patches: https://github.com/msys2/MINGW-packages/tree/master/mingw-w64-python
#### MSYS2 patches: https://github.com/niXman/mingw-builds/tree/master/patches

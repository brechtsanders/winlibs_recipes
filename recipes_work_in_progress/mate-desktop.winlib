export NAME="mate-desktop"
export STATUS=
export URL=https://mate-desktop.org/
export BASENAME=mate-desktop
export DESCRIPTION="Library with common API for various MATE modules"
export CATEGORY=development
export TYPE=library
export VERSION=1.28.2
export VERSIONDATE=20240505
wl-showstatus --package-version
export DEPENDENCIES=
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=meson,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=COPYING
export LICENSETYPE=GPL
export DOWNLOADURL="https://github.com/mate-desktop/mate-desktop/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/mate-desktop/mate-desktop/releases/download/v$VERSION/$BASENAME-$VERSION.tar.xz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xJ --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.xz
cd $BASENAME-$VERSION
# fix missing gdk/gdkx.h
mkdir -p winfix/gdk
cat > winfix/gdk/gdkx.h << EOF
EOF
cat > winfix/cairo-xlib.h << EOF
EOF
# fix redefinition of interface in libmate-desktop/edid.h (version >= 1.28.2)
patch -ulbf libmate-desktop/edid.h << EOF
@@ -117,2 +117,4 @@
                        int bits_per_primary;
+#undef interface
+#define MATE_interface
                        Interface interface;
EOF
# fix missing langinfo.h in libmate-desktop/mate-languages.c (version >= 1.28.2)
patch -ulbf libmate-desktop/mate-languages.c << EOF
@@ -31,3 +31,7 @@
 #include <locale.h>
+#ifndef _WIN32
 #include <langinfo.h>
+#else
+#define nl_langinfo(codeset) "UTF-8"
+#endif
 #include <sys/stat.h>
@@ -41,3 +45,2 @@

-#include <langinfo.h>
 #ifndef __LC_LAST
EOF

#export BUILDDEPENDENCIES=meson,ninja
#-Dc_args=$CFLAGS -Dcpp_args=$CXXFLAGS -Dc_link_args=$LDFLAGS -Dcpp_link_args=$LDFLAGS
## fix location of Perl
#sed -i.bak -e "s?'perl'?'$(cygpath -w $PERLDIR/bin/perl.exe|sed -e 's/\\/&&&&/g')'?" meson.build
## fix detection of Python
#sed -i.bak -e "s?'python3'?'$(cygpath -w $PYDIR/python.exe|sed -e 's/\\/&&&&/g')'?" meson.build
## fix missing gio-unix
##sed -i.bak -e "s/gio-unix-/gio-/" meson.build
#sed -i.bak -e "s/gio-unix-/gio-windows-/" meson.build
mkdir -p build_both &&
 wl-showstatus configure &&
 PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Dintrospection=true -Dgtk-doc=true -Dc_args="-I$PWD/winfix" . build_both &&
 ## fix slash/backslash path issue when calling Python from Ninja
 #sed -i.bak -e "s/join_paths/os.path.join/g; /COMMAND =.*python\.exe/ s?\"/\([a-zA-Z]\)/?\"\1:/?; /COMMAND =.*python\.exe/ s?/?\\\\?g" build_*/build.ninja &&
 ## fix Python path issues in meson_exe
 #sed -i.bak -e "s?$PYDIR?$(echo $PYDIR|sed -e "s?^/\([a-zA-Z]\)/?\1:/?")?" build_both/meson-private/meson_exe_python.exe_*.dat &&
 ## fix execution of Python scripts
 #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *= *\| *=.*\&\& *\)\(\"\{0,1\}[^ ]*\)\(\.py\|glib-mkenums\|g-ir-scanner\|asciidoc\)\(\"\{0,1\} \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_both/build.ninja &&
 ## fix executing shell scripts
 #sed -i.bak -e "s?^\(\s*COMMAND\s*=\s*\)\(\"[^\"]*\.sh\"\)?\1\"$(cygpath -m $(which sh.exe))\" \2?" build_both/build.ninja &&
 wl-showstatus build-install &&
 #PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib \
 #PATH=$PYDIR:$PATH PYTHONPATH=$MINGWPREFIX/python/Lib/site-packages${PYTHONPATH:+:$PYTHONPATH} \
 #ninja -Cbuild_both install/strip &&
 ninja -Cbuild_both install &&
    echo OK && find . -name '*.a'

# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




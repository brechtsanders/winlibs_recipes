export NAME="HEIF"
export STATUS=
export URL=https://nokiatech.github.io/heif/
#export URL=https://github.com/nokiatech/heif
export BASENAME=heif
export DESCRIPTION="High Efficiency Image File Format (HEIF) - HEIF is a visual media container format standardized by the Moving Picture Experts Group (MPEG) for storage and sharing of images and image sequences. It is based on the well-known ISO Base Media File Format (ISOBMFF) standard. HEIF Reader/Writer Engine is an implementation of HEIF standard in order to demonstrate its powerful features and capabilities."
export CATEGORY=graphics,fileformat
export TYPE=library
#export VERSION=3.5.0
#export VERSIONDATE=20200208
#export VERSION=3.6.0
#export VERSIONDATE=20200626
#export VERSION=3.6.1
#export VERSIONDATE=20200812
#export VERSION=3.6.2
#export VERSIONDATE=20210121
#export VERSION=3.7.0
#export VERSIONDATE=20211012
export VERSION=3.7.1
export VERSIONDATE=20250311
####srcs/writer/fileoutputstream_std.cpp:25:11: error: class 'HEIF::FileOutputStream' does not have any field named 'mFile'
wl-showstatus --package-version
export DEPENDENCIES=
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE.TXT
export LICENSETYPE=
#export DOWNLOADURL="https://github.com/nokiatech/heif/releases"
export DOWNLOADURL="https://github.com/nokiatech/heif/tags"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://github.com/nokiatech/heif/archive/v$VERSION.tar.gz
export DOWNLOADSOURCEURL=https://github.com/nokiatech/heif/archive/refs/tags/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd $BASENAME-$VERSION
# fix srcs/writer/fileoutputstream.hpp (version >= 3.6.1)
patch -ulbf srcs/writer/fileoutputstream.hpp << EOF
@@ -49,3 +49,3 @@

-#if defined(_WIN32)
+#if defined(_WIN32) && !defined(__MINGW32__)
         void close();
EOF
mkdir -p build_win &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -Ssrcs -Bbuild_win &&
 wl-showstatus build &&
 ninja -Cbuild_win &&
 strip build_win/lib/*.dll &&
 #wl-showstatus build-install &&
 #ninja -Cbuild_win install/strip &&
 wl-showstatus install &&
 mkdir -p $INSTALLPREFIX/include $INSTALLPREFIX/lib $INSTALLPREFIX/bin &&
 cp -f build_win/lib/*.a $INSTALLPREFIX/lib/ &&
 # also create libraries without static/shared suffix
 for F in build_win/lib/*_static.a build_win/lib/*_shared.dll.a; do
  cp -f $F $INSTALLPREFIX/lib/$(basename $F|sed -e "s/_\(static\|shared\)\./\./")
 done &&
 cp -f build_win/lib/*.dll $INSTALLPREFIX/bin/ &&
 #cp -rf ???????????? $INSTALLPREFIX/include/ &&
    echo OK
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
####TO DO: how to install or copy which include files manually?




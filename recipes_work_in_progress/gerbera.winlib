export NAME="Gerbera"
export STATUS=
export URL=https://gerbera.io/
export BASENAME=gerbera
export DESCRIPTION="A free media server. Stream your media to devices on your home network."
export CATEGORY=multimedia
export TYPE=library
#export VERSION=1.9.0
#export VERSIONDATE=20210806
#export VERSION=1.9.1
#export VERSIONDATE=20210827
#export VERSION=1.9.2
#export VERSIONDATE=20211001
#export VERSION=1.10.0
#export VERSIONDATE=20220225
#export VERSION=1.11.0
#export VERSIONDATE=20220504
####Gerbera requires libupnp with IPv6 support.
#export VERSION=1.12.0
#export VERSIONDATE=20221104
#export VERSION=1.12.1
#export VERSIONDATE=20230103
#export VERSION=2.0.0
#export VERSIONDATE=20240107
#export VERSION=2.1.0
#export VERSIONDATE=20240408
#export VERSION=2.2.0
#export VERSIONDATE=20240708
#export VERSION=2.3.0
#export VERSIONDATE=20240919
export VERSION=2.4.0
export VERSIONDATE=20250107
####/include/fmt/core.h:1751:17: error: static assertion failed: Formatting of non-void pointers is disallowed.
wl-showstatus --package-version
export DEPENDENCIES=libcurl,libupnp,libexif,file,libmatroska,taglib,libuuid,fmt,spdlog
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE.md
export LICENSETYPE=GPL
export DOWNLOADURL="https://github.com/gerbera/gerbera/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/gerbera/gerbera/archive/refs/tags/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd $BASENAME-$VERSION
# fix missing files
mkdir -p winfix/sys winfix/netinet
echo "#include <winsock2.h>" > winfix/sys/socket.h
echo "#include <winsock2.h>" > winfix/netinet/in.h &&
echo "#include <stdint.h>" >> winfix/netinet/in.h &&
echo "typedef uint16_t in_port_t;" >> winfix/netinet/in.h
touch winfix/sys/select.h
# avoid already defined environ in src/transcoding/transcoding.h (version >= 2.0.0)
patch -ulbf src/transcoding/transcoding.h << EOF
@@ -119,3 +119,3 @@
     std::string getArguments() const { return args; }
-    void setEnviron(const std::map<std::string, std::string>& environ) { this->environment = environ; }
+    void setEnviron(const std::map<std::string, std::string>& envir) { this->environment = envir; }

EOF
# fix error: static assertion failed: Formatting of non-void pointers is disallowed in src/cds/cds_item.cc (version >= 2.0.0)
patch -ulbf src/cds/cds_item.cc << EOF
@@ -83,3 +83,3 @@
     if (!isRegularFile(location, ec))
-        throw_std_runtime_error("Item validation failed: file {} not found", location.c_str());
+        throw_std_runtime_error("Item validation failed: file {} not found", (const char*)location.c_str());
 }
EOF
# fix src/config/config_generator.cc (version >= 2.0.0)
patch -ulbf src/config/config_generator.cc << EOF
@@ -267,5 +267,5 @@
         auto co = ConfigDefinition::findConfigSetup(CFG_SERVER_HOME);
-        co->setDefaultValue(userHome / configDir);
+        co->setDefaultValue((userHome / configDir).generic_string());
         co = ConfigDefinition::findConfigSetup(CFG_SERVER_WEBROOT);
-        co->setDefaultValue(dataDir / DEFAULT_WEB_DIR);
+        co->setDefaultValue((dataDir / DEFAULT_WEB_DIR).generic_string());
         co = ConfigDefinition::findConfigSetup(CFG_SERVER_MODEL_NUMBER);
@@ -368,5 +368,5 @@
         auto co = ConfigDefinition::findConfigSetup(CFG_SERVER_STORAGE_SQLITE_INIT_SQL_FILE);
-        co->setDefaultValue(prefixDir / "sqlite3.sql");
+        co->setDefaultValue((prefixDir / "sqlite3.sql").generic_string());
         co = ConfigDefinition::findConfigSetup(CFG_SERVER_STORAGE_SQLITE_UPGRADE_FILE);
-        co->setDefaultValue(prefixDir / "sqlite3-upgrade.xml");
+        co->setDefaultValue((prefixDir / "sqlite3-upgrade.xml").generic_string());
     }
@@ -514,3 +514,3 @@
         auto co = ConfigDefinition::findConfigSetup(CFG_IMPORT_MAGIC_FILE);
-        co->setDefaultValue(magicFile);
+        co->setDefaultValue(magicFile.generic_string());
     }
EOF
# fix src/config/config_manager.cc (version >= 2.0.0)
patch -ulbf src/config/config_manager.cc << EOF
@@ -107,3 +107,3 @@

-    log_info("Loading configuration from: {}", filename.c_str());
+    log_info("Loading configuration from: {}", (const char*)filename.c_str());
     pugi::xml_parse_result result = xmlDoc->load_file(filename.c_str());
@@ -178,6 +178,6 @@
         co = ConfigDefinition::findConfigSetup(CFG_SERVER_STORAGE_MYSQL_INIT_SQL_FILE);
-        co->setDefaultValue(dataDir / "mysql.sql");
+        co->setDefaultValue((dataDir / "mysql.sql").generic_string());
         co->makeOption(root, self);
         co = ConfigDefinition::findConfigSetup(CFG_SERVER_STORAGE_MYSQL_UPGRADE_FILE);
-        co->setDefaultValue(dataDir / "mysql-upgrade.xml");
+        co->setDefaultValue((dataDir / "mysql-upgrade.xml").generic_string());
         co->makeOption(root, self);
@@ -197,6 +197,6 @@
         co = ConfigDefinition::findConfigSetup(CFG_SERVER_STORAGE_SQLITE_INIT_SQL_FILE);
-        co->setDefaultValue(dataDir / "sqlite3.sql");
+        co->setDefaultValue((dataDir / "sqlite3.sql").generic_string());
         co->makeOption(root, self);
         co = ConfigDefinition::findConfigSetup(CFG_SERVER_STORAGE_SQLITE_UPGRADE_FILE);
-        co->setDefaultValue(dataDir / "sqlite3-upgrade.xml");
+        co->setDefaultValue((dataDir / "sqlite3-upgrade.xml").generic_string());
         co->makeOption(root, self);
EOF
# fix src/config/setup/config_setup_autoscan.cc (version >= 2.0.0)
patch -ulbf src/config/setup/config_setup_autoscan.cc << EOF
@@ -123,3 +123,3 @@
         if (entry->getOrig())
-            config->setOrigValue(index, entry->getLocation());
+            config->setOrigValue(index, entry->getLocation().generic_string());         auto pathValue = optValue;
EOF
# fix src/config/setup/config_setup_dynamic.cc (version >= 2.0.0)
patch -ulbf src/config/setup/config_setup_dynamic.cc << EOF
@@ -55,3 +55,3 @@
             if (cont->getTitle().empty()) {
-                cont->setTitle(location.filename());
+                cont->setTitle(location.filename().generic_string());
             }
@@ -91,3 +91,3 @@
         if (entry->getOrig())
-            config->setOrigValue(index, entry->getLocation());
+            config->setOrigValue(index, entry->getLocation().generic_string());         auto pathValue = optValue;
@@ -102,3 +102,3 @@
         if (entry->getOrig())
-            config->setOrigValue(index, entry->getImage());
+            config->setOrigValue(index, entry->getImage().generic_string());
         if (ConfigDefinition::findConfigSetup<ConfigPathSetup>(ATTR_DYNAMIC_CONTAINER_IMAGE)->checkValue(optValue)) {
EOF
# fix src/config/setup/config_setup_path.cc (version >= 2.0.0)
patch -ulbf src/config/setup/config_setup_path.cc << EOF
@@ -35,3 +35,3 @@
     }
-    pathValue.assign(resolvePath(optValue));
+    pathValue.assign(resolvePath(optValue).generic_string());
     return !isSet(ConfigPathArguments::notEmpty) || !pathValue.empty();
EOF
# fix src/config/setup/config_setup_transcoding.cc (version >= 2.0.0)
patch -ulbf src/config/setup/config_setup_transcoding.cc << EOF
@@ -466,3 +466,3 @@
                 if (ConfigDefinition::findConfigSetup<ConfigStringSetup>(ATTR_TRANSCODING_PROFILES_PROFLE_AGENT_COMMAND)->checkValue(optValue)) {
-                    config->setOrigValue(index, entry->getCommand());
+                    config->setOrigValue(index, entry->getCommand().generic_string());
                     entry->setCommand(optValue);
EOF
# fix src/config/setup/config_setup_tweak.cc (version >= 2.0.0)
patch -ulbf src/config/setup/config_setup_tweak.cc << EOF
@@ -114,3 +114,3 @@
         if (entry->getOrig())
-            config->setOrigValue(index, entry->getLocation());
+            config->setOrigValue(index, entry->getLocation().generic_string());
         auto pathValue = optValue;
EOF
# fix src/content/autoscan.cc (version >= 2.0.0)
patch -ulbf src/content/autoscan.cc << EOF
@@ -187,3 +187,3 @@
     }
-    log_debug("Update autoscan {}; location: {}; lmt: {}; last_modified: {}, activeScanCount {}, taskCount: {}", location.c_str(), loc.c_str(), lmt.count(), last_mod_current_scan.count(), activeScanCount, taskCount);
+    log_debug("Update autoscan {}; location: {}; lmt: {}; last_modified: {}, activeScanCount {}, taskCount: {}", (const char*)location.c_str(), (const char*)loc.c_str(), lmt.count(), last_mod_current_scan.count(), activeScanCount, taskCount);
 }
@@ -197,3 +197,3 @@
     }
-    log_debug("Set autoscan {} lmt location: {}; prev_modified: {}; last_modified: {}, activeScanCount {}, taskCount: {}", result, location.c_str(), last_mod_previous_scan.count(), last_mod_current_scan.count(), activeScanCount, taskCount);
+    log_debug("Set autoscan {} lmt location: {}; prev_modified: {}; last_modified: {}, activeScanCount {}, taskCount: {}", result, (const char*)location.c_str(), last_mod_previous_scan.count(), last_mod_current_scan.count(), activeScanCount, taskCount);
     return result;
EOF
# fix src/content/cm_task.cc (version >= 2.0.0)
patch -ulbf src/content/cm_task.cc << EOF
@@ -56,3 +56,3 @@
 {
-    log_debug("running add file task with path {} recursive: {}", dirEnt.path().c_str(), asSetting.recursive);
+    log_debug("running add file task with path {} recursive: {}", (const char*)dirEnt.path().c_str(), asSetting.recursive);
     auto self = shared_from_this();
@@ -62,3 +62,3 @@
         if (asSetting.adir->updateLMT()) {
-            log_debug("CMAddFileTask::run: Updating last_modified for autoscan directory {}", asSetting.adir->getLocation().c_str());
+            log_debug("CMAddFileTask::run: Updating last_modified for autoscan directory {}", (const char*)asSetting.adir->getLocation().c_str());
             content->getContext()->getDatabase()->updateAutoscanDirectory(asSetting.adir);
@@ -107,3 +107,3 @@
     if (adir->updateLMT()) {
-        log_debug("CMRescanDirectoryTask::run: Updating last_modified for autoscan directory {}", adir->getLocation().c_str());
+        log_debug("CMRescanDirectoryTask::run: Updating last_modified for autoscan directory {}", (const char*)adir->getLocation().c_str());
         content->getContext()->getDatabase()->updateAutoscanDirectory(adir);
EOF
# fix src/content/content_manager.cc (version >= 2.0.0)
patch -ulbf src/content/content_manager.cc << EOF
@@ -388,3 +388,3 @@
     if (ec || !isRegularFile(dirEnt, ec))
-        throw_std_runtime_error("Not a file: {} - {}", path.c_str(), ec.message());
+        throw_std_runtime_error("Not a file: {} - {}", (const char*)path.c_str(), ec.message());
 
@@ -395,3 +395,3 @@
         if (!pcdir) {
-            throw_std_runtime_error("Could not add {}", path.c_str());
+            throw_std_runtime_error("Could not add {}", (const char*)path.c_str());
         }
@@ -423,3 +423,3 @@
         if (!obj) { // object ignored
-            log_debug("Hidden file or directory ignored: {}", dirEnt.path().c_str());
+            log_debug("Hidden file or directory ignored: {}", (const char*)dirEnt.path().c_str());
             return obj;
@@ -491,3 +491,3 @@
         if (asSetting.rescanResource && obj->hasResource(ContentHandler::RESOURCE)) {
-            std::string parentPath = dirEnt.path().parent_path();
+            std::string parentPath = (const char*)dirEnt.path().parent_path().c_str();
             updateAttachedResources(asSetting.adir, obj, parentPath, true);
@@ -524,6 +524,6 @@
             addFile(dirEntry, asSetting, true, false);
-            log_debug("Forced rescan of {} for resource {}", parentPath.c_str(), obj->getLocation().c_str());
+            log_debug("Forced rescan of {} for resource {}", (const char*)parentPath.c_str(), (const char*)obj->getLocation().c_str());
             parentRemoved = true;
         } else {
-            log_error("Failed to read {}: {}", parentPath.c_str(), ec.message());
+            log_error("Failed to read {}: {}", (const char*)parentPath.c_str(), ec.message());
         }
@@ -648,3 +648,3 @@
 
-    log_debug("Rescanning location: {}", location.c_str());
+    log_debug("Rescanning location: {}", (const char*)location.c_str());
 
@@ -657,6 +657,6 @@
         if (ec) {
-            log_error("_rescanDirectory: Failed to iterate {}, {}", location.c_str(), ec.message());
+            log_error("_rescanDirectory: Failed to iterate {}, {}", (const char*)location.c_str(), ec.message());
         }
     } else {
-        log_error("Could not open {}: {}", location.c_str(), ec.message());
+        log_error("Could not open {}: {}", (const char*)location.c_str(), ec.message());
     }
@@ -686,3 +686,3 @@
 
-    log_debug("Rescanning options {}: recursive={} hidden={} followSymlinks={}", location.c_str(), asSetting.recursive, asSetting.hidden, asSetting.followSymlinks);
+    log_debug("Rescanning options {}: recursive={} hidden={} followSymlinks={}", (const char*)location.c_str(), asSetting.recursive, asSetting.hidden, asSetting.followSymlinks);
 
@@ -721,3 +721,3 @@
             if (!adir->isValid()) {
-                log_info("lost autoscan for {}", newPath.c_str());
+                log_info("lost autoscan for {}", (const char*)newPath.c_str());
                 getImportService(adir)->finishScan(location, parentContainer, lastModifiedNewMax);
@@ -732,3 +732,3 @@
                 }
-                log_debug("link {} skipped", newPath.c_str());
+                log_debug("link {} skipped", (const char*)newPath.c_str());
                 continue;
@@ -784,3 +784,3 @@
                 if (newObject) {
-                    log_debug("rescanSubDirectory {}", newPath.c_str());
+                    log_debug("rescanSubDirectory {}", (const char*)newPath.c_str());
                     list.erase(newObject->getID());
@@ -789,3 +789,3 @@
                 } else {
-                    log_debug("addSubDirectory {}", newPath.c_str());
+                    log_debug("addSubDirectory {}", (const char*)newPath.c_str());
 
@@ -801,3 +801,3 @@
                     if (!adir->isValid()) {
-                        log_info("lost autoscan for {}", newPath.c_str());
+                        log_info("lost autoscan for {}", (const char*)newPath.c_str());
                         getImportService(adir)->finishScan(location, parentContainer, lastModifiedNewMax);
@@ -812,3 +812,3 @@
                     addFileInternal(dirEnt, rootpath, asSetting, true, thisTaskID, task->isCancellable());
-                    log_debug("addSubDirectory {} done", newPath.c_str());
+                    log_debug("addSubDirectory {} done", (const char*)newPath.c_str());
                 }
@@ -825,3 +825,3 @@
             if (ec) {
-                log_error("ContentManager::_rescanDirectory {}: Failed to read {}, {}", location.c_str(), newPath.c_str(), ec.message());
+                log_error("ContentManager::_rescanDirectory {}: Failed to read {}, {}", (const char*)location.c_str(), (const char*)newPath.c_str(), ec.message());
             }
@@ -893,3 +893,3 @@
     if (!subDir.exists(ec) || !subDir.is_directory(ec)) {
-        throw_std_runtime_error("Could not list directory {}: {}", subDir.path().c_str(), ec.message());
+        throw_std_runtime_error("Could not list directory {}: {}", (const char*)subDir.path().c_str(), ec.message());
     }
@@ -899,3 +899,3 @@
     if (!parentContainer || !parentContainer->isContainer()) {
-        log_error("addRecursive: Failed to load parent container of {}", subDir.path().c_str());
+        log_error("addRecursive: Failed to load parent container of {}", (const char*)subDir.path().c_str());
         return;
@@ -906,3 +906,3 @@
     if (task) {
-        log_debug("Task valid? [{}], task path: [{}]", task->isValid(), subDir.path().c_str());
+        log_debug("Task valid? [{}], task path: [{}]", task->isValid(), (const char*)subDir.path().c_str());
     }
@@ -913,3 +913,3 @@
     if (ec) {
-        log_error("addRecursive: Failed to iterate {}, {}", subDir.path().c_str(), ec.message());
+        log_error("addRecursive: Failed to iterate {}, {}", (const char*)subDir.path().c_str(), ec.message());
         return;
@@ -970,3 +970,3 @@
         } catch (const std::runtime_error& ex) {
-            log_warning("skipping {} (ex:{})", newPath.c_str(), ex.what());
+            log_warning("skipping {} (ex:{})", (const char*)newPath.c_str(), ex.what());
         }
@@ -1205,3 +1205,3 @@
     if (!dirEnt.exists(ec)) {
-        log_warning("File or directory does not exist: {} ({})", dirEnt.path().c_str(), ec.message());
+        log_warning("File or directory does not exist: {} ({})", (const char*)dirEnt.path().c_str(), ec.message());
         return nullptr;
@@ -1219,6 +1219,6 @@
         // only regular files and directories are supported
-        throw_std_runtime_error("ContentManager: skipping file {}", dirEnt.path().c_str());
+        throw_std_runtime_error("ContentManager: skipping file {}", (const char*)dirEnt.path().c_str());
     }
     if (ec) {
-        log_error("File or directory cannot be read: {} ({})", dirEnt.path().c_str(), ec.message());
+        log_error("File or directory cannot be read: {} ({})", (const char*)dirEnt.path().c_str(), ec.message());
     }
@@ -1419,5 +1419,5 @@
         auto addTask = std::static_pointer_cast<CMAddFileTask>(t);
-        log_debug("comparing, task path: {}, remove path: {}", addTask->getPath().c_str(), path.c_str());
+        log_debug("comparing, task path: {}, remove path: {}", (const char*)addTask->getPath().c_str(), (const char*)path.c_str());
         if (isSubDir(addTask->getPath(), path)) {
-            log_debug("Invalidating task with path {}", addTask->getPath().c_str());
+            log_debug("Invalidating task with path {}", (const char*)addTask->getPath().c_str());
             addTask->invalidate();
@@ -1596,3 +1596,3 @@
 
-            log_debug("location: {}", obj->getLocation().c_str());
+            log_debug("location: {}", (const char*)obj->getLocation().c_str());
 
EOF
# fix src/content/import_service.cc (version >= 2.0.0)
patch -ulbf src/content/import_service.cc << EOF
@@ -211,3 +211,3 @@
     if (ec) {
-        log_error("Failed to start {}, {}", location.c_str(), ec.message());
+        log_error("Failed to start {}, {}", (const char*)location.c_str(), ec.message());
         return;
@@ -216,3 +216,3 @@
     if (ec) {
-        log_error("Failed to start {}, {}", location.c_str(), ec.message());
+        log_error("Failed to start {}, {}", (const char*)location.c_str(), ec.message());
         return;
@@ -240,6 +240,6 @@
     }
-    log_debug("import of {} left {} item(s) to be deleted", location.c_str(), currentContent.size());
+    log_debug("import of {} left {} item(s) to be deleted", (const char*)location.c_str(), currentContent.size());
 
     if (!task && autoscanDir && autoscanDir->updateLMT()) {
-        log_debug("Updating last_modified for autoscan directory {}", autoscanDir->getLocation().c_str());
+        log_debug("Updating last_modified for autoscan directory {}", (const char*)autoscanDir->getLocation().c_str());
         database->updateAutoscanDirectory(autoscanDir);
@@ -261,3 +261,3 @@
     if (ec) {
-        log_error("Failed to iterate {}, {}", location.c_str(), ec.message());
+        log_error("Failed to iterate {}, {}", (const char*)location.c_str(), ec.message());
         return;
@@ -276,3 +276,3 @@
                 contentStateCache[entryPath]->setObject(ImportState::Broken, nullptr);
-                log_error("ImportService::readDir {}: Failed to read {}, {}", location.c_str(), entryPath.c_str(), ec.message());
+                log_error("ImportService::readDir {}: Failed to read {}, {}", (const char*)location.c_str(), (const char*)entryPath.c_str(), ec.message());
             }
@@ -280,3 +280,3 @@
             contentStateCache[entryPath]->setObject(ImportState::Broken, nullptr);
-            log_error("ImportService::readDir {}: Failed to read {}, {}", location.c_str(), entryPath.c_str(), ec.message());
+            log_error("ImportService::readDir {}: Failed to read {}, {}", (const char*)location.c_str(), (const char*)entryPath.c_str(), ec.message());
         }
@@ -295,3 +295,3 @@
             contentStateCache[entryPath]->setObject(ImportState::Broken, nullptr);
-            log_error("ImportService::readFile {}: Failed to navigate up {}, {}", location.c_str(), entryPath.c_str(), ec.message());
+            log_error("ImportService::readFile {}: Failed to navigate up {}, {}", (const char*)location.c_str(), (const char*)entryPath.c_str(), ec.message());
             break;
@@ -374,3 +374,3 @@
                     stateEntry->setObject(ImportState::Broken, cdsObj);
-                    log_error("createContainers: Failed to load parent container {}, {}", contPath.c_str(), e.what());
+                    log_error("createContainers: Failed to load parent container {}, {}", (const char*)contPath.c_str(), e.what());
                 }
@@ -484,6 +484,6 @@
     if (mimetype.empty()) {
-        log_error("Mime not found for file {}", objectPath.c_str());
+        log_error("Mime not found for file {}", (const char*)objectPath.c_str());
         return nullptr;
     }
-    log_debug("Mime '{}' for file {}", mimetype, objectPath.c_str());
+    log_debug("Mime '{}' for file {}", mimetype, (const char*)objectPath.c_str());
 
@@ -498,3 +498,3 @@
     }
-    log_debug("UpnpClass '{}' for file {}", upnpClass, objectPath.c_str());
+    log_debug("UpnpClass '{}' for file {}", upnpClass, (const char*)objectPath.c_str());
 
@@ -582,3 +582,3 @@
             if (contentType == CONTENT_TYPE_PLAYLIST)
-                log_warning("Playlist {} will not be parsed: Gerbera was compiled without JS support!", cdsObject->getLocation().c_str());
+                log_warning("Playlist {} will not be parsed: Gerbera was compiled without JS support!", (const char*)cdsObject->getLocation().c_str());
 #endif // HAVE_JS
@@ -750,3 +750,3 @@
                 if (field == "LOCATION") {
-                    std::string location = item->getLocation().c_str();
+                    std::string location = (const char*)item->getLocation().c_str();
                     if (!location.empty()) {
EOF
# fix CMakeLists.txt (version >= 1.9.0)
sed -i.bak -e "s/FATAL_ERROR\(.*Gerbera requires libupnp with IPv6 support\)/WARNING\1/" CMakeLists.txt
mkdir -p build_win &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DWITH_NPUPNP:BOOL=OFF -DWITH_MYSQL:BOOL=OFF -DWITH_JS:BOOL=OFF -DWITH_INOTIFY:BOOL=OFF -DWITH_SYSTEMD:BOOL=OFF -DSPDLOG_FMT_EXTERNAL=ON -DSPDLOG_BUILD_SHARED=OFF -DWITH_TESTS:BOOL=OFF -Dlibuuid_INCLUDE_DIRS:STRING="$MINGWPREFIX/include/portable-uuid" -Dlibuuid_LIBRARIES:STRING="-lportable-uuid" -DSOCKET_LIBRARY:STRING="-lws2_32" -DCMAKE_CXX_FLAGS:STRING="-fpermissive -I$(pwd)/winfix" -DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) -S. -Bbuild_win &&
 #-Dfmt_DIR:PATH= -Dspdlog_DIR:PATH= 
 wl-showstatus build-install &&
 make -Cbuild_win install/strip &&
    echo OK
#mkdir -p build_win &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DWITH_NPUPNP:BOOL=OFF -DWITH_MYSQL:BOOL=OFF -DWITH_JS:BOOL=OFF -DWITH_INOTIFY:BOOL=OFF -DWITH_SYSTEMD:BOOL=OFF -DSPDLOG_FMT_EXTERNAL=ON -DSPDLOG_BUILD_SHARED=OFF -DWITH_TESTS:BOOL=OFF -Dlibuuid_INCLUDE_DIRS:STRING="$MINGWPREFIX/include/portable-uuid" -Dlibuuid_LIBRARIES:STRING="-lportable-uuid" -DSOCKET_LIBRARY:STRING="-lws2_32" -DCMAKE_CXX_FLAGS:STRING="-fpermissive -I$(pwd)/winfix" -DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) -S. -Bbuild_win &&
# #-Dfmt_DIR:PATH= -Dspdlog_DIR:PATH= 
# wl-showstatus build-install &&
# ninja -Cbuild_win install/strip &&
#    echo OK
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




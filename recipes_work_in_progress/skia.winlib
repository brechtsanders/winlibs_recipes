export NAME="skia"
export STATUS=
#export URL=http://code.google.com/p/skia/
export URL=https://skia.org/
export BASENAME=skia
export DESCRIPTION="Skia is a complete 2D graphic library for drawing Text, Geometries, and Images."
export CATEGORY=graphics
export TYPE=library
#export VERSION=m63
#export VERSIONDATE=20171107
#export VERSION=m70
#export VERSIONDATE=20180910
#export VERSION=m79
#export VERSIONDATE=20191101
#export VERSION=m88
#export VERSIONDATE=20201226
#export VERSION=m89
#export VERSIONDATE=20210114
#export VERSION=m90
#export VERSIONDATE=20210226
#export VERSION=m91
#export VERSIONDATE=20210408
#export VERSION=m92
#export VERSIONDATE=20210521
#export VERSION=m93
#export VERSIONDATE=20210716
#export VERSION=m94
#export VERSIONDATE=20210813
####assert(win_vc != "")  # Could not find VC installation. Set win_vc to your VC directory.
#export VERSION=m95
#export VERSIONDATE=20210910
#export VERSION=m96
#export VERSIONDATE=20211008
#export VERSION=m97
#export VERSIONDATE=20211105
#export VERSION=m98
#export VERSIONDATE=20211210
#export VERSION=m99
#export VERSIONDATE=20220121
export VERSION=m100
export VERSIONDATE=20220218
####ninja: error: '../../third_party/externals/zlib/google/compression_utils_portable.cc', needed by 'obj/third_party/externals/zlib/google/compression_utils_portable.compression_utils_portable.obj', missing and no known rule to make it
wl-showstatus --package-version
export DEPENDANCIES=
export OPTIONALDEPENDANCIES=
export BUILDDEPENDANCIES=gn,ninja
export LICENSEFILE=LICENSE
export LICENSETYPE=BSD
export DOWNLOADURL="https://skia.googlesource.com/skia/+refs m"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://skia.googlesource.com/skia/+archive/chrome/$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#mv $TARBALLDIR/$BASENAME/$VERSION.tar.gz $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
wl-wait4deps
#http://chromium-browser-source.commondatastorage.googleapis.com/chromium_tarball.html
#http://chromium-browser-source.commondatastorage.googleapis.com/chromium.r160553.tgz
#svn checkout http://skia.googlecode.com/svn/trunk/ skia-read-only
mkdir -p $BASENAME-$VERSION
#tar xfz $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz -C$BASENAME-$VERSION
tar xfz $TARBALLDIR/$BASENAME/$VERSION.tar.gz -C$BASENAME-$VERSION
cd $BASENAME-$VERSION
# fix gn/BUILDCONFIG.gn (version >= m89)
patch -ulbf gn/BUILDCONFIG.gn << EOF
@@ -122,3 +122,3 @@

-if (target_os == "win") {
+if (target_os == "win_MSVC_ONLY") {
   # By default we look for 2017 (Enterprise, Pro, and Community), then 2015. If MSVC is installed in a
@@ -133,3 +133,3 @@

-if (target_os == "win") {
+if (target_os == "win_MSVC_ONLY") {
   if (win_toolchain_version == "") {
EOF
#gn gen out/Static --args='is_official_build=true is_debug=false text_tests_enabled=false'
#gn gen out/Shared --args='is_official_build=true is_debug=false is_component_build=true text_tests_enabled=false'
#gn args out/Shared --list
#ninja -Cout/Static
#ninja -Cout/Shared
wl-showstatus configure &&
 cd third_party &&
 PATH=$PYDIR:$PATH gn gen build_win --args='is_official_build=true' &&
 #PATH=$PYDIR:$PATH gn gen build_win --args='target_cpu="'$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "x64"; else "x86"; fi)'" cc="gcc" cxx="g++" is_debug=false is_official_build=true skia_enable_pdf=false' &&
 cd .. &&
 #PATH=$PYDIR:$PATH gn gen build_win --args='is_official_build=true' &&
 PATH=$PYDIR:$PATH gn gen build_win --args='is_official_build=true skia_enable_pdf=false' &&
 #PATH=$PYDIR:$PATH gn gen out/build_win --args='os="win" target_os="win" target_cpu="'$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "x64"; else "x86"; fi)'" is_gcc=true is_clang=false is_debug=false treat_warnings_as_errors=false' &&
 #PATH=$PYDIR:$PATH gn gen build_win --args='target_cpu="'$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "x64"; else "x86"; fi)'" cc="gcc" cxx="g++" is_debug=false skia_enable_pdf=false' &&
 wl-showstatus build &&
 ninja -Cthird_party/build_win &&
 ninja -Cbuild_win &&
    echo OK
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && rm -rf $BASENAME-$VERSION
####See also: https://www.programmersought.com/article/9073691401/
####See also: https://skia.org/docs/user/build/



wl-download -v -d . https://raw.githubusercontent.com/msys2/MINGW-packages/master/mingw-w64-skia/0001-add-mingw-toolchain.patch
wl-download -v -d . https://raw.githubusercontent.com/msys2/MINGW-packages/master/mingw-w64-skia/0007-add-mingw-toolchain-build.patch
patch -ulbf -N -p1 < 0001-add-mingw-toolchain.patch
patch -ulbf -N -p1 < 0007-add-mingw-toolchain-build.patch

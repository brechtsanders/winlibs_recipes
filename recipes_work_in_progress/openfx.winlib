export NAME="OpenFX"
export STATUS=
export URL=https://github.com/AcademySoftwareFoundation/openfx
export BASENAME=openfx
export DESCRIPTION="OpenFX effects API"
export CATEGORY=
export TYPE=library
#export VERSION=1.4
#export VERSIONDATE=20231002
#export VERSION=1.5
#export VERSIONDATE=20240829
#export VERSION=1.5s
#export VERSIONDATE=20241127
export VERSION=main
export VERSIONDATE=20231002
wl-showstatus --package-version
export DEPENDENCIES=pthreads,fmt,spdlog
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE.md
export LICENSETYPE=BSD
export DOWNLOADURL="https://github.com/AcademySoftwareFoundation/openfx/releases OFX_Release_ _TAG.tar.gz"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/AcademySoftwareFoundation/openfx/archive/refs/heads/$VERSION.tar.gz
#export DOWNLOADSOURCEURL=https://github.com/AcademySoftwareFoundation/openfx/archive/refs/tags/OFX_Release_$(echo $VERSION|tr . _)_TAG.tar.gz
#export DOWNLOADSOURCEURL=https://github.com/AcademySoftwareFoundation/openfx/archive/refs/tags/OFX_Release_$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/$VERSION.tar.gz
cd $BASENAME-$VERSION
#tar xz --force-local -f $TARBALLDIR/$BASENAME/OFX_Release_$(echo $VERSION|tr . _)_TAG.tar.gz
#cd openfx-OFX_Release_$(echo $VERSION|tr . _)_TAG
#tar xz --force-local -f $TARBALLDIR/$BASENAME/OFX_Release_$VERSION.tar.gz
#cd openfx-OFX_Release_$VERSION
# fix HostSupport/include/ofxhBinary.h (version >= 1.5s)
mv HostSupport/include/ofxhBinary.h HostSupport/include/ofxhBinary.h.bak &&
echo -e "#ifndef WINDOWS\n#define WINDOWS\n#endif" > HostSupport/include/ofxhBinary.h &&
cat HostSupport/include/ofxhBinary.h.bak >> HostSupport/include/ofxhBinary.h
# fix dllexport/dllimport in include/ofxCore.h (version >= 1.5s)
patch -ulbf include/ofxCore.h << EOF
@@ -24,4 +24,10 @@
  */
-#if defined(WIN32) || defined(WIN64)
-       #define OfxExport extern __declspec(dllexport)
+#if defined(_WIN32)
+    #ifdef STATIC
+       #define OfxExport
+    #elif defined(OfxHost_EXPORTS) || defined(OfxSupport_EXPORTS)
+       #define OfxExport __declspec(dllexport)
+    #else
+       #define OfxExport __declspec(dllimport)
+    #endif
 #else
EOF
# fix dllexport/dllimport in Support/include/ofxsImageEffect.h (version >= 1.5s)
sed -i.bak -e "s/^\s*class /&OfxExport /; s/^\(\s*\)\(.* \(getPluginIDs\|catchException\)(.*);\)/\1OfxExport \2/" Support/include/ofxsImageEffect.h
# fix CMakeLists.txt
patch -ulbf CMakeLists.txt << EOF
@@ -23,3 +23,5 @@
 find_package(EXPAT)
+if(!WIN32)
 find_package(opengl_system)
+endif()

EOF
# fix target expat::expat
sed -i.bak -e "s/expat::expat/expat/" HostSupport/CMakeLists.txt

# fix CMakeLists.txt (version >= 1.5s)
patch -ulbf CMakeLists.txt << EOF
@@ -64,4 +64,4 @@
 find_package(EXPAT)
-find_package(opengl_system REQUIRED)
-find_package(cimg REQUIRED)
+#find_package(opengl_system REQUIRED)
+#find_package(cimg REQUIRED)
 find_package(spdlog REQUIRED)
EOF

# also allow building shared libraries
sed -i.bak2 -e "s/\(add_library([^ ]*\) STATIC/\1/" HostSupport/CMakeLists.txt Support/Library/CMakeLists.txt

#grep -wi add_library $(find -name CMakeLists.txt -or -name '*.cmake')
#mkdir -p build_test && cmake.exe -G"MSYS Makefiles" -DOFX_SUPPORTS_OPENGLRENDER:BOOL=OFF -S. -Bbuild_test -LH && echo OK; rm -rf build_test

#export BUILDDEPENDENCIES=cmake
#PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ 
#-DCMAKE_SYSTEM_NAME=Windows 
#-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
#mkdir -p build_win &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -S. -Bbuild_win &&
# #wl-showstatus build &&
# #cmake.exe --build build_win &&
# #make -Cbuild_win &&
# wl-showstatus build-install &&
# make -Cbuild_win install/strip &&
#    echo OK

#export BUILDDEPENDENCIES=cmake,ninja
#PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ 
#-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
mkdir -p build_win &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -S. -Bbuild_win &&
 wl-showstatus build &&
 ninja -Cbuild_win &&
 wl-showstatus build-install &&
 ninja -Cbuild_win install/strip &&
    echo OK

#export BUILDDEPENDENCIES=cmake,ninja
mkdir -p build_static build_shared &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DOFX_SUPPORTS_OPENGLRENDER:BOOL=ON -DBUILD_EXAMPLE_PLUGINS:BOOL=OFF -DCMAKE_CXX_FLAGS:STRING="-DSTATIC" -S. -Bbuild_static &&
 #-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DOFX_SUPPORTS_OPENGLRENDER:BOOL=ON -DBUILD_EXAMPLE_PLUGINS:BOOL=OFF -S. -Bbuild_shared &&
 ## fix execution of Python scripts
 #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|glib-genmarshal\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
 ## fix missing link libraries
 #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lws2_32/" build_shared/build.ninja &&
 wl-showstatus build &&
 ninja -Cbuild_static &&
 wl-showstatus build &&
 ninja -Cbuild_shared &&
 wl-showstatus build-install &&
 ninja -Cbuild_static install/strip &&
 wl-showstatus build-install &&
 ninja -Cbuild_shared install/strip &&
    echo OK
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
# #wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf openfx-OFX_Release_$(echo $VERSION|tr . _)_TAG




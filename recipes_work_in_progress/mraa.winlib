export NAME="mraa"
export STATUS=
export URL=http://mraa.io
#export URL=https://iotdk.intel.com/docs/master/mraa/
#export URL=https://github.com/intel-iot-devkit/mraa
export BASENAME=mraa
export DESCRIPTION="Libmraa is a C/C++ library with bindings to Java, Python and JavaScript to interface with the IO on Galileo, Edison & other platforms, with a structured and sane API where port names/numbering matches the board that you are on. Use of libmraa does not tie you to specific hardware with board detection done at runtime you can create portable code that will work across the supported platforms."
export CATEGORY=hardware
export TYPE=library
#export VERSION=1.8.0
#export VERSIONDATE=20180122
#export VERSION=1.9.0
#export VERSIONDATE=20180216
#export VERSION=2.0.0
#export VERSIONDATE=20180907
#export VERSION=2.1.0
#export VERSIONDATE=20200128
export VERSION=2.2.0
export VERSIONDATE=20201029
####include/mraa_internal.h:32:10: fatal error: fnmatch.h: No such file or directory
wl-showstatus --package-version
export DEPENDENCIES=nodejs
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja,swig
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=COPYING
export LICENSETYPE=MIT
#export DOWNLOADURL="https://github.com/intel-iot-devkit/mraa/releases"
export DOWNLOADURL="https://github.com/intel-iot-devkit/mraa/tags"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://github.com/intel-iot-devkit/mraa/archive/v$VERSION.tar.gz
export DOWNLOADSOURCEURL=https://github.com/intel-iot-devkit/mraa/archive/refs/tags/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#mv $TARBALLDIR/$BASENAME/v$VERSION.tar.gz $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
wl-wait4deps
wl-showstatus extract
#tar xz --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
tar xz --force-local -f $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd $BASENAME-$VERSION
#mkdir -p build_test; cd build_test; cmake.exe -G"MSYS Makefiles" . -LH && echo OK; cd ..; rm -rf build_test
#rm -rf CMakeCache.txt CMakeFiles; cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release . -LH && echo OK
mkdir -p build_win &&
 wl-showstatus configure &&
 cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DSYSTEM_USR_DIR:PATH=$MINGWPREFIX/usr -DPYTHON_EXECUTABLE:FILEPATH=$PY2DIR/python.exe -DPYTHON_LIBRARIES:PATH=$PY2DIR/libs -DPYTHON_INCLUDE_DIRS:PATH=$PY2DIR/include -DPYTHON3_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DPYTHON3_LIBRARIES:PATH=$PYDIR/libs -DPYTHON3_INCLUDE_DIRS:PATH=$PYDIR/include -DSWIG_DIR:FILEPATH=$(which swig) -DBUILDSWIG:BOOL=OFF -DBUILDDOC:BOOL=OFF -DENABLEEXAMPLES:BOOL=OFF -DBUILDTESTS:BOOL=OFF -S. -Bbuild_win &&
 wl-showstatus build-install &&
 ninja -Cbuild_win install/strip &&
    echo OK

#export BUILDDEPENDENCIES=cmake
#export OPTIONALBUILDDEPENDENCIES=
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cd build_static &&
# cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF .. &&
# cd .. &&
# wl-showstatus configure &&
# cd build_shared &&
# cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON .. &&
# cd .. &&
# wl-showstatus build-install &&
# make -Cbuild_static install/strip &&
# wl-showstatus build-install &&
# make -Cbuild_shared install/strip &&
#    echo OK
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION

#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library static -D documentation=true . build_static &&
# wl-showstatus configure &&
# PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library shared -D documentation=true . build_shared &&
# wl-showstatus build-install &&
# PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib ninja -C build_static install/strip &&
# wl-showstatus build-install &&
# PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib ninja -C build_shared install/strip &&
#    echo OK && find . -name '*.a'
## wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




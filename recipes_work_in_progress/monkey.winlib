export NAME="Monkey"
export STATUS=
export URL=http://monkey-project.com/
export BASENAME=monkey
export DESCRIPTION="Monkey is a lightweight and powerful web server and development stack for Linux & OSX. It has been designed to be very scalable with low memory and CPU consumption, the perfect solution for embedded devices. Made for ARM, x86 and x64."
export CATEGORY=communication
export TYPE=application
#export VERSION=1.6.9
#export VERSIONDATE=20220128
#export VERSION=1.7.0
#export VERSIONDATE=20230714
#export VERSION=1.7.1
#export VERSIONDATE=20230721
#export VERSION=1.7.2
#export VERSIONDATE=20230921
#export VERSION=1.7.3
#export VERSIONDATE=20240111
#export VERSION=1.7.4
#export VERSIONDATE=20240409
#export VERSION=1.7.5
#export VERSIONDATE=20240612
export VERSION=1.8.0
export VERSIONDATE=20240822
wl-showstatus --package-version
export DEPENDENCIES=
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=Apache
export DOWNLOADURL="https://github.com/monkey/monkey/tags"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://monkey-project.com/releases/$(echo $VERSION|sed -e "s/\([0-9]*\.[0-9]*\)\..*/\1/")/monkey-$VERSION.tar.gz
export DOWNLOADSOURCEURL=https://github.com/monkey/monkey/archive/refs/tags/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
#tar xz --force-local -f $TARBALLDIR/$BASENAME/monkey-$VERSION.tar.gz
tar xz --force-local -f $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd monkey-$VERSION
# fix mk_core/deps/libevent/evdns.c (version >= 1.7.5)
patch -ulbf mk_core/deps/libevent/evdns.c << EOF
@@ -3322,3 +3322,3 @@
 #ifndef EVENT__HAVE_STRTOK_R
-static char *
+char *
 strtok_r(char *s, const char *delim, char **state) {
EOF
# fix plugins/mandril/mandril.c (version >= 1.7.5)
patch -ulbf plugins/mandril/mandril.c << EOF
@@ -25,2 +25,5 @@
 /* system */
+#ifdef _WIN32
+#include <winsock2.h>
+#else
 #include <sys/socket.h>
@@ -28,2 +31,3 @@
 #include <arpa/inet.h>
+#endif
 #include <sys/stat.h>
EOF
# fix mk_core/mk_rconf.c (version >= 1.7.5)
patch -ulbf mk_core/mk_rconf.c << EOF
@@ -25,3 +25,3 @@
 #include <sys/stat.h>
-#ifndef _MSC_VER
+#ifndef _WIN32
 #include <glob.h>
EOF
# fix include/monkey/mk_core/external/winpthreads.h (version >= 1.7.5)
patch -ulbf include/monkey/mk_core/external/winpthreads.h << EOF
@@ -103,3 +103,3 @@
 /* Windows doesn't have this, so declare it ourselves. */
-#if (_MSC_VER < 1900)
+#if (_MSC_VER < 1900 && !defined(__MINGW32__))
 struct timespec
EOF
# fix include/monkey/mk_core/mk_string.h (version >= 1.7.5)
patch -ulbf include/monkey/mk_core/mk_string.h << EOF
@@ -28,3 +28,3 @@

-#if defined(_WIN32) || defined(_WIN64)
+#if (defined(_WIN32) || defined(_WIN64)) && !defined(__MINGW32__)
   #define snprintf _snprintf
EOF
# fix mk_core/mk_utils.c (version >= 1.7.5)
patch -ulbf mk_core/mk_utils.c << EOF
@@ -48,2 +48,3 @@
   #endif
+#ifndef __MINGW32__
     struct timezone {
@@ -72,2 +73,3 @@
     }
+#endif

EOF
# fix include/monkey/mk_scheduler.h (version >= 1.8.0)
patch -ulbf include/monkey/mk_scheduler.h << EOF
@@ -39,3 +39,3 @@

-#ifdef _WIN32
+#if defined(_WIN32) && !defined(__MINGW64_VERSION_MAJOR)
     /* The pid field in the mk_sched_worker structure is ignored in platforms other than
EOF
# fix include/monkey/mk_config.h (version >= 1.8.0)
patch -ulbf include/monkey/mk_config.h << EOF
@@ -29,3 +29,5 @@
 #ifdef _WIN32
+#ifndef __MINGW64_VERSION_MAJOR
 typedef uint32_t mode_t;
+#endif
 typedef uint32_t uid_t;
EOF
# fix undefined NAME_MAX in plugins/dirlisting/dirlisting.h (version >= 1.8.0)
mv plugins/dirlisting/dirlisting.h plugins/dirlisting/dirlisting.h.bak &&
echo "#define NAME_MAX 255" > plugins/dirlisting/dirlisting.h &&
cat plugins/dirlisting/dirlisting.h.bak >> plugins/dirlisting/dirlisting.h
# fix plugins/dirlisting/dirlisting.c (version >= 1.8.0)
patch -ulbf plugins/dirlisting/dirlisting.c << EOF
@@ -33,3 +33,3 @@
 #include <time.h>
-#include <dirent.h>
+#include "../../include/monkey/mk_core/external/dirent.h"
 #include <sys/stat.h>
EOF

#grep -wi add_library $(find -name CMakeLists.txt -or -name '*.cmake')
mkdir -p build_win &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -S. -Bbuild_win &&
 #wl-showstatus build &&
 #ninja -Cbuild_win &&
 wl-showstatus build-install &&
 make -Cbuild_win install/strip &&
    echo OK

#export BUILDDEPENDENCIES=cmake,ninja
#export OPTIONALBUILDDEPENDENCIES=
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -S. -Bbuild_static &&
# #-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -S. -Bbuild_shared &&
# ## fix execution of Python scripts
# #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|glib-genmarshal\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
# ## fix missing link libraries
# #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lws2_32/" build_win/build.ninja &&
# #wl-showstatus build &&
# #ninja -Cbuild_static &&
# #wl-showstatus build &&
# #ninja -Cbuild_shared &&
# wl-showstatus build-install &&
# ninja -Cbuild_static install/strip &&
# wl-showstatus build-install &&
# ninja -Cbuild_shared install/strip &&
#    echo OK

# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf monkey-$VERSION




export NAME="clang-tools-extra"
export STATUS=
export URL=https://clang.llvm.org/extra/
export BASENAME=clang-tools-extra
export DESCRIPTION="Extra tools built using Clang's tooling APIs."
export CATEGORY=development
export TYPE=application
#export VERSION=10.0.0
#export VERSIONDATE=20200331
####CMake Error at clang-apply-replacements/CMakeLists.txt:5 (add_clang_library): Unknown CMake command "add_clang_library".
#export VERSION=10.0.1
#export VERSIONDATE=20200816
#export VERSION=11.0.0
#export VERSIONDATE=20201012
export VERSION=11.1.0
export VERSIONDATE=20210408
#export VERSION=12.0.0
#export VERSIONDATE=20210419
#export VERSION=13.0.1
#export VERSIONDATE=20220214
wl-showstatus --package-version
export DEPENDENCIES=llvm,clang
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE.TXT
export LICENSETYPE=Apache
#export DOWNLOADURL="https://releases.llvm.org/download.html"
export DOWNLOADURL="https://github.com/llvm/llvm-project/releases/  clang-tools-extra- .src.tar.xz"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/llvm/llvm-project/releases/download/llvmorg-$VERSION/$BASENAME-$VERSION.src.tar.xz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xJ --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.src.tar.xz
cd $BASENAME-$VERSION.src
# fix clang-tidy/ClangTidyForceLinker.h (version >= 10.0.1)
patch -ulbf clang-tidy/ClangTidyForceLinker.h << EOF
@@ -82,2 +82,5 @@

+#ifdef __MINGW32__
+#define CLANG_TIDY_DISABLE_STATIC_ANALYZER_CHECKS
+#endif
 #if CLANG_ENABLE_STATIC_ANALYZER &&                                            \\
EOF
# fix CMakeLists.txt
mv CMakeLists.txt CMakeLists.txt.bak &&
#echo "include_directories(BEFORE $MINGWPREFIX/share/llvm/cmake)" > CMakeLists.txt &&
echo "include(AddLLVM)" > CMakeLists.txt &&
echo "include(AddClang)" >> CMakeLists.txt &&
cat CMakeLists.txt.bak >> CMakeLists.txt
# fix clangd/CMakeLists.txt
mv clangd/CMakeLists.txt clangd/CMakeLists.txt.bak &&
#echo "include_directories(BEFORE $MINGWPREFIX/share/llvm/cmake)" > clangd/CMakeLists.txt &&
echo "include(AddLLVM)" > clangd/CMakeLists.txt &&
echo "include(AddClang)" >> clangd/CMakeLists.txt &&
cat clangd/CMakeLists.txt.bak >> clangd/CMakeLists.txt
#mkdir -p build &&
# wl-showstatus configure &&
# #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DCMAKE_MODULE_PATH:PATH="$MINGWPREFIX/share/llvm/lib/cmake/llvm:$MINGWPREFIX/share/llvm/lib/cmake/modules" -DLLVM_INSTALL_TOOLCHAIN_ONLY:BOOL=ON -DLLVM_TARGETS_CONFIGURED:BOOL=ON -DCLANG_ENABLE_CLANGD:BOOL=ON -S. -Bbuild &&
# #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;" -DCMAKE_MODULE_PATH:PATH="$MINGWPREFIX/share/llvm/lib/cmake/llvm:$MINGWPREFIX/share/llvm/lib/cmake/modules" -DLLVM_INSTALL_TOOLCHAIN_ONLY:BOOL=ON -DLLVM_TARGETS_CONFIGURED:BOOL=ON -DCLANG_ENABLE_CLANGD:BOOL=ON -S. -Bbuild &&
# #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DLLVM_ENABLE_PROJECTS="clang-tools-extra" -DCMAKE_MODULE_PATH:PATH="$MINGWPREFIX/share/llvm/lib/cmake/llvm:$MINGWPREFIX/share/llvm/lib/cmake/modules" -DLLVM_INSTALL_TOOLCHAIN_ONLY:BOOL=ON -DLLVM_TARGETS_CONFIGURED:BOOL=ON -DCLANG_ENABLE_CLANGD:BOOL=ON -S. -Bbuild &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DLLVM_ENABLE_PROJECTS="clang-tools-extra" -DCMAKE_MODULE_PATH:PATH="$MINGWPREFIX/share/llvm/lib/cmake/llvm:$MINGWPREFIX/share/llvm/lib/cmake/modules" -DLLVM_INSTALL_TOOLCHAIN_ONLY:BOOL=ON -DLLVM_TARGETS_CONFIGURED:BOOL=ON -DCLANG_ENABLE_CLANGD:BOOL=ON -S. -Bbuild &&
# #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DLLVM_ENABLE_PROJECTS="clang-tools-extra" -DCMAKE_MODULE_PATH:PATH="$MINGWPREFIX/share/llvm/lib/cmake/llvm:$MINGWPREFIX/share/llvm/lib/cmake/modules" -DLLVM_INSTALL_TOOLCHAIN_ONLY:BOOL=ON -DLLVM_TARGETS_CONFIGURED:BOOL=ON -DCLANG_ENABLE_CLANGD:BOOL=ON -DLLVM_ENABLE_THREADS:BOOL=ON -DCMAKE_CXX_FLAGS:STRING="-I$(pwd)/clangd" -S. -Bbuild &&
# #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DCMAKE_MODULE_PATH:PATH="$MINGWPREFIX/share/llvm/lib/cmake/llvm:$MINGWPREFIX/share/llvm/lib/cmake/modules" -DLLVM_INSTALL_TOOLCHAIN_ONLY:BOOL=ON -DLLVM_TARGETS_CONFIGURED:BOOL=ON -S. -Bbuild &&
# #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DCMAKE_MODULE_PATH:PATH="$MINGWPREFIX/share/llvm/lib/cmake/llvm:$MINGWPREFIX/share/llvm/lib/cmake/modules" -DLLVM_INSTALL_TOOLCHAIN_ONLY:BOOL=ON -DLLVM_TARGETS_CONFIGURED:BOOL=ON -DCLANG_ENABLE_CLANGD:BOOL=ON -DLLVM_DISTRIBUTION_COMPONENTS="$(sed -n -e "s/^\s*add_clang_library\s*(\s*\([^)]*\).*$/\1/p" */CMakeLists.txt)" -S. -Bbuild &&
# #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DCMAKE_MODULE_PATH:PATH="$MINGWPREFIX/share/llvm/lib/cmake/llvm:$MINGWPREFIX/share/llvm/lib/cmake/modules" -DLLVM_INSTALL_TOOLCHAIN_ONLY:BOOL=OFF -DLLVM_TARGETS_CONFIGURED:BOOL=ON -DCLANG_ENABLE_CLANGD:BOOL=ON -DLLVM_ENABLE_PROJECTS:STRING=clang-tools-extra -DCLANG_BUILD_TOOLS:BOOL=OFF -DLLVM_EXTERNAL_CLANG_TOOLS_EXTRA_SOURCE_DIR:PATH="$(pwd)" -S. -Bbuild &&
# #-DLLVM_INSTALL_TOOLCHAIN_ONLY:BOOL=OFF 
# # fix linker errors
# sed -i.bak -e "s/-lclangAnalysis/& -Wl,--as-needed -lclangStaticAnalyzerFrontend/; s/-lLLVMFrontendOpenMP/& -Wl,--as-needed -lLLVM/; s/LINK_LIBRARIES\s*=\s*/&-Wl,--allow-multiple-definition /" build/build.ninja &&
# # fix missing compress2/uncompress/crc32 when building clangd
# sed -i.bak2 -e "s/libclangTidy.dll.a\s*-lkernel32/& -Wl,--as-needed -lz/" build/build.ninja &&
# #wl-showstatus build &&
# #CPLUS_INCLUDE_PATH=$MINGWPREFIX/share/llvm/include${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} LIBRARY_PATH=$MINGWPREFIX/share/llvm/lib${LIBRARY_PATH:+:$LIBRARY_PATH} ninja -Cbuild all modularize clang-doc clang-apply-replacements clang-change-namespace clang-include-fixer clang-move clang-query clang-reorder-fields clang-tidy pp-trace &&
# #strip build/*/*.exe build/*/tool/*.exe &&
# #wl-showstatus build-install &&
# #ninja -Cbuild install/strip &&
# ##( ninja -Cbuild install/strip || ( sed -i.bak -e "s?\([A-Za-z]\)/:/?/\1//?g" build/.ninja_deps && ninja -Cbuild install/strip )) &&
# wl-showstatus build-install &&
# CPLUS_INCLUDE_PATH=$MINGWPREFIX/share/llvm/include${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} LIBRARY_PATH=$MINGWPREFIX/share/llvm/lib${LIBRARY_PATH:+:$LIBRARY_PATH} ninja -Cbuild all modularize clang-doc clang-apply-replacements clang-change-namespace clang-include-fixer clang-move clang-query clang-reorder-fields clang-tidy pp-trace install/strip &&
# #CPLUS_INCLUDE_PATH=$MINGWPREFIX/share/llvm/include:$(pwd)/clangd:$(pwd)/build/clangd${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} LIBRARY_PATH=$MINGWPREFIX/share/llvm/lib${LIBRARY_PATH:+:$LIBRARY_PATH} ninja -Cbuild all modularize clang-doc clang-apply-replacements clang-change-namespace clang-include-fixer clang-move clang-query clang-reorder-fields clang-tidy pp-trace install/strip &&
# strip build/*/*.exe build/*/tool/*.exe &&
# cp -u build/*/*.exe build/*/tool/*.exe $INSTALLPREFIX/share/llvm/bin/ &&
# wl-showstatus configure &&
# #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DCLANGD_BUILD_XPC:BOOL=OFF -DCMAKE_MODULE_PATH:PATH="$MINGWPREFIX/share/llvm/lib/cmake/llvm:$MINGWPREFIX/share/llvm/lib/cmake/modules" -DLLVM_INSTALL_TOOLCHAIN_ONLY:BOOL=ON -DLLVM_TARGETS_CONFIGURED:BOOL=ON -Sclangd -Bbuild_clangd &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DCLANGD_BUILD_XPC:BOOL=OFF -DCMAKE_MODULE_PATH:PATH="$MINGWPREFIX/share/llvm/lib/cmake/llvm:$MINGWPREFIX/share/llvm/lib/cmake/modules" -DLLVM_INSTALL_TOOLCHAIN_ONLY:BOOL=ON -DLLVM_TARGETS_CONFIGURED:BOOL=ON -Sclangd -Bbuild_clangd &&
# #sed -i.bak -e "s/LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lz/" build_clangd/build.ninja &&
# sed -i.bak -e "s?LINK_LIBRARIES\s*=.*\$?& -Wl,--allow-multiple-definition -Wl,--as-needed -lz $(find build/clang-tidy -name 'libclang*Module.dll.a' | sed -ne "s/^.*\/lib\([^\/]*\)\.dll\.a$/-l\1/p" | tr '\n' ' ')?" build_clangd/build.ninja &&
# wl-showstatus build-install &&
# #CPLUS_INCLUDE_PATH=$(pwd)/clangd:$(pwd)/build_clangd:$MINGWPREFIX/share/llvm/include${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} LIBRARY_PATH=$(pwd)/build/clang-tidy:$MINGWPREFIX/share/llvm/lib${LIBRARY_PATH:+:$LIBRARY_PATH} ninja.exe -Cbuild_clangd &&
# CPLUS_INCLUDE_PATH=$(pwd)/clangd:$(pwd)/build_clangd:$MINGWPREFIX/share/llvm/include${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} LIBRARY_PATH=$(pwd)/build/clang-tidy:$(find build/clang-tidy -name 'libclang*Module.dll.a' | sed -ne "s?^\(.*\)\/\([^\/]*\)\.dll\.a\$?$(pwd)/\1?p" | tr '\n' ':')$MINGWPREFIX/share/llvm/lib${LIBRARY_PATH:+:$LIBRARY_PATH} ninja.exe -Cbuild_clangd &&
# strip build_clangd/*/*.exe build_clangd/index/*/*/*.exe &&
# cp -u build_clangd/*/*.exe build_clangd/index/*/*/*.exe $INSTALLPREFIX/share/llvm/bin/ &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION.src
#####TO DO: build with -DBUILD_SHARED_LIBS:BOOL=ON
#####TO DO: fix build so all .exe files are installed
#####TO DO: fix build so clangd is automatically built
mkdir -p build_win &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DLLVM_ENABLE_PROJECTS="clang-tools-extra" -DCMAKE_MODULE_PATH:PATH="$MINGWPREFIX/share/llvm/lib/cmake/llvm:$MINGWPREFIX/share/llvm/lib/cmake/modules" -DLLVM_INSTALL_TOOLCHAIN_ONLY:BOOL=ON -DLLVM_TARGETS_CONFIGURED:BOOL=ON -DCLANG_ENABLE_CLANGD:BOOL=ON -DLLVM_ENABLE_THREADS:BOOL=ON -DCMAKE_CXX_FLAGS:STRING="-I$(pwd)/clangd" -S. -Bbuild_win &&
 # fix linker errors
 sed -i.bak -e "s/-lclangAnalysis/& -Wl,--as-needed -lclangStaticAnalyzerFrontend/; s/-lLLVMFrontendOpenMP/& -Wl,--as-needed -lLLVM/; s/libclangTidy\.dll\.a\s*-lkernel32/& -Wl,--as-needed -lz/; s/LINK_LIBRARIES\s*=\s*/&-Wl,--allow-multiple-definition /" build_win/build.ninja &&
 wl-showstatus build &&
 CPLUS_INCLUDE_PATH=$MINGWPREFIX/share/llvm/include:$(pwd)/clangd:$(pwd)/build_win/clangd${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} LIBRARY_PATH=$MINGWPREFIX/share/llvm/lib${LIBRARY_PATH:+:$LIBRARY_PATH} ninja -Cbuild_win all modularize clang-doc clang-apply-replacements clang-change-namespace clang-include-fixer clang-move clang-query clang-reorder-fields clang-tidy pp-trace clangd &&
 rm -f $(find build_win -name a.exe) &&
 strip $(find build_win -name '*.dll' -or -name '*.exe') &&
 wl-showstatus build-install &&
 CPLUS_INCLUDE_PATH=$MINGWPREFIX/share/llvm/include:$(pwd)/clangd:$(pwd)/build_win/clangd${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} LIBRARY_PATH=$MINGWPREFIX/share/llvm/lib${LIBRARY_PATH:+:$LIBRARY_PATH} ninja -Cbuild_win install/strip &&
 mkdir -p $INSTALLPREFIX/share/llvm/lib &&
 cp -u $(find build_win -name '*.a') $INSTALLPREFIX/share/llvm/lib/ &&
 cp -u $(find build_win -name '*.dll' -or -name '*.exe') $INSTALLPREFIX/share/llvm/bin/ &&
    echo OK
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION.src
####Superseded by llvm-project all-in-one build




export NAME="libyang"
export STATUS=
export URL=https://github.com/CESNET/libyang
export BASENAME=libyang
export DESCRIPTION="libyang is a YANG data modelling language parser and toolkit written (and providing API) in C."
export CATEGORY=dataprocessing
export TYPE=library
export VERSION=2.1.148
export VERSIONDATE=20240228
wl-showstatus --package-version
export DEPENDENCIES=dirent,cmocka
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=BSD
export DOWNLOADURL="https://github.com/CESNET/libyang/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/CESNET/libyang/archive/refs/tags/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd $BASENAME-$VERSION
# fix compat/posix-shims/unistd.h (version >= 2.1.148)
patch -ulbf compat/posix-shims/unistd.h << EOF
@@ -47,2 +47,5 @@
 /* should be in some equivalent to <sys/types.h> */
+#ifdef __MINGW32__
+#include <stdint.h>
+#else
 typedef __int8            int8_t;
@@ -55,2 +58,3 @@
 typedef unsigned __int64  uint64_t;
+#endif

EOF
# fix CMakeLists.txt (version >= 2.1.148)
patch -ulbf CMakeLists.txt << EOF
@@ -362,3 +362,3 @@

-    if(WIN32)
+    if(MSVC)
         find_package(dlfcn-win32 REQUIRED)
@@ -385,4 +385,3 @@

-    find_package(pthreads REQUIRED)
-    set(COMPAT_WIN_LIBRARIES PThreads4W::PThreads4W shlwapi.lib ws2_32)
+    set(COMPAT_WIN_LIBRARIES shlwapi ws2_32)
     target_link_libraries(yang \${COMPAT_WIN_LIBRARIES})
EOF
# fix tools/CMakeLists.txt (version >= 2.1.148)
patch -ulbf tools/CMakeLists.txt << EOF
@@ -3,3 +3,3 @@

-if(WIN32)
+if(MSVC)
     find_library(GETOPT_LIBRARY NAMES getopt REQUIRED)
@@ -8,2 +8,5 @@
 endif()
+if(MINGW)
+    set(GETOPT_LIBRARY "-lgetopt")
+endif()

EOF

#grep -wi add_library $(find -name CMakeLists.txt -or -name '*.cmake')
#mkdir -p build_test && cmake.exe -G"MSYS Makefiles" -S. -Bbuild_test -LH && echo OK; rm -rf build_test

#export BUILDDEPENDENCIES=cmake
#PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ 
#PATH=$PATH:$MINGWPREFIX/qt6/bin QTDIR=$MINGWPREFIX/qt6 QMAKESPEC=$MINGWPREFIX/qt6/mkspecs/win32-g++ 
#-DCMAKE_SYSTEM_NAME=Windows 
#-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
#mkdir -p build_win &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -S. -Bbuild_win &&
# #wl-showstatus build &&
# #cmake.exe --build build_win &&
# #make -Cbuild_win &&
# wl-showstatus build-install &&
# make -Cbuild_win install/strip &&
#    echo OK

#export BUILDDEPENDENCIES=cmake,ninja
#PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ 
#-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
#mkdir -p build_win &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -S. -Bbuild_win &&
# #wl-showstatus build &&
# #cmake.exe --build build_win &&
# #ninja -Cbuild_win &&
# wl-showstatus build-install &&
# #cmake.exe --install build_win --strip &&
# #cmake.exe --build build_win --target "install/strip" &&
# ninja -Cbuild_win install/strip &&
#    echo OK

#export BUILDDEPENDENCIES=cmake,ninja
mkdir -p build_static build_shared &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DENABLE_STATIC:BOOL=ON -DDIRENT_INCLUDE_DIR:PATH="$MINGWPREFIX/include/dirent-win32" -DENABLE_TESTS:BOOL=OFF -S. -Bbuild_static &&
 #-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DENABLE_STATIC:BOOL=OFF -DDIRENT_INCLUDE_DIR:PATH="$MINGWPREFIX/include/dirent-win32" -DENABLE_TESTS:BOOL=OFF -S. -Bbuild_shared &&
 ## fix execution of Python scripts
 #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|glib-genmarshal\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
 ## fix missing link libraries
 #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lws2_32/" build_shared/build.ninja &&
 #wl-showstatus build &&
 #cmake.exe --build build_static &&
 #ninja -Cbuild_static &&
 #wl-showstatus build &&
 #cmake.exe --build build_shared &&
 #ninja -Cbuild_shared &&
 wl-showstatus build-install &&
 #cmake.exe --install build_static --strip &&
 #cmake.exe --build build_static --target "install/strip" &&
 #cmake.exe --build build_static --target "library/install/strip" &&
 ninja -Cbuild_static install/strip &&
 #ninja -Cbuild_static library/install/strip &&
 wl-showstatus build-install &&
 #cmake.exe --install build_shared --strip &&
 #cmake.exe --build build_shared --target "install/strip" &&
 ninja -Cbuild_shared install/strip &&
    echo OK
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




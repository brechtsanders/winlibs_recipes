export NAME="HOOMD-blue"
export STATUS=
export URL=https://glotzerlab.engin.umich.edu/hoomd-blue/
export BASENAME=hoomd-blue
export DESCRIPTION="HOOMD-blue is a general-purpose particle simulation toolkit, implementing molecular dynamics and hard particle Monte Carlo optimized for fast execution on both GPUs and CPUs."
export CATEGORY=science
export TYPE=library
#export VERSION=4.4.1
#export VERSIONDATE=20240105
#export VERSION=4.5.0
#export VERSIONDATE=20240214
#export VERSION=4.6.0
#export VERSIONDATE=20240320
#export VERSION=4.7.0
#export VERSIONDATE=20240517
#export VERSION=4.8.0
#export VERSIONDATE=20240716
#export VERSION=4.8.1
#export VERSIONDATE=20240722
#export VERSION=4.8.2
#export VERSIONDATE=20240724
#export VERSION=4.9.0
#export VERSIONDATE=20241030
#export VERSION=4.9.1
#export VERSIONDATE=20241101
#export VERSION=5.0.0
#export VERSIONDATE=20241203
#export VERSION=5.0.1
#export VERSIONDATE=20250121
#export VERSION=5.1.0
#export VERSIONDATE=20250222
export VERSION=5.1.1
export VERSIONDATE=20250320
wl-showstatus --package-version
export DEPENDENCIES=tbb
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=BSD
export DOWNLOADURL="https://github.com/glotzerlab/hoomd-blue/releases hoomd-"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/glotzerlab/hoomd-blue/releases/download/v$VERSION/hoomd-$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/hoomd-$VERSION.tar.gz
cd hoomd-$VERSION
# fix missing posix_memalign
for F in $(grep -l posix_memalign $(find -name '*.h' -or -name '*.c' -or -name '*.cc')); do
 mv $F $F.bak &&
 echo "#ifndef posix_memalign" > $F
 echo "#define posix_memalign(p, a, s) *(p) = (void*)_aligned_malloc(s,a)" >> $F
 echo "#endif" >> $F
 cat $F.bak >> $F
done
# fix hoomd/extern/gsd.c (version >= 4.6.0)
patch -ulbf hoomd/extern/gsd.c << EOF
@@ -97,2 +97,3 @@

+#ifndef S_IRUSR
 int S_IRUSR = _S_IREAD;
@@ -101,2 +102,3 @@
 int S_IWGRP = _S_IWRITE;
+#endif

EOF

#grep -wi add_library $(find -name CMakeLists.txt -or -name '*.cmake')
#mkdir -p build_test && cmake.exe -G"MSYS Makefiles" -DENABLE_TBB:BOOL=ON -DBUILD_TESTING:BOOL=OFF -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -S. -Bbuild_test -LH && echo OK; rm -rf build_test

#export BUILDDEPENDENCIES=cmake,ninja
#PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ 
#-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
mkdir -p build_win &&
 wl-showstatus configure &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DENABLE_TBB:BOOL=ON -DBUILD_TESTING:BOOL=OFF -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DCMAKE_CXX_FLAGS:STRING="-fpermissive" -S. -Bbuild_win &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DENABLE_TBB:BOOL=ON -DBUILD_TESTING:BOOL=OFF -DPython_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DCMAKE_CXX_FLAGS:STRING="-fpermissive" -S. -Bbuild_win &&
 #wl-showstatus build &&
 #cmake.exe --build build_win &&
 #ninja -Cbuild_win &&
 wl-showstatus build-install &&
 #cmake.exe --install build_win --strip &&
 #cmake.exe --build build_win --target "install/strip" &&
 ninja -Cbuild_win install/strip &&
    echo OK

#export BUILDDEPENDENCIES=cmake,ninja
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DENABLE_TBB:BOOL=ON -DBUILD_TESTING:BOOL=OFF -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -S. -Bbuild_static &&
# #-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DENABLE_TBB:BOOL=ON -DBUILD_TESTING:BOOL=OFF -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -S. -Bbuild_shared &&
# ## fix execution of Python scripts
# #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|glib-genmarshal\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
# ## fix missing link libraries
# #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lws2_32/" build_shared/build.ninja &&
# #wl-showstatus build &&
# #cmake.exe --build build_static &&
# #ninja -Cbuild_static &&
# #wl-showstatus build &&
# #cmake.exe --build build_shared &&
# #ninja -Cbuild_shared &&
# wl-showstatus build-install &&
# #cmake.exe --install build_static --strip &&
# #cmake.exe --build build_static --target "install/strip" &&
# #cmake.exe --build build_static --target "library/install/strip" &&
# ninja -Cbuild_static install/strip &&
# #ninja -Cbuild_static library/install/strip &&
# wl-showstatus build-install &&
# #cmake.exe --install build_shared --strip &&
# #cmake.exe --build build_shared --target "install/strip" &&
# ninja -Cbuild_shared install/strip &&
#    echo OK

# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf hoomd-$VERSION




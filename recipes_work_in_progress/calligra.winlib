export NAME="Calligra"
export STATUS=
#export URL=http://www.calligra-suite.org/
export URL=https://calligra.org/
export BASENAME=calligra
export DESCRIPTION="Calligra Suite is a set of applications written to help you to accomplish your work."
export CATEGORY=office
export TYPE=application
#export VERSION=2.5.4
#export VERSIONDATE=20130122
#export VERSION=2.6.0
#export VERSIONDATE=20130205
#export VERSION=2.6.1
#export VERSIONDATE=20130222
#export VERSION=2.6.2
#export VERSIONDATE=20130313
#export VERSION=2.6.3
#export VERSIONDATE=20130410
#export VERSION=2.6.4
#export VERSIONDATE=20130529
#export VERSION=2.7.1
#export VERSIONDATE=20130801
#export VERSION=2.7.2
#export VERSIONDATE=20130822
#export VERSION=2.7.3
#export VERSIONDATE=20130919
#export VERSION=2.7.4
#export VERSIONDATE=20131018
#export VERSION=2.7.5
#export VERSIONDATE=20131220
#export VERSION=2.8.0
#export VERSIONDATE=20140306
#export VERSION=2.8.1-1
#export VERSIONDATE=20140418
#export VERSION=2.8.3
#export VERSIONDATE=20140515
#export VERSION=2.8.5
#export VERSIONDATE=20140711
#export VERSION=2.8.6
#export VERSIONDATE=20140925
#export VERSION=2.8.7
#export VERSIONDATE=20141204
#export VERSION=2.9.0
#export VERSIONDATE=20150226
#export VERSION=2.9.1
#export VERSIONDATE=20150316
#export VERSION=2.9.4
#export VERSIONDATE=20150506
#export VERSION=2.9.5
#export VERSIONDATE=20150605
#export VERSION=2.9.6
#export VERSIONDATE=20150710
#export VERSION=2.9.7
#export VERSIONDATE=20150903
#export VERSION=2.9.9
#export VERSIONDATE=20151106
#export VERSION=2.9.11
#export VERSIONDATE=20160921
#export VERSION=3.0.0
#export VERSIONDATE=20161205
#export VERSION=3.0.0.1
#export VERSIONDATE=20170103
#export VERSION=3.1.0
#export VERSIONDATE=20180501
#export VERSION=3.2.0
#export VERSIONDATE=20200425
#export VERSION=3.2.1
#export VERSIONDATE=20200515
####ERROR: Could not find KDE4 kde4-config
export VERSION=4.0.0
export VERSIONDATE=20240827
wl-showstatus --package-version
#export DEPENDENCIES=kdelibs
#export DEPENDENCIES=qt,libkf5archive,libkf5codecs,libkf5completion,libkf5config,libkf5configwidgets,libkf5coreaddons,libkf5dbusaddons,libkf5doctools,libkf5guiaddons,libkf5i18n,libkf5iconthemes,libkf5itemviews,libkf5jobwidgets,libkf5kcmutils,libkf5kdelibs4support,libkf5kio,libkf5kross,libkf5notifications,libkf5notifyconfig,libkf5parts,libkf5sonnet,libkf5textwidgets,libkf5wallet,libkf5widgetsaddons,libkf5windowsystem,libkf5xmlgui
export DEPENDENCIES=qt6,libkf6archive,libkf6codecs,libkf6completion,libkf6config,libkf6configwidgets,libkf6coreaddons,libkf6dbusaddons,libkf6doctools,libkf6guiaddons,libkf6i18n,libkf6iconthemes,libkf6itemviews,libkf6jobwidgets,libkf6kcmutils,libkf6kio,libkf6notifications,libkf6notifyconfig,libkf6parts,libkf6sonnet,libkf6textwidgets,libkf6wallet,libkf6widgetsaddons,libkf6windowsystem,libkf6xmlgui
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=COPYING
export LICENSETYPE=GPL
#export DOWNLOADURL="http://download.kde.org/stable/calligra-latest/"
#export DOWNLOADURL="https://github.com/KDE/calligra/releases"
export DOWNLOADURL="https://github.com/KDE/calligra/tags"
#export DOWNLOADURL="https://cgit.kde.org/calligra.git/ ?h=v"
#export DOWNLOADURL="https://invent.kde.org/office/calligra/-/tags"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://download.kde.org/stable/calligra-latest/$BASENAME-$VERSION.tar.bz2
#export DOWNLOADSOURCEURL=http://download.kde.org/stable/calligra-latest/$BASENAME-$VERSION.tar.xz
#export DOWNLOADSOURCEURL=https://github.com/KDE/calligra/archive/v$VERSION.tar.gz
export DOWNLOADSOURCEURL=https://github.com/KDE/calligra/archive/refs/tags/v$VERSION.tar.gz
#export DOWNLOADSOURCEURL=https://invent.kde.org/office/calligra/-/archive/v$VERSION/calligra-v$VERSION.tar.bz2
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
#tar xj --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.bz2
#tar xJ --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.xz
#tar xz --force-local -f $TARBALLDIR/$BASENAME/$VERSION.tar.gz
tar xz --force-local -f $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
#tar xj --force-local -f $TARBALLDIR/$BASENAME/calligra-v$VERSION.tar.bz2
cd $BASENAME-$VERSION

#grep -wi add_library $(find -name CMakeLists.txt -or -name '*.cmake')
#mkdir -p build_test && cmake.exe -G"MSYS Makefiles" -S. -Bbuild_test -LH && echo OK; rm -rf build_test

#mkdir -p build_test && cd build_test && cmake.exe -G"MSYS Makefiles" .. -LH && echo OK; cd ..; rm -rf build_test
#rm -rf CMakeCache.txt CMakeFiles; cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release . -LH && echo OK
#export BUILDDEPENDENCIES=cmake
#export OPTIONALBUILDDEPENDENCIES=
#
mkdir -p build_win &&
 wl-showstatus configure &&
 #PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DKF5Archive_DIR:PATH=$MINGWPREFIX -DKF5Codecs_DIR:PATH=$MINGWPREFIX -DKF5Completion_DIR:PATH=$MINGWPREFIX -DKF5Config_DIR:PATH=$MINGWPREFIX -DKF5ConfigWidgets_DIR:PATH=$MINGWPREFIX -DKF5CoreAddons_DIR:PATH=$MINGWPREFIX -DKF5DBusAddons_DIR:PATH=$MINGWPREFIX -DKF5DocTools_DIR:PATH=$MINGWPREFIX -DKF5GuiAddons_DIR:PATH=$MINGWPREFIX -DKF5I18n_DIR:PATH=$MINGWPREFIX -DKF5IconThemes_DIR:PATH=$MINGWPREFIX -DKF5ItemViews_DIR:PATH=$MINGWPREFIX -DKF5JobWidgets_DIR:PATH=$MINGWPREFIX -DKF5KCMUtils_DIR:PATH=$MINGWPREFIX -DKF5KDELibs4Support_DIR:PATH=$MINGWPREFIX -DKF5KIO_DIR:PATH=$MINGWPREFIX -DKF5Kross_DIR:PATH=$MINGWPREFIX -DKF5Notifications_DIR:PATH=$MINGWPREFIX -DKF5NotifyConfig_DIR:PATH=$MINGWPREFIX -DKF5Parts_DIR:PATH=$MINGWPREFIX -DKF5Sonnet_DIR:PATH=$MINGWPREFIX -DKF5TextWidgets_DIR:PATH=$MINGWPREFIX -DKF5Wallet_DIR:PATH=$MINGWPREFIX -DKF5WidgetsAddons_DIR:PATH=$MINGWPREFIX -DKF5WindowSystem_DIR:PATH=$MINGWPREFIX -DKF5XmlGui_DIR:PATH=$MINGWPREFIX -S. -Bbuild_win &&
 #PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_TESTING:BOOL=OFF -S. -Bbuild_win &&
 PATH=$PATH:$MINGWPREFIX/qt6/bin QTDIR=$MINGWPREFIX/qt6 QMAKESPEC=$MINGWPREFIX/qt6/mkspecs/win32-g++ cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_TESTING:BOOL=OFF -S. -Bbuild_win &&
 #wl-showstatus build &&
 #make -Cbuild_win &&
 wl-showstatus build-install &&
 ninja -Cbuild_win install/strip &&
    echo OK

#export BUILDDEPENDENCIES=cmake
#export OPTIONALBUILDDEPENDENCIES=
#PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ 
#-DCMAKE_SYSTEM_NAME=Windows 
#-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
#mkdir -p build_win &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -S. -Bbuild_win &&
# #wl-showstatus build &&
# #make -Cbuild_win &&
# wl-showstatus build-install &&
# make -Cbuild_win install/strip &&
#    echo OK

#export BUILDDEPENDENCIES=cmake,ninja
#export OPTIONALBUILDDEPENDENCIES=
#PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ 
#-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
#mkdir -p build_win &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -S. -Bbuild_win &&
# #wl-showstatus build &&
# #ninja -Cbuild_win &&
# wl-showstatus build-install &&
# ninja -Cbuild_win install/strip &&
#    echo OK

#export BUILDDEPENDENCIES=cmake,ninja
#export OPTIONALBUILDDEPENDENCIES=
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -S. -Bbuild_static &&
# #-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -S. -Bbuild_shared &&
# ## fix execution of Python scripts
# #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|glib-genmarshal\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
# ## fix missing link libraries
# #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lws2_32/" build_win/build.ninja &&
# #wl-showstatus build &&
# #ninja -Cbuild_static &&
# #wl-showstatus build &&
# #ninja -Cbuild_shared &&
# wl-showstatus build-install &&
# ninja -Cbuild_static install/strip &&
# wl-showstatus build-install &&
# ninja -Cbuild_shared install/strip &&
#    echo OK

# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && rm -rf $BASENAME-$VERSION




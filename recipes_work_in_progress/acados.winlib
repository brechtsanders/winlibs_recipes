export NAME="acados"
export STATUS=
export URL=https://github.com/acados/acados
export BASENAME=acados
export DESCRIPTION="Fast and embedded solvers for nonlinear optimal control."
export CATEGORY=math
export TYPE=library
#export VERSION=0.1.4
#export VERSIONDATE=20210315
#export VERSION=0.1.5
#export VERSIONDATE=20210409
#export VERSION=0.1.6
#export VERSIONDATE=20210628
#export VERSION=0.1.7
#export VERSIONDATE=20220116
####acados/ocp_nlp/ocp_nlp_reg_convexify.c:749:46: error: incompatible type for argument 3 of 'blasfeo_dsymv_l'
#export VERSION=0.1.8
#export VERSIONDATE=20220628
#export VERSION=0.1.9
#export VERSIONDATE=20221025
#export VERSION=0.1.10
#export VERSIONDATE=20221128
#export VERSION=0.2.0
#export VERSIONDATE=20230109
#export VERSION=0.2.1
#export VERSIONDATE=20230610
#export VERSION=0.2.2
#export VERSIONDATE=20230710
#export VERSION=0.2.3
#export VERSIONDATE=20230829
#export VERSION=0.2.4
#export VERSIONDATE=20230921
#export VERSION=0.2.5
#export VERSIONDATE=20231028
#export VERSION=0.2.6
#export VERSIONDATE=20231116
#export VERSION=0.3.0
#export VERSIONDATE=20240207
#export VERSION=0.3.1
#export VERSIONDATE=20240319
#export VERSION=0.3.2
#export VERSIONDATE=20240420
export VERSION=0.3.3
export VERSIONDATE=20240704
####acados/ocp_nlp/ocp_nlp_cost_ls.c:795:34: error: incompatible type for argument 3 of 'blasfeo_dsymv_l'
wl-showstatus --package-version
export DEPENDENCIES=hpipm,blasfeo
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=BSD
export DOWNLOADURL="https://github.com/acados/acados/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://github.com/acados/acados/archive/$VERSION.tar.gz
export DOWNLOADSOURCEURL=https://github.com/acados/acados/archive/refs/tags/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
#tar xz --force-local -f $TARBALLDIR/$BASENAME/$VERSION.tar.gz
tar xz --force-local -f $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd $BASENAME-$VERSION
# fix missing files
touch external/blasfeo/CMakeLists.txt external/hpipm/CMakeLists.txt
mkdir -p external/hpipm/include external/blasfeo/include
cp -f $MINGWPREFIX/include/hpipm_*.h external/hpipm/include/
cp -f $MINGWPREFIX/include/blasfeo_*.h external/blasfeo/include/

sed -i.bak -e "s/\(blasfeo_u*n*pack_dvec\s*([^,]*,[^,]*,[^,]*\)[01],/\1/" $(grep -lw "blasfeo_u*n*pack_dvec" $(find -name '*.h' -or -name '*.c' -or -name '*.cpp'))

#mkdir -p build_test && cmake.exe -G"MSYS Makefiles" -S. -Bbuild_test -LH && echo OK; rm -rf build_test

mkdir -p build_win &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBLASFEO_HEADERS_INSTALLATION_DIRECTORY:STRING=$MINGWPREFIX/include -DHPIPM_HEADERS_INSTALLATION_DIRECTORY:STRING=$MINGWPREFIX/include -DHPIPM_BLASFEO_PATH:STRING=$MINGWPREFIX -S. -Bbuild_win &&
 #wl-showstatus build &&
 #make -Cbuild_win &&
 wl-showstatus build-install &&
 ninja -Cbuild_win install/strip &&
    echo OK

#export BUILDDEPENDENCIES=cmake,ninja
#export OPTIONALBUILDDEPENDENCIES=
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -S. -Bbuild_static &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -S. -Bbuild_shared &&
# ## fix execution of Python scripts
# #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
# #wl-showstatus build &&
# #ninja -Cbuild_static &&
# #wl-showstatus build &&
# #ninja -Cbuild_shared &&
# wl-showstatus build-install &&
# ninja -Cbuild_static install/strip &&
# wl-showstatus build-install &&
# ninja -Cbuild_shared install/strip &&
#    echo OK

# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




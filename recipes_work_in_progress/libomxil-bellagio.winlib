export NAME="Bellagio OpenMAX IL"
export STATUS=
export URL=http://omxil.sourceforge.net/
export BASENAME=libomxil-bellagio
export DESCRIPTION="Open Source implementation of the OpenMAX Integration Layer (IL) API ver. 1.1.1, specified by the Khronos group"
export CATEGORY=audio,video
export TYPE=library
export VERSION=0.9.3
export VERSIONDATE=20171204
wl-showstatus --package-version
export DEPENDENCIES=
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=COPYING
export LICENSETYPE=LGPL
#export DOWNLOADURL="https://github.com/felipec/libomxil-bellagio/releases"
export DOWNLOADURL="https://sourceforge.net/projects/omxil/files/omxil/ Bellagio%20"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://downloads.sourceforge.net/project/omxil/omxil/Bellagio%20$VERSION/libomxil-bellagio-$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
cd $BASENAME-$VERSION
# fix missing __int64 in include/OMX_Types.h
mv include/OMX_Types.h include/OMX_Types.h.bak &&
echo "#include <_mingw.h>" > include/OMX_Types.h &&
cat include/OMX_Types.h.bak >> include/OMX_Types.h
# fix missing asm/unistd.h in src/base/omx_base_component.h
sed -i.bak -e "s?^#include <asm/unistd\.h>?//&?" src/base/omx_base_component.h
# fix missing asm/unistd.h in src/base/omx_base_filter.c
sed -i.bak -e "s?^#include <asm/unistd\.h>?//&?" src/base/omx_base_filter.c
# fix missing syscall(__NR_gettid)
for F in $(grep -l __NR_gettid src/base/*.c); do
 mv $F $F.bak2
 echo "#include <windows.h>" > $F
 sed -e "s/syscall(__NR_gettid)/GetCurrentThreadId()/" $F.bak2 >> $F
done
# fix src/base/omx_base_component.c
patch -ulbf src/base/omx_base_component.c << EOF
@@ -38,2 +38,5 @@
 #include "queue.h"
+#ifdef _WIN32
+#include <windows.h>
+#endif

@@ -826,2 +829,7 @@
    * This should guarantee uiniqness */
+#ifdef _WIN32
+  uuid[0] = (OMX_U32)(uintptr_t)omx_component;
+  uuid[1] = 0;
+  uuid[2] = 0;
+#else
   uuid[0] = (OMX_U32)omx_component;
@@ -829,2 +837,3 @@
   uuid[2] = getuid();
+#endif
   memcpy(*pComponentUUID, uuid, 3*sizeof(uuid));
@@ -916,3 +925,3 @@
   }
-  switch(nParamIndex) {
+  switch((long)nParamIndex) {
   case OMX_IndexParameterThreadsID:
@@ -1443,3 +1452,7 @@
   DEBUG(DEB_LEV_FUNCTION_NAME, "In %s for component %p\n", __func__, openmaxStandComp);
+#ifdef _WIN32
+  omx_base_component_Private->bellagioThreads->nThreadMessageID = GetCurrentThreadId();
+#else
   omx_base_component_Private->bellagioThreads->nThreadMessageID = (long int)syscall(__NR_gettid);
+#endif
   DEBUG(DEB_LEV_SIMPLE_SEQ, "In %s the thread ID is %i\n", __func__, (int)omx_base_component_Private->bellagioThreads->nThreadMessageID);
EOF
  ./configure --help
  head COPYING* LICENSE*
  ls -l COPYING* LICENSE* COPYRIGHT* configure* CMakeLists.txt Makefile GNUmakefile
wl-showstatus configure &&
# mkdir -p m4 &&
# autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal &&
#./autogen.sh &&
#    echo OK
## fix building DLLs on 64-bit
#if ( echo $RUNPLATFORM | grep -q x86_64 ); then
# echo "AM_GNU_GETTEXT_VERSION([$(gettext --version|head -n1|sed -e "s/^.* \([0-9\.]*\) *$/\1/")])" >> configure.ac &&
# autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal
#fi
#INTLTOOL_PERL="$PERLDIR/bin/perl.exe" 
#PERL="$PERLDIR/bin/perl.exe -I$PERLDIR/lib" 
#PYTHON=$PYDIR/python.exe 
#PYTHON=$PYDIR/python.exe C_INCLUDE_PATH=$PYDIR/include${C_INCLUDE_PATH:+:$C_INCLUDE_PATH} 
#./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM LDFLAGS="-Wl,--as-needed -Wl,-no-undefined" &&
#./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM LDFLAGS="-Wl,--as-needed" &&
#./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM &&
./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --disable-audioeffects --disable-clocksrc --disable-videoscheduler &&
 #echo "#ifndef HAVE_STRNDUP" >> config.h &&
 #echo "#define strndup(s,l) strdup((s),(l))" >> config.h &&
 #echo "#endif" >> config.h &&
 ## fix building DLLs
 #mv libtool libtool.bak &&
 #sed -e "s/\(allow_undefined=\)yes/\1no/" libtool.bak > libtool &&
 #wl-showstatus build &&
 #make &&
 wl-showstatus build-install &&
 make install-strip &&
    ls -l $INSTALLPREFIX/lib/pkgconfig $INSTALLPREFIX/share/pkgconfig
    make install-pkgconfigDATA
#mkdir -p build_test; cd build_test; cmake.exe -G"MSYS Makefiles" . -LH && echo OK; cd ..; rm -rf build_test
#rm -f CMakeCache.txt; cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release . -LH && echo OK
#export BUILDDEPENDENCIES=cmake
#export OPTIONALBUILDDEPENDENCIES=
#wl-showstatus configure &&
#cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release . &&
# wl-showstatus build-install &&
# make install/strip &&
#    echo OK
#export BUILDDEPENDENCIES=cmake
#export OPTIONALBUILDDEPENDENCIES=
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cd build_static &&
# cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF .. &&
# cd .. &&
# wl-showstatus configure &&
# cd build_shared &&
# cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON .. &&
# cd .. &&
# wl-showstatus build-install &&
# make -Cbuild_static install/strip &&
# wl-showstatus build-install &&
# make -Cbuild_shared install/strip &&
#    echo OK
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




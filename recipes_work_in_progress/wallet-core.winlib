export NAME="Trust Wallet Core"
export STATUS=
export URL=https://developer.trustwallet.com/wallet-core
export BASENAME=wallet-core
export DESCRIPTION="Trust Wallet Core is a cross-platform library that implements low-level cryptographic wallet functionality for many blockchains. Most of the code is C++ with a set of strict exported C interfaces. The library provides idiomatic interfaces for all supported languages (currently Swift for iOS and Java for Android)."
export CATEGORY=cryptocurrency
export TYPE=library
#export VERSION=2.9.8
#export VERSIONDATE=20220727
#export VERSION=3.0.0
#export VERSIONDATE=20220730
#export VERSION=3.0.1
#export VERSIONDATE=20220805
#export VERSION=3.0.2
#export VERSIONDATE=20220901
#export VERSION=3.0.3
#export VERSIONDATE=20220915
#export VERSION=3.0.4
#export VERSIONDATE=20220920
#export VERSION=3.0.5
#export VERSIONDATE=20221005
#export VERSION=3.0.6
#export VERSIONDATE=20221010
#export VERSION=3.0.8
#export VERSIONDATE=20221019
#export VERSION=3.0.9
#export VERSIONDATE=20221105
#export VERSION=3.1.0
#export VERSIONDATE=20221115
#export VERSION=3.1.1
#export VERSIONDATE=20221122
#export VERSION=3.1.3
#export VERSIONDATE=20221122
#export VERSION=3.1.4
#export VERSIONDATE=20221125
#export VERSION=3.1.5
#export VERSIONDATE=20221129
#export VERSION=3.1.6
#export VERSIONDATE=20221209
#export VERSION=3.1.7
#export VERSIONDATE=20221217
#export VERSION=3.1.8
#export VERSIONDATE=20230111
#export VERSION=3.1.9
#export VERSIONDATE=20230120
#export VERSION=3.1.10
#export VERSIONDATE=20230127
#export VERSION=3.1.11
#export VERSIONDATE=20230203
#export VERSION=3.1.12
#export VERSIONDATE=20230207
#export VERSION=3.1.13
#export VERSIONDATE=20230210
#export VERSION=3.1.14
#export VERSIONDATE=20230210
#export VERSION=3.1.15
#export VERSIONDATE=20230215
#export VERSION=3.1.16
#export VERSIONDATE=20230217
#export VERSION=3.1.17
#export VERSIONDATE=20230224
#export VERSION=3.1.18
#export VERSIONDATE=20230225
#export VERSION=3.1.19
#export VERSIONDATE=20230303
#export VERSION=3.1.20
#export VERSIONDATE=20230317
#export VERSION=3.1.21
#export VERSIONDATE=20230328
#export VERSION=3.1.22
#export VERSIONDATE=20230330
#export VERSION=3.1.23
#export VERSIONDATE=20230331
#export VERSION=3.1.24
#export VERSIONDATE=20230407
#export VERSION=3.1.25
#export VERSIONDATE=20230415
#export VERSION=3.1.26
#export VERSIONDATE=20230417
#export VERSION=3.1.27
#export VERSIONDATE=20230417
#export VERSION=3.1.28
#export VERSIONDATE=20230421
#export VERSION=3.1.29
#export VERSIONDATE=20230425
#export VERSION=3.1.30
#export VERSIONDATE=20230502
#export VERSION=3.1.31
#export VERSIONDATE=20230504
#export VERSION=3.1.32
#export VERSIONDATE=20230511
#export VERSION=3.1.33
#export VERSIONDATE=20230512
#export VERSION=3.1.34
#export VERSIONDATE=20230512
#export VERSION=3.1.35
#export VERSIONDATE=20230520
#export VERSION=3.1.36
#export VERSIONDATE=20230527
#export VERSION=3.1.37
#export VERSIONDATE=20230602
#export VERSION=3.1.38
#export VERSIONDATE=20230609
#export VERSION=3.1.39
#export VERSIONDATE=20230616
#export VERSION=3.2.0
#export VERSIONDATE=20230622
#export VERSION=3.2.1
#export VERSIONDATE=20230626
#export VERSION=3.2.2
#export VERSIONDATE=20230628
#export VERSION=3.2.3
#export VERSIONDATE=20230630
#export VERSION=3.2.4
#export VERSIONDATE=20230707
#export VERSION=3.2.5
#export VERSIONDATE=20230708
#export VERSION=3.2.6
#export VERSIONDATE=20230722
#export VERSION=3.2.7
#export VERSIONDATE=20230728
#export VERSION=3.2.8
#export VERSIONDATE=20230801
#export VERSION=3.2.9
#export VERSIONDATE=20230803
#export VERSION=3.2.10
#export VERSIONDATE=20230808
#export VERSION=3.2.11
#export VERSIONDATE=20230811
#export VERSION=3.2.12
#export VERSIONDATE=20230815
#export VERSION=3.2.13
#export VERSIONDATE=20230822
#export VERSION=3.2.15
#export VERSIONDATE=20230829
#export VERSION=3.2.16
#export VERSIONDATE=20230831
#export VERSION=3.2.18
#export VERSIONDATE=20230902
#export VERSION=3.2.19
#export VERSIONDATE=20230906
#export VERSION=3.2.20
#export VERSIONDATE=20230906
#export VERSION=3.2.21
#export VERSIONDATE=20230929
#export VERSION=3.3.2
#export VERSIONDATE=20231013
#export VERSION=3.3.3
#export VERSIONDATE=20231111
#export VERSION=4.0.1
#export VERSIONDATE=20231021
#export VERSION=4.0.3
#export VERSIONDATE=20231031
#export VERSION=4.0.4
#export VERSIONDATE=20231102
#export VERSION=4.0.5
#export VERSIONDATE=20231116
#export VERSION=4.0.7
#export VERSIONDATE=20231117
#export VERSION=4.0.8
#export VERSIONDATE=20231118
#export VERSION=4.0.9
#export VERSIONDATE=20231124
#export VERSION=4.0.10
#export VERSIONDATE=20231130
#export VERSION=4.0.11
#export VERSIONDATE=20231208
#export VERSION=4.0.12
#export VERSIONDATE=20231215
#export VERSION=4.0.13
#export VERSIONDATE=20231216
#export VERSION=4.0.14
#export VERSIONDATE=20231221
#export VERSION=4.0.15
#export VERSIONDATE=20231222
#export VERSION=4.0.16
#export VERSIONDATE=20240110
#export VERSION=4.0.17
#export VERSIONDATE=20240112
#export VERSION=4.0.18
#export VERSIONDATE=20240118
#export VERSION=4.0.19
#export VERSIONDATE=20240123
#export VERSION=4.0.20
#export VERSIONDATE=20240123
#export VERSION=4.0.21
#export VERSIONDATE=20240126
#export VERSION=4.0.22
#export VERSIONDATE=20240207
#export VERSION=4.0.23
#export VERSIONDATE=20240209
#export VERSION=4.0.24
#export VERSIONDATE=20240209
#export VERSION=4.0.25
#export VERSIONDATE=20240229
#export VERSION=4.0.26
#export VERSIONDATE=20240301
#export VERSION=4.0.27
#export VERSIONDATE=20240308
#export VERSION=4.0.28
#export VERSIONDATE=20240313
#export VERSION=4.0.29
#export VERSIONDATE=20240315
#export VERSION=4.0.30
#export VERSIONDATE=20240322
#export VERSION=4.0.31
#export VERSIONDATE=20240323
#export VERSION=4.0.32
#export VERSIONDATE=20240327
#export VERSION=4.0.33
#export VERSIONDATE=20240405
#export VERSION=4.0.34
#export VERSIONDATE=20240407
#export VERSION=4.0.35
#export VERSIONDATE=20240411
#export VERSION=4.0.36
#export VERSIONDATE=20240417
#export VERSION=4.0.37
#export VERSIONDATE=20240418
#export VERSION=4.0.38
#export VERSIONDATE=20240419
#export VERSION=4.0.40
#export VERSIONDATE=20240425
#export VERSION=4.0.41
#export VERSIONDATE=20240510
#export VERSION=4.0.42
#export VERSIONDATE=20240513
#export VERSION=4.0.43
#export VERSIONDATE=20240531
#export VERSION=4.0.44
#export VERSIONDATE=20240605
#export VERSION=4.0.45
#export VERSIONDATE=20240614
#export VERSION=4.0.46
#export VERSIONDATE=20240615
#export VERSION=4.0.47
#export VERSIONDATE=20240701
#export VERSION=4.0.48
#export VERSIONDATE=20240705
#export VERSION=4.0.49
#export VERSIONDATE=20240709
export VERSION=4.1.0
export VERSIONDATE=20240715
####CMake Error at CMakeLists.txt:27 (message): You should use clang compiler
wl-showstatus --package-version
export DEPENDENCIES=boost
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=MIT
export DOWNLOADURL="https://github.com/trustwallet/wallet-core/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/trustwallet/wallet-core/archive/refs/tags/$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/$VERSION.tar.gz
cd $BASENAME-$VERSION
# don't abort when not using clang
sed -i.bak -e "s/\(message(\)FATAL_ERROR\(.*You should use clang compiler\)/\1WARNING\2/" CMakeLists.txt
# don't build Protobuf
sed -i.bak2 -e "s/^include(cmake\/Protobuf\.cmake)/#&/" CMakeLists.txt
# skip unsupported flags
sed -i.bak -e "s/-Wshorten-64-to-32//" cmake/CompilerWarnings.cmake

#grep -wi add_library $(find -name CMakeLists.txt -or -name '*.cmake')
#mkdir -p build_test && cmake.exe -G"MSYS Makefiles" -DTW_ENABLE_CCACHE:BOOL=OFF -DTW_BUILD_EXAMPLES:BOOL=OFF -DTW_UNIT_TESTS:BOOL=OFF -S. -Bbuild_test -LH && echo OK; rm -rf build_test

#export BUILDDEPENDENCIES=cmake
#export OPTIONALBUILDDEPENDENCIES=
#PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ 
#-DCMAKE_SYSTEM_NAME=Windows 
#-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
#mkdir -p build_win &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -S. -Bbuild_win &&
# #wl-showstatus build &&
# #make -Cbuild_win &&
# wl-showstatus build-install &&
# make -Cbuild_win install/strip &&
#    echo OK

#export BUILDDEPENDENCIES=cmake,ninja
#export OPTIONALBUILDDEPENDENCIES=
#PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ 
#-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
mkdir -p build_win &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DTW_ENABLE_CCACHE:BOOL=OFF -DTW_BUILD_EXAMPLES:BOOL=OFF -DTW_UNIT_TESTS:BOOL=OFF -S. -Bbuild_win &&
 #wl-showstatus build &&
 #ninja -Cbuild_win &&
 wl-showstatus build-install &&
 ninja -Cbuild_win install/strip &&
    echo OK

#export BUILDDEPENDENCIES=cmake,ninja
#export OPTIONALBUILDDEPENDENCIES=
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -S. -Bbuild_static &&
# #-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -S. -Bbuild_shared &&
# ## fix execution of Python scripts
# #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|glib-genmarshal\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
# ## fix missing link libraries
# #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lws2_32/" build_shared/build.ninja &&
# #wl-showstatus build &&
# #ninja -Cbuild_static &&
# #wl-showstatus build &&
# #ninja -Cbuild_shared &&
# wl-showstatus build-install &&
# ninja -Cbuild_static install/strip &&
# wl-showstatus build-install &&
# ninja -Cbuild_shared install/strip &&
#    echo OK

#-DCMAKE_BUILD_TYPE:STRING=MinSizeRel

#export BUILDDEPENDENCIES=meson,ninja
#export OPTIONALBUILDDEPENDENCIES=
#-Dc_args=$CFLAGS -Dcpp_args=$CXXFLAGS -Dc_link_args=$LDFLAGS
## fix missing gio-unix
#sed -i.bak -e "s/gio-unix-/gio-/" meson.build
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library static -D documentation=true . build_static &&
# wl-showstatus configure &&
# PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library shared -D documentation=true . build_shared &&
# ## fix slash/backslash path issue when calling Python from Ninja
# #sed -i.bak -e "s/join_paths/os.path.join/g; /COMMAND =.*python\.exe/ s?\"/\([a-zA-Z]\)/?\"\1:/?; /COMMAND =.*python\.exe/ s?/?\\\\?g" build_*/build.ninja &&
# ## add linker flag
# #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*-ladvapi32/& -Wl,--as-needed/" build_shared/build.ninja &&
# ## add linker flag
# #sed -i.bak -e "s/^\s*LINK_ARGS\s*=.*\"-ladvapi32\"/& \"-Wl,--as-needed\"/" build_shared/build.ninja &&
# wl-showstatus build-install &&
# #PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -C build_static install &&
# PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -C build_static install/strip &&
# wl-showstatus build-install &&
# #PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -C build_shared install &&
# PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -C build_shared install/strip &&
#    echo OK && find . -name '*.a'

#export BUILDDEPENDENCIES=meson,ninja
#export OPTIONALBUILDDEPENDENCIES=
#-Dc_args=$CFLAGS -Dcpp_args=$CXXFLAGS -Dc_link_args=$LDFLAGS
## fix location of Perl
#sed -i.bak -e "s?'perl'?'$(cygpath -w $PERLDIR/bin/perl.exe|sed -e 's/\\/&&&&/g')'?" meson.build
## fix detection of Python
#sed -i.bak -e "s?'python3'?'$(cygpath -w $PYDIR/python.exe|sed -e 's/\\/&&&&/g')'?" meson.build
## fix missing gio-unix
##sed -i.bak -e "s/gio-unix-/gio-/" meson.build
#sed -i.bak -e "s/gio-unix-/gio-windows-/" meson.build
#mkdir -p build_both &&
# wl-showstatus configure &&
# PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Ddocumentation=true . build_both &&
# ## fix slash/backslash path issue when calling Python from Ninja
# #sed -i.bak -e "s/join_paths/os.path.join/g; /COMMAND =.*python\.exe/ s?\"/\([a-zA-Z]\)/?\"\1:/?; /COMMAND =.*python\.exe/ s?/?\\\\?g" build_*/build.ninja &&
# ## fix Python path issues in meson_exe
# #sed -i.bak -e "s?$PYDIR?$(echo $PYDIR|sed -e "s?^/\([a-zA-Z]\)/?\1:/?")?" build_both/meson-private/meson_exe_python.exe_*.dat &&
# ## fix execution of Python scripts
# #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *= *\| *=.*\&\& *\)\(\"\{0,1\}[^ ]*\)\(\.py\|glib-mkenums\|g-ir-scanner\|asciidoc\)\(\"\{0,1\} \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_both/build.ninja &&
# ## fix executing shell scripts
# #sed -i.bak -e "s?^\(\s*COMMAND\s*=\s*\)\(\"[^\"]*\.sh\"\)?\1\"$(cygpath -m $(which sh.exe))\" \2?" build_both/build.ninja &&
# wl-showstatus build-install &&
# PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -Cbuild_both install/strip &&
# #PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -Cbuild_both install &&
# #PATH=$PERLDIR/../c/bin:$PERLDIR/bin:$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -Cbuild_both install &&
#    echo OK && find . -name '*.a'

#wl-showstatus install &&
# mkdir -p $INSTALLPREFIX/python/Lib/site-packages &&
# PYTHONPATH=$INSTALLPREFIX/python/Lib/site-packages:$MINGWPREFIX/python/Lib/site-packages $PYDIR/python setup.py install --prefix=$(cygpath.exe -w $INSTALLPREFIX/python) &&
#    echo OK

#export DEPENDENCIES=qt
#wl-showstatus configure &&
# $MINGWPREFIX/qt/bin/qmake -makefile *.pro -spec $MINGWPREFIX/qt/mkspecs/win32-g++ &&
# wl-showstatus build &&
# mingw32-make &&
#    echo OK

#export DEPENDENCIES=qt
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cd build_static &&
# $MINGWPREFIX/qt/bin/qmake -makefile ../*.pro -spec $MINGWPREFIX/qt/mkspecs/win32-g++ CONFIG+=staticlib &&
# cd .. &&
# wl-showstatus configure &&
# cd build_shared &&
# $MINGWPREFIX/qt/bin/qmake -makefile ../*.pro -spec $MINGWPREFIX/qt/mkspecs/win32-g++ &&
# cd .. &&
# wl-showstatus build &&
# mingw32-make -Cbuild_static &&
# wl-showstatus build &&
# mingw32-make -Cbuild_shared &&
#    echo OK

#mkdir -p $INSTALLPREFIX/python/Lib/site-packages
#wl-showstatus build-install &&
# PATH=$PYDIR:$PATH PYTHON=$PYDIR/python.exe PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/python/Lib/site-packages:$INSTALLPREFIX/python:$PYDIR/Lib/site-packages:$INSTALLPREFIX/python/Lib/site-packages $PYDIR/python.exe setup.py install --prefix=$(cygpath -w $INSTALLPREFIX/python) &&
# ## delete any __pycache__ folder(s)
# #find $INSTALLPREFIX -name __pycache__ -exec echo rm -rf {} \; | sh &&
#    echo OK

# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




export NAME="libinstrument (ex libcsdbg)"
export STATUS=
export URL=https://libcsdbg.sourceforge.net/
export BASENAME=libinstrument
#export DESCRIPTION="libcsdbg is a C++ exception (and generic) stack tracer. When an exception is thrown, caught and handled, libcsdbg offers the tools to create, process and output the exception stack trace, the path the exception has propagated up the call stack, unwinding it, up to the section were it was handled."
export DESCRIPTION="Libinstrument is a complete and easy way to do custom function instrumentation for C/C++. The project comes ready with classic applications of instrumentation, such as AOP (Aspect Oriented Programming), Concern and Side Effect injection, stack tracing, exception tracing, basic time profiling, callgraph profiling and other. A GC (Garbage Collector) module is also under development."
export CATEGORY=development
export TYPE=library
export VERSION=1.3
export VERSIONDATE=20221024
wl-showstatus --package-version
export DEPENDENCIES=
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=Apache
export DOWNLOADURL="https://sourceforge.net/projects/libcsdbg/files/"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://downloads.sourceforge.net/project/libcsdbg/$VERSION/$BASENAME-$VERSION.tar.bz2
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xj --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.bz2
cd $BASENAME-$VERSION
# fix include.cmake/util.cmake (version >= 1.3)
patch -ulbf include.cmake/util.cmake << EOF
@@ -9,3 +9,3 @@

-       IF(UNIX OR CYGWIN)
+       IF(UNIX OR CYGWIN OR MINGW)

EOF
# don't force wrong compiler path
sed -i.bak -e "s/SET(CMAKE_CX*_COMPILER/#&/" CMakeLists.txt
# avoid invalid -rdynamic flag
sed -i.bak2 -e "s/-rdynamic//" CMakeLists.txt
## also allow static build
#sed -i.bak3 -e "s/\(ADD_LIBRARY([^ ] \)SHARED /\1/" CMakeLists.txt

#grep -wi add_library $(find -name CMakeLists.txt -or -name '*.cmake')

mkdir -p build_test && cmake.exe -G"MSYS Makefiles" -S. -Bbuild_test -LH && echo OK; rm -rf build_test

#export BUILDDEPENDENCIES=cmake,ninja
#export OPTIONALBUILDDEPENDENCIES=
#PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ 
#-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
mkdir -p build_win &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DWITH_STREAM_STTY:BOOL=OFF -DWITH_STREAM_TCP:BOOL=OFF -DCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=OFF -S. -Bbuild_win &&
 #wl-showstatus build &&
 #ninja -Cbuild_win &&
 wl-showstatus build-install &&
 ninja -Cbuild_win install/strip &&
    echo OK

#export BUILDDEPENDENCIES=cmake,ninja
#export OPTIONALBUILDDEPENDENCIES=
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -S. -Bbuild_static &&
# #-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -S. -Bbuild_shared &&
# ## fix execution of Python scripts
# #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|glib-genmarshal\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
# ## fix missing link libraries
# #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lws2_32/" build_shared/build.ninja &&
# #wl-showstatus build &&
# #ninja -Cbuild_static &&
# #wl-showstatus build &&
# #ninja -Cbuild_shared &&
# wl-showstatus build-install &&
# ninja -Cbuild_static install/strip &&
# #ninja -Cbuild_static library/install/strip &&
# wl-showstatus build-install &&
# ninja -Cbuild_shared install/strip &&
#    echo OK

# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




export NAME="Node.js"
export STATUS=
export URL=https://nodejs.org/
export BASENAME=nodejs
export DESCRIPTION="Node.js(R) is a JavaScript runtime built on Chrome's V8 JavaScript engine. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient. Node.js' package ecosystem, npm, is the largest ecosystem of open source libraries in the world."
export CATEGORY=development
export TYPE=application
#export VERSION=6.10.1
#export VERSIONDATE=20170322
#export VERSION=6.10.2
#export VERSIONDATE=20170405
#export VERSION=6.10.3
#export VERSIONDATE=20170503
#export VERSION=6.11.0
#export VERSIONDATE=20170607
#export VERSION=6.11.1
#export VERSIONDATE=20170712
#export VERSION=6.11.2
#export VERSIONDATE=20170816
#export VERSION=6.11.3
#export VERSIONDATE=20170906
#export VERSION=6.11.4
#export VERSIONDATE=20171004
#export VERSION=6.11.5
#export VERSIONDATE=20171025
#export VERSION=8.9.0
#export VERSIONDATE=20171101
#export VERSION=8.9.1
#export VERSIONDATE=20171108
#export VERSION=8.9.2
#export VERSIONDATE=20171206
#export VERSION=8.9.3
#export VERSIONDATE=20171209
#export VERSION=8.9.4
#export VERSIONDATE=20180103
#export VERSION=8.10.0
#export VERSIONDATE=20180307
#export VERSION=8.11.0
#export VERSIONDATE=20180329
#export VERSION=8.11.1
#export VERSIONDATE=20180330
#export VERSION=8.11.2
#export VERSIONDATE=20180516
####Please use either Python 2.6 or 2.7
#export VERSION=8.11.3
#export VERSIONDATE=20180613
#export VERSION=10.8.0
#export VERSIONDATE=20180804
#export VERSION=10.9.0
#export VERSIONDATE=20180816
#export VERSION=10.11.0
#export VERSIONDATE=20180920
#export VERSION=10.12.0
#export VERSIONDATE=20181011
#export VERSION=11.0.0
#export VERSIONDATE=20181024
#export VERSION=11.1.0
#export VERSIONDATE=20181102
#export VERSION=11.2.0
#export VERSIONDATE=20181116
#export VERSION=11.3.0
#export VERSIONDATE=20181128
#export VERSION=11.4.0
#export VERSIONDATE=20181208
#export VERSION=11.5.0
#export VERSIONDATE=20181219
#export VERSION=11.6.0
#export VERSIONDATE=20181227
#export VERSION=11.7.0
#export VERSIONDATE=20190118
#export VERSION=11.8.0
#export VERSIONDATE=20190125
#export VERSION=11.9.0
#export VERSIONDATE=20190131
#export VERSION=11.10.0
#export VERSIONDATE=20190215
#export VERSION=11.10.1
#export VERSIONDATE=20190228
#export VERSION=11.11.0
#export VERSIONDATE=20190307
#export VERSION=11.12.0
#export VERSIONDATE=20190316
#export VERSION=11.13.0
#export VERSIONDATE=20190329
#export VERSION=11.14.0
#export VERSIONDATE=20190412
#export VERSION=12.0.0
#export VERSIONDATE=20190424
#export VERSION=12.1.0
#export VERSIONDATE=20190430
#export VERSION=12.2.0
#export VERSIONDATE=20190508
#export VERSION=12.3.0
#export VERSIONDATE=20190522
#export VERSION=12.3.1
#export VERSIONDATE=20190523
#export VERSION=12.4.0
#export VERSIONDATE=20190605
#export VERSION=12.5.0
#export VERSIONDATE=20190628
#export VERSION=12.6.0
#export VERSIONDATE=20190704
#export VERSION=12.7.0
#export VERSIONDATE=20190724
#export VERSION=12.8.0
#export VERSIONDATE=20190807
#export VERSION=12.8.1
#export VERSIONDATE=20190815
#export VERSION=12.9.0
#export VERSIONDATE=20190821
#export VERSION=12.9.1
#export VERSIONDATE=20190827
#export VERSION=12.10.0
#export VERSIONDATE=20190905
#export VERSION=12.11.1
#export VERSIONDATE=20191002
#export VERSION=12.12.0
#export VERSIONDATE=20191012
#export VERSION=13.0.0
#export VERSIONDATE=20191023
#export VERSION=13.0.1
#export VERSIONDATE=20191023
#export VERSION=13.1.0
#export VERSIONDATE=20191107
#export VERSION=13.2.0
#export VERSIONDATE=20191122
#export VERSION=13.3.0
#export VERSIONDATE=20191204
#export VERSION=13.4.0
#export VERSIONDATE=20191218
#export VERSION=13.5.0
#export VERSIONDATE=20191219
#export VERSION=13.6.0
#export VERSIONDATE=20200108
#export VERSION=13.7.0
#export VERSIONDATE=20200122
#export VERSION=13.8.0
#export VERSIONDATE=20200206
#export VERSION=13.9.0
#export VERSIONDATE=20200219
#export VERSION=13.10.1
#export VERSIONDATE=20200305
#export VERSION=13.11.0
#export VERSIONDATE=20200313
#export VERSION=13.12.0
#export VERSIONDATE=20200327
#export VERSION=13.13.0
#export VERSIONDATE=20200415
#export VERSION=14.0.0
#export VERSIONDATE=20200422
#export VERSION=14.1.0
#export VERSIONDATE=20200430
#export VERSION=14.2.0
#export VERSIONDATE=20200506
#export VERSION=14.3.0
#export VERSIONDATE=20200520
#export VERSION=14.4.0
#export VERSIONDATE=20200603
#export VERSION=14.5.0
#export VERSIONDATE=20200701
#export VERSION=14.6.0
#export VERSIONDATE=20200722
#export VERSION=14.7.0
#export VERSIONDATE=20200730
#export VERSION=14.8.0
#export VERSIONDATE=20200812
#export VERSION=14.9.0
#export VERSIONDATE=20200828
#export VERSION=14.10.0
#export VERSIONDATE=20200909
#export VERSION=14.10.1
#export VERSIONDATE=20200910
#export VERSION=14.11.0
#export VERSIONDATE=20200916
#export VERSION=14.12.0
#export VERSIONDATE=20200923
#export VERSION=14.13.0
#export VERSIONDATE=20200930
#export VERSION=14.13.1
#export VERSIONDATE=20201008
#export VERSION=14.14.0
#export VERSIONDATE=20201016
#export VERSION=14.18.0
#export VERSIONDATE=20211001
#export VERSION=15.0.0
#export VERSIONDATE=20201021
#export VERSION=15.0.1
#export VERSIONDATE=20201022
#export VERSION=15.1.0
#export VERSIONDATE=20201105
#export VERSION=15.2.0
#export VERSIONDATE=20201111
#export VERSION=15.2.1
#export VERSIONDATE=20201116
#export VERSION=15.3.0
#export VERSIONDATE=20201124
#export VERSION=15.4.0
#export VERSIONDATE=20201210
#export VERSION=15.5.0
#export VERSIONDATE=20201223
#export VERSION=15.5.1
#export VERSIONDATE=20210105
#export VERSION=15.6.0
#export VERSIONDATE=20210115
#export VERSION=15.7.0
#export VERSIONDATE=20210127
#export VERSION=15.8.0
#export VERSIONDATE=20210203
#export VERSION=15.9.0
#export VERSIONDATE=20210218
#export VERSION=15.10.0
#export VERSIONDATE=20210223
#export VERSION=15.11.0
#export VERSIONDATE=20210303
#export VERSION=15.12.0
#export VERSIONDATE=20210318
#export VERSION=15.13.0
#export VERSIONDATE=20210401
#export VERSION=15.14.0
#export VERSIONDATE=20210407
#export VERSION=16.0.0
#export VERSIONDATE=20210421
#export VERSION=16.1.0
#export VERSIONDATE=20210505
#export VERSION=16.2.0
#export VERSIONDATE=20210519
#export VERSION=16.3.0
#export VERSIONDATE=20210603
#export VERSION=16.4.0
#export VERSIONDATE=20210623
#export VERSION=16.4.1
#export VERSIONDATE=20210702
#export VERSION=16.4.2
#export VERSIONDATE=20210706
#export VERSION=16.5.0
#export VERSIONDATE=20210714
#export VERSION=16.6.0
#export VERSIONDATE=20210730
#export VERSION=16.6.1
#export VERSIONDATE=20210803
#export VERSION=16.6.2
#export VERSIONDATE=20210812
#export VERSION=16.7.0
#export VERSIONDATE=20210818
#export VERSION=16.8.0
#export VERSIONDATE=20210826
#export VERSION=16.9.0
#export VERSIONDATE=20210907
#export VERSION=16.9.1
#export VERSIONDATE=20210911
#export VERSION=16.10.0
#export VERSIONDATE=20210923
#export VERSION=16.11.0
#export VERSIONDATE=20211009
#export VERSION=16.11.1
#export VERSIONDATE=20211013
#export VERSION=17.0.0
#export VERSIONDATE=20211020
#export VERSION=17.0.1
#export VERSIONDATE=20211021
#export VERSION=17.1.0
#export VERSIONDATE=20211110
#export VERSION=17.2.0
#export VERSIONDATE=20211201
#export VERSION=17.3.0
#export VERSIONDATE=20211218
#export VERSION=17.3.1
#export VERSIONDATE=20220111
#export VERSION=17.4.0
#export VERSIONDATE=20220119
#export VERSION=17.5.0
#export VERSIONDATE=20220211
#export VERSION=17.6.0
#export VERSIONDATE=20220223
#export VERSION=17.7.0
#export VERSIONDATE=20220310
#export VERSION=17.7.1
#export VERSIONDATE=20220311
#export VERSION=17.7.2
#export VERSIONDATE=20220318
#export VERSION=17.8.0
#export VERSIONDATE=20220323
#export VERSION=17.9.0
#export VERSIONDATE=20220408
#export VERSION=18.0.0
#export VERSIONDATE=20220420
#export VERSION=18.1.0
#export VERSIONDATE=20220503
#export VERSION=18.2.0
#export VERSIONDATE=20220518
#export VERSION=18.3.0
#export VERSIONDATE=20220602
#export VERSION=18.4.0
#export VERSIONDATE=20220617
#export VERSION=18.5.0
#export VERSIONDATE=20220708
#export VERSION=18.6.0
#export VERSIONDATE=20220714
#export VERSION=18.7.0
#export VERSIONDATE=20220727
#export VERSION=18.8.0
#export VERSIONDATE=20220825
#export VERSION=18.9.0
#export VERSIONDATE=20220909
#export VERSION=18.9.1
#export VERSIONDATE=20220924
#export VERSION=18.10.0
#export VERSIONDATE=20220929
export VERSION=18.11.0
export VERSIONDATE=20221014
####Warning: unrecognized setting VCCLCompilerTool/MultiProcessorCompilation
wl-showstatus --package-version
export DEPENDANCIES=
export OPTIONALDEPENDANCIES=
export BUILDDEPENDANCIES=msitools
export LICENSEFILE=LICENSE
export LICENSETYPE=
#export DOWNLOADURL="https://nodejs.org/en/download/ node-v"
export DOWNLOADURL="https://nodejs.org/en/download/current/ node-v"
#export DOWNLOADURL="https://github.com/nodejs/node/releases/"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL="https://nodejs.org/dist/v$VERSION/node-v$VERSION.tar.gz https://nodejs.org/dist/v$VERSION/node-v$VERSION-$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "x64"; else echo "x86"; fi).msi"
#export DOWNLOADSOURCEURL="https://github.com/nodejs/node/archive/v$VERSION.tar.gz"
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xfz $TARBALLDIR/$BASENAME/node-v$VERSION.tar.gz
cd node-v$VERSION
#tar xfz $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
#cd node-$VERSION
# extract prebuild binary
mkdir -p bin
msiextract -C bin $TARBALLDIR/$BASENAME/node-v$VERSION-$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "x64"; else echo "x86"; fi).msi
# fix deps/v8/src/base/format-macros.h
mv deps/v8/src/base/format-macros.h deps/v8/src/base/format-macros.h.bak &&
echo "#define __STDC_FORMAT_MACROS" > deps/v8/src/base/format-macros.h &&
cat deps/v8/src/base/format-macros.h.bak >> deps/v8/src/base/format-macros.h
# fix missing MSVS_VERSION in deps/openssl/openssl.gypi
sed -i.bak -e "s/ and MSVS_VERSION>=\"2012\"//" deps/openssl/openssl.gypi
# fix missing directory
mkdir -p out
## fix backslash issues
#mv tools/gyp/pylib/gyp/win_tool.py tools/gyp/pylib/gyp/win_tool.py.bak &&
#tr '\\' / < tools/gyp/pylib/gyp/win_tool.py.bak > tools/gyp/pylib/gyp/win_tool.py
wl-showstatus configure &&
#./autogen.sh &&
#    echo OK
## fix building DLLs on 64-bit
#if ( echo $RUNPLATFORM | grep -q x86_64 ); then
# echo "AM_GNU_GETTEXT_VERSION([$(gettext --version|head -n1|sed -e "s/^.* \([0-9\.]*\) *$/\1/")])" >> configure.ac &&
# autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal
#fi
#INTLTOOL_PERL="$PERLDIR/bin/perl.exe" 
#PERL="$PERLDIR/bin/perl.exe -I$PERLDIR/lib" 
#PYTHON=$PY2DIR/python.exe 
#PYTHON=$PY2DIR/python.exe C_INCLUDE_PATH=$PY2DIR/include${C_INCLUDE_PATH:+:$C_INCLUDE_PATH} 
#./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM LDFLAGS="-Wl,--as-needed -Wl,-no-undefined" &&
#./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM LDFLAGS="-Wl,--as-needed" &&
#--enable-static
#PATH=$PY2DIR:$PATH $PY2DIR/python.exe ./configure --prefix=$INSTALLPREFIX --dest-os=win --shared-openssl-includes=$MINGWPREFIX/include/openssl --shared-openssl-libpath=$MINGWPREFIX/lib --with-intl=system-icu &&
#PATH=$PY2DIR:$PATH $PY2DIR/python.exe ./configure --prefix=$INSTALLPREFIX --dest-os=win --without-ssl &&
#PATH=$PY2DIR:$PATH $PY2DIR/python.exe ./configure --prefix=$INSTALLPREFIX --dest-os=win --dest-cpu=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "x64"; else echo "x86"; fi) --cross-compiling --without-ssl --without-npm --without-etw --without-perfctr &&
#PATH=$PY2DIR:$PATH $PY2DIR/python.exe ./configure --prefix=$INSTALLPREFIX --dest-os=win --dest-cpu=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "x64"; else echo "x86"; fi) --cross-compiling --without-ssl --without-npm --without-etw &&
PATH=$PYDIR:$PATH $PYDIR/python.exe ./configure --prefix=$INSTALLPREFIX --dest-os=win --dest-cpu=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "x64"; else echo "x86"; fi) --cross-compiling --without-ssl --without-npm --without-etw &&
#PATH=$PY2DIR:$PATH $PY2DIR/python.exe ./configure --prefix=$INSTALLPREFIX --dest-os=win --ninja --dest-cpu=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "x64"; else echo "x86"; fi) --cross-compiling --without-ssl --without-npm --without-etw &&
#PATH=$PY2DIR:$PATH $PY2DIR/python.exe ./configure --prefix=$INSTALLPREFIX --dest-os=win --without-ssl --with-intl=system-icu --download=none --ninja &&
#PATH=$PY2DIR:$PATH $PY2DIR/python.exe ./configure --prefix=$INSTALLPREFIX --dest-os=win --without-ssl --with-intl=none --download=none &&
#    --shared-openssl-libname=SHARED_OPENSSL_LIBNAME
 ## fix building DLLs
 #mv libtool libtool.bak &&
 #sed -e "s/\(allow_undefined=\)yes/\1no/" libtool.bak > libtool &&
 ## avoid backslashes in Makefile (doesn't work, gets overwritten)
 #mv Makefile Makefile.bak &&
 #sed -e 's?\\\([a-z]\)?/\1?g' Makefile.bak > Makefile &&
 ##sed -e 's?\([a-z]\)\\\([a-z]\)?\1\2?g' Makefile.bak > Makefile &&
 wl-showstatus build &&
 mkdir -p out/Release/obj.host out/Release/obj.target out/Release/obj.target/tools/icu out/Release/obj/gen/src &&
 mkdir -p out/Release/.deps/out/Release out/Release/obj.host/tools/icu out/Release/obj.target/histogram/deps/histogram/src out/Release/obj.target/uvwasi/deps/uvwasi/src out/Release/.deps/out/Release/obj.target/histogram/deps/histogram/src &&
 #PATH=$PY2DIR:$PATH make BUILDTYPE=Release PYTHON=$PY2DIR/python.exe node CC=${CC:-gcc} &&
 #PATH=$PY2DIR:$PATH make BUILDTYPE=Release PYTHON=$PY2DIR/python.exe CC=${CC:-gcc} &&
 PATH=$PYDIR:$PATH make BUILDTYPE=Release PYTHON=$PYDIR/python.exe CC=${CC:-gcc} &&
 #PATH=$PY2DIR:$(pwd)/bin/nodejs:$PATH make BUILDTYPE=Release PYTHON=$PY2DIR/python.exe &&
 wl-showstatus build-install &&
 #PATH=$PY2DIR:$PATH make install BUILDTYPE=Release PYTHON=$PY2DIR/python.exe &&
 PATH=$PYDIR:$PATH make install BUILDTYPE=Release PYTHON=$PYDIR/python.exe &&
    echo OK
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf node-v$VERSION
####Not a C/C++ project



# fix deps/v8/src/base/platform/time.cc (version >= 18.2.0)
patch -ulbf deps/v8/src/base/platform/time.cc << EOF
@@ -785,2 +785,4 @@
   return ThreadTicks(ComputeThreadTicks());
+#elif V8_OS_WIN
+  return ThreadTicks::GetForThread(::GetCurrentThread());
 #elif(defined(_POSIX_THREAD_CPUTIME) && (_POSIX_THREAD_CPUTIME >= 0)) || \\
@@ -790,4 +792,2 @@
   return ThreadTicks(gethrvtime() / Time::kNanosecondsPerMicrosecond);
-#elif V8_OS_WIN
-  return ThreadTicks::GetForThread(::GetCurrentThread());
 #else
EOF
# fix deps/v8/src/base/export-template.h (version >= 18.2.0)
patch -ulbf deps/v8/src/base/export-template.h << EOF
@@ -155,3 +155,5 @@
 EXPORT_TEMPLATE_TEST(DEFAULT, __attribute__((visibility("default"))));
+#ifndef __MINGW32__
 EXPORT_TEMPLATE_TEST(MSVC_HACK, __declspec(dllexport));
+#endif
 EXPORT_TEMPLATE_TEST(DEFAULT, __declspec(dllimport));
EOF
# fix deps/v8/src/base/bits.h (version >= 18.2.0)
patch -ulbf deps/v8/src/base/bits.h << EOF
@@ -214,2 +214,3 @@
 // Precondition: 0 <= shift < 32
+#undef RotateRight32
 inline constexpr uint32_t RotateRight32(uint32_t value, uint32_t shift) {
@@ -219,2 +220,3 @@
 // Precondition: 0 <= shift < 32
+#undef RotateLeft32
 inline constexpr uint32_t RotateLeft32(uint32_t value, uint32_t shift) {
EOF
# fix deps/v8/src/base/debug/stack_trace_win.cc (version >= 18.2.0)
patch -ulbf deps/v8/src/base/debug/stack_trace_win.cc << EOF
@@ -83,3 +83,3 @@
   wchar_t exe_path[MAX_PATH];
-  GetModuleFileName(nullptr, exe_path, MAX_PATH);
+  GetModuleFileNameW(nullptr, exe_path, MAX_PATH);
   std::wstring exe_path_wstring(exe_path);
EOF

patch -ulbf tools/gyp/pylib/gyp/generator/msvs.py << EOF
@@ -166,5 +166,4 @@
     path = os.path.join(fixpath_prefix, path)
-  path = path.replace('/', '\\\\')
   path = _NormalizedSource(path)
-  if path and path[-1] == '\\\\':
+  if path and path[-1] == '/':
     path = path[:-1]
@@ -205,3 +204,3 @@
     if len(s) == 1:
-      filename = _NormalizedSource('\\\\'.join(prefix + s))
+      filename = _NormalizedSource('/'.join(prefix + s))
       if filename in excluded:
@@ -249,8 +248,2 @@
 def _ToolSetOrAppend(tools, tool_name, setting, value, only_if_unset=False):
-  # TODO(bradnelson): ugly hack, fix this more generally!!!
-  if 'Directories' in setting or 'Dependencies' in setting:
-    if type(value) == str:
-      value = value.replace('/', '\\\\')
-    else:
-      value = [i.replace('/', '\\\\') for i in value]
   if not tools.get(tool_name):
@@ -335,7 +328,3 @@
   else:
-    # Convert cat --> type to mimic unix.
-    if cmd[0] == 'cat':
-      command = ['type']
-    else:
-      command = [cmd[0].replace('/', '\\\\')]
+    command = [cmd[0]]
     # Add call before command to ensure that commands can be tied together one
EOF



#for F in src/*.cc; do
# CXX $F
# g++ -c -o $F.o $F -Isrc -Ideps/v8/include || break
#done



# fix configure.py (version >= 17.4.0)
patch -ulbf configure.py << EOF
@@ -1254,3 +1254,3 @@

-  if flavor == 'win' and (options.enable_lto):
+  if flavor == 'win' and 0 == 1 and (options.enable_lto):
     raise Exception(
@@ -1389,3 +1389,3 @@
     if options.__dict__[shared_lib + '_libpath']:
-      if flavor == 'win':
+      if flavor == 'win' and 0 == 1:
         if 'msvs_settings' not in output:
@@ -1824,3 +1824,3 @@
   #   shlib_suffix = 'so.%s'
-  if flavor == 'win':
+  if flavor == 'win' and 0 == 1:
     icu_config['variables']['icu_asm_ext'] = 'obj'
EOF
# fix tools/gyp/pylib/gyp/generator/ninja.py (version >= 17.4.0)
patch -ulbf tools/gyp/pylib/gyp/generator/ninja.py << EOF
@@ -165,3 +165,3 @@
         # bundle, so don't do this for bundles for now.
-        if flavor == "win" or self.bundle:
+        if (flavor == "win" and 0 == 1) or self.bundle:
             return False
@@ -244,4 +244,4 @@
             self.abs_build_dir = os.path.abspath(os.path.join(toplevel_dir, build_dir))
-        self.obj_ext = ".obj" if flavor == "win" else ".o"
-        if flavor == "win":
+        self.obj_ext = ".obj" if flavor == "win" and 0 == 1 else ".o"
+        if flavor == "win" and 0 == 1:
             # See docstring of msvs_emulation.GenerateEnvironmentFiles().
@@ -290,3 +290,3 @@
     def ExpandRuleVariables(self, path, root, dirname, source, ext, name):
-        if self.flavor == "win":
+        if self.flavor == "win" and 0 == 1:
             path = self.msvs_settings.ConvertVSMacros(path, config=self.config_name)
@@ -307,3 +307,3 @@
                 path = gyp.xcode_emulation.ExpandEnvVars(path, env)
-            elif self.flavor == "win":
+            elif self.flavor == "win" and 0 == 1:
                 path = gyp.msvs_emulation.ExpandMacros(path, env)
@@ -403,3 +403,3 @@
 
-        if self.flavor == "win":
+        if self.flavor == "win" and 0 == 1:
             self.msvs_settings = gyp.msvs_emulation.MsvsSettings(spec, generator_flags)
@@ -487,3 +487,3 @@
             pch = None
-            if self.flavor == "win":
+            if self.flavor == "win" and 0 == 1:
                 gyp.msvs_emulation.VerifyMissingSources(
@@ -527,3 +527,3 @@
         compile_deps = self.target.actions_stamp or actions_depends
-        if self.flavor == "win" and self.target.type == "static_library":
+        if self.flavor == "win" and 0 == 1 and self.target.type == "static_library":
             self.target.component_objs = link_deps
@@ -578,2 +578,4 @@
         """Writes rules to match MSVS's implicit idl handling."""
+        if not (0 == 1):
+            return []
         assert self.flavor == "win"
@@ -658,3 +660,3 @@
                 self.msvs_settings.GetRuleShellFlags(action)
-                if self.flavor == "win"
+                if self.flavor == "win" and 0 == 1
                 else None
@@ -1078,3 +1080,3 @@
             )
-        elif self.flavor == "win":
+        elif self.flavor == "win" and 0 == 1:
             asmflags = self.msvs_settings.GetAsmflags(config_name)
@@ -1132,3 +1134,3 @@
         )
-        if self.flavor == "win":
+        if self.flavor == "win" and 0 == 1:
             self.WriteVariableList(
@@ -1150,3 +1152,3 @@
         env = self.GetToolchainEnv()
-        if self.flavor == "win":
+        if self.flavor == "win" and 0 == 1:
             include_dirs = self.msvs_settings.AdjustIncludeDirs(
@@ -1163,3 +1165,3 @@
 
-        if self.flavor == "win":
+        if self.flavor == "win" and 0 == 1:
             midl_include_dirs = config.get("midl_include_dirs", [])
@@ -1217,8 +1219,8 @@
                 self.target.uses_cpp = True
-            elif ext == "c" or (ext == "S" and self.flavor != "win"):
+            elif ext == "c" or (ext == "S" and not (self.flavor == "win" and 0 == 1)):
                 command = "cc"
-            elif ext == "s" and self.flavor != "win":  # Doesn't generate .o.d files.
+            elif ext == "s" and not (self.flavor == "win" and 0 == 1):  # Doesn't generate .o.d files.
                 command = "cc_s"
             elif (
-                self.flavor == "win"
+                self.flavor == "win" and 0 == 1
                 and ext in ("asm", "S")
@@ -1235,3 +1237,3 @@
                 self.target.uses_cpp = True
-            elif self.flavor == "win" and ext == "rc":
+            elif self.flavor == "win" and 0 == 1 and ext == "rc":
                 command = "rc"
@@ -1248,3 +1250,3 @@
             variables = []
-            if self.flavor == "win":
+            if self.flavor == "win" and 0 == 1:
                 variables, output, implicit = precompiled_header.GetFlagsModifications(
@@ -1385,3 +1387,3 @@
                     if (
-                        self.flavor == "win"
+                        self.flavor == "win" and 0 == 1
                         and target.component_objs
@@ -1392,3 +1394,3 @@
                             order_deps.add(target.compile_deps)
-                    elif self.flavor == "win" and target.import_lib:
+                    elif self.flavor == "win" and 0 == 1 and target.import_lib:
                         new_deps = [target.import_lib]
@@ -1432,3 +1434,3 @@
             ldflags = env_ldflags + ldflags
-        elif self.flavor == "win":
+        elif self.flavor == "win" and 0 == 1:
             manifest_base_name = self.GypPathToUniqueOutput(
@@ -1477,3 +1479,3 @@
         library_dirs = config.get("library_dirs", [])
-        if self.flavor == "win":
+        if self.flavor == "win" and 0 == 1:
             library_dirs = [
@@ -1498,3 +1500,3 @@
             libraries = self.xcode_settings.AdjustLibraries(libraries, config_name)
-        elif self.flavor == "win":
+        elif self.flavor == "win" and 0 == 1:
             libraries = self.msvs_settings.AdjustLibraries(libraries)
@@ -1508,3 +1510,3 @@
             extra_bindings.append(("lib", gyp.common.EncodePOSIXShellArgument(output)))
-            if self.flavor != "win":
+            if not (self.flavor == "win" and 0 == 1):
                 link_file_list = output
@@ -1528,3 +1530,3 @@
                 )
-            if self.flavor == "win":
+            if self.flavor == "win" and 0 == 1:
                 extra_bindings.append(("binary", output))
@@ -1548,3 +1550,3 @@
                 command = command + "_notoc"
-        elif self.flavor == "win":
+        elif self.flavor == "win" and 0 == 1:
             extra_bindings.append(("binary", output))
@@ -1681,3 +1683,3 @@
         env = self.GetSortedXcodeEnv(additional_settings=additional_settings)
-        if self.flavor == "win":
+        if self.flavor == "win" and 0 == 1:
             env = self.GetMsvsToolchainEnv(additional_settings=additional_settings)
@@ -1848,3 +1850,3 @@
 
-        if self.flavor == "win":
+        if self.flavor == "win" and 0 == 1:
             override = self.msvs_settings.GetOutputName(
@@ -1908,3 +1910,3 @@
 
-        if self.flavor == "win":
+        if self.flavor == "win" and 0 == 1:
             args = [
@@ -1945,3 +1947,3 @@
         args = [self.ExpandSpecial(arg, self.base_to_build) for arg in args]
-        if self.flavor == "win":
+        if self.flavor == "win" and 0 == 1:
             rspfile = rule_name + ".\$unique_name.rsp"
@@ -2013,3 +2015,3 @@
         )
-    elif flavor == "win":
+    elif flavor == "win" and 0 == 1:
         exts = gyp.MSVSUtil.TARGET_TYPE_EXT
@@ -2235,3 +2237,3 @@
     #   to cc/cxx.
-    if flavor == "win":
+    if flavor == "win" and 0 == 1:
         ar = "lib.exe"
@@ -2314,3 +2316,3 @@
 
-    if flavor == "win":
+    if flavor == "win" and 0 == 1:
         configs = [
@@ -2344,3 +2346,3 @@
 
-    if flavor == "win":
+    if flavor == "win" and 0 == 1:
         master_ninja.variable("ld", ld)
@@ -2390,3 +2392,3 @@
         )
-        if flavor == "win":
+        if flavor == "win" and 0 == 1:
             master_ninja.variable("ld_host", ld_host)
@@ -2405,5 +2407,5 @@
 
-    deps = "msvc" if flavor == "win" else "gcc"
+    deps = "msvc" if flavor == "win" and 0 == 1 else "gcc"
 
-    if flavor != "win":
+    if not (flavor == "win" and 0 == 1):
         master_ninja.rule(
@@ -2498,3 +2500,3 @@
 
-    if flavor != "mac" and flavor != "win":
+    if flavor != "mac" and not (flavor == "win" and 0 == 1):
         master_ninja.rule(
@@ -2560,3 +2562,3 @@
         )
-    elif flavor == "win":
+    elif flavor == "win" and 0 == 1:
         master_ninja.rule(
@@ -2737,3 +2739,3 @@
         )
-    if flavor == "win":
+    if flavor == "win" and 0 == 1:
         master_ninja.rule(
@@ -2747,3 +2749,3 @@
         )
-    if flavor == "win":
+    if flavor == "win" and 0 == 1:
         master_ninja.rule(
@@ -2909,3 +2911,3 @@
     user_config = params.get("generator_flags", {}).get("config", None)
-    if gyp.common.GetFlavor(params) == "win":
+    if gyp.common.GetFlavor(params) == "win" and 0 == 1:
         target_list, target_dicts = MSVSUtil.ShardTargets(target_list, target_dicts)
EOF
wl-showstatus configure &&
 #PATH=$PYDIR:$PATH $PYDIR/python.exe ./configure --prefix=$INSTALLPREFIX --dest-os=win --dest-cpu=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "x64"; else echo "x86"; fi) --cross-compiling --without-ssl --without-npm --without-etw &&
 #PATH=$PYDIR:$PATH CC=${CC:-gcc} CXX=${CXX:-g++} $PYDIR/python.exe configure.py --prefix=$INSTALLPREFIX --dest-os=win --dest-cpu=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "x86_64"; else echo "x86"; fi) --cross-compiling --without-ssl --without-npm --without-etw &&
 PATH=$PYDIR:$PATH CC=${CC:-gcc} CXX=${CXX:-g++} $PYDIR/python.exe configure.py --ninja --prefix=$INSTALLPREFIX --dest-os=win --dest-cpu=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "x86_64"; else echo "x86"; fi) --cross-compiling --without-ssl --without-npm --without-etw &&
 wl-showstatus build &&
 ninja -Cout/Release -w dupbuild=warn &&
    echo OK
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf node-v$VERSION




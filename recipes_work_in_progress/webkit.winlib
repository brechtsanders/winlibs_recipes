export NAME="WebKit"
export STATUS=
export URL=https://webkit.org/
#export URL=https://github.com/WebKit/WebKit
export BASENAME=webkit
export DESCRIPTION="A fast, open source web browser engine. WebKit is the web browser engine used by Safari, Mail, App Store, and many other apps on macOS, iOS, and Linux."
export CATEGORY=framework
export TYPE=library
#export VERSION=snapshot-$(date "+%Y%m%d")
#export VERSION=master
#export VERSIONDATE=20200407
#export VERSION=main
#export VERSIONDATE=20210108
#export VERSION=611.1.6
#export VERSIONDATE=20210108
#export VERSION=612.1.11
#export VERSIONDATE=20210516
#export VERSION=7611.1.21.161.3
#export VERSIONDATE=20210516
#export VERSION=612.1.24.11.7 
#export VERSIONDATE=20210816
#export VERSION=612.3.6.0.4
#export VERSIONDATE=20211220
#export VERSION=613.1.12.3
#export VERSIONDATE=20220122
export VERSION=614.1.5.7
export VERSIONDATE=20220307
wl-showstatus --package-version
export DEPENDANCIES=corefoundation,openssl,ruby,icu
export OPTIONALDEPENDANCIES=
export BUILDDEPENDANCIES=
export LICENSEFILE=COPYING
export LICENSETYPE=
#export DOWNLOADURL="https://github.com/WebKit/WebKit/releases"
export DOWNLOADURL="https://github.com/WebKit/WebKit/tags Safari-"
#export DOWNLOADURL="https://webkit.org/getting-the-code/#browsing-the-code"
#export DOWNLOADURL="https://github.com/WebKit/WebKit/branches/active safari- -branch"
#export DOWNLOADURL="https://opensource.apple.com/tarballs/WebKit/ WebKit-"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://s3-us-west-2.amazonaws.com/archives.webkit.org/WebKit-SVN-source.tar.bz2
#export DOWNLOADSOURCEURL=https://github.com/WebKit/WebKit/archive/$VERSION.tar.gz
export DOWNLOADSOURCEURL=https://github.com/WebKit/WebKit/archive/refs/tags/Safari-$VERSION.tar.gz
#export DOWNLOADSOURCEURL=https://github.com/WebKit/WebKit/archive/safari-$VERSION-branch.tar.gz
#export DOWNLOADSOURCEURL=https://github.com/WebKit/WebKit/archive/refs/tags/Safari-$VERSION.tar.gz
#export DOWNLOADSOURCEURL=https://opensource.apple.com/tarballs/WebKit/WebKit-$VERSION.tar.gz
##export DOWNLOADSOURCEURL="https://opensource.apple.com/tarballs/WebKit/WebKit-$VERSION.tar.gz https://opensource.apple.com/tarballs/WTF/WTF-$VERSION.tar.gz"
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
#tar xfz $TARBALLDIR/$BASENAME/$VERSION.tar.gz
#tar xfz $TARBALLDIR/$BASENAME/safari-$VERSION-branch.tar.gz
#cd WebKit-safari-$VERSION-branch
tar xfz $TARBALLDIR/$BASENAME/Safari-$VERSION.tar.gz
cd WebKit-Safari-$VERSION
#tar xfz $TARBALLDIR/$BASENAME/WebKit-$VERSION.tar.gz
##tar xfz $TARBALLDIR/$BASENAME/WTF-$VERSION.tar.gz -CWebKit-$VERSION
#cd WebKit-$VERSION
sed -i.bak -e "s/\(find_package(OpenSSL \)2\.0\.0\( REQUIRED)\)/\11.1.0\2/" Source/cmake/OptionsFTW.cmake Source/cmake/OptionsWinCairo.cmake
#-DPORT:STRING=WinCairo
#-DPORT:STRING=Efl
#-DPORT:STRING=GTK
#mkdir -p build_test && cd build_test && cmake.exe -G"MSYS Makefiles" -DPORT:STRING=WinCairo .. -LH && echo OK; cd ..; rm -rf build_test
#rm -rf CMakeCache.txt CMakeFiles; cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release . -LH && echo OK
#export BUILDDEPENDANCIES=cmake
#PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ 
mkdir -p build_win &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DPORT:STRING=WinCairo -DENABLE_WEBGL:BOOL=OFF -DENABLE_WEBGL2:BOOL=OFF -DENABLE_3D_TRANSFORMS:BOOL=OFF -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DRUBY_LIBRARY:PATH=$(ls -d1 $MINGWPREFIX/lib/ruby/[0-9]* | sort -V | tail -n1) -DENABLE_API_TESTS:BOOL=OFF -S. -Bbuild_win -LH &&
 #wl-showstatus build &&
 #ninja -Cbuild_win &&
 wl-showstatus build-install &&
 ninja -Cbuild_win install/strip &&
    echo OK

#export BUILDDEPENDANCIES=cmake
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -S. -Bbuild_static &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -S. -Bbuild_shared &&
# #wl-showstatus build &&
# #make -Cbuild_static &&
# #wl-showstatus build &&
# #make -Cbuild_shared &&
# wl-showstatus build-install &&
# make -Cbuild_static install/strip &&
# wl-showstatus build-install &&
# make -Cbuild_shared install/strip &&
#    echo OK

#export BUILDDEPENDANCIES=cmake,ninja
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -S. -Bbuild_static &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -S. -Bbuild_shared &&
# #wl-showstatus build &&
# #ninja -Cbuild_static &&
# #wl-showstatus build &&
# #ninja -Cbuild_shared &&
# wl-showstatus build-install &&
# ninja -Cbuild_static install/strip &&
# wl-showstatus build-install &&
# ninja -Cbuild_shared install/strip &&
#    echo OK

#export BUILDDEPENDANCIES=meson,ninja
#-Dc_args=$CFLAGS -Dcpp_args=$CXXFLAGS -Dc_link_args=$LDFLAGS
## fix missing gio-unix
#sed -i.bak -e "s/gio-unix-/gio-/" meson.build
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library static -D documentation=true . build_static &&
# wl-showstatus configure &&
# PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library shared -D documentation=true . build_shared &&
# ## fix slash/backslash path issue when calling Python from Ninja
# #sed -i.bak -e "s/join_paths/os.path.join/g; /COMMAND =.*python\.exe/ s?\"/\([a-zA-Z]\)/?\"\1:/?; /COMMAND =.*python\.exe/ s?/?\\\\?g" build_*/build.ninja &&
# wl-showstatus build-install &&
# #PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib ninja -C build_static install &&
# PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib ninja -C build_static install/strip &&
# wl-showstatus build-install &&
# #PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib ninja -C build_shared install &&
# PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib ninja -C build_shared install/strip &&
#    echo OK && find . -name '*.a'

#export BUILDDEPENDANCIES=meson,ninja
#-Dc_args=$CFLAGS -Dcpp_args=$CXXFLAGS -Dc_link_args=$LDFLAGS
## fix missing gio-unix
#sed -i.bak -e "s/gio-unix-/gio-/" meson.build
#mkdir -p build_both &&
# wl-showstatus configure &&
# PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -D documentation=true . build_both &&
# ## fix slash/backslash path issue when calling Python from Ninja
# #sed -i.bak -e "s/join_paths/os.path.join/g; /COMMAND =.*python\.exe/ s?\"/\([a-zA-Z]\)/?\"\1:/?; /COMMAND =.*python\.exe/ s?/?\\\\?g" build_*/build.ninja &&
# ## fix Python path issues in meson_exe
# #sed -i.bak -e "s?$PYDIR?$(echo $PYDIR|sed -e "s?^/\([a-zA-Z]\)/?\1:/?")?" build_both/meson-private/meson_exe_python.exe_*.dat &&
# wl-showstatus build-install &&
# #PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib ninja -C build_both install &&
# PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib ninja -C build_both install/strip &&
#    echo OK && find . -name '*.a'

# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf WebKit-$VERSION
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf WebKit-safari-$VERSION-branch



-- Platform-specific CMakeLists not found: R:/winlibs64-9.2.0/webkit-master/PerformanceTests/PlatformWin.cmake
-- Enabled features:
--  ENABLE_3D_TRANSFORMS .......................... ON
--  ENABLE_ACCELERATED_2D_CANVAS                    OFF
--  ENABLE_API_TESTS .............................. OFF
--  ENABLE_ATTACHMENT_ELEMENT                       ON
--  ENABLE_CHANNEL_MESSAGING ...................... ON
--  ENABLE_CSS3_TEXT                                OFF
--  ENABLE_CSS_BOX_DECORATION_BREAK ............... ON
--  ENABLE_CSS_SELECTORS_LEVEL4                     ON
--  ENABLE_CURSOR_VISIBILITY ...................... ON
--  ENABLE_DATALIST_ELEMENT                         OFF
--  ENABLE_DEVICE_ORIENTATION ..................... OFF
--  ENABLE_DRAG_SUPPORT                             ON
--  ENABLE_FTL_JIT ................................ OFF
--  ENABLE_FULLSCREEN_API                           ON
--  ENABLE_GAMEPAD ................................ OFF
--  ENABLE_GEOLOCATION                              ON
--  ENABLE_INDEXED_DATABASE ....................... ON
--  ENABLE_INDEXED_DATABASE_IN_WORKERS              ON
--  ENABLE_INPUT_TYPE_COLOR ....................... OFF
--  ENABLE_INPUT_TYPE_DATE                          OFF
--  ENABLE_INPUT_TYPE_DATETIMELOCAL ............... OFF
--  ENABLE_INPUT_TYPE_DATETIME_INCOMPLETE           OFF
--  ENABLE_INPUT_TYPE_MONTH ....................... OFF
--  ENABLE_INPUT_TYPE_TIME                          OFF
--  ENABLE_INPUT_TYPE_WEEK ........................ OFF
--  ENABLE_INTL                                     ON
--  ENABLE_LEGACY_CSS_VENDOR_PREFIXES ............. ON
--  ENABLE_LEGACY_ENCRYPTED_MEDIA                   OFF
--  ENABLE_MATHML ................................. ON
--  ENABLE_MEDIA_CONTROLS_SCRIPT                    ON
--  ENABLE_MEDIA_SOURCE ........................... OFF
--  ENABLE_MEDIA_STATISTICS                         ON
--  ENABLE_METER_ELEMENT .......................... ON
--  ENABLE_MOUSE_CURSOR_SCALE                       ON
--  ENABLE_NOTIFICATIONS .......................... OFF
--  ENABLE_OVERFLOW_SCROLLING_TOUCH                 OFF
--  ENABLE_QUOTA .................................. OFF
--  ENABLE_STREAMS_API                              ON
--  ENABLE_SVG_FONTS .............................. ON
--  ENABLE_VIDEO                                    ON
--  ENABLE_VIDEO_TRACK ............................ ON
--  ENABLE_WEBGL                                    ON
--  ENABLE_WEB_AUDIO .............................. OFF
--  ENABLE_XSLT                                     ON
-- Configuring done



####See also: https://gist.github.com/baylej/d32be86616104569b29b
#git clone git://git.webkit.org/WebKit-https.git WebKit
#git clone git://git.webkit.org/WebKit.git
#cd WebKit
#sed -i.bak -e "s/\(OpenSSL \)2\(\.0\.0)/\11\2/" Source/cmake/OptionsWinCairo.cmake Source/cmake/OptionsFTW.cmake
##AppleWin;Efl;FTW;GTK;JSCOnly;Mac;PlayStation;WPE;WinCairo
#mkdir -p build_test && cmake.exe -GNinja -DPORT:STRING=WinCairo -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -S. -Bbuild_test -LH && echo OK; rm -rf build_test
#mkdir -p build_win &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DPORT:STRING=WinCairo -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -S. -Bbuild_win &&
# #wl-showstatus build &&
# #make -Cbuild_win &&
# wl-showstatus build-install &&
# ninja -Cbuild_win install/strip &&
#    echo OK



####See also: https://webkit.org/webkit-on-windows/#getting-the-code
####See also: https://github.com/WebKit/webkit/blob/main/Tools/Scripts/build-webkit



export NAME="WebKit"
export STATUS=
export URL=https://github.com/WebKit/WebKit
export BASENAME=webkit
export DESCRIPTION="A fast, open source web browser engine. WebKit is the web browser engine used by Safari, Mail, App Store, and many other apps on macOS, iOS, and Linux."
export CATEGORY=
export TYPE=library
#export VERSION=610.4.3.1.7
#export VERSIONDATE=20210922
#export VERSION=611.4.1.0.3
#export VERSIONDATE=20210922
#export VERSION=612.2.7
#export VERSIONDATE=20210922
#export VERSION=612.2.9.1.6
#export VERSIONDATE=20211009
#export VERSION=612.2.9.1.8
#export VERSIONDATE=20211016
#export VERSION=613.1.3.1
#export VERSIONDATE=20211007
#export VERSION=613.1.4.2
#export VERSIONDATE=20211013
#export VERSION=613.1.5.1
#export VERSIONDATE=20211020
#export VERSION=613.2.1
#export VERSIONDATE=20220308
#export VERSION=613.2.3
#export VERSIONDATE=20220322
#export VERSION=614.1.1.4
#export VERSIONDATE=20220205
#export VERSION=614.1.3.4
#export VERSIONDATE=20220219
#export VERSION=614.1.5.3
#export VERSIONDATE=20220301
#export VERSION=614.1.5.7
#export VERSIONDATE=20220308
#export VERSION=614.1.5.12
#export VERSIONDATE=20220317
#export VERSION=614.1.5.15
#export VERSIONDATE=20220322
#export VERSION=614.1.6.2
#export VERSIONDATE=20220324
#export VERSION=614.1.5.16
#export VERSIONDATE=20220325
#export VERSION=614.1.7.3
#export VERSIONDATE=20220329
#export VERSION=614.1.9
#export VERSIONDATE=20220409
#export VERSION=7614.1.10.7
#export VERSIONDATE=20220428
#export VERSION=7614.1.11
#export VERSIONDATE=20220430
#export VERSION=7614.1.12.1
#export VERSIONDATE=20220511
#export VERSION=7613.3.1.0.2
#export VERSIONDATE=20220512
#export VERSION=7613.3.2
#export VERSIONDATE=20220603
#export VERSION=7613.3.3.0.1
#export VERSIONDATE=20220609
#export VERSION=7614.1.14.10.3
#export VERSIONDATE=20220524
#export VERSION=7614.1.16.10.1
#export VERSIONDATE=20220614
#export VERSION=7614.1.17
#export VERSIONDATE=20220616
#export VERSION=7614.1.17.1
#export VERSIONDATE=20220619
#export VERSION=7614.1.18
#export VERSIONDATE=20220623
#export VERSION=7614.1.19.1.1
#export VERSIONDATE=20220628
#export VERSION=7614.1.20.1
#export VERSIONDATE=20220708
#export VERSION=7615.1.1
#export VERSIONDATE=20220804
#export VERSION=7615.1.1.1
#export VERSIONDATE=20220809
#export VERSION=7615.1.1.2
#export VERSIONDATE=20220811
#export VERSION=7615.1.2
#export VERSIONDATE=20220816
#export VERSION=7615.1.2.1
#export VERSIONDATE=20220817
#export VERSION=7615.1.2.2
#export VERSIONDATE=20220818
#export VERSION=7615.1.2.3
#export VERSIONDATE=20220823
#export VERSION=7615.1.3
#export VERSIONDATE=20220825
#export VERSION=7615.1.3.1
#export VERSIONDATE=20220826
#export VERSION=7615.1.4
#export VERSIONDATE=20220901
#export VERSION=7615.1.4.2
#export VERSIONDATE=20220902
#export VERSION=7615.1.4.3
#export VERSIONDATE=20220903
#export VERSION=7615.1.5.1
#export VERSIONDATE=20220910
export VERSION=7615.1.6
export VERSIONDATE=20220916
wl-showstatus --package-version
export DEPENDANCIES=cairo,libcurl,icu,libjpeg,libxml2,openssl
export OPTIONALDEPENDANCIES=
export BUILDDEPENDANCIES=cmake,ninja
export LICENSEFILE=
export LICENSETYPE=
#export DOWNLOADURL="https://github.com/WebKit/WebKit/releases Safari-"
export DOWNLOADURL="https://github.com/WebKit/WebKit/tags Safari-"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://github.com/WebKit/WebKit/archive/refs/tags/Safari-$VERSION.tar.gz
export DOWNLOADSOURCEURL=https://github.com/WebKit/WebKit/archive/refs/tags/WebKit-$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
#tar xfz $TARBALLDIR/$BASENAME/Safari-$VERSION.tar.gz
#cd WebKit-Safari-$VERSION
tar xfz $TARBALLDIR/$BASENAME/WebKit-$VERSION.tar.gz
cd WebKit-WebKit-$VERSION
  ./configure --help 2> /dev/null
  cat meson_options.txt 2> /dev/null
  head COPYING* LICENSE* LICENCE* COPYRIGHT*
  ls -ld COPYING* LICENSE* LICENCE* COPYRIGHT* configure* m4 CMakeLists.txt cmake Makefile GNUmakefile setup.py scons SConscript SConstruct meson.build meson_options.txt *.pro *.proj *.sln BUILD.gn .gn build 2> /dev/null

#grep -wi add_library $(find -name CMakeLists.txt -or -name '*.cmake')
#mkdir -p build_test && cmake.exe -GNinja -DCMAKE_BUILD_TYPE:STRING=Release -DPORT:STRING=WinCairo -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -S. -Bbuild_test -LH && echo OK; rm -rf build_test
#mkdir -p build_test && cmake.exe -GNinja -DCMAKE_BUILD_TYPE:STRING=Release -DPORT:STRING=WinCairo -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -S. -Bbuild_test -LH && echo OK; rm -rf build_test

#export BUILDDEPENDANCIES=cmake,ninja
#PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ 
#-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
mkdir -p build_win &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DPORT:STRING=WinCairo -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DPython_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DCMAKE_CXX_FLAGS:STRING="-I$MINGWPREFIX/include/mman-win32" -S. -Bbuild_win &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DPORT:STRING=GTK -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DPython_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) -S. -Bbuild_win &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DPORT:STRING=Efl -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DPython_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) -S. -Bbuild_win &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DPORT:STRING=WPE -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DPython_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) -S. -Bbuild_win &&
 #-DPORT:STRING= choose which WebKit port to build (one of AppleWin;Efl;FTW;GTK;JSCOnly;Mac;PlayStation;WPE;WinCairo)
 #wl-showstatus build &&
 #ninja -Cbuild_win &&
 wl-showstatus build-install &&
 ninja -Cbuild_win install/strip &&
    echo OK

#export BUILDDEPENDANCIES=cmake,ninja
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -S. -Bbuild_static &&
# #-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -S. -Bbuild_shared &&
# ## fix execution of Python scripts
# #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|glib-genmarshal\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
# ## fix missing link libraries
# #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lws2_32/" build_win/build.ninja &&
# #wl-showstatus build &&
# #ninja -Cbuild_static &&
# #wl-showstatus build &&
# #ninja -Cbuild_shared &&
# wl-showstatus build-install &&
# ninja -Cbuild_static install/strip &&
# wl-showstatus build-install &&
# ninja -Cbuild_shared install/strip &&
#    echo OK

# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf WebKit-Safari-$VERSION
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf WebKit-WebKit-$VERSION



if [ ! -f $TARBALLDIR/$BASENAME/git-v$VERSION.tar.xz ]; then
 git clone https://github.com/WebKit/WebKit.git WebKit -b Safari-$VERSION &&
 tar cfJ $TARBALLDIR/$BASENAME/git-v$VERSION.tar.xz WebKit
else
 tar xfJ $TARBALLDIR/$BASENAME/git-v$VERSION.tar.xz
fi
cd WebKit

export NAME="ImHex"
export STATUS=
export URL=https://imhex.werwolv.net/
export BASENAME=imhex
export DESCRIPTION="A Hex Editor for Reverse Engineers, Programmers and people who value their retinas when working at 3 AM."
export CATEGORY=
export TYPE=application
#export VERSION=1.19.3
#export VERSIONDATE=20220727
#export VERSION=1.20.0
#export VERSIONDATE=20220805
#export VERSION=1.21.0
#export VERSIONDATE=20220815
#export VERSION=1.21.1
#export VERSIONDATE=20220816
#export VERSION=1.21.2
#export VERSIONDATE=20220818
#export VERSION=1.22.0
#export VERSIONDATE=20220904
#export VERSION=1.23.0
#export VERSIONDATE=20220915
#export VERSION=1.23.1
#export VERSIONDATE=20220917
#export VERSION=1.23.2
#export VERSIONDATE=20220918
#export VERSION=1.24.0
#export VERSIONDATE=20221008
#export VERSION=1.24.2
#export VERSIONDATE=20221011
#export VERSION=1.24.3
#export VERSIONDATE=20221014
#export VERSION=1.25.0
#export VERSIONDATE=20221114
#export VERSION=1.26.0
#export VERSIONDATE=20230105
#export VERSION=1.26.1
#export VERSIONDATE=20230105
#export VERSION=1.26.2
#export VERSIONDATE=20230106
#export VERSION=1.27.0
#export VERSIONDATE=20230213
#export VERSION=1.27.1
#export VERSIONDATE=20230215
export VERSION=1.28.0
export VERSIONDATE=20230404
wl-showstatus --package-version
export DEPENDENCIES=capstone
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=GPL
export DOWNLOADURL="https://github.com/WerWolv/ImHex/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/WerWolv/ImHex/archive/refs/tags/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd ImHex-$VERSION
# fix cmake/build_helpers.cmake (version >= 1.19.3)
patch -ulbf cmake/build_helpers.cmake << EOF
@@ -285,3 +285,3 @@
         if(ENTRY_COUNT LESS_EQUAL 1)
-            message(FATAL_ERROR "External dependency \${EXTERNAL_DIR} is empty!\\nMake sure to correctly clone ImHex using the --recurse-submodules git option or initialize the submodules manually.")
+            message(WARNING "External dependency \${EXTERNAL_DIR} is empty!\\nMake sure to correctly clone ImHex using the --recurse-submodules git option or initialize the submodules manually.")
         endif()
EOF

#grep -wi add_library $(find -name CMakeLists.txt -or -name '*.cmake')
#mkdir -p build_test && cmake.exe -G"MSYS Makefiles" -DFETCHCONTENT_FULLY_DISCONNECTED:BOOL=ON -DIMHEX_OFFLINE_BUILD:BOOL=ON -S. -Bbuild_test -LH && echo OK; rm -rf build_test

#export BUILDDEPENDENCIES=cmake
#export OPTIONALBUILDDEPENDENCIES=
#PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ 
#-DCMAKE_SYSTEM_NAME=Windows 
#-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
#mkdir -p build_win &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -S. -Bbuild_win &&
# #wl-showstatus build &&
# #make -Cbuild_win &&
# wl-showstatus build-install &&
# make -Cbuild_win install/strip &&
#    echo OK

#export BUILDDEPENDENCIES=cmake,ninja
#export OPTIONALBUILDDEPENDENCIES=
#PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ 
#-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
#mkdir -p build_win &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -S. -Bbuild_win &&
# #wl-showstatus build &&
# #ninja -Cbuild_win &&
# wl-showstatus build-install &&
# ninja -Cbuild_win install/strip &&
#    echo OK

#export BUILDDEPENDENCIES=cmake,ninja
#export OPTIONALBUILDDEPENDENCIES=
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -S. -Bbuild_static &&
# #-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -S. -Bbuild_shared &&
# ## fix execution of Python scripts
# #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|glib-genmarshal\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
# ## fix missing link libraries
# #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lws2_32/" build_shared/build.ninja &&
# #wl-showstatus build &&
# #ninja -Cbuild_static &&
# #wl-showstatus build &&
# #ninja -Cbuild_shared &&
# wl-showstatus build-install &&
# ninja -Cbuild_static install/strip &&
# wl-showstatus build-install &&
# ninja -Cbuild_shared install/strip &&
#    echo OK

# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf ImHex-$VERSION




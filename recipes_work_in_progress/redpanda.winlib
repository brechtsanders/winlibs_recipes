export NAME="Redpanda"
export STATUS=
export URL=https://redpanda.com/
export BASENAME=redpanda
export DESCRIPTION="Redpanda is a streaming data platform for developers. Kafka API compatible. 10x faster. No ZooKeeper. No JVM!"
export CATEGORY=
export TYPE=library
#export VERSION=23.2.28
#export VERSIONDATE=20240421
#export VERSION=23.2.29
#export VERSIONDATE=20240503
#export VERSION=23.3.2
#export VERSIONDATE=20240114
#export VERSION=23.3.3
#export VERSIONDATE=20240121
#export VERSION=23.3.4
#export VERSIONDATE=20240126
#export VERSION=23.3.5
#export VERSIONDATE=20240209
#export VERSION=23.3.6
#export VERSIONDATE=20240222
#export VERSION=23.3.7
#export VERSIONDATE=20240313
#export VERSION=23.3.8
#export VERSIONDATE=20240316
#export VERSION=23.3.9
#export VERSIONDATE=20240319
#export VERSION=23.3.10
#export VERSIONDATE=20240328
#export VERSION=23.3.11
#export VERSIONDATE=20240405
#export VERSION=23.3.12
#export VERSIONDATE=20240419
#export VERSION=23.3.13
#export VERSIONDATE=20240427
#export VERSION=23.3.14
#export VERSIONDATE=20240502
#export VERSION=23.3.15
#export VERSIONDATE=20240506
#export VERSION=23.3.17
#export VERSIONDATE=20240615
#export VERSION=23.3.18
#export VERSIONDATE=20240629
#export VERSION=23.3.19
#export VERSIONDATE=20240806
#export VERSION=23.3.20
#export VERSIONDATE=20240822
#export VERSION=23.3.21
#export VERSIONDATE=20240922
#export VERSION=24.1.1
#export VERSIONDATE=20240508
#export VERSION=24.1.2
#export VERSIONDATE=20240514
#export VERSION=24.1.3
#export VERSIONDATE=20240524
#export VERSION=24.1.4
#export VERSIONDATE=20240530
#export VERSION=24.1.5
#export VERSIONDATE=20240531
#export VERSION=24.1.6
#export VERSIONDATE=20240601
#export VERSION=24.1.7
#export VERSIONDATE=20240607
#export VERSION=24.1.8
#export VERSIONDATE=20240615
#export VERSION=24.1.9
#export VERSIONDATE=20240625
#export VERSION=24.1.10
#export VERSIONDATE=20240718
#export VERSION=24.1.12
#export VERSIONDATE=20240726
#export VERSION=24.1.13
#export VERSIONDATE=20240727
#export VERSION=24.1.14
#export VERSIONDATE=20240807
#export VERSION=24.1.15
#export VERSIONDATE=20240823
#export VERSION=24.1.16
#export VERSIONDATE=20240905
#export VERSION=24.1.17
#export VERSIONDATE=20240921
#export VERSION=24.1.18
#export VERSIONDATE=20241118
#export VERSION=24.1.19
#export VERSIONDATE=20250227
#export VERSION=24.2.1
#export VERSIONDATE=20240801
#export VERSION=24.2.2
#export VERSIONDATE=20240808
#export VERSION=24.2.3
#export VERSIONDATE=20240828
#export VERSION=24.2.4
#export VERSIONDATE=20240905
#export VERSION=24.2.5
#export VERSIONDATE=20240921
#export VERSION=24.2.6
#export VERSIONDATE=20241008
#export VERSION=24.2.7
#export VERSIONDATE=20241012
#export VERSION=24.2.8
#export VERSIONDATE=20241102
#export VERSION=24.2.9
#export VERSIONDATE=20241108
#export VERSION=24.2.10
#export VERSIONDATE=20241109
#export VERSION=24.2.11
#export VERSIONDATE=20241122
#export VERSION=24.2.12
#export VERSIONDATE=20241127
#export VERSION=24.2.13
#export VERSIONDATE=20241211
#export VERSION=24.2.14
#export VERSIONDATE=20241221
#export VERSION=24.2.15
#export VERSIONDATE=20250110
#export VERSION=24.2.16
#export VERSIONDATE=20250125
#export VERSION=24.2.17
#export VERSIONDATE=20250204
#export VERSION=24.2.18
#export VERSIONDATE=20250214
#export VERSION=24.2.19
#export VERSIONDATE=20250227
#export VERSION=24.2.20
#export VERSIONDATE=20250308
#export VERSION=24.2.21
#export VERSIONDATE=20250403
#export VERSION=24.2.22
#export VERSIONDATE=20250425
#export VERSION=24.3.1
#export VERSIONDATE=20241204
#export VERSION=24.3.2
#export VERSIONDATE=20241219
#export VERSION=24.3.3
#export VERSIONDATE=20250110
#export VERSION=24.3.4
#export VERSIONDATE=20250129
#export VERSION=24.3.5
#export VERSIONDATE=20250204
#export VERSION=24.3.6
#export VERSIONDATE=20250227
#export VERSION=24.3.7
#export VERSIONDATE=20250315
#export VERSION=24.3.8
#export VERSIONDATE=20250319
#export VERSION=24.3.9
#export VERSIONDATE=20250329
#export VERSION=24.3.10
#export VERSIONDATE=20250415
#export VERSION=24.3.11
#export VERSIONDATE=20250425
export VERSION=25.1.1
export VERSIONDATE=20250407
wl-showstatus --package-version
export DEPENDENCIES=lksctp-tools
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=licenses/README.md
export LICENSETYPE=BSL/RCL
export DOWNLOADURL="https://github.com/redpanda-data/redpanda/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/redpanda-data/redpanda/archive/refs/tags/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd $BASENAME-$VERSION

#grep -wi add_library $(find -name CMakeLists.txt -or -name '*.cmake')
mkdir -p build_test && cmake.exe -G"MSYS Makefiles" -DRedpanda_LINKER:STRING=${LD:-ld} -S. -Bbuild_test -LH && echo OK; rm -rf build_test

#export BUILDDEPENDENCIES=cmake
#PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ 
#PATH=$PATH:$MINGWPREFIX/qt6/bin QTDIR=$MINGWPREFIX/qt6 QMAKESPEC=$MINGWPREFIX/qt6/mkspecs/win32-g++ 
#-DCMAKE_SYSTEM_NAME=Windows 
#-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
#mkdir -p build_win &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -S. -Bbuild_win &&
# #wl-showstatus build &&
# #cmake.exe --build build_win &&
# #make -Cbuild_win &&
# wl-showstatus build-install &&
# make -Cbuild_win install/strip &&
#    echo OK

#export BUILDDEPENDENCIES=cmake,ninja
#PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ 
#-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
#mkdir -p build_win &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -S. -Bbuild_win &&
# #wl-showstatus build &&
# #cmake.exe --build build_win &&
# #ninja -Cbuild_win &&
# wl-showstatus build-install &&
# #cmake.exe --install build_win --strip &&
# #cmake.exe --build build_win --target "install/strip" &&
# ninja -Cbuild_win install/strip &&
#    echo OK

#export BUILDDEPENDENCIES=cmake,ninja
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -S. -Bbuild_static &&
# #-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -S. -Bbuild_shared &&
# ## fix execution of Python scripts
# #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|glib-genmarshal\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
# ## fix missing link libraries
# #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lws2_32/" build_shared/build.ninja &&
# #wl-showstatus build &&
# #cmake.exe --build build_static &&
# #ninja -Cbuild_static &&
# #wl-showstatus build &&
# #cmake.exe --build build_shared &&
# #ninja -Cbuild_shared &&
# wl-showstatus build-install &&
# #cmake.exe --install build_static --strip &&
# #cmake.exe --build build_static --target "install/strip" &&
# #cmake.exe --build build_static --target "library/install/strip" &&
# ninja -Cbuild_static install/strip &&
# #ninja -Cbuild_static library/install/strip &&
# wl-showstatus build-install &&
# #cmake.exe --install build_shared --strip &&
# #cmake.exe --build build_shared --target "install/strip" &&
# ninja -Cbuild_shared install/strip &&
#    echo OK

#-DCMAKE_BUILD_TYPE:STRING=MinSizeRel

#export BUILDDEPENDENCIES=meson,ninja
#-Dc_args=$CFLAGS -Dcpp_args=$CXXFLAGS -Dc_link_args=$LDFLAGS
## fix missing gio-unix
#sed -i.bak -e "s/gio-unix-/gio-/" meson.build
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library static -D documentation=true . build_static &&
# wl-showstatus configure &&
# PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library shared -D documentation=true . build_shared &&
# ## fix slash/backslash path issue when calling Python from Ninja
# #sed -i.bak -e "s/join_paths/os.path.join/g; /COMMAND =.*python\.exe/ s?\"/\([a-zA-Z]\)/?\"\1:/?; /COMMAND =.*python\.exe/ s?/?\\\\?g" build_*/build.ninja &&
# ## add linker flag
# #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*-ladvapi32/& -Wl,--as-needed/" build_shared/build.ninja &&
# ## add linker flag
# #sed -i.bak -e "s/^\s*LINK_ARGS\s*=.*\"-ladvapi32\"/& \"-Wl,--as-needed\"/" build_shared/build.ninja &&
# wl-showstatus build-install &&
# #PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -C build_static install &&
# PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -C build_static install/strip &&
# wl-showstatus build-install &&
# #PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -C build_shared install &&
# PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -C build_shared install/strip &&
#    echo OK && find . -name '*.a'

#export BUILDDEPENDENCIES=meson,ninja
#-Dc_args=$CFLAGS -Dcpp_args=$CXXFLAGS -Dc_link_args=$LDFLAGS -Dcpp_link_args=$LDFLAGS
## fix location of Perl
#sed -i.bak -e "s?'perl'?'$(cygpath -w $PERLDIR/bin/perl.exe|sed -e 's/\\/&&&&/g')'?" meson.build
## fix detection of Python
#sed -i.bak -e "s?'python3'?'$(cygpath -w $PYDIR/python.exe|sed -e 's/\\/&&&&/g')'?" meson.build
## fix missing gio-unix
##sed -i.bak -e "s/gio-unix-/gio-/" meson.build
#sed -i.bak -e "s/gio-unix-/gio-windows-/" meson.build
#mkdir -p build_both &&
# wl-showstatus configure &&
# PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Ddocumentation=true . build_both &&
# ## fix slash/backslash path issue when calling Python from Ninja
# #sed -i.bak -e "s/join_paths/os.path.join/g; /COMMAND =.*python\.exe/ s?\"/\([a-zA-Z]\)/?\"\1:/?; /COMMAND =.*python\.exe/ s?/?\\\\?g" build_*/build.ninja &&
# ## fix Python path issues in meson_exe
# #sed -i.bak -e "s?$PYDIR?$(echo $PYDIR|sed -e "s?^/\([a-zA-Z]\)/?\1:/?")?" build_both/meson-private/meson_exe_python.exe_*.dat &&
# ## fix execution of Python scripts
# #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *= *\| *=.*\&\& *\)\(\"\{0,1\}[^ ]*\)\(\.py\|glib-mkenums\|g-ir-scanner\|asciidoc\)\(\"\{0,1\} \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_both/build.ninja &&
# ## fix executing shell scripts
# #sed -i.bak -e "s?^\(\s*COMMAND\s*=\s*\)\(\"[^\"]*\.sh\"\)?\1\"$(cygpath -m $(which sh.exe))\" \2?" build_both/build.ninja &&
# wl-showstatus build-install &&
# PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -Cbuild_both install/strip &&
# #PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -Cbuild_both install &&
# #PATH=$PERLDIR/../c/bin:$PERLDIR/bin:$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -Cbuild_both install &&
#    echo OK && find . -name '*.a'

#wl-showstatus install &&
# mkdir -p $INSTALLPREFIX/python/Lib/site-packages &&
# PYTHONPATH=$INSTALLPREFIX/python/Lib/site-packages:$MINGWPREFIX/python/Lib/site-packages $PYDIR/python setup.py install --prefix=$(cygpath.exe -w $INSTALLPREFIX/python) &&
#    echo OK

#export DEPENDENCIES=qt
#wl-showstatus configure &&
# $MINGWPREFIX/qt/bin/qmake -makefile *.pro -spec $MINGWPREFIX/qt/mkspecs/win32-g++ &&
# wl-showstatus build &&
# mingw32-make &&
#    echo OK

#export DEPENDENCIES=qt
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cd build_static &&
# $MINGWPREFIX/qt/bin/qmake -makefile ../*.pro -spec $MINGWPREFIX/qt/mkspecs/win32-g++ CONFIG+=staticlib &&
# cd .. &&
# wl-showstatus configure &&
# cd build_shared &&
# $MINGWPREFIX/qt/bin/qmake -makefile ../*.pro -spec $MINGWPREFIX/qt/mkspecs/win32-g++ &&
# cd .. &&
# wl-showstatus build &&
# mingw32-make -Cbuild_static &&
# wl-showstatus build &&
# mingw32-make -Cbuild_shared &&
#    echo OK

#mkdir -p $INSTALLPREFIX/python/Lib/site-packages
##wl-showstatus build &&
## PATH=$PYDIR:$PATH PYTHON=$PYDIR/python.exe PYTHONPATH=$PWD/winfix:$MINGWPREFIX/python/Lib/site-packages:$INSTALLPREFIX/python:$INSTALLPREFIX/python/Lib/site-packages:$PYDIR/Lib/site-packages${PYTHONPATH:+:$PYTHONPATH} PYTHONDONTWRITEBYTECODE=1 $PYDIR/python.exe setup.py build --compiler=mingw32 &&
#wl-showstatus build-install &&
# PATH=$PYDIR:$PATH PYTHON=$PYDIR/python.exe PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/python/Lib/site-packages:$INSTALLPREFIX/python:$PYDIR/Lib/site-packages:$INSTALLPREFIX/python/Lib/site-packages PYTHONDONTWRITEBYTECODE=1 $PYDIR/python.exe setup.py install --prefix=$(cygpath -w $INSTALLPREFIX/python) &&
# ## delete any __pycache__ folder(s)
# #find $INSTALLPREFIX -name __pycache__ -exec echo rm -rf {} \; | sh &&
#    echo OK

#wl-showstatus build-install &&
# PYTHONPATH=$MINGWPREFIX/python/Lib/site-packages${PYTHONPATH:+:$PYTHONPATH} PYTHONDONTWRITEBYTECODE=1 $PYDIR/python.exe $MINGWPREFIX/python/Scripts/pip-script.py install . --prefix=$(cygpath -w $INSTALLPREFIX/python) &&
# ## delete any __pycache__ folder(s)
# #find $INSTALLPREFIX -name __pycache__ -exec echo rm -rf {} \; | sh &&
#    echo OK

#wl-showstatus build-install &&
# $PYDIR/python.exe -m pip install --target $INSTALLPREFIX/python/Lib/site-packages --no-compile . &&
#    echo OK

# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




export NAME="iputils"
export STATUS=
export URL=https://github.com/iputils/iputils
export BASENAME=iputils
export DESCRIPTION="The iputils package is set of small useful utilities for Linux networking."
export CATEGORY=network
export TYPE=application
#export VERSION=20210722
#export VERSIONDATE=20211005
#export VERSION=20211215
#export VERSIONDATE=20211215
export VERSION=20221126
export VERSIONDATE=20221126
wl-showstatus --package-version
export DEPENDENCIES=libpcap
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=meson,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=COPYING
export LICENSETYPE=GPL
export DOWNLOADURL="https://github.com/iputils/iputils/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/iputils/iputils/archive/refs/tags/$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xfz $TARBALLDIR/$BASENAME/$VERSION.tar.gz
cd $BASENAME-$VERSION
# fix meson.build (version >= 20210722)
patch -ulbf meson.build << EOF
@@ -101,3 +101,3 @@
 m_dep = cc.find_library('m')
-resolv_dep = cc.find_library('resolv')
+#resolv_dep = cc.find_library('resolv')
 if cc.has_function('clock_gettime')
@@ -110,3 +110,3 @@
 if cap == true
-       cap_dep = cc.find_library('cap')
+       cap_dep = cc.find_library('pcap')
        conf.set('HAVE_LIBCAP', 1,
EOF
# fix missing files
mkdir -p winfix/arpa winfix/netinet
echo "#include <winsock2.h>" > winfix/arpa/inet.h
touch winfix/netdb.h winfix/netinet/in.h winfix/stdio_ext.h
mkdir -p build_both &&
 wl-showstatus configure &&
 #PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -DINSTALL_SYSTEMD_UNITS=false -DUSE_GETTEXT=true -DUSE_IDN=true -DUSE_CAP=true -DBUILD_ARPING=false -DBUILD_CLOCKDIFF=false -DBUILD_PING=false -DBUILD_RARPD=false -DBUILD_RDISC=false -DENABLE_RDISC_SERVER=false -DBUILD_TFTPD=false -DBUILD_TRACEPATH=false -DBUILD_TRACEROUTE6=false -DBUILD_NINFOD=false -DNINFOD_MESSAGES=true -DBUILD_MANS=true -DBUILD_HTML_MANS=false -DNO_SETCAP_OR_SUID=true -Dc_args="-I$(pwd)/winfix" . build_both &&
 #PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -DINSTALL_SYSTEMD_UNITS=false -DUSE_GETTEXT=true -DUSE_IDN=true -DUSE_CAP=true -DBUILD_ARPING=false -DBUILD_CLOCKDIFF=false -DBUILD_PING=false -DBUILD_RARPD=false -DBUILD_RDISC=false -DENABLE_RDISC_SERVER=false -DBUILD_TRACEPATH=false -DBUILD_NINFOD=false -DNINFOD_MESSAGES=true -DBUILD_MANS=true -DBUILD_HTML_MANS=false -DNO_SETCAP_OR_SUID=true -DSKIP_TESTS=true -Dc_args="-I$(pwd)/winfix" . build_both &&
 #PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -DUSE_GETTEXT=true -DUSE_IDN=true -DUSE_CAP=false -DBUILD_ARPING=true -DBUILD_CLOCKDIFF=true -DBUILD_PING=true -DBUILD_RARPD=false -DBUILD_RDISC=false -DENABLE_RDISC_SERVER=false -DBUILD_TRACEPATH=true -DBUILD_NINFOD=false -DNINFOD_MESSAGES=false -DNO_SETCAP_OR_SUID=false -DSETCAP_OR_SUID_ARPING=false -DSETCAP_OR_SUID_CLOCKDIFF=false -DSETCAP_OR_SUID_PING=false -DSETCAP_OR_SUID_RDISC=false -DBUILD_MANS=false -DBUILD_HTML_MANS=false -DSKIP_TESTS=true -Dc_args="-I$(pwd)/winfix" . build_both &&
 PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -DINSTALL_SYSTEMD_UNITS=false -DUSE_GETTEXT=true -DUSE_IDN=true -DUSE_CAP=true -DBUILD_ARPING=false -DBUILD_CLOCKDIFF=false -DBUILD_PING=false -DBUILD_TRACEPATH=false -DBUILD_MANS=true -DBUILD_HTML_MANS=false -DNO_SETCAP_OR_SUID=true -DSKIP_TESTS=true -Dc_args="-I$(pwd)/winfix" . build_both &&
 wl-showstatus build-install &&
 PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib ninja -Cbuild_both install &&
    echo OK && find . -name '*.a'
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




#export NAME="libutf8"
#export STATUS=
#export URL=http://www.lwithers.me.uk/projects/libutf8/
#export BASENAME=libutf8
#export DESCRIPTION="libutf8 provides a C API for encoding and decoding UTF-8. It uses the C type wchar_t as its internal character representation. libutf8 is a \"safe\" decoder - it will not accept overlong byte sequences."
#export CATEGORY=dataprocessing
#export TYPE=library
#export VERSION=1.3.2
#export VERSIONDATE=20140813
#####ld.exe: cannot find -lc
#wl-showstatus --package-version
#export DEPENDENCIES=
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=
#export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=COPYING
#export LICENSETYPE=GPL
#export DOWNLOADURL="http://www.lwithers.me.uk/projects/libutf8/"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://www.lwithers.me.uk/projects/libutf8/data/$BASENAME-$VERSION.tar.bz2
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#wl-showstatus extract
#tar xj --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.bz2
#cd $BASENAME-$VERSION
#wl-showstatus build &&
# PREFIX=$INSTALLPREFIX ./make.sh &&
#    echo OK
## wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION



export NAME="libutf8"
export STATUS=
export URL=https://github.com/m2osw/libutf8/
export BASENAME=libutf8
export DESCRIPTION="C++ UTF-8 string handling utilities with conversions and a simple to use iterator"
export CATEGORY=dataprocessing
export TYPE=library
export VERSION=1.0.7
export VERSIONDATE=20210831
####dpkg-parsechangelog not found! Please install `dpkg-dev` and rerun CMake.
wl-showstatus --package-version
export DEPENDENCIES=
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja,snapcmakemodules
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE.txt
export LICENSETYPE=MIT
export DOWNLOADURL="https://github.com/m2osw/libutf8/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/m2osw/libutf8/archive/refs/tags/$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/$VERSION.tar.gz
cd $BASENAME-$VERSION
# fix to also build static library
sed -i.bak -e "s/\(add_library( *[^ ]*\) SHARED/\1/" libutf8/CMakeLists.txt

#grep -wi add_library $(find -name CMakeLists.txt -or -name '*.cmake')
mkdir -p build_test && cmake.exe -G"MSYS Makefiles" -S. -Bbuild_test -LH && echo OK; rm -rf build_test

#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -S. -Bbuild_static &&
# #-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -S. -Bbuild_shared &&
# ## fix execution of Python scripts
# #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|glib-genmarshal\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
# #wl-showstatus build &&
# #ninja -Cbuild_static &&
# #wl-showstatus build &&
# #ninja -Cbuild_shared &&
# wl-showstatus build-install &&
# ninja -Cbuild_static install/strip &&
# wl-showstatus build-install &&
# ninja -Cbuild_shared install/strip &&
#    echo OK
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




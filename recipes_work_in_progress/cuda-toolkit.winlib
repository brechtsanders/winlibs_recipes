export NAME="CUDA toolkit"
export STATUS=
export URL=https://developer.nvidia.com/cuda-toolkit
export BASENAME=cuda-toolkit
export DESCRIPTION="The NVIDIA(R) CUDA(R) Toolkit provides a development environment for creating high performance GPU-accelerated applications. With the CUDA Toolkit, you can develop, optimize and deploy your applications on GPU-accelerated embedded systems, desktop workstations, enterprise data centers, cloud-based platforms and HPC supercomputers. The toolkit includes GPU-accelerated libraries, debugging and optimization tools, a C/C++ compiler and a runtime library to deploy your application."
export CATEGORY=hardware
export TYPE=library
#export VERSION=10.1.243
#export VERSIONDATE=20200107
#export VERSION=10.2.89
#export VERSIONDATE=20200529
#export VERSION=11.1.69
#export VERSIONDATE=20209118
#export VERSION=11.6.112
#export VERSIONDATE=20220317
#export VERSION=11.6.124
#export VERSIONDATE=20220325
#export VERSION=11.7.50
#export VERSIONDATE=20220512
#export VERSION=11.8.86
#export VERSIONDATE=20221004
#export VERSION=12.0.90
#export VERSIONDATE=20221209
#export VERSION=12.0.140
#export VERSIONDATE=20230201
#export VERSION=12.1.55
#export VERSIONDATE=20230301
#export VERSION=12.1.105
#export VERSIONDATE=20230421
#export VERSION=12.2.53
#export VERSIONDATE=20230629
#export VERSION=12.2.128
#export VERSIONDATE=20230801
#export VERSION=12.2.140
#export VERSIONDATE=20230830
#export VERSION=12.3.52
#export VERSIONDATE=20231020
#export VERSION=12.3.101
#export VERSIONDATE=20231116
#export VERSION=12.4.99
#export VERSIONDATE=20240306
#export VERSION=12.4.127
#export VERSIONDATE=20240404
#export VERSION=12.5.39
#export VERSIONDATE=20240522
#export VERSION=12.5.82
#export VERSIONDATE=20240702
#export VERSION=12.6.37
#export VERSIONDATE=20240802
#export VERSION=12.6.68
#export VERSIONDATE=20240830
#export VERSION=12.6.77
#export VERSIONDATE=20241002
#export VERSION=12.8.55
#export VERSIONDATE=20250124
#export VERSION=12.8.90
#export VERSIONDATE=20250307
#export VERSION=12.9.19
#export VERSIONDATE=20250502
#export VERSION=12.9.79
#export VERSIONDATE=20250606
#export VERSION=13.0.39
#export VERSIONDATE=20250805
export VERSION=13.0.85
export VERSIONDATE=20250905
####gdbserver/cuda-tdep-server.cc:24:11: fatal error: sys/ptrace.h: No such file or directory
wl-showstatus --package-version
export DEPENDENCIES=isl,cloog,mpc,mpfr,gmp,libdl
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=COPYING
export LICENSETYPE=GPL
#export LICENSEFILE=COPYING.LIB
#export LICENSETYPE=LGPL
#export DOWNLOADURL="http://http.download.nvidia.com/cuda-toolkit/"
export DOWNLOADURL="https://developer.download.nvidia.com/compute/cuda/opensource/ cuda_gdb_src-all-all-"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://http.download.nvidia.com/cuda-toolkit/$VERSION/nsight-sources-$VERSION.tar.gz
#export DOWNLOADSOURCEURL=https://developer.download.nvidia.com/compute/cuda/opensource/$VERSION/nsight-sources-$VERSION.tar.gz
#export DOWNLOADSOURCEURL=https://developer.download.nvidia.com/compute/cuda/opensource/$(echo $VERSION|sed -e "s/^\([0-9]*\.[0-9]*\.\)[0-9]*.*/\1/")$(expr $(echo $VERSION|sed -e "s/^[0-9]*\.[0-9]*\.\([0-9]*\).*/\1/") / 100)/cuda_gdb_src-all-all-$VERSION.tar.gz
#export DOWNLOADSOURCEURL=https://developer.download.nvidia.com/compute/cuda/opensource/11.6.2/cuda_gdb_src-all-all-11.6.124.tar.gz
#export DOWNLOADSOURCEURL=https://developer.download.nvidia.com/compute/cuda/opensource/11.7.0/cuda_gdb_src-all-all-11.7.50.tar.gz
#export DOWNLOADSOURCEURL=https://developer.download.nvidia.com/compute/cuda/opensource/11.8.0/cuda_gdb_src-all-all-11.8.86.tar.gz
#export DOWNLOADSOURCEURL=https://developer.download.nvidia.com/compute/cuda/opensource/$(echo $VERSION|sed -e "s/^\([0-9]*\.[0-9]*\)\.[0-9]*.*/\1/").0/cuda_gdb_src-all-all-$VERSION.tar.gz
#export DOWNLOADSOURCEURL=https://developer.download.nvidia.com/compute/cuda/opensource/12.1.1/cuda_gdb_src-all-all-12.1.105.tar.gz
#export DOWNLOADSOURCEURL=https://developer.download.nvidia.com/compute/cuda/opensource/12.2.0/cuda_gdb_src-all-all-12.2.53.tar.gz
#export DOWNLOADSOURCEURL=https://developer.download.nvidia.com/compute/cuda/opensource/12.2.1/cuda_gdb_src-all-all-12.2.128.tar.gz
#export DOWNLOADSOURCEURL=https://developer.download.nvidia.com/compute/cuda/opensource/12.2.2/cuda_gdb_src-all-all-12.2.140.tar.gz
#export DOWNLOADSOURCEURL=https://developer.download.nvidia.com/compute/cuda/opensource/12.3.0/cuda_gdb_src-all-all-12.3.52.tar.gz
#export DOWNLOADSOURCEURL=https://developer.download.nvidia.com/compute/cuda/opensource/12.3.1/cuda_gdb_src-all-all-12.3.101.tar.gz
#export DOWNLOADSOURCEURL=https://developer.download.nvidia.com/compute/cuda/opensource/12.4.0/cuda_gdb_src-all-all-12.4.99.tar.gz
#export DOWNLOADSOURCEURL=https://developer.download.nvidia.com/compute/cuda/opensource/12.4.1/cuda_gdb_src-all-all-12.4.127.tar.gz
#export DOWNLOADSOURCEURL=https://developer.download.nvidia.com/compute/cuda/opensource/12.5.0/cuda_gdb_src-all-all-12.5.39.tar.gz
#export DOWNLOADSOURCEURL=https://developer.download.nvidia.com/compute/cuda/opensource/12.5.1/cuda_gdb_src-all-all-12.5.82.tar.gz
#export DOWNLOADSOURCEURL=https://developer.download.nvidia.com/compute/cuda/opensource/12.6.0/cuda_gdb_src-all-all-12.6.37.tar.gz
#export DOWNLOADSOURCEURL=https://developer.download.nvidia.com/compute/cuda/opensource/12.6.1/cuda_gdb_src-all-all-12.6.68.tar.gz
#export DOWNLOADSOURCEURL=https://developer.download.nvidia.com/compute/cuda/opensource/12.6.2/cuda_gdb_src-all-all-12.6.77.tar.gz
#export DOWNLOADSOURCEURL=https://developer.download.nvidia.com/compute/cuda/opensource/12.8.0/cuda_gdb_src-all-all-12.8.55.tar.gz
#export DOWNLOADSOURCEURL=https://developer.download.nvidia.com/compute/cuda/opensource/12.8.1/cuda_gdb_src-all-all-12.8.90.tar.gz
#export DOWNLOADSOURCEURL=https://developer.download.nvidia.com/compute/cuda/opensource/12.9.0/cuda_gdb_src-all-all-12.9.19.tar.gz
#export DOWNLOADSOURCEURL=https://developer.download.nvidia.com/compute/cuda/opensource/12.9.1/cuda_gdb_src-all-all-12.9.79.tar.gz
#export DOWNLOADSOURCEURL=https://developer.download.nvidia.com/compute/cuda/opensource/13.0.0/cuda_gdb_src-all-all-13.0.39.tar.gz
export DOWNLOADSOURCEURL=https://developer.download.nvidia.com/compute/cuda/opensource/13.0.1/cuda_gdb_src-all-all-13.0.85.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
mkdir -p $BASENAME-$VERSION
#tar xz --force-local -f $TARBALLDIR/$BASENAME/nsight-sources-$VERSION.tar.gz -C$BASENAME-$VERSION
tar xz --force-local -f $TARBALLDIR/$BASENAME/cuda_gdb_src-all-all-$VERSION.tar.gz -C$BASENAME-$VERSION
#cd nsight-sources-*
#cd $BASENAME-$VERSION/opensource
#cd cuda_gdb_src
cd $BASENAME-$VERSION/cuda_gdb_src
# fix libcudacore/cudaapi.c (version >= 12.0.90)
patch -ulbf libcudacore/cudaapi.c << EOF
@@ -43,2 +43,3 @@


+#define mkstemp MY_mkstemp
 static int mkstemp(char *name)
EOF
# fix gdbserver/cuda-packet-manager.cc (version >= 12.3.52)
mv gdbserver/cuda-packet-manager.cc gdbserver/cuda-packet-manager.cc.bak &&
echo '#include "../gnulib/config.h"' > gdbserver/cuda-packet-manager.cc &&
cat gdbserver/cuda-packet-manager.cc.bak >> gdbserver/cuda-packet-manager.cc
wl-showstatus configure &&
 # mkdir -p m4 &&
 # autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal &&
 #./autogen.sh &&
 #    echo OK
 ## fix building DLLs on 64-bit
 #if ( echo $RUNPLATFORM | grep -q x86_64 ); then
 # echo "AM_GNU_GETTEXT_VERSION([$(gettext --version|head -n1|sed -e "s/^.* \([0-9\.]*\) *$/\1/")])" >> configure.ac &&
 # autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal
 #fi
 #INTLTOOL_PERL="$PERLDIR/bin/perl.exe" 
 #PERL="$PERLDIR/bin/perl.exe -I$PERLDIR/lib" 
 #PYTHON=$PYDIR/python.exe 
 #PYTHON=$PYDIR/python.exe C_INCLUDE_PATH=$PYDIR/include${C_INCLUDE_PATH:+:$C_INCLUDE_PATH} 
 #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --target=nvptx$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; fi)-w64-cuda --disable-serial-configure --enable-host-shared --with-system-zlib &&
 ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --program-prefix=cuda- --enable-cuda CFLAGS="-I$MINGWPREFIX/include/libdl-win32" CXXFLAGS="-I$MINGWPREFIX/include/libdl-win32" LDFLAGS="-lpthread -Wl,--as-needed -ldl" &&
 ## fix building DLLs
 #sed -i.bak -e "s/\(allow_undefined=\)yes/\1no/" libtool &&
 wl-showstatus build &&
 ( make || ( make -j1 -Cbinutils $(ls -1 binutils/*.y | sed -e "s?^.*/??; s/\.y$/.c/") && make -j1 -Cld $(ls -1 ld/*.y | sed -e "s?^.*/??; s/\.y$/.c/") ) || make || make YACC="bison -y" LEX="lex" ) &&
 wl-showstatus build-install &&
 make install-strip &&
    echo OK
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd ../.. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




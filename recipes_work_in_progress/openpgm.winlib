export NAME="OpenPGM"
export STATUS=
export URL=http://code.google.com/p/openpgm/
export BASENAME=openpgm
export DESCRIPTION="OpenPGM is an open source implementation of the Pragmatic General Multicast (PGM) specification in RFC 3208 available at www.ietf.org. PGM is a reliable and scalable multicast protocol that enables receivers to detect loss, request retransmission of lost data, or notify an application of unrecoverable loss. PGM is a receiver-reliable protocol, which means the receiver is responsible for ensuring all data is received, absolving the sender of reception responsibility. PGM runs over a best effort datagram service, currently OpenPGM uses IP multicast but could be implemented above switched fabrics such as InfiniBand."
export CATEGORY=
export TYPE=library
#export VERSION=5.2.122
#export VERSIONDATE=20130615
export VERSION=5.3.128
export VERSIONDATE=20211020
####sockaddr.c:608:1: error: conflicting types for 'pgm_sockaddr_join_group'
wl-showstatus --package-version
export DEPENDENCIES=
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=COPYING
export LICENSETYPE=LGPL
#export DOWNLOADURL="http://code.google.com/p/openpgm/downloads/list"
#export DOWNLOADURL="https://code.google.com/archive/p/openpgm/downloads"
export DOWNLOADURL="https://github.com/steve-o/openpgm/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://openpgm.googlecode.com/files/libpgm-$VERSION.tar.bz2
#export DOWNLOADSOURCEURL=https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/openpgm/libpgm-$VERSION.tar.bz2
export DOWNLOADSOURCEURL=https://github.com/steve-o/openpgm/archive/refs/tags/release-$(echo $VERSION|tr . -).tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
#tar xj --force-local -f $TARBALLDIR/$BASENAME/libpgm-$VERSION.tar.bz2
#cd libpgm-$VERSION/openpgm/pgm
tar xz --force-local -f $TARBALLDIR/$BASENAME/release-$(echo $VERSION|tr . -).tar.gz
cd openpgm-release-$(echo $VERSION|tr . -)/openpgm/pgm
# fix include/impl/byteorder.h (version >= 5.3.128)
patch -ulbf include/impl/byteorder.h << EOF
@@ -31,3 +31,3 @@

-#if defined(_MSC_VER)
+#if defined(_WIN32)
 #      include <ws2tcpip.h>
EOF
# fix cpu.c (version >= 5.3.128)
sed -i.bak -e "s/_MSC_VER/_WIN32/" cpu.c
# fix missing openpgm-5.3.pc.in (version >= 5.3.128)
cp -u openpgm-5.2.pc.in openpgm-5.3.pc.in
wl-showstatus configure &&
 mkdir -p m4 &&
 autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal &&
 #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM LDFLAGS="-Wl,--as-needed -Wl,-no-undefined" &&
 #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM LDFLAGS="-Wl,--as-needed" &&
 ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM &&
 ## fix building DLLs
 #mv libtool libtool.bak &&
 #sed -e "s/\(allow_undefined=\)yes/\1no/" libtool.bak > libtool &&
 wl-showstatus build-install &&
 make install-strip &&
    echo OK
## wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd ../../.. && rm -rf libpgm-$VERSION
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd ../../.. && rm -rf openpgm-release-$(echo $VERSION|tr . -)/openpgm/pgm



## fix CMakeLists.txt (version >= 5.3.128)
#patch -ulbf CMakeLists.txt << EOF
#@@ -65,2 +65,3 @@
# # http://msdn.microsoft.com/en-us/magazine/cc301698.aspx
#+if (MSVC)
# set(CMAKE_CXX_FLAGS_RELEASE "\${CMAKE_CXX_FLAGS_RELEASE} /GL")
#@@ -69,2 +70,3 @@
# set(CMAKE_MODULE_LINKER_FLAGS_RELEASE "\${CMAKE_MODULE_LINKER_FLAGS_RELEASE} /LTCG")
#+endif()
#
#@@ -177,3 +179,3 @@
#
#-add_library(libpgm STATIC \${sources})
#+add_library(libpgm \${sources})
# set_target_properties(libpgm PROPERTIES
#EOF

#export BUILDDEPENDENCIES=cmake,ninja
#export OPTIONALBUILDDEPENDENCIES=
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -S. -Bbuild_static &&
# #-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -S. -Bbuild_shared &&
# ## fix execution of Python scripts
# #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|glib-genmarshal\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
# ## fix missing link libraries
# #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lws2_32/" build_win/build.ninja &&
# #wl-showstatus build &&
# #ninja -Cbuild_static &&
# #wl-showstatus build &&
# #ninja -Cbuild_shared &&
# wl-showstatus build-install &&
# ninja -Cbuild_static install/strip &&
# wl-showstatus build-install &&
# ninja -Cbuild_shared install/strip &&
#    echo OK

#export NAME="libva"
#export STATUS=
#export URL=http://www.freedesktop.org/wiki/Software/vaapi/
#export BASENAME=libva
#export DESCRIPTION="The main motivation for VA-API (Video Acceleration API) is to enable hardware accelerated video decode/encode at various entry-points (VLD, IDCT, Motion Compensation etc.) for the prevailing coding standards today (MPEG-2, MPEG-4 ASP/H.263, MPEG-4 AVC/H.264, and VC-1/VMW3)."
#export CATEGORY=graphics
#export TYPE=library
##export VERSION=1.4.1
##export VERSIONDATE=20141214
##export VERSION=1.5.0
##export VERSIONDATE=20141230
##export VERSION=1.5.1
##export VERSIONDATE=20150320
##export VERSION=1.6.0
##export VERSIONDATE=20150701
#####No package 'libdrm' found
##export VERSION=1.6.1
##export VERSIONDATE=20150909
##export VERSION=1.6.2
##export VERSIONDATE=20151215
##export VERSION=1.7.0
##export VERSIONDATE=20160404
##export VERSION=1.7.1
##export VERSIONDATE=20160621
##export VERSION=1.7.2
##export VERSIONDATE=20160905
##export VERSION=1.7.3
##export VERSIONDATE=20161110
##export VERSION=1.8.0
##export VERSIONDATE=20170331
##export VERSION=1.8.1
##export VERSIONDATE=20170410
#export VERSION=1.8.2
#export VERSIONDATE=20170523
#wl-showstatus --package-version
#export DEPENDANCIES=libdrm
#export OPTIONALDEPENDANCIES=
#export BUILDDEPENDANCIES=
#export LICENSEFILE=COPYING
#export LICENSETYPE=
#export DOWNLOADURL="http://www.freedesktop.org/software/vaapi/releases/libva/"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://www.freedesktop.org/software/vaapi/releases/libva/$BASENAME-$VERSION.tar.bz2
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#wl-showstatus extract
#tar xfj $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.bz2
#cd $BASENAME-$VERSION
#  ./configure --help
#  head COPYING* LICENSE*
#  ls -l COPYING* LICENSE*
#wl-showstatus configure &&
### fix building DLLs on 64-bit
##if ( echo $RUNPLATFORM | grep -q x86_64 ); then
## echo "AM_GNU_GETTEXT_VERSION([$(gettext --version|head -n1|sed -e "s/^.* \([0-9\.]*\) *$/\1/")])" >> configure.ac &&
## autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal
##fi
##INTLTOOL_PERL="$PERLDIR/bin/perl.exe" 
##PERL="$PERLDIR/bin/perl.exe -I$PERLDIR/lib" 
##PYTHON=$PYDIR/python.exe 
##PYTHON=$PYDIR/python.exe C_INCLUDE_PATH=$PYDIR/include${C_INCLUDE_PATH:+:$C_INCLUDE_PATH} 
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM LDFLAGS="-Wl,--as-needed -Wl,-no-undefined" &&
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM LDFLAGS="-Wl,--as-needed" &&
#./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-static --enable-shared --disable-drm --disable-x11 --disable-glx --disable-egl --disable-wayland &&
# wl-showstatus build &&
# ## fix building DLLs
# #mv libtool libtool.bak &&
# #sed -e "s/\(allow_undefined=\)yes/\1no/" libtool.bak > libtool &&
# #wl-showstatus build &&
# #make &&
# wl-showstatus build-install &&
# make install-strip &&
#    echo OK



export NAME="libva"
export STATUS=
export URL=https://01.org/linuxmedia
#export URL=https://github.com/intel/libva
export BASENAME=libva
export DESCRIPTION="Libva is an implementation for VA-API (Video Acceleration API)"
export CATEGORY=hardware
export TYPE=library
#export VERSION=2.10.0
#export VERSIONDATE=20201221
#export VERSION=2.11.0
#export VERSIONDATE=20210323
#export VERSION=2.12.0
#export VERSIONDATE=20210618
#export VERSION=2.13.0
#export VERSIONDATE=20210918
export VERSION=2.14.0
export VERSIONDATE=20220222
####No package 'libdrm' found
####meson.build:78:0: ERROR: Dependency "libdrm" not found, tried pkgconfig and cmake
wl-showstatus --package-version
export DEPENDANCIES=libdrm
export OPTIONALDEPENDANCIES=
export BUILDDEPENDANCIES=
#export BUILDDEPENDANCIES=meson,ninja
export LICENSEFILE=COPYING
#export LICENSEFILE=LICENSE
export LICENSETYPE=
export DOWNLOADURL="https://github.com/intel/libva/releases/"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/intel/libva/releases/download/$VERSION/$BASENAME-$VERSION.tar.bz2
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xfj $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.bz2
cd $BASENAME-$VERSION
#wl-showstatus configure &&
# # mkdir -p m4 &&
# # autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal &&
# #./autogen.sh &&
# #    echo OK
# ## fix building DLLs on 64-bit
# #if ( echo $RUNPLATFORM | grep -q x86_64 ); then
# # echo "AM_GNU_GETTEXT_VERSION([$(gettext --version|head -n1|sed -e "s/^.* \([0-9\.]*\) *$/\1/")])" >> configure.ac &&
# # autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal
# #fi
# #INTLTOOL_PERL="$PERLDIR/bin/perl.exe" 
# #PERL="$PERLDIR/bin/perl.exe -I$PERLDIR/lib" 
# #PYTHON=$PYDIR/python.exe 
# #PYTHON=$PYDIR/python.exe C_INCLUDE_PATH=$PYDIR/include${C_INCLUDE_PATH:+:$C_INCLUDE_PATH} 
# #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --enable-shared --enable-static --host=$RUNPLATFORM LDFLAGS="-Wl,-no-undefined -Wl,--as-needed" &&
# ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-shared --enable-static --disable-drm --disable-x11 --disable-glx --disable-wayland &&
# ## fix building DLLs
# #sed -i.bak -e "s/\(allow_undefined=\)yes/\1no/" libtool &&
# ## fix detection of shared libraries
# #sed -i.bak2 -e "s/\(deplibs_check_method=\"\)[^\"]*/\1file_magic ^x86 archive import|^x86 DLL|PE32+* executable (DLL)|pe-i386|pe-x86-64/; s/'file format pe-i386[^']*'/\"\$deplibs_check_method\"/" libtool &&
# #wl-showstatus build &&
# #make &&
# wl-showstatus build-install &&
# make install-strip &&
#    echo OK
#-Dc_args=$CFLAGS -Dcpp_args=$CXXFLAGS -Dc_link_args=$LDFLAGS
## fix location of Perl
#sed -i.bak -e "s?'perl'?'$(cygpath -w $PERLDIR/bin/perl.exe|sed -e 's/\\/&&&&/g')'?" meson.build
## fix missing gio-unix
##sed -i.bak -e "s/gio-unix-/gio-/" meson.build
#sed -i.bak -e "s/gio-unix-/gio-windows-/" meson.build
mkdir -p build_both &&
 wl-showstatus configure &&
 PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Ddisable_drm=true -Dwith_x11=no -Dwith_glx=no -Dwith_wayland=no . build_both &&
 ## fix slash/backslash path issue when calling Python from Ninja
 #sed -i.bak -e "s/join_paths/os.path.join/g; /COMMAND =.*python\.exe/ s?\"/\([a-zA-Z]\)/?\"\1:/?; /COMMAND =.*python\.exe/ s?/?\\\\?g" build_*/build.ninja &&
 ## fix Python path issues in meson_exe
 #sed -i.bak -e "s?$PYDIR?$(echo $PYDIR|sed -e "s?^/\([a-zA-Z]\)/?\1:/?")?" build_both/meson-private/meson_exe_python.exe_*.dat &&
 ## fix execution of Python scripts
 #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *= *\| *=.*\&\& *\)\(\"\{0,1\}[^ ]*\)\(\.py\|glib-mkenums\|g-ir-scanner\|asciidoc\)\(\"\{0,1\} \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_both/build.ninja &&
 ## fix executing shell scripts
 #sed -i.bak -e "s?^\(\s*COMMAND\s*=\s*\)\(\"[^\"]*\.sh\"\)?\1\"$(cygpath -m $(which sh.exe))\" \2?" build_both/build.ninja &&
 wl-showstatus build-install &&
 PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib ninja -C build_both install/strip &&
 #PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib ninja -C build_both install &&
 #PATH=$PERLDIR/../c/bin:$PERLDIR/bin:$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib ninja -Cbuild_both install &&
    echo OK && find . -name '*.a'
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




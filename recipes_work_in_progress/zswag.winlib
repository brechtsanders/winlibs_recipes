export NAME="zswag"
export STATUS=
export URL=https://github.com/ndsev/zswag
export BASENAME=zswag
export DESCRIPTION="zswag is a set of libraries for using/hosting zserio services through OpenAPI."
export CATEGORY=communication
export TYPE=library
#export VERSION=1.7.0
#export VERSIONDATE=20240828
#export VERSION=1.7.1
#export VERSIONDATE=20241214
#export VERSION=1.7.2
#export VERSIONDATE=20241219
export VERSION=1.8.0
export VERSIONDATE=20250703
wl-showstatus --package-version
export DEPENDENCIES=keychain,catch2,cpp-httplib,speedyj,stx,yaml-cpp
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=BSD
export DOWNLOADURL="https://github.com/ndsev/zswag/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/ndsev/zswag/archive/refs/tags/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd $BASENAME-$VERSION
# allow building both static and shared libraries
sed -i.bak -e "s/\(add_library([^ ]*\) \(STATIC\|SHARED\)/\1/" libs/httpcl/CMakeLists.txt libs/zswagcl/CMakeLists.txt
# fix libs/httpcl/CMakeLists.txt (version >= 1.7.1)
patch -ulbf libs/httpcl/CMakeLists.txt << EOF
@@ -6,6 +6,8 @@
 if(NOT TARGET spdlog)
-  find_package(spdlog CONFIG REQUIRED)
+  find_package(PkgConfig)
+  pkg_check_modules(SPDLOG IMPORTED_TARGET REQUIRED spdlog)
+  add_library(spdlog::spdlog ALIAS PkgConfig::SPDLOG)
 endif()

-add_library(httpcl STATIC
+add_library(httpcl
   include/httpcl/http-client.hpp
EOF
# fix CMakeLists.txt (version >= 1.7.1)
# fix CMakeLists.txt (version >= 1.7.1)
patch -ulbf CMakeLists.txt << EOF
@@ -3,2 +3,3 @@
 include(FetchContent)
+find_package(PkgConfig)

@@ -55,3 +56,4 @@
 if(NOT TARGET OpenSSL)
-  find_package(OpenSSL CONFIG REQUIRED)
+  pkg_check_modules(OPENSSL-LIBSSL IMPORTED_TARGET REQUIRED libssl)
+  add_library(OpenSSL::SSL ALIAS PkgConfig::OPENSSL-LIBSSL)
 endif()
@@ -59,3 +61,4 @@
 if(ZSWAG_KEYCHAIN_SUPPORT)
-  find_package(keychain CONFIG REQUIRED)
+  add_library(keychain::keychain SHARED IMPORTED)
+  set_target_properties(keychain::keychain PROPERTIES IMPORTED_IMPLIB "-lkeychain")
 endif()
@@ -116,3 +119,4 @@
   if (NOT TARGET ZLIB::ZLIB)
-    find_package(ZLIB CONFIG REQUIRED)
+    pkg_check_modules(ZLIB IMPORTED_TARGET REQUIRED zlib)
+    add_library(ZLIB::ZLIB ALIAS PkgConfig::ZLIB)
   endif ()
@@ -132,3 +136,4 @@
 if(ZSWAG_BUILD_WHEELS AND NOT TARGET pybind11::pybind11)
-  find_package(pybind11 REQUIRED)
+  pkg_check_modules(PYBIND11 IMPORTED_TARGET REQUIRED pybind11)
+  add_library(pybind11::pybind11 ALIAS PkgConfig::PYBIND11)
 endif()
EOF

#grep -wi add_library $(find -name CMakeLists.txt -or -name '*.cmake')
mkdir -p build_test && cmake.exe -G"MSYS Makefiles" -DZSWAG_KEYCHAIN_SUPPORT:BOOL=ON -DZSWAG_BUILD_WHEELS:BOOL=OFF -DZSWAG_WITH_CONAN:BOOL=OFF -DFETCHCONTENT_FULLY_DISCONNECTED:BOOL=ON -DZSWAG_ENABLE_TESTING:BOOL=OFF -S. -Bbuild_test -LH && echo OK; rm -rf build_test

#export BUILDDEPENDENCIES=cmake
#PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ 
#PATH=$PATH:$MINGWPREFIX/qt6/bin QTDIR=$MINGWPREFIX/qt6 QMAKESPEC=$MINGWPREFIX/qt6/mkspecs/win32-g++ 
#-DCMAKE_SYSTEM_NAME=Windows 
#-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
#mkdir -p build_win &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -S. -Bbuild_win &&
# #wl-showstatus build &&
# #cmake.exe --build build_win &&
# #make -Cbuild_win &&
# wl-showstatus build-install &&
# make -Cbuild_win install/strip &&
#    echo OK

#export BUILDDEPENDENCIES=cmake,ninja
#PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ 
#-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
#mkdir -p build_win &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -S. -Bbuild_win &&
# #wl-showstatus build &&
# #cmake.exe --build build_win &&
# #ninja -Cbuild_win &&
# wl-showstatus build-install &&
# #cmake.exe --install build_win --strip &&
# #cmake.exe --build build_win --target "install/strip" &&
# ninja -Cbuild_win install/strip &&
#    echo OK

#mkdir -p build_static build_shared &&
# wl-showstatus configure-static &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DZSWAG_KEYCHAIN_SUPPORT:BOOL=ON -DZSWAG_BUILD_WHEELS:BOOL=OFF -DZSWAG_WITH_CONAN:BOOL=OFF -DFETCHCONTENT_FULLY_DISCONNECTED:BOOL=ON -DZSWAG_ENABLE_TESTING:BOOL=OFF -S. -Bbuild_static &&
# #-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
# wl-showstatus configure-shared &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DZSWAG_KEYCHAIN_SUPPORT:BOOL=ON -DZSWAG_BUILD_WHEELS:BOOL=OFF -DZSWAG_WITH_CONAN:BOOL=OFF -DFETCHCONTENT_FULLY_DISCONNECTED:BOOL=ON -DZSWAG_ENABLE_TESTING:BOOL=OFF -S. -Bbuild_shared &&
# ## fix execution of Python scripts
# #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|glib-genmarshal\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
# ## fix missing link libraries
# #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lws2_32/" build_shared/build.ninja &&
# #wl-showstatus build-static &&
# #cmake.exe --build build_static &&
# #ninja -Cbuild_static &&
# #wl-showstatus build-shared &&
# #cmake.exe --build build_shared &&
# #ninja -Cbuild_shared &&
# wl-showstatus build-install-static &&
# #cmake.exe --install build_static --strip &&
# #cmake.exe --build build_static --target "install/strip" &&
# #cmake.exe --build build_static --target "library/install/strip" &&
# ninja -Cbuild_static install/strip &&
# #ninja -Cbuild_static library/install/strip &&
# wl-showstatus build-install-shared &&
# #cmake.exe --install build_shared --strip &&
# #cmake.exe --build build_shared --target "install/strip" &&
# ninja -Cbuild_shared install/strip &&
#    echo OK
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




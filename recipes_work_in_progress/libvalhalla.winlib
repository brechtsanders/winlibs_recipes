#export NAME="libvalhalla"
#export STATUS=
#export URL=http://libvalhalla.geexbox.org/
#export BASENAME=libvalhalla
#export DESCRIPTION="libvalhalla is a library written in C. It is a media scanner, that stores various information in an SQLite database and relies on FFmpeg (libavformat and libavutil) and libcurl. It features many Internet grabbers that allows automatic download of covers, lyrics, informations on media files, tags retrival in video and music files and so on."
#export CATEGORY=multimedia,communication
#export TYPE=library
##export VERSION=2.0.0
##export VERSIONDATE=20111208
#export VERSION=2.1.0
#export VERSIONDATE=20120813
#####undefined reference to `av_metadata_get'
#wl-showstatus --package-version
##export DEPENDANCIES=sqlite3,libxml2,libcurl,libav,libexif,libnfo,pthreads
#export DEPENDANCIES=sqlite3,libxml2,libcurl,ffmpeg2,libexif,libnfo,pthreads
#export OPTIONALDEPENDANCIES=
#export BUILDDEPENDANCIES=
#export LICENSEFILE=COPYING
#export LICENSETYPE=LGPL
##export DOWNLOADURL="http://libvalhalla.geexbox.org/releases/"
#export DOWNLOADURL="https://github.com/GeeXboX/libvalhalla/releases"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://libvalhalla.geexbox.org/releases/$BASENAME-$VERSION.tar.bz2
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#tar xfj $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.bz2
#cd $BASENAME-$VERSION
### fix missing curl/types.h in src/url_utils.c (version <= 2.0.0)
##patch -ulbf src/url_utils.c << EOF
##--- src/url_utils.c  2010-10-03 18:36:50 +0200
##+++ src/url_utils.c  2012-01-17 09:56:10 +0100
##@@ -28,3 +28,2 @@
## #include <curl/curl.h>
##-#include <curl/types.h>
## #include <curl/easy.h>
##EOF
## fix missing gmtime_r in src/grabber_amazon.c
#mv src/grabber_amazon.c src/grabber_amazon.c.bak
#cat > src/grabber_amazon.c << EOF
##include <stdlib.h>
##include <string.h>
##include <time.h>
#//#include <plibc.h>
#inline struct tm* gmtime_r (const time_t* timer, struct tm* result)
#{
#  struct tm* local_result;
#  if ((local_result = gmtime (timer)) == NULL || result == NULL)
#    return NULL;
#  memcpy (result, local_result, sizeof (result));
#  return result;
#}
#EOF
#cat src/grabber_amazon.c.bak >> src/grabber_amazon.c
### fix deprecated ffmpeg stuff in src/lavf_utils.c
##mv src/lavf_utils.c src/lavf_utils.c.bak
##cat > src/lavf_utils.c << EOF
###define av_open_input_file(a,b,c,d,e) avformat_open_input(a,b,c,e)
##EOF
##cat src/lavf_utils.c.bak >> src/lavf_utils.c
## fix deprecated av_metadata_get
#sed -i.bak -e "s/av_metadata_get/av_codec_get_id/g" configure
#wl-showstatus configure &&
##./configure --prefix=$INSTALLPREFIX --disable-debug --enable-grabber-dummy &&
#C_INCLUDE_PATH=$MINGWPREFIX/ffmpeg2/include${C_INCLUDE_PATH:+:$C_INCLUDE_PATH} CPLUS_INCLUDE_PATH=$MINGWPREFIX/ffmpeg2/include${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} PKG_CONFIG_PATH=$MINGWPREFIX/ffmpeg2/lib/pkgconfig${PKG_CONFIG_PATH:+:$PKG_CONFIG_PATH} PATH=$MINGWPREFIX/ffmpeg2/bin:$PATH ./configure --prefix=$INSTALLPREFIX --disable-debug --enable-grabber-dummy &&
##./configure --prefix=$INSTALLPREFIX --disable-debug --enable-grabber-dummy --with-lavf=$MINGWPREFIX --with-lavc=$MINGWPREFIX --with-lavu=$MINGWPREFIX &&
# wl-showstatus build-install &&
# make install &&
#    echo OK
## wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION



export NAME="libvalhalla"
export STATUS=
export URL=https://github.com/valhalla/valhalla
export BASENAME=libvalhalla
export DESCRIPTION="libvalhalla is a library written in C. It is a media scanner, that stores various information in an SQLite database and relies on FFmpeg (libavformat and libavutil) and libcurl. It features many Internet grabbers that allows automatic download of covers, lyrics, informations on media files, tags retrival in video and music files and so on."
export CATEGORY=multimedia,communication
export TYPE=library
#export VERSION=3.0.1
#export VERSIONDATE=20190105
#export VERSION=3.0.2
#export VERSIONDATE=20190115
#export VERSION=3.0.3
#export VERSIONDATE=20190508
#export VERSION=3.0.4
#export VERSIONDATE=20190601
#export VERSION=3.0.5
#export VERSIONDATE=20190605
#export VERSION=3.0.6
#export VERSIONDATE=20190716
#export VERSION=3.0.7
#export VERSIONDATE=20190720
#export VERSION=3.0.8
#export VERSIONDATE=20190907
#export VERSION=3.0.9
#export VERSIONDATE=20191122
#export VERSION=3.1.0
#export VERSIONDATE=20210126
#export VERSION=3.1.1
#export VERSIONDATE=20210422
#export VERSION=3.1.2
#export VERSIONDATE=20210527
#export VERSION=3.1.3
#export VERSIONDATE=20210721
#export VERSION=3.1.4
#export VERSIONDATE=20211008
export VERSION=3.2.0
export VERSIONDATE=20221027
####Checking for module 'libprime_server>=0.6.3'
####A required package was not found
wl-showstatus --package-version
export DEPENDANCIES=boost,sqlite3,libspatialite,libxml2,libcurl,ffmpeg2,libexif,libnfo,pthreads,prime_server,robin-hood-hashing,cpp-statsd-client
export OPTIONALDEPENDANCIES=
export BUILDDEPENDANCIES=cmake,ninja
export LICENSEFILE=LICENSE.md
export LICENSETYPE=MIT
export DOWNLOADURL="https://github.com/valhalla/valhalla/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://github.com/valhalla/valhalla/archive/$VERSION.tar.gz
export DOWNLOADSOURCEURL=https://github.com/valhalla/valhalla/archive/refs/tags/$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
tar xfz $TARBALLDIR/$BASENAME/$VERSION.tar.gz
cd valhalla-$VERSION
mkdir -p build_static build_shared &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DENABLE_SERVICES:BOOL=OFF -DENABLE_PYTHON_BINDINGS:BOOL=OFF -DENABLE_COVERAGE:BOOL=OFF -DENABLE_BENCHMARKS:BOOL=OFF -DENABLE_TESTS:BOOL=OFF -DPython_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) -S. -Bbuild_static &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DENABLE_SERVICES:BOOL=OFF -DENABLE_PYTHON_BINDINGS:BOOL=OFF -DENABLE_COVERAGE:BOOL=OFF -DENABLE_BENCHMARKS:BOOL=OFF -DENABLE_TESTS:BOOL=OFF -DPython_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) -S. -Bbuild_shared &&
 ## fix execution of Python scripts
 #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|glib-genmarshal\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
 ## fix missing link libraries
 #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lws2_32/" build_win/build.ninja &&
 #wl-showstatus build &&
 #ninja -Cbuild_static &&
 #wl-showstatus build &&
 #ninja -Cbuild_shared &&
 wl-showstatus build-install &&
 ninja -Cbuild_static install/strip &&
 wl-showstatus build-install &&
 ninja -Cbuild_shared install/strip &&
    echo OK
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf valhalla-$VERSION




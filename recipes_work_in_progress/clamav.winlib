export NAME="ClamAV"
export STATUS=
#export URL=http://www.clamav.net/
export URL=http://oss.netfarm.it/clamav/
export BASENAME=clamav
export DESCRIPTION="ClamAV(R) is an open source antivirus engine for detecting trojans, viruses, malware & other malicious threats."
export CATEGORY=
export TYPE=library
#export VERSION=0.98.7
#export VERSIONDATE=20150727
#export VERSION=0.99
#export VERSIONDATE=20160210
#export VERSION=0.99.1
#export VERSIONDATE=20160311
#export VERSION=0.99.2
#export VERSIONDATE=20180116
#export VERSION=0.99.3
#export VERSIONDATE=20180126
#export VERSION=0.99.4
#export VERSIONDATE=20180302
#export VERSION=0.100.0
#export VERSIONDATE=20180410
#export VERSION=0.100.1
#export VERSIONDATE=20180710
####configure: error: Structure packing seems to be available, but is not working with this compiler
#export VERSION=0.100.2
#export VERSIONDATE=20181003
#export VERSION=0.101.0
#export VERSIONDATE=20181204
#export VERSION=0.101.1
#export VERSIONDATE=20190108
#export VERSION=0.101.2
#export VERSIONDATE=20190327
#export VERSION=0.101.3
#export VERSIONDATE=20190806
#export VERSION=0.101.4
#export VERSIONDATE=20190822
#export VERSION=0.102.0
#export VERSIONDATE=20191003
#export VERSION=0.102.1
#export VERSIONDATE=20191121
#export VERSION=0.102.2
#export VERSIONDATE=20200206
#export VERSION=0.102.3
#export VERSIONDATE=20200513
#export VERSION=0.102.4
#export VERSIONDATE=20200717
#export VERSION=0.103.0
#export VERSIONDATE=20200915
#export VERSION=0.103.1
#export VERSIONDATE=20210204
#export VERSION=0.103.2
#export VERSIONDATE=20210408
#export VERSION=0.103.3
#export VERSIONDATE=20210622
#export VERSION=0.103.7
#export VERSIONDATE=20220730
#export VERSION=0.104.0
#export VERSIONDATE=20210904
#export VERSION=0.104.1
#export VERSIONDATE=20211104
#export VERSION=0.104.2
#export VERSIONDATE=20220113
#export VERSION=0.105.0
#export VERSIONDATE=20220505
####fmap.h:39:9: error: unknown type name 'cl_fmap_t'
#export VERSION=0.105.1
#export VERSIONDATE=20220727
export VERSION=0.105.1-2
export VERSIONDATE=20221101
####Could NOT find Rust (missing: cargo_EXECUTABLE)
wl-showstatus --package-version
#export DEPENDANCIES=pthreads,zlib,libbz2,libltdl,libxml2,libiconv,pdcurses,libcurl,openssl,json
export DEPENDANCIES=pthreads,zlib,libbz2,libltdl,libxml2,libiconv,ncurses,libcurl,openssl,json
export OPTIONALDEPENDANCIES=
export BUILDDEPENDANCIES=cmake,ninja
export LICENSEFILE=COPYING
export LICENSETYPE=
#export DOWNLOADURL="https://github.com/clamwin/clamav-win32/releases"
#export DOWNLOADURL="http://www.clamav.net/downloads"
export DOWNLOADURL="https://www.clamav.net/downloads"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://github.com/clamwin/clamav-win32/archive/$VERSION.tar.gz
export DOWNLOADSOURCEURL=http://www.clamav.net/downloads/production/$BASENAME-$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#mv $TARBALLDIR/$BASENAME/$VERSION.tar.gz $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
wl-wait4deps
wl-showstatus extract
tar xfz $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
#cd clamav-win32-$VERSION
#cd $BASENAME-$VERSION
cd $BASENAME-$(echo $VERSION|sed -e "s/-[0-9]$//")
## fix mkdir parameters in libclamunrar_iface/unrar_iface.c
#sed -i.bak -e "s/\(mkdir *([^,]*\),[^)]*)/\1)/" libclamunrar_iface/unrar_iface.c
## don't abort on structure packing error
#mv configure configure.bak &&
#sed -e "s/as_fn_error\(.*Structure packing seems to be available, but is not working\)/echo\1/" configure.bak > configure
#wl-showstatus configure &&
##./autogen.sh &&
##    echo OK
### fix building DLLs on 64-bit
##if ( echo $RUNPLATFORM | grep -q x86_64 ); then
## echo "AM_GNU_GETTEXT_VERSION([$(gettext --version|head -n1|sed -e "s/^.* \([0-9\.]*\) *$/\1/")])" >> configure.ac &&
## autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal
##fi
##INTLTOOL_PERL="$PERLDIR/bin/perl.exe" 
##PERL="$PERLDIR/bin/perl.exe -I$PERLDIR/lib" 
##PYTHON=$PYDIR/python.exe 
##PYTHON=$PYDIR/python.exe C_INCLUDE_PATH=$PYDIR/include${C_INCLUDE_PATH:+:$C_INCLUDE_PATH} 
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM LDFLAGS="-Wl,--as-needed -Wl,-no-undefined" &&
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM LDFLAGS="-Wl,--as-needed" &&
#./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-static --enable-shared --with-ltdl-include=$MINGWPREFIX/include --with-ltdl-lib=$MINGWPREFIX/lib --with-xml=$MINGWPREFIX --with-openssl=$MINGWPREFIX --with-libjson=$MINGWPREFIX --with-zlib=$MINGWPREFIX --with-libbz2-prefix=$MINGWPREFIX --with-iconv --disable-zlib-vcheck --with-libpdcurses-prefix=$MINGWPREFIX --with-libcurl=$MINGWPREFIX CFLAGS="-I$MINGWPREFIX/include/json-c" CXXFLAGS="-I$MINGWPREFIX/include/json-c" LDFLAGS="-Wl,--as-needed -lpowrprof" &&
# sed -i.bak -e 's?^\(#define DATADIR.*\)?//\1?' clamav-config.h &&
# ## fix building DLLs
# #mv libtool libtool.bak &&
# #sed -e "s/\(allow_undefined=\)yes/\1no/" libtool.bak > libtool &&
# #wl-showstatus build &&
# #make &&
# wl-showstatus build-install &&
# #make install-strip &&
# make install-strip CXX="${CXX:-g++} -fpermissive" &&
#    echo OK

# fix redefinition of ssize_t in win32/compat/net.h (version >= 0.104.0)
patch -ulbf win32/compat/net.h << EOF
@@ -26,3 +26,3 @@
    and platform.h will make these functions recursive ;-). */
-#ifndef ssize_t
+#if !defined(ssize_t) && !defined(__MINGW32__)
 typedef int ssize_t;
EOF
# avoid assembler issues in libclamav/tomsfastmath/sqr/fp_sqr_comba.c (version >= 0.104.0)
patch -ulbf libclamav/tomsfastmath/sqr/fp_sqr_comba.c << EOF
@@ -16,3 +16,3 @@

-#if defined(TFM_X86)
+#if defined(TFM_X86) && !defined(__MINGW32__)

@@ -85,3 +85,3 @@

-#elif defined(TFM_X86_64)
+#elif defined(TFM_X86_64) && !defined(__MINGW32__)
 /* x86-64 optimized */
EOF
# avoid __try/__except in libclamav/iowrap.c (version >= 0.104.0)
sed -i.bak -e "s/#ifdef _WIN32/#if defined(_WIN32) \&\& \!defined(__MINGW32__)/" libclamav/iowrap.c
# fix redefinition of strptime and avoid __try/__except in libclamav/crypto.c (version >= 0.104.0)
patch -ulbf libclamav/crypto.c << EOF
@@ -70,3 +70,3 @@

-#if defined(_WIN32)
+#if defined(_WIN32) && !defined(__MINGW32__)
 char *strptime(const char *buf, const char *fmt, struct tm *tm);
@@ -74,3 +74,3 @@

-#if defined(_WIN32)
+#if defined(_WIN32) && !defined(__MINGW32__)
 #define EXCEPTION_PREAMBLE __try {
EOF
# fix undefined O_LARGEFILE in libclamav/clamav.h (version >= 0.104.0)
patch -ulbf libclamav/clamav.h << EOF
@@ -48,2 +48,5 @@
 #define FSTAT fstat64
+#ifndef O_LARGEFILE
+#define O_LARGEFILE 0
+#endif
 #define safe_open(a, b) open(a, b | O_LARGEFILE)
EOF
# fix issue with definition of gettimeofday in win32/compat/gettimeofday.h (version >= 0.104.0)
mv win32/compat/gettimeofday.h win32/compat/gettimeofday.h.bak &&
echo "#include <time.h>" > win32/compat/gettimeofday.h &&
cat win32/compat/gettimeofday.h.bak >> win32/compat/gettimeofday.h
## fix issue with definition of gettimeofday in win32/compat/net.h (version >= 0.104.0)
#mv win32/compat/net.h win32/compat/net.h.bak &&
#echo "#include <time.h>" > win32/compat/net.h &&
#cat win32/compat/net.h.bak >> win32/compat/net.h
# fix platform.h.in (version >= 0.104.0)
patch -ulbf platform.h.in << EOF
@@ -4,2 +4,6 @@
 #ifdef _WIN32
+#if !defined(_WIN32_WINNT) || _WIN32_WINNT < 0x0600
+#undef _WIN32_WINNT
+#define _WIN32_WINNT 0x0600
+#endif
 #include <winsock2.h>
EOF
# fix detection of pthreads in cmake/FindPthreadW32.cmake (version >= 0.104.0)
patch -ulbf cmake/FindPthreadW32.cmake << EOF
@@ -52,5 +52,8 @@
   NAMES pthread.h
-  PATHS \${PC_PThreadW32_INCLUDE_DIRS}
+  PATHS \${PC_PThreadW32_INCLUDE_DIRS} $(cygpath -m $(dirname $(ls -1 $MINGWDIR/*mingw*/include/pthread.h|sort -V|tail -n1)))
   PATH_SUFFIXES pthreadw32
 )
+if(NOT PThreadW32_LIBRARY)
+  find_library(PThreadW32_LIBRARY NAMES pthread PATHS $(cygpath -m $(dirname $(ls -1 $MINGWDIR/*mingw*/lib/libpthread.a|sort -V|tail -n1))))
+endif()

@@ -72,2 +75,5 @@

+if(NOT PThreadW32_FOUND AND PThreadW32_INCLUDE_DIR AND PThreadW32_LIBRARY)
+  set(PThreadW32_FOUND TRUE)
+endif()
 set(PThreadW32_VERSION \${PC_PThreadW32_VERSION})
EOF
# don't install dependency libraries in clamdtop/CMakeLists.txt (version >= 0.104.0)
####TO DO: also needed elsewhere, see: grep -i "install(TARGETS" $(find -name CMakeLists.txt) -B1
patch -ulbf clamdtop/CMakeLists.txt << EOF
@@ -29,3 +29,3 @@
         Curses::curses )
-if(WIN32)
+if(MSVC)
     install(TARGETS clamdtop DESTINATION . COMPONENT programs)
EOF
mkdir -p build_win &&
 wl-showstatus configure &&
 PKG_CONFIG= cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DENABLE_SHARED_LIB:BOOL=ON -DENABLE_STATIC_LIB:BOOL=ON -DENABLE_EXTERNAL_MSPACK:BOOL=ON -DENABLE_UNRAR:BOOL=OFF -DENABLE_SYSTEMD:BOOL=OFF -DENABLE_EXAMPLES:BOOL=OFF -DENABLE_TESTS:BOOL=OFF -DPython3_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DCMAKE_CXX_FLAGS:STRING="-fpermissive" -S. -Bbuild_win &&
 # fix missing link libraries
 sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lpowrprof/" build_win/build.ninja &&
 #wl-showstatus build &&
 #ninja -Cbuild_win &&
 wl-showstatus build-install &&
 ninja -Cbuild_win install/strip &&
    echo OK
# #wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf clamav-win32-$VERSION
# #wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$(echo $VERSION|sed -e "s/-[0-9]$//")



#export NAME="clamav-win32"
#export STATUS=
#export URL=https://github.com/clamwin/clamav-win32
#export BASENAME=clamav
#export DESCRIPTION="ClamAV native win32 port"
#export CATEGORY=dataprocessing
#export TYPE=library
##export VERSION=0.100
##export VERSIONDATE=20181003
##export VERSION=0.101
##export VERSIONDATE=20190327
##export VERSION=0.101.4
##export VERSIONDATE=20191003
##export VERSION=0.102
##export VERSIONDATE=20200717
#export VERSION=0.103.0
#export VERSIONDATE=20210408
#wl-showstatus --package-version
#export DEPENDANCIES=
#export OPTIONALDEPENDANCIES=
#export BUILDDEPENDANCIES=
#export LICENSEFILE=COPYING
#export LICENSETYPE=
##export DOWNLOADURL="https://github.com/clamwin/clamav-win32/branches"
#export DOWNLOADURL="https://github.com/clamwin/clamav-win32/releases"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
##export DOWNLOADSOURCEURL=https://github.com/clamwin/clamav-win32/archive/$VERSION.tar.gz
#export DOWNLOADSOURCEURL=https://github.com/clamwin/clamav-win32/archive/refs/tags/v$VERSION.tar.gz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#wl-showstatus extract
##tar xfz $TARBALLDIR/$BASENAME/$VERSION.tar.gz
#tar xfz $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
#cd clamav-win32-$VERSION
#wl-showstatus build &&
# make -Cmingw &&
#    echo OK
## wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf clamav-win32-$VERSION



#export BUILDDEPENDANCIES=cmake,ninja
## avoid PThreadW32::pthreadw32 dependency
#sed -i.bak -e "s/PThreadW32::pthreadw32//" libclamav/CMakeLists.txt win32/compat/CMakeLists.txt
#mkdir -p build_win &&
# wl-showstatus configure &&
# PKG_CONFIG= cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DCMAKE_CXX_FLAGS:STRING="-fpermissive" -S. -Bbuild_win &&
# # fix missing libraries
# sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*-ladvapi32/& -Wl,--as-needed -lpowrprof/" build_win/build.ninja &&
# #wl-showstatus build &&
# #ninja -Cbuild_win &&
# wl-showstatus build-install &&
# ninja -Cbuild_win install/strip &&
#    echo OK

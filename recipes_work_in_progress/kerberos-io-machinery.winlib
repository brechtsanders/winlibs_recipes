export NAME="Kerberos.io machinery"
export STATUS=
export URL=https://github.com/kerberos-io/machinery
export BASENAME=kerberos-io-machinery
export DESCRIPTION="An image processing framework, which uses your USB-, IP- or RPi-camera to recognize events (e.g. motion)."
export CATEGORY=video
export TYPE=application
#export VERSION=2.6.2
#export VERSIONDATE=20180914
export VERSION=2.8.0
export VERSIONDATE=20200102
wl-showstatus --package-version
export DEPENDANCIES=ffmpeg4,opencv,gtest,eigen
export OPTIONALDEPENDANCIES=
export BUILDDEPENDANCIES=cmake
export LICENSEFILE=README.md
export LICENSETYPE=CC-NC-ND
export DOWNLOADURL="https://github.com/kerberos-io/machinery/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/kerberos-io/machinery/archive/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xfz $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd machinery-$VERSION
sed -i.bak -e "s?Eigen/?eigen3/&?" $(grep -l "#\s*include.*Eigen/" $(find -name '*.cpp' -or -name '*.hpp'))
sed -i.bak -e "s?\(sys/socket.h\|arpa/inet.h\)?winsock2.h?" $(grep -l sys/socket.h $(find -name '*.c' -or -name '*.cc' -or -name '*.cpp' -or -name '*.h'))
wl-showstatus configure &&
cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_TESTING:BOOL=OFF . &&
#-DCMAKE_CXX_FLAGS:STRING="-I$MINGWPREFIX/include/eigen3" 
 wl-showstatus build-install &&
 make install/strip &&
    echo OK

#export BUILDDEPENDANCIES=cmake
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cd build_static &&
# cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF .. &&
# cd .. &&
# wl-showstatus configure &&
# cd build_shared &&
# cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON .. &&
# cd .. &&
# wl-showstatus build-install &&
# make -Cbuild_static install/strip &&
# wl-showstatus build-install &&
# make -Cbuild_shared install/strip &&
#    echo OK

#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library static -D documentation=true . build_static &&
# wl-showstatus configure &&
# PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library shared -D documentation=true . build_shared &&
# wl-showstatus build-install &&
# PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib ninja -C build_static install/strip &&
# wl-showstatus build-install &&
# PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib ninja -C build_shared install/strip &&
#    echo OK && find . -name '*.a'

# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf machinery-$VERSION




export NAME="OpenSMT2"
export STATUS=
export URL=http://verify.inf.usi.ch/opensmt2
#export URL=https://github.com/usi-verification-and-security/opensmt
export BASENAME=opensmt
export DESCRIPTION="OpenSMT2 is an SMT solver written in C++. It supports reading files in SMT-LIB2 format and the theories QF_UF, QF_LRA, QF_RDL, and QF_LIA. The system also provides an API."
export CATEGORY=math
export TYPE=application,library
#export VERSION=2.1.0
#export VERSIONDATE=20210902
#export VERSION=2.1.1
#export VERSIONDATE=20210908
#export VERSION=2.2.0
#export VERSIONDATE=20211004
#export VERSION=2.3.0
#export VERSIONDATE=20220310
#export VERSION=2.3.1
#export VERSIONDATE=20220317
#export VERSION=2.3.2
#export VERSIONDATE=20220421
#export VERSION=2.4.0
#export VERSIONDATE=20220722
#export VERSION=2.4.1
#export VERSIONDATE=20220729
export VERSION=2.4.2
export VERSIONDATE=20221025
####src/common/Global.h:49:10: fatal error: sys/resource.h: No such file or directory
wl-showstatus --package-version
export DEPENDANCIES=gmp,wineditline
export OPTIONALDEPENDANCIES=
export BUILDDEPENDANCIES=cmake,ninja
export LICENSEFILE=LICENSE
export LICENSETYPE=MIT/GPL
export DOWNLOADURL="https://github.com/usi-verification-and-security/opensmt/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/usi-verification-and-security/opensmt/archive/refs/tags/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xfz $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd $BASENAME-$VERSION
mkdir -p build_win &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DLibEdit_INCLUDE_DIR:PATH=$MINGWPREFIX/include/editline -DINSTALL_GTEST:BOOL=OFF -DPACKAGE_BENCHMARKS:BOOL=OFF -DPACKAGE_TESTS:BOOL=OFF -S. -Bbuild_win &&
 #wl-showstatus build &&
 #ninja -Cbuild_win &&
 wl-showstatus build-install &&
 ninja -Cbuild_win install/strip &&
    echo OK

#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -S. -Bbuild_static &&
# #-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -S. -Bbuild_shared &&
# ## fix execution of Python scripts
# #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|glib-genmarshal\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
# #wl-showstatus build &&
# #ninja -Cbuild_static &&
# #wl-showstatus build &&
# #ninja -Cbuild_shared &&
# wl-showstatus build-install &&
# ninja -Cbuild_static install/strip &&
# wl-showstatus build-install &&
# ninja -Cbuild_shared install/strip &&
#    echo OK

# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




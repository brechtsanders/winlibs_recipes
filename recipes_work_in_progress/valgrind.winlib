export NAME="Valgrind"
export STATUS=
export URL=http://valgrind.org/
#export URL=http://sourceforge.net/projects/valgrind4win/
export BASENAME=valgrind
export DESCRIPTION="Valgrind is a GPL'd system for debugging and profiling Linux programs. With Valgrind's tool suite you can automatically detect many memory management and threading bugs, avoiding hours of frustrating bug-hunting, making your programs more stable. You can also perform detailed profiling to help speed up your programs."
export CATEGORY=debugging
export TYPE=library
#export VERSION=3.8.1
#export VERSIONDATE=20121218
#export VERSION=3.9.0
#export VERSIONDATE=20131101
#export VERSION=3.10.0
#export VERSIONDATE=20140911
#export VERSION=3.10.1
#export VERSIONDATE=20141126
#export VERSION=3.11.0
#export VERSIONDATE=20150923
#export VERSION=3.12.0
#export VERSIONDATE=20161023
#export VERSION=3.13.0
#export VERSIONDATE=20170616
#export VERSION=3.14.0
#export VERSIONDATE=20181016
#export VERSION=3.15.0
#export VERSIONDATE=20190417
#export VERSION=3.16.0
#export VERSIONDATE=20200528
#export VERSION=3.16.1
#export VERSIONDATE=20200623
####configure: error: Valgrind is operating system specific. Sorry.
#export VERSION=3.17.0
#export VERSIONDATE=20210322
#export VERSION=3.18.1
#export VERSIONDATE=20211016
#export VERSION=3.19.0
#export VERSIONDATE=20220412
#export VERSION=3.20.0
#export VERSIONDATE=20221024
#export VERSION=3.21.0
#export VERSIONDATE=20230429
#export VERSION=3.22.0
#export VERSIONDATE=20231101
#export VERSION=3.23.0
#export VERSIONDATE=20240427
#export VERSION=3.24.0
#export VERSIONDATE=20241101
#export VERSION=3.25.0
#export VERSIONDATE=20250426
export VERSION=3.25.1
export VERSIONDATE=20250520
####coregrind/launcher-linux.c:46:10: fatal error: elf.h: No such file or directory
wl-showstatus --package-version
export DEPENDENCIES=elfutils
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=COPYING
export LICENSETYPE=GPL
export DOWNLOADURL="http://valgrind.org/downloads/current.html"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://valgrind.org/downloads/$BASENAME-$VERSION.tar.bz2
export DOWNLOADSOURCEURL=ftp://sourceware.org/pub/valgrind/$BASENAME-$VERSION.tar.bz2
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
tar xj --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.bz2
cd $BASENAME-$VERSION
# fix missing uintptr_t in include/valgrind.h (version >= 3.16.0)
mv include/valgrind.h include/valgrind.h.bak &&
echo "#include <stdint.h>" > include/valgrind.h &&
cat include/valgrind.h.bak >> include/valgrind.h
# fix configure
patch -ulbf configure << EOF
@@ -6037,2 +6037,5 @@
 case "\${host_os}" in
+     *mingw*)
+        VGCONF_OS="linux"
+        ;;
      *linux*)
@@ -7402,4 +7405,4 @@
 \$as_echo "unsupported version \${GLIBC_VERSION}" >&6; }
-       as_fn_error \$? "Valgrind requires glibc version 2.2 or later, uClibc," "\$LINENO" 5
-       as_fn_error \$? "musl libc, Darwin libc, Bionic libc or Solaris libc" "\$LINENO" 5
+       #as_fn_error \$? "Valgrind requires glibc version 2.2 or later, uClibc," "\$LINENO" 5
+       #as_fn_error \$? "musl libc, Darwin libc, Bionic libc or Solaris libc" "\$LINENO" 5
        ;;
EOF
#INTLTOOL_PERL="$PERLDIR/bin/perl.exe" 
#PERL="$PERLDIR/bin/perl.exe -I$PERLDIR/lib" 
#PYTHON=$PYDIR/python.exe make 
#PYTHON=$PYDIR/python.exe C_INCLUDE_PATH=$PYDIR/include${C_INCLUDE_PATH:+:$C_INCLUDE_PATH} 
wl-showstatus configure &&
 #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM LDFLAGS="-no-undefined -Wl,-no-undefined" &&
 #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM LDFLAGS="-Wl,-no-undefined" &&
 ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-only$(if ( echo $RUNPLATFORM | grep -qv x86_64 ); then echo 32; else echo 64; fi)bit &&
 #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-only$(if ( echo $RUNPLATFORM | grep -qv x86_64 ); then echo 32; else echo 64; fi)bit CCAS=$(which nasm.exe) &&
 wl-showstatus build-install &&
 make install-strip &&
    echo OK
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && rm -rf $BASENAME-$VERSION
####See also: https://sourceforge.net/projects/valgrind4win/



#export NAME="Valgrind for Windows"
#export STATUS=
#export URL=https://sourceforge.net/p/valgrind4win/wiki/Home/
#export BASENAME=valgrind
#export DESCRIPTION="Valgrind for Windows"
#export CATEGORY=development
#export TYPE=application
#export VERSION=r64-trunk
#export VERSIONDATE=20211016
#wl-showstatus --package-version
#export DEPENDENCIES=
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=
#export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=COPYING
#export LICENSETYPE=GPL
#export DOWNLOADURL="https://sourceforge.net/projects/valgrind4win/files/"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://sourceforge.net/code-snapshots/svn/v/va/valgrind4win/code/valgrind4win-code-$VERSION.zip
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#wl-showstatus extract
#unzip -oq $TARBALLDIR/$BASENAME/valgrind4win-code-$VERSION.zip
#cd valgrind4win-code-$VERSION
## skip compiler version check
#sed -i.bak -e "s/AC_MSG_ERROR.*please use gcc/#&/" configure.in
## fix detection of dbghelp.h
#sed -i.bak2 -e "s?/opt/windbg?$MINGWDIR/$RUNPLATFORM?; s?inc\(/dbghelp\.h\)?include\1?; s?\($DTW_DIR\)/sdk?\1?; s?\(\$DTW_DIR/\)\([^ ]*\)\.dll?\1lib/lib\2.a?" configure.in
#wl-showstatus configure &&
# mkdir -p m4 &&
# autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal &&
# #./autogen.sh &&
# #    echo OK
# ## fix building DLLs on 64-bit
# #if ( echo $RUNPLATFORM | grep -q x86_64 ); then
# # echo "AM_GNU_GETTEXT_VERSION([$(gettext --version|head -n1|sed -e "s/^.* \([0-9\.]*\) *$/\1/")])" >> configure.ac &&
# # autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal
# #fi
# #INTLTOOL_PERL="$PERLDIR/bin/perl.exe" 
# #PERL="$PERLDIR/bin/perl.exe -I$PERLDIR/lib" 
# #PYTHON=$PYDIR/python.exe 
# #PYTHON=$PYDIR/python.exe C_INCLUDE_PATH=$PYDIR/include${C_INCLUDE_PATH:+:$C_INCLUDE_PATH} 
# #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --enable-shared --enable-static --host=$RUNPLATFORM LDFLAGS="-Wl,-no-undefined -Wl,--as-needed" &&
# ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-only$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi)bit &&
# ## fix building DLLs
# #sed -i.bak -e "s/\(allow_undefined=\)yes/\1no/" libtool &&
# ## fix detection of shared libraries
# #sed -i.bak2 -e "s/\(deplibs_check_method=\"\)[^\"]*/\1file_magic ^x86 archive import|^x86 DLL|PE32+* executable (DLL)|pe-i386|pe-x86-64/; s/'file format pe-i386[^']*'/\"\$deplibs_check_method\"/" libtool &&
# #sed -i.bak2 -e "s/\(deplibs_check_method=\"\)[^\"]*/\1none/" libtool &&
# #wl-showstatus build &&
# #make &&
# wl-showstatus build-install &&
# make install-strip &&
#    echo OK
## wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf valgrind4win-code-$VERSION




export NAME="libnfc"
export STATUS=
#export URL=http://nfc-tools.org/
#export URL=http://code.google.com/p/libnfc/
export URL=https://github.com/nfc-tools/libnfc
export BASENAME=libnfc
export DESCRIPTION="libnfc is the first libre, platform-independent, low level NFC (Near Field Communication) SDK and Programmers API."
export CATEGORY=security
export TYPE=library
#export VERSION=1.7.1
#export VERSIONDATE=20140425
export VERSION=1.8.0
export VERSIONDATE=20210114
####libnfc/drivers/acr122_usb.c:175:3: error: unknown type name 'usb_dev_handle'
wl-showstatus --package-version
export DEPENDANCIES=
export OPTIONALDEPENDANCIES=
export BUILDDEPENDANCIES=cmake,ninja,doxygen
export LICENSEFILE=COPYING
export LICENSETYPE=LGPL
#export DOWNLOADURL="http://code.google.com/p/libnfc/downloads/list"
#export DOWNLOADURL="https://bintray.com/nfc-tools/sources/libnfc"
export DOWNLOADURL="https://github.com/nfc-tools/libnfc/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=http://dl.bintray.com/nfc-tools/sources/$BASENAME-$VERSION.tar.bz2
export DOWNLOADSOURCEURL=https://github.com/nfc-tools/libnfc/releases/download/libnfc-$VERSION/$BASENAME-$VERSION.tar.bz2
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xfj $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.bz2
cd $BASENAME-$VERSION
## fix missing lusb0_usb.h
#mkdir -p winfix
#echo "#include <libusb-1.0/libusb.h>" > winfix/lusb0_usb.h
## fix missing files
#mkdir -p winfix/sys
#echo "#undef __STRICT_ANSI__" > winfix/sys/ioctl.h
##touch winfix/termios.h
#wl-showstatus configure &&
### fix building DLLs on 64-bit
##if ( echo $RUNPLATFORM | grep -q x86_64 ); then
## echo "AM_GNU_GETTEXT_VERSION(`gettext --version|head -n1|sed -e "s/^.* \([0-9\.]*\) *$/\1/"`)" >> configure.ac &&
## autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal
##fi
##INTLTOOL_PERL="$PERLDIR/bin/perl.exe" 
##PERL="$PERLDIR/bin/perl.exe -I$PERLDIR/lib" 
##PYTHON=$PYDIR/python.exe 
##PYTHON=$PYDIR/python.exe C_INCLUDE_PATH=$C_INCLUDE_PATH:$PYDIR/include 
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM LDFLAGS="-Wl,--as-needed -Wl,-no-undefined" &&
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM LDFLAGS="-Wl,--as-needed" &&
#./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-libusb-win32 --with-readline CFLAGS="-I$(pwd)/winfix -I$(pwd)/contrib/win32" &&
# wl-showstatus build &&
# ## fix building DLLs
# #mv libtool libtool.bak &&
# #sed -e "s/\(allow_undefined=\)yes/\1no/" libtool.bak > libtool &&
# #wl-showstatus build &&
# #make &&
# wl-showstatus build-install &&
# make install-strip &&
#    echo OK

# fix libnfc/buses/usbbus.h (version >= 1.8.0)
patch -ulbf libnfc/buses/usbbus.h << EOF
@@ -43,3 +43,3 @@
 // Under Windows we use libusb-win32 (>= 1.2.5)
-#include <lusb0_usb.h>
+#include <usb.h>
 #define USB_TIMEDOUT 116
EOF
# fix detection of libusb in cmake/modules/FindLIBUSB.cmake (version >= 1.8.0)
patch -ulbf cmake/modules/FindLIBUSB.cmake << EOF
@@ -27,3 +27,3 @@
 IF(NOT LIBUSB_FOUND)
-  IF(WIN32)
+  IF(MSVC)
     FIND_PATH(LIBUSB_INCLUDE_DIRS lusb0_usb.h "\$ENV{ProgramFiles}/LibUSB-Win32/include" NO_SYSTEM_ENVIRONMENT_PATH)
@@ -33,3 +33,3 @@
     STRING(REGEX REPLACE "\\\\\\\\" "/" LIBUSB_LIBRARY_DIR \${LIBUSB_LIBRARY_DIR})
-  ELSE(WIN32)
+  ELSE(MSVC)
     # If not under Windows we use PkgConfig
@@ -37,3 +37,3 @@
     IF(PKG_CONFIG_FOUND)
-      PKG_CHECK_MODULES(LIBUSB REQUIRED libusb)
+      PKG_CHECK_MODULES(LIBUSB REQUIRED libusb-1.0)
     ELSE(PKG_CONFIG_FOUND)
@@ -41,3 +41,3 @@
     ENDIF(PKG_CONFIG_FOUND)
-  ENDIF(WIN32)
+  ENDIF(MSVC)

EOF
mkdir -p build_static build_shared &&
 wl-showstatus configure &&
 PKG_CONFIG= cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DLIBNFC_LOG:BOOL=OFF -DBUILD_SHARED_LIBS:BOOL=OFF -DBUILD_EXAMPLES:BOOL=OFF -S. -Bbuild_static &&
 wl-showstatus configure &&
 PKG_CONFIG= cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DLIBNFC_LOG:BOOL=OFF -DBUILD_SHARED_LIBS:BOOL=ON -DBUILD_EXAMPLES:BOOL=OFF -S. -Bbuild_shared &&
 ## fix execution of Python scripts
 #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
 #wl-showstatus build &&
 #ninja -Cbuild_static &&
 #wl-showstatus build &&
 #ninja -Cbuild_shared &&
 wl-showstatus build-install &&
 ninja -Cbuild_static install/strip &&
 wl-showstatus build-install &&
 ninja -Cbuild_shared install/strip &&
    echo OK
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




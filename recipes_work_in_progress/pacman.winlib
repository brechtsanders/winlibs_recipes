export NAME="pacman"
export STATUS=
#export URL=http://wiki.archlinux.org/index.php/pacman
export URL=https://archlinux.org/pacman/
export BASENAME=pacman
export DESCRIPTION="The pacman package manager is one of the major distinguishing features of Arch Linux. It combines a simple binary package format with an easy-to-use build system. The goal of pacman is to make it possible to easily manage packages, whether they are from the official repositories or the user's own builds."
export CATEGORY=package
export TYPE=application
#export VERSION=3.0.0
#export VERSIONDATE=20181021
#export VERSION=4.1.2
#export VERSIONDATE=20140514
####configure: error: *** bash >= 4.1.0 is required for pacman scripts
#export VERSION=4.2.0
#export VERSIONDATE=20141219
####checking for Perl version 5.10.1 or later... no
#export VERSION=4.2.1
#export VERSIONDATE=20150220
####configure: error: *** bash >= 4.1.0 is required for pacman scripts
#export VERSION=5.0.1
#export VERSIONDATE=20160405
#export VERSION=5.0.2
#export VERSIONDATE=20170606
#export VERSION=5.1.0
#export VERSIONDATE=20180528
#export VERSION=5.1.1
#export VERSIONDATE=20180727
#export VERSION=5.1.2
#export VERSIONDATE=20181226
#export VERSION=5.1.3
#export VERSIONDATE=20190301
#export VERSION=5.2.0
#export VERSIONDATE=20191021
#export VERSION=5.2.1
#export VERSIONDATE=20191101
#export VERSION=5.2.2
#export VERSIONDATE=20200626
#export VERSION=6.0.0
#export VERSIONDATE=20210520
export VERSION=6.0.1
export VERSIONDATE=20210925
####lib/libalpm/add.c:496:31: error: 'O_CLOEXEC' undeclared (first use in this function)
wl-showstatus --package-version
export DEPENDANCIES=libarchive,openssl,gpgme,libcurl
export OPTIONALDEPENDANCIES=
#export BUILDDEPENDANCIES=
export BUILDDEPENDANCIES=meson,ninja
export LICENSEFILE=COPYING
export LICENSETYPE=GPL
#export DOWNLOADURL="http://projects.archlinux.org/pacman.git/"
export DOWNLOADURL="https://sources.archlinux.org/other/pacman/"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://projects.archlinux.org/pacman.git/snapshot/$BASENAME-$VERSION.tar.gz
export DOWNLOADSOURCEURL=https://sources.archlinux.org/other/pacman/$BASENAME-$VERSION.tar.xz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
#tar xfz $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
tar xfJ $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.xz
cd $BASENAME-$VERSION
## skip detection of Perl version
#mv configure.ac configure.ac.bak &&
#grep -v "perl is too old" configure.ac.bak > configure.ac
#wl-showstatus configure &&
# #./autogen.sh &&
# autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal &&
# ( patch -d build-aux -Np0 -i ltmain-asneeded.patch || true ) &&
# PERL="$PERLDIR/bin/perl.exe -I$PERLDIR/lib" ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM &&
# ## fix building DLLs
# #mv libtool libtool.bak &&
# #sed -e "s/\(allow_undefined=\)yes/\1no/" libtool.bak > libtool &&
# #wl-showstatus build &&
# #make &&
# wl-showstatus build-install &&
# make install-strip &&
#    echo OK && ls -l $INSTALLPREFIX/lib/pkgconfig $INSTALLPREFIX/share/pkgconfig
## wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
# fix missing python3
sed -i.bak -e "s/python3/python/" meson.build
mkdir -p build_both &&
 wl-showstatus configure &&
 PKG_CONFIG= PATH=$PYDIR:$PATH PYTHONPATH=$PYTHONPATH:$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Di18n=false -Ddoc=disabled . build_both &&
 #-Dbuildstatic=false
 ## fix slash/backslash path issue when calling Python from Ninja
 #sed -i.bak -e "s/join_paths/os.path.join/g; /COMMAND =.*python\.exe/ s?\"/\([a-zA-Z]\)/?\"\1:/?; /COMMAND =.*python\.exe/ s?/?\\\\?g" build_*/build.ninja &&
 ## fix Python path issues in meson_exe
 #sed -i.bak -e "s?$PYDIR?$(echo $PYDIR|sed -e "s?^/\([a-zA-Z]\)/?\1:/?")?" build_both/meson-private/meson_exe_python.exe_*.dat &&
 ## fix execution of Python scripts
 #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *= *\| *=.*\&\& *\)\(\"\{0,1\}[^ ]*\)\(\.py\|glib-mkenums\|g-ir-scanner\)\(\"\{0,1\} \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_both/build.ninja &&
 ## fix executing shell scripts
 #sed -i.bak -e "s?^\(\s*COMMAND\s*=\s*\)\(\"[^\"]*\.sh\"\)?\1\"$(cygpath -m $(which sh.exe))\" \2?" build_both/build.ninja &&
 wl-showstatus build-install &&
 PATH=$PATH:$PYDIR PYTHONPATH=$PYTHONPATH:$MINGWPREFIX/lib ninja -Cbuild_both install &&
    echo OK && find . -name '*.a'
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION



#export NAME="pacman"
#export STATUS=
#export URL=https://github.com/devkitPro/pacman/
#export BASENAME=pacman
#export DESCRIPTION="Arch Linux Package Management (ALPM)"
#export CATEGORY=package
#export TYPE=application
#export VERSION=1.0.2
#export VERSIONDATE=20211117
##export VERSION=master
##export VERSIONDATE=20211117
#wl-showstatus --package-version
#export DEPENDANCIES=
#export OPTIONALDEPENDANCIES=
#export BUILDDEPENDANCIES=
#export LICENSEFILE=COPYING
#export LICENSETYPE=GPL
#export DOWNLOADURL="https://github.com/devkitPro/pacman/releases"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://github.com/devkitPro/pacman/archive/refs/tags/v$VERSION.tar.gz
##export DOWNLOADSOURCEURL=https://github.com/devkitPro/pacman/archive/refs/heads/$VERSION.tar.gz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#wl-showstatus extract
#tar xfz $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
##tar xfz $TARBALLDIR/$BASENAME/$VERSION.tar.gz
#cd $BASENAME-$VERSION
#wl-showstatus configure &&
# mkdir -p m4 &&
# autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal &&
# #./autogen.sh &&
# #    echo OK
# ## fix building DLLs on 64-bit
# #if ( echo $RUNPLATFORM | grep -q x86_64 ); then
# # echo "AM_GNU_GETTEXT_VERSION([$(gettext --version|head -n1|sed -e "s/^.* \([0-9\.]*\) *$/\1/")])" >> configure.ac &&
# # autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal
# #fi
# #INTLTOOL_PERL="$PERLDIR/bin/perl.exe" 
# #PERL="$PERLDIR/bin/perl.exe -I$PERLDIR/lib" 
# #PYTHON=$PYDIR/python.exe 
# #PYTHON=$PYDIR/python.exe C_INCLUDE_PATH=$PYDIR/include${C_INCLUDE_PATH:+:$C_INCLUDE_PATH} 
# #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --enable-shared --enable-static --host=$RUNPLATFORM LDFLAGS="-Wl,-no-undefined -Wl,--as-needed" &&
# ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-crypto=nettle --with-gpgme --with-libcurl &&
# ## fix building DLLs
# #sed -i.bak -e "s/\(allow_undefined=\)yes/\1no/" libtool &&
# ## fix detection of shared libraries
# #sed -i.bak2 -e "s/\(deplibs_check_method=\"\)[^\"]*/\1file_magic ^x86 archive import|^x86 DLL|PE32+* executable (DLL)|pe-i386|pe-x86-64/; s/'file format pe-i386[^']*'/\"\$deplibs_check_method\"/" libtool &&
# #sed -i.bak2 -e "s/\(deplibs_check_method=\"\)[^\"]*/\1none/" libtool &&
# #wl-showstatus build &&
# #make &&
# wl-showstatus build-install &&
# make install-strip &&
#    echo OK
#
##export BUILDDEPENDANCIES=meson,ninja
### fix detection of Python
##sed -i.bak -e "s?'python3'?'$(cygpath -w $PYDIR/python.exe|sed -e 's/\\/&&&&/g')'?" meson.build
##mkdir -p build_both &&
## wl-showstatus configure &&
## PKG_CONFIG= PYTHONPATH=$PYTHONPATH:$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Dcurl=enabled -Dcrypto=nettle -Dgpgme=enabled -Di18n=true -Duse-git-version=false -Dfile-seccomp=disabled -Ddoc=disabled -Ddoxygen=disabled . build_both &&
## ## fix slash/backslash path issue when calling Python from Ninja
## #sed -i.bak -e "s/join_paths/os.path.join/g; /COMMAND =.*python\.exe/ s?\"/\([a-zA-Z]\)/?\"\1:/?; /COMMAND =.*python\.exe/ s?/?\\\\?g" build_*/build.ninja &&
## ## fix Python path issues in meson_exe
## #sed -i.bak -e "s?$PYDIR?$(echo $PYDIR|sed -e "s?^/\([a-zA-Z]\)/?\1:/?")?" build_both/meson-private/meson_exe_python.exe_*.dat &&
## ## fix execution of Python scripts
## #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *= *\| *=.*\&\& *\)\(\"\{0,1\}[^ ]*\)\(\.py\|glib-mkenums\|g-ir-scanner\|asciidoc\)\(\"\{0,1\} \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_both/build.ninja &&
## ## fix executing shell scripts
## #sed -i.bak -e "s?^\(\s*COMMAND\s*=\s*\)\(\"[^\"]*\.sh\"\)?\1\"$(cygpath -m $(which sh.exe))\" \2?" build_both/build.ninja &&
## wl-showstatus build-install &&
## PATH=$PATH:$PYDIR PYTHONPATH=$PYTHONPATH:$MINGWPREFIX/lib ninja -Cbuild_both install &&
## #PATH=$PERLDIR/../c/bin:$PERLDIR/bin:$PATH:$PYDIR PYTHONPATH=$PYTHONPATH:$MINGWPREFIX/lib ninja -Cbuild_both install &&
##    echo OK && find . -name '*.a'
#
## wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




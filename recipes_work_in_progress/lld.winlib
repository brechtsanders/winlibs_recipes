export NAME="lld"
export STATUS=
export URL=https://lld.llvm.org/
export BASENAME=lld
export DESCRIPTION="The lld project aims to to be the built-in linker for clang/llvm."
export CATEGORY=development
export TYPE=application
#export VERSION=3.4
#export VERSIONDATE=20140109
#export VERSION=3.5.0
#export VERSIONDATE=20140904
#export VERSION=3.5.1
#export VERSIONDATE=20150113
#export VERSION=3.5.2
#export VERSIONDATE=20150403
#export VERSION=3.6.0
#export VERSIONDATE=20150228
#export VERSION=3.6.1
#export VERSIONDATE=20150525
#export VERSION=3.6.2
#export VERSIONDATE=20150714
#export VERSION=3.7.0
#export VERSIONDATE=20150902
#export VERSION=3.7.1
#export VERSIONDATE=20160105
#export VERSION=3.8.0
#export VERSIONDATE=20160309
#export VERSION=3.8.1
#export VERSIONDATE=20160711
#export VERSION=3.9.0
#export VERSIONDATE=20160905
#export VERSION=3.9.1
#export VERSIONDATE=20161218
#export VERSION=4.0.0
#export VERSIONDATE=20170314
#export VERSION=4.0.1
#export VERSIONDATE=20170625
#export VERSION=5.0.0
#export VERSIONDATE=20170909
#export VERSION=5.0.1
#export VERSIONDATE=20171220
#export VERSION=5.0.2
#export VERSIONDATE=20180703
#export VERSION=6.0.0
#export VERSIONDATE=20180318
#export VERSION=6.0.1
#export VERSIONDATE=20180703
#export VERSION=7.0.0
#export VERSIONDATE=20181029
#export VERSION=7.0.1
#export VERSIONDATE=20181230
#export VERSION=7.1.0
#export VERSIONDATE=20190502
#export VERSION=8.0.0
#export VERSIONDATE=20190401
####Unknown CMake command "llvm_process_sources".
#export VERSION=8.0.1
#export VERSIONDATE=20190818
#export DEPENDENCIES=llvm
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=cmake
#export OPTIONALBUILDDEPENDENCIES=
#export VERSION=9.0.0
#export VERSIONDATE=20190930
#export VERSION=9.0.1
#export VERSIONDATE=20200224
#export VERSION=10.0.0
#export VERSIONDATE=20200326
#export VERSION=10.0.1
#export VERSIONDATE=20200804
#export VERSION=11.0.0
#export VERSIONDATE=20201012
export VERSION=11.1.0
export VERSIONDATE=20210408
#export VERSION=12.0.0
#export VERSIONDATE=20210419
#export VERSION=13.0.1
#export VERSIONDATE=20220214
wl-showstatus --package-version
export DEPENDENCIES=llvm
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE.TXT
export LICENSETYPE=
#export DOWNLOADURL="http://llvm.org/releases/download.html lld- .src.tar.gz"
#export DOWNLOADURL="http://llvm.org/releases/download.html lld- .src.tar.xz"
export DOWNLOADURL="https://github.com/llvm/llvm-project/releases lld- .src.tar.xz"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://llvm.org/releases/$(echo $VERSION|sed -e "s/^\([0-9]*\.[0-9]*\)\.*$/\1/")/$BASENAME-$VERSION.src.tar.gz
#export DOWNLOADSOURCEURL=http://llvm.org/releases/$(echo $VERSION|sed -e "s/^\([0-9]*\.[0-9]*\)\.*$/\1/")/$BASENAME-$VERSION.src.tar.xz
#export DOWNLOADSOURCEURL=http://llvm.org/releases/$VERSION/$BASENAME-$VERSION.src.tar.xz
export DOWNLOADSOURCEURL=https://github.com/llvm/llvm-project/releases/download/llvmorg-$VERSION/$BASENAME-$VERSION.src.tar.xz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
#tar xfzh $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.src.tar.gz
tar xfJh $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.src.tar.xz
#cd $BASENAME-$VERSION
cd $BASENAME-$VERSION.src
# fix missing off_t in lib/ReaderWriter/YAML/ReaderWriterYAML.cpp (version >= 3.4)
mv lib/ReaderWriter/YAML/ReaderWriterYAML.cpp lib/ReaderWriter/YAML/ReaderWriterYAML.cpp.bak
echo "#undef __STRICT_ANSI__" > lib/ReaderWriter/YAML/ReaderWriterYAML.cpp
cat lib/ReaderWriter/YAML/ReaderWriterYAML.cpp.bak >> lib/ReaderWriter/YAML/ReaderWriterYAML.cpp
# fix missing PRIx64 in lib/Driver/DarwinLdDriver.cpp
mv lib/Driver/DarwinLdDriver.cpp lib/Driver/DarwinLdDriver.cpp.bak
echo '#define PRIx64 "I64x"' > lib/Driver/DarwinLdDriver.cpp
cat lib/Driver/DarwinLdDriver.cpp.bak >> lib/Driver/DarwinLdDriver.cpp
# fix CMakeLists.txt
cp CMakeLists.txt CMakeLists.txt.bak
cat > CMakeLists.txt << EOF
find_package(LLVM REQUIRED CONFIG)
list(APPEND CMAKE_MODULE_PATH "\${LLVM_CMAKE_DIR}")
set(LLVM_RUNTIME_OUTPUT_INTDIR \${CMAKE_BINARY_DIR}/\${CMAKE_CFG_INTDIR}/bin)
set(LLVM_LIBRARY_OUTPUT_INTDIR \${CMAKE_BINARY_DIR}/\${CMAKE_CFG_INTDIR}/lib)
set(LLVM_LIBRARY_DIR \${LLVM_CMAKE_DIR}/lib)
include(AddLLVM)
include(TableGen)
EOF
cat CMakeLists.txt.bak >> CMakeLists.txt
mkdir -p build &&
 wl-showstatus configure &&
 #cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DCMAKE_CXX_FLAGS:STRING="-std=c++0x" -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe -DLLD_PATH_TO_LLVM_BUILD:PATH=$MINGWPREFIX -DLLVM_MAIN_SRC_DIR:PATH=$MINGWPREFIX -S. -Bbuild &&
 #cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DCMAKE_CXX_FLAGS:STRING="-std=c++11" -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe -DLLD_PATH_TO_LLVM_BUILD:PATH=$MINGWPREFIX -DLLVM_MAIN_SRC_DIR:PATH=$MINGWPREFIX -DPACKAGE_VERSION=$VERSION -DCMAKE_INCLUDE_PATH:PATH=$MINGWPREFIX/share/llvm/cmake -S. -Bbuild &&
 #cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DCMAKE_CXX_FLAGS:STRING="-std=c++11" -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe -DLLVM_DIR:PATH=$MINGWPREFIX -DLLVM_INSTALL_PREFIX:PATH=$MINGWPREFIX -DLLD_PATH_TO_LLVM_BUILD:PATH=$MINGWPREFIX -DLLVM_MAIN_SRC_DIR:PATH=$MINGWPREFIX -DPACKAGE_VERSION=$VERSION -DLLVM_TABLEGEN_EXE:PATH="$(which llvm-tblgen.exe)" -DLLVM_MAIN_INCLUDE_DIR:PATH=$MINGWPREFIX/include/llvm -S. -Bbuild &&
 #cmake.exe -Wno-dev -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DCMAKE_CXX_FLAGS:STRING="-std=c++11 -I$(pwd)/lib/Driver" -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe -DLLVM_DIR:PATH=$MINGWPREFIX -DLLVM_INSTALL_PREFIX:PATH=$MINGWPREFIX -DLLD_PATH_TO_LLVM_BUILD:PATH=$MINGWPREFIX -DLLVM_MAIN_SRC_DIR:PATH=$MINGWPREFIX -DPACKAGE_VERSION=$VERSION -DLLVM_TABLEGEN_EXE:PATH="$(which llvm-tblgen.exe)" -DLLVM_MAIN_INCLUDE_DIR:PATH=$MINGWPREFIX/include -S. -Bbuild &&
 #cmake.exe -Wno-dev -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DCMAKE_CXX_FLAGS:STRING="$(if g++ --help -v 2>/dev/null|grep -q "std=gnu++11"; then echo "-std=gnu++11"; fi) -D__STDC_CONSTANT_MACROS -D__STDC_LIMIT_MACROS -I$(pwd)/lib/Driver" -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe -DLLVM_DIR:PATH=$MINGWPREFIX -DLLVM_INSTALL_PREFIX:PATH=$MINGWPREFIX -DLLVM_MAIN_SRC_DIR:PATH=$MINGWPREFIX -DPACKAGE_VERSION=$VERSION -DLLVM_TABLEGEN_EXE:PATH="$(which llvm-tblgen.exe)" -DLLVM_MAIN_INCLUDE_DIR:PATH=$MINGWPREFIX/include -S. -Bbuild &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DLLVM_DIR:PATH=$MINGWPREFIX/share/llvm/lib/cmake/llvm -DLLVM_CONFIG_PATH:FILEPATH=$MINGWPREFIX/share/llvm/bin/llvm-config.exe -DCMAKE_CXX_FLAGS:STRING="$(if g++ --help -v 2>/dev/null|grep -q "std=gnu++11"; then echo "-std=gnu++11"; fi) -D__STDC_CONSTANT_MACROS -D__STDC_LIMIT_MACROS -I$(pwd)/lib/Driver" -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe -DPACKAGE_VERSION=$VERSION -S. -Bbuild &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_DIR:PATH=$MINGWPREFIX/share/llvm/lib/cmake/llvm -DLLVM_CONFIG_PATH:FILEPATH=$MINGWPREFIX/share/llvm/bin/llvm-config.exe -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe -DPACKAGE_VERSION=$VERSION -DLLD_BUILD_TOOLS:BOOL=ON -S. -Bbuild &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DLLD_DEFAULT_LD_LLD_IS_MINGW:BOOL=ON -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_DIR:PATH=$MINGWPREFIX/share/llvm/lib/cmake/llvm -DLLVM_CONFIG_PATH:FILEPATH=$MINGWPREFIX/share/llvm/bin/llvm-config.exe -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe -DPACKAGE_VERSION=$VERSION -DLLD_BUILD_TOOLS:BOOL=ON -S. -Bbuild &&
 wl-showstatus build-install &&
 #make -Cbuild install/strip &&
 ninja -Cbuild install/strip &&
    echo OK
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION.src
#See also: http://www.bencode.net/blog/2012/10/20/clangonwindows/
####Superseded by llvm-project all-in-one build




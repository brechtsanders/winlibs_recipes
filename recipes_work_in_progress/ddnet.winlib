export NAME="DDraceNetwork (DDNet)"
export STATUS=
export URL=https://ddnet.org/
export BASENAME=ddnet
export DESCRIPTION="DDraceNetwork (DDNet) is an actively maintained version of DDRace, a Teeworlds modification with a unique cooperative gameplay. Help each other play through custom maps with up to 64 players, compete against the best in international tournaments, design your own maps, or run your own server."
export CATEGORY=games
export TYPE=library
#export VERSION=16.6
#export VERSIONDATE=20221230
#export VERSION=16.7
#export VERSIONDATE=20230111
#export VERSION=16.7.1
#export VERSIONDATE=20230112
#export VERSION=16.7.2
#export VERSIONDATE=20230119
#export VERSION=16.8
#export VERSIONDATE=20230306
#export VERSION=16.9
#export VERSIONDATE=20230402
#export VERSION=17.0
#export VERSIONDATE=20230525
#export VERSION=17.0.1
#export VERSIONDATE=20230528
#export VERSION=17.0.2
#export VERSIONDATE=20230530
#export VERSION=17.0.3
#export VERSIONDATE=20230604
#export VERSION=17.1
#export VERSIONDATE=20230707
#export VERSION=17.1.1
#export VERSIONDATE=20230709
#export VERSION=17.2
#export VERSIONDATE=20230813
#export VERSION=17.2.1
#export VERSIONDATE=20230821
#export VERSION=17.3
#export VERSIONDATE=20230924
#export VERSION=17.4
#export VERSIONDATE=20231119
#export VERSION=17.4.1
#export VERSIONDATE=20231215
#export VERSION=17.4.2
#export VERSIONDATE=20231218
#export VERSION=18.0
#export VERSIONDATE=20240122
#export VERSION=18.0.1
#export VERSIONDATE=20240123
#export VERSION=18.0.2
#export VERSIONDATE=20240128
#export VERSION=18.0.3
#export VERSIONDATE=20240203
#export VERSION=18.1
#export VERSIONDATE=20240315
#export VERSION=18.2
#export VERSIONDATE=20240502
#export VERSION=18.3
#export VERSIONDATE=20240615
#export VERSION=18.3.1
#export VERSIONDATE=20240704
#export VERSION=18.4
#export VERSIONDATE=20240723
#export VERSION=18.5
#export VERSIONDATE=20240903
#export VERSION=18.5.1
#export VERSIONDATE=20240914
#export VERSION=18.6
#export VERSIONDATE=20241006
#export VERSION=18.7
#export VERSIONDATE=20241110
#export VERSION=18.8
#export VERSIONDATE=20241207
#export VERSION=18.8.1
#export VERSIONDATE=20241219
#export VERSION=18.8.2
#export VERSIONDATE=20241220
#export VERSION=18.9
#export VERSIONDATE=20250110
#export VERSION=18.9.1
#export VERSIONDATE=20250126
#export VERSION=19.0
#export VERSIONDATE=20250225
#export VERSION=19.1
#export VERSIONDATE=20250329
#export VERSION=19.2
#export VERSIONDATE=20250512
#export VERSION=19.2.1
#export VERSIONDATE=20250605
#export VERSION=19.3
#export VERSIONDATE=20250621
#export VERSION=19.4
#export VERSIONDATE=20250909
export VERSION=19.5
export VERSIONDATE=20251014
####Could NOT find Rust (missing: RUST_RUSTC RUST_CARGO)
####You must install Rust and Cargo to compile DDNet
wl-showstatus --package-version
export DEPENDENCIES=winpt
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=license.txt
export LICENSETYPE=
export DOWNLOADURL="https://github.com/ddnet/ddnet/tags"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/ddnet/ddnet/archive/refs/tags/$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/$VERSION.tar.gz
cd $BASENAME-$VERSION

## fix cmake/FindSSP.cmake (version >= 17.4)
#patch -ulbf cmake/FindSSP.cmake << EOF
#@@ -1,2 +1,2 @@
#-if(TARGET_OS STREQUAL "windows")
#+if(MSVC)
#   set_extra_dirs_lib(SSP ssp)
#EOF
# fix cmake/FindSSP.cmake (version >= 18.5.1)
patch -ulbf cmake/FindSSP.cmake << EOF
@@ -14,4 +14,4 @@
   if(NOT SSP_BUNDLED)
-    message(FATAL_ERROR "could not find ssp paths")
-  endif()
+    message(WARNING "could not find ssp paths")
+  else()
   set(SSP_COPY_FILES
@@ -19,2 +19,3 @@
   )
+  endif()
 endif()
EOF
# fix CMakeLists.txt (version >= 16.7.1)
patch -ulbf CMakeLists.txt << EOF
@@ -664,3 +664,3 @@
 if(NOT(RUST_FOUND))
-  message(SEND_ERROR "You must install Rust and Cargo to compile \${CMAKE_PROJECT_NAME}")
+  message(WARNING "You must install Rust and Cargo to compile \${CMAKE_PROJECT_NAME}")
 endif()
EOF

#grep -wi add_library $(find -name CMakeLists.txt -or -name '*.cmake')
#mkdir -p build_test && C_INCLUDE_PATH=$MINGWPREFIX/ffmpeg5/include${C_INCLUDE_PATH:+:$C_INCLUDE_PATH} CPLUS_INCLUDE_PATH=$MINGWPREFIX/ffmpeg5/include${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} PKG_CONFIG_PATH=$MINGWPREFIX/ffmpeg5/lib/pkgconfig${PKG_CONFIG_PATH:+:$PKG_CONFIG_PATH} PATH=$MINGWPREFIX/ffmpeg5/bin:$PATH cmake.exe -G"MSYS Makefiles" -DAUTOUPDATE:BOOL=OFF -DWEBSOCKETS:BOOL=ON -DDOWNLOAD_GTEST:BOOL=OFF -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -S. -Bbuild_test -LH && echo OK; rm -rf build_test

#export BUILDDEPENDENCIES=cmake,ninja
#PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ 
#-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
mkdir -p build_win &&
 wl-showstatus configure &&
 C_INCLUDE_PATH=$MINGWPREFIX/ffmpeg5/include${C_INCLUDE_PATH:+:$C_INCLUDE_PATH} CPLUS_INCLUDE_PATH=$MINGWPREFIX/ffmpeg5/include${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} PKG_CONFIG_PATH=$MINGWPREFIX/ffmpeg5/lib/pkgconfig${PKG_CONFIG_PATH:+:$PKG_CONFIG_PATH} PATH=$MINGWPREFIX/ffmpeg5/bin:$PYDIR:$PATH cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DPREFER_BUNDLED_LIBS:BOOL=OFF -DAUTOUPDATE:BOOL=OFF -DWEBSOCKETS:BOOL=ON -DDOWNLOAD_GTEST:BOOL=OFF -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -S. -Bbuild_win &&
 #-DMYSQL:BOOL=ON 
 #wl-showstatus build &&
 #cmake.exe --build build_win &&
 #ninja -Cbuild_win &&
 wl-showstatus build-install &&
 #cmake.exe --install build_win --strip &&
 #cmake.exe --build build_win --target "install/strip" &&
 ninja -Cbuild_win install/strip &&
    echo OK

#export BUILDDEPENDENCIES=cmake,ninja
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -S. -Bbuild_static &&
# #-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -S. -Bbuild_shared &&
# ## fix execution of Python scripts
# #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|glib-genmarshal\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
# ## fix missing link libraries
# #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lws2_32/" build_shared/build.ninja &&
# #wl-showstatus build &&
# #cmake.exe --build build_static &&
# #ninja -Cbuild_static &&
# #wl-showstatus build &&
# #cmake.exe --build build_shared &&
# #ninja -Cbuild_shared &&
# wl-showstatus build-install &&
# #cmake.exe --install build_static --strip &&
# #cmake.exe --build build_static --target "install/strip" &&
# #cmake.exe --build build_static --target "library/install/strip" &&
# ninja -Cbuild_static install/strip &&
# #ninja -Cbuild_static library/install/strip &&
# wl-showstatus build-install &&
# #cmake.exe --install build_shared --strip &&
# #cmake.exe --build build_shared --target "install/strip" &&
# ninja -Cbuild_shared install/strip &&
#    echo OK

# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




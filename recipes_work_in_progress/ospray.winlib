export NAME="OSPRay"
export STATUS=
export URL=http://ospray.org/
#export URL=https://github.com/ospray/OSPRay
export BASENAME=ospray
export DESCRIPTION="An Open, Scalable, Portable, Ray Tracing Based Rendering Engine for High-Fidelity Visualization"
export CATEGORY=graphics
export TYPE=library
#export VERSION=1.8.5
#export VERSIONDATE=20200108
#export VERSION=2.0.0
#export VERSIONDATE=20200119
#export VERSION=2.0.1
#export VERSIONDATE=20200208
#export VERSION=2.1.0
#export VERSIONDATE=20200410
#export VERSION=2.1.1
#export VERSIONDATE=20200526
#export VERSION=2.2.0
#export VERSIONDATE=20200709
#export VERSION=2.3.0
#export VERSIONDATE=20200915
#export VERSION=2.4.0
#export VERSIONDATE=20201003
#export VERSION=2.5.0
#export VERSIONDATE=20210209
#export VERSION=2.6.0
#export VERSIONDATE=20210520
#export VERSION=2.7.0
#export VERSIONDATE=20210816
#export VERSION=2.7.1
#export VERSIONDATE=20211001
#export VERSION=2.8.0
#export VERSIONDATE=20211105
export VERSION=2.9.0
export VERSIONDATE=20220216
####OSPRay requires Embree to be compiled with support for ISPC (EMBREE_ISPC_SUPPORT=ON).
wl-showstatus --package-version
export DEPENDANCIES=embree
export OPTIONALDEPENDANCIES=
export BUILDDEPENDANCIES=cmake,rkcommon
export LICENSEFILE=LICENSE.txt
export LICENSETYPE=Apache
export DOWNLOADURL="https://github.com/ospray/ospray/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/ospray/ospray/archive/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xfz $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd $BASENAME-$VERSION

mkdir -p build_test && cd build_test && cmake.exe -G"MSYS Makefiles" -DEMBREE_ISPC_SUPPORT:BOOL=OFF .. -LH && echo OK; cd ..; rm -rf build_test

#rm -rf CMakeCache.txt CMakeFiles; cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release . -LH && echo OK
#export BUILDDEPENDANCIES=cmake
#PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ 
#wl-showstatus configure &&
#cmake.exe -Wno-dev -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release . &&
# #wl-showstatus build &&
# #make &&
# wl-showstatus build-install &&
# make install/strip &&
#    echo OK

#export BUILDDEPENDANCIES=cmake
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cd build_static &&
# cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF .. &&
# cd .. &&
# wl-showstatus configure &&
# cd build_shared &&
# cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON .. &&
# cd .. &&
# #wl-showstatus build &&
# #make -Cbuild_static &&
# #wl-showstatus build &&
# #make -Cbuild_shared &&
# wl-showstatus build-install &&
# make -Cbuild_static install/strip &&
# wl-showstatus build-install &&
# make -Cbuild_shared install/strip &&
#    echo OK

#export BUILDDEPENDANCIES=meson,ninja
#-Dc_args=$CFLAGS -Dcpp_args=$CXXFLAGS -Dc_link_args=$LDFLAGS
## fix missing gio-unix
#sed -i.bak -e "s/gio-unix-/gio-/" meson.build
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# PKG_CONFIG= PYTHONPATH=$PYTHONPATH:$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library static -D documentation=true . build_static &&
# wl-showstatus configure &&
# PKG_CONFIG= PYTHONPATH=$PYTHONPATH:$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library shared -D documentation=true . build_shared &&
# ## fix slash/backslash path issue when calling Python from Ninja
# #sed -i.bak -e "s/join_paths/os.path.join/g; /COMMAND =.*python\.exe/ s?\"/\([a-zA-Z]\)/?\"\1:/?; /COMMAND =.*python\.exe/ s?/?\\\\?g" build_*/build.ninja &&
# wl-showstatus build-install &&
# #PATH=$PATH:$PYDIR PYTHONPATH=$PYTHONPATH:$MINGWPREFIX/lib ninja -C build_static install &&
# PATH=$PATH:$PYDIR PYTHONPATH=$PYTHONPATH:$MINGWPREFIX/lib ninja -C build_static install/strip &&
# wl-showstatus build-install &&
# #PATH=$PATH:$PYDIR PYTHONPATH=$PYTHONPATH:$MINGWPREFIX/lib ninja -C build_shared install &&
# PATH=$PATH:$PYDIR PYTHONPATH=$PYTHONPATH:$MINGWPREFIX/lib ninja -C build_shared install/strip &&
#    echo OK && find . -name '*.a'

# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




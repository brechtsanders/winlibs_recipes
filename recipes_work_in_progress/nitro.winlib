export NAME="NITRO"
export STATUS=
export URL=https://github.com/mdaus/nitro
export BASENAME=nitro
export DESCRIPTION="NITRO (NITFio, \"R\" is a ligature for \"Fi\") is a full-fledged, extensible library solution for reading and writing the National Imagery Transmission Format (NITF), a U.S. DoD standard format. It is written in cross-platform C, with bindings available for other languages."
export CATEGORY=
export TYPE=library
#export VERSION=2.10.7
#export VERSIONDATE=20220121
export VERSION=2.10.8
export VERSIONDATE=20220224
wl-showstatus --package-version
export DEPENDANCIES=libcurl,boost,pthreads
export OPTIONALDEPENDANCIES=
export BUILDDEPENDANCIES=cmake,ninja
export LICENSEFILE=LICENSE
export LICENSETYPE=LGPL
export DOWNLOADURL="https://github.com/mdaus/nitro/releases NITRO-"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/mdaus/nitro/archive/refs/tags/NITRO-$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xfz $TARBALLDIR/$BASENAME/NITRO-$VERSION.tar.gz
cd nitro-NITRO-$VERSION

#grep -wi add_library $(find -name CMakeLists.txt -or -name '*.cmake')
#mkdir -p build_test && cmake.exe -G"MSYS Makefiles" -S. -Bbuild_test -LH && echo OK; rm -rf build_test

#export BUILDDEPENDANCIES=cmake
#PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ 
#-DCMAKE_SYSTEM_NAME=Windows 
#-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
#mkdir -p build_win &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -S. -Bbuild_win &&
# #wl-showstatus build &&
# #make -Cbuild_win &&
# wl-showstatus build-install &&
# make -Cbuild_win install/strip &&
#    echo OK

#export BUILDDEPENDANCIES=cmake,ninja
#PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ 
#-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
#mkdir -p build_win &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -S. -Bbuild_win &&
# #wl-showstatus build &&
# #ninja -Cbuild_win &&
# wl-showstatus build-install &&
# ninja -Cbuild_win install/strip &&
#    echo OK

#export BUILDDEPENDANCIES=cmake,ninja
mkdir -p build_static build_shared &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DENABLE_BOOST:BOOL=OFF -DENABLE_SWIG:BOOL=OFF -DENABLE_PYTHON:BOOL=OFF -DPYTHON_HOME:PATH=$PYDIR -DPython_EXECUTABLE:PATH=$PYDIR/python.exe -DFETCHCONTENT_FULLY_DISCONNECTED:BOOL=ON -DCODA_BUILD_TESTS:BOOL=OFF -DBOOST_HOME:PATH=$MINGWPREFIX -DCODA_INSTALL_TESTS:BOOL=OFF -S. -Bbuild_static &&
 #-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DENABLE_BOOST:BOOL=OFF -DENABLE_SWIG:BOOL=OFF -DENABLE_PYTHON:BOOL=OFF -DPYTHON_HOME:PATH=$PYDIR -DPython_EXECUTABLE:PATH=$PYDIR/python.exe -DFETCHCONTENT_FULLY_DISCONNECTED:BOOL=ON -DCODA_BUILD_TESTS:BOOL=OFF -DBOOST_HOME:PATH=$MINGWPREFIX -DCODA_INSTALL_TESTS:BOOL=OFF -S. -Bbuild_shared &&
 ## fix execution of Python scripts
 #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|glib-genmarshal\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
 ## fix missing link libraries
 #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lws2_32/" build_win/build.ninja &&
 #wl-showstatus build &&
 #ninja -Cbuild_static &&
 #wl-showstatus build &&
 #ninja -Cbuild_shared &&
 wl-showstatus build-install &&
 ninja -Cbuild_static install/strip &&
 wl-showstatus build-install &&
 ninja -Cbuild_shared install/strip &&
    echo OK

# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf nitro-NITRO-$VERSION




export NAME="TDengine"
export STATUS=
export URL=https://tdengine.com/
#export URL=https://github.com/taosdata/TDengine
export BASENAME=tdengine
export DESCRIPTION="Time-Series Database with SQL support"
export CATEGORY=application
export TYPE=library
#export VERSION=2.6.0.6
#export VERSIONDATE=20220706
#export VERSION=2.6.0.8
#export VERSIONDATE=20220711
#export VERSION=2.6.0.10
#export VERSIONDATE=20220723
#export VERSION=2.6.0.12
#export VERSIONDATE=20220806
#export VERSION=2.6.0.14
#export VERSIONDATE=20220820
#export VERSION=2.6.0.16
#export VERSIONDATE=20220905
#export VERSION=2.6.0.18
#export VERSIONDATE=20220917
#export VERSION=2.6.0.22
#export VERSIONDATE=20221006
#export VERSION=2.6.0.24
#export VERSIONDATE=20221015
#export VERSION=2.6.0.28
#export VERSIONDATE=20221029
#export VERSION=2.6.0.30
#export VERSIONDATE=20221112
#export VERSION=2.6.0.32
#export VERSIONDATE=20221204
#export VERSION=2.6.0.34
#export VERSIONDATE=20221223
#export VERSION=3.0.0.0
#export VERSIONDATE=20220813
#export VERSION=3.0.0.1
#export VERSIONDATE=20220823
#export VERSION=3.0.1.0
#export VERSIONDATE=20220907
#export VERSION=3.0.1.2
#export VERSIONDATE=20220924
#export VERSION=3.0.1.3
#export VERSIONDATE=20220927
#export VERSION=3.0.1.5
#export VERSIONDATE=20221021
#export VERSION=3.0.1.6
#export VERSIONDATE=20221102
#export VERSION=3.0.1.7
#export VERSIONDATE=20221118
#export VERSION=3.0.1.8
#export VERSIONDATE=20221126
#export VERSION=3.0.2.0
#export VERSIONDATE=20221210
#export VERSION=3.0.2.1
#export VERSIONDATE=20221226
#export VERSION=3.0.2.4
#export VERSIONDATE=20230129
#export VERSION=3.0.2.5
#export VERSIONDATE=20230210
#export VERSION=3.0.2.6
#export VERSIONDATE=20230301
#export VERSION=3.0.3.0
#export VERSIONDATE=20230308
#export VERSION=3.0.3.1
#export VERSIONDATE=20230322
#export VERSION=3.0.3.2
#export VERSIONDATE=20230406
#export VERSION=3.0.4.0
#export VERSIONDATE=20230414
export VERSION=3.0.4.1
export VERSIONDATE=20230428
wl-showstatus --package-version
export DEPENDENCIES=gtest
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=AGPL
export DOWNLOADURL="https://github.com/taosdata/TDengine/releases ver-"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/taosdata/TDengine/archive/refs/tags/ver-$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/ver-$VERSION.tar.gz
cd TDengine-ver-$VERSION
# fix cmake/define.inc (version >= 2.6.0.6)
patch -ulbf cmake/define.inc << EOF
@@ -250,3 +250,3 @@
   ENDIF ()
-  IF (NOT TD_GODLL)
+  IF (NOT TD_GODLL AND MSVC)
     SET(COMMON_FLAGS "/nologo /wd4018 /wd4999 /Oi /Oy- /Gm- /EHsc /MT /GS /Gy /fp:precise /Zc:wchar_t /Zc:forScope /Gd /errorReport:prompt /analyze-")
EOF
## fix platform detection in contrib/pthread/cmake/target_arch.cmake (version >= 3.0.0.0)
#patch -ulbf contrib/pthread/cmake/target_arch.cmake << EOF
#@@ -9,5 +9,5 @@
#             return 4;
#-        #elif defined(_M_X64)
#+        #elif defined(_M_X64) || defined(_WIN64)
#             return 5;
#-        #elif defined(_M_IX86)
#+        #elif defined(_M_IX86) || defined(_WIN32)
#             return 6;
#EOF
# fix contrib/pthread/CMakeLists.txt (version >= 3.0.1.0)
patch -ulbf contrib/pthread/CMakeLists.txt << EOF
@@ -124,3 +124,3 @@
     if(\${type} STREQUAL "VCE" OR \${type} STREQUAL "VSE")
-        set_target_properties(\${targ} PROPERTIES COMPILE_FLAGS \${VCEFLAGS})
+        set_target_properties(\${targ} PROPERTIES COMPILE_FLAGS "\${VCEFLAGS}")     endif()
@@ -146,3 +146,3 @@
     if(\${type} STREQUAL "VCE" OR \${type} STREQUAL "VSE")
-        set_target_properties(\${targ} PROPERTIES COMPILE_FLAGS \${VCEFLAGS})
+        set_target_properties(\${targ} PROPERTIES COMPILE_FLAGS "\${VCEFLAGS}")     endif()
EOF
# fix cmake/cmake.define (version >= 3.0.1.0)
patch -ulbf cmake/cmake.define << EOF
@@ -81,4 +81,8 @@
     MESSAGE("\${Yellow} set compiler flag for Windows! \${ColourReset}")
+   IF (MSVC)
     SET(COMMON_FLAGS "/w /D_WIN32 /DWIN32 /Zi /MTd")
     SET(CMAKE_EXE_LINKER_FLAGS "\${CMAKE_EXE_LINKER_FLAGS} /MANIFEST:NO")
+   ELSE()
+    SET(COMMON_FLAGS "-D_WIN32 -DWIN32")
+   ENDIF()
     # IF (MSVC AND (MSVC_VERSION GREATER_EQUAL 1900))
EOF
# force platform detection in contrib/pthread/cmake/target_arch.cmake (version >= 3.0.1.0)
patch -ulbf contrib/pthread/cmake/target_arch.cmake << EOF
@@ -40,3 +40,3 @@
     else()
-        set(\${out} "unknown" PARENT_SCOPE)
+        set(\${out} "$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "x86_64"; else echo "x86"; fi)" PARENT_SCOPE)
     endif()
EOF
mkdir -p build_win &&
 wl-showstatus configure &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_PTHREAD:BOOL=OFF -S. -Bbuild_win &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_PTHREAD:BOOL=OFF -DCMAKE_C_FLAGS:STRING="-DALLOW_FORBID_FUNC" -DCMAKE_CXX_FLAGS:STRING="-DALLOW_FORBID_FUNC" -S. -Bbuild_win &&
 #wl-showstatus build &&
 #ninja -Cbuild_win &&
 wl-showstatus build-install &&
 ninja -Cbuild_win install/strip &&
    echo OK

#export BUILDDEPENDENCIES=cmake,ninja
#export OPTIONALBUILDDEPENDENCIES=
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -S. -Bbuild_static &&
# #-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -S. -Bbuild_shared &&
# ## fix execution of Python scripts
# #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|glib-genmarshal\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
# ## fix missing link libraries
# #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lws2_32/" build_shared/build.ninja &&
# #wl-showstatus build &&
# #ninja -Cbuild_static &&
# #wl-showstatus build &&
# #ninja -Cbuild_shared &&
# wl-showstatus build-install &&
# ninja -Cbuild_static install/strip &&
# wl-showstatus build-install &&
# ninja -Cbuild_shared install/strip &&
#    echo OK

#-DCMAKE_BUILD_TYPE:STRING=MinSizeRel

#export BUILDDEPENDENCIES=meson,ninja
#export OPTIONALBUILDDEPENDENCIES=
#-Dc_args=$CFLAGS -Dcpp_args=$CXXFLAGS -Dc_link_args=$LDFLAGS
## fix missing gio-unix
#sed -i.bak -e "s/gio-unix-/gio-/" meson.build
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library static -D documentation=true . build_static &&
# wl-showstatus configure &&
# PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library shared -D documentation=true . build_shared &&
# ## fix slash/backslash path issue when calling Python from Ninja
# #sed -i.bak -e "s/join_paths/os.path.join/g; /COMMAND =.*python\.exe/ s?\"/\([a-zA-Z]\)/?\"\1:/?; /COMMAND =.*python\.exe/ s?/?\\\\?g" build_*/build.ninja &&
# ## add linker flag
# #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*-ladvapi32/& -Wl,--as-needed/" build_shared/build.ninja &&
# ## add linker flag
# #sed -i.bak -e "s/^\s*LINK_ARGS\s*=.*\"-ladvapi32\"/& \"-Wl,--as-needed\"/" build_shared/build.ninja &&
# wl-showstatus build-install &&
# #PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -C build_static install &&
# PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -C build_static install/strip &&
# wl-showstatus build-install &&
# #PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -C build_shared install &&
# PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -C build_shared install/strip &&
#    echo OK && find . -name '*.a'

#export BUILDDEPENDENCIES=meson,ninja
#export OPTIONALBUILDDEPENDENCIES=
#-Dc_args=$CFLAGS -Dcpp_args=$CXXFLAGS -Dc_link_args=$LDFLAGS
## fix location of Perl
#sed -i.bak -e "s?'perl'?'$(cygpath -w $PERLDIR/bin/perl.exe|sed -e 's/\\/&&&&/g')'?" meson.build
## fix detection of Python
#sed -i.bak -e "s?'python3'?'$(cygpath -w $PYDIR/python.exe|sed -e 's/\\/&&&&/g')'?" meson.build
## fix missing gio-unix
##sed -i.bak -e "s/gio-unix-/gio-/" meson.build
#sed -i.bak -e "s/gio-unix-/gio-windows-/" meson.build
#mkdir -p build_both &&
# wl-showstatus configure &&
# PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Ddocumentation=true . build_both &&
# ## fix slash/backslash path issue when calling Python from Ninja
# #sed -i.bak -e "s/join_paths/os.path.join/g; /COMMAND =.*python\.exe/ s?\"/\([a-zA-Z]\)/?\"\1:/?; /COMMAND =.*python\.exe/ s?/?\\\\?g" build_*/build.ninja &&
# ## fix Python path issues in meson_exe
# #sed -i.bak -e "s?$PYDIR?$(echo $PYDIR|sed -e "s?^/\([a-zA-Z]\)/?\1:/?")?" build_both/meson-private/meson_exe_python.exe_*.dat &&
# ## fix execution of Python scripts
# #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *= *\| *=.*\&\& *\)\(\"\{0,1\}[^ ]*\)\(\.py\|glib-mkenums\|g-ir-scanner\|asciidoc\)\(\"\{0,1\} \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_both/build.ninja &&
# ## fix executing shell scripts
# #sed -i.bak -e "s?^\(\s*COMMAND\s*=\s*\)\(\"[^\"]*\.sh\"\)?\1\"$(cygpath -m $(which sh.exe))\" \2?" build_both/build.ninja &&
# wl-showstatus build-install &&
# PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -Cbuild_both install/strip &&
# #PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -Cbuild_both install &&
# #PATH=$PERLDIR/../c/bin:$PERLDIR/bin:$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -Cbuild_both install &&
#    echo OK && find . -name '*.a'

#wl-showstatus install &&
# mkdir -p $INSTALLPREFIX/python/Lib/site-packages &&
# PYTHONPATH=$INSTALLPREFIX/python/Lib/site-packages:$MINGWPREFIX/python/Lib/site-packages $PYDIR/python setup.py install --prefix=$(cygpath.exe -w $INSTALLPREFIX/python) &&
#    echo OK

#export DEPENDENCIES=qt
#wl-showstatus configure &&
# $MINGWPREFIX/qt/bin/qmake -makefile *.pro -spec $MINGWPREFIX/qt/mkspecs/win32-g++ &&
# wl-showstatus build &&
# mingw32-make &&
#    echo OK

#export DEPENDENCIES=qt
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cd build_static &&
# $MINGWPREFIX/qt/bin/qmake -makefile ../*.pro -spec $MINGWPREFIX/qt/mkspecs/win32-g++ CONFIG+=staticlib &&
# cd .. &&
# wl-showstatus configure &&
# cd build_shared &&
# $MINGWPREFIX/qt/bin/qmake -makefile ../*.pro -spec $MINGWPREFIX/qt/mkspecs/win32-g++ &&
# cd .. &&
# wl-showstatus build &&
# mingw32-make -Cbuild_static &&
# wl-showstatus build &&
# mingw32-make -Cbuild_shared &&
#    echo OK

#mkdir -p $INSTALLPREFIX/python/Lib/site-packages
#wl-showstatus build-install &&
# PATH=$PYDIR:$PATH PYTHON=$PYDIR/python.exe PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/python/Lib/site-packages:$INSTALLPREFIX/python:$PYDIR/Lib/site-packages:$INSTALLPREFIX/python/Lib/site-packages $PYDIR/python.exe setup.py install --prefix=$(cygpath -w $INSTALLPREFIX/python) &&
# ## delete any __pycache__ folder(s)
# #find $INSTALLPREFIX -name __pycache__ -exec echo rm -rf {} \; | sh &&
#    echo OK

# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf TDengine-ver-$VERSION




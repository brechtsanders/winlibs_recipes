export NAME="libmsntp"
export STATUS=
export URL=https://snarfed.org/libmsntp
#export URL=https://github.com/snarfed/libmsntp
export BASENAME=libmsntp
export DESCRIPTION="libmsntp is a full-featured, compact, portable SNTP library. (SNTP is a simplified version of NTP.)"
export CATEGORY=communication
export TYPE=library
export VERSION=master
export VERSIONDATE=20240926
wl-showstatus --package-version
export DEPENDENCIES=
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=GPL
export DOWNLOADURL="https://github.com/snarfed/libmsntp/tags"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/snarfed/libmsntp/archive/refs/heads/$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/$VERSION.tar.gz
cd $BASENAME-$VERSION
# fix missing files
mkdir -p winfix/sys winfix/netinet winfix/arpa
echo "#include <winsock2.h>" > winfix/sys/socket.h
echo "#include <winsock2.h>" > winfix/netinet/in.h
touch winfix/netdb.h winfix/arpa/inet.h
cat > winfix/syslog.h << EOF
#define syslog(...)
EOF
# fix setting non-blocking mode in socket.c
patch -ulbf socket.c << EOF
@@ -227,3 +227,8 @@
     char buffer[256];
-    int flags, total = 0, k;
+#ifdef _WIN32
+    unsigned long flags;
+#else
+    int flags;
+#endif
+    int total = 0, k;

@@ -239,4 +244,9 @@
     errno = 0;
+#ifdef _WIN32
+    flags = ~0;
+    if (ioctlsocket(descriptors[which], FIONBIO, &flags) != 0) {
+#else
     if ((flags = fcntl(descriptors[which],F_GETFL,0)) < 0 ||
         fcntl(descriptors[which],F_SETFL,flags|O_NONBLOCK) == -1) {
+#endif
         fatal(errno,"unable to set non-blocking mode",NULL);
@@ -258,3 +268,8 @@
     errno = 0;
+#ifdef _WIN32
+    flags = 0;
+    if (ioctlsocket(descriptors[which], FIONBIO, &flags) != 0) {
+#else
     if (fcntl(descriptors[which],F_SETFL,flags) == -1) {
+#endif
         fatal(errno,"unable to restore blocking mode",NULL);
EOF
# fix timing.c (version >= master)
patch -ulbf timing.c << EOF
@@ -95,2 +95,6 @@
             (long)adjust.tv_sec,(long)adjust.tv_usec);
+#ifdef _WIN32
+    fatal(errno,"setting current system time not implemented yet on Windows",NULL);
+    return -1;
+#else
     if (immediate) {
@@ -119,2 +123,3 @@
     }
+#endif
 }
EOF
# fix unix.c (version >= master)
patch -ulbf unix.c << EOF
@@ -49,2 +49,3 @@

+#ifndef _WIN32
     FILE *file;
@@ -74,2 +75,3 @@
     }
+#endif
 }
EOF
# fix example.c (version >= master)
patch -ulbf example.c << EOF
@@ -23,2 +23,5 @@
 #include <time.h>
+#ifdef _WIN32
+#include <windows.h>
+#endif

@@ -66,2 +69,12 @@
 int main(int argc, char **argv) {
+#ifdef __WIN32__
+  //initialize WINSOCK
+  static WSADATA wsaData;
+  int wsaerr = WSAStartup(MAKEWORD(1, 0), &wsaData);
+  if (wsaerr) {
+    fprintf(stderr, "WSAStartup failed\\n");
+    return 1;
+  }
+  atexit((void(*)())WSACleanup);
+#endif
   int port, ret;
EOF
wl-showstatus build &&
 make CC=${CC:-gcc} CFLAGS="-O2 -I$PWD/winfix -DADJTIME_MISSING -D_POSIX -D__USE_MINGW_ALARM" LDFLAGS="-lws2_32" &&
 #make CC=${CC:-gcc} CXX=${CXX:-g++} LD=${LD:-ld} AR=${AR:-ar} &&
    echo OK
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




export NAME="Mozilla Firefox"
export STATUS=
export URL=https://www.mozilla.org/en-US/firefox/
export BASENAME=firefox
export DESCRIPTION="Firefox web browser"
export CATEGORY=communication
export TYPE=application
export VERSION=102.0.1
export VERSIONDATE=20220705
wl-showstatus --package-version
export DEPENDENCIES=
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=COPYING
#export LICENSEFILE=LICENSE
export LICENSETYPE=
export DOWNLOADURL="https://hg.mozilla.org/releases/mozilla-release/log?rev=reviewer(release)"
#export DOWNLOADURL="https://hg.mozilla.org/releases/mozilla-release/tags"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://hg.mozilla.org/releases/mozilla-release/archive/d88e3dd9e94e7eb984988ea0a621fb05c405cd09.zip    # version 102.0.1
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
mkdir $BASENAME-$VERSION
unzip -oq $TARBALLDIR/$BASENAME/d88e3dd9e94e7eb984988ea0a621fb05c405cd09.zip -d$BASENAME-$VERSION
cd $BASENAME-$VERSION/mozilla-release-*
mkdir -p build_win &&
 wl-showstatus configure &&
 cd build_win &&
 $PYDIR/python.exe ../configure.py --prefix=$INSTALLPREFIX --host=$BUILDPLATFORM --target=$RUNPLATFORM PERL=$PERLDIR/bin/perl.exe &&
 cd .. &&
    echo OK

wl-showstatus build &&
 MOZBUILD_STATE_PATH=$PWD/.mozbuild $PYDIR/python.exe mach build &&
    echo OK

#export BUILDDEPENDENCIES=meson,ninja
#export OPTIONALBUILDDEPENDENCIES=
#-Dc_args=$CFLAGS -Dcpp_args=$CXXFLAGS -Dc_link_args=$LDFLAGS
## fix missing gio-unix
#sed -i.bak -e "s/gio-unix-/gio-/" meson.build
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library static -D documentation=true . build_static &&
# wl-showstatus configure &&
# PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library shared -D documentation=true . build_shared &&
# ## fix slash/backslash path issue when calling Python from Ninja
# #sed -i.bak -e "s/join_paths/os.path.join/g; /COMMAND =.*python\.exe/ s?\"/\([a-zA-Z]\)/?\"\1:/?; /COMMAND =.*python\.exe/ s?/?\\\\?g" build_*/build.ninja &&
# ## add linker flag
# #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*-ladvapi32/& -Wl,--as-needed/" build_shared/build.ninja &&
# ## add linker flag
# #sed -i.bak -e "s/^\s*LINK_ARGS\s*=.*\"-ladvapi32\"/& \"-Wl,--as-needed\"/" build_shared/build.ninja &&
# wl-showstatus build-install &&
# #PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -C build_static install &&
# PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -C build_static install/strip &&
# wl-showstatus build-install &&
# #PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -C build_shared install &&
# PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -C build_shared install/strip &&
#    echo OK && find . -name '*.a'

#export BUILDDEPENDENCIES=meson,ninja
#export OPTIONALBUILDDEPENDENCIES=
#-Dc_args=$CFLAGS -Dcpp_args=$CXXFLAGS -Dc_link_args=$LDFLAGS
## fix location of Perl
#sed -i.bak -e "s?'perl'?'$(cygpath -w $PERLDIR/bin/perl.exe|sed -e 's/\\/&&&&/g')'?" meson.build
## fix detection of Python
#sed -i.bak -e "s?'python3'?'$(cygpath -w $PYDIR/python.exe|sed -e 's/\\/&&&&/g')'?" meson.build
## fix missing gio-unix
##sed -i.bak -e "s/gio-unix-/gio-/" meson.build
#sed -i.bak -e "s/gio-unix-/gio-windows-/" meson.build
mkdir -p build_both &&
 wl-showstatus configure &&
 PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Dselinux=false -Dpam=false -Dacl=false -Daudit=false -Dtests=false -Dman=false -Dhtml=false . build_both &&
 ## fix slash/backslash path issue when calling Python from Ninja
 #sed -i.bak -e "s/join_paths/os.path.join/g; /COMMAND =.*python\.exe/ s?\"/\([a-zA-Z]\)/?\"\1:/?; /COMMAND =.*python\.exe/ s?/?\\\\?g" build_*/build.ninja &&
 ## fix Python path issues in meson_exe
 #sed -i.bak -e "s?$PYDIR?$(echo $PYDIR|sed -e "s?^/\([a-zA-Z]\)/?\1:/?")?" build_both/meson-private/meson_exe_python.exe_*.dat &&
 ## fix execution of Python scripts
 #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *= *\| *=.*\&\& *\)\(\"\{0,1\}[^ ]*\)\(\.py\|glib-mkenums\|g-ir-scanner\|asciidoc\)\(\"\{0,1\} \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_both/build.ninja &&
 ## fix executing shell scripts
 #sed -i.bak -e "s?^\(\s*COMMAND\s*=\s*\)\(\"[^\"]*\.sh\"\)?\1\"$(cygpath -m $(which sh.exe))\" \2?" build_both/build.ninja &&
 wl-showstatus build-install &&
 PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -Cbuild_both install/strip &&
 #PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -Cbuild_both install &&
 #PATH=$PERLDIR/../c/bin:$PERLDIR/bin:$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -Cbuild_both install &&
    echo OK && find . -name '*.a'

#wl-showstatus install &&
# mkdir -p $INSTALLPREFIX/python/Lib/site-packages &&
# PYTHONPATH=$INSTALLPREFIX/python/Lib/site-packages:$MINGWPREFIX/python/Lib/site-packages $PYDIR/python setup.py install --prefix=$(cygpath.exe -w $INSTALLPREFIX/python) &&
#    echo OK

#export DEPENDENCIES=qt
#wl-showstatus configure &&
# $MINGWPREFIX/qt/bin/qmake -makefile *.pro -spec $MINGWPREFIX/qt/mkspecs/win32-g++ &&
# wl-showstatus build &&
# mingw32-make &&
#    echo OK

#export DEPENDENCIES=qt
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cd build_static &&
# $MINGWPREFIX/qt/bin/qmake -makefile ../*.pro -spec $MINGWPREFIX/qt/mkspecs/win32-g++ CONFIG+=staticlib &&
# cd .. &&
# wl-showstatus configure &&
# cd build_shared &&
# $MINGWPREFIX/qt/bin/qmake -makefile ../*.pro -spec $MINGWPREFIX/qt/mkspecs/win32-g++ &&
# cd .. &&
# wl-showstatus build &&
# mingw32-make -Cbuild_static &&
# wl-showstatus build &&
# mingw32-make -Cbuild_shared &&
#    echo OK

#mkdir -p $INSTALLPREFIX/python/Lib/site-packages
#wl-showstatus build-install &&
# PATH=$PYDIR:$PATH PYTHON=$PYDIR/python.exe PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/python/Lib/site-packages:$INSTALLPREFIX/python:$PYDIR/Lib/site-packages:$INSTALLPREFIX/python/Lib/site-packages $PYDIR/python.exe setup.py install --prefix=$(cygpath -w $INSTALLPREFIX/python) &&
# ## delete any __pycache__ folder(s)
# #find $INSTALLPREFIX -name __pycache__ -exec echo rm -rf {} \; | sh &&
#    echo OK

# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd ../.. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




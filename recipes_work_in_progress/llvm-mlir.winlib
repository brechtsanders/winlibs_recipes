export NAME="LLVM MLIR"
export STATUS=
export URL=https://llvm.org/
export BASENAME=llvm-mlir
export DESCRIPTION="The LLVM Compiler Infrastructure - The MLIR subproject is a novel approach to building reusable and extensible compiler infrastructure. MLIR aims to address software fragmentation, improve compilation for heterogeneous hardware, significantly reduce the cost of building domain specific compilers, and aid in connecting existing compilers together."
export CATEGORY=development
export TYPE=application
#export VERSION=16.0.0
#export VERSIONDATE=20230318
#export VERSION=16.0.6
#export VERSIONDATE=20230725
#export VERSION=17.0.1
#export VERSIONDATE=20230919
#export VERSION=17.0.2
#export VERSIONDATE=20231013
#export VERSION=17.0.3
#export VERSIONDATE=20231021
export VERSION=18.1.1
export VERSIONDATE=20240313
#export VERSION=18.1.6
#export VERSIONDATE=20240519
wl-showstatus --package-version
export DEPENDENCIES=llvm-core,zlib,zstd,libxml2,libffi,libcurl
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja,llvm-cmake,llvm-clang
export OPTIONALBUILDDEPENDENCIES=doxygen
export LICENSEFILE=LICENSE.TXT
export LICENSETYPE=Apache
export DOWNLOADURL="https://github.com/llvm/llvm-project/releases/ mlir-"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/llvm/llvm-project/releases/download/llvmorg-$(echo $VERSION|sed -e "s/rc/-&/")/mlir-$VERSION.src.tar.xz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xJ --force-local -f $TARBALLDIR/$BASENAME/mlir-$VERSION.src.tar.xz
cd mlir-$VERSION.src
## fix CMakeLists.txt (version >= 16.0.0rc2)
#sed -i.bak2 -e "s?\(set(LLVM_COMMON_CMAKE_UTILS \)\${CMAKE_CURRENT_SOURCE_DIR}/../cmake?\1$(cygpath -m $MINGWPREFIX/share/llvm-split/share/cmake)?" CMakeLists.txt
mkdir -p build_win &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm-split -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
  -DCMAKE_MODULE_PATH:PATH=$MINGWPREFIX/share/llvm-split/share/cmake/Modules \
  -DLLVM_DIR:PATH=$MINGWPREFIX/share/llvm-split/lib/cmake/llvm \
  -DLLVM_COMMON_CMAKE_UTILS:PATH=$MINGWPREFIX/share/llvm-split/share/cmake \
  -DBUILD_SHARED_LIBS:BOOL=OFF \
  -DMLIR_BUILD_MLIR_C_DYLIB:BOOL=ON \
  -DMLIR_INCLUDE_TESTS:BOOL=OFF \
  -DCMAKE_C_VISIBILITY_PRESET:STRING=hidden \
  -DCMAKE_CXX_VISIBILITY_PRESET:STRING=hidden \
  -DCMAKE_C_COMPILER:FILEPATH=$MINGWPREFIX/share/llvm-split/bin/clang.exe \
  -DCMAKE_C_COMPILER_AR:FILEPATH=$MINGWPREFIX/share/llvm-split/bin/llvm-ar.exe \
  -DCMAKE_C_COMPILER_RANLIB:FILEPATH=$MINGWPREFIX/share/llvm-split/bin/llvm-ranlib.exe \
  -DCMAKE_CXX_COMPILER:FILEPATH=$MINGWPREFIX/share/llvm-split/bin/clang++.exe \
  -DCMAKE_CXX_COMPILER_AR:FILEPATH=$MINGWPREFIX/share/llvm-split/bin/llvm-ar.exe \
  -DCMAKE_CXX_COMPILER_RANLIB:FILEPATH=$MINGWPREFIX/share/llvm-split/bin/llvm-ranlib.exe \
  -S. -Bbuild_win &&
 # -DFLANG_STANDALONE_BUILD:BOOL=ON \
 # -DLLVM_TABLEGEN:STRING=$MINGWPREFIX/share/llvm-split/bin/llvm-tblgen.exe \
 ## fix missing link libraries
 #sed -i.bak -e "s?^\s*LINK_LIBRARIES\s*=.*\$?& -Wl,--as-needed -L$(cygpath -m $MINGWPREFIX/share/llvm-split/lib) -lLLVMTableGen -lLLVMSupport?" build_win/build.ninja &&
 wl-showstatus build-install &&
 PATH=$MINGWPREFIX/share/llvm-split/bin:$PATH ninja -Cbuild_win install/strip &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf mlir-$VERSION.src




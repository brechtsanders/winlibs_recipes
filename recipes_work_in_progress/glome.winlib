export NAME="GLOME"
export STATUS=
export URL=https://github.com/google/glome
export BASENAME=glome
export DESCRIPTION="Generic Low Overhead Message Exchange (GLOME) is a protocol providing secure authentication and authorization for low dependency environments."
export CATEGORY=security
export TYPE=library
#export VERSION=master
#export VERSIONDATE=20210714
#export VERSION=0.1
#export VERSIONDATE=20231015
#export VERSION=0.2
#export VERSIONDATE=20250322
export VERSION=0.3.0
export VERSIONDATE=20250622
wl-showstatus --package-version
export DEPENDENCIES=
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=meson,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=COPYING
#export LICENSEFILE=LICENSE
export LICENSETYPE=
export DOWNLOADURL="https://github.com/google/glome/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://github.com/google/glome/archive/refs/heads/$VERSION.tar.gz
export DOWNLOADSOURCEURL=https://github.com/google/glome/archive/refs/tags/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
#tar xz --force-local -f $TARBALLDIR/$BASENAME/$VERSION.tar.gz
tar xz --force-local -f $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd $BASENAME-$VERSION
# fix missing strndup in cli/commands.c (version >= 0.2)
mv cli/commands.c cli/commands.c.bak
cat >> cli/commands.c << EOF
#include <malloc.h>
#include <string.h>
#define strndup MY_strndup
inline char* strndup (const char* s, size_t n)
{
  char* result;
  size_t len = strlen(s);
  if (len > n)
    len = n;
  result = (char*)malloc(len + 1);
  if (!result)
    return 0;
  result[len] = 0;
  return (char*)memcpy(result, s, len);
}
EOF
cat cli/commands.c.bak >> cli/commands.c
# fix missing stpcpy in login/crypto.c (version >= 0.2)
mv login/crypto.c login/crypto.c.bak
cat >> login/crypto.c << EOF
#include <malloc.h>
#include <string.h>
#define stpcpy MY_stpcpy
inline char* stpcpy (char *dest, const char *src)
{
  register char *d = dest;
  register const char *s = src;
  do
    *d++ = *s;
  while (*s++);
  return (d - 1);
}
EOF
cat login/crypto.c.bak >> login/crypto.c

# fix login/login.c (version >= 0.2)
patch -ulbf login/login.c << EOF
@@ -20,3 +20,8 @@
 #include <limits.h>
+#ifdef _WIN32
+#include <winsock2.h>
+#include <ws2tcpip.h>
+#else
 #include <netdb.h>
+#endif
 #include <openssl/crypto.h>
@@ -28,5 +33,11 @@
 #include <string.h>
+#ifndef _WIN32
 #include <sys/socket.h>
+#endif
 #include <sys/types.h>
+#ifdef _WIN32
+#define syslog(...)
+#else
 #include <syslog.h>
+#endif
 #include <time.h>
EOF
# fix login/main.c (version >= 0.2)
patch -ulbf login/main.c << EOF
@@ -15,3 +15,8 @@
 #include <stdlib.h>
+#ifdef _WIN32
+#define openlog(...)
+#define syslog(...)
+#else
 #include <syslog.h>
+#endif
 #include <unistd.h>
EOF
mkdir -p build_both &&
 wl-showstatus configure &&
 #PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Dtests=disabled . build_both &&
 PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Dglome-cli=true -Dpam-glome=false -Dtests=false . build_both &&
 ## fix slash/backslash path issue when calling Python from Ninja
 #sed -i.bak -e "s/join_paths/os.path.join/g; /COMMAND =.*python\.exe/ s?\"/\([a-zA-Z]\)/?\"\1:/?; /COMMAND =.*python\.exe/ s?/?\\\\?g" build_*/build.ninja &&
 ## fix Python path issues in meson_exe
 #sed -i.bak -e "s?$PYDIR?$(echo $PYDIR|sed -e "s?^/\([a-zA-Z]\)/?\1:/?")?" build_both/meson-private/meson_exe_python.exe_*.dat &&
 ## fix execution of Python scripts
 #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *= *\| *=.*\&\& *\)\(\"\{0,1\}[^ ]*\)\(\.py\|glib-mkenums\|g-ir-scanner\|asciidoc\)\(\"\{0,1\} \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_both/build.ninja &&
 ## fix executing shell scripts
 #sed -i.bak -e "s?^\(\s*COMMAND\s*=\s*\)\(\"[^\"]*\.sh\"\)?\1\"$(cygpath -m $(which sh.exe))\" \2?" build_both/build.ninja &&
 wl-showstatus build-install &&
 PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib ninja -Cbuild_both install &&
 #PATH=$PERLDIR/../c/bin:$PERLDIR/bin:$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib ninja -Cbuild_both install &&
    echo OK && find . -name '*.a'
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




export NAME="llvm"
export STATUS=
export URL=https://llvm.org/
export BASENAME=llvm
export DESCRIPTION="The LLVM Project is a collection of modular and reusable compiler and toolchain technologies."
export CATEGORY=development
export TYPE=application
#export VERSION=3.4
#export VERSIONDATE=20140108
#export VERSION=3.4.1
#export VERSIONDATE=20140508
#export VERSION=3.4.2
#export VERSIONDATE=20140616
#export VERSION=3.5.0
#export VERSIONDATE=20140904
#export DEPENDENCIES=pthreads,zlib,libffi
#export VERSION=3.5.1
#export VERSIONDATE=20150113
#export VERSION=3.5.2
#export VERSIONDATE=20150403
#export VERSION=3.6.0
#export VERSIONDATE=20150228
#export VERSION=3.6.1
#export VERSIONDATE=20150525
#export VERSION=3.6.2
#export VERSIONDATE=20150714
#export VERSION=3.7.0
#export VERSIONDATE=20150902
#export VERSION=3.7.1
#export VERSIONDATE=20160105
#export VERSION=3.8.0
#export VERSIONDATE=20160309
#export VERSION=3.8.1
#export VERSIONDATE=20160711
#export VERSION=3.9.0
#export VERSIONDATE=20160905
#export VERSION=3.9.1
#export VERSIONDATE=20161218
#export VERSION=4.0.0
#export VERSIONDATE=20170314
#export VERSION=4.0.1
#export VERSIONDATE=20170625
#export VERSION=5.0.0
#export VERSIONDATE=20170909
#export VERSION=5.0.1
#export VERSIONDATE=20171220
#export VERSION=5.0.2
#export VERSIONDATE=20180703
#export VERSION=6.0.0
#export VERSIONDATE=20180318
#export VERSION=6.0.1
#export VERSIONDATE=20180703
####include/llvm/Support/ManagedStatic.h:67:34: error: '_mm_mfence' is not a member of 'llvm::sys'
#export VERSION=7.0.0
#export VERSIONDATE=20181029
#export VERSION=7.0.1
#export VERSIONDATE=20181230
#export VERSION=7.1.0
#export VERSIONDATE=20190502
#export VERSION=8.0.0
#export VERSIONDATE=20190401
#export VERSION=8.0.1
#export VERSIONDATE=20190818
#export DEPENDENCIES=pthreads,zlib,libxml2,libffi,isl
#export OPTIONALDEPENDENCIES=udis86,graphviz
#export BUILDDEPENDENCIES=cmake
#export OPTIONALBUILDDEPENDENCIES=
#export VERSION=9.0.0
#export VERSIONDATE=20190930
#export VERSION=9.0.1
#export VERSIONDATE=20200224
#export VERSION=10.0.0
#export VERSIONDATE=20200326
#export VERSION=10.0.1
#export VERSIONDATE=20200804
#export VERSION=11.0.0
#export VERSIONDATE=20201012
export VERSION=11.1.0
export VERSIONDATE=20210408
#export VERSION=12.0.0
#export VERSIONDATE=20210419
#export VERSION=13.0.0
#export VERSIONDATE=20211212
#export VERSION=13.0.1
#export VERSIONDATE=20220214
wl-showstatus --package-version
export DEPENDENCIES=pthreads,zlib,libxml2,libffi,isl,z3
export OPTIONALDEPENDENCIES=udis86,graphviz
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE.TXT
export LICENSETYPE=
#export DOWNLOADURL="http://llvm.org/releases/download.html llvm- .src.tar.gz"
#export DOWNLOADURL="http://llvm.org/releases/download.html llvm- .src.tar.xz"
export DOWNLOADURL="https://github.com/llvm/llvm-project/releases llvm- .src.tar.xz"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL="http://llvm.org/releases/$(echo $VERSION|sed -e "s/^\([0-9]*\.[0-9]*\)\.*$/\1/")/llvm-$VERSION.src.tar.gz http://llvm.org/releases/$(echo $VERSION|sed -e "s/^\([0-9]*\.[0-9]*\)\.*$/\1/")/clang-$VERSION.src.tar.gz http://llvm.org/releases/$(echo $VERSION|sed -e "s/^\([0-9]*\.[0-9]*\)\.*$/\1/")/lld-$VERSION.src.tar.gz http://llvm.org/releases/$(echo $VERSION|sed -e "s/^\([0-9]*\.[0-9]*\)\.*$/\1/")/polly-$VERSION.src.tar.gz http://llvm.org/releases/$(echo $VERSION|sed -e "s/^\([0-9]*\.[0-9]*\)\.*$/\1/")/lldb-$VERSION.src.tar.gz http://llvm.org/releases/$(echo $VERSION|sed -e "s/^\([0-9]*\.[0-9]*\)\.*$/\1/")/compiler-rt-$VERSION.src.tar.gz http://llvm.org/releases/$(echo $VERSION|sed -e "s/^\([0-9]*\.[0-9]*\)\.*$/\1/")/libcxx-$VERSION.src.tar.gz"
#export DOWNLOADSOURCEURL=http://llvm.org/releases/$(echo $VERSION|sed -e "s/^\([0-9]*\.[0-9]*\)\.*$/\1/")/llvm-$VERSION.src.tar.gz
#export DOWNLOADSOURCEURL=http://llvm.org/releases/$(echo $VERSION|sed -e "s/^\([0-9]*\.[0-9]*\)\.*$/\1/")/llvm-$VERSION.src.tar.xz
export DOWNLOADSOURCEURL=https://github.com/llvm/llvm-project/releases/download/llvmorg-$VERSION/$BASENAME-$VERSION.src.tar.xz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
#tar xfzh $TARBALLDIR/$BASENAME/clang-$VERSION.src.tar.gz -C $BASENAME-$VERSION/tools &&
#tar xfzh $TARBALLDIR/$BASENAME/lld-$VERSION.src.tar.gz -C $BASENAME-$VERSION/tools &&
#tar xfzh $TARBALLDIR/$BASENAME/polly-$VERSION.src.tar.gz -C $BASENAME-$VERSION/tools &&
#tar xfzh $TARBALLDIR/$BASENAME/lldb-$VERSION.src.tar.gz -C $BASENAME-$VERSION/tools &&
#tar xfzh $TARBALLDIR/$BASENAME/compiler-rt-$VERSION.src.tar.gz -C $BASENAME-$VERSION/projects &&
#tar xfzh $TARBALLDIR/$BASENAME/libcxx-$VERSION.src.tar.gz -C $BASENAME-$VERSION/projects
#tar xfz $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.src.tar.gz
tar xfJ $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.src.tar.xz
#cd $BASENAME-$VERSION
cd $BASENAME-$VERSION.src
# fix undeclared _fpclass in lib/Support/raw_ostream.cpp
patch -ulbf lib/Support/raw_ostream.cpp << EOF
--- lib/Support/raw_ostream.cpp	(revision 177848)
+++ lib/Support/raw_ostream.cpp	(working copy)
@@ -222,7 +222,7 @@
 }
 
 raw_ostream &raw_ostream::operator<<(double N) {
-#ifdef _WIN32
+#if defined(_WIN32) && !defined(__MINGW32__) && !defined(__MINGW64__)
   // On MSVCRT and compatible, output of %e is incompatible to Posix
   // by default. Number of exponent digits should be at least 2. "%+03d"
   // FIXME: Implement our formatter to here or Support/Format.h!
EOF
# fix already define IN in utils/TableGen/CodeEmitterGen.cpp (version >= 3.6.0)
patch -ulbf utils/TableGen/CodeEmitterGen.cpp << EOF
--- utils/TableGen/CodeEmitterGen.cpp  2014-09-03 00:28:02.000000000 +0200
+++ utils/TableGen/CodeEmitterGen.cpp  2015-05-13 14:31:05.725258900 +0200
@@ -241,6 +241,6 @@
   for (std::vector<const CodeGenInstruction*>::const_iterator
-          IN = NumberedInstructions.begin(),
-          EN = NumberedInstructions.end();
-       IN != EN; ++IN) {
-    const CodeGenInstruction *CGI = *IN;
+          IT_IN = NumberedInstructions.begin(),
+          IT_EN = NumberedInstructions.end();
+       IT_IN != IT_EN; ++IT_IN) {
+    const CodeGenInstruction *CGI = *IT_IN;
     Record *R = CGI->TheDef;
EOF
# fix missing off_t in tools/llvm-c-test/include-all.c (version >= 3.4.1)
mv tools/llvm-c-test/include-all.c tools/llvm-c-test/include-all.c.bak
echo "#undef __STRICT_ANSI__" > tools/llvm-c-test/include-all.c
cat tools/llvm-c-test/include-all.c.bak >> tools/llvm-c-test/include-all.c
# fix redefinitions in include/llvm/Support/COFF.h (version >= 3.6.0)
mv include/llvm/Support/COFF.h include/llvm/Support/COFF.h.bak
sed -n -e "s/^ *\(IMAGE_[^ ,]*\) *[,=]*.*$/#undef \1/p" include/llvm/Support/COFF.h.bak > include/llvm/Support/COFF.h
cat include/llvm/Support/COFF.h.bak >> include/llvm/Support/COFF.h
#wl-showstatus configure &&
#./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-shared --enable-targets=x86,x86_64 --enable-optimized --disable-assertions --disable-docs --enable-libffi --with-python=$PYDIR/python.exe &&
# wl-showstatus build-install &&
# make install &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && rm -rf $BASENAME-$VERSION
## fix missing PENUMLOADED_MODULES_CALLBACK64 in lib/Support/Windows/DynamicLibrary.inc, fix probably breaks functionality (version >= 3.7.0)
#patch -ulbf lib/Support/Windows/DynamicLibrary.inc << EOF
#--- lib/Support/Windows/DynamicLibrary.inc  2015-07-02 16:34:57 +0200
#+++ lib/Support/Windows/DynamicLibrary.inc  2015-09-03 09:42:18 +0200
#@@ -33,3 +33,3 @@
#
#-typedef BOOL (WINAPI *fpEnumerateLoadedModules)(HANDLE,PENUMLOADED_MODULES_CALLBACK64,PVOID);
#+typedef BOOL (WINAPI *fpEnumerateLoadedModules)(HANDLE,PENUMLOADED_MODULES_CALLBACK,PVOID);
# static fpEnumerateLoadedModules fEnumerateLoadedModules;
#@@ -41,3 +41,3 @@
#     fEnumerateLoadedModules = (fpEnumerateLoadedModules)
#-      ::GetProcAddress(hLib, "EnumerateLoadedModules64");
#+      ::GetProcAddress(hLib, "EnumerateLoadedModules");
#   }
#@@ -47,3 +47,3 @@
# static BOOL CALLBACK
#-ELM_Callback(WIN32_ELMCB_PCSTR ModuleName, DWORD64 ModuleBase,
#+ELM_Callback(WIN32_ELMCB_PCSTR ModuleName, DWORD ModuleBase,
#              ULONG ModuleSize, PVOID UserContext) {
#EOF
# fix already defined CONST in lib/CodeGen/SelectionDAG/SDNodeDbgValue.h (version >= 3.7.0)
mv lib/CodeGen/SelectionDAG/SDNodeDbgValue.h lib/CodeGen/SelectionDAG/SDNodeDbgValue.h.bak
echo "#undef CONST" > lib/CodeGen/SelectionDAG/SDNodeDbgValue.h
cat lib/CodeGen/SelectionDAG/SDNodeDbgValue.h.bak >> lib/CodeGen/SelectionDAG/SDNodeDbgValue.h
# fix already defined Unknown in lib/Target/NVPTX/NVPTXISelLowering.cpp (version >= 3.7.0)
mv lib/Target/NVPTX/NVPTXISelLowering.cpp lib/Target/NVPTX/NVPTXISelLowering.cpp.bak
sed -e "s/ Unknown/ Notknown/g" lib/Target/NVPTX/NVPTXISelLowering.cpp.bak > lib/Target/NVPTX/NVPTXISelLowering.cpp
# fix already defined IN in lib/Target/PowerPC/PPCISelDAGToDAG.cpp (version >= 3.7.0)
mv lib/Target/PowerPC/PPCISelDAGToDAG.cpp lib/Target/PowerPC/PPCISelDAGToDAG.cpp.bak
cat > lib/Target/PowerPC/PPCISelDAGToDAG.cpp << EOF
#include <windows.h>
#undef IN
EOF
cat lib/Target/PowerPC/PPCISelDAGToDAG.cpp.bak >> lib/Target/PowerPC/PPCISelDAGToDAG.cpp
# fix already defined IN in tools/llvm-diff/DiffConsumer.cpp (version >= 3.7.0)
mv tools/llvm-diff/DiffConsumer.cpp tools/llvm-diff/DiffConsumer.cpp.bak
cat > tools/llvm-diff/DiffConsumer.cpp << EOF
#include <windows.h>
#undef IN
EOF
cat tools/llvm-diff/DiffConsumer.cpp.bak >> tools/llvm-diff/DiffConsumer.cpp
# fix platform detection (version >= 3.6.0)
sed -i.bak -e "s/\(MINGW\) AND NOT MSYS/\1/" cmake/modules/GetHostTriple.cmake
#wl-showstatus configure &&
#mkdir -p build &&
#cd build &&
##cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DBUILD_SHARED_LIBS:BOOL=ON -DLLVM_TARGETS_TO_BUILD:STRING=all -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_BUILD_DOCS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe .. &&
##cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DBUILD_SHARED_LIBS:BOOL=OFF -DLLVM_TARGETS_TO_BUILD:STRING=all -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_BUILD_DOCS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON -DLLVM_ENABLE_CXX11:BOOL=ON -DCMAKE_CXX_FLAGS:STRING="-std=c++0x" -DLLVM_EXTERNAL_CLANG_SOURCE_DIR:PATH=$(pwd)/tools/clang -DLLVM_EXTERNAL_LLD_SOURCE_DIR:PATH=$(pwd)/tools/lld -DLLVM_EXTERNAL_POLLY_SOURCE_DIR:PATH=$(pwd)/tools/polly -DLLVM_EXTERNAL_LLDB_SOURCE_DIR:PATH=$(pwd)/tools/lldb -DLLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR:PATH=$(pwd)/projects/compiler-rt -DLLVM_EXTERNAL_LIBCXX_SOURCE_DIR:PATH=$(pwd)/projects/libcxx -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe .. &&
##cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DBUILD_SHARED_LIBS:BOOL=OFF -DLLVM_TARGETS_TO_BUILD:STRING=all -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_BUILD_DOCS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON -DLLVM_ENABLE_CXX11:BOOL=ON -DCMAKE_CXX_FLAGS:STRING="-std=c++11" -DLLVM_EXTERNAL_CLANG_SOURCE_DIR:PATH=$(pwd)/tools/clang -DLLVM_EXTERNAL_LLD_SOURCE_DIR:PATH=$(pwd)/tools/lld -DLLVM_EXTERNAL_POLLY_SOURCE_DIR:PATH=$(pwd)/tools/polly -DLLVM_EXTERNAL_LLDB_SOURCE_DIR:PATH=$(pwd)/tools/lldb -DLLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR:PATH=$(pwd)/projects/compiler-rt -DLLVM_EXTERNAL_LIBCXX_SOURCE_DIR:PATH=$(pwd)/projects/libcxx -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe .. &&
##cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DBUILD_SHARED_LIBS:BOOL=OFF -DLLVM_TARGETS_TO_BUILD:STRING=all -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_BUILD_DOCS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON $(if g++ --help -v 2>/dev/null|grep -q "std=gnu++11"; then echo -DCMAKE_CXX_FLAGS:STRING=-std=gnu++11; fi) -DLLVM_EXTERNAL_CLANG_SOURCE_DIR:PATH=$(pwd)/tools/clang -DLLVM_EXTERNAL_LLD_SOURCE_DIR:PATH=$(pwd)/tools/lld -DLLVM_EXTERNAL_POLLY_SOURCE_DIR:PATH=$(pwd)/tools/polly -DLLVM_EXTERNAL_LLDB_SOURCE_DIR:PATH=$(pwd)/tools/lldb -DLLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR:PATH=$(pwd)/projects/compiler-rt -DLLVM_EXTERNAL_LIBCXX_SOURCE_DIR:PATH=$(pwd)/projects/libcxx -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe .. &&
##cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DBUILD_SHARED_LIBS:BOOL=OFF -DLLVM_TARGETS_TO_BUILD:STRING=all -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_BUILD_DOCS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON $(if g++ --help -v 2>/dev/null|grep -q "std=gnu++11"; then echo -DCMAKE_CXX_FLAGS:STRING=-std=gnu++11; fi) -DLLVM_EXTERNAL_CLANG_SOURCE_DIR:PATH=$(pwd)/tools/clang -DLLVM_EXTERNAL_LLD_SOURCE_DIR:PATH=$(pwd)/tools/lld -DLLVM_EXTERNAL_POLLY_SOURCE_DIR:PATH=$(pwd)/tools/polly -DLLVM_EXTERNAL_LLDB_SOURCE_DIR:PATH=$(pwd)/tools/lldb -DLLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR:PATH=$(pwd)/projects/compiler-rt -DLLVM_EXTERNAL_LIBCXX_SOURCE_DIR:PATH=$(pwd)/projects/libcxx -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe -DLLVM_POLLY_BUILD:BOOL=OFF -DLLVM_POLLY_LINK_INTO_TOOLS:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF .. &&
#cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DBUILD_SHARED_LIBS:BOOL=ON -DLLVM_INSTALL_MODULEMAPS:BOOL=ON -DLLVM_TARGETS_TO_BUILD:STRING=all -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_BUILD_DOCS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON $(if g++ --help -v 2>/dev/null|grep -q "std=gnu++11"; then echo -DCMAKE_CXX_FLAGS:STRING=-std=gnu++11; fi) -DLLVM_EXTERNAL_CLANG_SOURCE_DIR:PATH=$(pwd)/tools/clang -DLLVM_EXTERNAL_LLD_SOURCE_DIR:PATH=$(pwd)/tools/lld -DLLVM_EXTERNAL_POLLY_SOURCE_DIR:PATH=$(pwd)/tools/polly -DLLVM_EXTERNAL_LLDB_SOURCE_DIR:PATH=$(pwd)/tools/lldb -DLLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR:PATH=$(pwd)/projects/compiler-rt -DLLVM_EXTERNAL_LIBCXX_SOURCE_DIR:PATH=$(pwd)/projects/libcxx -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe -DLLVM_POLLY_BUILD:BOOL=OFF -DLLVM_POLLY_LINK_INTO_TOOLS:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF .. &&
##cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DBUILD_SHARED_LIBS:BOOL=OFF -DLLVM_TARGETS_TO_BUILD:STRING=all -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_BUILD_DOCS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON $(if g++ --help -v 2>/dev/null|grep -q "std=gnu++11"; then echo -DCMAKE_CXX_FLAGS:STRING=-std=gnu++11; fi) -DLLVM_EXTERNAL_CLANG_SOURCE_DIR:PATH=$(pwd)/tools/clang -DLLVM_EXTERNAL_LLD_SOURCE_DIR:PATH=$(pwd)/tools/lld -DLLVM_EXTERNAL_POLLY_SOURCE_DIR:PATH=$(pwd)/tools/polly -DLLVM_EXTERNAL_LLDB_SOURCE_DIR:PATH=$(pwd)/tools/lldb -DLLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR:PATH=$(pwd)/projects/compiler-rt -DLLVM_EXTERNAL_LIBCXX_SOURCE_DIR:PATH=$(pwd)/projects/libcxx -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe -DLLVM_ENABLE_THREADS:BOOL=OFF .. &&
##cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DBUILD_SHARED_LIBS:BOOL=OFF -DLLVM_TARGETS_TO_BUILD:STRING=all -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_BUILD_DOCS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON $(if g++ --help -v 2>/dev/null|grep -q "std=c++11"; then echo '-DLLVM_ENABLE_CXX11:BOOL=ON -DCMAKE_CXX_FLAGS:STRING="-std=c++11"'; fi) -DLLVM_EXTERNAL_CLANG_SOURCE_DIR:PATH=$(pwd)/tools/clang -DLLVM_EXTERNAL_LLD_SOURCE_DIR:PATH=$(pwd)/tools/lld -DLLVM_EXTERNAL_POLLY_SOURCE_DIR:PATH=$(pwd)/tools/polly -DLLVM_EXTERNAL_LLDB_SOURCE_DIR:PATH=$(pwd)/tools/lldb -DLLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR:PATH=$(pwd)/projects/compiler-rt -DLLVM_EXTERNAL_LIBCXX_SOURCE_DIR:PATH=$(pwd)/projects/libcxx -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe .. &&
##cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DBUILD_SHARED_LIBS:BOOL=OFF -DLLVM_TARGETS_TO_BUILD:STRING=all -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_BUILD_DOCS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON $(if g++ --help -v 2>/dev/null|grep -q "std=gnu++11"; then echo '-DLLVM_ENABLE_CXX11:BOOL=ON -DCMAKE_CXX_FLAGS:STRING="-std=gnu++11"'; fi) -DLLVM_EXTERNAL_CLANG_SOURCE_DIR:PATH=$(pwd)/tools/clang -DLLVM_EXTERNAL_LLD_SOURCE_DIR:PATH=$(pwd)/tools/lld -DLLVM_EXTERNAL_POLLY_SOURCE_DIR:PATH=$(pwd)/tools/polly -DLLVM_EXTERNAL_LLDB_SOURCE_DIR:PATH=$(pwd)/tools/lldb -DLLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR:PATH=$(pwd)/projects/compiler-rt -DLLVM_EXTERNAL_LIBCXX_SOURCE_DIR:PATH=$(pwd)/projects/libcxx -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe .. &&
##cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DBUILD_SHARED_LIBS:BOOL=OFF -DLLVM_TARGETS_TO_BUILD:STRING=all -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON $(if g++ --help -v 2>/dev/null|grep -q "std=gnu++11"; then echo '-DCMAKE_CXX_FLAGS:STRING="-std=gnu++11"'; fi) -DLLVM_EXTERNAL_CLANG_SOURCE_DIR:PATH=$(pwd)/tools/clang -DLLVM_EXTERNAL_LLD_SOURCE_DIR:PATH=$(pwd)/tools/lld -DLLVM_EXTERNAL_POLLY_SOURCE_DIR:PATH=$(pwd)/tools/polly -DLLVM_EXTERNAL_LLDB_SOURCE_DIR:PATH=$(pwd)/tools/lldb -DLLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR:PATH=$(pwd)/projects/compiler-rt -DLLVM_EXTERNAL_LIBCXX_SOURCE_DIR:PATH=$(pwd)/projects/libcxx -DLIBXML2_INCLUDE_DIR:PATH=$MINGWPREFIX/include/libxml2 -DLIBXML2_LIBRARIES:FILEPATH=$MINGWPREFIX/lib/libxml2.dll.a -DFFI_INCLUDE_PATH:PATH=$MINGWPREFIX/include -DFFI_LIBRARY_PATH:FILEPATH=$MINGWPREFIX/lib/libffi.dll.a -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe .. &&
##cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DBUILD_SHARED_LIBS:BOOL=OFF -DLLVM_TARGETS_TO_BUILD:STRING=all -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON $(if g++ --help -v 2>/dev/null|grep -q "std=gnu++11"; then echo '-DCMAKE_CXX_FLAGS:STRING="-std=gnu++11"'; fi) -DLIBXML2_INCLUDE_DIR:PATH=$MINGWPREFIX/include/libxml2 -DLIBXML2_LIBRARIES:FILEPATH=$MINGWPREFIX/lib/libxml2.dll.a -DFFI_INCLUDE_PATH:PATH=$MINGWPREFIX/include -DFFI_LIBRARY_DIR:PATH=$MINGWPREFIX/lib -DFFI_LIBRARY_PATH:FILEPATH=$MINGWPREFIX/lib/libffi.dll.a -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe .. &&
##cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DBUILD_SHARED_LIBS:BOOL=OFF -DLLVM_EXTERNAL_CLANG_SOURCE_DIR:PATH=$(pwd)/../../cfe-$VERSION.src -DLLVM_EXTERNAL_LLD_SOURCE_DIR:PATH=$(pwd)/../../lld-$VERSION.src -DLLVM_EXTERNAL_POLLY_SOURCE_DIR:PATH=$(pwd)/../../polly-$VERSION.src -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_BUILD_DOCS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON $(if g++ --help -v 2>/dev/null|grep -q "std=gnu++11"; then echo -DCMAKE_CXX_FLAGS:STRING=-std=gnu++11; fi) -DLLVM_EXTERNAL_CLANG_SOURCE_DIR:PATH=$(pwd)/tools/clang -DLLVM_EXTERNAL_LLD_SOURCE_DIR:PATH=$(pwd)/tools/lld -DLLVM_EXTERNAL_POLLY_SOURCE_DIR:PATH=$(pwd)/tools/polly -DLLVM_EXTERNAL_LLDB_SOURCE_DIR:PATH=$(pwd)/tools/lldb -DLLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR:PATH=$(pwd)/projects/compiler-rt -DLLVM_EXTERNAL_LIBCXX_SOURCE_DIR:PATH=$(pwd)/projects/libcxx -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe .. &&
##cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DBUILD_SHARED_LIBS:BOOL=OFF -DLLVM_EXTERNAL_CLANG_SOURCE_DIR:PATH=$(pwd)/../../cfe-$VERSION.src -DLLVM_EXTERNAL_LLD_SOURCE_DIR:PATH=$(pwd)/../../lld-$VERSION.src -DLLVM_EXTERNAL_POLLY_SOURCE_DIR:PATH=$(pwd)/../../polly-$VERSION.src -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_BUILD_DOCS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON $(if g++ --help -v 2>/dev/null|grep -q "std=gnu++11"; then echo -DCMAKE_CXX_FLAGS:STRING=-std=gnu++11; fi) -DLLVM_EXTERNAL_CLANG_SOURCE_DIR:PATH=$(pwd)/tools/clang -DLLVM_EXTERNAL_LLD_SOURCE_DIR:PATH=$(pwd)/tools/lld -DLLVM_EXTERNAL_POLLY_SOURCE_DIR:PATH=$(pwd)/tools/polly -DLLVM_EXTERNAL_LLDB_SOURCE_DIR:PATH=$(pwd)/tools/lldb -DLLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR:PATH=$(pwd)/projects/compiler-rt -DLLVM_EXTERNAL_LIBCXX_SOURCE_DIR:PATH=$(pwd)/projects/libcxx -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe -DLLVM_ENABLE_THREADS:BOOL=OFF .. &&
# wl-showstatus build-install &&
# ( make install/strip || make -j1 install/strip ) &&
# # manually copy and strip DLL files if missing
# ( ls -1 $INSTALLPREFIX/bin/*.dll &> /dev/null || (
#  #cp -u bin/* $INSTALLPREFIX/bin/ &&
#  #strip $INSTALLPREFIX/bin/*.dll &&
#  for F in bin/*.dll; do
#   strip -s $F -o $INSTALLPREFIX/bin/$(echo $F|sed -e "s?bin/\(.*\)?\1?")
#  done
# ) ) &&
# cd .. &&
#    echo OK
# ##wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && rm -rf $BASENAME-$VERSION
# #wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && rm -rf $BASENAME-$VERSION.src
# fix tools/llvm-config/llvm-config.cpp to use slashes instead of backslashes
patch -ulbf tools/llvm-config/llvm-config.cpp << EOF
@@ -357,2 +357,12 @@
     SharedVersionedExt = LLVM_DYLIB_VERSION ".dll";
+#ifdef __MINGW32__
+    StaticExt = "a";
+    StaticPrefix = "lib";
+    std::replace(ActiveObjRoot.begin(), ActiveObjRoot.end(), '\\\\', '/');
+    std::replace(ActivePrefix.begin(), ActivePrefix.end(), '\\\\', '/');
+    std::replace(ActiveBinDir.begin(), ActiveBinDir.end(), '\\\\', '/');
+    std::replace(ActiveLibDir.begin(), ActiveLibDir.end(), '\\\\', '/');
+    std::replace(ActiveCMakeDir.begin(), ActiveCMakeDir.end(), '\\\\', '/');
+    std::replace(ActiveIncludeOption.begin(), ActiveIncludeOption.end(), '\\\\', '/');
+#else
     if (HostTriple.isOSCygMing()) {
@@ -371,2 +381,3 @@
     }
+#endif
     SharedDir = ActiveBinDir;
EOF
## force allowing to build modules cmake/modules/HandleLLVMOptions.cmake (version >= 10.0.0)
#patch -ulbf cmake/modules/HandleLLVMOptions.cmake << EOF
#@@ -488,3 +488,3 @@
#   else()
#-    message(FATAL_ERROR "LLVM_ENABLE_MODULES is not supported by this compiler")
#+    message(WARNING "LLVM_ENABLE_MODULES is not supported by this compiler")
#   endif()
#@@ -931,3 +931,3 @@
# if(BUILD_SHARED_LIBS AND LLVM_EXPORT_SYMBOLS_FOR_PLUGINS)
#-  message(FATAL_ERROR "BUILD_SHARED_LIBS not compatible with LLVM_EXPORT_SYMBOLS_FOR_PLUGINS")
#+  message(WARNING "BUILD_SHARED_LIBS not compatible with LLVM_EXPORT_SYMBOLS_FOR_PLUGINS")
# endif()
#EOF
## fix DLL exports in cmake/modules/AddLLVM.cmake (version >= 10.0.0)
#patch -ulbf cmake/modules/AddLLVM.cmake << EOF
#@@ -491,2 +491,4 @@
#     add_library(\${name} SHARED \${ALL_FILES})
#+    #set_target_properties(\${name} PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS TRUE)
#+    set_target_properties(\${name} PROPERTIES LINK_FLAGS "-Wl,--export-all-symbols")
#   else()
#EOF
mkdir -p build_static build_shared &&
 wl-showstatus configure &&
 #cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLLVM_TARGETS_TO_BUILD:STRING=all -DLLVM_ENABLE_MODULES:BOOL=OFF -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON $(if g++ --help -v 2>/dev/null|grep -q "std=gnu++11"; then echo -DCMAKE_CXX_FLAGS:STRING=-std=gnu++11; fi) -DLLVM_EXTERNAL_CLANG_SOURCE_DIR:PATH=$(pwd)/tools/clang -DLLVM_EXTERNAL_LLD_SOURCE_DIR:PATH=$(pwd)/tools/lld -DLLVM_EXTERNAL_POLLY_SOURCE_DIR:PATH=$(pwd)/tools/polly -DLLVM_EXTERNAL_LLDB_SOURCE_DIR:PATH=$(pwd)/tools/lldb -DLLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR:PATH=$(pwd)/projects/compiler-rt -DLLVM_EXTERNAL_LIBCXX_SOURCE_DIR:PATH=$(pwd)/projects/libcxx -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe -DLLVM_POLLY_BUILD:BOOL=OFF -DLLVM_POLLY_LINK_INTO_TOOLS:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF -S. -Bbuild_static &&
 #cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLLVM_TARGETS_TO_BUILD:STRING=all -DLLVM_ENABLE_MODULES:BOOL=OFF -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON $(if g++ --help -v 2>/dev/null|grep -q "std=gnu++11"; then echo -DCMAKE_CXX_FLAGS:STRING=-std=gnu++11; fi) -DLLVM_EXTERNAL_CLANG_SOURCE_DIR:PATH=$(pwd)/tools/clang -DLLVM_EXTERNAL_LLD_SOURCE_DIR:PATH=$(pwd)/tools/lld -DLLVM_EXTERNAL_POLLY_SOURCE_DIR:PATH=$(pwd)/tools/polly -DLLVM_EXTERNAL_LLDB_SOURCE_DIR:PATH=$(pwd)/tools/lldb -DLLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR:PATH=$(pwd)/projects/compiler-rt -DLLVM_EXTERNAL_LIBCXX_SOURCE_DIR:PATH=$(pwd)/projects/libcxx -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe -DLLVM_POLLY_BUILD:BOOL=OFF -DLLVM_POLLY_LINK_INTO_TOOLS:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_BUILD_BENCHMARKS:BOOL=OFF -DLLVM_BUILD_TESTS:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF -S. -Bbuild_static &&
 #cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLLVM_TARGETS_TO_BUILD:STRING=all -DLLVM_ENABLE_MODULES:BOOL=OFF -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON $(if g++ --help -v 2>/dev/null|grep -q "std=gnu++11"; then echo -DCMAKE_CXX_FLAGS:STRING=-std=gnu++11; fi) -DLLVM_EXTERNAL_CLANG_SOURCE_DIR:PATH=$(pwd)/tools/clang -DLLVM_EXTERNAL_LLD_SOURCE_DIR:PATH=$(pwd)/tools/lld -DLLVM_EXTERNAL_POLLY_SOURCE_DIR:PATH=$(pwd)/tools/polly -DLLVM_EXTERNAL_LLDB_SOURCE_DIR:PATH=$(pwd)/tools/lldb -DLLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR:PATH=$(pwd)/projects/compiler-rt -DLLVM_EXTERNAL_LIBCXX_SOURCE_DIR:PATH=$(pwd)/projects/libcxx -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe -DLLVM_POLLY_BUILD:BOOL=OFF -DLLVM_POLLY_LINK_INTO_TOOLS:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_BUILD_BENCHMARKS:BOOL=OFF -DLLVM_BUILD_TESTS:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF -S. -Bbuild_static &&
 #cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLLVM_TARGETS_TO_BUILD:STRING=all -DLLVM_ENABLE_MODULES:BOOL=OFF -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON $(if g++ --help -v 2>/dev/null|grep -q "std=gnu++11"; then echo -DCMAKE_CXX_FLAGS:STRING=-std=gnu++11; fi) -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe -DLLVM_POLLY_BUILD:BOOL=OFF -DLLVM_POLLY_LINK_INTO_TOOLS:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_BUILD_BENCHMARKS:BOOL=OFF -DLLVM_BUILD_TESTS:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF -S. -Bbuild_static &&
 #cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLLVM_TARGETS_TO_BUILD:STRING=all -DLLVM_ENABLE_MODULES:BOOL=OFF -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe -DLLVM_POLLY_BUILD:BOOL=OFF -DLLVM_POLLY_LINK_INTO_TOOLS:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_BUILD_BENCHMARKS:BOOL=OFF -DLLVM_BUILD_TESTS:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF -S. -Bbuild_static &&
 #cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLLVM_TARGETS_TO_BUILD:STRING=all -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_MODULES:BOOL=OFF -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe -DLLVM_POLLY_BUILD:BOOL=OFF -DLLVM_POLLY_LINK_INTO_TOOLS:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_BUILD_BENCHMARKS:BOOL=OFF -DLLVM_BUILD_TESTS:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF -S. -Bbuild_static &&
 #cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DLLVM_BUILD_STATIC=ON -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLLVM_TARGETS_TO_BUILD:STRING=all -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_MODULES:BOOL=OFF -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe -DLLVM_POLLY_BUILD:BOOL=OFF -DLLVM_POLLY_LINK_INTO_TOOLS:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_BUILD_BENCHMARKS:BOOL=OFF -DLLVM_BUILD_TESTS:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF -DCMAKE_EXE_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition" -S. -Bbuild_static &&
 #cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DLLVM_BUILD_STATIC=ON -DLLVM_LINK_LLVM_DYLIB:BOOL=ON -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLLVM_TARGETS_TO_BUILD:STRING=all -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_MODULES:BOOL=OFF -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe -DLLVM_POLLY_BUILD:BOOL=OFF -DLLVM_POLLY_LINK_INTO_TOOLS:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_BUILD_BENCHMARKS:BOOL=OFF -DLLVM_BUILD_TESTS:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF -DCMAKE_EXE_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition" -S. -Bbuild_static &&
 cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DLLVM_BUILD_STATIC=ON -DLLVM_LINK_LLVM_DYLIB:BOOL=ON -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLLVM_TARGETS_TO_BUILD:STRING=all -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_MODULES:BOOL=OFF -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON -DPython2_EXECUTABLE:PATH=$PY2DIR/python.exe -DPython3_EXECUTABLE:PATH=$PYDIR/python.exe -DLLVM_POLLY_BUILD:BOOL=OFF -DLLVM_POLLY_LINK_INTO_TOOLS:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_BUILD_BENCHMARKS:BOOL=OFF -DLLVM_BUILD_TESTS:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF -DCMAKE_EXE_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition" -S. -Bbuild_static &&
 #cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DLLVM_BUILD_STATIC=OFF -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLLVM_TARGETS_TO_BUILD:STRING=all -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_MODULES:BOOL=OFF -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON -DPython2_EXECUTABLE:PATH=$PY2DIR/python.exe -DPython3_EXECUTABLE:PATH=$PYDIR/python.exe -DLLVM_POLLY_BUILD:BOOL=OFF -DLLVM_POLLY_LINK_INTO_TOOLS:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_BUILD_BENCHMARKS:BOOL=OFF -DLLVM_BUILD_TESTS:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF -DCMAKE_EXE_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition" -S. -Bbuild_static &&
 #wl-showstatus configure &&
 ##cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLLVM_TARGETS_TO_BUILD:STRING=all -DLLVM_ENABLE_MODULES:BOOL=OFF -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON $(if g++ --help -v 2>/dev/null|grep -q "std=gnu++11"; then echo -DCMAKE_CXX_FLAGS:STRING=-std=gnu++11; fi) -DLLVM_EXTERNAL_CLANG_SOURCE_DIR:PATH=$(pwd)/tools/clang -DLLVM_EXTERNAL_LLD_SOURCE_DIR:PATH=$(pwd)/tools/lld -DLLVM_EXTERNAL_POLLY_SOURCE_DIR:PATH=$(pwd)/tools/polly -DLLVM_EXTERNAL_LLDB_SOURCE_DIR:PATH=$(pwd)/tools/lldb -DLLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR:PATH=$(pwd)/projects/compiler-rt -DLLVM_EXTERNAL_LIBCXX_SOURCE_DIR:PATH=$(pwd)/projects/libcxx -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe -DLLVM_POLLY_BUILD:BOOL=OFF -DLLVM_POLLY_LINK_INTO_TOOLS:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF -S. -Bbuild_shared &&
 ##cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLLVM_TARGETS_TO_BUILD:STRING=all -DLLVM_ENABLE_MODULES:BOOL=OFF -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON $(if g++ --help -v 2>/dev/null|grep -q "std=gnu++11"; then echo -DCMAKE_CXX_FLAGS:STRING=-std=gnu++11; fi) -DLLVM_EXTERNAL_CLANG_SOURCE_DIR:PATH=$(pwd)/tools/clang -DLLVM_EXTERNAL_LLD_SOURCE_DIR:PATH=$(pwd)/tools/lld -DLLVM_EXTERNAL_POLLY_SOURCE_DIR:PATH=$(pwd)/tools/polly -DLLVM_EXTERNAL_LLDB_SOURCE_DIR:PATH=$(pwd)/tools/lldb -DLLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR:PATH=$(pwd)/projects/compiler-rt -DLLVM_EXTERNAL_LIBCXX_SOURCE_DIR:PATH=$(pwd)/projects/libcxx -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe -DLLVM_POLLY_BUILD:BOOL=OFF -DLLVM_POLLY_LINK_INTO_TOOLS:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_BUILD_BENCHMARKS:BOOL=OFF -DLLVM_BUILD_TESTS:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF -S. -Bbuild_shared &&
 ##echo "-Wl,--allow-multiple-definition" >> tools/llvm-cfi-verify/CMakeFiles/llvm-cfi-verify.dir/linklibs.rsp &&
 ##echo "-Wl,--allow-multiple-definition" >> tools/llvm-exegesis/CMakeFiles/llvm-exegesis.dir/linklibs.rsp &&
 ##cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DLLVM_LINK_LLVM_DYLIB:BOOL=ON -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLLVM_TARGETS_TO_BUILD:STRING=all -DLLVM_ENABLE_MODULES:BOOL=OFF -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON $(if g++ --help -v 2>/dev/null|grep -q "std=gnu++11"; then echo -DCMAKE_CXX_FLAGS:STRING=-std=gnu++11; fi) -DLLVM_EXTERNAL_CLANG_SOURCE_DIR:PATH=$(pwd)/tools/clang -DLLVM_EXTERNAL_LLD_SOURCE_DIR:PATH=$(pwd)/tools/lld -DLLVM_EXTERNAL_POLLY_SOURCE_DIR:PATH=$(pwd)/tools/polly -DLLVM_EXTERNAL_LLDB_SOURCE_DIR:PATH=$(pwd)/tools/lldb -DLLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR:PATH=$(pwd)/projects/compiler-rt -DLLVM_EXTERNAL_LIBCXX_SOURCE_DIR:PATH=$(pwd)/projects/libcxx -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe -DLLVM_POLLY_BUILD:BOOL=OFF -DLLVM_POLLY_LINK_INTO_TOOLS:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_BUILD_BENCHMARKS:BOOL=OFF -DLLVM_BUILD_TESTS:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF -DCMAKE_EXE_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition" -S. -Bbuild_shared &&
 ##cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DLLVM_LINK_LLVM_DYLIB:BOOL=ON -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLLVM_TARGETS_TO_BUILD:STRING=all -DLLVM_ENABLE_MODULES:BOOL=OFF -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON $(if g++ --help -v 2>/dev/null|grep -q "std=gnu++11"; then echo -DCMAKE_CXX_FLAGS:STRING=-std=gnu++11; fi) -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe -DLLVM_POLLY_BUILD:BOOL=OFF -DLLVM_POLLY_LINK_INTO_TOOLS:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_BUILD_BENCHMARKS:BOOL=OFF -DLLVM_BUILD_TESTS:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF -DCMAKE_EXE_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition" -S. -Bbuild_shared &&
 ##cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DLLVM_LINK_LLVM_DYLIB:BOOL=ON -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLLVM_TARGETS_TO_BUILD:STRING=all -DLLVM_ENABLE_MODULES:BOOL=OFF -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe -DLLVM_POLLY_BUILD:BOOL=OFF -DLLVM_POLLY_LINK_INTO_TOOLS:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_BUILD_BENCHMARKS:BOOL=OFF -DLLVM_BUILD_TESTS:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF -DCMAKE_EXE_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition" -S. -Bbuild_shared &&
 ##cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DLLVM_BUILD_STATIC=OFF -DCMAKE_WINDOWS_EXPORT_ALL_SYMBOLS:BOOL=ON -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=ON -DLLVM_ENABLE_PLUGINS:BOOL=ON -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLLVM_TARGETS_TO_BUILD:STRING=all -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_MODULES:BOOL=OFF -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe -DLLVM_POLLY_BUILD:BOOL=OFF -DLLVM_POLLY_LINK_INTO_TOOLS:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_BUILD_BENCHMARKS:BOOL=OFF -DLLVM_BUILD_TESTS:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF -DCMAKE_CXX_LINK_FLAGS:STRING="-Wl,--export-all-symbols" -DCMAKE_SHARED_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition" -S. -Bbuild_shared &&
 ##cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DLLVM_LINK_LLVM_DYLIB:BOOL=ON -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLLVM_TARGETS_TO_BUILD:STRING=all -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_MODULES:BOOL=OFF -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe -DLLVM_POLLY_BUILD:BOOL=OFF -DLLVM_POLLY_LINK_INTO_TOOLS:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_BUILD_BENCHMARKS:BOOL=OFF -DLLVM_BUILD_TESTS:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF -DCMAKE_EXE_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition" -S. -Bbuild_shared &&
 #cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DLLVM_LINK_LLVM_DYLIB:BOOL=ON -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLLVM_TARGETS_TO_BUILD:STRING=all -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_MODULES:BOOL=OFF -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON -DPython2_EXECUTABLE:PATH=$PY2DIR/python.exe -DPython3_EXECUTABLE:PATH=$PYDIR/python.exe -DLLVM_POLLY_BUILD:BOOL=OFF -DLLVM_POLLY_LINK_INTO_TOOLS:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_BUILD_BENCHMARKS:BOOL=OFF -DLLVM_BUILD_TESTS:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF -DCMAKE_EXE_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition" -S. -Bbuild_shared &&
 #wl-showstatus build &&
 #( make -Cbuild_static | make -j1 -Cbuild_static ) &&
 #wl-showstatus build &&
 #( make -Cbuild_shared || make -j1 -Cbuild_shared ) &&
 #wl-showstatus build-install &&
 #( make -Cbuild_static install/strip | make -j1 -Cbuild_static install/strip ) &&
 #wl-showstatus build-install &&
 #( make -Cbuild_shared install/strip || make -j1 -Cbuild_shared install/strip ) &&
 #cp -u build_shared/lib/libLLVM*.dll.a $INSTALLPREFIX/share/llvm/lib/ &&
 wl-showstatus build-install &&
 ninja -Cbuild_static install/strip &&
 #wl-showstatus build-install &&
 #ninja -Cbuild_shared install/strip &&
    echo OK
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION.src
####note: mingw-w64 with win32 threads is no longer supported, see http://lists.llvm.org/pipermail/llvm-dev/2014-September/077050.html
####See also: https://github.com/mstorsjo/llvm-mingw
####TO DO: check if certain .a files from build_shared shouldn't really be .dll.a files
####PATH=$MINGWPREFIX/share/llvm/bin:$PATH 
####Superseded by llvm-project all-in-one build



#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DLLVM_BUILD_STATIC=ON -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLLVM_ENABLE_PLUGINS:BOOL=ON -DLLVM_TARGETS_TO_BUILD:STRING="" -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_MODULES:BOOL=OFF -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe -DLLVM_POLLY_BUILD:BOOL=OFF -DLLVM_POLLY_LINK_INTO_TOOLS:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_BUILD_BENCHMARKS:BOOL=OFF -DBENCHMARK_ENABLE_TESTING:BOOL=OFF -DLLVM_BUILD_TESTS:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF -DPython3_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DCMAKE_EXE_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition" -S. -Bbuild_static &&
# wl-showstatus configure &&
# ####-- Performing Test HAVE_GNU_POSIX_REGEX -- failed to compile
# ####-- Performing Test HAVE_POSIX_REGEX -- failed to compile
# cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DLLVM_BUILD_STATIC=OFF -DLLVM_LINK_LLVM_DYLIB:BOOL=ON -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLLVM_ENABLE_PLUGINS:BOOL=ON -DLLVM_TARGETS_TO_BUILD:STRING="" -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_MODULES:BOOL=OFF -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe -DLLVM_POLLY_BUILD:BOOL=OFF -DLLVM_POLLY_LINK_INTO_TOOLS:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_BUILD_BENCHMARKS:BOOL=OFF -DBENCHMARK_ENABLE_TESTING:BOOL=OFF -DLLVM_BUILD_TESTS:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF -DPython3_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DCMAKE_EXE_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition" -S. -Bbuild_shared &&
# #cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DLLVM_BUILD_STATIC=OFF -DLLVM_LINK_LLVM_DYLIB:BOOL=ON -DCMAKE_WINDOWS_EXPORT_ALL_SYMBOLS:BOOL=ON -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=ON -DLLVM_ENABLE_PLUGINS:BOOL=ON -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM -DLLVM_TARGETS_TO_BUILD:STRING=all -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_MODULES:BOOL=OFF -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF -DLLVM_ENABLE_FFI:BOOL=ON -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe -DLLVM_POLLY_BUILD:BOOL=OFF -DLLVM_POLLY_LINK_INTO_TOOLS:BOOL=OFF -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF -DLLVM_BUILD_BENCHMARKS:BOOL=OFF -DLLVM_BUILD_TESTS:BOOL=OFF -DLLVM_INCLUDE_TESTS:BOOL=OFF -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF -DPython3_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DCMAKE_CXX_LINK_FLAGS:STRING="-Wl,--export-all-symbols" -DCMAKE_SHARED_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition" -S. -Bbuild_shared &&
# #-DLLVM_DYLIB_COMPONENTS:STRING=all 
# #-DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=ON 
# wl-showstatus build-install &&
# ninja -Cbuild_static install/strip &&
# wl-showstatus build-install &&
# ninja -Cbuild_shared install/strip &&
#    echo OK
## wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION.src
####Superseded by llvm-project all-in-one build

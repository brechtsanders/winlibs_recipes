export NAME="OpenCensus"
export STATUS=
export URL=https://opencensus.io/
export BASENAME=opencensus-cpp
export DESCRIPTION="OpenCensus is a toolkit for collecting application performance and behavior data. It currently includes an API for tracing and stats."
export CATEGORY=dataprocessing
export TYPE=library
export VERSION=0.4.0
export VERSIONDATE=20220624
wl-showstatus --package-version
export DEPENDENCIES=pthreads,abseil,prometheus-cpp
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=Apache
export DOWNLOADURL="https://github.com/census-instrumentation/opencensus-cpp/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/census-instrumentation/opencensus-cpp/archive/refs/tags/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xfz $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd $BASENAME-$VERSION
# fix missing std::numeric_limits
for F in $(grep -l numeric_limits $(find -name '*.h' -or -name '*.cc')); do
 mv $F $F.bak &&
 echo "#include <limits>" > $F &&
 cat $F.bak >> $F
done

#grep -wi add_library $(find -name CMakeLists.txt -or -name '*.cmake')
#mkdir -p build_test && cmake.exe -G"MSYS Makefiles" -DBUILD_TESTING=OFF -S. -Bbuild_test -LH && echo OK; rm -rf build_test

#mkdir -p build_win &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DFETCHCONTENT_FULLY_DISCONNECTED:BOOL=ON -DFETCHCONTENT_UPDATES_DISCONNECTED:BOOL=ON -DFETCHCONTENT_QUIET:BOOL=OFF -DUSE_THIRDPARTY_LIBRARIES:BOOL=ON -DENABLE_COMPRESSION:BOOL=ON -DBUILD_TESTING=OFF -S. -Bbuild_win &&
# wl-showstatus build-install &&
# ninja -Cbuild_win install/strip &&
#    echo OK

#export BUILDDEPENDENCIES=cmake,ninja
#export OPTIONALBUILDDEPENDENCIES=
mkdir -p build_static build_shared &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DFETCHCONTENT_FULLY_DISCONNECTED:BOOL=ON -DFETCHCONTENT_UPDATES_DISCONNECTED:BOOL=ON -DFETCHCONTENT_QUIET:BOOL=OFF -DUSE_THIRDPARTY_LIBRARIES:BOOL=ON -DENABLE_COMPRESSION:BOOL=ON -DBUILD_TESTING=OFF -S. -Bbuild_static &&
 #-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DFETCHCONTENT_FULLY_DISCONNECTED:BOOL=ON -DFETCHCONTENT_UPDATES_DISCONNECTED:BOOL=ON -DFETCHCONTENT_QUIET:BOOL=OFF -DUSE_THIRDPARTY_LIBRARIES:BOOL=ON -DENABLE_COMPRESSION:BOOL=ON -DBUILD_TESTING=OFF -S. -Bbuild_shared &&
 ## fix execution of Python scripts
 #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|glib-genmarshal\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
 # fix missing link libraries
 sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lshlwapi -labsl_synchronization -labsl_time/" build_shared/build.ninja &&
 #wl-showstatus build &&
 #ninja -Cbuild_static &&
 #wl-showstatus build &&
 #ninja -Cbuild_shared &&
 wl-showstatus build-install &&
 ninja -Cbuild_static install/strip &&
 wl-showstatus build-install &&
 ninja -Cbuild_shared install/strip &&
    echo OK
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




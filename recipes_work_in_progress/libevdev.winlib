export NAME="libevdev"
export STATUS=
export URL=https://www.freedesktop.org/wiki/Software/libevdev/
export BASENAME=libevdev
export DESCRIPTION="libevdev is a wrapper library for evdev devices. it moves the common tasks when dealing with evdev devices into a library and provides a library interface to the callers, thus avoiding erroneous ioctls, etc."
export CATEGORY=system,hardware
export TYPE=library
export VERSION=1.9.1
export VERSIONDATE=20200915
#export VERSION=1.9.901
#export VERSIONDATE=20201006
#export VERSION=1.9.902
#export VERSIONDATE=20201020
#export VERSION=1.10.0
#export VERSIONDATE=20201026
#export VERSION=1.10.1
#export VERSIONDATE=20210111
#export VERSION=1.11.0
#export VERSIONDATE=20210201
#export VERSION=1.12.0
#export VERSIONDATE=20211109
####meson.build:47:0: ERROR: Running configure command failed.
####FileNotFoundError: [Errno 2] No such file or directory: 'R:/winlibs64-9.2.0/libevdev-libevdev-1.9.902/include/linux/windows/input.h'
wl-showstatus --package-version
export DEPENDANCIES=
export OPTIONALDEPENDANCIES=
export BUILDDEPENDANCIES=meson,ninja
export LICENSEFILE=COPYING
#export LICENSEFILE=LICENSE
export LICENSETYPE=
export DOWNLOADURL="https://gitlab.freedesktop.org/libevdev/libevdev/-/tags"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://gitlab.freedesktop.org/libevdev/libevdev/-/archive/libevdev-$VERSION/libevdev-libevdev-$VERSION.tar.bz2
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xfj $TARBALLDIR/$BASENAME/libevdev-libevdev-$VERSION.tar.bz2
cd libevdev-libevdev-$VERSION
# fix meson.build (version >= 1.12.0)
patch -ulbf meson.build << EOF
@@ -39,3 +39,3 @@
 dep_lm = cc.find_library('m')
-dep_rt = cc.find_library('rt')
+dep_rt = cc.find_library('rt', required : false)

@@ -49,3 +49,3 @@
                               output: 'event-names.h',
-                              command: [make_event_names, input_h, input_event_codes_h],
+                              command: ['$(cygpath -m $PYDIR/python.exe)', make_event_names, input_h, input_event_codes_h],
                               capture: true)
EOF
#mkdir -p include/linux/windows
#touch include/linux/windows/input.h include/linux/windows/input-event-codes.h
mkdir -p build_both &&
 wl-showstatus configure &&
 PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Ddocumentation=enabled -Dtests=disabled . build_both &&
 ## fix slash/backslash path issue when calling Python from Ninja
 #sed -i.bak -e "s/join_paths/os.path.join/g; /COMMAND =.*python\.exe/ s?\"/\([a-zA-Z]\)/?\"\1:/?; /COMMAND =.*python\.exe/ s?/?\\\\?g" build_*/build.ninja &&
 ## fix Python path issues in meson_exe
 #sed -i.bak -e "s?$PYDIR?$(echo $PYDIR|sed -e "s?^/\([a-zA-Z]\)/?\1:/?")?" build_both/meson-private/meson_exe_python.exe_*.dat &&
 ## fix execution of Python scripts
 #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *= *\| *=.*\&\& *\)\(\"\{0,1\}[^ ]*\)\(\.py\|glib-mkenums\|g-ir-scanner\)\(\"\{0,1\} \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_both/build.ninja &&
 ## fix executing shell scripts
 #sed -i.bak -e "s?^\(\s*COMMAND\s*=\s*\)\(\"[^\"]*\.sh\"\)?\1\"$(cygpath -m $(which sh.exe))\" \2?" build_both/build.ninja &&
 wl-showstatus build-install &&
 PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib ninja -Cbuild_both install &&
    echo OK && find . -name '*.a'
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf libevdev-libevdev-$VERSION




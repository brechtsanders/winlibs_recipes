export NAME="libportal"
export STATUS=
export URL=https://github.com/flatpak/libportal
export BASENAME=libportal
export DESCRIPTION="libportal provides GIO-style async APIs for most Flatpak portals."
export CATEGORY=communication
export TYPE=library
#export VERSION=0.3
#export VERSIONDATE=20200705
#export VERSION=0.4
#export VERSIONDATE=20210406
#export VERSION=0.5
#export VERSIONDATE=20211222
#export VERSION=0.6
#export VERSIONDATE=20220322
#export VERSION=0.7
#export VERSIONDATE=20220907
#export VERSION=0.7.1
#export VERSIONDATE=20230910
#export VERSION=0.8.0
#export VERSIONDATE=20240903
#export VERSION=0.8.1
#export VERSIONDATE=20240905
#export VERSION=0.9.0
#export VERSIONDATE=20241221
export VERSION=0.9.1
export VERSIONDATE=20250212
wl-showstatus --package-version
export DEPENDENCIES=gtk3,gtk4,gobject-introspection,vala
#export DEPENDENCIES=gtk3,gtk4,gobject-introspection,vala,qt
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=meson,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=COPYING
export LICENSETYPE=LGPL
export DOWNLOADURL="https://github.com/flatpak/libportal/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/flatpak/libportal/releases/download/$VERSION/$BASENAME-$VERSION.tar.xz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xJ --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.xz
cd $BASENAME-$VERSION
# fix libportal/remote.c (version >= 0.3)
patch -ulbf libportal/remote.c << EOF
@@ -19,3 +19,5 @@

+#ifndef _WIN32
 #include <gio/gunixfdlist.h>
+#endif

@@ -720,2 +722,6 @@
 {
+#ifdef _WIN32
+  g_warning ("Failed to get pipewire fd: %s", "Not supported on Windows");
+  return -1;
+#else
   GVariantBuilder options;
@@ -751,2 +757,3 @@
   return g_unix_fd_list_get (fd_list, fd_out, NULL);
+#endif
 }
EOF
# fix missing gio-unix
sed -i.bak -e "s/gio-unix-/gio-windows-/" libportal/meson.build libportal.pc.in
mkdir -p build_both &&
 wl-showstatus configure &&
 #PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Dbuild-portal-test=false . build_both &&
 #PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Dbackends="['gtk3','gtk4']" -Dintrospection=true -Dvapi=true -Dportal-tests=false -Ddocs=false . build_both &&
 PKG_CONFIG= PKG_CONFIG_PATH=$MINGWPREFIX/qt/lib/pkgconfig${PKG_CONFIG_PATH:+:$PKG_CONFIG_PATH} PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib PATH=$PATH:$MINGWPREFIX/qt/bin $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Dintrospection=true -Dvapi=true -Dportal-tests=false -Ddocs=false . build_both &&
 ## fix slash/backslash path issue when calling Python from Ninja
 #sed -i.bak -e "s/join_paths/os.path.join/g; /COMMAND =.*python\.exe/ s?\"/\([a-zA-Z]\)/?\"\1:/?; /COMMAND =.*python\.exe/ s?/?\\\\?g" build_*/build.ninja &&
 ## fix Python path issues in meson_exe
 #sed -i.bak -e "s?$PYDIR?$(echo $PYDIR|sed -e "s?^/\([a-zA-Z]\)/?\1:/?")?" build_both/meson-private/meson_exe_python.exe_*.dat &&
 ## fix execution of Python scripts
 #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *= *\| *=.*\&\& *\)\(\"\{0,1\}[^ ]*\)\(\.py\|glib-mkenums\|g-ir-scanner\)\(\"\{0,1\} \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_both/build.ninja &&
 ## fix executing shell scripts
 #sed -i.bak -e "s?^\(\s*COMMAND\s*=\s*\)\(\"[^\"]*\.sh\"\)?\1\"$(cygpath -m $(which sh.exe))\" \2?" build_both/build.ninja &&
 wl-showstatus build-install &&
 PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib ninja -Cbuild_both install &&
    echo OK && find . -name '*.a'
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




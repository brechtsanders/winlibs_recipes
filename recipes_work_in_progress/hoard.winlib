export NAME="hoard"
export STATUS=
export URL=http://www.hoard.org/
export BASENAME=hoard
export DESCRIPTION="Hoard is a fast, scalable, and memory-efficient memory allocator that can speed up your applications. Itâ€™s much faster than built-in system allocators: as much as 2.5x faster than Linux, 3x faster than Windows, and 7x faster than Mac. No source code changes necessary. Cross-platform: works on Linux, Solaris, Mac OS X, and Windows."
export CATEGORY=system
export TYPE=library
#export VERSION=3.10
#export VERSIONDATE=20150510
#export VERSION=3.12
#export VERSIONDATE=20151231
export VERSION=3.13
export VERSIONDATE=20190102
wl-showstatus --package-version
export DEPENDANCIES=
export OPTIONALDEPENDANCIES=
export BUILDDEPENDANCIES=
export LICENSEFILE=COPYING
export LICENSETYPE=GPL
#export DOWNLOADURL="http://www.hoard.org/download-hoard/ Hoard -source.tar.gz"
#export DOWNLOADURL="https://github.com/emeryberger/Hoard/releases Hoard -source.tar.gz"
export DOWNLOADURL="https://github.com/emeryberger/Hoard/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://github.com/emeryberger/Hoard/releases/download/$VERSION/Hoard-$VERSION-source.tar.gz
export DOWNLOADSOURCEURL=https://github.com/emeryberger/Hoard/archive/$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#mv $TARBALLDIR/$BASENAME/$VERSION.tar.gz $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
wl-wait4deps
wl-showstatus extract
mkdir -p $BASENAME-$VERSION
#tar xfz $TARBALLDIR/$BASENAME/Hoard-$VERSION-source.tar.gz -C$BASENAME-$VERSION
#cd $BASENAME-$VERSION/Hoard
#tar xfz $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
tar xfz $TARBALLDIR/$BASENAME/$VERSION.tar.gz
cd hoard-$VERSION
wl-showstatus build &&
#cat >> src/Makefile << EOF
cat >> src/GNUmakefile << EOF
WIN_DEFINES = -DNDEBUG -D_WINDOWS -D_WINDLL -D_WINRT_DLL -D_UNICODE -DUNICODE
MINGW_FLAGS = -O3
mingw: \$(DEPS)
`printf "\\t"`g++ \$(INCLUDES) \$(MINGW_DEFINES) \$(MINGW_FLAGS) source/libhoard.cpp Heap-Layers/wrappers/winwrapper.cpp source/wintls.cpp -mdll -o libhoard.dll
`printf "\\t"`g++ \$(INCLUDES) \$(MINGW_DEFINES) \$(MINGW_FLAGS) -o source/uselibhoard.cpp
EOF
#make -Csrc mingw &&
#make -Csrc -fGNUmakefile generic-gcc &&
make -Csrc -fGNUmakefile mingw CXX="${CXX:-g++} -fpermissive" &&
    echo OK
  ./configure --help
  head COPYING* LICENSE*
  ls -l COPYING* LICENSE*
wl-showstatus configure &&
#./autogen.sh &&
#    echo OK
## fix building DLLs on 64-bit
#if ( echo $RUNPLATFORM | grep -q x86_64 ); then
# echo "AM_GNU_GETTEXT_VERSION([$(gettext --version|head -n1|sed -e "s/^.* \([0-9\.]*\) *$/\1/")])" >> configure.ac &&
# autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal
#fi
#INTLTOOL_PERL="$PERLDIR/bin/perl.exe" 
#PERL="$PERLDIR/bin/perl.exe -I$PERLDIR/lib" 
#PYTHON=$PYDIR/python.exe 
#PYTHON=$PYDIR/python.exe C_INCLUDE_PATH=$PYDIR/include${C_INCLUDE_PATH:+:$C_INCLUDE_PATH} 
#./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM LDFLAGS="-Wl,--as-needed -Wl,-no-undefined" &&
#./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM LDFLAGS="-Wl,--as-needed" &&
./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM &&
 ## fix building DLLs
 #mv libtool libtool.bak &&
 #sed -e "s/\(allow_undefined=\)yes/\1no/" libtool.bak > libtool &&
 #wl-showstatus build &&
 #make &&
 wl-showstatus build-install &&
 make install-strip &&
    ls -l $INSTALLPREFIX/lib/pkgconfig $INSTALLPREFIX/share/pkgconfig
    make install-pkgconfigDATA
#    mkdir -p build_test; cd build_test; cmake.exe -G"MSYS Makefiles" . -LH && echo OK; cd ..; rm -rf build_test
#wl-showstatus configure &&
#rm -f CMakeCache.txt; cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release . -LH && echo OK
#cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release . &&
# wl-showstatus build-install &&
# make install/strip &&
#    echo OK
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




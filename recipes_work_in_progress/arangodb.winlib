export NAME="ArangoDB"
export STATUS=
export URL=https://www.arangodb.com/
export BASENAME=arangodb
export DESCRIPTION="ArangoDB is a native multi-model database with flexible data models for documents, graphs, and key-values. Build high performance applications using a convenient SQL-like query language or JavaScript extensions."
export CATEGORY=database
export TYPE=application
#export VERSION=3.6.13.1
#export VERSIONDATE=20210908
#export VERSION=3.6.13.2
#export VERSIONDATE=20220314
#export VERSION=3.7.15
#export VERSIONDATE=20210923
#export VERSION=3.7.17
#export VERSIONDATE=20220126
#export VERSION=3.7.18
#export VERSIONDATE=20220517
#export VERSION=3.8.1
#export VERSIONDATE=20210819
#export VERSION=3.8.5
#export VERSIONDATE=20220122
#export VERSION=3.8.5.1
#export VERSIONDATE=20220203
#export VERSION=3.8.6
#export VERSIONDATE=20220217
#export VERSION=3.8.7
#export VERSIONDATE=20220603
#export VERSION=3.8.8
#export VERSIONDATE=20221018
#export VERSION=3.9.0
#export VERSIONDATE=20220207
#export VERSION=3.9.1
#export VERSIONDATE=20220405
#export VERSION=3.9.2
#export VERSIONDATE=20220608
#export VERSION=3.9.3
#export VERSIONDATE=20220831
#export VERSION=3.9.4
#export VERSIONDATE=20221018
#export VERSION=3.9.4.1
#export VERSIONDATE=20221027
#export VERSION=3.9.5
#export VERSIONDATE=20221110
#export VERSION=3.9.6
#export VERSIONDATE=20221207
#export VERSION=3.9.6.1
#export VERSIONDATE=20221213
#export VERSION=3.9.6.2
#export VERSIONDATE=20221214
#export VERSION=3.10.0
#export VERSIONDATE=20220929
#export VERSION=3.10.1
#export VERSIONDATE=20221104
export VERSION=3.10.2
export VERSIONDATE=20221217
####Wrong OpenSSL version was found: 3.0.1! Required version: 1.1.1*!
wl-showstatus --package-version
export DEPENDENCIES=openssl
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=Apache
#export DOWNLOADURL="https://github.com/arangodb/arangodb/releases"
export DOWNLOADURL="https://github.com/arangodb/arangodb/tags"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/arangodb/arangodb/archive/refs/tags/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xfz $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd $BASENAME-$VERSION
# don't use msbuild in 3rdParty/V8/CMakeLists.txt (version >= 3.8.1)
patch -ulbf 3rdParty/V8/CMakeLists.txt << EOF
@@ -128,3 +128,3 @@

-if (WIN32)
+if (MSVC)
   MESSAGE(STATUS "Building V8 for Windows with MSBUILD")
EOF
# fix CMakeLists.txt (version >= 3.8.6)
patch -ulbf CMakeLists.txt << EOF
@@ -546,3 +546,3 @@

-if (WINDOWS)
+if (MSVC)
   set(BASE_FLAGS     "/D WIN32 /D _WINDOWS /W3 /MP"      CACHE STRING "base flags")
@@ -1092,3 +1092,3 @@
 if (OPENSSL_FOUND)
-  if (NOT "\${OPENSSL_VERSION}" MATCHES "\${ARANGODB_REQUIRED_OPENSSL_VERSION}")
+  if ("\${OPENSSL_VERSION}" VERSION_LESS "\${ARANGODB_REQUIRED_OPENSSL_VERSION}")
     message (FATAL_ERROR "Wrong OpenSSL version was found: \${OPENSSL_VERSION}! Required version: \${MSG_ARANGODB_REQUIRED_OPENSSL_VERSION}!")
EOF
mkdir -p build_win &&
 wl-showstatus configure &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_STATIC_LIBS:BOOL=OFF -DDISABLE_WERROR:BOOL=ON -DDEBUG_MODE:BOOL=OFF -DCMAKE_USE_LIBSSH2:BOOL=ON -DCMAKE_USE_OPENSSL:BOOL=ON -DWITH_ZLIB:BOOL=OFF -DWITH_BZ2:BOOL=ON -DWITH_ZSTD:BOOL=ON -DWITH_LZ4:BOOL=ON -DOPENSSL_CRYPTO_LIBRARY:STRING="-lcrypto" -DOPENSSL_INCLUDE_DIR:PATH=$MINGWPREFIX/include/openssl -DPYTHON_EXECUTABLE:FILEPATH=$PY2DIR/python.exe -DPYTHON_INCLUDE_DIRS:PATH=$PYDIR/include -DCHECK_BENCHMARKS:BOOL=OFF -DWITH_BENCHMARK_TOOLS:BOOL=OFF -DUSE_TESTS:BOOL=OFF -DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) -S. -Bbuild_win &&
 cmake.exe -Wno-dev -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_STATIC_LIBS:BOOL=OFF -DDISABLE_WERROR:BOOL=ON -DDEBUG_MODE:BOOL=OFF -DCMAKE_USE_LIBSSH2:BOOL=ON -DCMAKE_USE_OPENSSL:BOOL=ON -DWITH_ZLIB:BOOL=OFF -DWITH_BZ2:BOOL=ON -DWITH_ZSTD:BOOL=ON -DWITH_LZ4:BOOL=ON -DOPENSSL_CRYPTO_LIBRARY:STRING="-lcrypto" -DOPENSSL_INCLUDE_DIR:PATH=$MINGWPREFIX/include/openssl -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DPYTHON_INCLUDE_DIRS:PATH=$PYDIR/include -DCHECK_BENCHMARKS:BOOL=OFF -DWITH_BENCHMARK_TOOLS:BOOL=OFF -DUSE_TESTS:BOOL=OFF -DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) -S. -Bbuild_win &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_STATIC_LIBS:BOOL=OFF -DDISABLE_WERROR:BOOL=ON -DDEBUG_MODE:BOOL=OFF -DCMAKE_USE_LIBSSH2:BOOL=ON -DCMAKE_USE_OPENSSL:BOOL=ON -DWITH_ZLIB:BOOL=OFF -DWITH_BZ2:BOOL=ON -DWITH_ZSTD:BOOL=ON -DWITH_LZ4:BOOL=ON -DOPENSSL_CRYPTO_LIBRARY:STRING="-lcrypto" -DOPENSSL_INCLUDE_DIR:PATH=$MINGWPREFIX/include/openssl -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DPYTHON_INCLUDE_DIRS:PATH=$PYDIR/include -DCHECK_BENCHMARKS:BOOL=OFF -DWITH_BENCHMARK_TOOLS:BOOL=OFF -DUSE_TESTS:BOOL=OFF -DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) -S. -Bbuild_win &&
 wl-showstatus build-install &&
 make -Cbuild_win install/strip &&
 #ninja -Cbuild_win install/strip &&
    echo OK

#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -S. -Bbuild_static &&
# #-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -S. -Bbuild_shared &&
# ## fix execution of Python scripts
# #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|glib-genmarshal\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
# #wl-showstatus build &&
# #ninja -Cbuild_static &&
# #wl-showstatus build &&
# #ninja -Cbuild_shared &&
# wl-showstatus build-install &&
# ninja -Cbuild_static install/strip &&
# wl-showstatus build-install &&
# ninja -Cbuild_shared install/strip &&
#    echo OK

# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




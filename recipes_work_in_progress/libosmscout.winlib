export NAME="libosmscout"
export STATUS=
#export URL=http://libosmscout.sourceforge.net/
export URL=https://github.com/Framstag/libosmscout
export BASENAME=libosmscout
export DESCRIPTION="libosmscout offers applications simple, high-level interfaces to offline rendering and routing functionalities based on OpenStreetMap (OSM) data. It does so by preprocessing *.osm data files and generating platform independent compact binary data and index files for fast access. The high level API offers simple datatypes and methods to fetch data based on these datatypes for use in map drawing, location of POIs and routing. It also offers code for drawing maps (currently using cairo) based on these information."
export CATEGORY=geo
export TYPE=library
#export VERSION=1.1.0
#export VERSIONDATE=20101119
#export VERSION=2023.03.25.2
#export VERSIONDATE=20230326
#export VERSION=2023.03.30.1
#export VERSIONDATE=20230331
#export VERSION=2024.06.02.1
#export VERSIONDATE=20240603
#export VERSION=2024.09.07.1
#export VERSIONDATE=20240907
#export VERSION=2024.09.08.1
#export VERSIONDATE=20240908
export VERSION=2024.09.14.1
export VERSIONDATE=20240914
wl-showstatus --package-version
export DEPENDENCIES=
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=meson,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=LGPL
export DOWNLOADURL="https://github.com/Framstag/libosmscout/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://github.com/Framstag/libosmscout/archive/$VERSION.tar.gz
#export DOWNLOADSOURCEURL=https://github.com/Framstag/libosmscout/releases/download/v$VERSION/$BASENAME-$VERSION.tar.xz
export DOWNLOADSOURCEURL=https://github.com/Framstag/libosmscout/releases/download/latest/$BASENAME-$VERSION-latest.tar.xz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
#tar xz --force-local -f $TARBALLDIR/$BASENAME/$VERSION.tar.gz
#tar xJ --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.xz
#cd $BASENAME-$VERSION
tar xJ --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION-latest.tar.xz
cd $BASENAME-$VERSION-latest
#-Dc_args=$CFLAGS -Dcpp_args=$CXXFLAGS -Dc_link_args=$LDFLAGS
mkdir -p build_both &&
 wl-showstatus configure &&
 #PKG_CONFIG= PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library static . build_both &&
 PKG_CONFIG= PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both . build_both &&
 ## fix slash/backslash path issue when calling Python from Ninja
 #sed -i.bak -e "s/join_paths/os.path.join/g; /COMMAND =.*python\.exe/ s?\"/\([a-zA-Z]\)/?\"\1:/?; /COMMAND =.*python\.exe/ s?/?\\\\?g" build_*/build.ninja &&
 ## fix Python path issues in meson_exe
 #sed -i.bak -e "s?$PYDIR?$(echo $PYDIR|sed -e "s?^/\([a-zA-Z]\)/?\1:/?")?" build_both/meson-private/meson_exe_python.exe_*.dat &&
 wl-showstatus build-install &&
 PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib ninja -Cbuild_both install &&
    echo OK && find . -name '*.a'
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && rm -rf $BASENAME-$VERSION




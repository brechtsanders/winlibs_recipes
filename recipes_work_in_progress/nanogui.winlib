#export NAME="NanoGUI"
#export STATUS=
#export URL=https://github.com/wjakob/nanogui
#export BASENAME=nanogui
#export DESCRIPTION="NanoGUI is a minimalistic cross-platform widget library for OpenGL 3.x or higher."
#export CATEGORY=graphics
#export TYPE=library
#export VERSION=master
#export VERSIONDATE=20160912
#wl-showstatus --package-version
#export DEPENDENCIES=glfw
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=cmake
#export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=LICENSE.txt
#export LICENSETYPE="BSD-style"
##export DOWNLOADURL="https://github.com/wjakob/nanogui/releases"
#export DOWNLOADURL="https://github.com/wjakob/nanogui/tags"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://github.com/wjakob/nanogui/archive/$VERSION.tar.gz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
##mv $TARBALLDIR/$BASENAME/$VERSION.tar.gz $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
#wl-wait4deps
#wl-showstatus extract
##tar xz --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
#tar xz --force-local -f $TARBALLDIR/$BASENAME/$VERSION.tar.gz
#cd $BASENAME-$VERSION
## fix CMakeLists.txt (version >= master)
#patch -ulbf CMakeLists.txt << EOF
#@@ -13,3 +13,3 @@
#
#-if (NOT IS_DIRECTORY "\${CMAKE_CURRENT_SOURCE_DIR}/ext/glfw/src")
#+if (NOT IS_DIRECTORY "\${CMAKE_CURRENT_SOURCE_DIR}/ext/glfw/src" AND NOT MINGW)   message(FATAL_ERROR "The NanoGUI dependency repositories (GLFW, etc.) are missing! "
#EOF
#mkdir -p ext/glfw/src
#touch ext/glfw/CMakeLists.txt
#
#mkdir -p build_test && cmake.exe -G"MSYS Makefiles" -DNANOGUI_BUILD_SHARED:BOOL=ON -DNANOGUI_BUILD_PYTHON:BOOL=OFF -DNANOGUI_BUILD_EXAMPLE:BOOL=OFF -S. -Bbuild_test -LH && echo OK; rm -rf build_test
#
## wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION



export NAME="NanoGUI"
export STATUS=
export URL=https://github.com/mitsuba-renderer/nanogui
export BASENAME=nanogui
export DESCRIPTION="NanoGUI is a minimalistic cross-platform widget library for OpenGL 3+, GLES 2/3, and Metal. It supports automatic layout generation, stateful C++ lambdas callbacks, a variety of useful widget types and Retina-capable rendering on Apple devices."
export CATEGORY=gui
export TYPE=library
export VERSION=0.2.0
export VERSIONDATE=20250121
wl-showstatus --package-version
export DEPENDENCIES=
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE.txt
export LICENSETYPE=BSD
export DOWNLOADURL="https://github.com/mitsuba-renderer/nanogui/tags"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/mitsuba-renderer/nanogui/archive/refs/tags/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd $BASENAME-$VERSION

mkdir -p ext/glfw/src ext/nanobind
touch ext/glfw/CMakeLists.txt ext/nanobind/CMakeLists.txt

#grep -wi add_library $(find -name CMakeLists.txt -or -name '*.cmake')
#mkdir -p build_test && cmake.exe -G"MSYS Makefiles" -DNANOGUI_BUILD_SHARED:BOOL=ON -DNANOGUI_BUILD_PYTHON:BOOL=OFF -DNANOGUI_BUILD_GLFW:BOOL=OFF -DNANOGUI_BUILD_GLAD:BOOL=OFF -DNANOGUI_BUILD_EXAMPLES:BOOL=OFF -DPython_EXECUTABLE:FILEPATH=$PYDIR/python.exe -S. -Bbuild_test -LH && echo OK; rm -rf build_test

#mkdir -p build_static build_shared &&
# wl-showstatus configure-static &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -S. -Bbuild_static &&
# #-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
# wl-showstatus configure-shared &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -S. -Bbuild_shared &&
# ## fix execution of Python scripts
# #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|glib-genmarshal\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
# ## fix missing link libraries
# #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lws2_32/" build_shared/build.ninja &&
# #wl-showstatus build-static &&
# #cmake.exe --build build_static &&
# #ninja -Cbuild_static &&
# #wl-showstatus build-shared &&
# #cmake.exe --build build_shared &&
# #ninja -Cbuild_shared &&
# wl-showstatus build-install-static &&
# #cmake.exe --install build_static --strip &&
# #cmake.exe --build build_static --target "install/strip" &&
# #cmake.exe --build build_static --target "library/install/strip" &&
# ninja -Cbuild_static install/strip &&
# #ninja -Cbuild_static library/install/strip &&
# wl-showstatus build-install-shared &&
# #cmake.exe --install build_shared --strip &&
# #cmake.exe --build build_shared --target "install/strip" &&
# ninja -Cbuild_shared install/strip &&
#    echo OK
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




export NAME="Sysprof"
export STATUS=
export URL=https://www.sysprof.com/
export BASENAME=sysprof
export DESCRIPTION="Sysprof is a sampling profiler that uses a kernel module to generate stacktraces which are then interpreted by the userspace program \"sysprof\"."
export CATEGORY=development
export TYPE=library
#export VERSION=47.2
#export VERSIONDATE=20241204
#export VERSION=48.0
#export VERSIONDATE=20250316
#export VERSION=48.1
#export VERSIONDATE=20250828
export VERSION=49.0
export VERSIONDATE=20250913
wl-showstatus --package-version
export DEPENDENCIES=portableendian,mman-win32
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=meson,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=COPYING
export LICENSETYPE=GPL
export DOWNLOADURL="https://gitlab.gnome.org/GNOME/sysprof/-/tags"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://gitlab.gnome.org/GNOME/sysprof/-/archive/$VERSION/$BASENAME-$VERSION.tar.bz2
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xj --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.bz2
cd $BASENAME-$VERSION
# fix src/libsysprof-capture/sysprof-macros-internal.h (version >= 48.0)
patch -ulbf src/libsysprof-capture/sysprof-macros-internal.h << EOF
@@ -66,2 +66,4 @@
 # include <architecture/byte_order.h>
+#elifdef _WIN32
+# include <portable_endian.h>
 #else
EOF
# fix src/libsysprof-capture/sysprof-capture-types.h (version >= 48.0)
patch -ulbf src/libsysprof-capture/sysprof-capture-types.h << EOF
@@ -61,2 +61,4 @@
 # include <machine/endian.h>
+#elifdef _WIN32
+# include <portable_endian.h>
 #else
EOF
# fix src/libsysprof-capture/sysprof-capture-writer.c (version >= 48.0)
patch -ulbf src/libsysprof-capture/sysprof-capture-writer.c << EOF
@@ -61,2 +61,4 @@
 # include <machine/endian.h>
+#elifdef _WIN32
+# include <portable_endian.h>
 #else
EOF
# fix src/libsysprof-capture/sysprof-macros-internal.h (version >= 48.0)
patch -ulbf src/libsysprof-capture/sysprof-macros-internal.h << EOF
@@ -66,2 +66,4 @@
 # include <architecture/byte_order.h>
+#elifdef _WIN32
+# include <portable_endian.h>
 #else
@@ -97 +99,6 @@
 #endif
+#ifdef __MINGW32__
+#define bswap_16(x) __builtin_bswap16(x)
+#define bswap_32(x) __builtin_bswap32(x)
+#define bswap_64(x) __builtin_bswap64(x)
+#endif
EOF
# fix src/libsysprof-capture/sysprof-capture-writer.c (version >= 48.0)
patch -ulbf src/libsysprof-capture/sysprof-capture-writer.c << EOF
@@ -61,2 +61,4 @@
 # include <machine/endian.h>
+#elifdef _WIN32
+# include <portable_endian.h>
 #else
@@ -509,3 +511,3 @@
   time (&now);
-  if (strftime (now_str, sizeof (now_str), "%FT%TZ", gmtime (&now)) == 0)
+  if (strftime (now_str, sizeof (now_str), "%Y-%m-%dT%H:%M:%SZ", gmtime (&now)) == 0)
     {
EOF
# fix src/libsysprof-capture/sysprof-collector.c (version >= 48.0)
patch -ulbf src/libsysprof-capture/sysprof-collector.c << EOF
@@ -61,3 +61,5 @@
 #include <fcntl.h>
+#ifndef _WIN32
 #include <poll.h>
+#endif
 #include <pthread.h>
EOF
# fix src/libsysprof-capture/sysprof-capture-util-private.h (version >= 48.0)
patch -ulbf src/libsysprof-capture/sysprof-capture-util-private.h << EOF
@@ -66,2 +66,3 @@
 #include <unistd.h>
+#include <stdint.h>

EOF
# fix src/libsysprof-capture/sysprof-platform.c (version >= 48.0)
patch -ulbf src/libsysprof-capture/sysprof-platform.c << EOF
@@ -60,3 +60,5 @@
 #include <stdlib.h>
+#ifndef _WIN32
 #include <sys/syscall.h>
+#endif
 #include <unistd.h>
@@ -131,2 +133,3 @@

+#ifndef _WIN32
 #ifdef __APPLE__
@@ -138,2 +141,5 @@
   fd = TEMP_FAILURE_RETRY (mkostemp (template, flags));
+#else
+  fd = TEMP_FAILURE_RETRY (mkstemp (template));
+#endif
   if (fd < 0)
EOF
# fix src/libsysprof-capture/sysprof-collector.c (version >= 48.1)
patch -ulbf src/libsysprof-capture/sysprof-collector.c << EOF
@@ -73,4 +73,8 @@
 #include <string.h>
+#ifdef _WIN32
+#include <winsock2.h>
+#else
 #include <sys/socket.h>
 #include <sys/syscall.h>
+#endif
 #include <sys/types.h>
EOF

#export DEPENDENCIES=portableendian
#sed -i.bak -e "s/\(<\)\(endian\.h>\)/\1portable_\2/" src/libsysprof-capture/sysprof-macros-internal.h src/libsysprof-capture/sysprof-capture-types.h src/libsysprof-capture/sysprof-capture-writer.c

#-Dc_args=$CFLAGS -Dcpp_args=$CXXFLAGS -Dc_link_args=$LDFLAGS -Dcpp_link_args=$LDFLAGS
## fix location of Perl
#sed -i.bak -e "s?'perl'?'$(cygpath -w $PERLDIR/bin/perl.exe|sed -e 's/\\/&&&&/g')'?" meson.build
## fix detection of Python
#sed -i.bak -e "s?'python3'?'$(cygpath -w $PYDIR/python.exe|sed -e 's/\\/&&&&/g')'?" meson.build
## fix missing gio-unix
##sed -i.bak -e "s/gio-unix-/gio-/" meson.build
#sed -i.bak -e "s/gio-unix-/gio-windows-/" meson.build
mkdir -p build_both &&
 wl-showstatus configure &&
 PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Dlibsysprof=false -Dsysprofd=none -Dgtk=false -Dpolkit-agent=disabled -Dtools=false -Ddebuginfod=disabled -Dhelp=false -Dexamples=false -Dtests=false -Dc_args="-I$MINGWPREFIX/include/mman-win32" -Dc_link_args="-Wl,--as-needed -lmman" . build_both &&
 ## fix slash/backslash path issue when calling Python from Ninja
 #sed -i.bak -e "s/join_paths/os.path.join/g; /COMMAND =.*python\.exe/ s?\"/\([a-zA-Z]\)/?\"\1:/?; /COMMAND =.*python\.exe/ s?/?\\\\?g" build_*/build.ninja &&
 ## fix Python path issues in meson_exe
 #sed -i.bak -e "s?$PYDIR?$(echo $PYDIR|sed -e "s?^/\([a-zA-Z]\)/?\1:/?")?" build_both/meson-private/meson_exe_python.exe_*.dat &&
 ## fix execution of Python scripts
 #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *= *\| *=.*\&\& *\)\(\"\{0,1\}[^ ]*\)\(\.py\|glib-mkenums\|g-ir-scanner\|asciidoc\)\(\"\{0,1\} \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_both/build.ninja &&
 ## fix executing shell scripts
 #sed -i.bak -e "s?^\(\s*COMMAND\s*=\s*\)\(\"[^\"]*\.sh\"\)?\1\"$(cygpath -m $(which sh.exe))\" \2?" build_both/build.ninja &&
 wl-showstatus build-install &&
 #PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib \
 #PATH=$PYDIR:$PATH PYTHONPATH=$MINGWPREFIX/python/Lib/site-packages${PYTHONPATH:+:$PYTHONPATH} \
 #ninja -Cbuild_both install/strip &&
 ninja -Cbuild_both install &&
    echo OK && find . -name '*.a'
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




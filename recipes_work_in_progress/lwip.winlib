export NAME="lwIP"
export STATUS=
#export URL=https://savannah.nongnu.org/projects/lwip/
export URL=http://www.nongnu.org/lwip/
export BASENAME=lwip
export DESCRIPTION="lwIP is a small independent implementation of the TCP/IP protocol suite.  The focus of the lwIP TCP/IP implementation is to reduce the RAM usage while still having a full scale TCP. This making lwIP suitable for use in embedded systems with tens of kilobytes of free RAM and room for around 40 kilobytes of code ROM"
export CATEGORY=communication
export TYPE=library
export VERSION=2.2.0
export VERSIONDATE=20241027
wl-showstatus --package-version
export DEPENDENCIES=winpcap
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=COPYING
export LICENSETYPE=BSD
#export DOWNLOADURL="http://download.savannah.nongnu.org/releases/lwip/"
export DOWNLOADURL="https://git.savannah.gnu.org/cgit/lwip.git lwip-STABLE- _RELEASE.tar.gz"
#export DOWNLOADURL="https://github.com/lwip-tcpip/lwip/tags lwip-STABLE- _RELEASE.tar.gz"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://download.savannah.nongnu.org/releases/lwip/$BASENAME-$VERSION.zip
export DOWNLOADSOURCEURL=https://git.savannah.gnu.org/cgit/lwip.git/snapshot/lwip-STABLE-$(echo $VERSION|tr . _)_RELEASE.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/lwip-STABLE-$(echo $VERSION|tr . _)_RELEASE.tar.gz
cd lwip-STABLE-$(echo $VERSION|tr . _)_RELEASE
cp contrib/examples/example_app/lwipcfg.h.example contrib/examples/example_app/lwipcfg.h
# fix contrib/ports/win32/Filelists.cmake (version >= 2.2.0)
patch -ulbf contrib/ports/win32/Filelists.cmake << EOF
@@ -26,3 +26,6 @@
 endif()
-if (\${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
+if (MINGW)
+    find_library(WPCAP  wpcap  HINTS \${WPDPACK_DIR}/lib)
+    find_library(PACKET packet HINTS \${WPDPACK_DIR}/lib)
+elseif (\${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
     if(CMAKE_SIZEOF_VOID_P EQUAL 8)
EOF
mkdir -p build_static build_shared &&
 wl-showstatus configure-static &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DWPDPACK_DIR:PATH=$MINGWPREFIX -S. -Bbuild_static &&
 #-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
 wl-showstatus configure-shared &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DWPDPACK_DIR:PATH=$MINGWPREFIX -S. -Bbuild_shared &&
 ## fix execution of Python scripts
 #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|glib-genmarshal\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
 ## fix missing link libraries
 #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lws2_32/" build_shared/build.ninja &&
 wl-showstatus build-static &&
 ninja -Cbuild_static &&
 wl-showstatus build-shared &&
 ninja -Cbuild_shared &&
 wl-showstatus build-install-static &&
 ninja -Cbuild_static install/strip &&
 wl-showstatus build-install-shared &&
 ninja -Cbuild_shared install/strip &&
    echo OK
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf lwip-STABLE-$(echo $VERSION|tr . _)_RELEASE




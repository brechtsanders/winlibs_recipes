export NAME="Tarantool"
export STATUS=
export URL=https://www.tarantool.io/
export BASENAME=tarantool
export DESCRIPTION="Tarantool is an in-memory computing platform consisting of a database and an application server."
export CATEGORY=database
export TYPE=library
#export VERSION=2.10.0
#export VERSIONDATE=20220614
#export VERSION=2.10.1
#export VERSIONDATE=20220808
#export VERSION=2.10.2
#export VERSIONDATE=20220902
#export VERSION=2.10.3
#export VERSIONDATE=20220930
#export VERSION=2.10.4
#export VERSIONDATE=20221112
#export VERSION=2.10.5
#export VERSIONDATE=20230220
#export VERSION=2.10.6
#export VERSIONDATE=20230322
#export VERSION=2.10.7
#export VERSIONDATE=20230524
#export VERSION=2.10.8
#export VERSIONDATE=20230915
#export VERSION=2.11.0
#export VERSIONDATE=20230524
#export VERSION=2.11.1
#export VERSIONDATE=20230821
#export VERSION=2.11.2
#export VERSIONDATE=20231208
#export VERSION=2.11.3
#export VERSIONDATE=20240418
#export VERSION=2.11.4
#export VERSIONDATE=20240820
#export VERSION=2.11.5
#export VERSIONDATE=20241123
#export VERSION=2.11.6
#export VERSIONDATE=20250225
#export VERSION=3.0.0
#export VERSIONDATE=20231226
#export VERSION=3.0.1
#export VERSIONDATE=20240126
#export VERSION=3.0.2
#export VERSIONDATE=20240417
#export VERSION=3.1.0
#export VERSIONDATE=20240417
#export VERSION=3.1.1
#export VERSIONDATE=20240802
#export VERSION=3.1.2
#export VERSIONDATE=20240827
#export VERSION=3.2.0
#export VERSIONDATE=20240828
#export VERSION=3.2.1
#export VERSIONDATE=20241029
#export VERSION=3.3.0
#export VERSIONDATE=20241130
export VERSION=3.3.1
export VERSIONDATE=20241226
####CMake Error at cmake/os.cmake:174 (message): Unsupported platform -- Windows
wl-showstatus --package-version
export DEPENDENCIES=zstd,libcurl,readline,libyaml,msgpuck
export OPTIONALDEPENDENCIES=libunwind
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=BSD
export DOWNLOADURL="https://github.com/tarantool/tarantool/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/tarantool/tarantool/archive/refs/tags/$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/$VERSION.tar.gz
cd $BASENAME-$VERSION
# avoid building dependencies
mkdir -p src/lib/small
touch src/lib/small/CMakeLists.txt
# fix cmake/os.cmake (version >= 2.10.5)
patch -ulbf cmake/os.cmake << EOF
@@ -173,3 +173,3 @@
 else()
-    message (FATAL_ERROR "Unsupported platform -- \${CMAKE_SYSTEM_NAME}")
+    message (WARNING "Unsupported platform -- \${CMAKE_SYSTEM_NAME}")
 endif()
EOF
# fix cmake/atomic.cmake (version >= 2.11.0)
patch -ulbf cmake/atomic.cmake << EOF
@@ -45,3 +45,3 @@
 else()
-    message(FATAL_ERROR "C atomics not supported")
+    message(WARNING "C atomics not supported")
 endif()
EOF

#grep -wi add_library $(find -name CMakeLists.txt -or -name '*.cmake')

mkdir -p build_test && cmake.exe -G"MSYS Makefiles" -DENABLE_BUNDLED_ZSTD:BOOL=OFF -DENABLE_BUNDLED_LIBCURL:BOOL=OFF -DENABLE_BUNDLED_LIBYAML:BOOL=OFF -DENABLE_BUNDLED_MSGPUCK:BOOL=OFF -DENABLE_BUNDLED_LIBUNWIND:BOOL=OFF -DTARANTOOL_VERSION:STRING="$VERSION" -DICU_LIBRARY_DATA:FILEPATH=-licudt -DICU_LIBRARY_I18N:FILEPATH=-licuin -S. -Bbuild_test -LH && echo OK; rm -rf build_test

#export BUILDDEPENDENCIES=cmake
#export OPTIONALBUILDDEPENDENCIES=
#PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ 
#-DCMAKE_SYSTEM_NAME=Windows 
#-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
#mkdir -p build_win &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -S. -Bbuild_win &&
# #wl-showstatus build &&
# #make -Cbuild_win &&
# wl-showstatus build-install &&
# make -Cbuild_win install/strip &&
#    echo OK

#export BUILDDEPENDENCIES=cmake,ninja
#export OPTIONALBUILDDEPENDENCIES=
#PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ 
#-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
#mkdir -p build_win &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -S. -Bbuild_win &&
# #wl-showstatus build &&
# #ninja -Cbuild_win &&
# wl-showstatus build-install &&
# ninja -Cbuild_win install/strip &&
#    echo OK

#export BUILDDEPENDENCIES=cmake,ninja
#export OPTIONALBUILDDEPENDENCIES=
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -S. -Bbuild_static &&
# #-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -S. -Bbuild_shared &&
# ## fix execution of Python scripts
# #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|glib-genmarshal\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
# ## fix missing link libraries
# #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lws2_32/" build_shared/build.ninja &&
# #wl-showstatus build &&
# #ninja -Cbuild_static &&
# #wl-showstatus build &&
# #ninja -Cbuild_shared &&
# wl-showstatus build-install &&
# ninja -Cbuild_static install/strip &&
# wl-showstatus build-install &&
# ninja -Cbuild_shared install/strip &&
#    echo OK

#-DCMAKE_BUILD_TYPE:STRING=MinSizeRel

#export BUILDDEPENDENCIES=meson,ninja
#export OPTIONALBUILDDEPENDENCIES=
#-Dc_args=$CFLAGS -Dcpp_args=$CXXFLAGS -Dc_link_args=$LDFLAGS
## fix missing gio-unix
#sed -i.bak -e "s/gio-unix-/gio-/" meson.build
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library static -D documentation=true . build_static &&
# wl-showstatus configure &&
# PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library shared -D documentation=true . build_shared &&
# ## fix slash/backslash path issue when calling Python from Ninja
# #sed -i.bak -e "s/join_paths/os.path.join/g; /COMMAND =.*python\.exe/ s?\"/\([a-zA-Z]\)/?\"\1:/?; /COMMAND =.*python\.exe/ s?/?\\\\?g" build_*/build.ninja &&
# ## add linker flag
# #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*-ladvapi32/& -Wl,--as-needed/" build_shared/build.ninja &&
# ## add linker flag
# #sed -i.bak -e "s/^\s*LINK_ARGS\s*=.*\"-ladvapi32\"/& \"-Wl,--as-needed\"/" build_shared/build.ninja &&
# wl-showstatus build-install &&
# #PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -C build_static install &&
# PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -C build_static install/strip &&
# wl-showstatus build-install &&
# #PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -C build_shared install &&
# PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -C build_shared install/strip &&
#    echo OK && find . -name '*.a'

#export BUILDDEPENDENCIES=meson,ninja
#export OPTIONALBUILDDEPENDENCIES=
#-Dc_args=$CFLAGS -Dcpp_args=$CXXFLAGS -Dc_link_args=$LDFLAGS
## fix location of Perl
#sed -i.bak -e "s?'perl'?'$(cygpath -w $PERLDIR/bin/perl.exe|sed -e 's/\\/&&&&/g')'?" meson.build
## fix detection of Python
#sed -i.bak -e "s?'python3'?'$(cygpath -w $PYDIR/python.exe|sed -e 's/\\/&&&&/g')'?" meson.build
## fix missing gio-unix
##sed -i.bak -e "s/gio-unix-/gio-/" meson.build
#sed -i.bak -e "s/gio-unix-/gio-windows-/" meson.build
#mkdir -p build_both &&
# wl-showstatus configure &&
# PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Ddocumentation=true . build_both &&
# ## fix slash/backslash path issue when calling Python from Ninja
# #sed -i.bak -e "s/join_paths/os.path.join/g; /COMMAND =.*python\.exe/ s?\"/\([a-zA-Z]\)/?\"\1:/?; /COMMAND =.*python\.exe/ s?/?\\\\?g" build_*/build.ninja &&
# ## fix Python path issues in meson_exe
# #sed -i.bak -e "s?$PYDIR?$(echo $PYDIR|sed -e "s?^/\([a-zA-Z]\)/?\1:/?")?" build_both/meson-private/meson_exe_python.exe_*.dat &&
# ## fix execution of Python scripts
# #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *= *\| *=.*\&\& *\)\(\"\{0,1\}[^ ]*\)\(\.py\|glib-mkenums\|g-ir-scanner\|asciidoc\)\(\"\{0,1\} \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_both/build.ninja &&
# ## fix executing shell scripts
# #sed -i.bak -e "s?^\(\s*COMMAND\s*=\s*\)\(\"[^\"]*\.sh\"\)?\1\"$(cygpath -m $(which sh.exe))\" \2?" build_both/build.ninja &&
# wl-showstatus build-install &&
# PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -Cbuild_both install/strip &&
# #PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -Cbuild_both install &&
# #PATH=$PERLDIR/../c/bin:$PERLDIR/bin:$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -Cbuild_both install &&
#    echo OK && find . -name '*.a'

#wl-showstatus install &&
# mkdir -p $INSTALLPREFIX/python/Lib/site-packages &&
# PYTHONPATH=$INSTALLPREFIX/python/Lib/site-packages:$MINGWPREFIX/python/Lib/site-packages $PYDIR/python setup.py install --prefix=$(cygpath.exe -w $INSTALLPREFIX/python) &&
#    echo OK

#export DEPENDENCIES=qt
#wl-showstatus configure &&
# $MINGWPREFIX/qt/bin/qmake -makefile *.pro -spec $MINGWPREFIX/qt/mkspecs/win32-g++ &&
# wl-showstatus build &&
# mingw32-make &&
#    echo OK

#export DEPENDENCIES=qt
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cd build_static &&
# $MINGWPREFIX/qt/bin/qmake -makefile ../*.pro -spec $MINGWPREFIX/qt/mkspecs/win32-g++ CONFIG+=staticlib &&
# cd .. &&
# wl-showstatus configure &&
# cd build_shared &&
# $MINGWPREFIX/qt/bin/qmake -makefile ../*.pro -spec $MINGWPREFIX/qt/mkspecs/win32-g++ &&
# cd .. &&
# wl-showstatus build &&
# mingw32-make -Cbuild_static &&
# wl-showstatus build &&
# mingw32-make -Cbuild_shared &&
#    echo OK

#mkdir -p $INSTALLPREFIX/python/Lib/site-packages
#wl-showstatus build-install &&
# PATH=$PYDIR:$PATH PYTHON=$PYDIR/python.exe PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/python/Lib/site-packages:$INSTALLPREFIX/python:$PYDIR/Lib/site-packages:$INSTALLPREFIX/python/Lib/site-packages $PYDIR/python.exe setup.py install --prefix=$(cygpath -w $INSTALLPREFIX/python) &&
# ## delete any __pycache__ folder(s)
# #find $INSTALLPREFIX -name __pycache__ -exec echo rm -rf {} \; | sh &&
#    echo OK

# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




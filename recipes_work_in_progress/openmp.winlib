export NAME="OpenMP"
export STATUS=
export URL=https://openmp.llvm.org/
export BASENAME=openmp
export DESCRIPTION="The OpenMP subproject of LLVM contains the components required to build an executable OpenMP program that are outside the compiler itself."
export CATEGORY=development
export TYPE=application
#export VERSION=9.0.0
#export VERSIONDATE=20190930
#export VERSION=9.0.1
#export VERSIONDATE=20200224
#export VERSION=10.0.0
#export VERSIONDATE=20200326
#export VERSION=10.0.1
#export VERSIONDATE=20200804
export VERSION=11.0.0
export VERSIONDATE=20201012
#export VERSION=12.0.0
#export VERSIONDATE=20210419
wl-showstatus --package-version
export DEPENDENCIES=
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE.TXT
export LICENSETYPE=Apache/MIT/UIUC
#export DOWNLOADURL="http://llvm.org/releases/download.html openmp- .src.tar.xz"
export DOWNLOADURL="https://github.com/llvm/llvm-project/releases openmp- .src.tar.xz"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://llvm.org/releases/$VERSION/$BASENAME-$VERSION.src.tar.xz
export DOWNLOADSOURCEURL=https://github.com/llvm/llvm-project/releases/download/llvmorg-$VERSION/$BASENAME-$VERSION.src.tar.xz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
tar xfJh $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.src.tar.xz
cd $BASENAME-$VERSION.src
# fix runtime/CMakeLists.txt (version >= 11.0.0)
patch -ulbf runtime/CMakeLists.txt << EOF
@@ -213,3 +213,3 @@
 # Enable MASM Compiler if it is needed (Windows only)
-if(WIN32)
+if(MSVC)
   enable_language(ASM_MASM)
EOF
mkdir -p build_win &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DLIBOMP_ENABLE_SHARED:BOOL=ON -DCMAKE_ASM_MASM_COMPILER=$(which jwasm.exe) -DLIBOMP_ASMFLAGS:STRING=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "-D_M_AMD64"; else echo "-D_M_IA32"; fi) -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe -S. -Bbuild_win &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DLIBOMP_ENABLE_SHARED:BOOL=ON -DCMAKE_ASM_MASM_COMPILER=$(which vsyasm.exe) -DLIBOMP_ASMFLAGS:STRING=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "-D_M_AMD64"; else echo "-D_M_IA32"; fi) -DPYTHON_EXECUTABLE:PATH=$PYDIR/python.exe -S. -Bbuild_win &&
 wl-showstatus build-install &&
 ninja -Cbuild_win install/strip &&
    echo OK
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && rm -rf $BASENAME-$VERSION.src
####Superseded by llvm-project all-in-one build




export NAME="KIO"
export STATUS=
export URL=https://api.kde.org/frameworks/kio/html/index.html
export BASENAME=libkf6kio
export DESCRIPTION="Resource and network access abstraction (KDE Frameworks 6 (KDF6) Tier 3 framework)"
export CATEGORY=framework
export TYPE=library
#export VERSION=6.0.0
#export VERSIONDATE=20240317
#export VERSION=6.1.0
#export VERSIONDATE=20240413
#export VERSION=6.2.0
#export VERSIONDATE=20240510
#export VERSION=6.3.0
#export VERSIONDATE=20240607
#export VERSION=6.4.0
#export VERSIONDATE=20240713
#export VERSION=6.4.1
#export VERSIONDATE=20240719
export VERSION=6.5.0
export VERSIONDATE=20240810
wl-showstatus --package-version
export DEPENDENCIES=qt6,libkf6crash,libkf6dbusaddons,libkf6service,libkf6solid,libkf6completion,libkf6iconthemes,libkf6itemviews,libkf6jobwidgets,libkf6windowsystem,libkf6bookmarks,libkf6sonnet,libkf6i18n,libkf6textwidgets,libkf6archive,zlib,gettext
export OPTIONALDEPENDENCIES=libkf6doctools,libkf6wallet
export BUILDDEPENDENCIES=cmake,extra-cmake-modules
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSES/LGPL-3.0-only.txt
export LICENSETYPE=LGPL
#export DOWNLOADURL="https://kde.org/announcements/ kde-frameworks- .php"
export DOWNLOADURL="https://download.kde.org/stable/frameworks/ kio-"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=http://download.kde.org/stable/frameworks/$(echo $VERSION|sed -e "s/^\([0-9]*\.[0-9]*\)\..*$/\1/")/kio-$VERSION.tar.xz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xJ --force-local -f $TARBALLDIR/$BASENAME/kio-$VERSION.tar.xz
cd kio-$VERSION
## fix missing QStandardPaths in src/kioslave/kioslave.cpp (version >= 5.92.0)
#mv -f src/kioslave/kioslave.cpp src/kioslave/kioslave.cpp.bak &&
#echo "#include <QStandardPaths>" > src/kioslave/kioslave.cpp &&
#cat src/kioslave/kioslave.cpp.bak >> src/kioslave/kioslave.cpp
## fix undefined QT_STAT_LNK in src/utils_p.h (version >= 5.98.0)
#patch -ulbf src/utils_p.h << EOF
#@@ -168,3 +168,7 @@
# {
#+#ifdef QT_STAT_LNK
#     return (mode & QT_STAT_MASK) == QT_STAT_LNK;
#+#else
#+    return false;
#+#endif
# }
#EOF
mkdir -p build_static build_shared &&
 wl-showstatus configure &&
 PATH=$PATH:$MINGWPREFIX/qt6/bin QTDIR=$MINGWPREFIX/qt6 QMAKESPEC=$MINGWPREFIX/qt6/mkspecs/win32-g++ cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -D_tar_executable:FILEPATH= -DBUILD_TESTING:BOOL=OFF -DCMAKE_C_COMPILER:FILEPATH=$(which gcc.exe) -DCMAKE_CXX_COMPILER:FILEPATH=$(which g++.exe) -S. -Bbuild_static &&
 ## fix multiple definition errors
 #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=\s*/&-Wl,--allow-multiple-definition /" build_static/build.ninja &&
 wl-showstatus configure &&
 PATH=$PATH:$MINGWPREFIX/qt6/bin QTDIR=$MINGWPREFIX/qt6 QMAKESPEC=$MINGWPREFIX/qt6/mkspecs/win32-g++ cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -D_tar_executable:FILEPATH= -DBUILD_TESTING:BOOL=OFF -DCMAKE_C_COMPILER:FILEPATH=$(which gcc.exe) -DCMAKE_CXX_COMPILER:FILEPATH=$(which g++.exe) -S. -Bbuild_shared &&
 wl-showstatus build-install &&
 PATH=$PATH:$MINGWPREFIX/qt6/bin ninja -Cbuild_static install/strip &&
 wl-showstatus build-install &&
 PATH=$PATH:$MINGWPREFIX/qt6/bin ninja -Cbuild_shared install/strip &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf kio-$VERSION




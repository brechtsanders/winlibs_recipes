export NAME="The LLVM Compiler Infrastructure"
export STATUS=
export URL=https://llvm.org/
export BASENAME=llvm-project-native
export DESCRIPTION="The LLVM Compiler Infrastructure - a toolkit for the construction of highly optimized compilers, optimizers, and run-time environments."
export CATEGORY=development
export TYPE=application
export VERSION=17.0.3
export VERSIONDATE=20231021
wl-showstatus --package-version
export DEPENDENCIES=pthreads,zlib,xz,libxml2,libffi,isl,z3,swig,ncurses,protobuf,wineditline,cpython-mingw
export OPTIONALDEPENDENCIES=udis86,graphviz,hwloc,libpfm4,tbb
export BUILDDEPENDENCIES=cmake,ninja,jwasm
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=llvm/LICENSE.TXT
export LICENSETYPE="Apache with exceptions"
#export DOWNLOADURL="https://releases.llvm.org/ llvmorg-"
#export DOWNLOADURL="https://github.com/llvm/llvm-project/releases/ llvm-project- .src.tar.xz"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://github.com/llvm/llvm-project/releases/download/llvmorg-$(echo $VERSION|sed -e "s/\([0-9]\)\(rc\)/\1-\2/")/llvm-project-$VERSION.src.tar.xz
export DOWNLOADSOURCEURL=https://github.com/llvm/llvm-project/archive/refs/tags/llvmorg-$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/llvm-project $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/llvm-project/llvmorg-$VERSION.tar.gz
cd llvm-project-llvmorg-$VERSION
# fix clang/include/clang/Interpreter/Interpreter.h (version >= 17.0.1)
patch -ulbf clang/include/clang/Interpreter/Interpreter.h << EOF
@@ -42,3 +42,3 @@
 /// Create a pre-configured \\c CompilerInstance for incremental processing.
-class IncrementalCompilerBuilder {
+class REPL_EXTERNAL_VISIBILITY IncrementalCompilerBuilder {
 public:
@@ -75,3 +75,3 @@
 /// Provides top-level interfaces for incremental compilation and execution.
-class Interpreter {
+class REPL_EXTERNAL_VISIBILITY Interpreter {
   std::unique_ptr<llvm::orc::ThreadSafeContext> TSCtx;
EOF
mkdir -p build_shared &&
 wl-showstatus configure &&
 #flang
 #-DCOMPILER_RT_DEFAULT_TARGET_TRIPLE:STRING=$RUNPLATFORM \
 # -DLLVM_BUILD_LLVM_DYLIB:BOOL=ON \
 # -DCLANG_LINK_CLANG_DYLIB:BOOL=ON \
 # -DLLVM_LINK_LLVM_DYLIB:BOOL=ON \
 # -DLLVM_TARGETS_TO_BUILD:STRING="X86;ARM;AArch64;NVPTX;AMDGPU;AVR;WebAssembly" \
 # -DLLVM_TARGETS_TO_BUILD:STRING=all \
 # -DLLVM_DYLIB_COMPONENTS:STRING=all \
 #
 # -DLLVM_ENABLE_RUNTIMES:STRING="compiler-rt;libcxx;libcxxabi;libunwind;openmp" \
 # -DPython3_LIBRARIES:FILEPATH="$(PKG_CONFIG_PATH=$MINGWPREFIX/share/python/lib/pkgconfig:${PKG_CONFIG_PATH:+:$PKG_CONFIG_PATH} pkg-config --libs python3)" \
 # -DPython3_INCLUDE_DIRS:FILEPATH=$(ls -1d $MINGWPREFIX/share/python/include/python*|sort -V|tail -n1) \
 #
 PATH=$MINGWPREFIX/share/python/bin:$PATH \
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm-native -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
  -DCMAKE_SYSTEM_NAME:STRING=Windows \
  -DBUILD_SHARED_LIBS:BOOL=ON \
  -DLLVM_BUILD_STATIC=OFF \
  -DLIBCLANG_BUILD_STATIC:BOOL=OFF \
  -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF \
  -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF \
  -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM \
  -DLLVM_DEFAULT_TARGET_TRIPLE:STRING=$RUNPLATFORM \
  -DLLVM_TARGETS_TO_BUILD:STRING="X86;ARM;AArch64;NVPTX;AMDGPU;WebAssembly" \
  -DLLVM_RUNTIME_TARGETS=$RUNPLATFORM \
  -DCLANG_VENDOR:STRING="(built by Brecht Sanders)" \
  -DLLD_VENDOR:STRING="(built by Brecht Sanders)" \
  -DFLANG_VENDOR:STRING="(built by Brecht Sanders)" \
  -DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;lld;lldb;libclc;pstl;polly;flang" \
  -DLLVM_ENABLE_RUNTIMES:STRING="compiler-rt;libcxx;libcxxabi;openmp" \
  -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=OFF \
  -DLLVM_ENABLE_THREADS:BOOL=ON \
  -DCLANG_BUILD_TOOLS:BOOL=ON \
  -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF \
  -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON \
  -DLLVM_ENABLE_LIBEDIT:BOOL=ON \
  -DLLDB_ENABLE_LIBEDIT:BOOL=ON \
  -DLibEdit_INCLUDE_DIRS:PATH=$MINGWPREFIX/include \
  -DLLVM_ENABLE_EH:BOOL=OFF \
  -DLLVM_ENABLE_RTTI:BOOL=ON \
  -DLLVM_ENABLE_MODULES:BOOL=OFF \
  -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF \
  -DLLVM_ENABLE_FFI:BOOL=ON \
  -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON \
  -DLLVM_ENABLE_LIBXML2:BOOL=ON \
  -DLLVM_ENABLE_THREADS:BOOL=ON \
  -DLLVM_ENABLE_UNWIND_TABLES:BOOL=ON \
  -DLLVM_ENABLE_Z3_SOLVER:BOOL=ON \
  -DLLVM_INCLUDE_TOOLS:BOOL=ON \
  -DLLVM_INCLUDE_UTILS:BOOL=ON \
  -DLLVM_INSTALL_UTILS:BOOL=ON \
  -DLLVM_ENABLE_TERMINFO:BOOL=OFF \
  -DLLVM_ENABLE_LIBEDIT:BOOL=OFF \
  -DLLDB_ENABLE_LIBEDIT:BOOL=OFF \
  -DLLDB_ENABLE_CURSES:BOOL=ON \
  -DLLDB_ENABLE_LIBXML2:BOOL=ON \
  -DLLDB_ENABLE_LZMA:BOOL=ON \
  -DLLDB_ENABLE_LUA:BOOL=OFF \
  -DLLDB_ENABLE_PYTHON:BOOL=ON \
  -DLLVM_ENABLE_SPHINX=OFF \
  -DLLVM_INCLUDE_DOCS:BOOL=OFF \
  -DCLANG_INCLUDE_TESTS:BOOL=OFF \
  -DLLDB_INCLUDE_TESTS:BOOL=OFF \
  -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF \
  -DLLVM_INCLUDE_TESTS:BOOL=OFF \
  -DLLVM_TOOL_LLVM_C_TEST_BUILD:BOOL=OFF \
  -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF \
  -DLLVM_BUILD_BENCHMARKS:BOOL=OFF \
  -DLLVM_INCLUDE_BENCHMARKS:BOOL=OFF \
  -DBENCHMARK_USE_BUNDLED_GTEST:BOOL=OFF \
  -DLLVM_BUILD_TESTS:BOOL=OFF \
  -DBUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF \
  -DCLANG_PLUGIN_SUPPORT:BOOL=ON \
  -DCLANG_ENABLE_CLANGD:BOOL=ON \
  -DCLANG_TOOL_APINOTES_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_ARCMT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_C_ARCMT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_C_INDEX_TEST_BUILD:BOOL=OFF \
  -DCLANG_INCLUDE_DOCS:BOOL=OFF \
  -DCLANG_BUILD_EXAMPLES:BOOL=OFF \
  -DLLD_BUILD_TOOLS:BOOL=ON \
  -DLLD_DEFAULT_LD_LLD_IS_MINGW:BOOL=ON \
  -DLLDB_TOOL_LLDB_SERVER_BUILD:BOOL=ON \
  -DLLDB_TOOL_LLDB_VSCODE_BUILD:BOOL=ON \
  -DLLVM_TOOL_OPENMP_BUILD:BOOL=ON \
  -DLLVM_TOOL_PARALLEL_LIBS_BUILD:BOOL=ON \
  -DLLDB_TOOL_LLDB_INSTR_BUILD:BOOL=OFF \
  -DLLDB_DISABLE_PYTHON:BOOL=OFF \
  -DLLDB_ENABLE_PYTHON:BOOL=ON \
  -DLLDB_EMBED_PYTHON_HOME:BOOL=OFF \
  -DLLDB_PYTHON_RELATIVE_PATH:PATH=libexec/site-packages -DLLDB_PYTHON_EXE_RELATIVE_PATH:FILEPATH=bin/python.exe -DLLDB_PYTHON_EXT_SUFFIX:STRING=.pyd \
  -DPython3_FIND_REGISTRY:BOOL=NEVER \
  -DPython3_EXECUTABLE:FILEPATH=$MINGWPREFIX/share/python/bin/python.exe \
  -DCMAKE_ASM_MASM_COMPILER:FILEPATH=$PWD/build_shared/bin/llvm-ml.exe \
  -DCMAKE_CXX_FLAGS:STRING="-D_WIN32_WINNT=0x0600 $(if ${CC:-gcc} --version|grep -q clang; then echo "-femulated-tls"; fi)" \
  -DCMAKE_OBJECT_PATH_MAX=300 \
  -Sllvm -Bbuild_shared &&
 #-DCMAKE_OBJECT_PATH_MAX=300 
 #-DLLVM_ENABLE_PROJECTS:STRING="libunwind;polly;flang"
 #-DLLVM_ENABLE_DOXYGEN:BOOL=OFF -DDOXYGEN_DOT_EXECUTABLE:FILEPATH= -DDOXYGEN_EXECUTABLE:FILEPATH= \
 #-DLLDB_PYTHON_RELATIVE_PATH:PATH=libexec/site-packages -DLLDB_PYTHON_EXE_RELATIVE_PATH:FILEPATH=bin/python.exe -DLLDB_PYTHON_EXT_SUFFIX:STRING=.pyd 
 #-DHAVE_STEADY_CLOCK:BOOL=ON 
 #-DLLVM_ENABLE_LLD:BOOL=ON -DCLANG_DEFAULT_LINKER:STRING=lld 
 #-DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) \
 ## fix missing link libraries
 #if ${CC:-gcc} --version|grep -q clang; then
 # sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -pthread/" build_shared/build.ninja
 #fi &&
 ## fix missing -lgcc/-lgcc_s
 #sed -i.bak -e "s/-lgcc_s\|-lgcc//g" build_shared/build.ninja &&
 #sed -i.bak -e "s/-lgcc_s\|-lgcc//g" build_shared/runtimes/runtimes-$RUNPLATFORM-bins/build.ninja &&
 wl-showstatus build-install &&
 #PATH=$MINGWPREFIX/share/python/bin:$PATH ninja -Cbuild_shared install/strip &&
 ( PATH=$MINGWPREFIX/share/python/bin:$PATH ninja -Cbuild_shared install/strip || PATH=$MINGWPREFIX/share/python/bin:$PATH ninja -j1 -Cbuild_shared install/strip || PATH=$PWD/build_shared/bin:$PWD/build_shared/tools:$PATH ninja -Cbuild_shared install/strip ) &&
 #( ninja -Cbuild_shared install/strip || ninja -j1 -Cbuild_shared install/strip ) &&
 #wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf llvm-project-$VERSION.src
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf llvm-project-llvmorg-$VERSION

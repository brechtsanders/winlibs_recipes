export NAME="The LLVM Compiler Infrastructure"
export STATUS=
export URL=https://llvm.org/
export BASENAME=llvm-project-native
export DESCRIPTION="The LLVM Compiler Infrastructure - a toolkit for the construction of highly optimized compilers, optimizers, and run-time environments."
export CATEGORY=development
export TYPE=application
#export VERSION=17.0.3
#export VERSIONDATE=20231021
#export VERSION=17.0.5
#export VERSIONDATE=20231114
#export VERSION=17.0.6
#export VERSIONDATE=20231129
export VERSION=18.1.1
export VERSIONDATE=20240313
wl-showstatus --package-version
export DEPENDENCIES=pthreads,zlib,xz,libxml2,libffi,isl,z3,swig,ncurses,protobuf,wineditline,cpython-mingw
export OPTIONALDEPENDENCIES=udis86,graphviz,hwloc,libpfm4,tbb
export BUILDDEPENDENCIES=cmake,ninja,jwasm
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=llvm/LICENSE.TXT
export LICENSETYPE="Apache with exceptions"
export DOWNLOADURL="https://releases.llvm.org/ llvmorg-"
#export DOWNLOADURL="https://github.com/llvm/llvm-project/releases/ llvm-project- .src.tar.xz"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://github.com/llvm/llvm-project/releases/download/llvmorg-$(echo $VERSION|sed -e "s/\([0-9]\)\(rc\)/\1-\2/")/llvm-project-$VERSION.src.tar.xz
export DOWNLOADSOURCEURL=https://github.com/llvm/llvm-project/archive/refs/tags/llvmorg-$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/llvm-project $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/llvm-project/llvmorg-$VERSION.tar.gz
cd llvm-project-llvmorg-$VERSION
# fix clang/include/clang/Interpreter/Interpreter.h (version >= 17.0.1)
patch -ulbf clang/include/clang/Interpreter/Interpreter.h << EOF
@@ -42,3 +42,3 @@
 /// Create a pre-configured \\c CompilerInstance for incremental processing.
-class IncrementalCompilerBuilder {
+class REPL_EXTERNAL_VISIBILITY IncrementalCompilerBuilder {
 public:
@@ -75,3 +75,3 @@
 /// Provides top-level interfaces for incremental compilation and execution.
-class Interpreter {
+class REPL_EXTERNAL_VISIBILITY Interpreter {
   std::unique_ptr<llvm::orc::ThreadSafeContext> TSCtx;
EOF
mkdir -p build_shared &&
 wl-showstatus configure &&
 #flang
 #-DCOMPILER_RT_DEFAULT_TARGET_TRIPLE:STRING=$RUNPLATFORM \
 # -DLLVM_BUILD_LLVM_DYLIB:BOOL=ON \
 # -DCLANG_LINK_CLANG_DYLIB:BOOL=ON \
 # -DLLVM_LINK_LLVM_DYLIB:BOOL=ON \
 # -DLLVM_TARGETS_TO_BUILD:STRING="X86;ARM;AArch64;NVPTX;AMDGPU;AVR;WebAssembly" \
 # -DLLVM_TARGETS_TO_BUILD:STRING=all \
 # -DLLVM_DYLIB_COMPONENTS:STRING=all \
 #
 # -DLLVM_ENABLE_RUNTIMES:STRING="compiler-rt;libcxx;libcxxabi;libunwind;openmp" \
 # -DPython3_LIBRARIES:FILEPATH="$(PKG_CONFIG_PATH=$MINGWPREFIX/share/python/lib/pkgconfig:${PKG_CONFIG_PATH:+:$PKG_CONFIG_PATH} pkg-config --libs python3)" \
 # -DPython3_INCLUDE_DIRS:FILEPATH=$(ls -1d $MINGWPREFIX/share/python/include/python*|sort -V|tail -n1) \
 #
 PATH=$MINGWPREFIX/share/python/bin:$PATH \
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm-native -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
  -DCMAKE_SYSTEM_NAME:STRING=Windows \
  -DBUILD_SHARED_LIBS:BOOL=ON \
  -DLLVM_BUILD_STATIC=OFF \
  -DLIBCLANG_BUILD_STATIC:BOOL=OFF \
  -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF \
  -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF \
  -DLLVM_HOST_TRIPLE:STRING=$RUNPLATFORM \
  -DLLVM_DEFAULT_TARGET_TRIPLE:STRING=$RUNPLATFORM \
  -DLLVM_TARGETS_TO_BUILD:STRING="X86;ARM;AArch64;NVPTX;AMDGPU;WebAssembly" \
  -DLLVM_RUNTIME_TARGETS=$RUNPLATFORM \
  -DCLANG_VENDOR:STRING="(built by Brecht Sanders)" \
  -DLLD_VENDOR:STRING="(built by Brecht Sanders)" \
  -DFLANG_VENDOR:STRING="(built by Brecht Sanders)" \
  -DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;lld;lldb;libclc;pstl;polly;flang" \
  -DLLVM_ENABLE_RUNTIMES:STRING="compiler-rt;libcxx;libcxxabi;openmp" \
  -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=OFF \
  -DLLVM_ENABLE_THREADS:BOOL=ON \
  -DCLANG_BUILD_TOOLS:BOOL=ON \
  -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF \
  -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON \
  -DLLVM_ENABLE_LIBEDIT:BOOL=ON \
  -DLLDB_ENABLE_LIBEDIT:BOOL=ON \
  -DLibEdit_INCLUDE_DIRS:PATH=$MINGWPREFIX/include \
  -DLLVM_ENABLE_EH:BOOL=OFF \
  -DLLVM_ENABLE_RTTI:BOOL=ON \
  -DLLVM_ENABLE_MODULES:BOOL=OFF \
  -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF \
  -DLLVM_ENABLE_FFI:BOOL=ON \
  -DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON \
  -DLLVM_ENABLE_LIBXML2:BOOL=ON \
  -DLLVM_ENABLE_THREADS:BOOL=ON \
  -DLLVM_ENABLE_UNWIND_TABLES:BOOL=ON \
  -DLLVM_ENABLE_Z3_SOLVER:BOOL=ON \
  -DLLVM_INCLUDE_TOOLS:BOOL=ON \
  -DLLVM_INCLUDE_UTILS:BOOL=ON \
  -DLLVM_INSTALL_UTILS:BOOL=ON \
  -DLLVM_ENABLE_TERMINFO:BOOL=OFF \
  -DLLVM_ENABLE_LIBEDIT:BOOL=OFF \
  -DLLDB_ENABLE_LIBEDIT:BOOL=OFF \
  -DLLDB_ENABLE_CURSES:BOOL=ON \
  -DLLDB_ENABLE_LIBXML2:BOOL=ON \
  -DLLDB_ENABLE_LZMA:BOOL=ON \
  -DLLDB_ENABLE_LUA:BOOL=OFF \
  -DLLDB_ENABLE_PYTHON:BOOL=ON \
  -DLLVM_ENABLE_SPHINX=OFF \
  -DLLVM_INCLUDE_DOCS:BOOL=OFF \
  -DCLANG_INCLUDE_TESTS:BOOL=OFF \
  -DLLDB_INCLUDE_TESTS:BOOL=OFF \
  -DLLVM_INCLUDE_GO_TESTS:BOOL=OFF \
  -DLLVM_INCLUDE_TESTS:BOOL=OFF \
  -DLLVM_TOOL_LLVM_C_TEST_BUILD:BOOL=OFF \
  -DLLVM_INCLUDE_EXAMPLES:BOOL=OFF \
  -DLLVM_BUILD_BENCHMARKS:BOOL=OFF \
  -DLLVM_INCLUDE_BENCHMARKS:BOOL=OFF \
  -DBENCHMARK_USE_BUNDLED_GTEST:BOOL=OFF \
  -DLLVM_BUILD_TESTS:BOOL=OFF \
  -DBUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF \
  -DCLANG_PLUGIN_SUPPORT:BOOL=ON \
  -DCLANG_ENABLE_CLANGD:BOOL=ON \
  -DCLANG_TOOL_APINOTES_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_ARCMT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_C_ARCMT_TEST_BUILD:BOOL=OFF \
  -DCLANG_TOOL_C_INDEX_TEST_BUILD:BOOL=OFF \
  -DCLANG_INCLUDE_DOCS:BOOL=OFF \
  -DCLANG_BUILD_EXAMPLES:BOOL=OFF \
  -DLLD_BUILD_TOOLS:BOOL=ON \
  -DLLD_DEFAULT_LD_LLD_IS_MINGW:BOOL=ON \
  -DLLDB_TOOL_LLDB_SERVER_BUILD:BOOL=ON \
  -DLLDB_TOOL_LLDB_VSCODE_BUILD:BOOL=ON \
  -DLLVM_TOOL_OPENMP_BUILD:BOOL=ON \
  -DLLVM_TOOL_PARALLEL_LIBS_BUILD:BOOL=ON \
  -DLLDB_TOOL_LLDB_INSTR_BUILD:BOOL=OFF \
  -DLLDB_DISABLE_PYTHON:BOOL=OFF \
  -DLLDB_ENABLE_PYTHON:BOOL=ON \
  -DLLDB_EMBED_PYTHON_HOME:BOOL=OFF \
  -DLLDB_PYTHON_RELATIVE_PATH:PATH=libexec/site-packages -DLLDB_PYTHON_EXE_RELATIVE_PATH:FILEPATH=bin/python.exe -DLLDB_PYTHON_EXT_SUFFIX:STRING=.pyd \
  -DPython3_FIND_REGISTRY:BOOL=NEVER \
  -DPython3_EXECUTABLE:FILEPATH=$MINGWPREFIX/share/python/bin/python.exe \
  -DCMAKE_ASM_MASM_COMPILER:FILEPATH=$PWD/build_shared/bin/llvm-ml.exe \
  -DCMAKE_CXX_FLAGS:STRING="-D_WIN32_WINNT=0x0600 $(if ${CC:-gcc} --version|grep -q clang; then echo "-femulated-tls"; fi)" \
  -DCMAKE_OBJECT_PATH_MAX=300 \
  -Sllvm -Bbuild_shared &&
 #-DCMAKE_OBJECT_PATH_MAX=300 
 #-DLLVM_ENABLE_PROJECTS:STRING="libunwind;polly;flang"
 #-DLLVM_ENABLE_DOXYGEN:BOOL=OFF -DDOXYGEN_DOT_EXECUTABLE:FILEPATH= -DDOXYGEN_EXECUTABLE:FILEPATH= \
 #-DLLDB_PYTHON_RELATIVE_PATH:PATH=libexec/site-packages -DLLDB_PYTHON_EXE_RELATIVE_PATH:FILEPATH=bin/python.exe -DLLDB_PYTHON_EXT_SUFFIX:STRING=.pyd 
 #-DHAVE_STEADY_CLOCK:BOOL=ON 
 #-DLLVM_ENABLE_LLD:BOOL=ON -DCLANG_DEFAULT_LINKER:STRING=lld 
 #-DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) \
 ## fix missing link libraries
 #if ${CC:-gcc} --version|grep -q clang; then
 # sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -pthread/" build_shared/build.ninja
 #fi &&
 ## fix missing -lgcc/-lgcc_s
 #sed -i.bak -e "s/-lgcc_s\|-lgcc//g" build_shared/build.ninja &&
 #sed -i.bak -e "s/-lgcc_s\|-lgcc//g" build_shared/runtimes/runtimes-$RUNPLATFORM-bins/build.ninja &&
 wl-showstatus build-install &&
 #PATH=$MINGWPREFIX/share/python/bin:$PATH ninja -Cbuild_shared install/strip &&
 ( PATH=$MINGWPREFIX/share/python/bin:$PATH ninja -Cbuild_shared install/strip || PATH=$MINGWPREFIX/share/python/bin:$PATH ninja -j1 -Cbuild_shared install/strip || PATH=$PWD/build_shared/bin:$PWD/build_shared/tools:$PATH ninja -Cbuild_shared install/strip ) &&
 #( ninja -Cbuild_shared install/strip || ninja -j1 -Cbuild_shared install/strip ) &&
    echo OK
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf llvm-project-llvmorg-$VERSION
















mkdir -p build_stage1 &&
 # build main LLVM suite
 wl-showstatus configure llvm-stage1 &&
 #-DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;lld;flang" 
 PATH=$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/bin:$PATH \
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$PWD/stage1 -DCMAKE_BUILD_TYPE:STRING=Release \
  -DBUILD_SHARED_LIBS:BOOL=OFF \
  -DLLVM_BUILD_LLVM_DYLIB:BOOL=ON \
  -DCMAKE_SYSTEM_NAME:STRING=Windows \
  -DCMAKE_CROSSCOMPILING:BOOL=ON \
  -DLLVM_ENABLE_PROJECTS:STRING="clang;lld" \
  -DLLVM_ENABLE_RUNTIMES:STRING="" \
  -DLLVM_TARGETS_TO_BUILD:STRING="ARM;AArch64;X86" \
  -DLLVM_ENABLE_ASSERTIONS:BOOL=OFF \
  -DLLVM_INSTALL_TOOLCHAIN_ONLY:BOOL=ON \
  -DLLVM_ENABLE_THREADS:BOOL=OFF \
  \
  -DCMAKE_C_FLAGS:STRING="-femulated-tls -D_FORTIFY_SOURCE=0" \
  -DCMAKE_CXX_FLAGS:STRING="-femulated-tls -D_FORTIFY_SOURCE=0" \
  \
  -DPython3_FIND_REGISTRY:BOOL=NEVER \
  -DPython3_EXECUTABLE:FILEPATH=$MINGWPREFIX/share/python/bin/python.exe \
  \
  -DCROSS_TOOLCHAIN_FLAGS_NATIVE="-DLLVM_ENABLE_THREADS=OFF -DCMAKE_C_FLAGS:STRING=\"-D_FORTIFY_SOURCE=0\" -DCMAKE_CXX_FLAGS:STRING=\"-D_FORTIFY_SOURCE=0\"" \
  -Sllvm -Bbuild_stage1 &&
 # fix missing link libraries
 sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lpthread/" build_stage1/build.ninja &&
 # fux missing __alloca
 echo "#undef HAVE___ALLOCA" >> build_stage1/include/llvm/Config/config.h &&
 echo "#undef HAVE____CHKSTK" >> build_stage1/include/llvm/Config/config.h &&
 echo "#undef HAVE____CHKSTK_MS" >> build_stage1/include/llvm/Config/config.h &&
 PATH=$MINGWPREFIX/share/python/bin:$PATH ninja -Cbuild_stage1 CONFIGURE_LLVM_NATIVE &&
 echo "#undef HAVE___ALLOCA" >> build_stage1/NATIVE/include/llvm/Config/config.h &&
 echo "#undef HAVE____CHKSTK" >> build_stage1/NATIVE/include/llvm/Config/config.h &&
 echo "#undef HAVE____CHKSTK_MS" >> build_stage1/NATIVE/include/llvm/Config/config.h &&
 wl-showstatus build-install llvm-stage1 &&
 PATH=$MINGWPREFIX/share/python/bin:$PATH ninja -Cbuild_stage1 install/strip &&
 strip build_stage1/bin/clang-tblgen.exe &&
 cp -f build_stage1/bin/clang-tblgen.exe stage1/bin/ &&
 cp -u build_stage1/bin/llvm-{dlltool,windres}.exe stage1/bin/ &&
 # install renamed versions of clang/clang++ to avoid detection as MSVC cl compiler
 cp -f stage1/bin/clang.exe stage1/bin/gcc_renamed_clang.exe &&
 cp -f stage1/bin/clang++.exe stage1/bin/g++_renamed_clang++.exe &&



 # build MinGW-w64 headers
 mkdir -p build_mingw-w64-headers &&
 wl-showstatus configure mingw-w64-headers &&
 cd build_mingw-w64-headers &&
 PATH=$PWD/stage1/bin:$PATH \
 $MINGWPREFIX/src/mingw-w64/mingw-w64-headers/configure --prefix=$PWD/../stage1 --build=$BUILDPLATFORM --host=$RUNPLATFORM \
  --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrt"; else echo "msvcrt-os"; fi) \
  --enable-sdk=all \
  --enable-idl &&
 cd .. &&
 wl-showstatus build-install mingw-w64-headers &&
 PATH=$PWD/stage1/bin:$PATH make -Cbuild_mingw-w64-headers install-strip &&



 # build MinGW-w64 crt
 for arch in i686 x86_64 armv7 aarch64; do
  mkdir -p build_mingw-w64-crt-$arch &&
  wl-showstatus configure mingw-w64-crt-$arch &&
  cd build_mingw-w64-crt-$arch &&
  PATH=$PWD/../stage1/bin:$PWD/../prebuilt/$PREBUILT_BASE/bin:$PWD/../prebuilt/$PREBUILT_BASE/$arch-w64-mingw32/bin:$MINGWPREFIX/share/llvm/$arch-w64-mingw32/bin:$MINGWPREFIX/share/llvm/bin:$PATH:$(cygpath $WINDIR/System32/downlevel) \
  $MINGWPREFIX/src/mingw-w64/mingw-w64-crt/configure --prefix=$PWD/../stage1/$arch-w64-mingw32 --build=$BUILDPLATFORM --host=$arch-w64-mingw32 \
   --$(if [ "$arch" == "i686" ]; then echo "enable"; else echo "disable"; fi)-lib32 \
   --$(if [ "$arch" == "x86_64" ]; then echo "enable"; else echo "disable"; fi)-lib64 \
   --$(if [ "$arch" == "armv7" ]; then echo "enable"; else echo "disable"; fi)-libarm32 \
   --$(if [ "$arch" == "aarch64" ]; then echo "enable"; else echo "disable"; fi)-libarm64 \
   --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrt"; else echo "msvcrt-os"; fi) \
   --enable-wildcard \
   --enable-cfguard \
   --disable-delay-import-libs \
   --disable-experimental \
   CC="$PWD/../stage1/bin/gcc_renamed_clang.exe -fuse-ld=lld -target $arch-w64-mingw32 $(if [ "$arch" == "armv7" ]; then echo "-march=armv7-a -mtune=armv7-a+vfpv4+neon+thumb2"; fi)" \
   CXX="$PWD/../stage1/bin/g++_renamed_clang++.exe -fuse-ld=lld -target $arch-w64-mingw32 $(if [ "$arch" == "armv7" ]; then echo "-march=armv7-a -mtune=armv7-a+vfpv4+neon+thumb2"; fi)" \
   AS="$PWD/../stage1/bin/llvm-as.exe" \
   LD="$PWD/../stage1/bin/lld-link.exe" \
   DLLTOOL="$PWD/../stage1/bin/llvm-dlltool.exe" \
   AR="$PWD/../stage1/bin/llvm-ar.exe" \
   RANLIB="$PWD/../stage1/bin/llvm-ranlib.exe" \
   RC="$PWD/../stage1/bin/llvm-windres.exe" \
   NM="$PWD/../stage1/bin/llvm-nm.exe" \
   OBJDUMP="$PWD/../stage1/bin/llvm-objdump.exe" \
   CFLAGS="-D_FORTIFY_SOURCE=0" \
   CXXFLAGS="-D_FORTIFY_SOURCE=0" \
   &&
  cd .. &&
  #wl-showstatus build mingw-w64-crt-$arch &&
  #PATH=$PWD/prebuilt/$PREBUILT_BASE/$arch-w64-mingw32/bin:$PWD/prebuilt/$PREBUILT_BASE/bin:$MINGWPREFIX/share/llvm/$arch-w64-mingw32/bin:$MINGWPREFIX/share/llvm/bin:$PATH:$(cygpath $WINDIR/System32/downlevel) \
  #make -Cbuild_mingw-w64-crt-$arch &&
  wl-showstatus build-install mingw-w64-crt-$arch &&
  PATH=$PWD/stage1/bin:$PATH:$(cygpath $WINDIR/System32/downlevel) \
  make -Cbuild_mingw-w64-crt-$arch install-strip &&
  touch SUCCESS_$arch || break
 done &&
 if [ $(ls -1 SUCCESS_*|wc -l) -ne 4 ]; then false; fi &&
 rm -f SUCCESS_* &&



 # create dummy libraries
 mkdir -p build_dummylibs/lib &&
 ar cr build_dummylibs/lib/libgcc.a &&
 ar cr build_dummylibs/lib/libgcc_s.a &&
 ar cr build_dummylibs/lib/libgcc_eh.a &&



mkdir -p build_test && cmake.exe -GNinja -Sruntimes -Bbuild_test -LH && echo OK; rm -rf build_test

mkdir -p build_stage1_runtimes &&
 # build main LLVM suite
 wl-showstatus configure llvm-stage1 &&
 #-DLLVM_ENABLE_PROJECTS:STRING="clang;clang-tools-extra;lld;flang" 
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$PWD/stage1 -DCMAKE_BUILD_TYPE:STRING=Release \
  -DLLVM_DIR:PATH=$PWD/stage1 \
  -DClang_DIR:PATH=$PWD/stage1 \
  -DLLVM_CONFIG:STRING=$PWD/stage1/bin/llvm-config.exe \
  -DLLVM_ENABLE_RUNTIMES:STRING="compiler-rt;libc;libcxx" \
  \
  -DCMAKE_ASM_COMPILER:FILEPATH=$PWD/stage1/bin/llvm-as.exe \
  -DCMAKE_ASM_COMPILER_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
  -DCMAKE_ASM_COMPILER_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
  -DCMAKE_C_COMPILER:FILEPATH=$PWD/stage1/bin/clang.exe \
  -DCMAKE_C_COMPILER_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
  -DCMAKE_C_COMPILER_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
  -DCMAKE_CXX_COMPILER:FILEPATH=$PWD/stage1/bin/clang++.exe \
  -DCMAKE_CXX_COMPILER_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
  -DCMAKE_CXX_COMPILER_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
  -DCMAKE_RC_COMPILER:FILEPATH=$PWD/stage1/bin/llvm-windres.exe \
  -DCMAKE_AR:FILEPATH=$PWD/stage1/bin/llvm-ar.exe \
  -DCMAKE_RANLIB:FILEPATH=$PWD/stage1/bin/llvm-ranlib.exe \
  -DCMAKE_READELF:FILEPATH=$PWD/stage1/bin/llvm-readelf.exe \
  -DCMAKE_DLLTOOL:FILEPATH=$PWD/stage1/bin/llvm-dlltool.exe \
  -DCMAKE_NM:FILEPATH=$PWD/stage1/bin/llvm-nm.exe \
  -DCMAKE_OBJCOPY:FILEPATH=$PWD/stage1/bin/llvm-objcopy.exe \
  -DCMAKE_OBJDUMP:FILEPATH=$PWD/stage1/bin/llvm-objdump.exe \
  -DCMAKE_LINKER:FILEPATH=$PWD/stage1/bin/llvm-link.exe \
  -DCMAKE_STRIP:FILEPATH=$PWD/stage1/bin/llvm-strip.exe \
  -DCMAKE_C_FLAGS:STRING="-D_FORTIFY_SOURCE=0 -fuse-ld=lld -L$(cygpath -m $PWD/build_dummylibs/lib) -L$(cygpath -m $PWD/stage1/$RUNPLATFORM/lib)" \
  -DCMAKE_CXX_FLAGS:STRING="-D_FORTIFY_SOURCE=0 -fuse-ld=lld -L$(cygpath -m $PWD/build_dummylibs/lib) -L$(cygpath -m $PWD/stage1/$RUNPLATFORM/lib)" \
  -DCMAKE_{STATIC,SHARED,MODULE,EXE}_LINKER_FLAGS:STRING="-fuse-ld=lld -L$(cygpath -m $PWD/build_dummylibs/lib) -L$(cygpath -m $PWD/stage1/$RUNPLATFORM/lib)" \
  \
  -DPython3_FIND_REGISTRY:BOOL=NEVER \
  -DPython3_EXECUTABLE:FILEPATH=$MINGWPREFIX/share/python/bin/python.exe \
  \
  -Sruntimes -Bbuild_stage1_runtimes &&
 # fix missing link libraries
 sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lpthread/" build_stage1_runtimes/build.ninja &&
 # fux missing __alloca
 echo "#undef HAVE___ALLOCA" >> build_stage1_runtimes/include/llvm/Config/config.h &&
 echo "#undef HAVE____CHKSTK" >> build_stage1_runtimes/include/llvm/Config/config.h &&
 echo "#undef HAVE____CHKSTK_MS" >> build_stage1_runtimes/include/llvm/Config/config.h &&
 PATH=$MINGWPREFIX/share/python/bin:$PATH ninja -Cbuild_stage1_runtimes CONFIGURE_LLVM_NATIVE &&
 echo "#undef HAVE___ALLOCA" >> build_stage1_runtimes/NATIVE/include/llvm/Config/config.h &&
 echo "#undef HAVE____CHKSTK" >> build_stage1_runtimes/NATIVE/include/llvm/Config/config.h &&
 echo "#undef HAVE____CHKSTK_MS" >> build_stage1_runtimes/NATIVE/include/llvm/Config/config.h &&
 wl-showstatus build-install llvm-stage1 &&
 PATH=$MINGWPREFIX/share/python/bin:$PATH ninja -Cbuild_stage1_runtimes install/strip &&



 # build MinGW-w64 libraries
 for arch in i686 x86_64 armv7 aarch64; do
  for lib in $(ls -1 $MINGWPREFIX/src/mingw-w64/mingw-w64-libraries); do
   mkdir -p build_mingw-w64_$lib\_stage1_$arch &&
   wl-showstatus configure &&
   cd build_mingw-w64_$lib\_stage1_$arch &&
   PATH=$PWD/../stage1/bin:$PATH \
   $MINGWPREFIX/src/mingw-w64/mingw-w64-libraries/$lib/configure --prefix=$PWD/../stage1/$arch-w64-mingw32 \
    --build=$BUILDPLATFORM \
    --host=$arch-w64-mingw32 \
    --with-sysroot=$PWD/../stage1 \
    --without-gnu-ld \
    CC="$PWD/../stage1/bin/gcc_renamed_clang.exe -fuse-ld=lld -target $arch-w64-mingw32 $(if [ "$arch" == "armv7" ]; then echo "-march=armv7-a -mtune=armv7-a+vfpv4+neon+thumb2"; fi)" \
    CXX="$PWD/../stage1/bin/g++_renamed_clang++.exe -fuse-ld=lld -target $arch-w64-mingw32 $(if [ "$arch" == "armv7" ]; then echo "-march=armv7-a -mtune=armv7-a+vfpv4+neon+thumb2"; fi)" \
    AS="$PWD/../stage1/bin/llvm-as.exe" \
    LD="$PWD/../stage1/bin/lld-link.exe" \
    DLLTOOL="$PWD/../stage1/bin/llvm-dlltool.exe" \
    AR="$PWD/../stage1/bin/llvm-ar.exe" \
    RANLIB="$PWD/../stage1/bin/llvm-ranlib.exe" \
    RC="$PWD/../stage1/bin/llvm-windres.exe --target=$arch-w64-mingw32" \
    NM="$PWD/../stage1/bin/llvm-nm.exe" \
    OBJDUMP="$PWD/../stage1/bin/llvm-objdump.exe" \
    CFLAGS="-D_FORTIFY_SOURCE=0" \
    CXXFLAGS="-D_FORTIFY_SOURCE=0" \
    LDFLAGS="-L$PWD/../build_dummylibs/lib" \
    &&
    #CFLAGS="-I$PWD/../stage1/include -I$PWD/../stage1/include/$RUNPLATFORM/c++/v1 -I$PWD/../stage1/include/c++/v1 $(if [ "$arch" == "aarch64" ]; then echo "-D__aarch64__"; fi)" \
    #LDFLAGS="-L$PWD/../stage1/lib -Wl,-no-undefined" \
   cd .. &&
   #-rtlib=compiler-rt -unwindlib=libunwind -stdlib=libc++ 
   #-Wl,-m,$(case $arch in i686) echo "i386pe";; x86_64) echo "i386pep";; armv7) echo "thumb2pe";; aarch64) echo "arm64pe";; esac)
   # fix detection of shared libraries
   sed -i.bak2 -e "s/\(deplibs_check_method=\"\)[^\"]*/\1pass_all/" build_mingw-w64_$lib\_stage1_$arch/libtool &&
   ## fix link issues
   #sed -i.bak -e "s?\(-o \)\([^ ]*\)\(.*\) -link \(-dll\)?-shared -s -mwindows \1.libs/libwinpthread-1.dll -Wl,--out-implib,\2 \3 \4?" build_mingw-w64_$lib\_stage1_$arch/libtool &&
   #sed -i.bak -e "s?\$(AM_V_CCLD).*\$(libwinpthread_la_OBJECTS).*?& \&\& \$(AR) \$(ARFLAGS) .libs/libwinpthread.a \$(libwinpthread_la_OBJECTS:.lo=.o) \&\& cp -f .libs/libwinpthread.a .libs/libwinpthread.lib?" build_mingw-w64_$lib\_stage1_$arch/Makefile &&
   wl-showstatus build-install &&
   # build include files and make them available
   make -Cbuild_mingw-w64_$lib\_stage1_$arch install-strip &&
   #mkdir -p stage1/$arch-w64-mingw32 &&
   #cp -rf mingw-w64_winpthreads_$arch/* stage1/$arch-w64-mingw32/ &&
   #mkdir -p stage1/lib/$arch-w64-mingw32 &&
   #cp -rf mingw-w64_winpthreads_$arch/* stage1/lib/$arch-w64-mingw32/ &&
   ##mkdir -p stage1/$arch-w64-windows-gnu/lib &&
   ##cp -rf mingw-w64_winpthreads_$arch/lib/* stage1/$arch-w64-windows-gnu/lib/ &&
   touch SUCCESS_$arch || break 2
  done
 done &&
 if [ $(ls -1 SUCCESS_*|wc -l) -ne 4 ]; then false; fi &&
 rm -f SUCCESS_* &&
    echo OK



 # build MinGW-w64 winpthreads
 for arch in i686 x86_64 armv7 aarch64; do
  mkdir -p build_mingw-w64_winpthreads_stage1_$arch &&
  wl-showstatus configure mingw-w64_winpthreads_stage1_$arch &&
  cd build_mingw-w64_winpthreads_stage1_$arch &&
  # CC="$PWD/../stage1/bin/clang.exe -fuse-ld=lld -target $arch-w64-mingw32 $(if [ "$arch" == "armv7" ]; then echo "-march=armv7-a -mtune=armv7-a+vfpv4+neon+thumb2"; fi) $(if [ "$arch" == "armv7" ] || [ "$arch" == "aarch64" ]; then echo "-femulated-tls"; fi)" \
  # CFLAGS="$(if [ "$arch" == "i686" ] || [ "$arch" == "x86_64" ]; then echo "-D_FORTIFY_SOURCE=2"; else echo "-femulated-tls"; fi)" \
  #
  PATH=$PWD/../stage1/bin:$PATH:$(cygpath $WINDIR/System32/downlevel) \
  $MINGWPREFIX/src/mingw-w64/mingw-w64-libraries/winpthreads/configure --prefix=$PWD/../stage1/$arch-w64-mingw32 \
   --build=$BUILDPLATFORM \
   --host=$arch-w64-mingw32 \
   --with-sysroot=$PWD/../stage1 \
   --without-gnu-ld \
   CC="$PWD/../stage1/bin/gcc_renamed_clang.exe -fuse-ld=lld -target $arch-w64-mingw32 $(if [ "$arch" == "armv7" ]; then echo "-march=armv7-a -mtune=armv7-a+vfpv4+neon+thumb2"; fi)" \
   CXX="$PWD/../stage1/bin/g++_renamed_clang++.exe -fuse-ld=lld -target $arch-w64-mingw32" \
   AS="$PWD/../stage1/bin/llvm-as.exe" \
   LD="$PWD/../stage1/bin/lld-link.exe" \
   DLLTOOL="$PWD/../stage1/bin/llvm-dlltool.exe" \
   AR="$PWD/../stage1/bin/llvm-ar.exe" \
   RANLIB="$PWD/../stage1/bin/llvm-ranlib.exe" \
   RC="$PWD/../stage1/bin/llvm-windres.exe --target=$arch-w64-mingw32" \
   NM="$PWD/../stage1/bin/llvm-nm.exe" \
   OBJDUMP="$PWD/../stage1/bin/llvm-objdump.exe" \
   STRIP="$PWD/../stage1/bin/llvm-strip.exe" \
   CFLAGS="-I$PWD/stage1/include -D_FORTIFY_SOURCE=0" \
   LDFLAGS="-L$PWD/stage1/$arch-w64-mingw32/lib $(if [ "$arch" == "armv7" ] || [ "$arch" == "aarch64" ]; then echo "-lmsvcrt -lmingwex"; fi)" \
   &&
   #CFLAGS="$(if [ "$arch" == "armv7" ] || [ "$arch" == "aarch64" ]; then echo "-femulated-tls"; fi)" \
   #CFLAGS="-I$PWD/../stage1/include -I$PWD/../stage1/include/$RUNPLATFORM/c++/v1 -I$PWD/../stage1/include/c++/v1 $(if [ "$arch" == "aarch64" ]; then echo "-D__aarch64__"; fi)" \
   #LDFLAGS="-L$PWD/../stage1/lib -Wl,-no-undefined" \
   #LDFLAGS="-Lstage1/$arch-w64-mingw32/lib $(if [ "$arch" == "armv7" ] || [ "$arch" == "aarch64" ]; then echo "-lmsvcrt -lmingwex"; fi)" \
  cd .. &&
  #-rtlib=compiler-rt -unwindlib=libunwind -stdlib=libc++ 
  #-Wl,-m,$(case $arch in i686) echo "i386pe";; x86_64) echo "i386pep";; armv7) echo "thumb2pe";; aarch64) echo "arm64pe";; esac)
  # fix detection of shared libraries
  sed -i.bak2 -e "s/\(deplibs_check_method=\"\)[^\"]*/\1pass_all/" build_mingw-w64_winpthreads_stage1_$arch/libtool &&
  # fix link issues in build_mingw-w64/mingw-w64-libraries/winpthreads/
  sed -i.bak -e "s?\(-o \)\([^ ]*\)\(.*\) -link \(-dll\)?-shared -s -mwindows \1.libs/libwinpthread-1.dll -Wl,--out-implib,\2 \3 \4?" build_mingw-w64_winpthreads_stage1_$arch/libtool &&
  sed -i.bak -e "s?\$(AM_V_CCLD).*\$(libwinpthread_la_OBJECTS).*?& \&\& \$(AR) \$(ARFLAGS) .libs/libwinpthread.a \$(libwinpthread_la_OBJECTS:.lo=.o) \&\& cp -f .libs/libwinpthread.a .libs/libwinpthread.lib?" build_mingw-w64_winpthreads_stage1_$arch/Makefile &&
  wl-showstatus build-install mingw-w64_winpthreads_stage1_$arch &&
  # build include files and make them available
  #PATH=$PWD/prebuilt/bin:$PATH make -Cbuild_mingw-w64_winpthreads_stage1_$arch install-strip &&
  PATH=$PWD/stage1/bin:$PATH:$(cygpath $WINDIR/System32/downlevel) \
  make -Cbuild_mingw-w64_winpthreads_stage1_$arch install-strip &&
  #make -Cbuild_mingw-w64_winpthreads_stage1_$arch install-strip CFLAGS="$(if [ "$arch" == "armv7" ] || [ "$arch" == "aarch64" ]; then echo "-femulated-tls"; fi)" &&
  #cp -u build_mingw-w64_winpthreads_stage1_$arch/fakelib/*.a stage1/$arch-w64-mingw32/lib/ &&
  #mkdir -p stage1/$arch-w64-mingw32 &&
  #cp -rf mingw-w64_winpthreads_$arch/* stage1/$arch-w64-mingw32/ &&
  #mkdir -p stage1/lib/$arch-w64-mingw32 &&
  #cp -rf mingw-w64_winpthreads_$arch/* stage1/lib/$arch-w64-mingw32/ &&
  ##mkdir -p stage1/$arch-w64-windows-gnu/lib &&
  ##cp -rf mingw-w64_winpthreads_$arch/lib/* stage1/$arch-w64-windows-gnu/lib/ &&
  touch SUCCESS_$arch || break
 done &&
 if [ $(ls -1 SUCCESS_*|wc -l) -ne 4 ]; then false; fi &&
 rm -f SUCCESS_* &&
    echo OK

    echo OK

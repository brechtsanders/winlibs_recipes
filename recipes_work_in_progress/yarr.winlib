export NAME="YARR"
export STATUS=
export URL=http://yarr.rtfd.org/
export BASENAME=yarr
export DESCRIPTION="YARR: Yet Another Rapid Readout - YARR is a readout system based around the concept of moving intelligence from the FPGA firmware into the host computer software. The role of the FPGA is the one of a reconfigurable I/O interface and not anymore the one of a hardware accelerator."
export CATEGORY=hardware
export TYPE=library
#export VERSION=0.9.1
#export VERSIONDATE=20181122
#export VERSION=0.9.2
#export VERSIONDATE=20190302
#export VERSION=1.0.3
#export VERSIONDATE=20190809
#export VERSION=1.1.0
#export VERSIONDATE=20191003
#export VERSION=1.1.1
#export VERSIONDATE=20200303
#export VERSION=1.2
#export VERSIONDATE=20200428
#export VERSION=1.2.2
#export VERSIONDATE=20210311
#export VERSION=1.3
#export VERSIONDATE=20210922
#export VERSION=1.3.1
#export VERSIONDATE=20220213
#export VERSION=1.4
#export VERSIONDATE=20230126
export VERSION=1.4.1
export VERSIONDATE=20230131
wl-showstatus --package-version
export DEPENDENCIES=
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE.txt
export LICENSETYPE=GPL
#export DOWNLOADURL="https://github.com/Yarr/Yarr/releases"
export DOWNLOADURL="https://github.com/Yarr/Yarr/tags"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://github.com/Yarr/Yarr/archive/v$VERSION.tar.gz
export DOWNLOADSOURCEURL=https://github.com/Yarr/Yarr/archive/refs/tags/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd Yarr-$VERSION
# fix missing realpath in src/libUtil/DBHandler.cpp
mv src/libUtil/DBHandler.cpp src/libUtil/DBHandler.cpp.bak &&
echo "#define realpath(N,R) _fullpath((R),(N),_MAX_PATH)" > src/libUtil/DBHandler.cpp &&
cat src/libUtil/DBHandler.cpp.bak >> src/libUtil/DBHandler.cpp
#mkdir -p build_test; cd build_test; cmake.exe -G"MSYS Makefiles" . -LH && echo OK; cd ..; rm -rf build_test
#rm -rf CMakeCache.txt CMakeFiles; cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release . -LH && echo OK
#export BUILDDEPENDENCIES=cmake
#export OPTIONALBUILDDEPENDENCIES=
#PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ 
sed -i.bak -e "s/^\(detect_js\s*=\s*\).*$/&/" src/external/src/tbb_2020/build/windows.inc
mkdir -p build_win &&
 wl-showstatus configure &&
 cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -S. -Bbuild_win &&
 wl-showstatus build &&
 ninja -Cbuild_win &&
 wl-showstatus build-install &&
 ninja -Cbuild_win install/strip &&
    echo OK

#export BUILDDEPENDENCIES=cmake
#export OPTIONALBUILDDEPENDENCIES=
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cd build_static &&
# cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF .. &&
# cd .. &&
# wl-showstatus configure &&
# cd build_shared &&
# cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON .. &&
# cd .. &&
# wl-showstatus build-install &&
# make -Cbuild_static install/strip &&
# wl-showstatus build-install &&
# make -Cbuild_shared install/strip &&
#    echo OK

# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf Yarr-$VERSION




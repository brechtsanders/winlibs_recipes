export NAME="TDB"
export STATUS=
#export URL=http://sourceforge.net/projects/tdb/
export URL=http://tdb.samba.org/
export BASENAME=tdb
export DESCRIPTION="TDB is a Trivial Database. In concept, it is very much like GDBM, and BSD's DB except that it allows multiple simultaneous writers and uses locking internally to keep writers from trampling on each other. TDB is also extremely small."
export CATEGORY=db
export TYPE=library
#export VERSION=1.0.6
#export VERSIONDATE=20100428
#export VERSION=1.2.9
#export VERSIONDATE=20120212
#export VERSION=1.2.10
#export VERSIONDATE=20120411
#export VERSION=1.2.11
#export VERSIONDATE=20121130
#export VERSION=1.2.12
#export VERSIONDATE=20130605
#export VERSION=1.2.13
#export VERSIONDATE=20140320
#export DEPENDENCIES=plibc
#export VERSION=1.3.0
#export VERSIONDATE=20140523
#export VERSION=1.3.1
#export VERSIONDATE=20140917
#export VERSION=1.3.2
#export VERSIONDATE=20141201
#export VERSION=1.3.3
#export VERSIONDATE=20141203
#export VERSION=1.3.4
#export VERSIONDATE=20141222
####File "./buildtools/wafsamba\samba_install.py", line 228, in symlink_bin
####os.symlink(binpath, bldpath)
####AttributeError: 'module' object has no attribute 'symlink'
#export VERSION=1.3.5
#export VERSIONDATE=20150429
#export VERSION=1.3.6
#export VERSIONDATE=20150613
#export VERSION=1.3.7
#export VERSIONDATE=20150722
#export VERSION=1.3.8
#export VERSIONDATE=20151106
#export VERSION=1.3.9
#export VERSIONDATE=20160412
#export VERSION=1.3.10
#export VERSIONDATE=20160728
#export VERSION=1.3.11
#export VERSIONDATE=20160830
#export VERSION=1.3.12
#export VERSIONDATE=20161201
#export VERSION=1.3.13
#export VERSIONDATE=20170428
#export VERSION=1.3.14
#export VERSIONDATE=20170703
#export VERSION=1.3.15
#export VERSIONDATE=20170827
#export VERSION=1.3.16
#export VERSIONDATE=20180712
#export VERSION=1.3.17
#export VERSIONDATE=20190115
#export VERSION=1.3.18
#export VERSIONDATE=20190226
#export VERSION=1.4.0
#export VERSIONDATE=20190321
#export VERSION=1.4.1
#export VERSIONDATE=20190820
#export VERSION=1.4.2
#export VERSIONDATE=20190821
#export VERSION=1.4.3
#export VERSIONDATE=20191216
#export VERSION=1.4.4
#export VERSIONDATE=20210715
#export VERSION=1.4.5
#export VERSIONDATE=20210720
#export VERSION=1.4.6
#export VERSIONDATE=20220124
#export VERSION=1.4.7
#export VERSIONDATE=20220609
export VERSION=1.4.8
export VERSIONDATE=20230119
wl-showstatus --package-version
export DEPENDENCIES=
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=COPYING
export LICENSETYPE=GPL2
#export DOWNLOADURL="http://sourceforge.net/projects/tdb/files/"
#export DOWNLOADURL="http://sourceforge.net/projects/tdb/files/tdb/"
export DOWNLOADURL="http://www.samba.org/ftp/tdb/"
#export DOWNLOADURL="https://download.samba.org/pub/tdb/"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://downloads.sourceforge.net/project/tdb/tdb/$VERSION/$BASENAME-$VERSION.tar.gz
export DOWNLOADSOURCEURL=http://www.samba.org/ftp/tdb/$BASENAME-$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
tar xfz $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
cd $BASENAME-$VERSION
# fix missing sys/mman.h
mkdir sys
touch sys/mman.h
# fix buildtools/wafsamba/wscript
patch -ulbf buildtools/wafsamba/wscript << EOF
--- buildtools/wafsamba/wscript  2012-11-30 09:51:32 +0100
+++ buildtools/wafsamba/wscript  2013-01-10 23:04:28 +0100
@@ -230,13 +230,2 @@

-        cc.run = Task.compile_fun_noshell('cc', '\${CC} \${CCFLAGS} \${CPPFLAGS} \${_CCINCFLAGS} \${_CCDEFFLAGS} \${CC_SRC_F}\${SRC} \${CC_TGT_F}\${TGT[0].abspath(env)}')[0]
-        try:
-            try:
-                conf.check(features='cc testd', fragment='int main() {return 0;}\\n', ccflags=['-MD'], mandatory=True, msg='Check for -MD')
-            except:
-                pass
-            else:
-                conf.check_tool('gccdeps', tooldir=conf.srcdir + "/buildtools/wafsamba")
-        finally:
-            cc.run = oldmeth
-
     # make the install paths available in environment
@@ -380,6 +369,2 @@

-    # see if we need special largefile flags
-    if not conf.CHECK_LARGEFILE():
-        raise Utils.WafError('Samba requires large file support support, but not available on this platform: sizeof(off_t) < 8')
-
     if 'HAVE_STDDEF_H' in conf.env and 'HAVE_STDLIB_H' in conf.env:
EOF
## fix buildtools/wafsamba/wafsamba.py (version <= 1.3.3)
#patch -ulbf buildtools/wafsamba/wafsamba.py << EOF
#--- buildtools/wafsamba/wafsamba.py  2012-11-30 09:49:18 +0100
#+++ buildtools/wafsamba/wafsamba.py  2013-01-10 23:11:40 +0100
#@@ -65,7 +65,7 @@
#     # to be expressed in terms of build directory paths
#-    mkdir_p(os.path.join(conf.blddir, 'default'))
#-    for p in ['python','shared', 'modules']:
#-        link_target = os.path.join(conf.blddir, 'default/' + p)
#-        if not os.path.lexists(link_target):
#-            os.symlink('../' + p, link_target)
#+    #mkdir_p(os.path.join(conf.blddir, 'default'))
#+    #for p in ['python','shared', 'modules']:
#+    #    link_target = os.path.join(conf.blddir, 'default/' + p)
#+    #    if not os.path.lexists(link_target):
#+    #        os.symlink('../' + p, link_target)
#
#EOF
# fix buildtools/wafsamba/wafsamba.py (version >= 1.3.4)
patch -ulbf buildtools/wafsamba/wafsamba.py << EOF
--- buildtools/wafsamba/wafsamba.py  2014-11-29 11:30:58 +0100
+++ buildtools/wafsamba/wafsamba.py  2014-12-22 19:05:10 +0100
@@ -67,7 +67,7 @@
     # to be expressed in terms of build directory paths
-    mkdir_p(os.path.join(conf.blddir, 'default'))
-    for (source, target) in [('shared', 'shared'), ('modules', 'modules'), ('python', 'python_modules')]:
-        link_target = os.path.join(conf.blddir, 'default/' + target)
-        if not os.path.lexists(link_target):
-            os.symlink('../' + source, link_target)
+    #mkdir_p(os.path.join(conf.blddir, 'default'))
+    #for (source, target) in [('shared', 'shared'), ('modules', 'modules'), ('python', 'python_modules')]:
+    #    link_target = os.path.join(conf.blddir, 'default/' + target)
+    #    if not os.path.lexists(link_target):
+    #        os.symlink('../' + source, link_target)

EOF
# fix buildtools/wafsamba/samba_utils.py (version >= 1.4.6)
patch -ulbf buildtools/wafsamba/samba_utils.py << EOF
@@ -276,10 +276,10 @@
     """Can create symlink by force"""
-    try:
-        os.symlink(src, dst)
-    except OSError as exc:
-        if exc.errno == errno.EEXIST and force:
-            os.remove(dst)
-            os.symlink(src, dst)
-        else:
-            raise
+    #try:
+    #    os.symlink(src, dst)
+    #except OSError as exc:
+    #    if exc.errno == errno.EEXIST and force:
+    #        os.remove(dst)
+    #        os.symlink(src, dst)
+    #    else:
+    #        raise

EOF
# fix buildtools/wafsamba/samba_python.py (version >= 1.4.6)
sed -i.bak -e "s/python3/python/" buildtools/wafsamba/samba_python.py
# fix lib/replace/wscript
patch -ulbf lib/replace/wscript << EOF
--- lib/replace/wscript  2012-11-30 09:51:32 +0100
+++ lib/replace/wscript  2013-01-10 23:27:52 +0100
@@ -445,4 +445,5 @@
                     define='HAVE_SECURE_MKSTEMP',
+                    lib='plibc',
                     execute=True,
-                    mandatory=True) # lets see if we get a mandatory failure for this one
+                    mandatory=False) # lets see if we get a mandatory failure for this one

EOF
wl-showstatus configure &&
 #PATH=$PYDIR:$PATH ./configure configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM &&
 PATH=$PYDIR:$PATH $PYDIR/python.exe buildtools/bin/waf configure --prefix=$INSTALLPREFIX --bundled-libraries=NONE &&
 #$PYDIR/python.exe -v buildtools/bin/waf configure --prefix=$INSTALLPREFIX --bundled-libraries=NONE &&
 wl-showstatus build-install &&
 #echo "#include <plibc.h>" >> config.h &&
 #PATH=$PYDIR:$PATH make -j1 all install &&
 #PATH=$PYDIR:$PATH make -j1 all install WAF_BINARY="$PYDIR/python.exe $(which waf)" &&
 PATH=$PYDIR:$PATH make -j1 all install WAF_BINARY="$PYDIR/python.exe buildtools/bin/waf" &&
    echo OK
 #for F in common/*.c; do
 # gcc -c -o $F.o $F -Ilib/replace
 #done &&
 #   echo OK
#wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && rm -rf $BASENAME-$VERSION




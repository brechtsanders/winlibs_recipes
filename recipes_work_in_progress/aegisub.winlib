export NAME="Aegisub"
export STATUS=
#export URL=http://devel.aegisub.org/
#export URL=https://github.com/Aegisub/Aegisub
export URL=https://github.com/TypesettingTools/Aegisub
export BASENAME=aegisub
export DESCRIPTION="Cross-platform advanced subtitle editor"
export CATEGORY=application
export TYPE=multimedia
#export VERSION=3.2.2
#export VERSIONDATE=20210119
#export VERSION=3.4.1
#export VERSIONDATE=20250102
export VERSION=3.4.2
export VERSIONDATE=20250113
wl-showstatus --package-version
export DEPENDENCIES=wxwidgets,boost,portaudio,fftw,ffms2,hunspell,libass,freetype2,fontconfig,icu,libiconv
export OPTIONALDEPENDENCIES=pulseaudio
export BUILDDEPENDENCIES=meson,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE="GPL-compatible BSD-style"
#export DOWNLOADURL="https://github.com/Aegisub/Aegisub/releases"
export DOWNLOADURL="https://github.com/TypesettingTools/Aegisub/releases Aegisub-"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://github.com/Aegisub/Aegisub/releases/download/v$VERSION/$BASENAME-$VERSION.tar.xz
export DOWNLOADSOURCEURL=https://github.com/TypesettingTools/Aegisub/releases/download/v$VERSION/Aegisub-$VERSION.tar.xz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
#tar xJ --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.xz
tar xJ --force-local -f $TARBALLDIR/$BASENAME/Aegisub-$VERSION.tar.xz
cd Aegisub-$VERSION
wl-showstatus configure &&
 #mkdir -p m4 &&
 #autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal &&
 #./autogen.sh &&
 #    echo OK
 ## fix building DLLs on 64-bit
 #if ( echo $RUNPLATFORM | grep -q x86_64 ); then
 # echo "AM_GNU_GETTEXT_VERSION([$(gettext --version|head -n1|sed -e "s/^.* \([0-9\.]*\) *$/\1/")])" >> configure.ac &&
 # autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal
 #fi
 #INTLTOOL_PERL="$PERLDIR/bin/perl.exe" 
 #PERL="$PERLDIR/bin/perl.exe -I$PERLDIR/lib" 
 #PYTHON=$PYDIR/python.exe 
 #PYTHON=$PYDIR/python.exe C_INCLUDE_PATH=$PYDIR/include${C_INCLUDE_PATH:+:$C_INCLUDE_PATH} 
 #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --enable-shared --enable-static --host=$RUNPLATFORM LDFLAGS="-Wl,-no-undefined -Wl,--as-needed" &&
 ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-wx-prefix=$MINGWPREFIX/wx --with-player-audio=PortAudio --disable-gcc-prec --disable-update-checker LDFLAGS="-Wl,--as-needed" LIBS="-liconv" &&
 ## fix building DLLs
 #sed -i.bak -e "s/\(allow_undefined=\)yes/\1no/" libtool &&
 ## fix detection of shared libraries
 #sed -i.bak2 -e "s/\(deplibs_check_method=\"\)[^\"]*/\1file_magic ^x86 archive import|^x86 DLL|PE32+* executable (DLL)|pe-i386|pe-x86-64/; s/'file format pe-i386[^']*'/\"\$deplibs_check_method\"/" libtool &&
 #sed -i.bak2 -e "s/\(deplibs_check_method=\"\)[^\"]*/\1none/" libtool &&
 #sed -i.bak2 -e "s/\(deplibs_check_method=\"\)[^\"]*/\1pass_all/" libtool &&
 #wl-showstatus build &&
 #make &&
 wl-showstatus build-install &&
 make install-strip &&
    echo OK
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf Aegisub-$VERSION



#export BUILDDEPENDENCIES=meson,ninja
#-Dc_args=$CFLAGS -Dcpp_args=$CXXFLAGS -Dc_link_args=$LDFLAGS -Dcpp_link_args=$LDFLAGS
## fix location of Perl
#sed -i.bak -e "s?'perl'?'$(cygpath -w $PERLDIR/bin/perl.exe|sed -e 's/\\/&&&&/g')'?" meson.build
## fix detection of Python
#sed -i.bak -e "s?'python3'?'$(cygpath -w $PYDIR/python.exe|sed -e 's/\\/&&&&/g')'?" meson.build
## fix missing gio-unix
##sed -i.bak -e "s/gio-unix-/gio-/" meson.build
#sed -i.bak -e "s/gio-unix-/gio-windows-/" meson.build
#mkdir -p build_both &&
# wl-showstatus configure &&
# PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Dofficial_release=true -Dlocal_boost=false -Dsystem_luajit=true . build_both &&
# ## fix slash/backslash path issue when calling Python from Ninja
# #sed -i.bak -e "s/join_paths/os.path.join/g; /COMMAND =.*python\.exe/ s?\"/\([a-zA-Z]\)/?\"\1:/?; /COMMAND =.*python\.exe/ s?/?\\\\?g" build_*/build.ninja &&
# ## fix Python path issues in meson_exe
# #sed -i.bak -e "s?$PYDIR?$(echo $PYDIR|sed -e "s?^/\([a-zA-Z]\)/?\1:/?")?" build_both/meson-private/meson_exe_python.exe_*.dat &&
# ## fix execution of Python scripts
# #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *= *\| *=.*\&\& *\)\(\"\{0,1\}[^ ]*\)\(\.py\|glib-mkenums\|g-ir-scanner\|asciidoc\)\(\"\{0,1\} \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_both/build.ninja &&
# ## fix executing shell scripts
# #sed -i.bak -e "s?^\(\s*COMMAND\s*=\s*\)\(\"[^\"]*\.sh\"\)?\1\"$(cygpath -m $(which sh.exe))\" \2?" build_both/build.ninja &&
# wl-showstatus build-install &&
# #PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib \
# #PATH=$PYDIR:$PATH PYTHONPATH=$MINGWPREFIX/python/Lib/site-packages${PYTHONPATH:+:$PYTHONPATH} \
# #ninja -Cbuild_both install/strip &&
# ninja -Cbuild_both install &&
#    echo OK && find . -name '*.a'

export NAME="NAppGUI"
export STATUS=
export URL=https://nappgui.com/
#export URL=https://github.com/frang75/nappgui_src
export BASENAME=nappgui
export DESCRIPTION="NAppGUI is a professional SDK to build cross-platform desktop applications using The C Programming Language. C++ is supported but not required, an entire program can be written using ANSI C90. NAppGUI has built as a lightweight layer on top of the native APIs, that allows create portable programs extremelly fast and small without any external dependency. All requirements come standard with the operating system itself."
export CATEGORY=gui
export TYPE=library
#export VERSION=1.2.0
#export VERSIONDATE=20211209
#export VERSION=1.2.1
#export VERSIONDATE=20220321
#export VERSION=1.2.1-r6
#export VERSIONDATE=20220322
#export VERSION=1.2.2
#export VERSIONDATE=20220430
export VERSION=1.2.3
export VERSIONDATE=20220606
wl-showstatus --package-version
export DEPENDANCIES=
export OPTIONALDEPENDANCIES=
export BUILDDEPENDANCIES=cmake,ninja
export LICENSEFILE=LICENSE
export LICENSETYPE=MIT
export DOWNLOADURL="https://github.com/frang75/nappgui_src/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/frang75/nappgui_src/archive/refs/tags/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xfz $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd nappgui_src-$VERSION
# fix src/sewer/win/bmem_win.c (version >= 1.2.0)
patch -ulbf src/sewer/win/bmem_win.c << EOF
@@ -26,5 +26,2 @@

-#if !defined (_MSC_VER)
-#error Unknow compiler
-#endif

EOF
# fix src/osbs/win/btime.c (version >= 1.2.0)
patch -ulbf src/osbs/win/btime.c << EOF
@@ -23,3 +23,3 @@

-#define EPOCHFILETIME (116444736000000000i64)
+#define EPOCHFILETIME (116444736000000000ULL)

EOF
# fix prj/CMakeCompilers.txt (version >= 1.2.0)
patch -ulbf prj/CMakeCompilers.txt << EOF
@@ -105,2 +105,15 @@
         set(NAPPGUI_COMPILER_TOOLSET \${CMAKE_VS_PLATFORM_TOOLSET})
+    elseif(MINGW)
+        add_definitions(-DUNICODE -D_UNICODE -D_WINDOWS -DVS_PLATFORM=1101)
+        set(HOST_ARCH \${CMAKE_HOST_SYSTEM_PROCESSOR})
+        if (\${HOST_ARCH} STREQUAL "i386")
+           set(NAPPGUI_HOST x86)
+            add_definitions(-D_M_IX86)
+        elseif (\${HOST_ARCH} STREQUAL "AMD64")
+           set(NAPPGUI_HOST x64)
+            add_definitions(-D_M_AMD64)
+        else()
+           message("- Unknown host architecture")
+        endif()
+        message(STATUS "- Host architecture: \${HOST_ARCH}")
     else()
EOF
mkdir -p build_win &&
 wl-showstatus configure &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -Ssrc -Bbuild_win &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DCMAKE_CXX_FLAGS:STRING="-std=c++11 -I$(cygpath -m $MINGWDIR/$RUNPLATFORM/include/gdiplus)" -Ssrc -Bbuild_win &&
 wl-showstatus build &&
 ninja -Cbuild_win &&
 wl-showstatus build-install &&
 ninja -Cbuild_win install/strip &&
    echo OK
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf nappgui_src-$VERSION




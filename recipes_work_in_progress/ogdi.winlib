export NAME="OGDI"
export STATUS=
export URL=https://ogdi.codeplex.com/
#export URL=http://github.com/openlab/datalab
export BASENAME=ogdi
export DESCRIPTION="OGDI is the Open Geographic Datastore Interface. OGDI is an application programming interface (API) that uses a standardized access methods to work in conjunction with GIS software packages (the application) and various geospatial data products. OGDI uses a client/server architecture to facilitate the dissemination of geospatial data products over any TCP/IP network, and a driver-oriented approach to facilitate access to several geospatial data products/formats."
export CATEGORY=geo
export TYPE=library
export VERSION=3.1.6
export VERSIONDATE=20160130
wl-showstatus --package-version
export DEPENDENCIES=
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE="Microsoft Public License \(Ms-PL\)"
#export DOWNLOADURL="http://sourceforge.net/projects/ogdi/files/ogdi/"
export DOWNLOADURL="https://github.com/openlab/OGDI-DataLab/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=http://downloads.sourceforge.net/project/ogdi/ogdi/$VERSION/$BASENAME-$VERSION.tar.gz
export DOWNLOADSOURCEURL=http://downloads.sourceforge.net/project/ogdi/ogdi/3.1.6/ogdi-3.1.6.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xfz $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
cd $BASENAME-$VERSION
# fix configure for Windows
patch -ulbf configure << EOF
--- configure  2016-01-30 08:16:05.023879400 +0100
+++ configure  2016-01-30 08:16:09.539531100 +0100
@@ -1321,5 +1321,5 @@
   { { echo "\$as_me:\$LINENO: error: Please don't use configure for Windows, see README." >&5
 echo "\$as_me: error: Please don't use configure for Windows, see README." >&2;}
-   { (exit 1); exit 1; }; }
+  }
 fi

EOF
wl-showstatus configure &&
#./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM TOPDIR=$(pwd) &&
#./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM TOPDIR=$(pwd) --with-proj=$MINGWPREFIX --with-zlib=$MINGWPREFIX --with-expat=$MINGWPREFIX &&
./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM TOPDIR=$(pwd) --with-zlib=$MINGWPREFIX --with-expat=$MINGWPREFIX &&
 # fix build environment for MinGW
 mv config/$(uname -s).mak config/$(uname -s).mak.bak &&
 #sed -e "s/unix\.mak/my_mingw.mak/; s/UNIX/WINDOWS/; s/^\(PLATFORM\s*=\s*\).*$/\1win32/; s?^\(COMMON_CFLAGS\s*=.*\)\$?\1 -D_WINDOWS=1 -I\$(TOPDIR)/include/win32 -I\$(TOPDIR)/proj?; s/^SHLIB_LDFLAGS\s*=.*$/& -s -Wl,--as-needed -lws2_32/; s/^\(\(PROJ\|ZLIB\|EXPAT\)_SETTING\s*=\s*\).*$/\1external/; s/^\(PROJ\|ZLIB\|EXPAT\)\(_LINKLIB\s*:=\s*\).*$/\1\2-l\L\1\E/i" config/$(uname -s).mak.bak > config/$(uname -s).mak &&
 sed -e "s/unix\.mak/my_mingw.mak/; s/UNIX/WINDOWS/; s/^\(PLATFORM\s*=\s*\).*$/\1win32/; s?^\(COMMON_CFLAGS\s*=.*\)\$?\1 -D_WINDOWS=1 -I\$(TOPDIR)/include/win32 -I\$(TOPDIR)/proj?; s/^SHLIB_LDFLAGS\s*=.*$/& -s -Wl,--as-needed -lws2_32/; s/^\(\(ZLIB\|EXPAT\)_SETTING\s*=\s*\).*$/\1external/; s/^\(ZLIB\|EXPAT\)\(_LINKLIB\s*:=\s*\).*$/\1\2-l\L\1\E/i" config/$(uname -s).mak.bak > config/$(uname -s).mak &&
 sed -e "s/-Dunix//; s/^\(SHLIB_EXT\s*=\s*\).*$/\1dll/; s/^\(LIBC_LINKLIB\s*=\s*\).*$/\1/; s/\$(SHLIB_LDFLAGS)/& ..\/\$(TOBEGEN).def/" config/unix.mak > config/my_mingw.mak &&
 wl-showstatus build &&
 #make TOPDIR=$(pwd) -j1 -Cexternal/rpc_win32 &&
 make TOPDIR=$(pwd) &&
 wl-showstatus build-install &&
 make install TOPDIR=$(pwd) &&
    echo OK
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




export NAME="OVITO"
export STATUS=
export URL=https://www.ovito.org/
export BASENAME=ovito
export DESCRIPTION="Open Visualization Tool"
export CATEGORY=graphics
export TYPE=application
#export VERSION=3.7.11
#export VERSIONDATE=20221215
#export VERSION=3.7.12
#export VERSIONDATE=20221216
#export VERSION=3.8.0
#export VERSIONDATE=20230304
#export VERSION=3.8.2
#export VERSIONDATE=20230404
#export VERSION=3.8.3
#export VERSIONDATE=20230416
#export VERSION=3.8.4
#export VERSIONDATE=20230503
#export VERSION=3.8.5
#export VERSIONDATE=20230620
#export VERSION=3.9.0
#export VERSIONDATE=20230802
#export VERSION=3.9.1
#export VERSIONDATE=20230805
#export VERSION=3.9.2
#export VERSIONDATE=20230901
#export DEPENDENCIES=qt,libssh
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=cmake,ninja
#export OPTIONALBUILDDEPENDENCIES=
#export VERSION=3.9.3
#export VERSIONDATE=20231102
#export VERSION=3.9.4
#export VERSIONDATE=20231104
#export VERSION=3.10.0
#export VERSIONDATE=20240105
#export VERSION=3.10.1
#export VERSIONDATE=20240117
#export VERSION=3.10.2
#export VERSIONDATE=20240203
export VERSION=3.10.3
export VERSIONDATE=20240221
####src/ovito/vulkan/VulkanCylinderPrimitive.cpp:316:25: error: 'isPicking' was not declared in this scope
wl-showstatus --package-version
export DEPENDENCIES=qt6,libssh
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE.txt
export LICENSETYPE=GPL/MIT
export DOWNLOADURL="https://gitlab.com/stuko/ovito/-/tags"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://gitlab.com/stuko/ovito/-/archive/v$VERSION/$BASENAME-v$VERSION.tar.bz2
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xj --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-v$VERSION.tar.bz2
cd $BASENAME-v$VERSION
# fix missing int8_t in src/3rdparty/ptm/ptm_polar.cpp (version >= 3.7.12)
mv src/3rdparty/ptm/ptm_polar.cpp src/3rdparty/ptm/ptm_polar.cpp.bak &&
echo "#include <stdint.h>" > src/3rdparty/ptm/ptm_polar.cpp &&
cat src/3rdparty/ptm/ptm_polar.cpp.bak >> src/3rdparty/ptm/ptm_polar.cpp
# fix redefinition of S_IRUSR/S_IWUSR/S_IRGRP/S_IWGRP in src/3rdparty/gsd/gsd.c (version >= 3.10.2)
patch -ulbf src/3rdparty/gsd/gsd.c << EOF
@@ -91,2 +91,3 @@

+#ifndef S_IRUSR
 int S_IRUSR = _S_IREAD;
@@ -95,2 +96,3 @@
 int S_IWGRP = _S_IWRITE;
+#endif

EOF
# fix src/ovito/core/CMakeLists.txt (version >= 3.7.11)
patch -ulbf src/ovito/core/CMakeLists.txt << EOF
@@ -306,3 +306,3 @@
                        IF(NOT lib_dll)
-                               MESSAGE(FATAL_ERROR "Could not find corresponding DLL for ffmpeg library '\${lib}' in same directory.")
+                               MESSAGE(WARNING "Could not find corresponding DLL for ffmpeg library '\${lib}' in same directory.")
                        ENDIF()
EOF
# fix cmake/Prerequisites.cmake (version >= 3.7.11)
patch -ulbf cmake/Prerequisites.cmake << EOF
@@ -59,3 +59,3 @@
                IF(NOT lib_versions)
-                       MESSAGE(FATAL_ERROR "Did not find any library files that match the file path \${_shared_lib} (globbing patterns: \${lib_base_name}.*\${CMAKE_SHARED_LIBRARY_SUFFIX}; \${lib_base_name}\${CMAKE_SHARED_LIBRARY_SUFFIX}.*)")
+                       MESSAGE(WARNING "Did not find any library files that match the file path \${_shared_lib} (globbing patterns: \${lib_base_name}.*\${CMAKE_SHARED_LIBRARY_SUFFIX}; \${lib_base_name}\${CMAKE_SHARED_LIBRARY_SUFFIX}.*)")
                ENDIF()
@@ -85,3 +85,3 @@
                FOREACH(lib_file \${lib_files})
-                       IF(NOT APPLE)
+                       IF(NOT APPLE AND NOT MINGW)
                                MESSAGE("Installing shared library \${lib_file}")
EOF

#grep -wi add_library $(find -name CMakeLists.txt -or -name '*.cmake')
#mkdir -p build_test && PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ cmake.exe -G"MSYS Makefiles" -DOVITO_BUILD_PLUGIN_VULKAN:BOOL=ON -DOVITO_LIBSSH_RUNTIME_LINKING:BOOL=ON -S. -Bbuild_test -LH && echo OK; rm -rf build_test
mkdir -p build_win &&
 wl-showstatus configure &&
 #C_INCLUDE_PATH=$MINGWPREFIX/ffmpeg5/include${C_INCLUDE_PATH:+:$C_INCLUDE_PATH} CPLUS_INCLUDE_PATH=$MINGWPREFIX/ffmpeg5/include${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} PKG_CONFIG_PATH=$MINGWPREFIX/ffmpeg5/lib/pkgconfig${PKG_CONFIG_PATH:+:$PKG_CONFIG_PATH} PATH=$MINGWPREFIX/ffmpeg5/bin:$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DOVITO_USE_PRECOMPILED_HEADERS:BOOL=OFF -DOVITO_BUILD_PLUGIN_VULKAN:BOOL=ON -DOVITO_LIBSSH_RUNTIME_LINKING:BOOL=ON -DOPENSSL_ROOT_DIR:PATH=$MINGWPREFIX -DPython3_EXECUTABLE:FILEPATH=$PYDIR/python.exe -S. -Bbuild_win &&
 C_INCLUDE_PATH=$MINGWPREFIX/ffmpeg5/include${C_INCLUDE_PATH:+:$C_INCLUDE_PATH} CPLUS_INCLUDE_PATH=$MINGWPREFIX/ffmpeg5/include${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} PKG_CONFIG_PATH=$MINGWPREFIX/ffmpeg5/lib/pkgconfig${PKG_CONFIG_PATH:+:$PKG_CONFIG_PATH} PATH=$MINGWPREFIX/ffmpeg5/bin:$PATH:$MINGWPREFIX/qt6/bin QTDIR=$MINGWPREFIX/qt6 QMAKESPEC=$MINGWPREFIX/qt6/mkspecs/win32-g++ cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DOVITO_USE_PRECOMPILED_HEADERS:BOOL=OFF -DOVITO_BUILD_PLUGIN_VULKAN:BOOL=ON -DOVITO_LIBSSH_RUNTIME_LINKING:BOOL=ON -DOPENSSL_ROOT_DIR:PATH=$MINGWPREFIX -DPython3_EXECUTABLE:FILEPATH=$PYDIR/python.exe -S. -Bbuild_win &&
 #wl-showstatus build &&
 #ninja -Cbuild_win &&
 wl-showstatus build-install &&
 CPLUS_INCLUDE_PATH=$MINGWPREFIX/ffmpeg5/include${CPLUS_INCLUDE_PATH:+:$CPLUS_INCLUDE_PATH} ninja -Cbuild_win install/strip &&
    echo OK

#export BUILDDEPENDENCIES=cmake,ninja
#export OPTIONALBUILDDEPENDENCIES=
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -S. -Bbuild_static &&
# #-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -S. -Bbuild_shared &&
# ## fix execution of Python scripts
# #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|glib-genmarshal\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
# ## fix missing link libraries
# #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lws2_32/" build_shared/build.ninja &&
# #wl-showstatus build &&
# #ninja -Cbuild_static &&
# #wl-showstatus build &&
# #ninja -Cbuild_shared &&
# wl-showstatus build-install &&
# ninja -Cbuild_static install/strip &&
# #ninja -Cbuild_static library/install/strip &&
# wl-showstatus build-install &&
# ninja -Cbuild_shared install/strip &&
#    echo OK

#-DCMAKE_BUILD_TYPE:STRING=MinSizeRel

#export BUILDDEPENDENCIES=meson,ninja
#export OPTIONALBUILDDEPENDENCIES=
#-Dc_args=$CFLAGS -Dcpp_args=$CXXFLAGS -Dc_link_args=$LDFLAGS
## fix missing gio-unix
#sed -i.bak -e "s/gio-unix-/gio-/" meson.build
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library static -D documentation=true . build_static &&
# wl-showstatus configure &&
# PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library shared -D documentation=true . build_shared &&
# ## fix slash/backslash path issue when calling Python from Ninja
# #sed -i.bak -e "s/join_paths/os.path.join/g; /COMMAND =.*python\.exe/ s?\"/\([a-zA-Z]\)/?\"\1:/?; /COMMAND =.*python\.exe/ s?/?\\\\?g" build_*/build.ninja &&
# ## add linker flag
# #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*-ladvapi32/& -Wl,--as-needed/" build_shared/build.ninja &&
# ## add linker flag
# #sed -i.bak -e "s/^\s*LINK_ARGS\s*=.*\"-ladvapi32\"/& \"-Wl,--as-needed\"/" build_shared/build.ninja &&
# wl-showstatus build-install &&
# #PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -C build_static install &&
# PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -C build_static install/strip &&
# wl-showstatus build-install &&
# #PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -C build_shared install &&
# PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -C build_shared install/strip &&
#    echo OK && find . -name '*.a'

#export BUILDDEPENDENCIES=meson,ninja
#export OPTIONALBUILDDEPENDENCIES=
#-Dc_args=$CFLAGS -Dcpp_args=$CXXFLAGS -Dc_link_args=$LDFLAGS -Dcpp_link_args=$LDFLAGS
## fix location of Perl
#sed -i.bak -e "s?'perl'?'$(cygpath -w $PERLDIR/bin/perl.exe|sed -e 's/\\/&&&&/g')'?" meson.build
## fix detection of Python
#sed -i.bak -e "s?'python3'?'$(cygpath -w $PYDIR/python.exe|sed -e 's/\\/&&&&/g')'?" meson.build
## fix missing gio-unix
##sed -i.bak -e "s/gio-unix-/gio-/" meson.build
#sed -i.bak -e "s/gio-unix-/gio-windows-/" meson.build
#mkdir -p build_both &&
# wl-showstatus configure &&
# PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Ddocumentation=true . build_both &&
# ## fix slash/backslash path issue when calling Python from Ninja
# #sed -i.bak -e "s/join_paths/os.path.join/g; /COMMAND =.*python\.exe/ s?\"/\([a-zA-Z]\)/?\"\1:/?; /COMMAND =.*python\.exe/ s?/?\\\\?g" build_*/build.ninja &&
# ## fix Python path issues in meson_exe
# #sed -i.bak -e "s?$PYDIR?$(echo $PYDIR|sed -e "s?^/\([a-zA-Z]\)/?\1:/?")?" build_both/meson-private/meson_exe_python.exe_*.dat &&
# ## fix execution of Python scripts
# #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *= *\| *=.*\&\& *\)\(\"\{0,1\}[^ ]*\)\(\.py\|glib-mkenums\|g-ir-scanner\|asciidoc\)\(\"\{0,1\} \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_both/build.ninja &&
# ## fix executing shell scripts
# #sed -i.bak -e "s?^\(\s*COMMAND\s*=\s*\)\(\"[^\"]*\.sh\"\)?\1\"$(cygpath -m $(which sh.exe))\" \2?" build_both/build.ninja &&
# wl-showstatus build-install &&
# PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -Cbuild_both install/strip &&
# #PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -Cbuild_both install &&
# #PATH=$PERLDIR/../c/bin:$PERLDIR/bin:$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -Cbuild_both install &&
#    echo OK && find . -name '*.a'

#wl-showstatus install &&
# mkdir -p $INSTALLPREFIX/python/Lib/site-packages &&
# PYTHONPATH=$INSTALLPREFIX/python/Lib/site-packages:$MINGWPREFIX/python/Lib/site-packages $PYDIR/python setup.py install --prefix=$(cygpath.exe -w $INSTALLPREFIX/python) &&
#    echo OK

#export DEPENDENCIES=qt
#wl-showstatus configure &&
# $MINGWPREFIX/qt/bin/qmake -makefile *.pro -spec $MINGWPREFIX/qt/mkspecs/win32-g++ &&
# wl-showstatus build &&
# mingw32-make &&
#    echo OK

#export DEPENDENCIES=qt
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cd build_static &&
# $MINGWPREFIX/qt/bin/qmake -makefile ../*.pro -spec $MINGWPREFIX/qt/mkspecs/win32-g++ CONFIG+=staticlib &&
# cd .. &&
# wl-showstatus configure &&
# cd build_shared &&
# $MINGWPREFIX/qt/bin/qmake -makefile ../*.pro -spec $MINGWPREFIX/qt/mkspecs/win32-g++ &&
# cd .. &&
# wl-showstatus build &&
# mingw32-make -Cbuild_static &&
# wl-showstatus build &&
# mingw32-make -Cbuild_shared &&
#    echo OK

#mkdir -p $INSTALLPREFIX/python/Lib/site-packages
#wl-showstatus build-install &&
# PATH=$PYDIR:$PATH PYTHON=$PYDIR/python.exe PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/python/Lib/site-packages:$INSTALLPREFIX/python:$PYDIR/Lib/site-packages:$INSTALLPREFIX/python/Lib/site-packages $PYDIR/python.exe setup.py install --prefix=$(cygpath -w $INSTALLPREFIX/python) &&
# ## delete any __pycache__ folder(s)
# #find $INSTALLPREFIX -name __pycache__ -exec echo rm -rf {} \; | sh &&
#    echo OK

# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-v$VERSION




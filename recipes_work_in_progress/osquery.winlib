export NAME="osquery"
export STATUS=
export URL=https://github.com/osquery/osquery
export BASENAME=osquery
export DESCRIPTION="osquery is a SQL powered operating system instrumentation, monitoring, and analytics framework. Available for Linux, macOS, Windows, and FreeBSD."
export CATEGORY=system
export TYPE=library
#export VERSION=4.5.0
#export VERSIONDATE=20201008
#export VERSION=4.6.0
#export VERSIONDATE=20201215
#export VERSION=4.7.0
#export VERSIONDATE=20210313
#export VERSION=4.8.0
#export VERSIONDATE=20210419
#export VERSION=4.9.0
#export VERSIONDATE=20210615
#export VERSION=5.0.0
#export VERSIONDATE=20210827
#export VERSION=5.0.1
#export VERSIONDATE=20210903
#export VERSION=5.1.0
#export VERSIONDATE=20211204
#export VERSION=5.2.0
#export VERSIONDATE=20211229
#export VERSION=5.2.1
#export VERSIONDATE=20220119
#export VERSION=5.2.2
#export VERSIONDATE=20220205
export VERSION=5.2.3
export VERSIONDATE=20220407
####fatal: not a git repository (or any parent up to mount point /)
wl-showstatus --package-version
export DEPENDANCIES=boost,gtest,glog
export OPTIONALDEPENDANCIES=
export BUILDDEPENDANCIES=cmake,ninja
export LICENSEFILE=LICENSE
export LICENSETYPE=Apache,GPL
export DOWNLOADURL="https://github.com/osquery/osquery/releases/"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/osquery/osquery/archive/$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xfz $TARBALLDIR/$BASENAME/$VERSION.tar.gz
cd $BASENAME-$VERSION
## fix CMakeLists.txt (version >= 5.0.1)
#patch -ulbf CMakeLists.txt << EOF
#@@ -198,2 +198,4 @@
#
#+    elseif(TRUE)
#+      continue()
#     else()
#EOF
mkdir -p build_static build_shared &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DOSQUERY_STATIC_BUILD:BOOL=ON -DOSQUERY_VERSION:STRING=$VERSION -DOSQUERY_THIRD_PARTY_SOURCE:STRING= -DPython3_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DBUILD_TESTING:BOOL=OFF -S. -Bbuild_static &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DOSQUERY_STATIC_BUILD:BOOL=OFF -DOSQUERY_VERSION:STRING=$VERSION -DOSQUERY_THIRD_PARTY_SOURCE:STRING= -DPython3_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DBUILD_TESTING:BOOL=OFF -S. -Bbuild_shared &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DOSQUERY_STATIC_BUILD:BOOL=OFF -DOSQUERY_NO_DEBUG_SYMBOLS:BOOL=ON -DOSQUERY_THIRD_PARTY_SOURCE:STRING= -DOSQUERY_VERSION:STRING=$VERSION -DOSQUERY_BUILD_AWS:BOOL=OFF -DOSQUERY_BUILD_BPF:BOOL=OFF -DOSQUERY_BUILD_DPKG:BOOL=OFF -DPACKAGING_SYSTEM:STRING= -DOSQUERY_CLANG_TIDY_CHECKS:STRING= -DOSQUERY_BUILD_ROOT_TESTS:BOOL=OFF -DOSQUERY_BUILD_TESTS:BOOL=OFF -Dboost_INCLUDE_DIRS:PATH=$MINGWPREFIX/include/boost -Dboost_LIBRARIES="-lboost_system" -Dbzip2_INCLUDE_DIRS:PATH=$MINGWPREFIX/include -Dbzip2_LIBRARIES="-lbz2" -Dlibarchive_INCLUDE_DIRS:PATH=$MINGWPREFIX/include -Dlibarchive_LIBRARIES="-larchive" -Dlibxml2_INCLUDE_DIRS:PATH=$MINGWPREFIX/include -Dlibxml2_LIBRARIES="-lxml2" -Dglog_INCLUDE_DIRS:PATH=$MINGWPREFIX/include -Dglog_LIBRARIES="-lglog" -Dgoogletest_INCLUDE_DIRS:PATH=$MINGWPREFIX/include/gtest -Dgoogletest_LIBRARIES="-lgtest" -Drdkafka_INCLUDE_DIRS:PATH=$MINGWPREFIX/include -Dgoogletest_LIBRARIES="-lrdkafka" -Dlibrdkafka_DIR:PATH=$MINGWPREFIX/lib/cmake/RdKafka -DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) -DPython3_EXECUTABLE:FILEPATH=$PYDIR/python.exe -S. -Bbuild_shared &&
 ## fix execution of Python scripts
 #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
 #wl-showstatus build &&
 #ninja -Cbuild_static &&
 #wl-showstatus build &&
 #ninja -Cbuild_shared &&
 wl-showstatus build-install &&
 ninja -Cbuild_static install/strip &&
 wl-showstatus build-install &&
 ninja -Cbuild_shared install/strip &&
    echo OK
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




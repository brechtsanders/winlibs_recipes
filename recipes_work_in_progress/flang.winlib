export NAME="flang"
export STATUS=
#export URL=http://llvm.org/
export URL=http://flang.llvm.org/
#export URL=https://github.com/flang-compiler/flang
export BASENAME=flang
export DESCRIPTION="Flang is a Fortran compiler targeting LLVM."
export CATEGORY=development
export TYPE=application
export VERSION=11.0.0
export VERSIONDATE=20201012
export DEPENDENCIES=llvm
export OPTIONALDEPENDENCIES=libunwind
#export BUILDDEPENDENCIES=cmake
#export OPTIONALBUILDDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
#export VERSION=12.0.0
#export VERSIONDATE=20210419
wl-showstatus --package-version
#export DEPENDENCIES=llvm-project
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=cmake,ninja
#export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE.TXT
export LICENSETYPE=
#export DOWNLOADURL="http://llvm.org/releases/download.html flang- .src.tar.xz"
export DOWNLOADURL="https://github.com/llvm/llvm-project/releases flang- .src.tar.xz"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/llvm/llvm-project/releases/download/llvmorg-$VERSION/$BASENAME-$VERSION.src.tar.xz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
tar xfJ $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.src.tar.xz
cd $BASENAME-$VERSION.src
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DLLVM_DIR:PATH=$MINGWPREFIX/share/llvm/lib/cmake/llvm -DPython2_EXECUTABLE:PATH=$PY2DIR/python.exe -DPython3_EXECUTABLE:PATH=$PYDIR/python.exe
# -DBUILD_SHARED_LIBS:BOOL=OFF -DLIBCLANG_BUILD_STATIC:BOOL=ON -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF -DCLANG_VENDOR:STRING="(built by Brecht Sanders)" -DCLANG_ENABLE_BOOTSTRAP:BOOL=OFF -DLLVM_DIR:PATH=$MINGWPREFIX/share/llvm/lib/cmake/llvm -DCMAKE_LINKER:FILEPATH=$MINGWPREFIX/share/llvm/bin/lld-link.exe -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DCLANG_BUILD_TOOLS:BOOL=ON -DBUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF -DCLANG_PLUGIN_SUPPORT:BOOL=ON -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=ON -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF CLANG_ENABLE_STATIC_ANALYZER:BOOL=ON -DCLANG_DEFAULT_RTLIB:STRING="libgcc" -DCLANG_DEFAULT_CXX_STDLIB:STRING="libstdc++" -DPython2_EXECUTABLE:PATH=$PY2DIR/python.exe -DPython3_EXECUTABLE:PATH=$PYDIR/python.exe -DCLANG_INCLUDE_DOCS:BOOL=OFF -DCLANG_BUILD_EXAMPLES:BOOL=OFF -DCLANG_INCLUDE_TESTS:BOOL=OFF -S. -Bbuild_static &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DLIBCLANG_BUILD_STATIC:BOOL=ON -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF -DCLANG_VENDOR:STRING="(built by Brecht Sanders)" -DCLANG_ENABLE_BOOTSTRAP:BOOL=OFF -DLLVM_DIR:PATH=$MINGWPREFIX/share/llvm/lib/cmake/llvm -DCMAKE_LINKER:FILEPATH=$MINGWPREFIX/share/llvm/bin/lld-link.exe -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DCLANG_BUILD_TOOLS:BOOL=ON -DBUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF -DCLANG_PLUGIN_SUPPORT:BOOL=ON -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=ON -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF CLANG_ENABLE_STATIC_ANALYZER:BOOL=ON -DCLANG_DEFAULT_RTLIB:STRING="libgcc" -DCLANG_DEFAULT_CXX_STDLIB:STRING="libstdc++" -DPython2_EXECUTABLE:PATH=$PY2DIR/python.exe -DPython3_EXECUTABLE:PATH=$PYDIR/python.exe -DCLANG_INCLUDE_DOCS:BOOL=OFF -DCLANG_BUILD_EXAMPLES:BOOL=OFF -DCLANG_INCLUDE_TESTS:BOOL=OFF -S. -Bbuild_static &&
# #-DLLVM_ENABLE_PIC:BOOL=ON  
# #-DLLVM_TOOL_CLANG_TOOLS_EXTRA_BUILD:BOOL=ON 
# wl-showstatus configure &&
# #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DLIBCLANG_BUILD_STATIC:BOOL=OFF -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF -DCLANG_VENDOR:STRING="(built by Brecht Sanders)" -DCLANG_ENABLE_BOOTSTRAP:BOOL=OFF -DLLVM_DIR:PATH=$MINGWPREFIX/share/llvm/lib/cmake/llvm -DCMAKE_LINKER:FILEPATH=$MINGWPREFIX/share/llvm/bin/lld-link.exe -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DCLANG_BUILD_TOOLS:BOOL=ON -DBUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF -DCLANG_PLUGIN_SUPPORT:BOOL=ON -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=ON -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF CLANG_ENABLE_STATIC_ANALYZER:BOOL=ON -DCLANG_DEFAULT_RTLIB:STRING="libgcc" -DCLANG_DEFAULT_CXX_STDLIB:STRING="libstdc++" -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -DCLANG_INCLUDE_DOCS:BOOL=OFF -DCLANG_BUILD_EXAMPLES:BOOL=OFF -DCLANG_INCLUDE_TESTS:BOOL=OFF -DCMAKE_EXE_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition" -S. -Bbuild_shared &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DLIBCLANG_BUILD_STATIC:BOOL=OFF -DCLANG_LINK_CLANG_DYLIB:BOOL=OFF -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF -DCLANG_VENDOR:STRING="(built by Brecht Sanders)" -DCLANG_ENABLE_BOOTSTRAP:BOOL=OFF -DLLVM_DIR:PATH=$MINGWPREFIX/share/llvm/lib/cmake/llvm -DCMAKE_LINKER:FILEPATH=$MINGWPREFIX/share/llvm/bin/lld-link.exe -DLLVM_ENABLE_RTTI:BOOL=ON -DLLVM_ENABLE_EH:BOOL=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "ON"; else echo "OFF"; fi) -DCLANG_BUILD_TOOLS:BOOL=ON -DBUILD_CLANG_FORMAT_VS_PLUGIN:BOOL=OFF -DCLANG_PLUGIN_SUPPORT:BOOL=ON -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS:BOOL=ON -DCLANG_ENABLE_PROTO_FUZZER:BOOL=OFF CLANG_ENABLE_STATIC_ANALYZER:BOOL=ON -DCLANG_DEFAULT_RTLIB:STRING="libgcc" -DCLANG_DEFAULT_CXX_STDLIB:STRING="libstdc++" -DPython2_EXECUTABLE:PATH=$PY2DIR/python.exe -DPython3_EXECUTABLE:PATH=$PYDIR/python.exe -DCLANG_INCLUDE_DOCS:BOOL=OFF -DCLANG_BUILD_EXAMPLES:BOOL=OFF -DCLANG_INCLUDE_TESTS:BOOL=OFF -DCMAKE_EXE_LINKER_FLAGS:STRING="-Wl,--allow-multiple-definition" -S. -Bbuild_shared &&
# # fix linker error: export ordinal too large
# sed -i.bak -e "s/-Wl,--export-all-symbols/-Wl,--allow-multiple-definition/" build_*/build.ninja &&
# wl-showstatus build-install &&
# ninja -Cbuild_static install/strip &&
# #cp -u build_static/lib/libclang.a $INSTALLPREFIX/share/llvm/lib/ &&
# wl-showstatus build-install &&
# ninja -Cbuild_shared install/strip &&
# # manually install CMake files
# mkdir -p $INSTALLPREFIX/share/llvm/lib/cmake/modules &&
# cp -f cmake/modules/* $INSTALLPREFIX/share/llvm/lib/cmake/modules/ &&
#    echo OK
## wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && rm -rf $BASENAME-$VERSION.src
####Superseded by llvm-project all-in-one build (?)




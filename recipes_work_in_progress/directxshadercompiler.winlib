export NAME="DirectXShaderCompiler"
export STATUS=
export URL=https://github.com/Microsoft/DirectXShaderCompiler
export BASENAME=directxshadercompiler
export DESCRIPTION="The DirectX Shader Compiler project includes a compiler and related tools used to compile High-Level Shader Language (HLSL) programs into DirectX Intermediate Language (DXIL) representation. Applications that make use of DirectX for graphics, games, and computation can use it to generate shader programs."
export CATEGORY=
export TYPE=library
#export VERSION=1.5.2010
#export VERSIONDATE=20201109
#export VERSION=1.6.2104
#export VERSIONDATE=20210421
#export VERSION=1.6.2106
#export VERSIONDATE=20210809
#export VERSION=1.6.2112
#export VERSIONDATE=20211209
#export VERSION=1.7.2207
#export VERSIONDATE=20220715
#export VERSION=1.7.2212
#export VERSIONDATE=20221217
#export VERSION=1.7.2212.1
#export VERSIONDATE=20230303
#export VERSION=1.7.2308
#export VERSIONDATE=20230815
#export VERSION=1.8.2403
#export VERSIONDATE=20240312
#export VERSION=1.8.2403.1
#export VERSIONDATE=20240323
#export VERSION=1.8.2403.2
#export VERSIONDATE=20240403
#export VERSION=1.8.2405
#export VERSIONDATE=20240529
#export VERSION=1.8.2407
#export VERSIONDATE=20240801
export VERSION=1.8.2502
export VERSIONDATE=20250222
####llvm-build: error: invalid target to enable: 'AMDGPU' (not in project)
wl-showstatus --package-version
export DEPENDENCIES=
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE.TXT
export LICENSETYPE="University of Illinois Open Source License"
export DOWNLOADURL="https://github.com/microsoft/DirectXShaderCompiler/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/microsoft/DirectXShaderCompiler/archive/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd DirectXShaderCompiler-$VERSION

#mkdir -p build_test && cmake.exe -G"MSYS Makefiles" -S. -Bbuild_test -LH && echo OK; rm -rf build_test

mkdir -p build_static build_shared &&
 wl-showstatus configure &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -S. -Bbuild_static &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DPython3_EXECUTABLE:FILEPATH=$PYDIR/python.exe -S. -Bbuild_static &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -S. -Bbuild_static &&
 #wl-showstatus configure &&
 #cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -S. -Bbuild_shared &&
 ## fix execution of Python scripts
 #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
 #wl-showstatus build &&
 #ninja -Cbuild_static &&
 #wl-showstatus build &&
 #ninja -Cbuild_shared &&
 wl-showstatus build-install &&
 ninja -Cbuild_static install/strip &&
 #wl-showstatus build-install &&
 #ninja -Cbuild_shared install/strip &&
    echo OK
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf DirectXShaderCompiler-$VERSION




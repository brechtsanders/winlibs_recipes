export NAME="TurboVNC"
export STATUS=
export URL=https://sourceforge.net/projects/turbovnc/
export BASENAME=turbovnc
export DESCRIPTION="TurboVNC is a high-performance, enterprise-quality version of VNC based on TightVNC, TigerVNC, and X.org. It contains a variant of Tight encoding that is tuned for maximum performance and compression with 3D applications (VirtualGL), video, and other image-intensive workloads. TurboVNC, in combination with VirtualGL, provides a complete solution for remotely displaying 3D applications with interactive performance. TurboVNC's high-speed encoding methods have been adopted by TigerVNC and libvncserver, and TurboVNC is also compatible with any other TightVNC derivative."
export CATEGORY=communication
export TYPE=application
#export VERSION=2.2.5
#export VERSIONDATE=20210121
#export VERSION=2.2.6
#export VERSIONDATE=20210222
#export VERSION=2.2.7
#export VERSIONDATE=20211222
export VERSION=3.0
export VERSIONDATE=20220504
wl-showstatus --package-version
export DEPENDANCIES=
export OPTIONALDEPENDANCIES=
export BUILDDEPENDANCIES=cmake,ninja
export LICENSEFILE=LICENSE.txt
export LICENSETYPE=GPL
export DOWNLOADURL="https://sourceforge.net/projects/turbovnc/files/"
#export DOWNLOADURL="https://github.com/TurboVNC/turbovnc/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://downloads.sourceforge.net/project/turbovnc/$VERSION/$BASENAME-$VERSION.tar.gz
#export DOWNLOADSOURCEURL=https://github.com/TurboVNC/turbovnc/archive/$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xfz $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
#tar xfz $TARBALLDIR/$BASENAME/$VERSION.tar.gz
cd $BASENAME-$VERSION
# fix win/vncviewer/safestr.h (version >= 2.2.7)
patch -ulbf win/vncviewer/safestr.h << EOF
@@ -23,3 +23,3 @@
 #define snprintf(str, n, format, ...)  \\
-  _snprintf_s(str, n, _TRUNCATE, format, __VA_ARGS__)
+  _snprintf_s(str, n, _TRUNCATE, format, ##__VA_ARGS__)
 
@@ -28,3 +28,3 @@
 #define SPRINTF(str, format, ...)  \\
-  snprintf(str, _countof(str), format, __VA_ARGS__)
+  snprintf(str, _countof(str), format, ##__VA_ARGS__)
 
EOF
# fix missing min()/max() (version >= 2.2.7)
sed -i.bak -e "s/\(\s\|(\)\(min\|max\)\((\)/\1std::\2\3/g" $(grep -l "\b\(min\|max\)(" $(find -name '*.cpp'))
patch -ulbf win/vncviewer/ClientConnection.cpp << EOF
@@ -1644,4 +1644,4 @@
 
-  m_winwidth  = std::min(fullwinrect.right - fullwinrect.left, workwidth);
-  m_winheight = std::min(fullwinrect.bottom - fullwinrect.top, workheight);
+  m_winwidth  = std::min((int)(fullwinrect.right - fullwinrect.left), workwidth);
+  m_winheight = std::min((int)(fullwinrect.bottom - fullwinrect.top), workheight);
 
EOF
# fix win/vncviewer/res/vncviewer.rc (version >= 2.2.7)
patch -ulbf win/vncviewer/res/vncviewer.rc << EOF
@@ -11,3 +11,3 @@
 #include "windows.h"
-#ifndef IDC_STATIC
+#if !defined(IDC_STATIC)
 #define IDC_STATIC -1
EOF
# fix cmakescripts/FindTurboJPEG.cmake (version >= 2.2.5)
patch -ulbf cmakescripts/FindTurboJPEG.cmake << EOF
@@ -52,3 +52,3 @@
 set(CMAKE_REQUIRED_LIBRARIES \${TJPEG_LIBRARY})
-check_c_source_compiles("#include <turbojpeg.h>\\nint main(void) { tjhandle h = tjInitCompress();  return h != 0 ? 0 : 1; }" TURBOJPEG_WORKS)
+set(TURBOJPEG_WORKS 1)
 if(NOT TURBOJPEG_WORKS AND NOT TJPEG_LIBRARY_OVERRIDE AND UNIX)
EOF
# fix CMakeLists.txt (version >= 2.2.5)
patch -ulbf CMakeLists.txt << EOF
@@ -98,3 +98,3 @@

-if(UNIX OR (WIN32 AND NOT MINGW))
+if(UNIX OR WIN32)
        string(TIMESTAMP DEFAULT_BUILD "%Y%m%d")
EOF
# fix win/CMakeLists.txt (version >= 2.2.5)
patch -ulbf win/CMakeLists.txt << EOF
@@ -6,3 +6,3 @@

-if(NOT MSVC)
+if(NOT WIN32)
        message(FATAL_ERROR "TurboVNC requires Visual C++")
EOF
#  (version >= 2.2.6)
sed -i.bak -e "s/add_definitions(-wd4996)/#&/" common/zlib/CMakeLists.txt
mkdir -p build_win &&
 wl-showstatus configure &&
 PATH=$MINGWPREFIX/share/libjpeg-turbo/bin:$PATH PKG_CONFIG_PATH=$MINGWPREFIX/share/libjpeg-turbo/lib/pkgconfig${PKG_CONFIG_PATH:+:$PKG_CONFIG_PATH} cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DTVNC_BUILDSERVER:BOOL=ON -DTVNC_BUILDJAVA:BOOL=OFF -DTVNC_BUILDVIEWER:BOOL=OFF -DTVNC_BUILDHELPER:BOOL=OFF -DTJPEG_INCLUDE_DIR:PATH=$MINGWPREFIX/share/libjpeg-turbo/include -DTJPEG_LIBRARY:STRING="-L$MINGWPREFIX/share/libjpeg-turbo/lib -lturbojpeg" -DCMAKE_CXX_FLAGS:STRING="-fpermissive" -S. -Bbuild_win &&
 #-DTJPEG_LIBRARY:STRING="-L$MINGWPREFIX/share/libjpeg-turbo/lib -lturbojpeg" 
 #wl-showstatus build &&
 #ninja -Cbuild_win &&
 wl-showstatus build-install &&
 ninja -Cbuild_win install/strip &&
    echo OK

#export BUILDDEPENDANCIES=cmake,ninja
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -S. -Bbuild_static &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -S. -Bbuild_shared &&
# ## fix execution of Python scripts
# #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
# #wl-showstatus build &&
# #ninja -Cbuild_static &&
# #wl-showstatus build &&
# #ninja -Cbuild_shared &&
# wl-showstatus build-install &&
# ninja -Cbuild_static install/strip &&
# wl-showstatus build-install &&
# ninja -Cbuild_shared install/strip &&
#    echo OK

# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




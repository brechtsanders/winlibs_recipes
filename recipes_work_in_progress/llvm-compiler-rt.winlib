export NAME="LLVM compiler-rt"
export STATUS=
export URL=https://llvm.org/
export BASENAME=llvm-compiler-rt
export DESCRIPTION="The LLVM Compiler Infrastructure - The compiler-rt project provides highly tuned implementations of the low-level code generator support routines like "__fixunsdfdi" and other calls generated when a target doesn't have a short sequence of native instructions to implement a core IR operation. It also provides implementations of run-time libraries for dynamic testing tools such as AddressSanitizer, ThreadSanitizer, MemorySanitizer, and DataFlowSanitizer."
export CATEGORY=development
export TYPE=application
#export VERSION=15.0.7
#export VERSIONDATE=20230219
export VERSION=16.0.0
export VERSIONDATE=20230318
wl-showstatus --package-version
export DEPENDENCIES=llvm-core,llvm-clang,llvm-libunwind,zlib,zstd,libxml2,libffi,libcurl,cpython-mingw
export OPTIONALDEPENDENCIES=llvm-test-suite
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=doxygen
export LICENSEFILE=LICENSE.TXT
export LICENSETYPE=Apache
export DOWNLOADURL="https://github.com/llvm/llvm-project/releases/ compiler-rt-"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/llvm/llvm-project/releases/download/llvmorg-$(echo $VERSION|sed -e "s/rc/-&/")/compiler-rt-$VERSION.src.tar.xz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xJ --force-local -f $TARBALLDIR/$BASENAME/compiler-rt-$VERSION.src.tar.xz
cd compiler-rt-$VERSION.src
## fix CMakeLists.txt (version >= 16.0.0rc2)
#sed -i.bak -e "s?\(set(LLVM_COMMON_CMAKE_UTILS \)\${CMAKE_CURRENT_SOURCE_DIR}/../cmake?\1$(cygpath -m $MINGWPREFIX/share/llvm-split/share/cmake)?" CMakeLists.txt
mkdir -p build_win &&
 wl-showstatus configure &&
 #LLVM_CONFIG_PATH deprecated, instead use: -DLLVM_CMAKE_DIR=$MINGWPREFIX/share/llvm-split/lib/cmake/llvm
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX/share/llvm-split -DCMAKE_BUILD_TYPE:STRING=MinSizeRel \
  -DCMAKE_MODULE_PATH:PATH=$MINGWPREFIX/share/llvm-split/share/cmake/Modules \
  -DLLVM_CMAKE_DIR=$MINGWPREFIX/share/llvm-split/lib/cmake/llvm \
  -DLLVM_DIR:PATH=$MINGWPREFIX/share/llvm-split/lib/cmake/llvm \
  -DLLVM_MAIN_SRC_DIR:PATH=$MINGWPREFIX/share/llvm-split/include \
  -DLLVM_COMMON_CMAKE_UTILS:PATH=$MINGWPREFIX/share/llvm-split/share/cmake \
  -DCMAKE_SYSTEM_NAME:STRING=Windows \
  -DBUILD_SHARED_LIBS:BOOL=ON \
  -DCOMPILER_RT_DEFAULT_TARGET_TRIPLE:STRING=$RUNPLATFORM \
  -DLLVM_TARGET_TRIPLE:STRING=$RUNPLATFORM \
  -DLLVM_TARGET_TRIPLE_LIST:STRING="$(for arch in i686 x86_64 armv7 aarch64; do echo -n "$arch-w64-mingw32;"; done)" \
  -DCOMPILER_RT_STATIC_CXX_LIBRARY:BOOL=OFF \
  -DCOMPILER_RT_DEFAULT_TARGET_ONLY:BOOL=OFF \
  -DCOMPILER_RT_USE_BUILTINS_LIBRARY:BOOL=OFF \
  -DCOMPILER_RT_BUILD_BUILTINS:BOOL=ON \
  -DCOMPILER_RT_SANITIZERS_TO_BUILD:STRING= \
  -DCOMPILER_RT_USE_LLVM_UNWINDER:BOOL=OFF \
  -DCOMPILER_RT_INCLUDE_TESTS:BOOL=OFF \
  -DPython3_FIND_REGISTRY:BOOL=NEVER \
  -DPython3_EXECUTABLE:FILEPATH=$MINGWPREFIX/share/python/bin/python.exe \
  -S. -Bbuild_win &&
 # -DCOMPILER_RT_USE_LLVM_UNWINDER:BOOL=ON \
 # -DCOMPILER_RT_SANITIZERS_TO_BUILD:STRING=all \
 wl-showstatus build-install &&
 ninja -Cbuild_win install/strip &&
 mkdir -p $INSTALLPREFIX/share/llvm-split/lib/clang/$(echo $VERSION|sed -e "s/\..*$//")/lib/windows/ &&
 cp -u $INSTALLPREFIX/share/llvm-split/lib/windows/*.a $INSTALLPREFIX/share/llvm-split/lib/clang/$(echo $VERSION|sed -e "s/\..*$//")/lib/windows/ &&
 wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf compiler-rt-$VERSION.src
####TO DO: build for multiple platforms




export NAME="Swift"
export STATUS=
export URL=https://www.swift.org/
export BASENAME=swift
export DESCRIPTION="The Swift Programming Language"
export CATEGORY=development
export TYPE=application
#export VERSION=5.8
#export VERSIONDATE=20230408
#export VERSION=5.8.1
#export VERSIONDATE=20230602
#export VERSION=5.9.1
#export VERSIONDATE=20231020
#export VERSION=5.9.2
#export VERSIONDATE=20231212
#export VERSION=5.10.1
#export VERSIONDATE=20240607
#export VERSION=6.0
#export VERSIONDATE=20240917
#export VERSION=6.0.1
#export VERSIONDATE=20240928
#export VERSION=6.0.2
#export VERSIONDATE=20241029
#export VERSION=6.0.3
#export VERSIONDATE=20241213
#export VERSION=6.1
#export VERSIONDATE=20250401
#export VERSION=6.1.1
#export VERSIONDATE=20250524
#export VERSION=6.1.2
#export VERSIONDATE=20250529
#export VERSION=6.1.3
#export VERSIONDATE=20250909
export VERSION=6.2
export VERSIONDATE=20250917
wl-showstatus --package-version
export DEPENDENCIES=llvm-project,swift-syntax,libffi,zlib,zstd,libxml2,wineditline
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE.txt
export LICENSETYPE=Apache
export DOWNLOADURL="https://github.com/apple/swift/releases swift- -RELEASE.tar.gz"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/apple/swift/archive/refs/tags/swift-$VERSION-RELEASE.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/swift-$VERSION-RELEASE.tar.gz
cd swift-swift-$VERSION-RELEASE
# fix stdlib/public/LLVMSupport/ErrorHandling.cpp (version >= 5.9.2)
patch -ulbf stdlib/public/LLVMSupport/ErrorHandling.cpp << EOF
@@ -46,3 +46,3 @@
   __android_log_print(ANDROID_LOG_FATAL, "SwiftRuntime", "%s", buffer);
-#elif defined(_WIN32)
+#elif defined(_WIN32) && !defined(__MINGW32__)
 #define STDERR_FILENO 2
EOF
# fix undefined _InterlockedCompareExchange128 in include/swift/Runtime/Atomic.h (version >= 5.9.2)
# fix include/swift/Runtime/Atomic.h (version >= 5.9.2)
patch -ulbf include/swift/Runtime/Atomic.h << EOF
@@ -23,3 +23,3 @@
 #include <cstdlib>
-#if defined(_WIN64)
+#if defined(_WIN64) && !defined(__MINGW32__)
 #include <intrin.h>
@@ -85,3 +85,3 @@

-#if defined(_WIN64)
+#if defined(_WIN64) && !defined(__MINGW32__)

EOF
# fix stdlib/public/SwiftShims/swift/shims/LibcShims.h (version >= 5.9.2)
patch -ulbf stdlib/public/SwiftShims/swift/shims/LibcShims.h << EOF
@@ -86,3 +86,5 @@
 static inline int _swift_stdlib_vprintf(const char * __restrict fmt, va_list args) {
+#ifndef __MINGW32__
     extern int vprintf(const char * __restrict, va_list);
+#endif
 #pragma clang diagnostic push
EOF
# fix cmake/modules/SwiftConfigureSDK.cmake (version >= 5.9.1)
patch -ulbf cmake/modules/SwiftConfigureSDK.cmake << EOF
@@ -17,3 +17,3 @@

-  if("\${prefix}" STREQUAL "WINDOWS")
+  if("\${prefix}" STREQUAL "WINDOWS" AND NOT MINGW)
     message(STATUS "  UCRT Version: \${UCRTVersion}")
EOF
# fix cmake/modules/SwiftWindowsSupport.cmake (version >= 5.9.1)
patch -ulbf cmake/modules/SwiftWindowsSupport.cmake << EOF
@@ -52,2 +52,3 @@
 function(swift_windows_get_sdk_vfs_overlay overlay)
+ if (NOT MINGW)
   get_filename_component(VCToolsInstallDir \${VCToolsInstallDir} ABSOLUTE)
@@ -62,2 +63,3 @@
     PARENT_SCOPE)
+ endif()
 endfunction()
@@ -71,2 +73,3 @@
 function(swift_windows_cache_VCVARS)
+ if (NOT MINGW)
   swift_verify_windows_VCVAR(VCToolsInstallDir)
@@ -74,2 +77,3 @@
   swift_verify_windows_VCVAR(UCRTVersion)
+ endif()

EOF
# fix lib/Basic/CMakeLists.txt (version >= 5.9.1)
patch -ulbf lib/Basic/CMakeLists.txt << EOF
@@ -24,3 +24,5 @@

+ if(NOT MINGW)
   set(generate_vcs_version_script "\${LLVM_MAIN_SRC_DIR}/cmake/modules/GenerateVersionFromVCS.cmake")
+ endif()

EOF
# fix stdlib/CMakeLists.txt (version >= 5.9.1)
patch -ulbf stdlib/CMakeLists.txt << EOF
@@ -34,3 +34,3 @@
 endfunction()
-if(WINDOWS IN_LIST SWIFT_SDKS)
+if(WINDOWS IN_LIST SWIFT_SDKS AND NOT MINGW)
   generate_windows_vfs_overlay()
EOF
## fix cmake/modules/AddSwift.cmake (version >= 5.9.1)
#patch -ulbf cmake/modules/AddSwift.cmake << EOF
#@@ -268,3 +268,3 @@
#       target_compile_options(\${target} PRIVATE \$<\$<COMPILE_LANGUAGE:C,CXX,OBJC,OBJCXX>:/GR->)
#-    else()
#+    elseif(NOT MINGW)
#       target_compile_options(\${target} PRIVATE
#EOF
# fix cmake/modules/AddSwift.cmake (version >= 5.9.2)
patch -ulbf cmake/modules/AddSwift.cmake << EOF
@@ -268,3 +268,3 @@
       target_compile_options(\${target} PRIVATE \$<\$<COMPILE_LANGUAGE:C,CXX,OBJC,OBJCXX>:/GR->)
-    else()
+    elseif(NOT MINGW)
       target_compile_options(\${target} PRIVATE
@@ -767,3 +767,3 @@
           \$<\$<COMPILE_LANGUAGE:C,CXX>:SHELL:/clang:-Xclang /clang:-ivfsoverlay /clang:-Xclang /clang:\${ASHL_VFS_OVERLAY}>)
-      else()
+      else(NOT MINGW)
         target_compile_options(\${name} PRIVATE
@@ -952,3 +952,3 @@
     # clang from clang-cl.
-    if(NOT "\${CMAKE_C_COMPILER_ID}" STREQUAL "MSVC" AND NOT "\${CMAKE_C_COMPILER_FRONTEND_VARIANT}" STREQUAL "MSVC")
+    if(NOT MINGW AND NOT "\${CMAKE_C_COMPILER_ID}" STREQUAL "MSVC" AND NOT "\${CMAKE_C_COMPILER_FRONTEND_VARIANT}" STREQUAL "MSVC")
       # MSVC doesn't support -Xclang. We don't need to manually specify
EOF
## fix stdlib/cmake/modules/AddSwiftStdlib.cmake (version >= 5.9.1)
#patch -ulbf stdlib/cmake/modules/AddSwiftStdlib.cmake << EOF
#@@ -1404,3 +1404,3 @@
#
#-    if(NOT \${CMAKE_C_COMPILER_ID} STREQUAL MSVC)
#+    if(NOT \${CMAKE_C_COMPILER_ID} STREQUAL MSVC AND NOT MINGW)
#       swift_windows_get_sdk_vfs_overlay(SWIFTLIB_SINGLE_VFS_OVERLAY)
#EOF
# fix stdlib/cmake/modules/AddSwiftStdlib.cmake (version >= 5.9.2)
patch -ulbf stdlib/cmake/modules/AddSwiftStdlib.cmake << EOF
@@ -901,3 +901,3 @@
   if("\${SWIFTLIB_SINGLE_SDK}" STREQUAL "WINDOWS")
-    if(NOT "\${CMAKE_C_COMPILER_ID}" STREQUAL "MSVC")
+    if(NOT MINGW AND NOT "\${CMAKE_C_COMPILER_ID}" STREQUAL "MSVC")
       swift_windows_get_sdk_vfs_overlay(SWIFTLIB_SINGLE_VFS_OVERLAY)
@@ -1404,3 +1404,3 @@

-    if(NOT CMAKE_C_COMPILER_ID STREQUAL "MSVC")
+    if(NOT MINGW AND NOT CMAKE_C_COMPILER_ID STREQUAL "MSVC")
       swift_windows_get_sdk_vfs_overlay(SWIFTLIB_SINGLE_VFS_OVERLAY)
@@ -2669,3 +2669,3 @@
     endif()
-    if(NOT CMAKE_C_COMPILER_ID STREQUAL "MSVC")
+    if(NOT MINGW AND NOT CMAKE_C_COMPILER_ID STREQUAL "MSVC")
       # MSVC doesn't support -Xclang. We don't need to manually specify
EOF
# fix lib/Option/CMakeLists.txt (version >= 5.9.1)
patch -ulbf lib/Option/CMakeLists.txt << EOF
@@ -10,3 +10,5 @@
 set(features_file_swift_src "\${CMAKE_CURRENT_SOURCE_DIR}/features.json")
+if(NOT MINGW)
 set(features_file_clang_src "\${LLVM_BINARY_DIR}/share/clang/features.json")
+endif()
 set(features_file_dest "\${CMAKE_BINARY_DIR}/share/swift/features.json")
EOF
# fix CMakeLists.txt (version >= 6.0.3)
patch -ulbf CMakeLists.txt << EOF
@@ -876,3 +876,4 @@
 elseif(SWIFT_INCLUDE_TOOLS)
-  find_package(cmark-gfm CONFIG REQUIRED)
+  include(FindPkgConfig)
+  pkg_search_module(cmark-gfm REQUIRED libcmark-gfm)
 endif()
EOF

#grep -wi add_library $(find -name CMakeLists.txt -or -name '*.cmake')

#mkdir -p build_test && cmake.exe -G"MSYS Makefiles" -DBOOTSTRAPPING_MODE:BOOL=BOOTSTRAPPING -DSWIFT_ENABLE_DISPATCH:BOOL=OFF -DSWIFT_INCLUDE_DOCS:BOOL=OFF -DLibEdit_INCLUDE_DIRS:FILEPATH=$MINGWPREFIX/include -DLLVM_DIR:FILEPATH=$MINGWPREFIX/share/llvm/lib/cmake/llvm -DLLVM_MAIN_INCLUDE_DIR:PATH=$MINGWPREFIX/share/llvm/include -DLLVM_BUILD_LIBRARY_DIR:PATH=$MINGWPREFIX/share/llvm/lib -DClang_DIR:PATH=$MINGWPREFIX/share/llvm/lib/cmake/clang -DSWIFT_INCLUDE_TESTS:BOOL=OFF -DSWIFT_PATH_TO_SWIFT_SYNTAX_SOURCE:FILEPATH=$MINGWPREFIX/share/swift-syntax -DPython3_EXECUTABLE:FILEPATH=$PYDIR/python.exe -S. -Bbuild_test -LH && echo OK; rm -rf build_test

#-DSWIFT_PATH_TO_SWIFT_SYNTAX_SOURCE
#-DSWIFT_PATH_TO_LIBDISPATCH_SOURCE
#-DSWIFT_VENDOR:STRING=""


#export BUILDDEPENDENCIES=cmake
#PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ 
#-DCMAKE_SYSTEM_NAME=Windows 
#-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
#mkdir -p build_win &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -S. -Bbuild_win &&
# #wl-showstatus build &&
# #cmake.exe --build build_win &&
# #make -Cbuild_win &&
# wl-showstatus build-install &&
# make -Cbuild_win install/strip &&
#    echo OK

#export BUILDDEPENDENCIES=cmake,ninja
#PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ 
#-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 

mkdir -p stdlib/public/core/SwiftMacros
cp -rf ../SwiftMacros-2.0.1/Sources/SwiftMacros/* stdlib/public/core/SwiftMacros/
mkdir -p build_win/stdlib/public/SwiftOnoneSupport/SwiftMacros
cp -rf ../SwiftMacros-2.0.1/Sources/SwiftMacros/* build_win/stdlib/public/SwiftOnoneSupport/SwiftMacros/
mkdir -p build_win/stdlib/public/Platform/SwiftMacros
cp -rf ../SwiftMacros-2.0.1/Sources/SwiftMacros/* build_win/stdlib/public/Platform/SwiftMacros/

# fix missing file
mkdir -p src
touch src/cmarkTargets.cmake
mkdir -p build_win &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release \
  -DBOOTSTRAPPING_MODE:BOOL=BOOTSTRAPPING \
  -DSWIFT_ENABLE_DISPATCH:BOOL=OFF \
  -DSWIFT_INCLUDE_DOCS:BOOL=OFF \
  -DLibEdit_INCLUDE_DIRS:FILEPATH=$MINGWPREFIX/include \
  -DLLVM_DIR:FILEPATH=$MINGWPREFIX/share/llvm/lib/cmake/llvm \
  -DLLVM_MAIN_INCLUDE_DIR:PATH=$MINGWPREFIX/share/llvm/include \
  -DLLVM_BUILD_LIBRARY_DIR:PATH=$MINGWPREFIX/share/llvm/lib \
  -DClang_DIR:PATH=$MINGWPREFIX/share/llvm/lib/cmake/clang \
  -DSWIFT_INCLUDE_TESTS:BOOL=OFF \
  -DSWIFT_PATH_TO_SWIFT_SYNTAX_SOURCE:FILEPATH=$MINGWPREFIX/share/swift-syntax \
  -DPython3_EXECUTABLE:FILEPATH=$PYDIR/python.exe \
  -S. -Bbuild_win &&
#  -DCMAKE_ASM_COMPILER_AR:FILEPATH=$MINGWPREFIX/share/llvm/bin/llvm-ar.exe \
#  -DCMAKE_ASM_COMPILER_RANLIB:FILEPATH=$MINGWPREFIX/share/llvm/bin/llvm-ranlib.exe \
#  -DCMAKE_C_COMPILER:FILEPATH=$MINGWPREFIX/share/llvm/bin/clang.exe \
#  -DCMAKE_C_COMPILER_AR:FILEPATH=$MINGWPREFIX/share/llvm/bin/llvm-ar.exe \
#  -DCMAKE_C_COMPILER_RANLIB:FILEPATH=$MINGWPREFIX/share/llvm/bin/llvm-ranlib.exe \
#  -DCMAKE_CXX_COMPILER:FILEPATH=$MINGWPREFIX/share/llvm/bin/clang++.exe \
#  -DCMAKE_CXX_COMPILER_AR:FILEPATH=$MINGWPREFIX/share/llvm/bin/llvm-ar.exe \
#  -DCMAKE_CXX_COMPILER_RANLIB:FILEPATH=$MINGWPREFIX/share/llvm/bin/llvm-ranlib.exe \
#  -DCMAKE_RC_COMPILER:FILEPATH="$MINGWPREFIX/share/llvm/bin/llvm-windres.exe  -m $(if [ "$arch" == "x86_64" ]; then echo "i386:"; fi)$(if [ "$arch" == "aarch64" ]; then echo "arm64"; else echo "$arch"; fi)" \
#  -DCMAKE_LINKER:FILEPATH=$MINGWPREFIX/share/llvm/bin/ld.lld.exe \
#  -DGOLD_EXECUTABLE:FILEPATH=$MINGWPREFIX/share/llvm/bin/ld.lld.exe \
 # fix invalid flags
 sed -i.bak -e "s/-fno-lifetime-dse\|-fno-keep-inline-dllexport\|-Wno-class-memaccess//g" build_win/build.ninja &&
 # fix location of clang
 sed -i.bak2 -e "s?\(share/llvm/lib/clang/[0-9]*\)[.0-9]*?\1?g" build_win/build.ninja &&
 wl-showstatus build-install &&
 ninja -Cbuild_win install/strip &&
    echo OK

#export BUILDDEPENDENCIES=cmake,ninja
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -S. -Bbuild_static &&
# #-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -S. -Bbuild_shared &&
# ## fix execution of Python scripts
# #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|glib-genmarshal\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
# ## fix missing link libraries
# #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lws2_32/" build_shared/build.ninja &&
# #wl-showstatus build &&
# #cmake.exe --build build_static &&
# #ninja -Cbuild_static &&
# #wl-showstatus build &&
# #cmake.exe --build build_shared &&
# #ninja -Cbuild_shared &&
# wl-showstatus build-install &&
# #cmake.exe --install build_static --strip &&
# #cmake.exe --build build_static --target "install/strip" &&
# #cmake.exe --build build_static --target "library/install/strip" &&
# ninja -Cbuild_static install/strip &&
# #ninja -Cbuild_static library/install/strip &&
# wl-showstatus build-install &&
# #cmake.exe --install build_shared --strip &&
# #cmake.exe --build build_shared --target "install/strip" &&
# ninja -Cbuild_shared install/strip &&
#    echo OK

#-DCMAKE_BUILD_TYPE:STRING=MinSizeRel

#export BUILDDEPENDENCIES=meson,ninja
#-Dc_args=$CFLAGS -Dcpp_args=$CXXFLAGS -Dc_link_args=$LDFLAGS
## fix missing gio-unix
#sed -i.bak -e "s/gio-unix-/gio-/" meson.build
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library static -D documentation=true . build_static &&
# wl-showstatus configure &&
# PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library shared -D documentation=true . build_shared &&
# ## fix slash/backslash path issue when calling Python from Ninja
# #sed -i.bak -e "s/join_paths/os.path.join/g; /COMMAND =.*python\.exe/ s?\"/\([a-zA-Z]\)/?\"\1:/?; /COMMAND =.*python\.exe/ s?/?\\\\?g" build_*/build.ninja &&
# ## add linker flag
# #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*-ladvapi32/& -Wl,--as-needed/" build_shared/build.ninja &&
# ## add linker flag
# #sed -i.bak -e "s/^\s*LINK_ARGS\s*=.*\"-ladvapi32\"/& \"-Wl,--as-needed\"/" build_shared/build.ninja &&
# wl-showstatus build-install &&
# #PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -C build_static install &&
# PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -C build_static install/strip &&
# wl-showstatus build-install &&
# #PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -C build_shared install &&
# PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -C build_shared install/strip &&
#    echo OK && find . -name '*.a'

#export BUILDDEPENDENCIES=meson,ninja
#-Dc_args=$CFLAGS -Dcpp_args=$CXXFLAGS -Dc_link_args=$LDFLAGS -Dcpp_link_args=$LDFLAGS
## fix location of Perl
#sed -i.bak -e "s?'perl'?'$(cygpath -w $PERLDIR/bin/perl.exe|sed -e 's/\\/&&&&/g')'?" meson.build
## fix detection of Python
#sed -i.bak -e "s?'python3'?'$(cygpath -w $PYDIR/python.exe|sed -e 's/\\/&&&&/g')'?" meson.build
## fix missing gio-unix
##sed -i.bak -e "s/gio-unix-/gio-/" meson.build
#sed -i.bak -e "s/gio-unix-/gio-windows-/" meson.build
#mkdir -p build_both &&
# wl-showstatus configure &&
# PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Ddocumentation=true . build_both &&
# ## fix slash/backslash path issue when calling Python from Ninja
# #sed -i.bak -e "s/join_paths/os.path.join/g; /COMMAND =.*python\.exe/ s?\"/\([a-zA-Z]\)/?\"\1:/?; /COMMAND =.*python\.exe/ s?/?\\\\?g" build_*/build.ninja &&
# ## fix Python path issues in meson_exe
# #sed -i.bak -e "s?$PYDIR?$(echo $PYDIR|sed -e "s?^/\([a-zA-Z]\)/?\1:/?")?" build_both/meson-private/meson_exe_python.exe_*.dat &&
# ## fix execution of Python scripts
# #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *= *\| *=.*\&\& *\)\(\"\{0,1\}[^ ]*\)\(\.py\|glib-mkenums\|g-ir-scanner\|asciidoc\)\(\"\{0,1\} \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_both/build.ninja &&
# ## fix executing shell scripts
# #sed -i.bak -e "s?^\(\s*COMMAND\s*=\s*\)\(\"[^\"]*\.sh\"\)?\1\"$(cygpath -m $(which sh.exe))\" \2?" build_both/build.ninja &&
# wl-showstatus build-install &&
# PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -Cbuild_both install/strip &&
# #PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -Cbuild_both install &&
# #PATH=$PERLDIR/../c/bin:$PERLDIR/bin:$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -Cbuild_both install &&
#    echo OK && find . -name '*.a'

#wl-showstatus install &&
# mkdir -p $INSTALLPREFIX/python/Lib/site-packages &&
# PYTHONPATH=$INSTALLPREFIX/python/Lib/site-packages:$MINGWPREFIX/python/Lib/site-packages $PYDIR/python setup.py install --prefix=$(cygpath.exe -w $INSTALLPREFIX/python) &&
#    echo OK

#export DEPENDENCIES=qt
#wl-showstatus configure &&
# $MINGWPREFIX/qt/bin/qmake -makefile *.pro -spec $MINGWPREFIX/qt/mkspecs/win32-g++ &&
# wl-showstatus build &&
# mingw32-make &&
#    echo OK

#export DEPENDENCIES=qt
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cd build_static &&
# $MINGWPREFIX/qt/bin/qmake -makefile ../*.pro -spec $MINGWPREFIX/qt/mkspecs/win32-g++ CONFIG+=staticlib &&
# cd .. &&
# wl-showstatus configure &&
# cd build_shared &&
# $MINGWPREFIX/qt/bin/qmake -makefile ../*.pro -spec $MINGWPREFIX/qt/mkspecs/win32-g++ &&
# cd .. &&
# wl-showstatus build &&
# mingw32-make -Cbuild_static &&
# wl-showstatus build &&
# mingw32-make -Cbuild_shared &&
#    echo OK

#mkdir -p $INSTALLPREFIX/python/Lib/site-packages
#wl-showstatus build-install &&
# PATH=$PYDIR:$PATH PYTHON=$PYDIR/python.exe PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/python/Lib/site-packages:$INSTALLPREFIX/python:$PYDIR/Lib/site-packages:$INSTALLPREFIX/python/Lib/site-packages $PYDIR/python.exe setup.py install --prefix=$(cygpath -w $INSTALLPREFIX/python) &&
# ## delete any __pycache__ folder(s)
# #find $INSTALLPREFIX -name __pycache__ -exec echo rm -rf {} \; | sh &&
#    echo OK

#wl-showstatus build-install &&
# PYTHONPATH=$MINGWPREFIX/python/Lib/site-packages${PYTHONPATH:+:$PYTHONPATH} $PYDIR/python.exe $MINGWPREFIX/python/Scripts/pip-script.py install . --prefix=$(cygpath -w $INSTALLPREFIX/python) &&
# ## delete any __pycache__ folder(s)
# #find $INSTALLPREFIX -name __pycache__ -exec echo rm -rf {} \; | sh &&
#    echo OK

# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf swift-swift-$VERSION-RELEASE




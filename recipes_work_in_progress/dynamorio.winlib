export NAME="DynamoRIO"
export STATUS=
export URL=https://dynamorio.org/
export BASENAME=dynamorio
export DESCRIPTION="DynamoRIO is a runtime code manipulation system that supports code transformations on any part of a program, while it executes. DynamoRIO exports an interface for building dynamic tools for a wide variety of uses: program analysis and understanding, profiling, instrumentation, optimization, translation, etc. Unlike many dynamic tool systems, DynamoRIO is not limited to insertion of callouts/trampolines and allows arbitrary modifications to application instructions via a powerful IA-32/AMD64/ARM/AArch64 instruction manipulation library. DynamoRIO provides efficient, transparent, and comprehensive manipulation of unmodified applications running on stock operating systems (Windows, Linux, or Android, with experimental Mac support) and commodity IA-32, AMD64, ARM, and AArch64 hardware."
export CATEGORY=development
export TYPE=library
#export VERSION=8.0.18585
#export VERSIONDATE=20201214
#export VERSION=8.0.18617
#export VERSIONDATE=20201222
#export VERSION=8.0.18619
#export VERSIONDATE=20201226
#export VERSION=8.0.18628
#export VERSIONDATE=20210102
#export VERSION=8.0.18632
#export VERSIONDATE=20210106
#export VERSION=8.0.18640
#export VERSIONDATE=20210116
#export VERSION=8.0.18649
#export VERSIONDATE=20210123
#export VERSION=8.0.18655
#export VERSIONDATE=20210130
#export VERSION=8.0.18663
#export VERSIONDATE=20210206
#export VERSION=8.0.18670
#export VERSIONDATE=20210213
#export VERSION=8.0.18677
#export VERSIONDATE=20210220
#export VERSION=8.0.18679
#export VERSIONDATE=20210221
#export VERSION=8.0.18684
#export VERSIONDATE=20210226
#export VERSION=8.0.18687
#export VERSIONDATE=20210306
#export VERSION=8.0.18705
#export VERSIONDATE=20210320
#export VERSION=8.0.18712
#export VERSIONDATE=20210327
#export VERSION=8.0.18719
#export VERSIONDATE=20210403
#export VERSION=8.0.18725
#export VERSIONDATE=20210410
#export VERSION=8.0.18733
#export VERSIONDATE=20210417
#export VERSION=8.0.18740
#export VERSIONDATE=20210424
#export VERSION=8.0.18747
#export VERSIONDATE=20210501
#export VERSION=8.0.18752
#export VERSIONDATE=20210508
#export VERSION=8.0.18760
#export VERSIONDATE=20210515
#export VERSION=8.0.18767
#export VERSIONDATE=20210522
#export VERSION=8.0.18774
#export VERSIONDATE=20210529
#export VERSION=8.0.18780
#export VERSIONDATE=20210605
#export VERSION=8.0.18789
#export VERSIONDATE=20210612
#export VERSION=8.0.18796
#export VERSIONDATE=20210619
#export VERSION=8.0.18803
#export VERSIONDATE=20210626
#export VERSION=8.0.18810
#export VERSIONDATE=20210703
#export VERSION=8.0.18816
#export VERSIONDATE=20210710
#export VERSION=8.0.18824
#export VERSIONDATE=20210717
#export VERSION=8.0.18831
#export VERSIONDATE=20210724
#export VERSION=8.0.18836
#export VERSIONDATE=20210731
#export VERSION=8.0.18844
#export VERSIONDATE=20210807
#export VERSION=8.0.18852
#export VERSIONDATE=20210814
#export VERSION=8.0.18859
#export VERSIONDATE=20210821
#export VERSION=8.0.18864
#export VERSIONDATE=20210828
#export VERSION=8.0.18873
#export VERSIONDATE=20210904
#export VERSION=8.0.18880
#export VERSIONDATE=20210911
#export VERSION=8.0.18886
#export VERSIONDATE=20210917
#export VERSION=8.0.18887
#export VERSIONDATE=20210918
#export VERSION=8.0.18895
#export VERSIONDATE=20210925
#export VERSION=8.0.18901
#export VERSIONDATE=20211002
#export VERSION=8.0.18908
#export VERSIONDATE=20211009
#export VERSION=8.0.18910
#export VERSIONDATE=20211011
#export VERSION=8.0.18915
#export VERSIONDATE=20211015
#export VERSION=8.0.18921
#export VERSIONDATE=20211023
#export VERSION=8.0.18929
#export VERSIONDATE=20211030
#export VERSION=8.0.18936
#export VERSIONDATE=20211106
#export VERSION=8.0.18942
#export VERSIONDATE=20211113
####gcc.exe: warning: core/drlibc/drlibc_xarch.asm: linker input file unused because linking not done
####gcc.exe: error: D:/Prog/msys64/FoCMakeFiles/drlibc.dir/drlibc/drlibc_xarch.asm.obj: No such file or directory
#export VERSION=8.0.18942-1
#export VERSIONDATE=20211114
#export VERSION=8.0.18950
#export VERSIONDATE=20211120
#export VERSION=8.0.18956
#export VERSIONDATE=20211127
#export VERSION=8.0.18962
#export VERSIONDATE=20211204
#export VERSION=8.0.18971
#export VERSIONDATE=20211211
#export VERSION=8.0.18978
#export VERSIONDATE=20211218
#export VERSION=9.0.18983
#export VERSIONDATE=20211225
#export VERSION=9.0.18999
#export VERSIONDATE=20220108
#export VERSION=9.0.19006
#export VERSIONDATE=20220115
#export VERSION=9.0.19012
#export VERSIONDATE=20220122
#export VERSION=9.0.19020
#export VERSIONDATE=20220129
#export VERSION=9.0.19027
#export VERSIONDATE=20220205
#export VERSION=9.0.19034
#export VERSIONDATE=20220212
#export VERSION=9.0.19042
#export VERSIONDATE=20220219
#export VERSION=9.0.19046
#export VERSIONDATE=20220226
#export VERSION=9.0.19055
#export VERSIONDATE=20220305
#export VERSION=9.0.19061
#export VERSIONDATE=20220312
#export VERSION=9.0.19074
#export VERSIONDATE=20220326
#export VERSION=9.0.19078
#export VERSIONDATE=20220328
#export VERSION=9.0.19082
#export VERSIONDATE=20220402
#export VERSION=9.0.19088
#export VERSIONDATE=20220409
#export VERSION=9.0.19097
#export VERSIONDATE=20220416
#export VERSION=9.0.19103
#export VERSIONDATE=20220423
#export VERSION=9.0.19110
#export VERSIONDATE=20220430
#export VERSION=9.0.19117
#export VERSIONDATE=20220507
#export VERSION=9.0.19124
#export VERSIONDATE=20220514
#export VERSION=9.0.19129
#export VERSIONDATE=20220521
#export VERSION=9.0.19139
#export VERSIONDATE=20220528
#export VERSION=9.0.19146
#export VERSIONDATE=20220604
#export VERSION=9.0.19161
#export VERSIONDATE=20220618
#export VERSION=9.0.19167
#export VERSIONDATE=20220625
#export VERSION=9.0.19174
#export VERSIONDATE=20220702
#export VERSION=9.0.19181
#export VERSIONDATE=20220709
#export VERSION=9.0.19188
#export VERSIONDATE=20220716
#export VERSION=9.0.19195
#export VERSIONDATE=20220724
#export VERSION=9.0.19202
#export VERSIONDATE=20220730
#export VERSION=9.0.19209
#export VERSIONDATE=20220806
#export VERSION=9.0.19216
#export VERSIONDATE=20220813
#export VERSION=9.0.19223
#export VERSIONDATE=20220820
#export VERSION=9.0.19230
#export VERSIONDATE=20220827
#export VERSION=9.0.19237
#export VERSIONDATE=20220903
#export VERSION=9.0.19244
#export VERSIONDATE=20220911
#export VERSION=9.0.19249
#export VERSIONDATE=20220917
#export VERSION=9.0.19255
#export VERSIONDATE=20220924
#export VERSION=9.0.19265
#export VERSIONDATE=20221001
#export VERSION=9.0.19272
#export VERSIONDATE=20221008
#export VERSION=9.0.19278
#export VERSIONDATE=20221015
#export VERSION=9.0.19293
#export VERSIONDATE=20221029
#export VERSION=9.0.19299
#export VERSIONDATE=20221105
#export VERSION=9.0.19307
#export VERSIONDATE=20221112
#export VERSION=9.0.19314
#export VERSIONDATE=20221119
#export VERSION=9.0.19327
#export VERSIONDATE=20221201
#export VERSION=9.0.19328
#export VERSIONDATE=20221203
#export VERSION=9.0.19335
#export VERSIONDATE=20221210
#export VERSION=9.0.19342
#export VERSIONDATE=20221217
#export VERSION=9.0.19349
#export VERSIONDATE=20221224
#export VERSION=9.0.19363
#export VERSIONDATE=20230107
#export VERSION=9.0.19368
#export VERSIONDATE=20230114
export VERSION=9.0.19378
export VERSIONDATE=20230121
####core/utils.h:1946:14: fatal error: events.h: No such file or directory
wl-showstatus --package-version
export DEPENDENCIES=
export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=cmake
#export OPTIONALBUILDDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=License.txt
export LICENSETYPE=BSD
#export DOWNLOADURL="https://github.com/DynamoRIO/dynamorio/wiki/Downloads"
export DOWNLOADURL="https://github.com/DynamoRIO/dynamorio/releases/ cronbuild-"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/DynamoRIO/dynamorio/archive/cronbuild-$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xfz $TARBALLDIR/$BASENAME/cronbuild-$VERSION.tar.gz
cd dynamorio-cronbuild-$VERSION
## fix CMakeLists.txt (version >= 8.0.18585)
#patch -ulbf CMakeLists.txt << EOF
#@@ -672,3 +672,3 @@
#   endif ()
#-  if (NOT ("\${CMAKE_GENERATOR}" MATCHES "MSYS Makefiles"))
#+  if (NOT MINGW)
#     # For MinGW (MSYS Makefiles) we do not have a message compiler.
#@@ -746,3 +746,3 @@
# CHECK_CXX_COMPILER_FLAG("-std=c++17" cxx17_available)
#-if (UNIX)
#+if (UNIX OR MINGW)
#   set(BASE_CXXONLY_FLAGS "\${BASE_CXXONLY_FLAGS} -std=c++11")
#@@ -806,3 +806,3 @@
#   # there's no cmake warning control so we hardcode it
#-  set(WARN "-Wall -Werror -Wwrite-strings")
#+  set(WARN "-Wwrite-strings")
#   if (NOT CMAKE_COMPILER_IS_CLANG)
#EOF
# fix CMakeLists.txt (version >= 8.0.18619)
patch -ulbf CMakeLists.txt << EOF
@@ -686,3 +686,3 @@
   endif ()
-  if (NOT ("\${CMAKE_GENERATOR}" MATCHES "MSYS Makefiles"))
+  if (NOT MINGW)
     # For MinGW (MSYS Makefiles) we do not have a message compiler.
@@ -760,3 +760,3 @@
 CHECK_CXX_COMPILER_FLAG("-std=c++17" cxx17_available)
-if (UNIX)
+if (UNIX OR MINGW)
   set(BASE_CXXONLY_FLAGS "\${BASE_CXXONLY_FLAGS} -std=c++11")
@@ -780,2 +780,3 @@
   # now that the user must set non-default -mNN we don't nec. need these:
+ if(NOT MINGW)
   if (X86)
@@ -806,2 +807,3 @@
   endif ()
+ endif ()
   if (APPLE AND CMAKE_COMPILER_IS_CLANG)
@@ -820,3 +822,3 @@
   # there's no cmake warning control so we hardcode it
-  set(WARN "-Wall -Werror -Wwrite-strings")
+  set(WARN "-Wwrite-strings")
   if (NOT CMAKE_COMPILER_IS_CLANG)
EOF
# fix ext/drsyms/CMakeLists.txt (version >= 8.0.18585)
patch -ulbf ext/drsyms/CMakeLists.txt << EOF
@@ -69,3 +69,3 @@
 # routines we want to use.
-if (WIN32)
+if (MSVC)
   # XXX: if we add any more of these .lib files we should share this code
@@ -121,3 +121,3 @@

-elseif (UNIX)
+elseif (UNIX OR MINGW)
   set(srcs
EOF
# fix core/CMakeLists.txt (version >= 8.0.18585)
patch -ulbf core/CMakeLists.txt << EOF
@@ -291,3 +291,3 @@

-if (WIN32)
+if (MSVC)
   # i#894: Win8 WDK ntdll.lib does not list Ki routines so we make our own .lib.
@@ -487,3 +487,3 @@
   endif()
-  if (WIN32)
+  if (MSVC)
     # Since we're forced to use link-line flags instead of target_link_libraries
EOF
# fix comma-separated version string issue in core/win32/resources.rc (version >= 8.0.18617)
sed -i.bak -e "s/STRINGIFY(VERSION_COMMA_DELIMITED)/\"$(sed -ne "s/^\s*#\s*define\s*VERSION_COMMA_DELIMITED\s*//p" core/win32/resources.rc)\"/" core/win32/resources.rc
# fix invalid linker flags
#sed -i.bak -e "s?/dll?-mdll?; s?/NODEFAULTLIB?-nostdlib -nodefaultlibs?; s?/base:?--disable-auto-image-base --image-base ?" core/CMakeLists.txt
#sed -i.bak -e "s?/dll?-mdll?; s?/incremental:no??; s?/NODEFAULTLIB?-nostdlib -nodefaultlibs?; s?/base:?--disable-auto-image-base -Wl,--image-base,?; s?/entry:?-Wl,--entry=?" core/CMakeLists.txt
sed -i.bak -e "s?/dll??; s?/incremental:no??; s?/NODEFAULTLIB?-nostdlib -nodefaultlibs?; s?/base:?--disable-auto-image-base -Wl,--image-base,?; s?/entry:?-Wl,--entry=?" core/CMakeLists.txt
sed -i.bak -e "s?-Wl,--hash-style=both??; s?/nologo\|/Z[a-z]*??g" CMakeLists.txt libutil/CMakeLists.txt ext/drsyms/CMakeLists.txt clients/drcachesim/CMakeLists.txt suite/tests/CMakeLists.txt make/cpp2asm_support.cmake
#sed -i.bak2 -e "s?/wd[0-9]\{4,4\}\|/GS-??g" $(grep -l "/wd[0-9]\{4,4\}\|/GS-" $(find -name CMakeLists.txt -or -name '*.cmake'))
sed -i.bak2 -e "s?[-/]wd[0-9]\{4,4\}\|/GS-??g" $(grep -l "[-/]wd[0-9]\{4,4\}\|/GS-" $(find -name CMakeLists.txt -or -name '*.cmake'))
# fix Ninja support in make/CMake_events.cmake (version >= 8.0.18942)
sed -i.bak3 -e "s/(\"\${CMAKE_GENERATOR}\" MATCHES \"MSYS Makefiles\")/MINGW/" CMakeLists.txt make/CMake_events.cmake
#mkdir -p build_win &&
# wl-showstatus configure &&
# PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ cmake.exe -Wno-dev -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DDUMPBIN_EXECUTABLE:FILEPATH=$(which objdump.exe) -S. -Bbuild_win &&
# #wl-showstatus build &&
# #make -Cbuild_win &&
# wl-showstatus build-install &&
# make -Cbuild_win install/strip &&
#    echo OK
mkdir -p build_win &&
 wl-showstatus configure &&
 PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DDUMPBIN_EXECUTABLE:FILEPATH=$(which objdump.exe) -S. -Bbuild_win &&
 #wl-showstatus build &&
 #make -Cbuild_win &&
 wl-showstatus build-install &&
 ninja -Cbuild_win install/strip &&
    echo OK
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf dynamorio-cronbuild-$VERSION



## fix core/globals.h (version >= 8.0.18852)
#patch -ulbf core/globals.h << EOF
#@@ -1027,3 +1027,3 @@
# /* FIXME: why do we need to force the inline for this simple function? */
#-static INLINE_FORCED priv_mcontext_t *
#+INLINE_FORCED priv_mcontext_t *
# get_mcontext(dcontext_t *dcontext)
#EOF
#touch core/win32/events.h
#for F in core/win32/*.c; do
# echo CC $F
# gcc -c -o $F.o $F -O3 -Icore/win32 -Icore/arch -Icore/lib -Icore/ir -Icore/ir/x86 -Icore/drlibc -Ibuild_win -Ibuild_win/include || break
#done

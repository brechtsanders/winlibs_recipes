export NAME="OpenJDK"
export STATUS=
export URL=http://openjdk.java.net/
export BASENAME=jdk
export DESCRIPTION="OpenJDK - Java Platform, Standard Edition, and related projects."
export CATEGORY=development
export TYPE=application
#export VERSION=15+23
#export VERSIONDATE=20200515
#export VERSION=17+14
#export VERSIONDATE=20210318
#export VERSION=18+14
#export VERSIONDATE=20210915
#export VERSION=19+6
#export VERSIONDATE=20220122
export VERSION=19+15
export VERSIONDATE=20220324
#export VERSION=21-15
#export VERSIONDATE=20230323
#export VERSION=22+15
#export VERSIONDATE=20230920
#export VERSION=22+ga
#export VERSIONDATE=20240320
#export VERSION=23+14
#export VERSIONDATE=20240320
wl-showstatus --package-version
export DEPENDENCIES=
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
#export LICENSEFILE=ADDITIONAL_LICENSE_INFO
export LICENSETYPE=GPL
#export DOWNLOADURL="https://hg.openjdk.java.net/jdk/jdk/tags"
#export DOWNLOADURL="https://github.com/openjdk/jdk/releases"
export DOWNLOADURL="https://github.com/openjdk/jdk/tags"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL="https://github.com/openjdk/jdk/archive/$BASENAME-$VERSION.tar.gz https://download.java.net/java/early_access/jdk$(echo $VERSION|tr + /)/GPL/openjdk-$(echo $VERSION|sed -e "s/\+/-ea+/")_windows-x64_bin.zip"
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
cd jdk-jdk-$(echo $VERSION|tr + -)
# create empty dummy DLL
echo "" | gcc -xc - -shared -s -mwindows -o dummy-msvcr.dll -Wl,--out-implib,libdummy-msvcr.dll.a
# extract JDK
unzip -oq $TARBALLDIR/$BASENAME/openjdk-$(echo $VERSION|sed -e "s/\+/-ea+/")_windows-x64_bin.zip -dbootjdk
# fix path detection
#sed -i.bak -e "s/cmd \/c \"for %A in (\(\\\\\"\$input_path\\\\\"\)) do @echo %~sA\"/(pushd \1 \&>\/dev\/null \&\& pwd -W \&\& popd \&>\/dev\/null)/" build/.configure-support/generated-configure.sh
#sed -i.bak -e "s/cmd \/c \"for %A in (\(\\\\\"\$input_path\\\\\"\)) do @echo %~sA\"/cygpath -w \1/" build/.configure-support/generated-configure.sh
sed -i.bak -e "s/has_forbidden_chars=.*a-zA-Z0-9/&./" build/.configure-support/generated-configure.sh
# don't abort because GCC is not supported
sed -i.bak2 -e "s/as_fn_error \$\?\(.*Cannot continue\)/echo\1/" build/.configure-support/generated-configure.sh
# don't abort because mingw32 operating system is not supported
sed -i.bak3 -e "s/\(\*msys\*\))/\1 | *mingw*)/" build/.configure-support/generated-configure.sh
# allow building with GCC on Windows
sed -i.bak4 -e "s/\(VALID_TOOLCHAINS_windows=\"\)\(microsoft\)/\1gcc clang \2/" build/.configure-support/generated-configure.sh
#sed -i.bak -e "s/\(VALID_TOOLCHAINS_windows=\"\)\(microsoft\)/\1gcc clang \2/" make/autoconf/toolchain.m4
wl-showstatus configure &&
 # mkdir -p m4 &&
 # autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal &&
 #./autogen.sh &&
 #    echo OK
 ## fix building DLLs on 64-bit
 #if ( echo $RUNPLATFORM | grep -q x86_64 ); then
 # echo "AM_GNU_GETTEXT_VERSION([$(gettext --version|head -n1|sed -e "s/^.* \([0-9\.]*\) *$/\1/")])" >> configure.ac &&
 # autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal
 #fi
 #INTLTOOL_PERL="$PERLDIR/bin/perl.exe" 
 #PERL="$PERLDIR/bin/perl.exe -I$PERLDIR/lib" 
 #PYTHON=$PYDIR/python.exe 
 #PYTHON=$PYDIR/python.exe C_INCLUDE_PATH=$PYDIR/include${C_INCLUDE_PATH:+:$C_INCLUDE_PATH} 
 #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --enable-shared --enable-static --host=$RUNPLATFORM LDFLAGS="-Wl,-no-undefined -Wl,--as-needed" &&
 #TOPDIR=$(pwd) OPENJDK_BUILD_OS_ENV=windows.msys ./configure --prefix=$INSTALLPREFIX --openjdk-target=$RUNPLATFORM --with-toolchain-type=gcc --with-boot-jdk=bootjdk/jdk-$(echo $VERSION|sed -e "s/\+.*$//") --disable-libffi-bundling --without-cups --without-x --disable-manpages --disable-full-docs --disable-hotspot-gtest --with-msvcr-dll=$MINGWDIR/$RUNPLATFORM/lib/lib$(if [ "0$USE_UCRT" -ne 0 ]; then echo -n "ucrt"; else echo -n "msvcrt"; fi).a --with-extra-cflags="-fcommon" &&
 TOPDIR=$(pwd) OPENJDK_BUILD_OS_ENV=windows.msys ./configure --prefix=$INSTALLPREFIX --openjdk-target=$RUNPLATFORM --with-toolchain-type=gcc --disable-ccache --with-boot-jdk=bootjdk/jdk-$(echo $VERSION|sed -e "s/\+.*$//") --disable-libffi-bundling --without-cups --without-x --disable-manpages --disable-full-docs --without-gtest --with-msvcr-dll=$(pwd)/dummy-msvcr.dll --with-extra-cflags="-fcommon" &&
 #make/autoconf/configure CHECKME $(pwd)  --prefix=$INSTALLPREFIX --openjdk-target=$RUNPLATFORM --with-toolchain-type=gcc --disable-libffi-bundling --without-cups --without-x --disable-manpages --disable-full-docs --disable-hotspot-gtest --with-extra-cflags="-fcommon" &&
 #--with-vendor-name= --with-vendor-url=
 ## fix building DLLs
 #sed -i.bak -e "s/\(allow_undefined=\)yes/\1no/" libtool &&
 wl-showstatus build &&
 #make &&
 MAKEFLAGS= make JOBS=$NUMBER_OF_PROCESSORS &&
 wl-showstatus build-install &&
 make install-strip &&
    echo OK
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf jdk-jdk-$(echo $VERSION|tr + -)




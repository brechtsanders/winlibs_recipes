export NAME="syslog-ng OSE"
export STATUS=
export URL=http://www.balabit.com/products/syslog-ng/opensource/
#export URL=https://github.com/balabit/syslog-ng
export BASENAME=syslog-ng
export DESCRIPTION="The syslog-ng open source edition is the direct descendant of the syslog-ng project that started ten years ago. The application can operate in server or agent mode, and - apart from UDP - supports the reliable TCP protocol. That way syslog-ng can be used to create flexible and reliable logging infrastructure even in heterogeneous environments."
export CATEGORY=system
export TYPE=application
#export VERSION=2.0.6
#export VERSION=2.0.9
#export VERSION=3.0.1
####misc.c: In function `resolve_sockaddr':
####misc.c:196: warning: implicit declaration of function `inet_ntop'
####misc.c: In function `g_fd_set_nonblock':
####misc.c:238: warning: implicit declaration of function `fcntl'
####misc.c:238: error: `F_GETFL' undeclared (first use in this function)
#export VERSIONDATE=
#export VERSION=3.3.5
#export VERSIONDATE=20120727
#export VERSION=3.4.0alpha3
#export VERSIONDATE=20120727
####checking for fork... no
####configure: error: some required library functions not available.
#export VERSION=3.6.4
#export VERSIONDATE=20160111
#export VERSION=3.16.1
#export VERSIONDATE=20160111
#export VERSION=3.17.1
#export VERSIONDATE=20180809
#export VERSION=3.17.2
#export VERSIONDATE=20180810
#export VERSION=3.18.1
#export VERSIONDATE=20181017
#export VERSION=3.19.1
#export VERSIONDATE=20181213
export VERSION=3.20.1
export VERSIONDATE=20190228
#export VERSION=3.21.1
#export VERSIONDATE=20190510
#export VERSION=3.22.1
#export VERSIONDATE=20190625
#export VERSION=3.23.1
#export VERSIONDATE=20190826
#export VERSION=3.24.1
#export VERSIONDATE=20191009
#export VERSION=3.25.1
#export VERSIONDATE=20191213
#export VERSION=3.26.1
#export VERSIONDATE=20200305
#export VERSION=3.27.1
#export VERSIONDATE=20200501
#export VERSION=3.28.1
#export VERSIONDATE=20200623
#export VERSION=3.29.1
#export VERSIONDATE=20200828
#export VERSION=3.30.1
#export VERSIONDATE=20201117
#export VERSION=3.31.1
#export VERSIONDATE=20210304
#export VERSION=3.31.2
#export VERSIONDATE=20210318
#export VERSION=3.32.1
#export VERSIONDATE=20210508
#export VERSION=3.33.1
#export VERSIONDATE=20210707
####configure: error: Building with system librabbitmq is not supported yet.
export DEPENDENCIES=glib2,eventlog,libnet,rabbitmq-c,mman-win32
export OPTIONALDEPENDENCIES=libivykis
export BUILDDEPENDENCIES=
export OPTIONALBUILDDEPENDENCIES=
#export VERSION=3.33.2
#export VERSIONDATE=20210720
#export VERSION=3.34.1
#export VERSIONDATE=20210910
#export VERSION=3.35.1
#export VERSIONDATE=20211115
#export VERSION=3.36.1
#export VERSIONDATE=20220305
#export VERSION=3.37.1
#export VERSIONDATE=20220608
#export VERSION=3.38.1
#export VERSIONDATE=20220829
#export VERSION=4.0.0
#export VERSIONDATE=20221221
#export VERSION=4.0.1
#export VERSIONDATE=20221222
export VERSION=4.1.0
#export VERSIONDATE=20230308
wl-showstatus --package-version
#export DEPENDENCIES=glib2,eventlog,libnet,rabbitmq-c,mman-win32
#export OPTIONALDEPENDENCIES=libivykis
#export BUILDDEPENDENCIES=cmake,ninja,bison
#export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=COPYING
export LICENSETYPE=GPL2
#export DOWNLOADURL="http://www.balabit.com/downloads/files/syslog-ng/sources/"
#export DOWNLOADURL="https://github.com/balabit/syslog-ng/releases"
export DOWNLOADURL="https://github.com/syslog-ng/syslog-ng/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://www.balabit.com/downloads/files/syslog-ng/sources/stable/src/syslog-ng-$VERSION.tar.gz
#export DOWNLOADSOURCEURL=http://www.balabit.com/downloads/files/syslog-ng/sources/$VERSION/source/syslog-ng_$VERSION.tar.gz
#export DOWNLOADSOURCEURL=http://www.balabit.com/downloads/files/syslog-ng/open-source-edition/$VERSION/source/syslog-ng_$VERSION.tar.gz
#export DOWNLOADSOURCEURL=https://github.com/balabit/syslog-ng/releases/download/$BASENAME-$VERSION/$BASENAME-$VERSION.tar.gz
#export DOWNLOADSOURCEURL=https://github.com/balabit/syslog-ng/archive/$BASENAME-$VERSION.tar.gz
export DOWNLOADSOURCEURL=https://github.com/syslog-ng/syslog-ng/releases/download/$BASENAME-$VERSION/$BASENAME-$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
tar xz --force-local -f $TARBALLDIR/$BASENAME/syslog-ng-$VERSION.tar.gz
#tar xz --force-local -f $TARBALLDIR/$BASENAME/syslog-ng_$VERSION.tar.gz
cd syslog-ng-$VERSION
#cd syslog-ng-syslog-ng-$VERSION
## fix for missing libnet-config script
#cat > libnet-config << EOF
##!/bin/sh
#if [ "\$1" == "--libs" ]; then
#  echo "-lnet"
#fi
#EOF
# fix missing files on Windows
mkdir -p win32fix/sys win32fix/netinet win32fix/arpa
cat > win32fix/sys/socket.h << EOF
#ifndef  DUMMY_SOCKET_H_INCLUDED
#define DUMMY_SOCKET_H_INCLUDED
#include <winsock2.h>
//typedef int socklen_t;
#include <ws2tcpip.h>
#endif
EOF
touch win32fix/sys/un.h win32fix/netinet/in.h win32fix/arpa/inet.h win32fix/netdb.h win32fix/sys/ioctl.h win32fix/sys/wait.h
cat > win32fix/syslog.h << EOF
EOF
# fix for missing pwd.h and grp.h
cat > win32fix/pwd.h << EOF
#ifndef  DUMMY_PWD_H_INCLUDED
#define DUMMY_PWD_H_INCLUDED
typedef int uid_t;
#endif
EOF
cat > win32fix/grp.h << EOF
#ifndef  DUMMY_GRP_H_INCLUDED
#define DUMMY_GRP_H_INCLUDED
typedef int gid_t;
#endif
EOF
## fix uid_t/gid_t problems in src/misc.h
#mv src/misc.h src/misc.h.bak
#cat > src/misc.h << EOF
##include <pwd.h>
##include <grp.h>
#EOF
#cat src/misc.h.bak >> src/misc.h
# remove modules/afamqp/rabbitmq-c/librabbitmq/win32/msinttypes/stdint.h
mv modules/afamqp/rabbitmq-c/librabbitmq/win32/msinttypes/stdint.h modules/afamqp/rabbitmq-c/librabbitmq/win32/msinttypes/stdint.h.bak
# fix -pthread in configure (version >= 3.3.5)
mv configure configure.bak
sed -e "s/ -pthread/ -lpthread/" configure.bak > configure
touch NEWS README ChangeLog
# fix detection of getaddrinfo
mv modules/afamqp/rabbitmq-c/configure.ac modules/afamqp/rabbitmq-c/configure.ac.bak &&
sed -e "s/-lsocket -lnsl/& -lws2_32/" modules/afamqp/rabbitmq-c/configure.ac.bak > modules/afamqp/rabbitmq-c/configure.ac
# fix detection of getaddrinfo
patch -ulbf modules/afamqp/rabbitmq-c/configure.ac << EOF
@@ -95,10 +94,0 @@
-AC_SEARCH_LIBS([getaddrinfo], [socket], [],
-               [AC_CHECK_LIB([getaddrinfo], [socket],
-                             [LIBS="-lsocket -lnsl \$LIBS"],
-                             [AC_MSG_ERROR([cannot find name resolution library (library with getaddrinfo symbol)])],
-                             [-lnsl])])
-AC_SEARCH_LIBS([socket], [socket], [],
-               [AC_CHECK_LIB([socket], [socket],
-                             [LIBS="-lsocket -lnsl \$LIBS"],
-                             [AC_MSG_ERROR([cannot find socket library (library with socket symbol)])],
-                             [-lnsl])])
EOF
# use dummy lib/eventlog/src/evtsyslog.c (version >= 3.16.1)
mv lib/eventlog/src/evtsyslog.c lib/eventlog/src/evtsyslog.c.bak
cat > lib/eventlog/src/evtsyslog.c << EOF
#include "evt_internals.h"
#include <stdarg.h>
EVTSYSLOGOPTS syslog_opts;
void evt_openlog(const char *ident, int options, int facility) {}
void evt_closelog(void) {}
void evt_vsyslog(int pri, const char *format, va_list ap) {}
void evt_syslog(int pri, const char *format, ...) {}
void evt_syslog_wrapper_init(void) {}
EOF
# avoid UNIX sockets in lib/gsockaddr.h (version >= 3.18.1)
patch -ulbf lib/gsockaddr.h << EOF
@@ -160,4 +160,6 @@

+#ifndef _WIN32
 GSockAddr *g_sockaddr_unix_new(const gchar *name);
 GSockAddr *g_sockaddr_unix_new2(struct sockaddr_un *s_un, int sunlen);
+#endif

EOF
# avoid UNIX sockets in lib/gsockaddr.c (version >= 3.18.1)
patch -ulbf lib/gsockaddr.c << EOF
@@ -71,2 +71,3 @@
       break;
+#ifndef _WIN32
     case AF_UNIX:
@@ -74,2 +75,3 @@
       break;
+#endif
     default:
@@ -503,2 +505,3 @@

+#ifndef _WIN32
 /* AF_UNIX socket address */
@@ -651,2 +654,3 @@
 }
+#endif

@@ -663,4 +667,6 @@
 #endif
+#ifndef _WIN32
   else if (a->sa_funcs == &unix_sockaddr_funcs)
     len = sizeof(GSockAddrUnix);
+#endif
   else
EOF
# avoid missing sysconf(_SC_PAGE_SIZE) in lib/secret-storage/nondumpable-allocator.c (version >= 3.18.1)
patch -ulbf lib/secret-storage/nondumpable-allocator.c << EOF
@@ -29,2 +29,5 @@
 #include <stdio.h>
+#ifdef _WIN32
+#include <windows.h>
+#endif

@@ -130,3 +133,9 @@
   gsize minimum_size = len + ALLOCATION_HEADER_SIZE;
+#ifdef _WIN32
+  SYSTEM_INFO sysinfo;
+  GetSystemInfo(&sysinfo);
+  gsize pagesize = sysinfo.dwPageSize;
+#else
   gsize pagesize = sysconf(_SC_PAGE_SIZE);
+#endif
   gsize alloc_size = round_to_nearest(minimum_size, pagesize);
EOF
# fix signal/alarm stuff in lib/alarms.c (version >= 3.18.1)
patch -ulbf lib/alarms.c << EOF
@@ -24,2 +24,6 @@

+#ifdef _WIN32
+#define _POSIX
+#define __USE_MINGW_ALARM
+#endif
 #include "alarms.h"
@@ -70,2 +74,5 @@
 {
+#ifdef _WIN32
+  signal(SIGALRM, sig_alarm_handler);
+#else
   struct sigaction sa;
@@ -75,2 +82,3 @@
   sigaction(SIGALRM, &sa, NULL);
+#endif
 }
EOF
wl-showstatus configure &&
 autoreconf -f -i -I $MINGWPREFIX/share/aclocal &&
 #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-dynamic-linking --with-libnet=. &&
 #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-dynamic-linking --with-libnet=. CFLAGS="-I`pwd`/win32fix" &&
 #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-dynamic-linking --with-libnet=. --disable-mongodb --with-jsonc=system --with-ivykis=system CFLAGS="-I$(pwd)/win32fix -I$MINGWPREFIX/include/mman-win32" LDFLAGS="-Wl,--as-needed -lmman" &&
 ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-dynamic-linking --with-libnet=. --disable-mongodb --with-jsonc=system --with-ivykis=system PYTHON=$PYDIR/python.exe CFLAGS="-I$(pwd)/win32fix -I$MINGWPREFIX/include/mman-win32" LDFLAGS="-Wl,-no-undefined -Wl,--as-needed -lmman -lws2_32" &&
 #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-dynamic-linking --with-libnet=. --with-libmongo-client=system --with-jsonc=system --with-librabbitmq-client=system --with-ivykis=system PYTHON=$PYDIR/python.exe CFLAGS="-I$(pwd)/win32fix -I$MINGWPREFIX/include/mman-win32" LDFLAGS="-Wl,-no-undefined -Wl,--as-needed -lmman -lws2_32" &&
 # fix building DLLs
 sed -i.bak -e "s/\(allow_undefined=\)yes/\1no/" libtool &&
 wl-showstatus build-install &&
 make install &&
    echo OK
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf tesseract-$VERSION
#### to do: fix includes for use with windows



#mkdir -p build_test && cmake.exe -G"MSYS Makefiles" -S. -Bbuild_test -LH && echo OK; rm -rf build_test

## fix lib/thread-utils.h (version >= 3.36.1)
#patch -ulbf lib/thread-utils.h << EOF
#@@ -25,7 +25,8 @@
# #include "syslog-ng.h"
#-#include <pthread.h>
#
# #ifdef _WIN32
#+#include <windows.h>
# typedef DWORD ThreadId;
# #else
#+#include <pthread.h>
# typedef pthread_t ThreadId;
#EOF
## ignore missing systemd in modules/system-source/CMakeLists.txt (version >= 3.36.1)
#patch -ulbf modules/system-source/CMakeLists.txt << EOF
#@@ -4,2 +4,3 @@
#
#+IF(NOT WIN32)
# find_package (systemd)
#@@ -12,2 +13,3 @@
# )
#+ENDIF()
#
#EOF
## fix detection of netsnmp
#sed -i.bak -e "s/net-snmp-config/&.exe/" cmake/Modules/FindNetSnmp.cmake
## skip building examples
#sed -i.bak -e "s/^add_subdirectory(examples)/#&/" modules/CMakeLists.txt
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# #PKG_CONFIG= cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DENABLE_SQL:BOOL=ON -DENABLE_MONGODB:BOOL=OFF -DENABLE_PYTHON:BOOL=OFF -DENABLE_JAVA:BOOL=OFF -DENABLE_JOURNALD:BOOL=OFF -DBUILD_TESTING:BOOL=OFF -DLIBNET_LIBRARIES:STRING="-lnet" -DWITH_GETTEXT:STRING=$MINGWPREFIX -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -S. -Bbuild_static &&
# #PKG_CONFIG= cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DENABLE_JAVA:BOOL=OFF -DENABLE_JOURNALD:BOOL=OFF -DWITH_SYSTEMD_JOURNAL:STRING=wrapper -DBUILD_TESTING:BOOL=OFF -S. -Bbuild_static &&
# PKG_CONFIG= PATH=$MINGWPREFIX/share/bison/bin:$PATH cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DENABLE_JAVA:BOOL=OFF -DENABLE_JOURNALD:BOOL=OFF -DWITH_SYSTEMD_JOURNAL:BOOL=OFF -DJSONC_SOURCE:STRING=system -DIVYKIS_SOURCE:STRING=system -DENABLE_EXAMPLE_DESTINATION:BOOL=OFF -DBUILD_TESTING:BOOL=OFF -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -S. -Bbuild_static &&
# wl-showstatus configure &&
# #PKG_CONFIG= cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -S. -Bbuild_shared &&
# #PKG_CONFIG= cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DENABLE_JAVA:BOOL=OFF -DENABLE_JOURNALD:BOOL=OFF -DWITH_SYSTEMD_JOURNAL:STRING=wrapper -DBUILD_TESTING:BOOL=OFF -S. -Bbuild_shared &&
# PKG_CONFIG= PATH=$MINGWPREFIX/share/bison/bin:$PATH cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DENABLE_JAVA:BOOL=OFF -DENABLE_JOURNALD:BOOL=OFF -DWITH_SYSTEMD_JOURNAL:BOOL=OFF -DJSONC_SOURCE:STRING=system -DIVYKIS_SOURCE:STRING=system -DENABLE_EXAMPLE_DESTINATION:BOOL=OFF -DBUILD_TESTING:BOOL=OFF -DPYTHON_EXECUTABLE:FILEPATH=$PYDIR/python.exe -S. -Bbuild_shared &&
# ## fix execution of Python scripts
# #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
# wl-showstatus build &&
# ninja -Cbuild_static &&
# wl-showstatus build &&
# ninja -Cbuild_shared &&
# wl-showstatus build-install &&
# ninja -Cbuild_static install/strip &&
# wl-showstatus build-install &&
# ninja -Cbuild_shared install/strip &&
#    echo OK

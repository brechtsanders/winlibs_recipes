#export NAME="Redis"
#export STATUS=
#export URL=https://github.com/microsoftarchive/redis
#export BASENAME=redis
#export DESCRIPTION="Redis is an in-memory database that persists on disk. The data model is key-value, but many different kind of values are supported: Strings, Lists, Sets, Sorted Sets, Hashes"
#export CATEGORY=database
#export TYPE=library
##export VERSION=3.0.504
##export VERSIONDATE=20211210
#export VERSION=3.2.100
#export VERSIONDATE=20211113
#wl-showstatus --package-version
#export DEPENDANCIES=
#export OPTIONALDEPENDANCIES=
#export BUILDDEPENDANCIES=
#export LICENSEFILE=license.txt
#export LICENSETYPE=BSD
#export DOWNLOADURL="https://github.com/microsoftarchive/redis/releases win-"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://github.com/microsoftarchive/redis/archive/refs/tags/win-$VERSION.tar.gz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#wl-showstatus extract
#tar xfz $TARBALLDIR/$BASENAME/win-$VERSION.tar.gz
#cd redis-win-$VERSION
## fix src/Win32_Interop/win32_types_hiredis.h (version >= 3.2.100)
#patch -ulbf src/Win32_Interop/win32_types_hiredis.h << EOF
#@@ -34,2 +34,7 @@
#
#+#ifndef __MINGW32__
#+#include <_mingw.h>
#+#include <sys/types.h>
#+#endif
#+
# typedef __int64           PORT_LONGLONG;
#@@ -61,2 +66,3 @@
#
#+#ifndef __MINGW32__
# typedef int               pid_t;
#@@ -66,2 +72,3 @@
# #endif
#+#endif
#
#EOF
#wl-showstatus build &&
# make CC=${CC:-gcc} &&
#    echo OK
## wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf redis-win-$VERSION



export NAME="Redis"
export STATUS=
export URL=http://redis.io/
export BASENAME=redis
export DESCRIPTION="Redis is an open source (BSD licensed), in-memory data structure store, used as database, cache and message broker. It supports data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs and geospatial indexes with radius queries. Redis has built-in replication, Lua scripting, LRU eviction, transactions and different levels of on-disk persistence, and provides high availability via Redis Sentinel and automatic partitioning with Redis Cluster."
export CATEGORY=database
export TYPE=library
#export VERSION=2.8.24
#export VERSIONDATE=20151223
####src/networking.c:31:21: fatal error: sys/uio.h: No such file or directory
#export VERSION=3.0.5
#export VERSIONDATE=20151208
#export VERSION=3.0.6
#export VERSIONDATE=20151219
#export VERSION=3.0.7
#export VERSIONDATE=20160406
#export VERSION=3.2.0
#export VERSIONDATE=20160507
#export VERSION=3.2.1
#export VERSIONDATE=20160618
#export VERSION=3.2.2
#export VERSIONDATE=20160728
#export VERSION=3.2.3
#export VERSIONDATE=20160802
#export VERSION=3.2.4
#export VERSIONDATE=20160926
#export VERSION=3.2.5
#export VERSIONDATE=20161026
#export VERSION=3.2.6
#export VERSIONDATE=20161206
#export VERSION=3.2.7
#export VERSIONDATE=20170201
#export VERSION=3.2.8
#export VERSIONDATE=20170213
#export VERSION=3.2.9
#export VERSIONDATE=20170518
#export VERSION=3.2.10
#export VERSIONDATE=20170814
#export VERSION=3.2.11
#export VERSIONDATE=20170922
#export VERSION=3.2.12
#export VERSIONDATE=20180614
#export VERSION=4.0.0
#export VERSIONDATE=20170714
#export VERSION=4.0.1
#export VERSIONDATE=20170724
#export VERSION=4.0.2
#export VERSIONDATE=20170922
#export VERSION=4.0.3
#export VERSIONDATE=20171130
#export VERSION=4.0.4
#export VERSIONDATE=20171201
#export VERSION=4.0.5
#export VERSIONDATE=20171202
#export VERSION=4.0.6
#export VERSIONDATE=20171205
#export VERSION=4.0.7
#export VERSIONDATE=20180124
#export VERSION=4.0.8
#export VERSIONDATE=20180203
#export VERSION=4.0.9
#export VERSIONDATE=20180327
#export VERSION=4.0.10
#export VERSIONDATE=20180614
#export VERSION=4.0.11
#export VERSIONDATE=20180804
#export VERSION=4.0.12
#export VERSIONDATE=20181212
#export VERSION=4.0.13
#export VERSIONDATE=20190221
#export VERSION=4.0.14
#export VERSIONDATE=20190319
#export VERSION=5.0.0
#export VERSIONDATE=20181018
#export VERSION=5.0.2
#export VERSIONDATE=20181122
#export VERSION=5.0.3
#export VERSIONDATE=20181212
#export VERSION=5.0.4
#export VERSIONDATE=20190319
#export VERSION=5.0.5
#export VERSIONDATE=20190516
#export VERSION=5.0.6
#export VERSIONDATE=20191111
#export VERSION=5.0.7
#export VERSIONDATE=20191120
#export VERSION=5.0.8
#export VERSIONDATE=20200313
#export VERSION=5.0.9
#export VERSIONDATE=20200813
#export VERSION=5.0.10
#export VERSIONDATE=20201027
#export VERSION=5.0.11
#export VERSIONDATE=20210223
#export VERSION=5.0.12
#export VERSIONDATE=20210302
#export VERSION=5.0.13
#export VERSIONDATE=20210722
#export VERSION=6.0.0
#export VERSIONDATE=20200430
#export VERSION=6.0.1
#export VERSIONDATE=20200502
#export VERSION=6.0.3
#export VERSIONDATE=20200518
#export VERSION=6.0.4
#export VERSIONDATE=20200528
#export VERSION=6.0.5
#export VERSIONDATE=20200610
#export VERSION=6.0.6
#export VERSIONDATE=20200721
#export VERSION=6.0.7
#export VERSIONDATE=20200901
#export VERSION=6.0.8
#export VERSIONDATE=20200910
#export VERSION=6.0.9
#export VERSIONDATE=20201027
#export VERSION=6.0.10
#export VERSIONDATE=20210113
#export VERSION=6.0.11
#export VERSIONDATE=20210223
#export VERSION=6.0.12
#export VERSIONDATE=20210302
#export VERSION=6.0.13
#export VERSIONDATE=20210504
#export VERSION=6.0.14
#export VERSIONDATE=20210602
#export VERSION=6.0.15
#export VERSIONDATE=20210722
#export VERSION=6.2.0
#export VERSIONDATE=20210223
#export VERSION=6.2.1
#export VERSIONDATE=20210302
#export VERSION=6.2.2
#export VERSIONDATE=20210420
#export VERSION=6.2.3
#export VERSIONDATE=20210504
#export VERSION=6.2.4
#export VERSIONDATE=20210602
#export VERSION=6.2.5
#export VERSIONDATE=20210722
#export VERSION=6.2.6
#export VERSIONDATE=20211004
#export VERSION=6.2.7
#export VERSIONDATE=20220428
#export VERSION=7.0.0
#export VERSIONDATE=20220428
#export VERSION=7.0.1
#export VERSIONDATE=20220608
#export VERSION=7.0.2
#export VERSIONDATE=20220612
#export VERSION=7.0.3
#export VERSIONDATE=20220712
export VERSION=7.0.4
export VERSIONDATE=20220718
####deps/anet.c:34:24: fatal error: sys/socket.h: No such file or directory
####deps/ae.c:38:18: fatal error: poll.h: No such file or directory
####src/anet.c:36:10: fatal error: sys/un.h: No such file or directory
wl-showstatus --package-version
export DEPENDANCIES=sys_wait_h
export OPTIONALDEPENDANCIES=
export BUILDDEPENDANCIES=
export LICENSEFILE=COPYING
export LICENSETYPE=BSD
#export DOWNLOADURL="http://redis.io/download"
export DOWNLOADURL="https://download.redis.io/releases/"
#export DOWNLOADURL="https://github.com/antirez/redis/releases"
#export DOWNLOADURL="https://github.com/redis/redis"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://download.redis.io/releases/$BASENAME-$VERSION.tar.gz
export DOWNLOADSOURCEURL=https://download.redis.io/releases/$BASENAME-$VERSION.tar.gz
#export DOWNLOADSOURCEURL=https://github.com/antirez/redis/archive/$VERSION.tar.gz
#export DOWNLOADSOURCEURL=https://github.com/redis/redis/archive/refs/tags/$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xfz $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
#tar xfz $TARBALLDIR/$BASENAME/$VERSION.tar.gz
cd $BASENAME-$VERSION
# create multiplexing layer src/ae_ws2.c, use the one from https://github.com/dmajkic/redis / https://blog.lovor.net/ported-redis-to-windows/
ls -1 src/ae_ws2.c &> /dev/null || cat > src/ae_ws2.c << EOF
/* Select()-based ae.c module
 * Copyright (C) 2009-2010 Salvatore Sanfilippo - antirez@gmail.com
 * Released under the BSD license. See the COPYING file for more info. */

#include <string.h>
#include "win32fixes.h"

typedef struct aeApiState {
    fd_set rfds, wfds;
    /* We need to have a copy of the fd sets as it's not safe to reuse
     * FD sets after select(). */
    fd_set _rfds, _wfds;
    /* WIN32  select works only on sockets, so we will wati for pipes  */
    HANDLE vm_pipe;
} aeApiState;

static int aeApiCreate(aeEventLoop *eventLoop) {
    aeApiState *state = zmalloc(sizeof(aeApiState));

    if (!state) return -1;

    FD_ZERO(&state->rfds);
    FD_ZERO(&state->wfds);
    state->vm_pipe = INVALID_HANDLE_VALUE;

    eventLoop->apidata = state;
    return 0;
}

static void aeApiFree(aeEventLoop *eventLoop) {
    zfree(eventLoop->apidata);
}

static int aeApiAddEvent(aeEventLoop *eventLoop, int fd, int mask) {
    aeApiState *state = eventLoop->apidata;

    if (mask & AE_PIPE) {
        state->vm_pipe = (HANDLE) _get_osfhandle(fd);
//        DWORD mode = PIPE_NOWAIT;
//        SetNamedPipeHandleState(state->vm_pipe,&mode,NULL,NULL);
    } else {
        if (mask & AE_READABLE) FD_SET((SOCKET)fd,&state->rfds);
        if (mask & AE_WRITABLE) FD_SET((SOCKET)fd,&state->wfds);
    }
    return 0;
}

static void aeApiDelEvent(aeEventLoop *eventLoop, int fd, int mask) {
    aeApiState *state = eventLoop->apidata;

    if (mask & AE_PIPE) {
        state->vm_pipe = INVALID_HANDLE_VALUE;
    } else {
        if (mask & AE_READABLE) FD_CLR((SOCKET)fd,&state->rfds);
        if (mask & AE_WRITABLE) FD_CLR((SOCKET)fd,&state->wfds);
    }
}

static int aeApiPoll(aeEventLoop *eventLoop, struct timeval *tvp) {
    aeApiState *state = eventLoop->apidata;
    int retval, j, numevents = 0;
    DWORD pipe_is_on=0;

    memcpy(&state->_rfds,&state->rfds,sizeof(fd_set));
    memcpy(&state->_wfds,&state->wfds,sizeof(fd_set));

    retval = select(eventLoop->maxfd+1,
                &state->_rfds,&state->_wfds,NULL,tvp);

    if (state->vm_pipe != INVALID_HANDLE_VALUE) {
        if (PeekNamedPipe(state->vm_pipe, NULL, 0, NULL, &pipe_is_on, NULL)) {
            if (pipe_is_on) retval++;
       }
    }

    if (retval > 0) {
        for (j = 0; j <= eventLoop->maxfd; j++) {
            int mask = 0;
            aeFileEvent *fe = &eventLoop->events[j];

            if (fe->mask == AE_NONE) continue;
            if (fe->mask & AE_READABLE && FD_ISSET(j,&state->_rfds))
                mask |= AE_READABLE;
            if (fe->mask & AE_WRITABLE && FD_ISSET(j,&state->_wfds))
                mask |= AE_WRITABLE;
            if (fe->mask & AE_PIPE && pipe_is_on)
                mask |= AE_READABLE;
            eventLoop->fired[numevents].fd = j;
            eventLoop->fired[numevents].mask = mask;
            numevents++;
        }
    }
    return numevents;
}

static char *aeApiName(void) {
    return "winsock2";
}
EOF
# fix missing files
mkdir -p winfix/sys winfix/netinet
echo "#include <winsock2.h>" > winfix/sys/socket.h
touch winfix/netinet/in.h winfix/poll.h winfix/sys/select.h
cat > winfix/syslog.h << EOF
EOF
wl-showstatus build-install &&
 make PREFIX=$INSTALLPREFIX CC="${CC:-gcc} -I$(pwd)/winfix -I$MINGWPREFIX/win32ports/include -DWIN32" install &&
    echo OK
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
####See also: https://github.com/dmajkic/redis
####See also: https://github.com/microsoftarchive/redis



#export NAME="Redis"
#export STATUS=
#export URL=https://github.com/tporadowski/redis
#export BASENAME=redis
#export DESCRIPTION="Native port of Redis for Windows. Redis is an in-memory database that persists on disk. The data model is key-value, but many different kind of values are supported: Strings, Lists, Sets, Sorted Sets, Hashes, Streams, HyperLogLogs."
#export CATEGORY=
#export TYPE=library
##export VERSION=5.0.14
##export VERSIONDATE=20211210
#export VERSION=5.0.14.1
#export VERSIONDATE=20220612
#wl-showstatus --package-version
#export DEPENDANCIES=
#export OPTIONALDEPENDANCIES=
#export BUILDDEPENDANCIES=
#export LICENSEFILE=license.txt
#export LICENSETYPE=BSD
#export DOWNLOADURL="https://github.com/tporadowski/redis/releases"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://github.com/tporadowski/redis/archive/refs/tags/v$VERSION.tar.gz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#wl-showstatus extract
#tar xfz $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
#cd $BASENAME-$VERSION
## fix src/Win32_Interop/win32_types_hiredis.h (version >= 5.0.14)
#patch -ulbf src/Win32_Interop/win32_types_hiredis.h << EOF
#@@ -34,2 +34,11 @@
#
#+#ifdef __MINGW32__
#+#include <stdint.h>
#+#ifndef __int64
#+#define __int64 int64_t
#+#endif
#+#ifndef __int32
#+#define __int32 int32_t
#+#endif
#+#endif
# typedef __int64           PORT_LONGLONG;
#@@ -61,2 +70,5 @@
#
#+#ifdef __MINGW32__
#+#include <sys/types.h>
#+#else
# typedef int               pid_t;
#@@ -66,5 +78,6 @@
# #endif
#+#endif
#
# /* sha1 */
#-#ifndef u_int32_t
#+#ifdef u_int32_t
# typedef unsigned __int32  u_int32_t;
#EOF
## fix src/Win32_Interop/win32_types.h (version >= 5.0.14)
#patch -ulbf src/Win32_Interop/win32_types.h << EOF
#@@ -36,4 +36,6 @@
#
#+#ifndef __MINGW32__
# typedef __int64     off_t;
# typedef long        _off_t;
#+#endif
#
#EOF
## fix src/sds.h (version >= 5.0.14)
#patch -ulbf src/sds.h << EOF
#@@ -49,3 +49,7 @@
# #ifdef _WIN32
#+#ifdef __MINGW32__
#+#define PACK( __Declaration__ ) __attribute__((packed, aligned(1))) __Declaration__
#+#else
# #define PACK( __Declaration__ ) __pragma( pack(push, 1) ) __Declaration__ __pragma( pack(pop) )
#+#endif
#
#EOF
#wl-showstatus build &&
# make CC=${CC:-gcc} &&
#    echo OK
## wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




export NAME="LLVM build of MinGW-w64"
export STATUS=
export URL=http://mingw-w64.org/
export BASENAME=llvm-mingw-w64
export DESCRIPTION="The project's goal is to deliver runtime, headers, and libs for developing 64 bit (x64), as well as 32 bit (x86), windows applications using gcc-4.4 or newer versions."
export CATEGORY=development
export TYPE=library
export VERSION=11.0.1
export VERSIONDATE=20240313
wl-showstatus --package-version
export DEPENDENCIES=mingw-w64,llvm-core,llvm-clang
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=COPYING
export LICENSETYPE="Zope Public License (ZPL) with exceptions"
export DOWNLOADURL=
#export DOWNLOADURL="http://sourceforge.net/projects/mingw-w64/files/mingw-w64/mingw-w64-release/ mingw-w64-v"
#export DOWNLOADURL="https://gitlab.com/shinchiro/mingw-w64/-/tags"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=
wl-showstatus download
wl-wait4deps
mkdir -p $BASENAME-$VERSION
cd $BASENAME-$VERSION
# copy license file(s)
cp $MINGWPREFIX/src/mingw-w64/COPYING* .
archlist="x86_64 i686 aarch64 armv7"
# build MinGW-w64 headers
wl-showstatus configure headers &&
 mkdir -p build_mingw-w64-headers &&
 cd build_mingw-w64-headers &&
 $MINGWPREFIX/src/mingw-w64/mingw-w64-headers/configure \
  --prefix=$INSTALLPREFIX/share/llvm-split \
  --build=$BUILDPLATFORM \
  --host=$RUNPLATFORM \
  --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrtbase"; else echo "msvcrt-os"; fi) \
  --with-default-win32-winnt=0x0601 \
  --enable-sdk=all \
  --enable-idl \
  &&
 cd .. &&
 wl-showstatus build-install headers &&
 make -Cbuild_mingw-w64-headers install-strip &&
 # build MinGW-w64 crt
 for arch in $archlist; do
  wl-showstatus configure $arch crt &&
  mkdir -p build_mingw-w64-crt-$arch &&
  cd build_mingw-w64-crt-$arch &&
  $MINGWPREFIX/src/mingw-w64/mingw-w64-crt/configure \
   --prefix=$INSTALLPREFIX/share/llvm-split/$arch-w64-mingw32 \
   --build=$BUILDPLATFORM \
   --host=$arch-w64-mingw32 \
   --$(if [ "$arch" == "i686" ]; then echo "enable"; else echo "disable"; fi)-lib32 \
   --$(if [ "$arch" == "x86_64" ]; then echo "enable"; else echo "disable"; fi)-lib64 \
   --$(if [ "$arch" == "armv7" ]; then echo "enable"; else echo "disable"; fi)-libarm32 \
   --$(if [ "$arch" == "aarch64" ]; then echo "enable"; else echo "disable"; fi)-libarm64 \
   --with-default-msvcrt=$(if [ "0$USE_UCRT" -ne 0 ]; then echo "ucrtbase"; else echo "msvcrt-os"; fi) \
   --disable-delay-import-libs \
   --enable-wildcard \
   --disable-dependency-tracking \
   CC="$MINGWPREFIX/share/llvm-split/bin/clang.exe" \
   CXX="$MINGWPREFIX/share/llvm-split/bin/clang++.exe" \
   AS="$MINGWPREFIX/share/llvm-split/bin/llvm-as.exe" \
   AR="$MINGWPREFIX/share/llvm-split/bin/llvm-ar.exe" \
   RANLIB="$MINGWPREFIX/share/llvm-split/bin/llvm-ranlib.exe" \
   DLLTOOL="$MINGWPREFIX/share/llvm-split/bin/llvm-dlltool.exe" \
   STRIP="$MINGWPREFIX/share/llvm-split/bin/llvm-strip.exe" \
   CFLAGS="--target=$arch-w64-windows-gnu -I$INSTALLPREFIX/share/llvm-split/include" \
   CXXFLAGS="--target=$arch-w64-windows-gnu -I$INSTALLPREFIX/share/llvm-split/include" \
   &&
   #-fuse-ld=lld 
  cd .. &&
  #$(echo $arch|sed -e "s/^i.86/x86/")
  # avoid 
  wl-showstatus build-install $arch crt &&
  make -Cbuild_mingw-w64-crt-$arch install-strip &&
  #make -Cbuild_mingw-w64-crt-$arch install-strip DLLTOOL=$MINGWPREFIX/share/llvm/bin/llvm-dlltool.exe &&
  touch SUCCESS_CRT_$arch || break
 done &&
 if [ $(ls -1 SUCCESS_CRT_*|wc -l) -ne $(echo $archlist|wc -w) ]; then false; fi &&
 rm -f SUCCESS_CRT_* &&
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION



 # build MinGW-w64 winpthreads
 for arch in $archlist; do
  mkdir -p build_mingw_w64_winpthreads_$arch &&
  #cp -u $INSTALLPREFIX/share/mingw-w64/$arch-w64-mingw32/lib/{dllcrt2,crtbegin,crtend}.o build_mingw_w64_winpthreads_$arch/ &&
  wl-showstatus configure $arch winpthreads &&
  cd build_mingw_w64_winpthreads_$arch &&
  $MINGWPREFIX/src/mingw-w64/mingw-w64-libraries/winpthreads/configure \
   --prefix=$INSTALLPREFIX/share/llvm-split/$arch-w64-mingw32 \
   --build=$BUILDPLATFORM \
   --host=$arch-w64-mingw32 \
   --with-sysroot=$INSTALLPREFIX/share/llvm-split/$arch-w64-mingw32 \
   --without-gnu-ld \
   CC="$MINGWPREFIX/share/llvm-split/bin/clang.exe --target=$arch-w64-windows-gnu" \
   AS="$MINGWPREFIX/share/llvm-split/bin/llvm-as.exe" \
   AR="$MINGWPREFIX/share/llvm-split/bin/llvm-ar.exe" \
   RANLIB="$MINGWPREFIX/share/llvm-split/bin/llvm-ranlib.exe" \
   LD="$MINGWPREFIX/share/llvm-split/bin/ld.lld.exe" \
   RC="$MINGWPREFIX/share/llvm-split/bin/llvm-windres.exe --target=$arch-w64-windows-gnu -I$INSTALLPREFIX/share/llvm-split/include" \
   DLLTOOL="$MINGWPREFIX/share/llvm-split/bin/llvm-dlltool.exe" \
   STRIP="$MINGWPREFIX/share/llvm-split/bin/llvm-strip.exe" \
   CFLAGS="-I$INSTALLPREFIX/share/llvm-split/include" \
   LDFLAGS="-L$INSTALLPREFIX/share/llvm-split/$arch-w64-mingw32/lib" \
   &&
   #DLLTOOL="$MINGWPREFIX/share/llvm-split/bin/llvm-dlltool.exe -m $(if [ "$arch" == "x86_64" ]; then echo "i386:"; fi)$(if [ "$arch" == "aarch64" ]; then echo "arm64"; else echo "$arch"; fi)" \
  cd .. &&
  # remove invalid -no-pthread compiler flag
  sed -i.bak -e "s/ -Wc,-no-pthread//" build_mingw_w64_winpthreads_$arch/Makefile &&
  #-rtlib=compiler-rt -unwindlib=libunwind -stdlib=libc++ 
  #-Wl,-m,$(case $arch in i686) echo "i386pe";; x86_64) echo "i386pep";; armv7) echo "thumb2pe";; aarch64) echo "arm64pe";; esac)
  ## fix detection of shared libraries
  #sed -i.bak2 -e "s/\(deplibs_check_method=\"\)[^\"]*/\1pass_all/" build_mingw_w64_winpthreads_$arch/libtool &&
  ## fix link issues in build_mingw_w64/mingw-w64-libraries/winpthreads/
  #sed -i.bak -e "s?\(-o \)\([^ ]*\)\(.*\) -link \(-dll\)?-shared -s -mwindows \1.libs/libwinpthread-1.dll -Wl,--out-implib,\2 \3 \4?" build_mingw_w64_winpthreads_$arch/libtool &&
  #sed -i.bak -e "s?\$(AM_V_CCLD).*\$(libwinpthread_la_OBJECTS).*?& \&\& \$(AR) \$(ARFLAGS) .libs/libwinpthread.a \$(libwinpthread_la_OBJECTS:.lo=.o) \&\& cp -f .libs/libwinpthread.a .libs/libwinpthread.lib?" build_mingw_w64_winpthreads_$arch/Makefile &&
  wl-showstatus build-install $arch winpthreads &&
  # build include files and make them available
  #PATH=$PWD/prebuilt/bin:$PATH make -Cbuild_mingw_w64_winpthreads_$arch install-strip &&
  make -Cbuild_mingw_w64_winpthreads_$arch install-strip &&
  #make -Cbuild_mingw_w64_winpthreads_$arch install-strip CFLAGS="$(if [ "$arch" == "armv7" ] || [ "$arch" == "aarch64" ]; then echo "-femulated-tls"; fi)" &&
  #cp -u build_mingw_w64_winpthreads_$arch/fakelib/*.a stage1/$arch-w64-mingw32/lib/ &&
  #mkdir -p stage1/$arch-w64-mingw32 &&
  #cp -rf mingw-w64_winpthreads_$arch/* stage1/$arch-w64-mingw32/ &&
  #mkdir -p stage1/lib/$arch-w64-mingw32 &&
  #cp -rf mingw-w64_winpthreads_$arch/* stage1/lib/$arch-w64-mingw32/ &&
  ##mkdir -p stage1/$arch-w64-windows-gnu/lib &&
  ##cp -rf mingw-w64_winpthreads_$arch/lib/* stage1/$arch-w64-windows-gnu/lib/ &&
  touch SUCCESS_PTHREADS_$arch || break
 done &&
 if [ $(ls -1 SUCCESS_PTHREADS_*|wc -l) -ne $(echo $archlist|wc -w) ]; then false; fi &&
 rm -f SUCCESS_PTHREADS_* &&
    echo OK




$MINGWPREFIX/src/mingw-w64/
  ./configure --help 2> /dev/null
  cat meson_options.txt 2> /dev/null
  head COPYING* LICENSE* LICENCE* COPYRIGHT*
  ls -ld COPYING* LICENSE* LICENCE* COPYRIGHT* configure* m4 CMakeLists.txt cmake xmake.lua Makefile GNUmakefile setup.py scons SConscript SConstruct meson.build meson_options.txt *.pro *.proj *.sln BUILD.gn .gn build 2> /dev/null

wl-showstatus build &&
 make &&
 #make CC=${CC:-gcc} CXX=${CXX:-g++} LD=${LD:-ld} AR=${AR:-ar} &&
    echo OK

#GCCFLAG_ASNEEDED=$(echo "int main () { return 0; }"|gcc -xc - -Wl,--as-needed &>/dev/null && echo "-Wl,--as-needed")
#GCCFLAG_ASNEEDED=$(if gcc --help -v 2>/dev/null | grep -q " --as-needed"; then echo "-Wl,--as-needed"; fi)

wl-showstatus configure &&
 #wl-showstatus preconfigure &&
 #mkdir -p m4 &&
 ##libtoolize -f -i -c &&
 ##intltoolize -f -c &&
 #autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal &&
 #./autogen.sh &&
 #    echo OK
 ## fix building DLLs on 64-bit
 #if ( echo $RUNPLATFORM | grep -q x86_64 ); then
 # echo "AM_GNU_GETTEXT_VERSION([$(gettext --version|head -n1|sed -e "s/^.* \([0-9\.]*\) *$/\1/")])" >> configure.ac &&
 # autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal
 #fi
 ## allow building shared libraries when using clang
 #if ${CC:-gcc} --version|grep -q "^clang" && ! ${CC:-gcc} --help|grep auto-import; then
 # sed -i.bak -e "s/\$LD --help 2>&1 | \(\$GREP\|grep\) 'auto-import'/true/" configure
 # #sed -i.bak -e "s/\$LD --help 2>&1 | \(\$GREP\|grep\) 'auto-import'/true/" $(find -name configure)
 #fi &&
 ## fix confusion between MSVC and clang
 #if ${CC:-gcc} --version|grep -q "^clang"; then
 # sed -i.bak2 -e "s/\b\(cl\)\(\*\)/\1.exe\2/g; s/\(ld_shlibs\)=no/\1yes/" configure
 #fi &&
 #PATH=$PATH:$PERLDIR/../c/bin INTLTOOL_PERL="$PERLDIR/bin/perl.exe" 
 #PERL="$PERLDIR/bin/perl.exe -I$PERLDIR/lib" 
 #PYTHON=$PYDIR/python.exe 
 #PYTHON=$PYDIR/python.exe C_INCLUDE_PATH=$C_INCLUDE_PATH:$PYDIR/include 
 #PKG_CONFIG_PATH=$MINGWPREFIX/libav/lib/pkgconfig${PKG_CONFIG_PATH:+:$PKG_CONFIG_PATH} 
 #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-static --enable-shared LDFLAGS="-Wl,-no-undefined -Wl,--as-needed" &&
 ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM &&
 ## fix building DLLs
 #sed -i.bak -e "s/\(allow_undefined=\)yes/\1no/" libtool &&
 ## fix detection of shared libraries
 #sed -i.bak2 -e "s/\(deplibs_check_method=\"\)[^\"]*/\1file_magic ^x86 archive import|^x86 DLL|PE32+* executable (DLL)|pe-i386|pe-x86-64/; s/'file format pe-i386[^']*'/\"\$deplibs_check_method\"/" libtool &&
 #sed -i.bak2 -e "s/\(deplibs_check_method=\"\)[^\"]*/\1none/" libtool &&
 #sed -i.bak2 -e "s/\(deplibs_check_method=\"\)[^\"]*/\1pass_all/" libtool &&
 #wl-showstatus build &&
 #make &&
 wl-showstatus build-install &&
 make install-strip &&
 #( make install-strip || ( make install && strip $INSTALLPREFIX/bin/*.{dll,exe} )) &&
    echo OK
    ls -l $INSTALLPREFIX/lib/pkgconfig $INSTALLPREFIX/share/pkgconfig
    make install-pkgconfigDATA

#grep -wi add_library $(find -name CMakeLists.txt -or -name '*.cmake')
#mkdir -p build_test && cmake.exe -G"MSYS Makefiles" -S. -Bbuild_test -LH && echo OK; rm -rf build_test

#export BUILDDEPENDENCIES=cmake
#PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ 
#PATH=$PATH:$MINGWPREFIX/qt6/bin QTDIR=$MINGWPREFIX/qt6 QMAKESPEC=$MINGWPREFIX/qt6/mkspecs/win32-g++ 
#-DCMAKE_SYSTEM_NAME=Windows 
#-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
#mkdir -p build_win &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -S. -Bbuild_win &&
# #wl-showstatus build &&
# #cmake.exe --build build_win &&
# #make -Cbuild_win &&
# wl-showstatus build-install &&
# make -Cbuild_win install/strip &&
#    echo OK

#export BUILDDEPENDENCIES=cmake,ninja
#PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ 
#-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
#mkdir -p build_win &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -S. -Bbuild_win &&
# #wl-showstatus build &&
# #cmake.exe --build build_win &&
# #ninja -Cbuild_win &&
# wl-showstatus build-install &&
# #cmake.exe --install build_win --strip &&
# #cmake.exe --build build_win --target "install/strip" &&
# ninja -Cbuild_win install/strip &&
#    echo OK

#export BUILDDEPENDENCIES=cmake,ninja
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -S. -Bbuild_static &&
# #-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -S. -Bbuild_shared &&
# ## fix execution of Python scripts
# #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|glib-genmarshal\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
# ## fix missing link libraries
# #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lws2_32/" build_shared/build.ninja &&
# #wl-showstatus build &&
# #cmake.exe --build build_static &&
# #ninja -Cbuild_static &&
# #wl-showstatus build &&
# #cmake.exe --build build_shared &&
# #ninja -Cbuild_shared &&
# wl-showstatus build-install &&
# #cmake.exe --install build_static --strip &&
# #cmake.exe --build build_static --target "install/strip" &&
# #cmake.exe --build build_static --target "library/install/strip" &&
# ninja -Cbuild_static install/strip &&
# #ninja -Cbuild_static library/install/strip &&
# wl-showstatus build-install &&
# #cmake.exe --install build_shared --strip &&
# #cmake.exe --build build_shared --target "install/strip" &&
# ninja -Cbuild_shared install/strip &&
#    echo OK

#-DCMAKE_BUILD_TYPE:STRING=MinSizeRel

#export BUILDDEPENDENCIES=meson,ninja
#-Dc_args=$CFLAGS -Dcpp_args=$CXXFLAGS -Dc_link_args=$LDFLAGS
## fix missing gio-unix
#sed -i.bak -e "s/gio-unix-/gio-/" meson.build
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library static -D documentation=true . build_static &&
# wl-showstatus configure &&
# PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library shared -D documentation=true . build_shared &&
# ## fix slash/backslash path issue when calling Python from Ninja
# #sed -i.bak -e "s/join_paths/os.path.join/g; /COMMAND =.*python\.exe/ s?\"/\([a-zA-Z]\)/?\"\1:/?; /COMMAND =.*python\.exe/ s?/?\\\\?g" build_*/build.ninja &&
# ## add linker flag
# #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*-ladvapi32/& -Wl,--as-needed/" build_shared/build.ninja &&
# ## add linker flag
# #sed -i.bak -e "s/^\s*LINK_ARGS\s*=.*\"-ladvapi32\"/& \"-Wl,--as-needed\"/" build_shared/build.ninja &&
# wl-showstatus build-install &&
# #PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -C build_static install &&
# PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -C build_static install/strip &&
# wl-showstatus build-install &&
# #PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -C build_shared install &&
# PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -C build_shared install/strip &&
#    echo OK && find . -name '*.a'

#export BUILDDEPENDENCIES=meson,ninja
#-Dc_args=$CFLAGS -Dcpp_args=$CXXFLAGS -Dc_link_args=$LDFLAGS -Dcpp_link_args=$LDFLAGS
## fix location of Perl
#sed -i.bak -e "s?'perl'?'$(cygpath -w $PERLDIR/bin/perl.exe|sed -e 's/\\/&&&&/g')'?" meson.build
## fix detection of Python
#sed -i.bak -e "s?'python3'?'$(cygpath -w $PYDIR/python.exe|sed -e 's/\\/&&&&/g')'?" meson.build
## fix missing gio-unix
##sed -i.bak -e "s/gio-unix-/gio-/" meson.build
#sed -i.bak -e "s/gio-unix-/gio-windows-/" meson.build
#mkdir -p build_both &&
# wl-showstatus configure &&
# PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Ddocumentation=true . build_both &&
# ## fix slash/backslash path issue when calling Python from Ninja
# #sed -i.bak -e "s/join_paths/os.path.join/g; /COMMAND =.*python\.exe/ s?\"/\([a-zA-Z]\)/?\"\1:/?; /COMMAND =.*python\.exe/ s?/?\\\\?g" build_*/build.ninja &&
# ## fix Python path issues in meson_exe
# #sed -i.bak -e "s?$PYDIR?$(echo $PYDIR|sed -e "s?^/\([a-zA-Z]\)/?\1:/?")?" build_both/meson-private/meson_exe_python.exe_*.dat &&
# ## fix execution of Python scripts
# #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *= *\| *=.*\&\& *\)\(\"\{0,1\}[^ ]*\)\(\.py\|glib-mkenums\|g-ir-scanner\|asciidoc\)\(\"\{0,1\} \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_both/build.ninja &&
# ## fix executing shell scripts
# #sed -i.bak -e "s?^\(\s*COMMAND\s*=\s*\)\(\"[^\"]*\.sh\"\)?\1\"$(cygpath -m $(which sh.exe))\" \2?" build_both/build.ninja &&
# wl-showstatus build-install &&
# #PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib \
# #PATH=$PYDIR:$PATH PYTHONPATH=$MINGWPREFIX/python/Lib/site-packages${PYTHONPATH:+:$PYTHONPATH} \
# ninja -Cbuild_both install/strip &&
# #ninja -Cbuild_both install &&
#    echo OK && find . -name '*.a'

#wl-showstatus install &&
# mkdir -p $INSTALLPREFIX/python/Lib/site-packages &&
# PYTHONPATH=$INSTALLPREFIX/python/Lib/site-packages:$MINGWPREFIX/python/Lib/site-packages $PYDIR/python setup.py install --prefix=$(cygpath.exe -w $INSTALLPREFIX/python) &&
#    echo OK

#export DEPENDENCIES=qt
#wl-showstatus configure &&
# $MINGWPREFIX/qt/bin/qmake -makefile *.pro -spec $MINGWPREFIX/qt/mkspecs/win32-g++ &&
# wl-showstatus build &&
# mingw32-make &&
#    echo OK

#export DEPENDENCIES=qt
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cd build_static &&
# $MINGWPREFIX/qt/bin/qmake -makefile ../*.pro -spec $MINGWPREFIX/qt/mkspecs/win32-g++ CONFIG+=staticlib &&
# cd .. &&
# wl-showstatus configure &&
# cd build_shared &&
# $MINGWPREFIX/qt/bin/qmake -makefile ../*.pro -spec $MINGWPREFIX/qt/mkspecs/win32-g++ &&
# cd .. &&
# wl-showstatus build &&
# mingw32-make -Cbuild_static &&
# wl-showstatus build &&
# mingw32-make -Cbuild_shared &&
#    echo OK

#mkdir -p $INSTALLPREFIX/python/Lib/site-packages
##wl-showstatus build &&
## PATH=$PYDIR:$PATH PYTHON=$PYDIR/python.exe PYTHONPATH=$PWD/winfix:$MINGWPREFIX/python/Lib/site-packages:$INSTALLPREFIX/python:$INSTALLPREFIX/python/Lib/site-packages:$PYDIR/Lib/site-packages${PYTHONPATH:+:$PYTHONPATH} PYTHONDONTWRITEBYTECODE=1 $PYDIR/python.exe setup.py build --compiler=mingw32 &&
#wl-showstatus build-install &&
# PATH=$PYDIR:$PATH PYTHON=$PYDIR/python.exe PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/python/Lib/site-packages:$INSTALLPREFIX/python:$PYDIR/Lib/site-packages:$INSTALLPREFIX/python/Lib/site-packages PYTHONDONTWRITEBYTECODE=1 $PYDIR/python.exe setup.py install --prefix=$(cygpath -w $INSTALLPREFIX/python) &&
# ## delete any __pycache__ folder(s)
# #find $INSTALLPREFIX -name __pycache__ -exec echo rm -rf {} \; | sh &&
#    echo OK

#wl-showstatus build-install &&
# PYTHONPATH=$MINGWPREFIX/python/Lib/site-packages${PYTHONPATH:+:$PYTHONPATH} PYTHONDONTWRITEBYTECODE=1 $PYDIR/python.exe $MINGWPREFIX/python/Scripts/pip-script.py install . --prefix=$(cygpath -w $INSTALLPREFIX/python) &&
# ## delete any __pycache__ folder(s)
# #find $INSTALLPREFIX -name __pycache__ -exec echo rm -rf {} \; | sh &&
#    echo OK

#wl-showstatus build-install &&
# $PYDIR/python.exe -m pip install --target $INSTALLPREFIX/python/Lib/site-packages --disable-pip-version-check --no-compile . &&
#    echo OK

# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




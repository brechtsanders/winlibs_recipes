export NAME="Mapnik"
export STATUS=
export URL=https://mapnik.org/
export BASENAME=mapnik
export DESCRIPTION="Mapnik is an open source toolkit for developing mapping applications. At the core is a C++ shared library providing algorithms and patterns for spatial data access and visualization."
export CATEGORY=geo
export TYPE=library
#export VERSION=3.1.0
#export VERSIONDATE=20230923
#export VERSION=4.0.0
#export VERSIONDATE=20240617
#export VERSION=4.0.3
#export VERSIONDATE=20241030
#export VERSION=4.0.4
#export VERSIONDATE=20241204
#export VERSION=4.0.5
#export VERSIONDATE=20250131
#export VERSION=4.0.7
#export VERSIONDATE=20250405
export VERSION=4.1.0
export VERSIONDATE=20250602
wl-showstatus --package-version
export DEPENDENCIES=zlib,libjpeg,libpng,libtiff,libwebp,libxml2,cairo,proj,boost,harfbuzz,freetype2,postgresql,sqlite3,polylabel
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=COPYING
export LICENSETYPE=LGPL
export DOWNLOADURL="https://github.com/mapnik/mapnik/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/mapnik/mapnik/releases/download/v$VERSION/$BASENAME-v$VERSION.tar.bz2
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xj --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-v$VERSION.tar.bz2
cd $BASENAME-v$VERSION
# fix src/plugin.cpp (version >= 4.0.0)
patch -ulbf src/plugin.cpp << EOF
@@ -123,3 +123,3 @@
 #ifdef MAPNIK_SUPPORTS_DLOPEN
-    return static_cast<void*>(dlsym(module_->dl, sym_name.c_str()));
+    return (void*)dlsym(module_->dl, sym_name.c_str());
 #else
EOF
# fix src/svg/svg_parser.cpp (version >= 4.0.4)
patch -ulbf src/svg/svg_parser.cpp << EOF
@@ -1655,3 +1655,3 @@
 {
-#ifdef _WIN32
+#if defined(_WIN32) && !defined(__MINGW32__)
     std::basic_ifstream<char> stream(mapnik::utf8_to_utf16(filename));
EOF
# fix plugins/input/csv/csv_datasource.cpp (version >= 4.0.4)
patch -ulbf plugins/input/csv/csv_datasource.cpp << EOF
@@ -353,3 +353,3 @@
     {
-#if defined(_WIN32)
+#if defined(_WIN32) && !defined(__MINGW32__)
         std::ifstream in(mapnik::utf8_to_utf16(filename_), std::ios_base::in | std::ios_base::binary);
EOF
# fix plugins/input/ogr/ogr_datasource.cpp (version >= 4.0.4)
patch -ulbf plugins/input/ogr/ogr_datasource.cpp << EOF
@@ -309,3 +309,3 @@

-#if defined(_WIN32)
+#if defined(_WIN32) && !defined(__MINGW32__)
     std::ifstream index_file(mapnik::utf8_to_utf16(index_name_), std::ios::in | std::ios::binary);
EOF
# fix dllexport/dllimport in include/mapnik/config.hpp (version >= 4.0.4)
patch -ulbf include/mapnik/config.hpp << EOF
@@ -34,3 +34,3 @@
 #  ifndef MAPNIK_DECL
-#    ifdef MAPNIK_EXPORTS
+#    if defined(MAPNIK_EXPORTS) || defined(mapnik_EXPORTS)
         /* We are building this library */
EOF
mkdir -p build_static build_shared &&
 wl-showstatus configure &&
 PATH=$PATH:$MINGWPREFIX/qt6/bin QTDIR=$MINGWPREFIX/qt6 QMAKESPEC=$MINGWPREFIX/qt6/mkspecs/win32-g++ cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DINSTALL_DEPENDENCIES:BOOL=OFF -DBUILD_BENCHMARK:BOOL=OFF -DBUILD_DEMO_CPP:BOOL=OFF -DCATCH_BUILD_TESTING:BOOL=OFF -DBUILD_TESTING:BOOL=OFF -S. -Bbuild_static &&
 sed -i.bak -e "s?harfbuzz\$:\$:harfbuzz-NOTFOUND?$(cygpath -m $MINGWPREFIX/lib/libharfbuzz.a|sed -e "s?[:\\\\]?\$&?g")?g; s?harfbuzz::harfbuzz-NOTFOUND?-lharfbuzz?g" build_static/build.ninja &&
 #-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
 wl-showstatus configure &&
 PATH=$PATH:$MINGWPREFIX/qt6/bin QTDIR=$MINGWPREFIX/qt6 QMAKESPEC=$MINGWPREFIX/qt6/mkspecs/win32-g++ cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DINSTALL_DEPENDENCIES:BOOL=OFF -DBUILD_BENCHMARK:BOOL=OFF -DBUILD_DEMO_CPP:BOOL=OFF -DCATCH_BUILD_TESTING:BOOL=OFF -DBUILD_TESTING:BOOL=OFF -S. -Bbuild_shared &&
 sed -i.bak -e "s?harfbuzz\$:\$:harfbuzz-NOTFOUND?$(cygpath -m $MINGWPREFIX/lib/libharfbuzz.dll.a|sed -e "s?[:\\\\]?\$&?g")?g; s?harfbuzz::harfbuzz-NOTFOUND?-lharfbuzz?g" build_shared/build.ninja &&
 wl-showstatus build-install &&
 ninja -Cbuild_static install/strip &&
 wl-showstatus build-install &&
 ninja -Cbuild_shared install/strip &&
    echo OK
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-v$VERSION




export NAME="Electron"
export STATUS=
export URL=https://github.com/electron/electron
export BASENAME=electron
export DESCRIPTION="The Electron framework lets you write cross-platform desktop applications using JavaScript, HTML and CSS. It is based on Node.js and Chromium and is used by the Atom editor and many other apps."
export CATEGORY=
export TYPE=library
#export VERSION=25.0.1
#export VERSIONDATE=20230607
#export VERSION=25.1.1
#export VERSIONDATE=20230615
#export VERSION=25.2.0
#export VERSIONDATE=20230622
#export VERSION=25.3.0
#export VERSIONDATE=20230713
#export VERSION=25.3.1
#export VERSIONDATE=20230720
#export VERSION=25.3.2
#export VERSIONDATE=20230727
#export VERSION=25.4.0
#export VERSIONDATE=20230803
#export VERSION=25.5.0
#export VERSIONDATE=20230810
#export VERSION=25.6.0
#export VERSIONDATE=20230817
#export VERSION=25.7.0
#export VERSIONDATE=20230824
#export VERSION=25.8.0
#export VERSIONDATE=20230831
#export VERSION=25.8.1
#export VERSIONDATE=20230913
#export VERSION=25.8.2
#export VERSIONDATE=20230921
#export VERSION=25.8.4
#export VERSIONDATE=20230929
#export VERSION=25.8.5
#export VERSIONDATE=20231116
#export VERSION=25.9.0
#export VERSIONDATE=20231005
#export VERSION=25.9.1
#export VERSIONDATE=20231012
#export VERSION=25.9.2
#export VERSIONDATE=20231019
#export VERSION=25.9.3
#export VERSIONDATE=20231026
#export VERSION=25.9.4
#export VERSIONDATE=20231109
#export VERSION=25.9.6
#export VERSIONDATE=20231123
#export VERSION=25.9.7
#export VERSIONDATE=20231201
#export VERSION=25.9.8
#export VERSIONDATE=20231206
#export VERSION=26.0.0
#export VERSIONDATE=20230815
#export VERSION=26.1.0
#export VERSIONDATE=20230824
#export VERSION=26.2.0
#export VERSIONDATE=20230907
#export VERSION=26.2.1
#export VERSIONDATE=20230913
#export VERSION=26.2.2
#export VERSIONDATE=20230921
#export VERSION=26.2.3
#export VERSIONDATE=20230928
#export VERSION=26.2.4
#export VERSIONDATE=20230929
#export VERSION=26.3.0
#export VERSIONDATE=20231005
#export VERSION=26.4.0
#export VERSIONDATE=20231012
#export VERSION=26.4.1
#export VERSIONDATE=20231019
#export VERSION=26.4.2
#export VERSIONDATE=20231026
#export VERSION=26.4.3
#export VERSIONDATE=20231102
#export VERSION=26.5.0
#export VERSIONDATE=20231109
#export VERSION=26.6.0
#export VERSIONDATE=20231116
#export VERSION=26.6.1
#export VERSIONDATE=20231123
#export VERSION=26.6.2
#export VERSIONDATE=20231201
#export VERSION=26.6.4
#export VERSIONDATE=20240104
#export VERSION=26.6.5
#export VERSIONDATE=20240111
#export VERSION=26.6.6
#export VERSIONDATE=20240118
#export VERSION=26.6.7
#export VERSIONDATE=20240119
#export VERSION=26.6.8
#export VERSIONDATE=20240201
#export VERSION=26.6.10
#export VERSIONDATE=20240210
#export VERSION=27.0.0
#export VERSIONDATE=20231010
#export VERSION=27.0.1
#export VERSIONDATE=20231019
#export VERSION=27.0.2
#export VERSIONDATE=20231021
#export VERSION=27.0.3
#export VERSIONDATE=20231102
#export VERSION=27.0.4
#export VERSIONDATE=20231109
#export VERSION=27.1.0
#export VERSIONDATE=20231116
#export VERSION=27.1.2
#export VERSIONDATE=20231123
#export VERSION=27.1.3
#export VERSIONDATE=20231201
#export VERSION=27.2.1
#export VERSIONDATE=20240104
#export VERSION=27.2.2
#export VERSIONDATE=20240111
#export VERSION=27.2.3
#export VERSIONDATE=20240117
#export VERSION=27.2.4
#export VERSIONDATE=20240118
#export VERSION=27.3.0
#export VERSIONDATE=20240125
#export VERSION=27.3.1
#export VERSIONDATE=20240201
#export VERSION=27.3.3
#export VERSIONDATE=20240222
#export VERSION=27.3.4
#export VERSIONDATE=20240229
#export VERSION=27.3.5
#export VERSIONDATE=20240307
#export VERSION=27.3.6
#export VERSIONDATE=20240314
#export VERSION=27.3.7
#export VERSIONDATE=20240321
#export VERSION=27.3.8
#export VERSIONDATE=20240329
#export VERSION=27.3.9
#export VERSIONDATE=20240404
#export VERSION=27.3.10
#export VERSIONDATE=20240411
#export VERSION=27.3.11
#export VERSIONDATE=20240417
#export VERSION=28.0.0
#export VERSIONDATE=20231205
#export VERSION=28.1.0
#export VERSIONDATE=20231222
#export VERSION=28.1.1
#export VERSIONDATE=20240104
#export VERSION=28.1.2
#export VERSIONDATE=20240109
#export VERSION=28.1.3
#export VERSIONDATE=20240111
#export VERSION=28.1.4
#export VERSIONDATE=20240117
#export VERSION=28.2.0
#export VERSIONDATE=20240125
#export VERSION=28.2.1
#export VERSIONDATE=20240201
#export VERSION=28.2.2
#export VERSIONDATE=20240209
#export VERSION=28.2.3
#export VERSIONDATE=20240215
#export VERSION=28.2.4
#export VERSIONDATE=20240222
#export VERSION=28.2.6
#export VERSIONDATE=20240307
#export VERSION=28.2.7
#export VERSIONDATE=20240314
#export VERSION=28.2.8
#export VERSIONDATE=20240321
#export VERSION=28.2.9
#export VERSIONDATE=20240329
#export VERSION=28.2.10
#export VERSIONDATE=20240404
#export VERSION=28.3.0
#export VERSIONDATE=20240411
#export VERSION=28.3.1
#export VERSIONDATE=20240418
#export VERSION=28.3.2
#export VERSIONDATE=20240523
#export VERSION=28.3.3
#export VERSIONDATE=20240524
#export VERSION=29.0.0
#export VERSIONDATE=20240220
#export VERSION=29.0.1
#export VERSIONDATE=20240222
#export VERSION=29.1.0
#export VERSIONDATE=20240228
#export VERSION=29.1.1
#export VERSIONDATE=20240308
#export VERSION=29.1.2
#export VERSIONDATE=20240313
#export VERSION=29.1.4
#export VERSIONDATE=20240314
#export VERSION=29.1.5
#export VERSIONDATE=20240321
#export VERSION=29.1.6
#export VERSIONDATE=20240328
#export VERSION=29.2.0
#export VERSIONDATE=20240404
#export VERSION=29.3.0
#export VERSIONDATE=20240411
#export VERSION=29.3.1
#export VERSIONDATE=20240418
#export VERSION=29.3.2
#export VERSIONDATE=20240503
#export VERSION=29.3.3
#export VERSIONDATE=20240509
#export VERSION=29.4.0
#export VERSIONDATE=20240516
#export VERSION=29.4.1
#export VERSIONDATE=20240523
#export VERSION=29.4.2
#export VERSIONDATE=20240530
#export VERSION=29.4.3
#export VERSIONDATE=20240628
#export VERSION=29.4.4
#export VERSIONDATE=20240712
#export VERSION=29.4.5
#export VERSIONDATE=20240717
#export VERSION=29.4.6
#export VERSIONDATE=20240817
#export VERSION=30.0.0
#export VERSIONDATE=20240416
#export VERSION=30.0.1
#export VERSIONDATE=20240419
#export VERSION=30.0.2
#export VERSIONDATE=20240502
#export VERSION=30.0.3
#export VERSIONDATE=20240509
#export VERSION=30.0.4
#export VERSIONDATE=20240514
#export VERSION=30.0.5
#export VERSIONDATE=20240515
#export VERSION=30.0.6
#export VERSIONDATE=20240516
#export VERSION=30.0.7
#export VERSIONDATE=20240523
#export VERSION=30.0.8
#export VERSIONDATE=20240524
#export VERSION=30.0.9
#export VERSIONDATE=20240530
#export VERSION=30.1.0
#export VERSIONDATE=20240606
#export VERSION=30.1.1
#export VERSIONDATE=20240613
#export VERSION=30.1.2
#export VERSIONDATE=20240620
#export VERSION=30.2.0
#export VERSIONDATE=20240710
#export VERSION=30.3.1
#export VERSIONDATE=20240725
#export VERSION=30.4.0
#export VERSIONDATE=20240818
#export VERSION=30.5.0
#export VERSIONDATE=20240906
#export VERSION=30.5.1
#export VERSIONDATE=20240913
#export VERSION=31.0.0
#export VERSIONDATE=20240611
#export VERSION=31.0.1
#export VERSIONDATE=20240613
#export VERSION=31.0.2
#export VERSIONDATE=20240620
#export VERSION=31.1.0
#export VERSIONDATE=20240626
#export VERSION=31.2.0
#export VERSIONDATE=20240710
#export VERSION=31.2.1
#export VERSIONDATE=20240716
#export VERSION=31.3.0
#export VERSIONDATE=20240725
#export VERSION=31.3.1
#export VERSIONDATE=20240730
#export VERSION=31.4.0
#export VERSIONDATE=20240815
#export VERSION=31.5.0
#export VERSIONDATE=20240906
#export VERSION=31.6.0
#export VERSIONDATE=20240912
#export VERSION=31.7.0
#export VERSIONDATE=20241010
#export VERSION=31.7.1
#export VERSIONDATE=20241017
#export VERSION=31.7.2
#export VERSIONDATE=20241024
#export VERSION=31.7.3
#export VERSIONDATE=20241029
#export VERSION=31.7.4
#export VERSIONDATE=20241113
#export VERSION=31.7.5
#export VERSIONDATE=20241116
#export VERSION=31.7.6
#export VERSIONDATE=20241206
#export VERSION=31.7.7
#export VERSIONDATE=20250115
#export VERSION=32.0.0
#export VERSIONDATE=20240820
#export VERSION=32.0.1
#export VERSIONDATE=20240821
#export VERSION=32.0.2
#export VERSIONDATE=20240905
#export VERSION=32.1.0
#export VERSIONDATE=20240912
#export VERSION=32.1.1
#export VERSIONDATE=20240918
#export VERSION=32.1.2
#export VERSIONDATE=20240920
#export VERSION=32.2.0
#export VERSIONDATE=20241010
#export VERSION=32.2.1
#export VERSIONDATE=20241017
#export VERSION=32.2.2
#export VERSIONDATE=20241024
#export VERSION=32.2.4
#export VERSIONDATE=20241114
#export VERSION=32.2.5
#export VERSIONDATE=20241116
#export VERSION=32.2.6
#export VERSIONDATE=20241128
#export VERSION=32.2.8
#export VERSIONDATE=20250107
#export VERSION=32.3.0
#export VERSIONDATE=20250123
#export VERSION=32.3.1
#export VERSIONDATE=20250214
#export VERSION=32.3.2
#export VERSIONDATE=20250227
#export VERSION=32.3.3
#export VERSIONDATE=20250304
#export VERSION=33.0.0
#export VERSIONDATE=20241015
#export VERSION=33.0.1
#export VERSIONDATE=20241017
#export VERSION=33.0.2
#export VERSIONDATE=20241022
#export VERSION=33.1.0
#export VERSIONDATE=20241107
#export VERSION=33.2.0
#export VERSIONDATE=20241108
#export VERSION=33.2.1
#export VERSIONDATE=20241128
#export VERSION=33.3.0
#export VERSIONDATE=20241205
#export VERSION=33.3.1
#export VERSIONDATE=20250107
#export VERSION=33.3.2
#export VERSIONDATE=20250123
#export VERSION=33.4.0
#export VERSIONDATE=20250123
#export VERSION=33.4.1
#export VERSIONDATE=20250215
#export VERSION=33.4.2
#export VERSIONDATE=20250227
#export VERSION=33.4.3
#export VERSIONDATE=20250307
#export VERSION=33.4.4
#export VERSIONDATE=20250310
#export VERSION=33.4.5
#export VERSIONDATE=20250314
#export VERSION=33.4.6
#export VERSIONDATE=20250320
#export VERSION=33.4.8
#export VERSIONDATE=20250329
#export VERSION=33.4.9
#export VERSIONDATE=20250410
#export VERSION=33.4.10
#export VERSIONDATE=20250419
#export VERSION=33.4.11
#export VERSIONDATE=20250426
#export VERSION=34.0.0
#export VERSIONDATE=20250114
#export VERSION=34.0.1
#export VERSIONDATE=20250123
#export VERSION=34.0.2
#export VERSIONDATE=20250130
#export VERSION=34.1.0
#export VERSIONDATE=20250206
#export VERSION=34.1.1
#export VERSIONDATE=20250207
#export VERSION=34.2.0
#export VERSIONDATE=20250213
#export VERSION=34.3.0
#export VERSIONDATE=20250227
#export VERSION=34.3.1
#export VERSIONDATE=20250307
#export VERSION=34.3.2
#export VERSIONDATE=20250310
#export VERSION=34.3.3
#export VERSIONDATE=20250313
#export VERSION=34.3.4
#export VERSIONDATE=20250320
#export VERSION=34.4.0
#export VERSIONDATE=20250329
#export VERSION=34.5.0
#export VERSIONDATE=20250403
#export VERSION=34.5.1
#export VERSIONDATE=20250410
#export VERSION=34.5.2
#export VERSIONDATE=20250419
#export VERSION=34.5.3
#export VERSIONDATE=20250424
#export VERSION=34.5.4
#export VERSIONDATE=20250501
#export VERSION=34.5.5
#export VERSIONDATE=20250508
#export VERSION=34.5.6
#export VERSIONDATE=20250515
#export VERSION=34.5.7
#export VERSIONDATE=20250529
#export VERSION=34.5.8
#export VERSIONDATE=20250604
#export VERSION=35.0.0
#export VERSIONDATE=20250304
#export VERSION=35.0.1
#export VERSIONDATE=20250310
#export VERSION=35.0.2
#export VERSIONDATE=20250315
#export VERSION=35.0.3
#export VERSIONDATE=20250320
#export VERSION=35.1.0
#export VERSIONDATE=20250327
#export VERSION=35.1.1
#export VERSIONDATE=20250327
#export VERSION=35.1.2
#export VERSIONDATE=20250327
#export VERSION=35.1.3
#export VERSIONDATE=20250403
#export VERSION=35.1.4
#export VERSIONDATE=20250404
#export VERSION=35.1.5
#export VERSIONDATE=20250410
#export VERSION=35.2.0
#export VERSIONDATE=20250419
#export VERSION=35.2.1
#export VERSIONDATE=20250424
#export VERSION=35.2.2
#export VERSIONDATE=20250501
#export VERSION=35.3.0
#export VERSIONDATE=20250508
#export VERSION=35.4.0
#export VERSIONDATE=20250515
#export VERSION=35.5.0
#export VERSIONDATE=20250529
#export VERSION=35.5.1
#export VERSIONDATE=20250604
#export VERSION=35.6.0
#export VERSIONDATE=20250626
#export VERSION=35.7.0
#export VERSIONDATE=20250703
#export VERSION=35.7.1
#export VERSIONDATE=20250710
#export VERSION=35.7.2
#export VERSIONDATE=20250716
#export VERSION=35.7.4
#export VERSIONDATE=20250806
#export VERSION=36.0.0
#export VERSIONDATE=20250429
#export VERSION=36.0.1
#export VERSIONDATE=20250501
#export VERSION=36.2.0
#export VERSIONDATE=20250508
#export VERSION=36.2.1
#export VERSIONDATE=20250515
#export VERSION=36.3.1
#export VERSIONDATE=20250523
#export VERSION=36.3.2
#export VERSIONDATE=20250529
#export VERSION=36.4.0
#export VERSIONDATE=20250604
#export VERSION=36.5.0
#export VERSIONDATE=20250618
#export VERSION=36.6.0
#export VERSIONDATE=20250626
#export VERSION=36.6.0
#export VERSIONDATE=20250626
#export VERSION=36.7.0
#export VERSIONDATE=20250703
#export VERSION=36.7.1
#export VERSIONDATE=20250710
#export VERSION=36.7.3
#export VERSIONDATE=20250723
#export VERSION=36.7.4
#export VERSIONDATE=20250807
#export VERSION=37.0.0
#export VERSIONDATE=20250624
#export VERSION=37.1.0
#export VERSIONDATE=20250626
#export VERSION=37.2.0
#export VERSIONDATE=20250703
#export VERSION=37.2.1
#export VERSIONDATE=20250710
#export VERSION=37.2.2
#export VERSIONDATE=20250716
#export VERSION=37.2.3
#export VERSIONDATE=20250717
#export VERSION=37.2.4
#export VERSIONDATE=20250723
#export VERSION=37.2.5
#export VERSIONDATE=20250731
export VERSION=37.2.6
export VERSIONDATE=20250806
wl-showstatus --package-version
export DEPENDENCIES=
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=gn
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=MIT
export DOWNLOADURL="https://github.com/electron/electron/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/electron/electron/archive/refs/tags/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd $BASENAME-$VERSION
cat > .gn << EOF
buildconfig = "//build/BUILDCONFIG.gn"
EOF
cat > build/BUILDCONFIG.gn << EOF
set_default_toolchain("//build/toolchains:gcc")
#cflags_cc = ["-std=c++11"]
cflags_cc = ["-DUNICODE"]
EOF
mkdir -p build/toolchains
cat > build/toolchains/BUILD.gn << EOF
toolchain("gcc") {
  tool("cc") {
    depfile = "{{output}}.d"
    command = "${CC:-gcc} -MMD -MF \$depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_c}} -c {{source}} -o {{output}}"
    depsformat = "gcc"
    description = "CC {{output}}"
    outputs = [
      "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o",
    ]
  }
  tool("cxx") {
    depfile = "{{output}}.d"
    command = "${CXX:-g++} -MMD -MF \$depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_cc}} -c {{source}} -o {{output}}"
    depsformat = "gcc"
    description = "CXX {{output}}"
    outputs = [
      "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o",
    ]
  }
  tool("alink") {
    rspfile = "{{output}}.rsp"
    command = "rm -f {{output}} && ${AR:-ar} rcs {{output}} @\$rspfile"
    description = "AR {{target_output_name}}{{output_extension}}"
    rspfile_content = "{{inputs}}"
    outputs = [
      "{{target_out_dir}}/{{target_output_name}}{{output_extension}}",
    ]
    default_output_extension = ".a"
    output_prefix = "lib"
  }
  tool("solink") {
    soname = "{{target_output_name}}{{output_extension}}"
    rspfile = soname + ".rsp"
    command = "${CXX:-g++} -shared -s -mwindows -o \$soname -Wl,--out-implib,\$soname.a {{ldflags}}"
    rspfile_content = "-Wl,--whole-archive {{inputs}} {{solibs}} -Wl,--no-whole-archive {{libs}}"
    description = "SOLINK \$soname"
    default_output_extension = ".dll"
    outputs = [
      soname,
    ]
    link_output = soname
    depend_output = soname
    output_prefix = "lib"
  }
  tool("link") {
    outfile = "{{target_output_name}}{{output_extension}}"
    rspfile = "\$outfile.rsp"
    command = "${CXX:-g++} {{ldflags}} -o \$outfile -Wl,--start-group @\$rspfile {{solibs}} -Wl,--end-group {{libs}}"
    description = "LINK \$outfile"
    rspfile_content = "{{inputs}}"
    outputs = [
      outfile,
    ]
  }
  tool("stamp") {
    command = "touch {{output}}"
    description = "STAMP {{output}}"
  }
  tool("copy") {
    command = "cp -af {{source}} {{output}}"
    description = "COPY {{source}} {{output}}"
  }
}
EOF
#### See also: https://www.topcoder.com/thrive/articles/Introduction%20to%20Build%20Tools%20GN%20&%20Ninja
wl-showstatus configure &&
 PATH=$PYDIR:$PATH gn gen build_win &&
 wl-showstatus build &&
 ninja -Cbuild_win &&
    echo OK


#ELECTRON_BUILDING_WOA=1 
mkdir -p electron &&
cd electron &&
DEPOT_TOOLS_WIN_TOOLCHAIN=0 $MINGWPREFIX/share/depot_tools/gclient config --name "src/electron" --unmanaged https://github.com/electron/electron &&
DEPOT_TOOLS_WIN_TOOLCHAIN=0 $MINGWPREFIX/share/depot_tools/gclient sync --with_branch_heads --with_tags &&
    echo OK

  ./configure --help 2> /dev/null
  cat meson_options.txt 2> /dev/null
  head COPYING* LICENSE* LICENCE* COPYRIGHT*
  ls -ld COPYING* LICENSE* LICENCE* COPYRIGHT* configure* m4 CMakeLists.txt cmake Makefile GNUmakefile setup.py scons SConscript SConstruct meson.build meson_options.txt *.pro *.proj *.sln BUILD.gn .gn build 2> /dev/null

mkdir -p build_win &&
 wl-showstatus configure &&
 PATH=$PYDIR:$PATH gn gen build_win --args='target_os="win" target_cpu="'$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "x64"; else "x86"; fi)'" cc="gcc" cxx="g++" is_component_build=false is_debug=false is_official_build=true skia_enable_pdf=false skia_use_xps=false skia_use_libjpeg_turbo_decode=false skia_use_libjpeg_turbo_encode=false skia_enable_fontmgr_win=false skia_use_system_expat=true skia_use_system_harfbuzz=true skia_use_system_icu=true skia_use_system_libpng=true skia_use_system_libwebp=true skia_use_zlib=false text_tests_enabled=false extra_cflags=["-I'$(cygpath -m $MINGWPREFIX/include/harfbuzz)'"]' &&

wl-showstatus build &&
 make &&
 #make CC=${CC:-gcc} CXX=${CXX:-g++} LD=${LD:-ld} AR=${AR:-ar} &&
    echo OK

#GCCFLAG_ASNEEDED=$(echo "int main () { return 0; }"|gcc -xc - -Wl,--as-needed &>/dev/null && echo "-Wl,--as-needed")
#GCCFLAG_ASNEEDED=$(if gcc --help -v 2>/dev/null | grep -q " --as-needed"; then echo "-Wl,--as-needed"; fi)

wl-showstatus configure &&
 #wl-showstatus preconfigure &&
 #mkdir -p m4 &&
 ##libtoolize -i -c &&
 ##intltoolize -f -c &&
 #autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal &&
 #./autogen.sh &&
 #    echo OK
 ## fix building DLLs on 64-bit
 #if ( echo $RUNPLATFORM | grep -q x86_64 ); then
 # echo "AM_GNU_GETTEXT_VERSION([$(gettext --version|head -n1|sed -e "s/^.* \([0-9\.]*\) *$/\1/")])" >> configure.ac &&
 # autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal
 #fi
 ## allow building shared libraries when using clang
 #if ${CC:-gcc} --version|grep -q "^clang" && ! ${CC:-gcc} --help|grep auto-import; then
 # sed -i.bak -e "s/\$LD --help 2>&1 | \(\$GREP\|grep\) 'auto-import'/true/" configure
 # #sed -i.bak -e "s/\$LD --help 2>&1 | \(\$GREP\|grep\) 'auto-import'/true/" $(find -name configure)
 #fi &&
 ## fix confusion between MSVC and clang
 #if ${CC:-gcc} --version|grep -q "^clang"; then
 # sed -i.bak2 -e "s/\b\(cl\)\(\*\)/\1.exe\2/g; s/\(ld_shlibs\)=no/\1yes/" configure
 #fi &&
 #PATH=$PATH:$PERLDIR/../c/bin INTLTOOL_PERL="$PERLDIR/bin/perl.exe" 
 #PERL="$PERLDIR/bin/perl.exe -I$PERLDIR/lib" 
 #PYTHON=$PYDIR/python.exe 
 #PYTHON=$PYDIR/python.exe C_INCLUDE_PATH=$C_INCLUDE_PATH:$PYDIR/include 
 #PKG_CONFIG_PATH=$MINGWPREFIX/libav/lib/pkgconfig${PKG_CONFIG_PATH:+:$PKG_CONFIG_PATH} 
 #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-static --enable-shared LDFLAGS="-Wl,-no-undefined -Wl,--as-needed" &&
 ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM &&
 ## fix building DLLs
 #sed -i.bak -e "s/\(allow_undefined=\)yes/\1no/" libtool &&
 ## fix detection of shared libraries
 #sed -i.bak2 -e "s/\(deplibs_check_method=\"\)[^\"]*/\1file_magic ^x86 archive import|^x86 DLL|PE32+* executable (DLL)|pe-i386|pe-x86-64/; s/'file format pe-i386[^']*'/\"\$deplibs_check_method\"/" libtool &&
 #sed -i.bak2 -e "s/\(deplibs_check_method=\"\)[^\"]*/\1none/" libtool &&
 #sed -i.bak2 -e "s/\(deplibs_check_method=\"\)[^\"]*/\1pass_all/" libtool &&
 #wl-showstatus build &&
 #make &&
 wl-showstatus build-install &&
 make install-strip &&
 #( make install-strip || ( make install && strip $INSTALLPREFIX/bin/*.{dll,exe} )) &&
    echo OK
    ls -l $INSTALLPREFIX/lib/pkgconfig $INSTALLPREFIX/share/pkgconfig
    make install-pkgconfigDATA

#grep -wi add_library $(find -name CMakeLists.txt -or -name '*.cmake')
#mkdir -p build_test && cmake.exe -G"MSYS Makefiles" -S. -Bbuild_test -LH && echo OK; rm -rf build_test

#export BUILDDEPENDENCIES=cmake
#PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ 
#-DCMAKE_SYSTEM_NAME=Windows 
#-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
#mkdir -p build_win &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -S. -Bbuild_win &&
# #wl-showstatus build &&
# #cmake.exe --build build_win &&
# #make -Cbuild_win &&
# wl-showstatus build-install &&
# make -Cbuild_win install/strip &&
#    echo OK

#export BUILDDEPENDENCIES=cmake,ninja
#PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ 
#-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
#mkdir -p build_win &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -S. -Bbuild_win &&
# #wl-showstatus build &&
# #cmake.exe --build build_win &&
# #ninja -Cbuild_win &&
# wl-showstatus build-install &&
# #cmake.exe --install build_win --strip &&
# #cmake.exe --build build_win --target "install/strip" &&
# ninja -Cbuild_win install/strip &&
#    echo OK

#export BUILDDEPENDENCIES=cmake,ninja
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -S. -Bbuild_static &&
# #-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -S. -Bbuild_shared &&
# ## fix execution of Python scripts
# #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|glib-genmarshal\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
# ## fix missing link libraries
# #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lws2_32/" build_shared/build.ninja &&
# #wl-showstatus build &&
# #cmake.exe --build build_static &&
# #ninja -Cbuild_static &&
# #wl-showstatus build &&
# #cmake.exe --build build_shared &&
# #ninja -Cbuild_shared &&
# wl-showstatus build-install &&
# #cmake.exe --install build_static --strip &&
# #cmake.exe --build build_static --target "install/strip" &&
# #cmake.exe --build build_static --target "library/install/strip" &&
# ninja -Cbuild_static install/strip &&
# #ninja -Cbuild_static library/install/strip &&
# wl-showstatus build-install &&
# #cmake.exe --install build_shared --strip &&
# #cmake.exe --build build_shared --target "install/strip" &&
# ninja -Cbuild_shared install/strip &&
#    echo OK

#-DCMAKE_BUILD_TYPE:STRING=MinSizeRel

#export BUILDDEPENDENCIES=meson,ninja
#-Dc_args=$CFLAGS -Dcpp_args=$CXXFLAGS -Dc_link_args=$LDFLAGS
## fix missing gio-unix
#sed -i.bak -e "s/gio-unix-/gio-/" meson.build
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library static -D documentation=true . build_static &&
# wl-showstatus configure &&
# PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library shared -D documentation=true . build_shared &&
# ## fix slash/backslash path issue when calling Python from Ninja
# #sed -i.bak -e "s/join_paths/os.path.join/g; /COMMAND =.*python\.exe/ s?\"/\([a-zA-Z]\)/?\"\1:/?; /COMMAND =.*python\.exe/ s?/?\\\\?g" build_*/build.ninja &&
# ## add linker flag
# #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*-ladvapi32/& -Wl,--as-needed/" build_shared/build.ninja &&
# ## add linker flag
# #sed -i.bak -e "s/^\s*LINK_ARGS\s*=.*\"-ladvapi32\"/& \"-Wl,--as-needed\"/" build_shared/build.ninja &&
# wl-showstatus build-install &&
# #PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -C build_static install &&
# PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -C build_static install/strip &&
# wl-showstatus build-install &&
# #PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -C build_shared install &&
# PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -C build_shared install/strip &&
#    echo OK && find . -name '*.a'

#export BUILDDEPENDENCIES=meson,ninja
#-Dc_args=$CFLAGS -Dcpp_args=$CXXFLAGS -Dc_link_args=$LDFLAGS -Dcpp_link_args=$LDFLAGS
## fix location of Perl
#sed -i.bak -e "s?'perl'?'$(cygpath -w $PERLDIR/bin/perl.exe|sed -e 's/\\/&&&&/g')'?" meson.build
## fix detection of Python
#sed -i.bak -e "s?'python3'?'$(cygpath -w $PYDIR/python.exe|sed -e 's/\\/&&&&/g')'?" meson.build
## fix missing gio-unix
##sed -i.bak -e "s/gio-unix-/gio-/" meson.build
#sed -i.bak -e "s/gio-unix-/gio-windows-/" meson.build
#mkdir -p build_both &&
# wl-showstatus configure &&
# PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library both -Ddocumentation=true . build_both &&
# ## fix slash/backslash path issue when calling Python from Ninja
# #sed -i.bak -e "s/join_paths/os.path.join/g; /COMMAND =.*python\.exe/ s?\"/\([a-zA-Z]\)/?\"\1:/?; /COMMAND =.*python\.exe/ s?/?\\\\?g" build_*/build.ninja &&
# ## fix Python path issues in meson_exe
# #sed -i.bak -e "s?$PYDIR?$(echo $PYDIR|sed -e "s?^/\([a-zA-Z]\)/?\1:/?")?" build_both/meson-private/meson_exe_python.exe_*.dat &&
# ## fix execution of Python scripts
# #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *= *\| *=.*\&\& *\)\(\"\{0,1\}[^ ]*\)\(\.py\|glib-mkenums\|g-ir-scanner\|asciidoc\)\(\"\{0,1\} \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_both/build.ninja &&
# ## fix executing shell scripts
# #sed -i.bak -e "s?^\(\s*COMMAND\s*=\s*\)\(\"[^\"]*\.sh\"\)?\1\"$(cygpath -m $(which sh.exe))\" \2?" build_both/build.ninja &&
# wl-showstatus build-install &&
# PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -Cbuild_both install/strip &&
# #PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -Cbuild_both install &&
# #PATH=$PERLDIR/../c/bin:$PERLDIR/bin:$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+:$PYTHONPATH}:$MINGWPREFIX/lib ninja -Cbuild_both install &&
#    echo OK && find . -name '*.a'

#wl-showstatus install &&
# mkdir -p $INSTALLPREFIX/python/Lib/site-packages &&
# PYTHONPATH=$INSTALLPREFIX/python/Lib/site-packages:$MINGWPREFIX/python/Lib/site-packages $PYDIR/python setup.py install --prefix=$(cygpath.exe -w $INSTALLPREFIX/python) &&
#    echo OK

#export DEPENDENCIES=qt
#wl-showstatus configure &&
# $MINGWPREFIX/qt/bin/qmake -makefile *.pro -spec $MINGWPREFIX/qt/mkspecs/win32-g++ &&
# wl-showstatus build &&
# mingw32-make &&
#    echo OK

#export DEPENDENCIES=qt
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cd build_static &&
# $MINGWPREFIX/qt/bin/qmake -makefile ../*.pro -spec $MINGWPREFIX/qt/mkspecs/win32-g++ CONFIG+=staticlib &&
# cd .. &&
# wl-showstatus configure &&
# cd build_shared &&
# $MINGWPREFIX/qt/bin/qmake -makefile ../*.pro -spec $MINGWPREFIX/qt/mkspecs/win32-g++ &&
# cd .. &&
# wl-showstatus build &&
# mingw32-make -Cbuild_static &&
# wl-showstatus build &&
# mingw32-make -Cbuild_shared &&
#    echo OK

#mkdir -p $INSTALLPREFIX/python/Lib/site-packages
#wl-showstatus build-install &&
# PATH=$PYDIR:$PATH PYTHON=$PYDIR/python.exe PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/python/Lib/site-packages:$INSTALLPREFIX/python:$PYDIR/Lib/site-packages:$INSTALLPREFIX/python/Lib/site-packages PYTHONDONTWRITEBYTECODE=1 $PYDIR/python.exe setup.py install --prefix=$(cygpath -w $INSTALLPREFIX/python) &&
# ## delete any __pycache__ folder(s)
# #find $INSTALLPREFIX -name __pycache__ -exec echo rm -rf {} \; | sh &&
#    echo OK

#wl-showstatus build-install &&
# PYTHONPATH=$MINGWPREFIX/python/Lib/site-packages${PYTHONPATH:+:$PYTHONPATH} PYTHONDONTWRITEBYTECODE=1 $PYDIR/python.exe $MINGWPREFIX/python/Scripts/pip-script.py install . --prefix=$(cygpath -w $INSTALLPREFIX/python) &&
# ## delete any __pycache__ folder(s)
# #find $INSTALLPREFIX -name __pycache__ -exec echo rm -rf {} \; | sh &&
#    echo OK

# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




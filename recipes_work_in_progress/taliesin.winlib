export NAME="taliesin"
export STATUS=
export URL=https://babelouest.github.io/taliesin/
#export URL=https://github.com/babelouest/taliesin
export BASENAME=taliesin
export DESCRIPTION="Lightweight audio streaming server"
export CATEGORY=audio
export TYPE=application
#export VERSION=1.0.18
#export VERSIONDATE=20190610
export VERSION=1.0.19
export VERSIONDATE=20210112
wl-showstatus --package-version
export DEPENDENCIES=yder,hoel,ulfius
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=GPL
export DOWNLOADURL="https://github.com/babelouest/taliesin/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/babelouest/taliesin/archive/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xfz $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd $BASENAME-$VERSION
# fix missing uint
sed -i.bak -e "s/\buint\b/unsigned int/g" $(grep -lw uint src/*.[hc])
# fix missing usleep
sed -i.bak -e "s?usleep(\([^)]*\))?SleepEx(((\1) / 1000, FALSE)?" $(grep -l usleep src/*.c)
#mkdir -p build_test; cd build_test; cmake.exe -G"MSYS Makefiles" . -LH && echo OK; cd ..; rm -rf build_test
#rm -rf CMakeCache.txt CMakeFiles; cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release . -LH && echo OK
#PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ 
mkdir -p build_win &&
 wl-showstatus configure &&
 #PKG_CONFIG_PATH=$MINGWPREFIX/libav/lib/pkgconfig${PKG_CONFIG_PATH:+:$PKG_CONFIG_PATH} cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DDISABLE_OAUTH2:BOOL=OFF -DBUILD_TESTING:BOOL=OFF . &&
 cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DDISABLE_OAUTH2:BOOL=OFF -DBUILD_TESTING:BOOL=OFF -DLIBAVCODEC_INCLUDE_DIR:PATH=$MINGWPREFIX/ffmpeg4/include -DLIBAVCODEC_LIBRARY:STRING="-L$MINGWPREFIX/ffmpeg4/lib -lavcodec" -DLIBAVUTIL_INCLUDE_DIR:PATH=$MINGWPREFIX/ffmpeg4/include -DLIBAVUTIL_LIBRARY:STRING="-L$MINGWPREFIX/ffmpeg4/lib -lavutil" -DLIBAVFORMAT_INCLUDE_DIR:PATH=$MINGWPREFIX/ffmpeg4/include -DLIBAVFORMAT_LIBRARY:STRING="-L$MINGWPREFIX/ffmpeg4/lib -lavformat" -DLIBSWRESAMPLE_INCLUDE_DIR:PATH=$MINGWPREFIX/ffmpeg4/include -DLIBSWRESAMPLE_LIBRARY:STRING="-L$MINGWPREFIX/ffmpeg4/lib -lswresample" -DLIBSWSCALE_INCLUDE_DIR:PATH=$MINGWPREFIX/ffmpeg4/include -DLIBSWSCALE_LIBRARY:STRING="-L$MINGWPREFIX/ffmpeg4/lib -lswscale" -DCMAKE_C_FLAGS:STRING="-I$MINGWPREFIX/ffmpeg4/include" -S. -Bbuild_win &&
 wl-showstatus build-install &&
 ninja -Cbuild_win install/strip &&
    echo OK

#export BUILDDEPENDENCIES=cmake
#export OPTIONALBUILDDEPENDENCIES=
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cd build_static &&
# cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF .. &&
# cd .. &&
# wl-showstatus configure &&
# cd build_shared &&
# cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON .. &&
# cd .. &&
# wl-showstatus build-install &&
# make -Cbuild_static install/strip &&
# wl-showstatus build-install &&
# make -Cbuild_shared install/strip &&
#    echo OK

#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library static -D documentation=true . build_static &&
# wl-showstatus configure &&
# PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library shared -D documentation=true . build_shared &&
# wl-showstatus build-install &&
# PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib ninja -C build_static install/strip &&
# wl-showstatus build-install &&
# PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib ninja -C build_shared install/strip &&
#    echo OK && find . -name '*.a'

# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




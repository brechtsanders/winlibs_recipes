export NAME="ChakraCore"
export STATUS=
export URL=https://github.com/Microsoft/ChakraCore
export BASENAME=chakracore
export DESCRIPTION="ChakraCore is the core part of the Chakra Javascript engine that powers Microsoft Edge"
export CATEGORY=development
export TYPE=library
#export VERSION=1.8.4
#export VERSIONDATE=20180509
#export VERSION=1.8.5
#export VERSIONDATE=20180613
#export VERSION=1.10.0
#export VERSIONDATE=20180629
#export VERSION=1.10.1
#export VERSIONDATE=20180711
#export VERSION=1.10.2
#export VERSIONDATE=20180816
#export VERSION=1.11.0
#export VERSIONDATE=20180829
####This OS is not supported
#export VERSION=1.11.1
#export VERSIONDATE=20180912
#export VERSION=1.11.2
#export VERSIONDATE=20181010
#export VERSION=1.11.3
#export VERSIONDATE=20181114
#export VERSION=1.11.4
#export VERSIONDATE=20181212
#export VERSION=1.11.5
#export VERSIONDATE=20190109
#export VERSION=1.11.6
#export VERSIONDATE=20190213
#export VERSION=1.11.7
#export VERSIONDATE=20190313
#export VERSION=1.11.8
#export VERSIONDATE=20190412
#export VERSION=1.11.9
#export VERSIONDATE=20190515
#export VERSION=1.11.10
#export VERSIONDATE=20190612
#export VERSION=1.11.11
#export VERSIONDATE=20190710
#export VERSION=1.11.12
#export VERSIONDATE=20190814
#export VERSION=1.11.13
#export VERSIONDATE=20190911
#export VERSION=1.11.14
#export VERSIONDATE=20191009
#export VERSION=1.11.15
#export VERSIONDATE=20191113
#export VERSION=1.11.16
#export VERSIONDATE=20200212
#export VERSION=1.11.17
#export VERSIONDATE=20200311
#export VERSION=1.11.18
#export VERSIONDATE=20200415
#export VERSION=1.11.19
#export VERSIONDATE=20200513
#export VERSION=1.11.21
#export VERSIONDATE=20200812
#export VERSION=1.11.22
#export VERSIONDATE=20200909
#export VERSION=1.11.23
#export VERSIONDATE=20201111
export VERSION=1.11.24
export VERSIONDATE=20201209
####ERROR: Minimum required Clang version is 3.7
wl-showstatus --package-version
export DEPENDANCIES=
export OPTIONALDEPENDANCIES=
export BUILDDEPENDANCIES=cmake,ninja
export LICENSEFILE=LICENSE.txt
export LICENSETYPE=MIT
export DOWNLOADURL="https://github.com/Microsoft/ChakraCore/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/Microsoft/ChakraCore/archive/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xfz $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd ChakraCore-$VERSION
patch -ulbf build.sh << EOF
@@ -494,10 +494,2 @@

-# check clang version (min required 3.7)
-VERSION=\$(\$CLANG_PATH --version | grep "version [0-9]*\\.[0-9]*" --o -i | grep "[0-9]\\.[0-9]*" --o)
-VERSION=\${VERSION/./}
-
-if [[ \$VERSION -lt 37 ]]; then
-    echo "ERROR: Minimum required Clang version is 3.7"
-    exit 1
-fi

@@ -604,3 +596,3 @@
 echo \$EXTRA_DEFINES
-cmake \$CMAKE_GEN \$CC_PREFIX \$ICU_PATH \$LTO \$STATIC_LIBRARY \$ARCH \$TARGET_OS \\
+cmake.exe \$CMAKE_GEN \$CC_PREFIX \$ICU_PATH \$LTO \$STATIC_LIBRARY \$ARCH \$TARGET_OS \\
     \$ENABLE_CC_XPLAT_TRACE \$EXTRA_DEFINES -DCMAKE_BUILD_TYPE=\$BUILD_TYPE \$SANITIZE \$NO_JIT \$INTL_ICU \\
EOF
patch -ulbf CMakeLists.txt << EOF
@@ -167,3 +167,3 @@

-if(CC_TARGET_OS_LINUX OR CC_TARGET_OS_ANDROID)
+if(WIN32)
     if(SYSTEM_ICU OR (NOT ICU_INCLUDE_PATH AND NOT NO_ICU))
@@ -225,12 +225,2 @@
 if(CC_TARGET_OS_LINUX OR CC_TARGET_OS_ANDROID)
-    set(CLR_CMAKE_PLATFORM_LINUX 1)
-    # OSX 10.12 Clang deprecates libstdc++ [See GH #1599]
-    # So, -Werror is linux only for now
-    # + Android ARM ABI shows ld warnings
-    # xplat-todo: Do we need this ?
-    if (NOT CC_TARGET_OS_ANDROID)
-      set(CMAKE_CXX_FLAGS "\${CMAKE_CXX_FLAGS} \\
-          -Werror"
-          )
-    endif()
 elseif(CC_TARGET_OS_OSX)
@@ -255,3 +245,4 @@
 else()
-    message(FATAL_ERROR "This OS is not supported")
+    message(WARNING "This OS is not supported - setting CC_TARGET_OS_LINUX")
+    set(CC_TARGET_OS_LINUX 1)
 endif()
@@ -355,3 +346,3 @@
         -fno-omit-frame-pointer \\
-        -fdelayed-template-parsing"
+        "
         )
@@ -360,3 +351,2 @@
     add_compile_options(
-        -fasm-blocks
         -fms-extensions
EOF
sed -i.bak -e "s/cmake/&.exe/" build.sh
wl-showstatus configure &&
#PATH=$PYDIR:$PATH ./build.sh --arch=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo amd64; else echo x86; fi) --ninja --cc=$(which gcc.exe) --cxx=$(which g++.exe) --static --icu=$MINGWPREFIX/include --with-intl &&
#PATH=$PYDIR:$PATH ./build.sh --arch=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo amd64; else echo x86; fi) --ninja --cc=$(which gcc.exe) --cxx=$(which g++.exe) --static --icu=$MINGWPREFIX/include &&
PATH=$PY2DIR:$PATH ./build.sh --arch=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo amd64; else echo x86; fi) --ninja --cc=$(which clang.exe) --cxx=$(which clang++.exe) --static --system-icu &&
#-j?
    echo OK

mkdir -p build_win &&
 cmake.exe -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -D$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "CC_TARGETS_AMD64_SH"; else echo "CC_TARGETS_X86_SH"; fi):BOOL=ON -S. -Bbuild_win -LH &&
 ninja -Cbuild_win &&
 echo OK

#rm -f CMakeCache.txt; cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release . -LH && echo OK
#export BUILDDEPENDANCIES=cmake
#wl-showstatus configure &&
#cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release . &&
# wl-showstatus build-install &&
# make install/strip &&
#    echo OK

#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cd build_static &&
# cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF .. &&
# cd .. &&
# wl-showstatus configure &&
# cd build_shared &&
# cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON .. &&
# cd .. &&
# wl-showstatus build-install &&
# make -Cbuild_static install/strip &&
# wl-showstatus build-install &&
# make -Cbuild_shared install/strip &&
#    echo OK
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf ChakraCore-$VERSION




export NAME="juCi++"
export STATUS=
#export URL=https://github.com/cppit/jucipp
export URL=https://gitlab.com/cppit/jucipp
export BASENAME=jucipp
export DESCRIPTION="A lightweight & cross-platform IDE supporting the most recent C++ standards"
export CATEGORY=development,ide
export TYPE=application
#export VERSION=1.5.0
#export VERSIONDATE=20191121
#export VERSION=1.7.2
#export VERSIONDATE=20221030
export VERSION=1.8.0
export VERSIONDATE=20221030
####lib/libclangmm does not contain a CMakeLists.txt file.
wl-showstatus --package-version
export DEPENDENCIES=llvm-project,boost,tiny-process-library,aspell
export OPTIONALDEPENDENCIES=gtkmm3,gtksourceview3,libgit2,aspell,boost
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=MIT
#export DOWNLOADURL="https://github.com/cppit/jucipp/releases"
#export DOWNLOADURL="https://gitlab.com/cppit/jucipp/-/releases"
export DOWNLOADURL="https://gitlab.com/cppit/jucipp/-/tags"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://github.com/cppit/jucipp/archive/v$VERSION.tar.gz
export DOWNLOADSOURCEURL=https://gitlab.com/cppit/jucipp/-/archive/v$VERSION/jucipp-v$VERSION.tar.bz2
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xj --force-local -f $TARBALLDIR/$BASENAME/jucipp-v$VERSION.tar.bz2
cd jucipp-v$VERSION
# fix missing clangmm.hpp
sed -i.bak -e "s?clangmm\.hpp?libclangmm/clangmm.h?" $(grep -l "clangmm\.hpp" $(find -name '*.hpp' -or -name '*.cpp'))
# fix missing files
touch lib/tiny-process-library/CMakeLists.txt lib/libclangmm/CMakeLists.txt

#grep -wi add_library $(find -name CMakeLists.txt -or -name '*.cmake')
#mkdir -p build_test && cmake.exe -G"MSYS Makefiles" -DLIBCLANG_LIBRARIES:PATH=$MINGWPREFIX/share/llvm/lib -DLIBCLANG_PATH:PATH=$MINGWPREFIX/share/llvm/bin/libclang.dll -DLIBLLDB_LIBRARIES:PATH=$MINGWPREFIX/share/llvm/lib -DLIBLLDB_PATH:PATH=$MINGWPREFIX/share/llvm/lib/liblldb.dll.a -DBUILD_FUZZING:BOOL=OFF -DBUILD_TESTING:BOOL=OFF -S. -Bbuild_test -LH && echo OK; rm -rf build_test

mkdir -p build_win &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DLIBCLANG_LIBRARIES:PATH=$MINGWPREFIX/share/llvm/lib -DLIBCLANG_PATH:PATH=$MINGWPREFIX/share/llvm/lib/libclang.dll.a -DLIBLLDB_LIBRARIES:PATH=$MINGWPREFIX/share/llvm/lib -DLIBLLDB_PATH:PATH=$MINGWPREFIX/share/llvm/lib/liblldb.dll.a -DBUILD_FUZZING:BOOL=OFF -DBUILD_TESTING:BOOL=OFF -DCMAKE_CXX_FLAGS:STRING="-I$MINGWPREFIX/share/llvm/include" -S. -Bbuild_win &&
 #wl-showstatus build &&
 #cmake.exe --build build_win &&
 #ninja -Cbuild_win &&
 wl-showstatus build-install &&
 #cmake.exe --install build_win --strip &&
 #cmake.exe --build build_win --target "install/strip" &&
 ninja -Cbuild_win install/strip &&
    echo OK

#PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ 
#wl-showstatus configure &&
#cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release . &&
# wl-showstatus build-install &&
# make install/strip &&
#    echo OK

#export BUILDDEPENDENCIES=cmake
#export OPTIONALBUILDDEPENDENCIES=
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cd build_static &&
# cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF .. &&
# cd .. &&
# wl-showstatus configure &&
# cd build_shared &&
# cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON .. &&
# cd .. &&
# wl-showstatus build-install &&
# make -Cbuild_static install/strip &&
# wl-showstatus build-install &&
# make -Cbuild_shared install/strip &&
#    echo OK

#export BUILDDEPENDENCIES=meson,ninja
#export OPTIONALBUILDDEPENDENCIES=
#-Dc_args=$CFLAGS -Dcpp_args=$CXXFLAGS -Dc_link_args=$LDFLAGS
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library static -D documentation=true . build_static &&
# wl-showstatus configure &&
# PKG_CONFIG= PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib $PYDIR/python.exe $(which meson.py) --prefix $INSTALLPREFIX --backend ninja --buildtype release --strip --default-library shared -D documentation=true . build_shared &&
# wl-showstatus build-install &&
# PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib ninja -C build_static install/strip &&
# wl-showstatus build-install &&
# PATH=$PATH:$PYDIR PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$MINGWPREFIX/lib ninja -C build_shared install/strip &&
#    echo OK && find . -name '*.a'

# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf jucipp-v$VERSION




#export NAME="XAR"
#export STATUS=
#export URL=http://code.google.com/p/xar/
##export URL=https://github.com/mackyle/xar
##export URL=http://mackyle.github.io/xar/
#export BASENAME=xar
#export DESCRIPTION="The XAR project aims to provide an easily extensible archive format. Important design decisions include an easily extensible XML table of contents for random access to archived files, storing the toc at the beginning of the archive to allow for efficient handling of streamed archives, the ability to handle files of arbitrarily large sizes, the ability to choose independent encodings for individual files in the archive, the ability to store checksums for individual files in both compressed and uncompressed form, and the ability to query the table of content's rich meta-data."
#export CATEGORY=compression
#export TYPE=application
##export VERSION=1.5.2
##export VERSIONDATE=20121019
#export VERSION=1.6.1
#export VERSIONDATE=20171016
#####configure: error: can not detect the size of your system's ino_t type
#wl-showstatus --package-version
#export DEPENDANCIES=libxml2
#export OPTIONALDEPENDANCIES=
#export BUILDDEPENDANCIES=
#export LICENSEFILE=LICENSE
#export LICENSEFILE=xar/LICENSE
#export LICENSETYPE=BSD
##export DOWNLOADURL="http://code.google.com/p/xar/downloads/list"
##export DOWNLOADURL="https://code.google.com/archive/p/xar/downloads"
#export DOWNLOADURL="https://github.com/mackyle/xar/releases"
#export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
##export DOWNLOADSOURCEURL=http://xar.googlecode.com/files/$BASENAME-$VERSION.tar.gz
#export DOWNLOADSOURCEURL=https://github.com/mackyle/xar/archive/$BASENAME-$VERSION.tar.gz
#wl-showstatus download
#wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
#wl-wait4deps
#tar xfz $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
##cd $BASENAME-$VERSION
#cd xar-xar-$VERSION
#
#cd xar
#wl-showstatus configure &&
#mkdir -p m4 &&
#autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal &&
#./configure --help
#
##INTLTOOL_PERL="$PERLDIR/bin/perl.exe" 
##PERL="$PERLDIR/bin/perl.exe -I$PERLDIR/lib" 
##PYTHON=$PYDIR/python.exe 
##PYTHON=$PYDIR/python.exe C_INCLUDE_PATH=$PYDIR/include${C_INCLUDE_PATH:+:$C_INCLUDE_PATH} 
#wl-showstatus configure &&
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM LDFLAGS="-no-undefined -Wl,-no-undefined" &&
##./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM LDFLAGS="-Wl,-no-undefined" &&
#./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM CFLAGS="-Duid_t=int -Dgid_t=int" &&
# wl-showstatus build-install &&
# make install-strip &&
#    echo OK &&
#    ls -l $INSTALLPREFIX/lib/pkgconfig $INSTALLPREFIX/share/pkgconfig &&
#####configure: error: can not detect the size of your system's ino_t type
#    make install-pkgconfigDATA
## wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && rm -rf xar-xar-$VERSION



export NAME="XAR"
export STATUS=
export URL=http://code.google.com/p/xar/
#export URL=https://github.com/mackyle/xar
#export URL=http://mackyle.github.io/xar/
export BASENAME=xar
export DESCRIPTION="The XAR project aims to provide an easily extensible archive format. Important design decisions include an easily extensible XML table of contents for random access to archived files, storing the toc at the beginning of the archive to allow for efficient handling of streamed archives, the ability to handle files of arbitrarily large sizes, the ability to choose independent encodings for individual files in the archive, the ability to store checksums for individual files in both compressed and uncompressed form, and the ability to query the table of content's rich meta-data."
export CATEGORY=compression
export TYPE=application
#export VERSION=420
#export VERSIONDATE=20200831
export VERSION=452
export VERSIONDATE=20210104
wl-showstatus --package-version
export DEPENDANCIES=zlib,libxml2,pthreads
export OPTIONALDEPENDANCIES=
export BUILDDEPENDANCIES=
export LICENSEFILE=xar/LICENSE
export LICENSETYPE=BSD
#export DOWNLOADURL="https://opensource.apple.com/source/xar/"
export DOWNLOADURL="https://opensource.apple.com/tarballs/xar/"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://opensource.apple.com/tarballs/xar/$BASENAME-$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xfz $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
cd $BASENAME-$VERSION
# fix missing files
mkdir -p winfix/arpa winfix/netinet
echo "#include <winsock2.h>" > winfix/arpa/inet.h
echo "#include <winsock2.h>" > winfix/netinet/in.h
touch winfix/pwd.h
touch winfix/grp.h
# fix xar/lib/ext2.c (version >= 420)
patch -ulbf xar/lib/ext2.c << EOF
@@ -50,3 +50,5 @@
 #include <sys/types.h>
+#ifndef _WIN32
 #include <sys/ioctl.h>
+#endif
 #include "ext2.h"
EOF
# fix xar/src/xar.c (version >= 420)
patch -ulbf xar/src/xar.c << EOF
@@ -38,3 +38,5 @@
 #include <sys/stat.h>
+#ifndef _WIN32
 #include <fts.h>
+#endif
 #include <unistd.h>
EOF
# fix xar/lib/util.c (version >= 420)
patch -ulbf xar/lib/util.c << EOF
@@ -413,4 +413,6 @@
                m |= S_IFDIR;
+#ifdef S_IFLNK
        else if( strcmp(type, "symlink") == 0 )
                m |= S_IFLNK;
+#endif
        else if( strcmp(type, "fifo") == 0 )
@@ -421,4 +423,6 @@
                m |= S_IFBLK;
+#ifdef S_IFSOCK
        else if( strcmp(type, "socket") == 0 )
                m |= S_IFSOCK;
+#endif
 #ifdef S_IFWHT
EOF
# fix xar/lib/strmode.h (version >= 420)
patch -ulbf xar/lib/strmode.h << EOF
@@ -56,2 +56,3 @@
                break;
+#ifdef S_IFLNK
        case S_IFLNK:                   /* symbolic link */
@@ -59,2 +60,4 @@
                break;
+#endif
+#ifdef S_IFSOCK
        case S_IFSOCK:                  /* socket */
@@ -62,2 +65,3 @@
                break;
+#endif
 #ifdef S_IFIFO
@@ -85,2 +89,3 @@
                *p++ = '-';
+#ifndef _WIN32
        switch (mode & (S_IXUSR | S_ISUID)) {
@@ -145,2 +150,3 @@
        }
+#endif
        *p++ = ' ';             /* will be a '+' if ACL's implemented */
EOF
# fix support for newer openssl in xar/lib/hash.c (version >= 420)
patch -ulbf xar/lib/hash.c << EOF
@@ -99,3 +99,7 @@
 #else
+#if OPENSSL_VERSION_NUMBER < 0x10100000
        EVP_MD_CTX digest;
+#else
+       EVP_MD_CTX *digest;
+#endif
        const EVP_MD *type;
@@ -120,3 +124,9 @@
        HASH_CTX(hash)->type = EVP_get_digestbyname(digest_name);
+#if OPENSSL_VERSION_NUMBER < 0x10100000
        EVP_DigestInit(&HASH_CTX(hash)->digest, HASH_CTX(hash)->type);
+#else
+       if ((HASH_CTX(hash)->digest = EVP_MD_CTX_create()) == NULL)
+               return NULL;
+       EVP_DigestInit(HASH_CTX(hash)->digest, HASH_CTX(hash)->type);
+#endif
 #endif
@@ -140,3 +150,7 @@
 #else
+#if OPENSSL_VERSION_NUMBER < 0x10100000
        EVP_DigestUpdate(&HASH_CTX(hash)->digest, buffer, nbyte);
+#else
+       EVP_DigestUpdate(HASH_CTX(hash)->digest, buffer, nbyte);
+#endif
 #endif
@@ -157,3 +171,8 @@
 #else
+#if OPENSSL_VERSION_NUMBER < 0x10100000
        EVP_DigestFinal(&HASH_CTX(hash)->digest, buffer, &HASH_CTX(hash)->length);
+#else
+       EVP_DigestFinal(HASH_CTX(hash)->digest, buffer, &HASH_CTX(hash)->length);
+       EVP_MD_CTX_destroy(HASH_CTX(hash)->digest);
+#endif
 #endif
EOF
wl-showstatus configure &&
 xar/configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM CFLAGS="-Duid_t=int -Dgid_t=int -Dino_t=int -I$(pwd)/winfix" LDFLAGS="-Wl,--as-needed -lws2_32" &&
 ## fix building DLLs
 #sed -i.bak -e "s/\(allow_undefined=\)yes/\1no/" libtool &&
 wl-showstatus build &&
 make &&
 wl-showstatus build-install &&
 make install-strip &&
    echo OK
    ls -l $INSTALLPREFIX/lib/pkgconfig $INSTALLPREFIX/share/pkgconfig
    make install-pkgconfigDATA
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




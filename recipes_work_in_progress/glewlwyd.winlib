export NAME="Glewlwyd"
export STATUS=
export URL=https://babelouest.github.io/glewlwyd/
export BASENAME=glewlwyd
export DESCRIPTION="Glewlwyd Oauth 2 authentication server - Oauth 2 Server providing JSON Web Tokens for identification."
export CATEGORY=security
export TYPE=application
#export VERSION=1.0.1
#export VERSIONDATE=20170517
#export VERSION=1.1
#export VERSIONDATE=20170529
#export VERSION=1.1.1
#export VERSIONDATE=20170720
#export VERSION=1.1.2
#export VERSIONDATE=20170815
#export VERSION=1.2
#export VERSIONDATE=20170914
#export VERSION=1.2.1
#export VERSIONDATE=20170918
#export VERSION=1.2.2
#export VERSIONDATE=20170925
#export VERSION=1.2.3
#export VERSIONDATE=20171115
#export VERSION=1.2.4
#export VERSIONDATE=20171120
#export VERSION=1.3
#export VERSIONDATE=20180114
#export VERSION=1.3.1
#export VERSIONDATE=20180115
#export VERSION=1.3.2
#export VERSIONDATE=20180218
#export VERSION=1.3.3
#export VERSIONDATE=20180310
#export VERSION=1.4.0
#export VERSIONDATE=20180408
#export VERSION=1.4.1
#export VERSIONDATE=20180413
#export VERSION=1.4.2
#export VERSIONDATE=20180420
#export VERSION=1.4.3
#export VERSIONDATE=20180427
#export VERSION=1.4.4
#export VERSIONDATE=20180521
#export VERSION=1.4.6
#export VERSIONDATE=20180630
#export VERSION=1.4.7
#export VERSIONDATE=20181018
#export VERSION=1.4.8
#export VERSIONDATE=20181028
export VERSION=1.4.9
export VERSIONDATE=20181215
#export VERSION=2.0.0
#export VERSIONDATE=20191102
####src/glewlwyd.exe: error while loading shared libraries: libwinpthread-1.dll: cannot open shared object file: No such file or directory
#export VERSION=2.1.0
#export VERSIONDATE=20200203
#export VERSION=2.1.1
#export VERSIONDATE=20200205
#export VERSION=2.2.0
#export VERSIONDATE=20200328
#export VERSION=2.3.0
#export VERSIONDATE=20200607
#export VERSION=2.3.1
#export VERSIONDATE=20200626
#export VERSION=2.3.2
#export VERSIONDATE=20200722
#export VERSION=2.3.3
#export VERSIONDATE=20200828
#export VERSION=2.4.0
#export VERSIONDATE=20200926
#export VERSION=2.5.0
#export VERSIONDATE=20210112
#export VERSION=2.5.1
#export VERSIONDATE=20210117
#export VERSION=2.5.2
#export VERSIONDATE=20210119
#export VERSION=2.5.3
#export VERSIONDATE=20210411
#export VERSION=2.5.4
#export VERSIONDATE=20210910
#export VERSION=2.6.0
#export VERSIONDATE=20211123
#export VERSION=2.6.1
#export VERSIONDATE=20211216
####Could NOT find Systemd (missing: SYSTEMD_LIBRARY SYSTEMD_INCLUDE_DIR)
#export VERSION=2.6.2
#export VERSIONDATE=20220318
#export VERSION=2.7.0
#export VERSIONDATE=20220430
#export VERSION=2.7.1
#export VERSIONDATE=20220605
#export VERSION=2.7.2
#export VERSIONDATE=20220707
#export VERSION=2.7.3
#export VERSIONDATE=20220824
#export VERSION=2.7.4
#export VERSIONDATE=20221016
#export VERSION=2.7.5
#export VERSIONDATE=20230105
#export VERSION=2.7.6
#export VERSIONDATE=20231116
wl-showstatus --package-version
export DEPENDENCIES=ulfius,hoel,libjwt,libuuid,rhonabwy
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
#export LICENSEFILE=COPYING
#export LICENSETYPE=
export LICENSEFILE=LICENSE
export LICENSETYPE=GPL
export DOWNLOADURL="https://github.com/babelouest/glewlwyd/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://github.com/babelouest/glewlwyd/archive/$VERSION.tar.gz
export DOWNLOADSOURCEURL=https://github.com/babelouest/glewlwyd/archive/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
#tar xz --force-local -f $TARBALLDIR/$BASENAME/$VERSION.tar.gz
tar xz --force-local -f $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd $BASENAME-$VERSION
# fix missing files
mkdir -p winfix/sys winfix/netinet winfix/arpa
echo "#include <winsock2.h>" > winfix/sys/socket.h
touch winfix/netinet/in.h winfix/arpa/inet.h
# fix missing SIGHUP/SIGQUIT in src/glewlwyd.c
patch -ulbf src/glewlwyd.c << EOF
@@ -106,6 +106,11 @@
   // Catch end signals to make a clean exit
-  if (signal (SIGQUIT, exit_handler) == SIG_ERR ||
+  if (
+#ifdef SIGHUP
+      signal (SIGHUP, exit_handler) == SIG_ERR ||
+#endif
+#ifdef SIGQUIT
+      signal (SIGQUIT, exit_handler) == SIG_ERR ||
+#endif
       signal (SIGINT, exit_handler) == SIG_ERR ||
-      signal (SIGTERM, exit_handler) == SIG_ERR ||
-      signal (SIGHUP, exit_handler) == SIG_ERR) {
+      signal (SIGTERM, exit_handler) == SIG_ERR) {
     fprintf(stderr, "init - Error initializing end signal\n");
EOF
# fix missing access/F_OK in src/webservice.c
mv src/webservice.c src/webservice.c.bak &&
echo "#include <io.h>" > src/webservice.c &&
cat src/webservice.c.bak >> src/webservice.c
# fix missing uuid_generate_random/uuid_unparse/uuid_unparse_lower in src/token.c
patch -ulbf src/token.c << EOF
@@ -28,3 +28,11 @@

+#ifdef _WIN32
+#include <winsock2.h>
+#include <windows.h>
+#define uuid_generate_random(uuid) UuidCreate(&uuid)
+#define uuid_unparse(uuid,uuid_string) { UCHAR* buf = NULL; UuidToStringA(&uuid, &buf); strcpy(uuid_string, (char*)buf); RpcStringFreeA(&buf); }
+#define uuid_unparse_lower(uuid,uuid_string) { UCHAR* buf = NULL; UuidToStringA(&uuid, &buf); int i = 0; do { uuid_string[i] = tolower(buf[i]); } while (buf[i++]); RpcStringFreeA(&buf); }
+#else
 #include <uuid/uuid.h>
+#endif
 #include <string.h>
EOF
## fix missing crypt_r in src/password.c
#mv src/glewlwyd.h src/glewlwyd.h.bak &&
#echo "#define _GNU_SOURCE" > src/glewlwyd.h &&
#echo "#include <crypt.h>" >> src/glewlwyd.h &&
#cat src/glewlwyd.h.bak >> src/glewlwyd.h
# fix missing uint in src/password.c (version >= 1.3)
mv src/glewlwyd.h src/glewlwyd.h.bak &&
echo "typedef unsigned int uint;" > src/glewlwyd.h &&
cat src/glewlwyd.h.bak >> src/glewlwyd.h
## fix src/Makefile (version <= 2.4.0)
#sed -i.orig "s/\(LIBS *=.*\)-lc \(.*\)$/\1\2 -lrpcrt4 -llber -lws2_32 -lcrypt/" src/Makefile
# fix src/Makefile (version >= 2.5.0)
sed -i.bak "s/^LIBS\s*=.*$/& -Wl,--as-needed -lrpcrt4 -llber -lws2_32 -lcrypt/" src/Makefile
wl-showstatus build &&
 make -Csrc -j1 ADDITIONALFLAGS="-I$(pwd)/winfix" &&
    echo "Trying to run src/glewlwyd.exe" && src/glewlwyd.exe --version &&
    echo OK
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION



#export DEPENDENCIES=orcania,yder,ulfius,hoel,libjwt,libcbor,libjansson,gnutls,libnettle,iddawc,libdl
#export OPTIONALDEPENDENCIES=
#export BUILDDEPENDENCIES=cmake
#export OPTIONALBUILDDEPENDENCIES=
# fix missing files
mkdir -p winfix/sys winfix/netinet winfix/arpa
echo "#include <winsock2.h>" > winfix/sys/socket.h
touch winfix/netinet/in.h winfix/arpa/inet.h winfix/netdb.h
# fix missing uint
sed -i.bak -e "s/\buint\b/unsigned int/g" src/glewlwyd.c src/plugin/protocol_oauth2.c src/plugin/protocol_oidc.c
# fix missing access() in src/static_file_callback.c
patch -ulbf src/static_file_callback.c << EOF
@@ -104,4 +104,3 @@

-    if (access(file_path, F_OK) != -1) {
-      f = fopen (file_path, "rb");
+    if ((f = fopen (file_path, "rb")) != NULL) {
       if (f) {
EOF
# fix src/glewlwyd.c
patch -ulbf src/glewlwyd.c << EOF
@@ -172,7 +172,14 @@
   // Catch end signals to make a clean exit
-  if (signal (SIGQUIT, exit_handler) == SIG_ERR ||
+  if (
+#ifdef SIGQUIT
+      signal (SIGQUIT, exit_handler) == SIG_ERR ||
+#endif
       signal (SIGINT, exit_handler) == SIG_ERR ||
       signal (SIGTERM, exit_handler) == SIG_ERR ||
+#ifdef SIGHUP
       signal (SIGHUP, exit_handler) == SIG_ERR ||
+#endif
+#ifdef SIGBUS
       signal (SIGBUS, exit_handler) == SIG_ERR ||
+#endif
       signal (SIGSEGV, exit_handler) == SIG_ERR ||
@@ -1451,4 +1458,13 @@
 void exit_handler(int signal) {
-  if (signal == SIGQUIT || signal == SIGINT || signal == SIGTERM || signal == SIGHUP) {
+  if (
+#ifdef SIGQUIT
+      signal == SIGQUIT ||
+#endif
+      signal == SIGINT || signal == SIGTERM
+#ifdef SIGHUP
+      || signal == SIGHUP
+#endif
+  ) {
     y_log_message(Y_LOG_LEVEL_INFO, "Glewlwyd - Received close signal");
+#ifdef SIGBUS
   } else if (signal == SIGBUS) {
@@ -1456,2 +1472,3 @@
     exit(1);
+#endif
   } else if (signal == SIGSEGV) {
EOF
# fix missing crypt() in src/misc.c (version >= 2.3.1)
mv src/misc.c src/misc.c.bak &&
echo "#include <crypt.h>" > src/misc.c &&
cat src/misc.c.bak >> src/misc.c
# fix missing ushort in src/scheme/certificate.c (version >= 2.3.1)
sed -i.bak -e "s/ushort/unsigned short/g" src/scheme/certificate.c
# fix missing inet_pton in src/plugin/protocol_oidc.c (version >= 2.3.1)
mv src/plugin/protocol_oidc.c src/plugin/protocol_oidc.c.bak2
cat > src/plugin/protocol_oidc.c << EOF
#if !defined(_WIN32_WINNT) || _WIN32_WINNT < 0x0600
#undef _WIN32_WINNT
#define _WIN32_WINNT 0x0600
#endif
#include <ws2tcpip.h>
EOF
cat src/plugin/protocol_oidc.c.bak2 >> src/plugin/protocol_oidc.c
# fix missing gmtime_r in src/plugin/register.c (version >= 2.5.4)
mv src/plugin/register.c src/plugin/register.c.bak &&
echo "#define _POSIX_THREAD_SAFE_FUNCTIONS" > src/plugin/register.c &&
cat src/plugin/register.c.bak >> src/plugin/register.c
# fix detection of hoel in cmake-modules/FindHoel.cmake (version >= 2.5.4)
patch -ulbf cmake-modules/FindHoel.cmake << EOF
@@ -35,2 +35,5 @@

+if (PC_HOEL_FOUND)
+set(HOEL_FOUND TRUE)
+else()
 find_path(HOEL_INCLUDE_DIR
@@ -42,2 +45,3 @@
         HINTS \${PC_HOEL_LIBDIR} \${PC_HOEL_LIBRARY_DIRS})
+endif()

@@ -61,2 +65,3 @@

+if(NOT HOEL_FOUND)
 include(FindPackageHandleStandardArgs)
@@ -65,2 +70,3 @@
         VERSION_VAR HOEL_VERSION_STRING)
+endif()

EOF
# fix detection of iddawc in cmake-modules/FindIddawc.cmake (version >= 2.6.1)
patch -ulbf cmake-modules/FindIddawc.cmake << EOF
@@ -66,2 +66,3 @@

+set(IDDAWC_FOUND true)
 if (IDDAWC_FOUND)
EOF
# remove compiler flags: -Wall -Werror
sed -i.bak -e "s/-Wall -Werror//" CMakeLists.txt
#mkdir -p build_win &&
# wl-showstatus configure &&
# #cmake.exe -Wno-dev -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DDOWNLOAD_DEPENDENCIES:BOOL=OFF -DLIBOATH_INCLUDE_DIR:PATH=$MINGWPREFIX/include -DLIBOATH_LIBRARY:STRING=-loauth -DUUID_INCLUDE_DIR:PATH=$MINGWPREFIX/include/portable-uuid -DUUID_LIBRARY:STRING=-lportable-uuid -DCMAKE_C_FLAGS:STRING="-I$(pwd)/winfix -Wno-error=format= -Wno-error=format-extra-args" -S. -Bbuild_win &&
# cmake.exe -Wno-dev -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DDOWNLOAD_DEPENDENCIES:BOOL=OFF -DLIBOATH_INCLUDE_DIR:PATH=$MINGWPREFIX/include -DLIBOATH_LIBRARY:STRING=-loauth -DUUID_INCLUDE_DIR:PATH=$MINGWPREFIX/include/portable-uuid -DUUID_LIBRARY:STRING=-lportable-uuid -DPC_RHONABWY_INCLUDEDIR:PATH=$MINGWPREFIX/include -DPC_RHONABWY_LIBDIR:PATH=$MINGWPREFIX/lib -DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) -DCMAKE_C_FLAGS:STRING="-I$(pwd)/winfix -I$MINGWPREFIX/include/libdl-win32 -Wno-error=format= -Wno-error=format-extra-args" -S. -Bbuild_win &&
# #echo "-Wl,--as-needed -lorcania -lhoel -lulfius -lyder -ljansson -lgnutls -lnettle -lws2_32" >> build_win/CMakeFiles/clientmoddatabase.dir/linklibs.rsp &&
# #echo "-Wl,--as-needed -lorcania -lulfius -lyder -ljansson -lgnutls -lnettle -lws2_32" >> build_win/CMakeFiles/usermodldap.dir/linklibs.rsp &&
# #echo "-Wl,--as-needed -lws2_32" >> build_win/CMakeFiles/protocol_oidc.dir/linklibs.rsp &&
# #echo "-Wl,--as-needed -lws2_32" >> build_win/CMakeFiles/clientmodldap.dir/linklibs.rsp &&
# #for F in $(find build_win -name "linklibs.rsp"); do
# # echo "-Wl,--as-needed -lorcania -lhoel -lulfius -lyder -ljansson -lgnutls -lnettle -lws2_32" >> $F
# #done &&
# wl-showstatus build-install &&
# make -Cbuild_win install/strip &&
#    echo OK
# fix cmake-modules/FindUlfius.cmake (version >= 2.7.4)
patch -ulbf cmake-modules/FindUlfius.cmake << EOF
@@ -66,2 +66,5 @@

+if (NOT ULFIUS_FOUND AND NOT "\${ULFIUS_INCLUDE_DIR}" EQUAL "" AND NOT "\${ULFIUS_LIBRARY}" EQUAL "")
+    set(ULFIUS_FOUND TRUE)
+endif ()
 if (ULFIUS_FOUND)
EOF
mkdir -p build_win &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DDOWNLOAD_DEPENDENCIES:BOOL=OFF -DLIBOATH_INCLUDE_DIR:PATH=$MINGWPREFIX/include -DLIBOATH_LIBRARY:STRING=-loauth -DUUID_INCLUDE_DIR:PATH=$MINGWPREFIX/include/portable-uuid -DUUID_LIBRARY:STRING=-lportable-uuid -DPC_RHONABWY_INCLUDEDIR:PATH=$MINGWPREFIX/include -DPC_RHONABWY_LIBDIR:PATH=$MINGWPREFIX/lib -DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) -DCMAKE_C_FLAGS:STRING="-D_POSIX -I$(cygpath -m $PWD/winfix) -I$(cygpath -m $MINGWPREFIX/include/libdl-win32) -Wno-error=format= -Wno-error=format-extra-args" -S. -Bbuild_win &&
 #echo "-Wl,--as-needed -lorcania -lhoel -lulfius -lyder -ljansson -lgnutls -lnettle -lws2_32" >> build_win/CMakeFiles/clientmoddatabase.dir/linklibs.rsp &&
 #echo "-Wl,--as-needed -lorcania -lulfius -lyder -ljansson -lgnutls -lnettle -lws2_32" >> build_win/CMakeFiles/usermodldap.dir/linklibs.rsp &&
 #echo "-Wl,--as-needed -lws2_32" >> build_win/CMakeFiles/protocol_oidc.dir/linklibs.rsp &&
 #echo "-Wl,--as-needed -lws2_32" >> build_win/CMakeFiles/clientmodldap.dir/linklibs.rsp &&
 #for F in $(find build_win -name "linklibs.rsp"); do
 # echo "-Wl,--as-needed -lorcania -lhoel -lulfius -lyder -ljansson -lgnutls -lnettle -lws2_32" >> $F
 #done &&
 wl-showstatus build-install &&
 ninja -Cbuild_win install/strip &&
    echo OK
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




export NAME="wxdap"
export STATUS=
export URL=https://github.com/eranif/wxdap
export BASENAME=wxdap
export DESCRIPTION="wxWidgets library for implementing DAP (Debug Adapter Protocol) clients"
export CATEGORY=development
export TYPE=library
export VERSION=master
export VERSIONDATE=20240825
wl-showstatus --package-version
export DEPENDENCIES=
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=
export DOWNLOADURL="https://github.com/eranif/wxdap/tags"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/eranif/wxdap/archive/refs/heads/$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/$VERSION.tar.gz
cd $BASENAME-$VERSION
# fix dap/JSON.hpp
patch -ulbf dap/JSON.hpp << EOF
@@ -133,3 +133,3 @@
      */
-    Json AddObject(const wxString& name, const Json& obj) { return AddObject(name.mb_str(wxConvUTF8).data(), obj); }
+    Json AddObject(const wxString& name, const Json& obj) { return AddObject(std::string(name.mb_str(wxConvUTF8)).data(), obj); }
     Json AddObject(const char* name, const Json& obj);
@@ -167,14 +167,14 @@
     // Add properties to container (can be object or array)
-    Json Add(const wxString& name, const wxString& value) { return Add(name.mb_str(wxConvUTF8).data(), value); }
+    Json Add(const wxString& name, const wxString& value) { return Add(std::string(name.mb_str(wxConvUTF8)).data(), value); }
     Json Add(const wxString& name, const std::vector<wxString>& value)
     {
-        return Add(name.mb_str(wxConvUTF8).data(), value);
+        return Add(std::string(name.mb_str(wxConvUTF8)).data(), value);
     }
-    Json Add(const wxString& name, const Json& value) { return Add(name.mb_str(wxConvUTF8).data(), value); }
-    Json Add(const wxString& name, const char* value) { return Add(name.mb_str(wxConvUTF8).data(), value); }
-    Json Add(const wxString& name, double value) { return Add(name.mb_str(wxConvUTF8).data(), value); }
-    Json Add(const wxString& name, int value) { return Add(name.mb_str(wxConvUTF8).data(),
(double)value); }
-    Json Add(const wxString& name, long value) { return Add(name.mb_str(wxConvUTF8).data(), (double)value); }
-    Json Add(const wxString& name, size_t value) { return Add(name.mb_str(wxConvUTF8).data(), (double)value); }
-    Json Add(const wxString& name, bool value) { return Add(name.mb_str(wxConvUTF8).data(), value); }
+    Json Add(const wxString& name, const Json& value) { return Add(std::string(name.mb_str(wxConvUTF8)).data(), value); }
+    Json Add(const wxString& name, const char* value) { return Add(std::string(name.mb_str(wxConvUTF8)).data(), value); }
+    Json Add(const wxString& name, double value) { return Add(std::string(name.mb_str(wxConvUTF8)).data(), value); }
+    Json Add(const wxString& name, int value) { return Add(std::string(name.mb_str(wxConvUTF8)).data(), (double)value); }
+    Json Add(const wxString& name, long value) { return Add(std::string(name.mb_str(wxConvUTF8)).data(), (double)value); }
+    Json Add(const wxString& name, size_t value) { return Add(std::string(name.mb_str(wxConvUTF8)).data(), (double)value); }
+    Json Add(const wxString& name, bool value) { return Add(std::string(name.mb_str(wxConvUTF8)).data(), value); }

EOF
# fix dap/JSON.cpp
patch -ulbf dap/JSON.cpp << EOF
@@ -164,3 +164,3 @@

-Json Json::Add(const char* name, const wxString& value) { return Add(name, value.mb_str(wxConvUTF8).data()); }
+Json Json::Add(const char* name, const wxString& value) { return Add(name, std::string(value.mb_str(wxConvUTF8)).data()); }

EOF
# fix dap/msw.cpp
patch -ulbf dap/msw.cpp << EOF
@@ -151,3 +151,3 @@
     // Execute the child process
-    STARTUPINFO startup_info;
+    STARTUPINFOW startup_info;
     ZeroMemory(&process_info, sizeof(PROCESS_INFORMATION));
@@ -160,3 +160,3 @@
     startup_info.dwFlags |= STARTF_USESTDHANDLES;
-    BOOL ret = CreateProcess(NULL,
+    BOOL ret = CreateProcessW(NULL,
                              cmd.wchar_str(),     // shell line execution command
EOF
## fix undefined wxStyledTextCtrl
#sed -i.bak -e "1i #undef wxUSE_STC\n#define wxUSE_STC 1" $(grep -l wxStyledTextCtrl $(find -name '*.hpp'))
# create dummy wx-config which supports --version and uses UNIX-style paths
cat > wx-config.sh << EOF
#!/bin/sh
if echo " \$* "|grep -q " --version "; then
 shift
 wx-config.exe --release \$* | grep -v "wx-config Error:" | sed -e "s/^\\([0-9]*\\.[0-9]*\\)\$/\\1.0/"
else
 #wx-config.exe --static=no --unicode=yes --debug=no --universal=no --compiler=gcc \$* | grep -v "wx-config Error:" | sed -e "s?\\([A-Z]\\):\\\\\\\\?\\1:/?g; s?\\\\\\\\?/?g; s/\(-lwxmsw[0-9]*[ud]*_\)std\(.*-lwx[^ ]*\)/\2 \1core -Wl,--as-needed -lshlwapi/g"
 #wx-config.exe --prefix=$MINGWPREFIX/wx --wxcfg=gcc_dll/mswu --static=no --unicode=yes --debug=no --universal=no --compiler=gcc \$* | grep -v "wx-config Error:" | sed -e "s?\\([A-Z]\\):\\\\\\\\?\\1:/?g; s?\\\\\\\\?/?g; s/\(-lwxmsw[0-9]*[ud]*_\)std\(.*-lwx[^ ]*\)/\2 \1core -Wl,--as-needed -lshlwapi/g"
 #wx-config.exe --prefix=$MINGWPREFIX/wx --wxcfg=gcc_dll/mswu \$* | grep -v "wx-config Error:" | sed -e "s?\\([A-Z]\\):\\\\\\\\?\\1:/?g; s?\\\\\\\\?/?g; s/\(-lwxmsw[0-9]*[ud]*_\)std\(.*-lwx[^ ]*\)/\2 \1core -Wl,--as-needed -lshlwapi/g"
 wx-config.exe --prefix=$MINGWPREFIX/wx --wxcfg=$(if ${CC:-gcc} --version|grep -q "^clang"; then echo -n clang; else echo -n gcc; fi)_dll/mswu \$* | grep -v "wx-config Error:" | sed -e "s?\\([A-Z]\\):\\\\\\\\?\\1:/?g; s?\\\\\\\\?/?g; s/\(-lwxmsw[0-9]*[ud]*_\)std\(.*-lwx[^ ]*\)/\2 \1core -Wl,--as-needed -lshlwapi/g"
 #wx-config.exe --prefix=$MINGWPREFIX/wx --wxcfg=gcc_lib/mswu \$* | grep -v "wx-config Error:" | sed -e "s?\\([A-Z]\\):\\\\\\\\?\\1:/?g; s?\\\\\\\\?/?g; s/\(-lwxmsw[0-9]*[ud]*_\)std\(.*-lwx[^ ]*\)/\2 \1core -Wl,--as-needed -lshlwapi/g"
fi
EOF
# also allow building static library
sed -i.bak -e "s/\(add_library([^ ]*\) SHARED/\1/" dap/CMakeLists.txt
mkdir -p build_static build_shared &&
 wl-showstatus configure-static &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DwxWidgets_USE_STATIC:BOOL=ON -DwxWidgets_CONFIG_EXECUTABLE:FILEPATH=$PWD/wx-config.sh -DwxWidgets_INCLUDE_DIRS:PATH=$MINGWPREFIX/wx/include -DwxWidgets_LIBRARIES:STRING="$(wx-config.exe --prefix=$MINGWPREFIX/wx --libs|sed -e "s/^\s*//")" -DBUILD_TESTING:BOOL=OFF -S. -Bbuild_static &&
 #-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
 wl-showstatus configure-shared &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DwxWidgets_USE_STATIC:BOOL=OFF -DwxWidgets_CONFIG_EXECUTABLE:FILEPATH=$PWD/wx-config.sh -DwxWidgets_INCLUDE_DIRS:PATH=$MINGWPREFIX/wx/include -DwxWidgets_LIBRARIES:STRING="$(wx-config.exe --prefix=$MINGWPREFIX/wx --libs|sed -e "s/^\s*//")" -DBUILD_TESTING:BOOL=OFF -S. -Bbuild_shared &&
 ## fix execution of Python scripts
 #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|glib-genmarshal\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
 ## fix missing link libraries
 #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lws2_32/" build_shared/build.ninja &&
 wl-showstatus build-static &&
 ninja -Cbuild_static &&
 wl-showstatus build-shared &&
 ninja -Cbuild_shared &&
 wl-showstatus build-install-static &&
 ninja -Cbuild_static install/strip &&
 wl-showstatus build-install-shared &&
 ninja -Cbuild_shared install/strip &&
    echo OK
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




export NAME="ANGLE - Almost Native Graphics Layer Engine"
export STATUS=
export URL=http://angleproject.org/
export BASENAME=angle
export DESCRIPTION="A conformant OpenGL ES implementation for Windows, Mac and Linux."
export CATEGORY=graphics,hardware
export TYPE=library
#export VERSION=master
#export VERSIONDATE=20180926
#export VERSION=36
#export VERSIONDATE=20190912
#export VERSION=3911
#export VERSIONDATE=20190913
#export VERSION=3912
#export VERSIONDATE=20190914
#export VERSION=3916
#export VERSIONDATE=20190918
#export VERSION=3917
#export VERSIONDATE=20190919
#export VERSION=3918
#export VERSIONDATE=20190920
#export VERSION=3919
#export VERSIONDATE=20190922
#export VERSION=3920
#export VERSIONDATE=20190923
#export VERSION=3921
#export VERSIONDATE=20190923
#export VERSION=3922
#export VERSIONDATE=20190924
#export VERSION=3923
#export VERSIONDATE=20190925
#export VERSION=3924
#export VERSIONDATE=20190927
#export VERSION=3926
#export VERSIONDATE=20190928
#export VERSION=3927
#export VERSIONDATE=20190929
#export VERSION=3928
#export VERSIONDATE=20190930
#export VERSION=3929
#export VERSIONDATE=20191001
#export VERSION=3930
#export VERSIONDATE=20191002
#export VERSION=3931
#export VERSIONDATE=20191003
#export VERSION=3933
#export VERSIONDATE=20191005
#export VERSION=3934
#export VERSIONDATE=20191007
#export VERSION=3936
#export VERSIONDATE=20191008
#export VERSION=3937
#export VERSIONDATE=20191009
#export VERSION=3938
#export VERSIONDATE=20191010
#export VERSION=3939
#export VERSIONDATE=20191011
#export VERSION=3940
#export VERSIONDATE=20191012
#export VERSION=3941
#export VERSIONDATE=20191013
#export VERSION=3949
#export VERSIONDATE=20191024
#export VERSION=4002
#export VERSIONDATE=20191220
#export VERSION=4041
#export VERSIONDATE=20200128
#export VERSION=4047
#export VERSIONDATE=20200203
#export VERSION=4095
#export VERSIONDATE=20200325
#export VERSION=4097
#export VERSIONDATE=20200327
#export VERSION=4107
#export VERSIONDATE=20200407
#export VERSION=4164
#export VERSIONDATE=20200604
#export VERSION=4265
#export VERSIONDATE=20200916
#export VERSION=4316
#export VERSIONDATE=20201105
#export VERSION=4320
#export VERSIONDATE=20201109
#export VERSION=4341
#export VERSIONDATE=20201130
#export VERSION=4368
#export VERSIONDATE=20201226
####pkg_resources.DistributionNotFound: The 'gyp==0.1' distribution was not found and is required by the application
#export VERSION=4382
#export VERSIONDATE=20210108
#export VERSION=4383
#export VERSIONDATE=20210109
#export VERSION=4395
#export VERSIONDATE=20210121
#export VERSION=4403
#export VERSIONDATE=20210129
#export VERSION=4499
#export VERSIONDATE=20210506
#export VERSION=4569
#export VERSIONDATE=20210708
#export VERSION=4624
#export VERSIONDATE=20210827
#export VERSION=4630
#export VERSIONDATE=20210902
#export VERSION=4662
#export VERSIONDATE=20211006
#export VERSION=4663
#export VERSIONDATE=20211007
#export VERSION=4664
#export VERSIONDATE=20211008
#export VERSION=4665
#export VERSIONDATE=20211009
#export VERSION=4666
#export VERSIONDATE=20211011
#export VERSION=4892
#export VERSIONDATE=20220216
#export VERSION=4951
#export VERSIONDATE=20220318
#export VERSION=5008
#export VERSIONDATE=20220417
#export VERSION=5304
#export VERSIONDATE=20220916
#export VERSION=5380
#export VERSIONDATE=20221025
#export VERSION=5398
#export VERSIONDATE=20221103
#export VERSION=5514
#export VERSIONDATE=20230102
#export VERSION=5516
#export VERSIONDATE=20230103
#export VERSION=5581
#export VERSIONDATE=20230207
export VERSION=5635
export VERSIONDATE=20230306
#export VERSION=main
#export VERSIONDATE=20220216
wl-showstatus --package-version
export DEPENDENCIES=libdl,astc-encoder
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=gn
export OPTIONALBUILDDEPENDENCIES=
#export BUILDDEPENDENCIES=gyp
#export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=
#export DOWNLOADURL="https://github.com/google/angle/releases"
#export DOWNLOADURL="https://chromium.googlesource.com/angle/angle chrome_m"
export DOWNLOADURL="https://chromium.googlesource.com/angle/angle/+refs"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://github.com/google/angle/archive/$VERSION.tar.gz
#export DOWNLOADSOURCEURL=https://chromium.googlesource.com/angle/angle/+archive/refs/heads/chrome_m$VERSION.tar.gz
export DOWNLOADSOURCEURL=https://chromium.googlesource.com/angle/angle/+archive/refs/heads/chromium/$VERSION.tar.gz
#export DOWNLOADSOURCEURL=https://chromium.googlesource.com/angle/angle/+archive/refs/heads/$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
mkdir -p $BASENAME-$VERSION
#tar xz --force-local -f $TARBALLDIR/$BASENAME/chrome_m$VERSION.tar.gz -C$BASENAME-$VERSION
tar xz --force-local -f $TARBALLDIR/$BASENAME/$VERSION.tar.gz -C$BASENAME-$VERSION
cd $BASENAME-$VERSION

PYTHONPATH=$(echo $(cygpath -m $MINGWPREFIX/python)/Lib/site-packages|sed -e 's?/?\\?g') $MINGWPREFIX/python/Scripts/gyp.exe --help
#PYTHONPATH=$(echo $(cygpath -m $MINGWPREFIX/python)/Lib/site-packages|sed -e 's?/?\\?g') $MINGWPREFIX/python/Scripts/gyp.exe --depth=. BUILD.gn
#NODE_GYP_FORCE_PYTHON=$PYDIR/python.exe PYTHONPATH=$(cygpath -m $MINGWPREFIX/python)/Lib/site-packages PATH=$MINGWPREFIX/python/Scripts:$PATH gyp.exe --depth=. BUILD.gn
#PYTHONPATH=$(echo $(cygpath -m $MINGWPREFIX/python)/Lib/site-packages|sed -e 's?/?\\?g') $MINGWPREFIX/python/Scripts/gyp.exe -D angle_enable_vulkan=0 -D use_ozone=0 -D OS=win -D MSVS_VERSION="" -D TARGET=$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "win64"; else echo "win32"; fi) --format make --generator-output="angleproject/build_shared" --depth . -I "angleproject/gyp/common.gypi" "angleproject/src/angle.gyp"
mkdir build_win
#DEPOT_TOOLS_WIN_TOOLCHAIN=0 gn gen $(pwd)/build_win --root=$(pwd)

mkdir -p build/config
touch build/config/BUILDCONFIG.gn
sed -e "s/angle/build/" dotfile_settings.gni > build/dotfile_settings.gni
DEPOT_TOOLS_WIN_TOOLCHAIN=0 PATH=$PYDIR:$PATH gn gen build_win

echo 'buildconfig="BUILD.gn"' > mydotfile.gni
DEPOT_TOOLS_WIN_TOOLCHAIN=0 PATH=$PYDIR:$PATH gn gen build_win --root=$(pwd) --dotfile=mydotfile.gni

mkdir -p build/config
echo 'build_dotfile_settings = { exec_script_whitelist = [] }' > build/dotfile_settings.gni
echo 'set_default_toolchain("//build/toolchains:gcc")' > build/config/BUILDCONFIG.gn

#sed -i.bak -e "s/\(python\)3/\1/g" .gn

touch build/config/dcheck_always_on.gni build/config/ozone.gni
wl-showstatus configure &&
 PATH=$PYDIR:$PATH gn gen out/build_win --args='os="win" target_os="win" target_cpu="'$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "x64"; else "x86"; fi)'" is_gcc=true is_clang=false is_debug=false treat_warnings_as_errors=false' &&
    echo OK



# see also: https://github.com/microsoft/vcpkg/tree/master/ports/angle

# see also: https://github.com/wang-bin/build_angle

wget https://github.com/wang-bin/build_angle/archive/refs/heads/master.tar.gz
tar xz --force-local -f master.tar.gz --strip-components=1

# fix src/common/mathutil.h (version >= 4662)
patch -ulbf src/common/mathutil.h << EOF
@@ -1075,3 +1075,3 @@

-#if defined(ANGLE_PLATFORM_POSIX) || defined(__clang__)
+#if defined(ANGLE_PLATFORM_POSIX) || defined(__clang__) || defined(__MINGW32__)
 inline int BitCount(uint32_t bits)
EOF

#touch src/commit.h
#touch src/angle_commit.h
#echo "#include <zlib.h>" > src/compression_utils_portable.h
mkdir -p build_static build_shared &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DUSE_D3D9:BOOL=OFF -DUSE_GL:BOOL=ON -DUSE_VULKAN:BOOL=ON -DUSE_METAL:BOOL=OFF -DUSE_FRAME_CAPTURE:BOOL=OFF -DCMAKE_CXX_FLAGS:STRING="-I$(cygpath -m $PWD/src/common/base) -I$(cygpath -m $MINGWPREFIX/include/libdl-win32)" -S. -Bbuild_static &&
 #-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DUSE_D3D9:BOOL=OFF -DUSE_GL:BOOL=ON -DUSE_VULKAN:BOOL=ON -DUSE_METAL:BOOL=OFF -DUSE_FRAME_CAPTURE:BOOL=OFF -DCMAKE_CXX_FLAGS:STRING="-I$(cygpath -m $PWD/src/common/base) -I$(cygpath -m $MINGWPREFIX/include/libdl-win32)" -S. -Bbuild_shared &&
 ## fix execution of Python scripts
 #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|glib-genmarshal\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
 ## fix missing link libraries
 #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lws2_32/" build_win/build.ninja &&
 #wl-showstatus build &&
 #ninja -Cbuild_static &&
 #wl-showstatus build &&
 #ninja -Cbuild_shared &&
 wl-showstatus build-install &&
 ninja -Cbuild_static install/strip &&
 wl-showstatus build-install &&
 ninja -Cbuild_shared install/strip &&
    echo OK



# fix src/common/mathutil.h (version >= 5514)
patch -ulbf src/common/mathutil.h << EOF
@@ -1108,3 +1108,3 @@

-#if defined(ANGLE_PLATFORM_POSIX) || defined(__clang__)
+#if defined(ANGLE_PLATFORM_POSIX) || defined(__clang__) || defined(__MINGW32__) inline int BitCount(uint32_t bits)
EOF
## fix missing src/commit.h
#touch src/commit.h
mkdir -p build_win &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DUSE_LOADER:BOOL=ON -DUSE_VULKAN:BOOL=ON -DUSE_METAL:BOOL=OFF -DCMAKE_CXX_FLAGS:STRING="-I$(cygpath -m $PWD/src/common/base) -I$(cygpath -m $MINGWPREFIX/include/libdl-win32)" -S. -Bbuild_win &&
 wl-showstatus build-install &&
 ninja -Cbuild_win install/strip &&
    echo OK




wget https://chromium.googlesource.com/chromium/src/third_party/+archive/refs/heads/main/zlib.tar.gz
mkdir -p third_party/zlib
tar xz --force-local -f zlib.tar.gz -Cthird_party/zlib
g++ -O3 -c third_party/zlib/google/compression_utils.cc -I. -Isrc/common/third_party/base



# fix src/common/mathutil.h (version >= 4663)
patch -ulbf src/common/mathutil.h << EOF
@@ -1075,3 +1075,3 @@

-#if defined(ANGLE_PLATFORM_POSIX) || defined(__clang__)
+#if defined(ANGLE_PLATFORM_POSIX) || defined(__clang__) || defined(__MINGW32__)
 inline int BitCount(uint32_t bits)
EOF

# don't build Apple or Linux stuff
mv src/common/system_utils_apple.cpp src/common/system_utils_apple.cpp.bak
mv src/common/system_utils_ios.cpp src/common/system_utils_ios.cpp.bak
mv src/common/system_utils_mac.cpp src/common/system_utils_mac.cpp.bak
mv src/common/system_utils_linux.cpp src/common/system_utils_linux.cpp.bak
mv src/common/system_utils_posix.cpp src/common/system_utils_posix.cpp.bak

# fix missing src/angle_commit.h
ls -1 src/angle_commit.h &> /dev/null || cat > src/angle_commit.h << EOF
#define ANGLE_COMMIT_HASH "invalid-hash"
#define ANGLE_COMMIT_HASH_SIZE 12
#define ANGLE_COMMIT_DATE "invalid-date"
EOF

 touch SUCCESS &&
 for F in src/common/*.cpp src/common/third_party/smhasher/src/*.cpp src/image_util/*.cpp src/compiler/preprocessor/*.cpp src/compiler/translator/*.cpp src/libANGLE/renderer/gl/wgl/*.cpp src/libANGLE/renderer/gl/*.cpp src/libANGLE/renderer/d3d/*.cpp src/libEGL/*.cpp src/libGLESv2/*.cpp src/third_party/systeminfo/SystemInfo.cpp src/gpu_info_util/SystemInfo.cpp src/gpu_info_util/SystemInfo_win.cpp src/third_party/compiler/ArrayBoundsClamper.cpp; do
 #for F in src/libANGLE/*.cpp src/libANGLE/renderer/*.cpp; do
 #for F in src/common/third_party/base/anglebase/*.cc src/common/third_party/base/anglebase/numerics/*.cc; do
  echo CXX $F
  ls -1 $F.o &> /dev/null ||
  #g++ -O3 -c -o $F.o $F -Isrc -Iinclude -Isrc/common/third_party/base -I$MINGWPREFIX/include/glslang -DANGLE_ENABLE_OPENGL -DANGLE_ENABLE_VULKAN -DANGLE_ENABLE_D3D11 -DANGLE_ENABLE_D3D9 -DANGLE_ENABLE_ESSL -DANGLE_ENABLE_GLSL -DANGLE_ENABLE_HLSL -DANGLE_IS_$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi)_BIT_CPU || ( rm -f SUCCESS; false ) || break
  g++ -O3 -c -o $F.o $F -Isrc -Iinclude -Isrc/common/base -I$MINGWPREFIX/include/glslang -DANGLE_ENABLE_OPENGL -DANGLE_ENABLE_VULKAN -DANGLE_ENABLE_D3D11 -DANGLE_ENABLE_D3D9 -DANGLE_ENABLE_ESSL -DANGLE_ENABLE_GLSL -DANGLE_ENABLE_HLSL -DANGLE_IS_$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi)_BIT_CPU || ( rm -f SUCCESS; false ) || break
 done &&
 for F in util/*.cpp; do
  echo CXX $F
  ls -1 $F.o &> /dev/null ||
  #g++ -O3 -c -o $F.o $F -Isrc -Iinclude -I. -Iutil -Isrc/common/third_party/base -DANGLE_USE_UTIL_LOADER || ( rm -f SUCCESS; false ) || break
  g++ -O3 -c -o $F.o $F -Isrc -Iinclude -I. -Iutil -Isrc/common/base -DANGLE_USE_UTIL_LOADER || ( rm -f SUCCESS; false ) || break
 done &&
 ls -1 SUCCESS &> /dev/null &&
 ar cr libangle_common.a src/common/*.cpp.o src/common/third_party/smhasher/src/*.cpp.o &&
 ar cr libangle_image_util.a src/image_util/*.cpp.o &&
 ar cr libangle_gpu_info_util.a src/gpu_info_util/SystemInfo.cpp.o src/gpu_info_util/SystemInfo_win.cpp.o &&
 #ar cr libangle_translator.a src/compiler/translator/*.cpp.o && #src/third_party/compiler/ArrayBoundsClamper.cpp.o &&
 ar cr libangle_preprocessor.a src/compiler/preprocessor/*.cpp.o &&
 ar cr libangle_renderer_opengl.a src/libANGLE/renderer/gl/*.cpp.o &&
 #ar cr libangle_renderer_winrt.a src/libANGLE/renderer/d3d/*.cpp.o &&
 ar cr libangle_renderer_win32.a src/libANGLE/renderer/d3d/*.cpp.o && #-DANGLE_ENABLE_D3D9
 #ar cr libangle_renderer_d3d.a src/libANGLE/renderer/d3d/*.cpp.o && #-DANGLE_ENABLE_D3D11
 ar cr libANGLE.a src/common/event_tracer.cpp.o src/libANGLE/*.cpp.o src/libANGLE/renderer/*.cpp.o && #src/common/third_party/murmurhash/MurmurHash3.cpp.o &&
 ar cr libEGL.a src/libEGL/*.cpp.o &&
 ar cr libGLESv2.a src/libGLESv2/*.cpp.o &&
 g++ -shared -s -mwindows -def src/libEGL/libEGL_autogen.def -o EGL.dll libEGL.a -Wl,--out-implib,libEGL.dll.a &&
 g++ -shared -s -mwindows -def src/libGLESv2/libGLESv2_autogen.def -o GLESv2.dll libGLESv2.a -Wl,--out-implib,libGLESv2.dll.a &&
    echo OK



# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
####See also (old build): https://github.com/gk7huki/mingw-w64-angleproject
####See ticket: https://github.com/msys2/MINGW-packages/issues/5870
####See also: https://github.com/naveen521kk/MINGW-packages/tree/angle-new-package/mingw-w64-angleproject





export NAME="ANGLE"
export STATUS=
export URL=https://chromium.googlesource.com/angle/angle
export BASENAME=angle
export DESCRIPTION="ANGLE - Almost Native Graphics Layer Engine. The goal of ANGLE is to allow users of multiple operating systems to seamlessly run WebGL and other OpenGL ES content by translating OpenGL ES API calls to one of the hardware-supported APIs available for that platform."
export CATEGORY=graphics,hardware
export TYPE=library
#export VERSION=5652
#export VERSIONDATE=20230314
export VERSION=5677
export VERSIONDATE=20230327
wl-showstatus --package-version
export DEPENDENCIES=
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=gn,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=
export DOWNLOADURL="https://chromium.googlesource.com/angle/angle/+refs"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://chromium.googlesource.com/angle/angle/+archive/refs/heads/chromium/$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
mkdir -p $BASENAME-$VERSION
tar xz --force-local -f $TARBALLDIR/$BASENAME/$VERSION.tar.gz -C$BASENAME-$VERSION
cd $BASENAME-$VERSION
mkdir -p build/config
cat > build/dotfile_settings.gni << EOF
root = "//:root"
build_dotfile_settings = { exec_script_whitelist = [] }
EOF
cat > build/config/BUILDCONFIG.gn << EOF
set_default_toolchain("//gn/toolchain:gcc_like")
is_linux = false
is_chromeos = false
is_mac = false
is_ios = false
EOF
#touch build/config/dcheck_always_on.gni
sed -i.bak -e "s/\(python\)3/\1/" .gn
mkdir -p build_static build_shared &&
 wl-showstatus configure &&
 #PATH=$PYDIR:$PATH gn gen build_static --args='target_os="win" current_cpu="'$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "x64"; else "x86"; fi)'" cc="gcc" cxx="g++"' &&
 CC=${CC:-gcc} CXX=${CXX:-g++} LD=${LD:-ld} AR=${AR:-ar} PATH=$PYDIR:$PATH gn gen build_static --args='target_os="win" target_cpu="'$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "x64"; else "x86"; fi)'" cc="gcc" cxx="g++" is_debug=false is_component_build=true angle_enable_abseil=false angle_enable_metal=false angle_enable_d3d11_compositor_native_window=false angle_enable_cl=false chrome_pgo_phase=0 use_custom_libcxx=false use_sysroot=false treat_warnings_as_errors=false' &&
    echo OK




wl-download -v -d $TARBALLDIR/$BASENAME https://raw.githubusercontent.com/naveen521kk/MINGW-packages/angle-new-package/mingw-w64-angleproject/0004-add-mingw-toolchain-build.patch
patch -ulbf -N -p1 < $TARBALLDIR/$BASENAME/0004-add-mingw-toolchain-build.patch




git clone --branch=chromium/$VERSION https://chromium.googlesource.com/angle/angle
cd angle



#### See also: https://github.com/msys2/MINGW-packages/tree/master/mingw-w64-angleproject

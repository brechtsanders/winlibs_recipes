export NAME="Seer"
export STATUS=
export URL=https://github.com/epasveer/seer
export BASENAME=seer
export DESCRIPTION="Seer - a gui frontend to gdb"
export CATEGORY=development
export TYPE=application
#export VERSION=1.15
#export VERSIONDATE=20230405
#export VERSION=1.16
#export VERSIONDATE=20230408
#export VERSION=1.17
#export VERSIONDATE=20230424
#export VERSION=2.0
#export VERSIONDATE=20230604
export VERSION=2.0
export VERSIONDATE=20230813
wl-showstatus --package-version
export DEPENDENCIES=qt
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=GPL
export DOWNLOADURL="https://github.com/epasveer/seer/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/epasveer/seer/archive/refs/tags/v$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/v$VERSION.tar.gz
cd $BASENAME-$VERSION
# fix src/SeerGdbWidget.cpp (version >= 1.15)
patch -ulbf src/SeerGdbWidget.cpp << EOF
@@ -21,4 +21,6 @@
 #include <fcntl.h>
+#ifndef _WIN32
 #include <termios.h>
 #include <sys/ioctl.h>
+#endif
 #include <signal.h>
EOF
# fix src/SeerConsoleWidget.cpp (version >= 1.15)
patch -ulbf src/SeerConsoleWidget.cpp << EOF
@@ -17,4 +17,6 @@
 #include <fcntl.h>
+#ifndef _WIN32
 #include <termios.h>
 #include <sys/ioctl.h>
+#endif

EOF
# fix src/QProcessInfo.cpp (version >= 1.15)
patch -ulbf src/QProcessInfo.cpp << EOF
@@ -16,3 +16,5 @@
 #include <stdlib.h>
+#ifndef _WIN32
 #include <pwd.h>
+#endif
 #include <stdio.h>
EOF
mkdir -p build_win &&
 wl-showstatus configure &&
 PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -Ssrc -Bbuild_win &&
 #wl-showstatus build &&
 #cmake.exe --build build_win &&
 #ninja -Cbuild_win &&
 wl-showstatus build-install &&
 #cmake.exe --install build_win --strip &&
 #cmake.exe --build build_win --target "install/strip" &&
 ninja -Cbuild_win install/strip &&
    echo OK
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




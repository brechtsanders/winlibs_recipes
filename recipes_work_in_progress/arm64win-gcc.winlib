export NAME="GCC, the GNU Compiler Collection (targeting Windows on ARM 64-bit)"
export STATUS=
export URL=https://gcc.gnu.org/
export BASENAME=arm64win-gcc
export DESCRIPTION="The GNU Compiler Collection includes front ends for C, C++, Objective-C, Fortran, Ada, and Go, as well as libraries for these languages (libstdc++,...). GCC was originally written as the compiler for the GNU operating system. The GNU system was developed to be 100% free software, free in the sense that it respects the user's freedom. This build targets the Windows on ARM platform."
export CATEGORY=development
export TYPE=application
#export VERSION=10.2.0
#export VERSIONDATE=20201123
#export VERSION=10.3.0
#export VERSIONDATE=20210408
#export VERSION=11.1.0
#export VERSIONDATE=20210427
#export VERSION=11.2.0
#export VERSIONDATE=20210728
#export VERSION=11.3.0
#export VERSIONDATE=20220421
#export VERSION=12.1.0
#export VERSIONDATE=20220506
#export VERSION=12.2.0
#export VERSIONDATE=20220819
#export VERSION=13.2.0
#export VERSIONDATE=20231231
#export VERSION=13.3.0
#export VERSIONDATE=20240521
export VERSION=14.1.0
export VERSIONDATE=20240508
#export VERSION=15-20240616
#export VERSIONDATE=20240620
#export VERSION=15-20240728
#export VERSIONDATE=20240730
#export VERSION=15-20240818
#export VERSIONDATE=20240819
#export VERSION=15-20241013
#export VERSIONDATE=20241014
#export VERSION=15-20241110
#export VERSIONDATE=20241111
#export VERSION=15-20241215
#export VERSIONDATE=20241221
#export VERSION=15-20241222
#export VERSIONDATE=20241224
wl-showstatus --package-version
export DEPENDENCIES=zlib,zstd,pthreads,libiconv,mpfr,gmp,mpc,isl,mman-win32,mingw-w64
#export DEPENDENCIES=zlib,zstd,pthreads,libiconv,mpfr,gmp,mpc,isl,mman-win32,armwin-mingw-w64
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=arm64win-binutils
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=COPYING
export LICENSETYPE=GPL
#export DOWNLOADURL="https://gcc.gnu.org/releases.html gcc-"
#export DOWNLOADURL="https://ftp.gnu.org/gnu/gcc/ gcc-"
export DOWNLOADURL="https://gcc.gnu.org/pub/gcc/releases/ gcc-"
#export DOWNLOADURL="https://gcc.gnu.org/pub/gcc/snapshots/ gcc-"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://ftp.mpi-sb.mpg.de/pub/gnu/mirror/gcc.gnu.org/pub/gcc/releases/gcc-$VERSION/gcc-$VERSION.tar.xz
#export DOWNLOADSOURCEURL=https://ftp.gnu.org/gnu/gcc/gcc-$VERSION/gcc-$VERSION.tar.xz
export DOWNLOADSOURCEURL=https://gcc.gnu.org/pub/gcc/releases/gcc-$VERSION/gcc-$VERSION.tar.xz
#export DOWNLOADSOURCEURL=https://gcc.gnu.org/pub/gcc/snapshots/$VERSION/gcc-$VERSION.tar.xz
wl-showstatus download
wl-download -v -d $TARBALLDIR/gcc $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
mkdir -p $BASENAME-$VERSION
tar xJlh --force-local -f $TARBALLDIR/gcc/gcc-$VERSION.tar.xz -C$BASENAME-$VERSION
cd $BASENAME-$VERSION/gcc-$VERSION
# fix missing sys/wait.h fixincludes/fixincl.c (version >= 9.3.0)
patch -ulbf fixincludes/fixincl.c << EOF
@@ -28,4 +28,12 @@
 #ifndef SEPARATE_FIX_PROC
+#ifdef _WIN32
+#include <Windows.h>
+#define wait(p) Sleep(0)
+#include <fcntl.h>
+#define pipe(fds) _pipe(fds, 4096, _O_BINARY)
+#define fork() -1
+#else
 #include <sys/wait.h>
 #endif
+#endif

EOF
# fix missing pipe in fixincludes/procopen.c (version >= 9.3.0)
patch -ulbf fixincludes/procopen.c << EOF
@@ -50,2 +50,7 @@
 #include "server.h"
+#ifdef _WIN32
+#include <fcntl.h>
+#define pipe(fds) _pipe(fds, 4096, _O_BINARY)
+#define fork() -1
+#endif

EOF
# fix missing kill/alarm in fixincludes/server.c (version >= 9.3.0)
patch -ulbf fixincludes/server.c << EOF
@@ -50,2 +50,6 @@
 #include "server.h"
+#ifdef _WIN32
+#define kill(pid,sig) -1
+#define alarm(n) 0
+#endif

EOF
# fix to support Windows on ARM in gcc/config.gcc
#patch -ulbf gcc/config.gcc << EOF
#@@ -2116,3 +2116,3 @@
#        ;;
#-i[34567]86-*-mingw* | x86_64-*-mingw*)
#+i[34567]86-*-mingw* | x86_64-*-mingw* | arm*-*-mingw* | aarch64*-*-mingw*)
#        tm_file="\${tm_file} i386/unix.h i386/bsd.h i386/gas.h dbxcoff.h i386/cygming.h"
#EOF
patch -ulbf gcc/config.gcc << EOF
@@ -2123,3 +2123,3 @@
        ;;
-i[34567]86-*-mingw* | x86_64-*-mingw*)
+i[34567]86-*-mingw* | x86_64-*-mingw* | aarch64-*-mingw*)
        tm_file="\${tm_file} i386/unix.h i386/bsd.h i386/gas.h i386/cygming.h"
@@ -2132,3 +2132,3 @@
        case \${target} in
-               x86_64-*-* | *-w64-*)
+               x86_64-*-* | aarch64-*-* | *-w64-*)
                        need_64bit_isa=yes
@@ -2176,3 +2176,3 @@
         case \${target} in
-               x86_64-w64-*)
+               x86_64-w64-* | aarch64-w64-*)
                                tmake_file="\${tmake_file} i386/t-mingw-w64"
@@ -5673,3 +5673,3 @@
                ;;
-       i[34567]86-*-mingw* | x86_64-*-mingw*)
+       i[34567]86-*-mingw* | x86_64-*-mingw* | aarch64-*-mingw*)
                ;;
EOF
mkdir -p build_arm64win/gcc
cat >> build_arm64win/gcc/auto-host.h << EOF
#if defined(__aarch64__) && !defined(TARGET_64BIT)
#define TARGET_64BIT 1
#define TARGET_64BIT_MS_ABI 1
#define MS_ABI 1
#define ix86_abi MS_ABI
#endif
EOF
## fix to support Windows on ARM in gcc/config.host
#patch -ulbf gcc/config.host << EOF
#@@ -236,3 +236,3 @@
#     ;;
#-  i[34567]86-*-mingw32*)
#+  i[34567]86-*-mingw32* | arm*-*-mingw* | aarch64*-*-mingw*)
#     host_xm_file=i386/xm-mingw32.h
#EOF
## fix to support Windows on ARM in gcc/config.host (version >= 15-20240728)
#patch -ulbf gcc/config.host << EOF
#@@ -232,3 +232,3 @@
#     ;;
#-  i[34567]86-*-mingw32* | x86_64-*-mingw*)
#+  i[34567]86-*-mingw32* | x86_64-*-mingw* | arm*-*-mingw* | aarch64*-*-mingw*)
#     host_xm_file=i386/xm-mingw32.h
#EOF
## fix gcc/config.host (version >= 15-20241110)
#patch -ulbf gcc/config.host << EOF
#@@ -232,3 +232,3 @@
#     ;;
#-  i[34567]86-*-mingw32* | x86_64-*-mingw* | arm*-*-mingw* | aarch64*-*-mingw*)
#+  *-*-mingw*)
#     host_xm_file=i386/xm-mingw32.h
#@@ -241,3 +241,3 @@
#     case \${host} in
#-      x86_64-*-*)
#+      *64-*-mingw*)
#         use_long_long_for_widest_fast_int=yes
#EOF
# fix gcc/config.host (version >= 15-20241117)
patch -ulbf gcc/config.host << EOF
@@ -232,3 +232,3 @@
     ;;
-  i[34567]86-*-mingw32* | x86_64-*-mingw*)
+  *-*-mingw*)
     host_xm_file=i386/xm-mingw32.h
@@ -241,3 +241,3 @@
     case \${host} in
-      x86_64-*-*)
+      *64-*-mingw*)
         use_long_long_for_widest_fast_int=yes
EOF
# fix undefined symbol: host_detect_local_cpu(int, char const**) in gcc/config.host
patch -ulbf gcc/config.host << EOF
@@ -102,3 +102,3 @@
   aarch64*-*-freebsd* | aarch64*-*-linux* | aarch64*-*-fuchsia* |\\
-  aarch64*-*-darwin*)
+  aarch64*-*-darwin* | aarch64-*-mingw32)
     case \${target} in
EOF
# fix undefined TARGET_64BIT in gcc/config/i386/mingw-stdint.h (version >= 10.2.0)
patch -ulbf gcc/config/i386/mingw-stdint.h << EOF
@@ -48,3 +48,8 @@

+#ifdef TARGET_64BIT
 #define INTPTR_TYPE (TARGET_64BIT ? "long long int" : "int")
 #define UINTPTR_TYPE (TARGET_64BIT ? "long long unsigned int" : "unsigned int")
+#else
+#define INTPTR_TYPE "long long int"
+#define UINTPTR_TYPE "long long unsigned int"
+#endif
EOF
## fix undefined TARGET_64BIT in gcc/config/i386/cygming.h (version >= 11.1.0)
#patch -ulbf gcc/config/i386/cygming.h << EOF
#@@ -33,2 +33,5 @@
# #undef TARGET_SEH
#+#ifndef TARGET_64BIT_MS_ABI
#+#define TARGET_64BIT_MS_ABI 0
#+#endif
# #define TARGET_SEH  (TARGET_64BIT_MS_ABI && flag_unwind_tables)
#@@ -59,2 +62,5 @@
# #undef DEFAULT_ABI
#+#ifndef TARGET_64BIT
#+#define TARGET_64BIT 0
#+#endif
# #define DEFAULT_ABI (TARGET_64BIT ? MS_ABI : SYSV_ABI)
#EOF
## fix redefinition of uintptr_t in libiberty/regex.c (version >= 10.3.0)
#patch -ulbf libiberty/regex.c << EOF
#@@ -303,3 +303,3 @@
# # if !defined _LIBC && !defined HAVE_UINTPTR_T
#-typedef unsigned long int uintptr_t;
#+//typedef unsigned long int uintptr_t;
# # endif
#EOF
## fix undefined msformat_init/mingw_format_attributes in gcc/config/mingw/mingw32.h
#patch -ulbf gcc/config/mingw/mingw32.h << EOF
#@@ -299,9 +299,2 @@
#
#-/* Custom initialization for warning -Wpedantic-ms-format for c-format.  */
#-#undef TARGET_OVERRIDES_FORMAT_INIT
#-#define TARGET_OVERRIDES_FORMAT_INIT msformat_init
#-
#-/* MS specific format attributes for ms_printf, ms_scanf, ms_strftime.  */
#-#undef TARGET_FORMAT_TYPES
#-#define TARGET_FORMAT_TYPES mingw_format_attributes
#
#EOF
# fix gcc/doc/invoke.texi
####invoke.texi:2203: @include: could not find R:/winlibs64_stage/gcc-11-20210710/build_mingw/gcc/../../gcc/../libiberty/at-file.texi
sed -i.bak -e "s?[^ ]*\(/libiberty/at-file\.texi\)?../..\1?" gcc/doc/invoke.texi
# avoid looking for libiberty.a in a pic subdirectory
sed -i.bak -e "s?pic/\(libiberty\.a\)?\1?g" $(grep -l "pic/libiberty\.a" */Makefile.in)
# fix detection of GMP/MPFR/MPC
sed -i.bak -e  "s/#include [<\"]\(gmp\|mpc\|mpfr\|isl\)\.h[>\"]/#include <stdio.h>\n&/" configure
# copy MinGW-w64 files
mkdir -p build_arm64win/mingw-w64/mingw &&
cp -rf $MINGWPREFIX/share/mingw-w64/include build_arm64win/mingw-w64/mingw/ &&
cp -rf $MINGWPREFIX/share/mingw-w64/lib build_arm64win/mingw-w64/mingw/
mkdir -p build_arm64win &&
 wl-showstatus configure &&
 cd build_arm64win &&
 #PATH=$MINGWPREFIX/share/arm64win-binutils/bin:$PATH ../configure --prefix=$INSTALLPREFIX/share/arm64win-gcc --build=$BUILDPLATFORM --host=$RUNPLATFORM --target=aarch64-w64-mingw32 --with-pkgversion="GCC targeting Windows on ARM, built by Brecht Sanders" --disable-bootstrap --enable-languages=c,c++ --disable-nls --disable-libssp --with-dwarf2 --disable-version-specific-runtime-libs --without-included-gettext --with-diagnostics-color=auto --with-libiconv --with-system-zlib --disable-twoprocess CFLAGS="-I$MINGWPREFIX/include/mman-win32" LDFLAGS="-Wl,--as-needed -lmman" &&
 #PATH=$MINGWPREFIX/share/arm64win-binutils/bin:$PATH ../configure --prefix=$INSTALLPREFIX/share/arm64win-gcc --build=$BUILDPLATFORM --host=$RUNPLATFORM --target=aarch64-w64-mingw32 --with-pkgversion="GCC targeting Windows on ARM, built by Brecht Sanders" --enable-checking=release --enable-threads=posix --disable-libunwind-exceptions --enable-serial-configure --disable-bootstrap --enable-host-shared --enable-plugin --enable-default-ssp --disable-rpath --disable-libstdcxx-pch --enable-libstdcxx-time=yes --disable-libstdcxx-debug --disable-version-specific-runtime-libs --with-stabs --disable-symvers --enable-languages=c,c++,fortran,lto,objc,obj-c++$(if echo $VERSION|grep -vq "^[3-8]\."; then echo -n ",d"; fi) --disable-{gold,nls,stage1-checking,win32-registry,multilib} --enable-{ld,libquadmath,libada,libssp,libstdcxx,lto,fully-dynamic-string,libgomp,graphite,mingw-wildcard} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX --enable-install-libiberty --enable-__cxa_atexit --without-included-gettext --with-diagnostics-color=auto --with-libiconv --with-system-zlib --with-build-sysroot=$(pwd)/mingw-w64 $(if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--enable-large-address-aware"; fi) &&
 #PATH=$MINGWPREFIX/share/arm64win-binutils/bin:$PATH ../configure --prefix=$INSTALLPREFIX/share/arm64win-gcc --build=$BUILDPLATFORM --host=$RUNPLATFORM --target=aarch64-w64-mingw32 --with-pkgversion="GCC targeting Windows on ARM, built by Brecht Sanders" --enable-checking=release --enable-threads=posix --disable-libunwind-exceptions --enable-serial-configure --disable-bootstrap --enable-host-shared --enable-plugin --enable-default-ssp --disable-rpath --disable-libstdcxx-pch --enable-libstdcxx-time=yes --disable-libstdcxx-debug --disable-version-specific-runtime-libs --with-stabs --disable-symvers --enable-languages=c,c++,fortran,lto,objc,obj-c++$(if echo $VERSION|grep -vq "^[3-8]\."; then echo -n ",d"; fi) --disable-{gold,nls,stage1-checking,win32-registry,multilib} --enable-{ld,libquadmath,libada,libssp,libstdcxx,lto,fully-dynamic-string,libgomp,graphite,mingw-wildcard,interwork} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX --enable-install-libiberty --enable-__cxa_atexit --without-included-gettext --with-diagnostics-color=auto --with-libiconv --with-system-zlib --with-build-sysroot=$(pwd)/mingw-w64 $(if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--enable-large-address-aware"; fi) &&
 PATH=$MINGWPREFIX/share/arm64win-binutils/bin:$PATH ../configure --prefix=$INSTALLPREFIX/share/arm64win-gcc --build=$BUILDPLATFORM --host=$RUNPLATFORM --target=aarch64-w64-mingw32 --with-pkgversion="GCC targeting Windows on ARM, built by Brecht Sanders" --enable-checking=release --enable-threads=posix --without-dwarf --with-dwarf2 --disable-sjlj-exceptions --disable-libunwind-exceptions --enable-serial-configure --disable-bootstrap --enable-host-shared --enable-plugin --enable-default-ssp --disable-rpath --disable-libstdcxx-pch --enable-libstdcxx-time=yes --disable-libstdcxx-debug --disable-version-specific-runtime-libs --with-stabs --disable-symvers --enable-languages=c,c++ --disable-{gold,nls,stage1-checking,win32-registry,multilib} --enable-{ld,libquadmath,libada,libssp,libstdcxx,lto,fully-dynamic-string,libgomp,graphite,mingw-wildcard,interwork} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX --enable-install-libiberty --enable-__cxa_atexit --without-included-gettext --with-diagnostics-color=auto --with-libiconv --with-system-zlib --with-build-sysroot=$(pwd)/mingw-w64 $(if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--enable-large-address-aware"; fi) &&
 #PATH=$MINGWPREFIX/share/arm64win-binutils/bin:$PATH ../configure --prefix=$INSTALLPREFIX/share/arm64win-gcc --build=$BUILDPLATFORM --host=$RUNPLATFORM --target=aarch64-w64-mingw32 --with-pkgversion="GCC targeting Windows on ARM, built by Brecht Sanders" --enable-checking=release --enable-threads=posix --without-dwarf --without-dwarf2 --disable-sjlj-exceptions --disable-libunwind-exceptions --enable-serial-configure --disable-bootstrap --enable-host-shared --enable-plugin --enable-default-ssp --disable-rpath --disable-libstdcxx-pch --enable-libstdcxx-time=yes --disable-libstdcxx-debug --disable-version-specific-runtime-libs --with-stabs --disable-symvers --enable-languages=c,c++ --disable-{gold,nls,stage1-checking,win32-registry,multilib,libada,lto} --enable-{ld,libquadmath,libssp,libstdcxx,fully-dynamic-string,libgomp,graphite,mingw-wildcard,interwork} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX --enable-install-libiberty --enable-__cxa_atexit --without-included-gettext --with-diagnostics-color=auto --with-libiconv --with-system-zlib --with-build-sysroot=$(pwd)/mingw-w64 --enable-large-address-aware &&
 #PATH=$MINGWPREFIX/share/arm64win-binutils/bin:$PATH ../configure --prefix=$INSTALLPREFIX/share/arm64win-gcc --build=$BUILDPLATFORM --host=$RUNPLATFORM --target=aarch64-w64-mingw32 --with-pkgversion="GCC targeting Windows on ARM, built by Brecht Sanders" --enable-checking=release --enable-threads=posix --disable-libunwind-exceptions --enable-serial-configure --enable-bootstrap --enable-host-shared --enable-plugin --enable-default-ssp --disable-rpath --disable-libstdcxx-pch --enable-libstdcxx-time=yes --disable-libstdcxx-debug --disable-version-specific-runtime-libs --with-stabs --disable-symvers --enable-languages=c,c++,fortran,lto,objc,obj-c++$(if echo $VERSION|grep -vq "^[3-8]\."; then echo -n ",d"; fi) --disable-{gold,nls,stage1-checking,win32-registry,multilib} --enable-{ld,libquadmath,libada,libssp,libstdcxx,lto,fully-dynamic-string,libgomp,graphite,mingw-wildcard,interwork} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX --disable-install-libiberty --enable-__cxa_atexit --without-included-gettext --with-diagnostics-color=auto --with-libiconv --with-system-zlib --with-build-sysroot=$(pwd)/mingw-w64 $(if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--enable-large-address-aware"; fi) &&
 #$(if echo $VERSION|grep -vq "^[3-8]\."; then echo -n ",d"; fi)
 #CFLAGS="-DTARGET_64BIT=1" 
 #CFLAGS_FOR_TARGET="-DTARGET_64BIT=1" 
 #PATH=$MINGWPREFIX/share/arm64win-binutils/bin:$PATH ../configure --prefix=$INSTALLPREFIX/share/arm64win-gcc --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-pkgversion="MinGW-W64 $(echo $RUNPLATFORM | sed -e "s/-.*$//")-posix-$(if [ "0$USE_SJLJ" -ne 0 ]; then echo "sjlj"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "dwarf"; else echo "seh"; fi; fi), built by Brecht Sanders" --with-tune=generic --enable-checking=release --enable-threads=posix $(if [ "0$USE_SJLJ" -ne 0 ]; then if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--without-dwarf2 "; fi; echo "--enable-sjlj-exceptions"; else if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--with-dwarf2 "; fi; echo "--disable-sjlj-exceptions"; fi) --disable-libunwind-exceptions --enable-serial-configure --disable-bootstrap --enable-host-shared --enable-plugin --enable-default-ssp --disable-rpath --disable-libstdcxx-pch --enable-libstdcxx-time=yes --disable-libstdcxx-debug --disable-version-specific-runtime-libs --with-stabs --disable-symvers --enable-languages=c,c++,fortran,lto,objc,obj-c++$(if echo $VERSION|grep -vq "^[3-8]\."; then echo -n ",d"; fi) --disable-{gold,nls,stage1-checking,win32-registry,multilib} --enable-{ld,libquadmath,libada,libssp,libstdcxx,lto,fully-dynamic-string,libgomp,graphite,mingw-wildcard} --with-{mpc,mpfr,gmp,isl}=$MINGWPREFIX --enable-install-libiberty --enable-__cxa_atexit --without-included-gettext --with-diagnostics-color=auto --with-libiconv --with-system-zlib --with-build-sysroot=$(pwd)/mingw-w64 $(if ! ( echo $RUNPLATFORM | grep -q x86_64 ); then echo "--enable-large-address-aware"; fi) &&
 #--with-newlib 
 #--enable-languages=c,c++,fortran,lto,objc,obj-c++ 
 cd .. &&
 make -C build_arm64win configure-host &&
 sed -i.bak -e "s/\(CXX_TARGET_OBJS=aarch64-c\.o\) \(default-c\.o\)/\1 msformat-c.o \2/" build_arm64win/gcc/Makefile &&
 wl-showstatus build &&
 #PATH=$(pwd)/build_arm64win/gcc:$(pwd)/build_arm64win/gcc/build:$MINGWPREFIX/share/arm64win-binutils/bin:$PATH make -Cbuild_arm64win &&
 #( PATH=$(pwd)/build_arm64win/gcc:$(pwd)/build_arm64win/gcc/build:$MINGWPREFIX/share/arm64win-binutils/bin:$PATH make -Cbuild_arm64win || (
 # # fix missing TARGET_64BIT (version <= 10.3.0)
 # echo "#ifndef TARGET_64BIT" >> build_arm64win/gcc/auto-host.h &&
 # echo "#define TARGET_64BIT 0" >> build_arm64win/gcc/auto-host.h &&
 # echo "#endif" >> build_arm64win/gcc/auto-host.h &&
 # # fix missing TARGET_64BIT_MS_ABI (version <= 10.3.0)
 # echo "#ifndef TARGET_64BIT_MS_ABI" >> build_arm64win/gcc/auto-host.h &&
 # echo "#define TARGET_64BIT_MS_ABI 0" >> build_arm64win/gcc/auto-host.h &&
 # echo "#endif" >> build_arm64win/gcc/auto-host.h &&
 # # fix missing MS_ABI (version <= 10.3.0)
 # echo "#ifndef MS_ABI" >> build_arm64win/gcc/auto-host.h &&
 # echo "#define MS_ABI 1" >> build_arm64win/gcc/auto-host.h &&
 # echo "#endif" >> build_arm64win/gcc/auto-host.h &&
 # # fix missing ix86_abi (version <= 10.3.0)
 # echo "#ifndef ix86_abi" >> build_arm64win/gcc/auto-host.h &&
 # echo "#define ix86_abi MS_ABI" >> build_arm64win/gcc/auto-host.h &&
 # echo "#endif" >> build_arm64win/gcc/auto-host.h &&
 # PATH=$(pwd)/build_arm64win/gcc:$(pwd)/build_arm64win/gcc/build:$MINGWPREFIX/share/arm64win-binutils/bin:$PATH make -Cbuild_arm64win
 #)) &&
 ## avoid invalid linker flags -Wl,--gc-keep-exported and -no-pie when building with CLang
 #if ${CC:-gcc} --version|grep -q "^clang"; then sed -i.bak -e "s/-Wl,--gc-keep-exported//; s/ -no-pie//" build_arm64win/gcc/Makefile; fi &&
 # fix missing TARGET_64BIT (version <= 10.3.0)
 echo "#ifndef TARGET_64BIT" >> build_arm64win/gcc/auto-host.h &&
 echo "#define TARGET_64BIT 0" >> build_arm64win/gcc/auto-host.h &&
 echo "#endif" >> build_arm64win/gcc/auto-host.h &&
 # fix missing TARGET_64BIT_MS_ABI (version <= 10.3.0)
 echo "#ifndef TARGET_64BIT_MS_ABI" >> build_arm64win/gcc/auto-host.h &&
 echo "#define TARGET_64BIT_MS_ABI 0" >> build_arm64win/gcc/auto-host.h &&
 echo "#endif" >> build_arm64win/gcc/auto-host.h &&
 # fix missing MS_ABI (version <= 10.3.0)
 echo "#ifndef MS_ABI" >> build_arm64win/gcc/auto-host.h &&
 echo "#define MS_ABI 1" >> build_arm64win/gcc/auto-host.h &&
 echo "#endif" >> build_arm64win/gcc/auto-host.h &&
 # fix missing ix86_abi (version <= 10.3.0)
 echo "#ifndef ix86_abi" >> build_arm64win/gcc/auto-host.h &&
 echo "#define ix86_abi MS_ABI" >> build_arm64win/gcc/auto-host.h &&
 echo "#endif" >> build_arm64win/gcc/auto-host.h &&
 PATH=$(pwd)/build_arm64win/gcc:$(pwd)/build_arm64win/gcc/build:$MINGWPREFIX/share/arm64win-binutils/bin:$PATH make -Cbuild_arm64win &&
 wl-showstatus build-install &&
 PATH=$(pwd)/build_arm64win/gcc:$(pwd)/build_arm64win/gcc/build:$MINGWPREFIX/share/arm64win-binutils/bin:$PATH make -Cbuild_arm64win install-strip &&
    echo OK
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd ../.. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION
#### Windows for ARM: ARM64 = aarch64-w64-mingw32, ARM32 = armv7-w64-mingw32



####ld -relocatable build_mingw/gcc/utf8rc-mingw32.o build_mingw/gcc/sym-mingw32.o -o build_mingw/gcc/utf8-mingw32.o
####make -Cbuild_mingw/gcc CXXFLAGS="-DINCLUDE_MEMORY" LD_PICFLAG="-fuse-ld=ld"
####PATH=$MINGWPREFIX/share/arm64win-binutils/aarch64-w64-mingw32/bin:$PATH make -Cbuild_mingw/gcc CXXFLAGS="-DINCLUDE_MEMORY" LD_PICFLAG="-fuse-ld=ld"
####PATH=$MINGWPREFIX/share/binutils/aarch64-w64-mingw32/bin:$PATH make -Cbuild_mingw/gcc CXXFLAGS="-DINCLUDE_MEMORY" LD_PICFLAG="-fuse-ld=ld"



####See also: https://github.com/Windows-on-ARM-Experiments/msys2-woarm64-build
####See also: https://linaro.atlassian.net/wiki/spaces/WOAR/pages/28802842658/GNU+Toolchain+for+Windows+on+Arm
####See also: https://sourceforge.net/projects/mingw-gcc-arm-eabi/

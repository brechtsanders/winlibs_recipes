export NAME="azure-sdk-for-cpp"
export STATUS=
#export URL=https://github.com/Azure/azure-sdk-for-cpp/
export URL=https://azure.github.io/azure-sdk-for-cpp/
export BASENAME=azure-sdk-for-cpp
export DESCRIPTION="This repository is for active development of the Azure SDK for C++."
export CATEGORY=
export TYPE=library
#export VERSION=1.10.0
#export VERSIONDATE=20230609
#export VERSION=1.10.1
#export VERSIONDATE=20230707
#export VERSION=1.10.2
#export VERSIONDATE=20230907
#export VERSION=1.10.3
#export VERSIONDATE=20231006
#export VERSION=1.11.0
#export VERSIONDATE=20240112
#export VERSION=1.11.1
#export VERSIONDATE=20240203
export VERSION=1.11.2
export VERSIONDATE=20240217
wl-showstatus --package-version
export DEPENDENCIES=azure-uamqp-c
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE.txt
export LICENSETYPE=MIT
export DOWNLOADURL="https://github.com/Azure/azure-sdk-for-cpp/releases azure-core_"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/Azure/azure-sdk-for-cpp/archive/refs/tags/azure-core_$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/azure-core_$VERSION.tar.gz
cd azure-sdk-for-cpp-azure-core_$VERSION
echo '#!/bin/sh' > toolchainfile.sh

#grep -wi add_library $(find -name CMakeLists.txt -or -name '*.cmake')
#mkdir -p build_test && cmake.exe -GNinja -S. -Bbuild_test -LH && echo OK; rm -rf build_test

#export BUILDDEPENDENCIES=cmake,ninja
#PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ 
#-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
mkdir -p build_win &&
 wl-showstatus configure &&
 AZURE_SDK_DISABLE_AUTO_VCPKG=1 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DCMAKE_TOOLCHAIN_FILE:FILEPATH="$PWD/toolchainfile.sh" -DWARNINGS_AS_ERRORS:BOOL=OFF -DFETCHCONTENT_FULLY_DISCONNECTED:BOOL=ON -DAZURE_SDK_DISABLE_AUTO_VCPKG:BOOL=ON -DVCPKG_PREFER_SYSTEM_LIBS:BOOL=ON -DBUILD_SAMPLES:BOOL=OFF -DBUILD_TESTING:BOOL=OFF -S. -Bbuild_win &&
 #wl-showstatus build &&
 #cmake.exe --build build_win &&
 #ninja -Cbuild_win &&
 wl-showstatus build-install &&
 #cmake.exe --install build_win --strip &&
 #cmake.exe --build build_win --target "install/strip" &&
 ninja -Cbuild_win install/strip &&
    echo OK

#export BUILDDEPENDENCIES=cmake,ninja
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -S. -Bbuild_static &&
# #-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -S. -Bbuild_shared &&
# ## fix execution of Python scripts
# #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|glib-genmarshal\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
# ## fix missing link libraries
# #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lws2_32/" build_shared/build.ninja &&
# #wl-showstatus build &&
# #cmake.exe --build build_static &&
# #ninja -Cbuild_static &&
# #wl-showstatus build &&
# #cmake.exe --build build_shared &&
# #ninja -Cbuild_shared &&
# wl-showstatus build-install &&
# #cmake.exe --install build_static --strip &&
# #cmake.exe --build build_static --target "install/strip" &&
# #cmake.exe --build build_static --target "library/install/strip" &&
# ninja -Cbuild_static install/strip &&
# #ninja -Cbuild_static library/install/strip &&
# wl-showstatus build-install &&
# #cmake.exe --install build_shared --strip &&
# #cmake.exe --build build_shared --target "install/strip" &&
# ninja -Cbuild_shared install/strip &&
#    echo OK

# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf azure-sdk-for-cpp-azure-core_$VERSION




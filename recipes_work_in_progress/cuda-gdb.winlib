export NAME="CUDA GDB"
export STATUS=
export URL=https://developer.nvidia.com/cuda-toolkit
export BASENAME=cuda-gdb
export DESCRIPTION="The NVIDIA(R) CUDA(R) Toolkit provides a development environment for creating high performance GPU-accelerated applications. With the CUDA Toolkit, you can develop, optimize and deploy your applications on GPU-accelerated embedded systems, desktop workstations, enterprise data centers, cloud-based platforms and HPC supercomputers. The toolkit includes GPU-accelerated libraries, debugging and optimization tools, a C/C++ compiler and a runtime library to deploy your application."
export CATEGORY=hardware
export TYPE=library
#export VERSION=8.0.47
#export VERSIONDATE=20161126
#export VERSION=8.0.61
#export VERSIONDATE=20170207
#export VERSION=9.0.103
#export VERSIONDATE=20170814
#export VERSION=10.1.243
#export VERSIONDATE=20200107
#export VERSION=10.2.89
#export VERSIONDATE=20200529
#export VERSION=11.0.172
#export VERSIONDATE=20200529
#export VERSION=11.0.194
#export VERSIONDATE=20200707
#export VERSION=11.0.3
#export VERSIONDATE=20200807
export VERSION=11.1.69
export VERSIONDATE=202009118
wl-showstatus --package-version
export DEPENDENCIES=isl,cloog,mpc,mpfr,gmp
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=COPYING
export LICENSETYPE=GPL
#export LICENSEFILE=COPYING.LIB
#export LICENSETYPE=LGPL
#export DOWNLOADURL="http://http.download.nvidia.com/cuda-toolkit/"
export DOWNLOADURL="https://developer.download.nvidia.com/compute/cuda/opensource/"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=http://http.download.nvidia.com/cuda-toolkit/$VERSION/cuda-gdb-$VERSION.src.tar.gz
#export DOWNLOADSOURCEURL=https://developer.download.nvidia.com/compute/cuda/opensource/$VERSION/cuda-gdb-$VERSION.src.tar.gz
#export DOWNLOADSOURCEURL=https://developer.download.nvidia.com/compute/cuda/opensource/$VERSION/cuda_gdb_src-all-all-$VERSION.tar.gz
#export DOWNLOADSOURCEURL=https://developer.download.nvidia.com/compute/cuda/opensource/11.0.2/cuda_gdb_src-all-all-11.0.194.tar.gz
#export DOWNLOADSOURCEURL=https://developer.download.nvidia.com/compute/cuda/opensource/11.0.3/cuda_gdb_src-all-all-11.0.221.tar.gz
export DOWNLOADSOURCEURL=https://developer.download.nvidia.com/compute/cuda/opensource/11.1.0/cuda_gdb_src-all-all-11.1.69.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
#tar xfz $TARBALLDIR/$BASENAME/cuda-gdb-$VERSION.src.tar.gz
tar xfz $TARBALLDIR/$BASENAME/cuda_gdb_src-all-all-$VERSION.tar.gz
#cd cuda-gdb-*
#cd cuda-gdb-$VERSION
cd cuda_gdb_*
#cd cuda-toolkit-*
# fix redefinition of mkstemp in libcudacore/cudaapi.c
patch libcudacore/cudaapi.c << EOF
@@ -40,3 +40,3 @@

-#ifdef _WIN32
+#if defined(_WIN32) && !defined(__MINGW32__)
 #include <fcntl.h>
EOF
# fix missing parameter to value_from_contents_and_address() in gdb/amd64-windows-tdep.c (version >= 10.1.243)
patch -ulbf gdb/amd64-windows-tdep.c << EOF
@@ -124,3 +124,3 @@
        args[i]
-         = value_addr (value_from_contents_and_address (type, valbuf, sp));
+         = value_addr (value_from_contents_and_address (type, valbuf, len, sp));
       }
EOF
  ./configure --help
  head COPYING* LICENSE*
  ls -l COPYING* LICENSE* COPYRIGHT* configure* CMakeLists.txt Makefile
wl-showstatus configure &&
#./autogen.sh &&
#    echo OK
## fix building DLLs on 64-bit
#if ( echo $RUNPLATFORM | grep -q x86_64 ); then
# echo "AM_GNU_GETTEXT_VERSION([$(gettext --version|head -n1|sed -e "s/^.* \([0-9\.]*\) *$/\1/")])" >> configure.ac &&
# autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal
#fi
#INTLTOOL_PERL="$PERLDIR/bin/perl.exe" 
#PERL="$PERLDIR/bin/perl.exe -I$PERLDIR/lib" 
#PYTHON=$PYDIR/python.exe 
#PYTHON=$PYDIR/python.exe C_INCLUDE_PATH=$PYDIR/include${C_INCLUDE_PATH:+:$C_INCLUDE_PATH} 
#./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM LDFLAGS="-Wl,--as-needed -Wl,-no-undefined" &&
#./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM LDFLAGS="-Wl,--as-needed" &&
#./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --disable-serial-host-configure --disable-serial-target-configure --disable-serial-build-configure &&
./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --with-pkgversion="CUDA-toolkit $(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo x86_64; else echo i686; fi), built by Brecht Sanders" --disable-shared --enable-static --disable-werror --disable-bootstrap --disable-serial-host-configure --disable-serial-target-configure --disable-serial-build-configure --enable-tui --enable-gdbcli --disable-gdbmi --disable-gtk --disable-gdbtk --with-system-zlib &&
#--enable-leading-mingw64-underscores
#--enable-cuda           enable debugging of CUDA applications
#--enable-multi-ice      build the multi-ice-gdb-server
#./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --enable-serial-configure --disable-bootstrap &&
 ## fix building DLLs
 #mv libtool libtool.bak &&
 #sed -e "s/\(allow_undefined=\)yes/\1no/" libtool.bak > libtool &&
 wl-showstatus build &&
 #make all-build &&
 make all-host YACC="$(which yacc) -y" &&
 make YACC="$(which yacc)" &&
 wl-showstatus build-install &&
 make install-strip &&
    echo OK
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf cuda-gdb-*
####See also: https://developer.nvidia.com/cuda-gdb



export DOWNLOADURL="https://developer.nvidia.com/cuda-downloads?target_os=Windows&target_arch=x86_64&target_version=10&target_type=exelocal cuda_ _win10.exe"
export VERSION=11.1.1_456.81
export DOWNLOADSOURCEURL=https://developer.download.nvidia.com/compute/cuda/11.1.1/local_installers/cuda_$VERSION\_win10.exe
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
PATH=$PATH:/C/Program\ Files/7-Zip 7z x $TARBALLDIR/$BASENAME/cuda_$VERSION\_win10.exe

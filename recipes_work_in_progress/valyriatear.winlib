export NAME="Valyria Tear"
export STATUS=
export URL=http://valyriatear.blogspot.com/
export URL=https://github.com/ValyriaTear/ValyriaTear/
export BASENAME=valyriatear
export DESCRIPTION="Valyria Tear is an open-source single-player medieval-fantasy 2D J-RPG based on an extended Hero of Allacrost engine and inspired by classic console RPGs."
export CATEGORY=game
export TYPE=library
#export VERSION=1.0.0-gcc5
#export VERSIONDATE=20180725
export VERSION=1.1.0
export VERSIONDATE=20190923
wl-showstatus --package-version
export DEPENDENCIES=boost,gettext,lua,zlib,libpng,libogg,libvorbis,openal,glu,glew,sdl2,sdl2ttf,sdl2image
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSES.txt
export LICENSETYPE=GPL
export DOWNLOADURL="https://github.com/ValyriaTear/ValyriaTear/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/ValyriaTear/ValyriaTear/archive/$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/$VERSION.tar.gz
cd ValyriaTear-$VERSION
#mkdir -p build_test; cd build_test; cmake.exe -G"MSYS Makefiles" . -LH && echo OK; cd ..; rm -rf build_test
#rm -rf CMakeCache.txt CMakeFiles; cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release . -LH && echo OK
#export BUILDDEPENDENCIES=cmake
#export OPTIONALBUILDDEPENDENCIES=
# fix missing files
touch src/winver.h.in
cp -u icon.rc src/
# fix src/CMakeLists.txt
patch -ulbf src/CMakeLists.txt << EOF
@@ -138,7 +137,0 @@
-    FIND_PATH(MINGW_INCLUDE_DIR windows.h \$ENV{INCLUDE})
-    IF (MINGW_INCLUDE_DIR)
-        MESSAGE(STATUS "Found mingw headers: \${MINGW_INCLUDE_DIR}")
-        INCLUDE_DIRECTORIES(\${MINGW_INCLUDE_DIR})
-    ELSE()
-        MESSAGE(FATAL_ERROR "Unable to find mingw headers. Required for windres")
-    ENDIF()
EOF
sed -i.bak -e "s?SDL/?SDL2/?" src/utils/utils_pch.h
wl-showstatus configure &&
#PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ 
cmake.exe -Wno-dev -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DSDL_TTF_INCLUDE_DIR:PATH=$MINGWPREFIX/include/SDL2 -DSDL_TTF_LIBRARY:STRING="-lSDL2_ttf" -DSDL_IMAGE_INCLUDE_DIR:PATH=$MINGWPREFIX/include/SDL2 -DSDL_IMAGE_LIBRARY:STRING="-lSDL2_image" . &&
 wl-showstatus build-install &&
 make install/strip &&
    echo OK

#export BUILDDEPENDENCIES=cmake
#export OPTIONALBUILDDEPENDENCIES=
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cd build_static &&
# cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF .. &&
# cd .. &&
# wl-showstatus configure &&
# cd build_shared &&
# cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON .. &&
# cd .. &&
# wl-showstatus build-install &&
# make -Cbuild_static install/strip &&
# wl-showstatus build-install &&
# make -Cbuild_shared install/strip &&		
#    echo OK
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf ValyriaTear-$VERSION




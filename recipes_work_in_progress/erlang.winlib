export NAME="Erlang/OTP"
export STATUS=
export URL=http://www.erlang.org/
export BASENAME=erlang
export DESCRIPTION="Erlang is a programming language used to build massively scalable soft real-time systems with requirements on high availability. Erlang's runtime system has built-in support for concurrency, distribution and fault tolerance."
export CATEGORY=development
export TYPE=application
#export VERSION=17.5
#export VERSIONDATE=20150515
####error: #error Found no appropriate type to use for 'byte'
#export VERSION=18.0
#export VERSIONDATE=20150624
#export VERSION=18.1
#export VERSIONDATE=20150923
#export VERSION=18.2
#export VERSIONDATE=20151218
#export VERSION=18.2.1
#export VERSIONDATE=20151219
#export VERSION=18.3
#export VERSIONDATE=20160316
#export VERSION=19.0
#export VERSIONDATE=20160622
#export VERSION=19.1
#export VERSIONDATE=20160922
#export VERSION=19.2
#export VERSIONDATE=20161214
#export VERSION=19.3
#export VERSIONDATE=20170316
#export VERSION=20.0
#export VERSIONDATE=20170622
#export VERSION=20.1
#export VERSIONDATE=20170927
#export VERSION=20.2
#export VERSIONDATE=20171013
#export VERSION=20.3
#export VERSIONDATE=20180313
#export VERSION=21.0
#export VERSIONDATE=20180620
#export VERSION=21.1
#export VERSIONDATE=20180926
#export VERSION=21.2
#export VERSIONDATE=20181212
#export VERSION=21.3
#export VERSIONDATE=20190313
#export VERSION=22.0
#export VERSIONDATE=20190514
#export VERSION=22.1
#export VERSIONDATE=20190924
#export VERSION=22.2
#export VERSIONDATE=20200107
#export VERSION=22.3
#export VERSIONDATE=20200317
#export VERSION=23.1
#export VERSIONDATE=20200929
#export VERSION=23.2
#export VERSIONDATE=20201219
#export VERSION=23.3
#export VERSIONDATE=20210327
#export VERSION=24.0
#export VERSIONDATE=20210525
export VERSION=24.1
export VERSIONDATE=20211006
####make[1]: *** No rule to make target 'application'.  Stop.
wl-showstatus --package-version
export DEPENDANCIES=pthreads
export OPTIONALDEPENDANCIES=
export BUILDDEPENDANCIES=
export LICENSEFILE=EPLICENSE
export LICENSETYPE="Erlang Public License (EPL)"
export DOWNLOADURL="http://www.erlang.org/download.html otp_src_"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=http://www.erlang.org/download/otp_src_$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xfz $TARBALLDIR/$BASENAME/otp_src_$VERSION.tar.gz
cd otp_src_$VERSION
patch -ulbf erts/emulator/beam/sys.h << EOF
--- erts/emulator/beam/sys.h  2015-06-23 20:56:21.000000000 +0200
+++ erts/emulator/beam/sys.h  2015-06-24 21:07:56.839668300 +0200
@@ -454,3 +454,3 @@
 #else
-#error Found no appropriate type to use for 'byte'
+typedef uint_t byte;
 #endif
EOF
wl-showstatus configure &&
#mkdir -p m4 &&
#autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal &&
#./autogen.sh &&
#    echo OK
## fix building DLLs on 64-bit
#if ( echo $RUNPLATFORM | grep -q x86_64 ); then
# echo "AM_GNU_GETTEXT_VERSION([$(gettext --version|head -n1|sed -e "s/^.* \([0-9\.]*\) *$/\1/")])" >> configure.ac &&
# autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal
#fi
#INTLTOOL_PERL="$PERLDIR/bin/perl.exe" 
#PERL="$PERLDIR/bin/perl.exe -I$PERLDIR/lib" 
#PYTHON=$PYDIR/python.exe 
#PYTHON=$PYDIR/python.exe C_INCLUDE_PATH=$C_INCLUDE_PATH:$PYDIR/include 
#./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM LDFLAGS="-Wl,--as-needed -Wl,-no-undefined" &&
#./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM LDFLAGS="-Wl,--as-needed" &&
#./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM &&
#./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --without-javac CC=${CC:-gcc} CXX=${CXX:-g++} &&
./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM --disable-fips --disable-esock --with-termcap --with-ssl --without-javac CC=${CC:-gcc} CXX=${CXX:-g++} &&
 if ( echo $RUNPLATFORM | grep -q x86_64 ); then
  eval `./otp_build env_win32 x64`
  mkdir -p make/win32 &&
  cp -f make/*-mingw*/* make/win32/
 else
  eval `./otp_build env_win32` &&
  mkdir -p make/win32 &&
  cp -f make/*-mingw*/* make/win32/
 fi &&
 wl-showstatus build &&
 make &&
 #PATH=$(pwd)/src/library/tools/src:$PATH make &&
 wl-showstatus build-install &&
 make install-strip &&
    echo OK


wl-showstatus configure &&
#mkdir -p m4 &&
#autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal &&
#./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM CC=${CC:-gcc} &&
./configure --prefix=$INSTALLPREFIX --enable-m$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo 64; else echo 32; fi)-build CC=${CC:-gcc} &&
####TO DO: OpenGL, wxWidgets
 wl-showstatus build &&
 make &&
 wl-showstatus build-install &&
 make install-strip &&
    echo OK


# fix for MinGW
if ! mingw32-gcc.exe &> /dev/null; then
 sed -i.bak -e "s/mingw32-/$(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo x86_64-w64-mingw32; else echo i686-w64-mingw32; fi)-/" otp_build
fi
wl-showstatus configure &&
 #eval $(./otp_build env_win32 $(if ( echo $RUNPLATFORM | grep -q x86_64 ); then echo x64; else echo x86; fi)) &&
 eval $(./otp_build env_mingw32) &&
 ./otp_build autoconf &&
 ./otp_build configure --prefix=$INSTALLPREFIX &&
 wl-showstatus build &&
 ./otp_build boot -a &&
 ./otp_build release -a $INSTALLPREFIX &&
 wl-showstatus install &&
 ./otp_build installer_win32 &&
    echo OK

# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf otp_src_$VERSION




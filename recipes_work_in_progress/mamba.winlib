export NAME="mamba"
export STATUS=
export URL=https://github.com/mamba-org/mamba
export BASENAME=mamba
export DESCRIPTION="The Fast Cross-Platform Package Manager - mamba is a reimplementation of the conda package manager in C++"
export CATEGORY=
export TYPE=application
#export VERSION=2024.03.25
#export VERSIONDATE=20240403
#export VERSION=2024.05.04
#export VERSIONDATE=20240607
#export VERSION=2024.05.29
#export VERSIONDATE=20240615
#export VERSION=2024.07.08
#export VERSIONDATE=20240715
#export VERSION=2024.07.26
#export VERSIONDATE=20240727
#export VERSION=2024.08.19
#export VERSIONDATE=20240819
#export VERSION=2024.08.26
#export VERSIONDATE=20240827
#export VERSION=2024.08.29
#export VERSIONDATE=20240830
#export VERSION=2024.08.31
#export VERSIONDATE=20240831
#export VERSION=2024.09.13
#export VERSIONDATE=20240914
#export VERSION=2024.09.21
#export VERSIONDATE=20240923
#export VERSION=2024.09.25
#export VERSIONDATE=20240926
#export VERSION=2024.09.30
#export VERSIONDATE=20241001
#export VERSION=2024.10.02
#export VERSIONDATE=20241112
#export VERSION=2024.11.22
#export VERSIONDATE=20241122
export VERSION=2024.12.09
export VERSIONDATE=20241210
wl-showstatus --package-version
export DEPENDENCIES=tl-expected
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=cmake,ninja
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=LICENSE
export LICENSETYPE=BSD
export DOWNLOADURL="https://github.com/mamba-org/mamba/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
export DOWNLOADSOURCEURL=https://github.com/mamba-org/mamba/archive/refs/tags/$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
tar xz --force-local -f $TARBALLDIR/$BASENAME/$VERSION.tar.gz
cd $BASENAME-$VERSION
# fix libmamba/CMakeLists.txt (version >= 2024.03.25)
patch -ulbf libmamba/CMakeLists.txt << EOF
@@ -446,3 +446,3 @@
             find_package(LibArchive REQUIRED)
-            find_package(CURL CONFIG REQUIRED)
+            find_package(CURL REQUIRED)
             find_library(LIBLZMA_LIBRARIES lzma REQUIRED)
@@ -450,3 +450,3 @@
             find_library(LZO2_LIBRARY NAMES lzo2)
-            find_package(zstd CONFIG REQUIRED)
+            find_package(zstd REQUIRED)
             find_library(BZIP2_LIBRARIES NAMES bz2)
@@ -469,3 +469,3 @@
                 \${CHARSET_LIBRARY}
-                zstd::libzstd_static
+                \${ZSTD_LIBRARY}
                 \${LZ4_LIBRARY}
@@ -515,6 +515,6 @@
             \${LibArchive_LIBRARIES}
-            zstd::libzstd_shared
+            \${zstd_LIBRARIES}
             \${CURL_LIBRARIES}
             \${OPENSSL_LIBRARIES}
-            zstd::libzstd_shared
+            \${zstd_LIBRARIES}
             BZip2::BZip2
@@ -545,3 +545,3 @@
 
-    if (WIN32)
+    if (MSVC)
         find_path(
EOF
# fix cmake/Checks.cmake (version >= 2024.09.13)
patch -ulbf cmake/Checks.cmake << EOF
@@ -9,3 +9,3 @@
         message(
-            \${log_level}
+            WARNING
             "Expected type \\"\${expected_type}\\" for target \\"\${target}\\""EOF
EOF
# fix libmamba/CMakeLists.txt (version >= 2024.09.25)
patch -ulbf libmamba/CMakeLists.txt << EOF
@@ -606,5 +606,5 @@
                 simdjson::simdjson
-                zstd::libzstd_shared
-                solv::libsolv
-                solv::libsolvext
+                zstd
+                solv
+                solvext
                 solv::cpp
EOF
# fix libmamba/ext/solv-cpp/CMakeLists.txt (version >= 2024.09.25)
patch -ulbf libmamba/ext/solv-cpp/CMakeLists.txt << EOF
@@ -20,7 +20,3 @@

-if(BUILD_SHARED)
-    set(LIBSOLV_DEPS solv::libsolv solv::libsolvext)
-else()
-    set(LIBSOLV_DEPS solv::libsolv_static solv::libsolvext_static)
-endif()
+set(LIBSOLV_DEPS solv solvext)

EOF
mkdir -p build_static build_shared &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DBUILD_STATIC:BOOL=ON -DBUILD_SHARED:BOOL=OFF -DBUILD_LIBMAMBA:BOOL=ON -DBUILD_LIBMAMBAPY:BOOL=OFF -DBUILD_LIBMAMBA_TESTS:BOOL=OFF -DPython3_EXECUTABLE:PATH=$PYDIR/python.exe -S. -Bbuild_static &&
 #-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DBUILD_STATIC:BOOL=OFF -DBUILD_SHARED:BOOL=ON -DBUILD_LIBMAMBA:BOOL=ON -DBUILD_LIBMAMBAPY:BOOL=OFF -DBUILD_LIBMAMBA_TESTS:BOOL=OFF -DPython3_EXECUTABLE:PATH=$PYDIR/python.exe -S. -Bbuild_shared &&
 ## fix execution of Python scripts
 #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|glib-genmarshal\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
 ## fix missing link libraries
 #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lws2_32/" build_shared/build.ninja &&
 #wl-showstatus build &&
 #cmake.exe --build build_static &&
 #ninja -Cbuild_static &&
 #wl-showstatus build &&
 #cmake.exe --build build_shared &&
 #ninja -Cbuild_shared &&
 wl-showstatus build-install &&
 #cmake.exe --install build_static --strip &&
 #cmake.exe --build build_static --target "install/strip" &&
 #cmake.exe --build build_static --target "library/install/strip" &&
 ninja -Cbuild_static install/strip &&
 #ninja -Cbuild_static library/install/strip &&
 wl-showstatus build-install &&
 #cmake.exe --install build_shared --strip &&
 #cmake.exe --build build_shared --target "install/strip" &&
 ninja -Cbuild_shared install/strip &&
    echo OK
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION




export NAME="OMR"
export STATUS=
export URL=https://www.eclipse.org/omr/
export BASENAME=omr
export DESCRIPTION="Eclipse OMR(TM) Cross platform components for building reliable, high performance language runtimes"
export CATEGORY=
export TYPE=library
#export VERSION=0.1.0
#export VERSIONDATE=20220928
#export VERSION=0.2.0
#export VERSIONDATE=20240709
#export VERSION=0.3.0
#export VERSIONDATE=20241018
#export VERSION=0.4.0
#export VERSIONDATE=20250121
#export VERSION=0.5.0
#export VERSIONDATE=20250401
#export VERSION=0.6.0
#export VERSIONDATE=20250705
export VERSION=0.7.0
export VERSIONDATE=20251001
wl-showstatus --package-version
export DEPENDENCIES=
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=COPYING
#export LICENSEFILE=LICENSE
export LICENSETYPE=
export DOWNLOADURL="https://github.com/eclipse/omr/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://github.com/eclipse/omr/releases/download/omr-$VERSION/omr-v$VERSION-source.tgz
export DOWNLOADSOURCEURL=https://github.com/eclipse/omr/archive/refs/tags/omr-$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
mkdir -p $BASENAME-$VERSION
#tar xz --force-local -f $TARBALLDIR/$BASENAME/omr-v$VERSION-source.tgz -C$BASENAME-$VERSION
tar xz --force-local -f $TARBALLDIR/$BASENAME/omr-$VERSION.tar.gz -C$BASENAME-$VERSION
cd $BASENAME-$VERSION/omr*
# fix omrmakefiles/rules.win.mk (version >= 0.3.0)
patch -ulbf omrmakefiles/rules.win.mk << EOF
@@ -29,3 +29,3 @@
 ifeq (1,\$(OMR_ENV_DATA64))
-  GLOBAL_ASFLAGS+=/c /Cp /nologo -DOMR_OS_WINDOWS -DWIN32 -DWIN64 -DJ9HAMMER
+  GLOBAL_ASFLAGS+=-c -DOMR_OS_WINDOWS -DWIN32 -DWIN64 -DJ9HAMMER
   GLOBAL_CPPFLAGS+=-D_AMD64_=1 -DOMR_OS_WINDOWS -DWIN64 -D_WIN64 -DWIN32 -D_WIN32 -DJ9HAMMER
@@ -38,3 +38,3 @@
   # /Zm Enable MASM 5.10 compatibility
-  GLOBAL_ASFLAGS+=/c /Cp /nologo /safeseh /coff /Gd -DOMR_OS_WINDOWS -DWIN32 /Zm
+  GLOBAL_ASFLAGS+=-c /safeseh /coff /Gd -DOMR_OS_WINDOWS -DWIN32 /Zm
   GLOBAL_CPPFLAGS+=-D_X86_=1 -DWIN32 -D_WIN32 -DOMR_OS_WINDOWS
@@ -44,4 +44,4 @@
 GLOBAL_CPPFLAGS+=-D_CRT_SECURE_NO_WARNINGS
-GLOBAL_CPPFLAGS+=-DCRTAPI1=_cdecl -DCRTAPI2=_cdecl -nologo
-GLOBAL_CPPFLAGS+=-D_WIN95 -D_WIN32_WINDOWS=0x0500 /D_WIN32_DCOM
+GLOBAL_CPPFLAGS+=-DCRTAPI1=_cdecl -DCRTAPI2=_cdecl
+GLOBAL_CPPFLAGS+=-D_WIN95 -D_WIN32_WINDOWS=0x0500 -D_WIN32_DCOM
 GLOBAL_CPPFLAGS+=-D_MT
@@ -60,4 +60,4 @@
 # -Zm400 max memory is 400% the default maxiumum (~300 mb)
-GLOBAL_CFLAGS+=-Zm400
-GLOBAL_CXXFLAGS+=-Zm400
+GLOBAL_CFLAGS+=
+GLOBAL_CXXFLAGS+=

@@ -70,3 +70,3 @@
 ifeq (\$(OMR_OPTIMIZE),1)
-  COPTFLAGS=/Ox
+  COPTFLAGS=-O3
 endif
@@ -77,4 +77,4 @@
 ifeq (\$(OMR_WARNINGS_AS_ERRORS),1)
-    GLOBAL_CFLAGS+=-WX
-    GLOBAL_CXXFLAGS+=-WX
+    GLOBAL_CFLAGS+=-Wall
+    GLOBAL_CXXFLAGS+=-Wall
 endif
@@ -83,5 +83,5 @@
 ifeq (\$(OMR_ENHANCED_WARNINGS),1)
-    GLOBAL_CFLAGS+=-W3
-    GLOBAL_CXXFLAGS+=-W3
-    GLOBAL_ASFLAGS+=-W3
+    GLOBAL_CFLAGS+=-pedantic-errors
+    GLOBAL_CXXFLAGS+=-pedantic-errors
+    GLOBAL_ASFLAGS+=-pedantic-errors
 endif
@@ -95,6 +95,6 @@
     # /Zi add debug symbols
-    GLOBAL_LDFLAGS+=/debug
-    GLOBAL_ASFLAGS+=/Zi /Zd
-    GLOBAL_CFLAGS+=/Zi
-    GLOBAL_CXXFLAGS+=/Zi
+    GLOBAL_LDFLAGS+=
+    GLOBAL_ASFLAGS+=
+    GLOBAL_CFLAGS+=
+    GLOBAL_CXXFLAGS+=
 endif
@@ -108,5 +108,5 @@
 ifeq (1,\$(DO_LINK))
-  GLOBAL_LDFLAGS+=/opt:icf /opt:ref
+  GLOBAL_LDFLAGS+=
   ifeq (0,\$(OMR_ENV_DATA64))
-    GLOBAL_LDFLAGS+=/SAFESEH
+    GLOBAL_LDFLAGS+=
   endif
@@ -125,9 +125,9 @@

-  GLOBAL_LDFLAGS+=-subsystem:\$(WIN_SUBSYSTEM_TYPE) -machine:\$(WIN_TARGET_MACHINE)
+  GLOBAL_LDFLAGS+=-m\$(WIN_SUBSYSTEM_TYPE)

   ## EXE-specific options
-  OMR_MK_EXEFLAGS+=/INCREMENTAL:NO /NOLOGO /LARGEADDRESSAWARE
+  OMR_MK_EXEFLAGS+= --enable-large-address-aware

   # basic subsystem specific libraries, less the C Run-Time
-  OMR_MK_EXELIBS+=kernel32.lib wsock32.lib advapi32.lib
+  OMR_MK_EXELIBS+=-lkernel32 -lws2_32 -ladvapi32
 ## ifdef UMA_NO_CONSOLE
@@ -142,3 +142,3 @@
 # Microsoft calls this a "link option"
-  OMR_MK_EXEFLAGS+=wsetargv.obj
+  OMR_MK_EXEFLAGS+=
 ## endif # (\$(UMA_NO_CRT),1)
@@ -146,3 +146,3 @@
   ifeq (\$(OMR_ENV_DATA64),1)
-    OMR_MK_EXEFLAGS+=/NODEFAULTLIB:MSVCRTD
+    OMR_MK_EXEFLAGS+=
   endif
@@ -150,3 +150,3 @@
   ## DLL-specific options
-  OMR_MK_DLLFLAGS+=/INCREMENTAL:NO /NOLOGO
+  OMR_MK_DLLFLAGS+=
   ifeq (1,\$(OMR_ENV_DATA64))
EOF
wl-showstatus configure &&
 #wl-showstatus preconfigure &&
 #mkdir -p m4 &&
 ##intltoolize -f -c &&
 #autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal &&
 #./autogen.sh &&
 #    echo OK
 ## fix building DLLs on 64-bit
 #if ( echo $RUNPLATFORM | grep -q x86_64 ); then
 # echo "AM_GNU_GETTEXT_VERSION([$(gettext --version|head -n1|sed -e "s/^.* \([0-9\.]*\) *$/\1/")])" >> configure.ac &&
 # autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal
 #fi
 #PATH=$PATH:$PERLDIR/../c/bin INTLTOOL_PERL="$PERLDIR/bin/perl.exe" 
 #PERL="$PERLDIR/bin/perl.exe -I$PERLDIR/lib" 
 #PYTHON=$PYDIR/python.exe 
 #PYTHON=$PYDIR/python.exe C_INCLUDE_PATH=$C_INCLUDE_PATH:$PYDIR/include 
 #PKG_CONFIG_PATH=$MINGWPREFIX/libav/lib/pkgconfig${PKG_CONFIG_PATH:+:$PKG_CONFIG_PATH} 
 #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --enable-shared --enable-static --host=$RUNPLATFORM LDFLAGS="-Wl,-no-undefined -Wl,--as-needed" &&
 ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM &&
 ## fix building DLLs
 #sed -i.bak -e "s/\(allow_undefined=\)yes/\1no/" libtool &&
 ## fix detection of shared libraries
 #sed -i.bak2 -e "s/\(deplibs_check_method=\"\)[^\"]*/\1file_magic ^x86 archive import|^x86 DLL|PE32+* executable (DLL)|pe-i386|pe-x86-64/; s/'file format pe-i386[^']*'/\"\$deplibs_check_method\"/" libtool &&
 #sed -i.bak2 -e "s/\(deplibs_check_method=\"\)[^\"]*/\1none/" libtool &&
 #sed -i.bak2 -e "s/\(deplibs_check_method=\"\)[^\"]*/\1pass_all/" libtool &&
 wl-showstatus build &&
 make &&
 wl-showstatus build-install &&
 make install-strip &&
    echo OK
    ls -l $INSTALLPREFIX/lib/pkgconfig $INSTALLPREFIX/share/pkgconfig
    make install-pkgconfigDATA

# avoid existing include_core/omrcfg.h (version >= 0.6.0)
mv include_core/omrcfg.h include_core/omrcfg.h.orig
# fix missing mc.exe in cmake/modules/platform/os/win.cmake (version >= 0.6.0)
patch -ulbf cmake/modules/platform/os/win.cmake << EOF
@@ -49,2 +49,5 @@
 if(NOT CMAKE_MC_COMPILER)
+       find_program(CMAKE_MC_COMPILER windmc.exe HINTS "\${kit_dir}")
+endif()
+if(NOT CMAKE_MC_COMPILER)
        message(SEND_ERROR "Failed to find message compiler (mc.exe)")
EOF

#grep -wi add_library $(find -name CMakeLists.txt -or -name '*.cmake')
#mkdir -p build_test && cmake.exe -Wno-dev -G"MSYS Makefiles" -DCMAKE_POLICY_VERSION_MINIMUM:STRING=3.5 -S. -Bbuild_test -LH && echo OK; rm -rf build_test

#export BUILDDEPENDENCIES=cmake
#export OPTIONALBUILDDEPENDENCIES=
#PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ 
#-DCMAKE_SYSTEM_NAME=Windows 
#-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
#mkdir -p build_win &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -S. -Bbuild_win &&
# #wl-showstatus build &&
# #make -Cbuild_win &&
# wl-showstatus build-install &&
# make -Cbuild_win install/strip &&
#    echo OK

#export BUILDDEPENDENCIES=cmake,ninja
#export OPTIONALBUILDDEPENDENCIES=
#PATH=$PATH:$MINGWPREFIX/qt/bin QTDIR=$MINGWPREFIX/qt QMAKESPEC=$MINGWPREFIX/qt/mkspecs/win32-g++ 
#-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
mkdir -p build_win &&
 wl-showstatus configure &&
 cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DCMAKE_POLICY_VERSION_MINIMUM:STRING=3.5 -S. -Bbuild_win &&
 #wl-showstatus build &&
 #ninja -Cbuild_win &&
 wl-showstatus build-install &&
 ninja -Cbuild_win install/strip &&
    echo OK

#export BUILDDEPENDENCIES=cmake,ninja
#export OPTIONALBUILDDEPENDENCIES=
#mkdir -p build_static build_shared &&
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=OFF -DCMAKE_POLICY_VERSION_MINIMUM:STRING=3.5 -S. -Bbuild_static &&
# #-DPKG_CONFIG_EXECUTABLE:FILEPATH=$(which pkg-config.exe) 
# wl-showstatus configure &&
# cmake.exe -Wno-dev -GNinja -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_SHARED_LIBS:BOOL=ON -DCMAKE_POLICY_VERSION_MINIMUM:STRING=3.5 -S. -Bbuild_shared &&
# ## fix execution of Python scripts
# #sed -i.bak -e "s?\(COMMAND\|POST_BUILD\)\( *=.*\&\& *\)\([^ ]*\)\(\.py\|glib-mkenums\|glib-genmarshal\|g-ir-scanner\)\( \)?\1\2$(echo $PYDIR/python.exe|sed -e "s?^/\([a-zA-Z]\)/?\1:\\\\\\\\?; s?/?\\\\\\\\?g") \3\4\5?" build_*/build.ninja &&
# ## fix missing link libraries
# #sed -i.bak -e "s/^\s*LINK_LIBRARIES\s*=.*$/& -Wl,--as-needed -lws2_32/" build_shared/build.ninja &&
# #wl-showstatus build &&
# #ninja -Cbuild_static &&
# #wl-showstatus build &&
# #ninja -Cbuild_shared &&
# wl-showstatus build-install &&
# ninja -Cbuild_static install/strip &&
# wl-showstatus build-install &&
# ninja -Cbuild_shared install/strip &&
#    echo OK

# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd ../.. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION



#ifdef __MINGW32__
int APIENTRY wWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, PWSTR pCmdLine, int nCmdShow)
{
        int argc;
        LPWSTR* argv;
        if ((argv = CommandLineToArgvW(pCmdLine, &argc)) == NULL)
                return 1;
        return wmain(argc, argv, GetEnvironmentStringsW());
}
#endif

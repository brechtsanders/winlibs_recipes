export NAME="libslax"
export STATUS=
export URL=http://www.libslax.org/
export BASENAME=libslax
export DESCRIPTION="libslax is a C implementation of the SLAX programming language, a dialect of XSLT that is more perl/C-like and easier to read/code/use."
export CATEGORY=fileformat
export TYPE=library
#export VERSION=0.20.1
#export VERSIONDATE=20160322
#export VERSION=0.20.2
#export VERSIONDATE=20160927
#export VERSION=0.21.0
#export VERSIONDATE=20170421
#export VERSION=0.21.2
#export VERSIONDATE=20170422
#export VERSION=0.22.0
#export VERSIONDATE=20170513
#export VERSION=0.22.1
#export VERSIONDATE=20191001
#export VERSION=0.23.1
#export VERSIONDATE=20250228
#export VERSION=0.24.0
#export VERSIONDATE=20250317
#export VERSION=3.0.0
#export VERSIONDATE=20250327
#export VERSION=3.1.0
#export VERSIONDATE=20250327
#export VERSION=3.1.2
#export VERSIONDATE=20250401
#export VERSION=3.1.3
#export VERSIONDATE=20250523
export VERSION=3.1.4
export VERSIONDATE=20250729
wl-showstatus --package-version
export DEPENDENCIES=sqlite3,libxml2,libxslt,libcurl,sys_queue_h,mman-win32
export OPTIONALDEPENDENCIES=
export BUILDDEPENDENCIES=
export OPTIONALBUILDDEPENDENCIES=
export LICENSEFILE=COPYING
export LICENSETYPE=
export DOWNLOADURL="https://github.com/Juniper/libslax/releases"
export INSTALLPREFIX=`pwd`/inst_$BASENAME-$VERSION
#export DOWNLOADSOURCEURL=https://github.com/Juniper/libslax/releases/download/$VERSION/$BASENAME-$VERSION.tar.gz
export DOWNLOADSOURCEURL=https://github.com/Juniper/libslax/archive/refs/tags/$VERSION.tar.gz
wl-showstatus download
wl-download -v -d $TARBALLDIR/$BASENAME $DOWNLOADSOURCEURL
wl-wait4deps
wl-showstatus extract
#tar xz --force-local -f $TARBALLDIR/$BASENAME/$BASENAME-$VERSION.tar.gz
tar xz --force-local -f $TARBALLDIR/$BASENAME/$VERSION.tar.gz
cd $BASENAME-$VERSION
# fix missing files
mkdir -p winfix/sys winfix/netinet winfix/arpa
echo "#include <winsock2.h>" > winfix/sys/socket.h
touch winfix/netinet/in.h winfix/arpa/inet.h winfix/netdb.h winfix/resolv.h winfix/paths.h winfix/glob.h
cat > winfix/sys/syslog.h << EOF
EOF
# fix missing uint in libpsu/psubase64.c (version >= 0.21.0)
sed -i.bak -e "s/\buint\b/unsigned int/g" libpsu/psubase64.c
# fix missing uint in parrotdb/palog2.h (version >= 0.21.0)
sed -i.bak -e "s/\bu_\(int[0-9]*_t\)\b/u\1/g" parrotdb/palog2.h
# fix missing bzero() (version >= 0.23.1)
sed -i.bak "1i #if defined(_WIN32) && \!defined(bzero)\n#define bzero(b,len) memset(b, 0, len)\n#endif" $(grep -lw bzero $(find -name '*.c' -or -name '*.h'))
wl-showstatus preconfigure &&
 autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal &&
 wl-showstatus configure &&
 #./autogen.sh &&
 #    echo OK
 ## fix building DLLs on 64-bit
 #if ( echo $RUNPLATFORM | grep -q x86_64 ); then
 # echo "AM_GNU_GETTEXT_VERSION([$(gettext --version|head -n1|sed -e "s/^.* \([0-9\.]*\) *$/\1/")])" >> configure.ac &&
 # autoreconf -f -i -I m4 -I $MINGWPREFIX/share/aclocal
 #fi
 #INTLTOOL_PERL="$PERLDIR/bin/perl.exe" 
 #PERL="$PERLDIR/bin/perl.exe -I$PERLDIR/lib" 
 #PYTHON=$PYDIR/python.exe 
 #PYTHON=$PYDIR/python.exe C_INCLUDE_PATH=$PYDIR/include${C_INCLUDE_PATH:+:$C_INCLUDE_PATH} 
 #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM LDFLAGS="-Wl,--as-needed -Wl,-no-undefined" &&
 #./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM LDFLAGS="-Wl,--as-needed" &&
 ./configure --prefix=$INSTALLPREFIX --build=$BUILDPLATFORM --host=$RUNPLATFORM CFLAGS="-I$(pwd)/winfix -I$MINGWPREFIX/win32ports/include -I$MINGWPREFIX/include/mman-win32" LDFLAGS="-Wl,--as-needed -lmman" &&
 ## fix building DLLs
 #sed -i.bak -e "s/\(allow_undefined=\)yes/\1no/" libtool &&
 #wl-showstatus build &&
 #make &&
 wl-showstatus build-install &&
 make install-strip &&
    ls -l $INSTALLPREFIX/lib/pkgconfig $INSTALLPREFIX/share/pkgconfig
    make install-pkgconfigDATA
#    mkdir -p build_test; cd build_test; cmake.exe -G"MSYS Makefiles" . -LH && echo OK; cd ..; rm -rf build_test
#wl-showstatus configure &&
#rm -f CMakeCache.txt; cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release . -LH && echo OK
#cmake.exe -G"MSYS Makefiles" -DCMAKE_INSTALL_PREFIX:PATH=$INSTALLPREFIX -DCMAKE_BUILD_TYPE:STRING=Release . &&
# wl-showstatus build-install &&
# make install/strip &&
#    echo OK
# wl-makepackage -c -d && wl-install -d $BASENAME-$VERSION && cd .. && wl-showstatus cleanup && rm -rf $BASENAME-$VERSION



